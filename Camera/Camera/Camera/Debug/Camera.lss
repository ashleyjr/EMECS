
Camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006088  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00006088  00006088  0000e088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000910  20000000  00006090  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000198  20000910  000069a0  00010910  2**2
                  ALLOC
  4 .stack        00001000  20000aa8  00006b38  00010910  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00010910  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  0001093a  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002e132  00000000  00000000  000109ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000080b1  00000000  00000000  0003eadd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000011c8  00000000  00000000  00046b90  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000f38  00000000  00000000  00047d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000328fb  00000000  00000000  00048c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001ac87  00000000  00000000  0007b58b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000e5d19  00000000  00000000  00096212  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000026d4  00000000  00000000  0017bf2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000edca  00000000  00000000  0017e600  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20001aa8 	.word	0x20001aa8
       4:	000034b5 	.word	0x000034b5
       8:	000034b1 	.word	0x000034b1
       c:	000034b1 	.word	0x000034b1
      10:	000034b1 	.word	0x000034b1
      14:	000034b1 	.word	0x000034b1
      18:	000034b1 	.word	0x000034b1
	...
      2c:	000034b1 	.word	0x000034b1
      30:	000034b1 	.word	0x000034b1
      34:	00000000 	.word	0x00000000
      38:	000034b1 	.word	0x000034b1
      3c:	000034b1 	.word	0x000034b1
      40:	000034b1 	.word	0x000034b1
      44:	00000b79 	.word	0x00000b79
      48:	00000b8d 	.word	0x00000b8d
      4c:	00000ba1 	.word	0x00000ba1
      50:	00000bb5 	.word	0x00000bb5
      54:	00000bc9 	.word	0x00000bc9
      58:	00000bdd 	.word	0x00000bdd
      5c:	00000bf1 	.word	0x00000bf1
      60:	00000c05 	.word	0x00000c05
      64:	00000c19 	.word	0x00000c19
      68:	00000c2d 	.word	0x00000c2d
      6c:	00000c41 	.word	0x00000c41
      70:	00000c55 	.word	0x00000c55
      74:	00000c69 	.word	0x00000c69
      78:	00000c7d 	.word	0x00000c7d
      7c:	00000c91 	.word	0x00000c91
      80:	00000ca5 	.word	0x00000ca5
      84:	000034b1 	.word	0x000034b1
      88:	000034b1 	.word	0x000034b1
      8c:	000034b1 	.word	0x000034b1
      90:	000034b1 	.word	0x000034b1
      94:	000034b1 	.word	0x000034b1
      98:	000034b1 	.word	0x000034b1
      9c:	000034b1 	.word	0x000034b1
      a0:	000034b1 	.word	0x000034b1
      a4:	0000042d 	.word	0x0000042d
      a8:	00000445 	.word	0x00000445
      ac:	0000045d 	.word	0x0000045d
      b0:	00000475 	.word	0x00000475
      b4:	0000048d 	.word	0x0000048d
      b8:	000004a5 	.word	0x000004a5
      bc:	000004bd 	.word	0x000004bd
      c0:	000004d5 	.word	0x000004d5
      c4:	000004ed 	.word	0x000004ed
      c8:	00000505 	.word	0x00000505
      cc:	0000051d 	.word	0x0000051d
      d0:	00000535 	.word	0x00000535
      d4:	000034b1 	.word	0x000034b1
      d8:	000034b1 	.word	0x000034b1
      dc:	000034b1 	.word	0x000034b1
      e0:	000034b1 	.word	0x000034b1
      e4:	000034b1 	.word	0x000034b1
      e8:	000034b1 	.word	0x000034b1
      ec:	000034b1 	.word	0x000034b1
      f0:	000034b1 	.word	0x000034b1
      f4:	000034b1 	.word	0x000034b1
      f8:	000034b1 	.word	0x000034b1
      fc:	000034b1 	.word	0x000034b1
     100:	000034b1 	.word	0x000034b1
     104:	000034b1 	.word	0x000034b1
     108:	000034b1 	.word	0x000034b1
     10c:	000034b1 	.word	0x000034b1
     110:	000034b1 	.word	0x000034b1
     114:	000034b1 	.word	0x000034b1
     118:	000034b1 	.word	0x000034b1
     11c:	000034b1 	.word	0x000034b1
     120:	000034b1 	.word	0x000034b1
     124:	000034b1 	.word	0x000034b1
     128:	000034b1 	.word	0x000034b1
     12c:	000034b1 	.word	0x000034b1
     130:	000034b1 	.word	0x000034b1
     134:	0000144d 	.word	0x0000144d
     138:	000034b1 	.word	0x000034b1
     13c:	00001465 	.word	0x00001465
     140:	000034b1 	.word	0x000034b1
     144:	000034b1 	.word	0x000034b1
     148:	000034b1 	.word	0x000034b1
     14c:	000034b1 	.word	0x000034b1
     150:	000034b1 	.word	0x000034b1
     154:	000034b1 	.word	0x000034b1
     158:	000034b1 	.word	0x000034b1
     15c:	000034b1 	.word	0x000034b1
     160:	000034b1 	.word	0x000034b1
     164:	000034b1 	.word	0x000034b1
     168:	000034b1 	.word	0x000034b1
     16c:	000034b1 	.word	0x000034b1
     170:	000034b1 	.word	0x000034b1
     174:	0000147d 	.word	0x0000147d
     178:	00001495 	.word	0x00001495
     17c:	000034b1 	.word	0x000034b1

00000180 <deregister_tm_clones>:
     180:	b508      	push	{r3, lr}
     182:	4805      	ldr	r0, [pc, #20]	; (198 <deregister_tm_clones+0x18>)
     184:	4b05      	ldr	r3, [pc, #20]	; (19c <deregister_tm_clones+0x1c>)
     186:	1a19      	subs	r1, r3, r0
     188:	2906      	cmp	r1, #6
     18a:	d800      	bhi.n	18e <deregister_tm_clones+0xe>
     18c:	bd08      	pop	{r3, pc}
     18e:	4a04      	ldr	r2, [pc, #16]	; (1a0 <deregister_tm_clones+0x20>)
     190:	2a00      	cmp	r2, #0
     192:	d0fb      	beq.n	18c <deregister_tm_clones+0xc>
     194:	4790      	blx	r2
     196:	e7f9      	b.n	18c <deregister_tm_clones+0xc>
     198:	00006090 	.word	0x00006090
     19c:	00006093 	.word	0x00006093
     1a0:	00000000 	.word	0x00000000

000001a4 <register_tm_clones>:
     1a4:	b508      	push	{r3, lr}
     1a6:	4807      	ldr	r0, [pc, #28]	; (1c4 <register_tm_clones+0x20>)
     1a8:	4b07      	ldr	r3, [pc, #28]	; (1c8 <register_tm_clones+0x24>)
     1aa:	1a19      	subs	r1, r3, r0
     1ac:	108a      	asrs	r2, r1, #2
     1ae:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
     1b2:	1059      	asrs	r1, r3, #1
     1b4:	d100      	bne.n	1b8 <register_tm_clones+0x14>
     1b6:	bd08      	pop	{r3, pc}
     1b8:	4a04      	ldr	r2, [pc, #16]	; (1cc <register_tm_clones+0x28>)
     1ba:	2a00      	cmp	r2, #0
     1bc:	d0fb      	beq.n	1b6 <register_tm_clones+0x12>
     1be:	4790      	blx	r2
     1c0:	e7f9      	b.n	1b6 <register_tm_clones+0x12>
     1c2:	bf00      	nop
     1c4:	00006090 	.word	0x00006090
     1c8:	00006090 	.word	0x00006090
     1cc:	00000000 	.word	0x00000000

000001d0 <__do_global_dtors_aux>:
     1d0:	b510      	push	{r4, lr}
     1d2:	4c06      	ldr	r4, [pc, #24]	; (1ec <__do_global_dtors_aux+0x1c>)
     1d4:	7823      	ldrb	r3, [r4, #0]
     1d6:	b943      	cbnz	r3, 1ea <__do_global_dtors_aux+0x1a>
     1d8:	f7ff ffd2 	bl	180 <deregister_tm_clones>
     1dc:	4804      	ldr	r0, [pc, #16]	; (1f0 <__do_global_dtors_aux+0x20>)
     1de:	b110      	cbz	r0, 1e6 <__do_global_dtors_aux+0x16>
     1e0:	4804      	ldr	r0, [pc, #16]	; (1f4 <__do_global_dtors_aux+0x24>)
     1e2:	f3af 8000 	nop.w
     1e6:	2101      	movs	r1, #1
     1e8:	7021      	strb	r1, [r4, #0]
     1ea:	bd10      	pop	{r4, pc}
     1ec:	20000910 	.word	0x20000910
     1f0:	00000000 	.word	0x00000000
     1f4:	00006090 	.word	0x00006090

000001f8 <frame_dummy>:
     1f8:	b508      	push	{r3, lr}
     1fa:	4b08      	ldr	r3, [pc, #32]	; (21c <frame_dummy+0x24>)
     1fc:	b11b      	cbz	r3, 206 <frame_dummy+0xe>
     1fe:	4808      	ldr	r0, [pc, #32]	; (220 <frame_dummy+0x28>)
     200:	4908      	ldr	r1, [pc, #32]	; (224 <frame_dummy+0x2c>)
     202:	f3af 8000 	nop.w
     206:	4808      	ldr	r0, [pc, #32]	; (228 <frame_dummy+0x30>)
     208:	6801      	ldr	r1, [r0, #0]
     20a:	b111      	cbz	r1, 212 <frame_dummy+0x1a>
     20c:	4a07      	ldr	r2, [pc, #28]	; (22c <frame_dummy+0x34>)
     20e:	b102      	cbz	r2, 212 <frame_dummy+0x1a>
     210:	4790      	blx	r2
     212:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     216:	f7ff bfc5 	b.w	1a4 <register_tm_clones>
     21a:	bf00      	nop
     21c:	00000000 	.word	0x00000000
     220:	00006090 	.word	0x00006090
     224:	20000914 	.word	0x20000914
     228:	00006090 	.word	0x00006090
     22c:	00000000 	.word	0x00000000

00000230 <events_get_config_defaults>:
 *
 *  \param config    Configuration structure to initialize to default values.
 */
void events_get_config_defaults(struct events_conf *const config)
{
	config->igf_divider = EVENT_IGF_DIVIDER_1024;
     230:	f04f 030a 	mov.w	r3, #10
     234:	7003      	strb	r3, [r0, #0]
     236:	4770      	bx	lr

00000238 <events_init>:
 * \brief Initialize the events module.
 *
 *  \param config    Configuration structure to initialize to default values.
 */
void events_init(struct events_conf *const config)
{
     238:	b538      	push	{r3, r4, r5, lr}
     23a:	4605      	mov	r5, r0
	/* Enable clock for PEVC module */
	sysclk_enable_peripheral_clock(PEVC);
     23c:	f44f 44c0 	mov.w	r4, #24576	; 0x6000
     240:	f2c4 040a 	movt	r4, #16394	; 0x400a
     244:	4620      	mov	r0, r4
     246:	f242 1331 	movw	r3, #8497	; 0x2131
     24a:	f2c0 0300 	movt	r3, #0
     24e:	4798      	blx	r3
 * \note As stated in the datasheet, there is one divider value for
 * all EVS instance.
 */
static inline void events_set_igf_divider(enum events_igf_divider divider)
{
	PEVC->PEVC_IGFDR = PEVC_IGFDR_IGFDR(divider);
     250:	7828      	ldrb	r0, [r5, #0]
     252:	f000 010f 	and.w	r1, r0, #15
     256:	f8c4 1300 	str.w	r1, [r4, #768]	; 0x300
     25a:	bd38      	pop	{r3, r4, r5, pc}

0000025c <events_ch_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->channel_id = EVENT_CHANNEL_N;
     25c:	f04f 0313 	mov.w	r3, #19
     260:	6003      	str	r3, [r0, #0]
	config->generator_id = EVENT_GENERATOR_N;
     262:	f04f 011f 	mov.w	r1, #31
     266:	6041      	str	r1, [r0, #4]
	config->shaper_enable = false;
     268:	f04f 0200 	mov.w	r2, #0
     26c:	7202      	strb	r2, [r0, #8]
	config->igf_edge = EVENT_IGF_EDGE_NONE;
     26e:	7242      	strb	r2, [r0, #9]
     270:	4770      	bx	lr
     272:	bf00      	nop

00000274 <events_ch_configure>:
 *
 * \param channel_id  Channel ID.
 */
static inline void events_ch_disable(uint32_t channel_id)
{
	PEVC->PEVC_CHDR = PEVC_CHDR_CHD(PEVC_CHDR_CHD_1 << channel_id);
     274:	6803      	ldr	r3, [r0, #0]
     276:	f04f 0201 	mov.w	r2, #1
     27a:	fa02 f203 	lsl.w	r2, r2, r3
     27e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
     282:	f2c4 030a 	movt	r3, #16394	; 0x400a
     286:	609a      	str	r2, [r3, #8]

	/* Disable the channel first */
	events_ch_disable(config->channel_id);

	/* Configure the event channel */
	PEVC->PEVC_CHMX[config->channel_id].PEVC_CHMX =
     288:	6802      	ldr	r2, [r0, #0]
		PEVC_CHMX_EVMX(config->generator_id);
     28a:	6841      	ldr	r1, [r0, #4]
     28c:	f001 013f 	and.w	r1, r1, #63	; 0x3f

	/* Disable the channel first */
	events_ch_disable(config->channel_id);

	/* Configure the event channel */
	PEVC->PEVC_CHMX[config->channel_id].PEVC_CHMX =
     290:	f102 0240 	add.w	r2, r2, #64	; 0x40
     294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		PEVC_CHMX_EVMX(config->generator_id);
	if (config->shaper_enable) {
		evs_val |= PEVC_EVS_EN;
     298:	7a03      	ldrb	r3, [r0, #8]
	} else {
		evs_val &= (~PEVC_EVS_EN);
	}
	switch (config->igf_edge) {
     29a:	7a42      	ldrb	r2, [r0, #9]
     29c:	2a02      	cmp	r2, #2
     29e:	d006      	beq.n	2ae <events_ch_configure+0x3a>
     2a0:	2a03      	cmp	r2, #3
     2a2:	d007      	beq.n	2b4 <events_ch_configure+0x40>
     2a4:	2a01      	cmp	r2, #1
     2a6:	d107      	bne.n	2b8 <events_ch_configure+0x44>
	case EVENT_IGF_EDGE_RISING:
		evs_val |= PEVC_EVS_IGFR_1;
     2a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
		break;
     2ac:	e004      	b.n	2b8 <events_ch_configure+0x44>
	case EVENT_IGF_EDGE_FALLING:
		evs_val |= PEVC_EVS_IGFF_1;
     2ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		break;
     2b2:	e001      	b.n	2b8 <events_ch_configure+0x44>
	case EVENT_IGF_EDGE_BOTH:
		evs_val |= (PEVC_EVS_IGFR_1 | PEVC_EVS_IGFF_1);
     2b4:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
		break;
	case EVENT_IGF_EDGE_NONE:
	default:
		break;
	}
	PEVC->PEVC_EVS[config->generator_id].PEVC_EVS = evs_val;
     2b8:	6840      	ldr	r0, [r0, #4]
     2ba:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
     2be:	f2c4 010a 	movt	r1, #16394	; 0x400a
     2c2:	f100 0080 	add.w	r0, r0, #128	; 0x80
     2c6:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
     2ca:	4770      	bx	lr

000002cc <gpio_common_handler>:

/**
 * Common GPIO handler.
 */
static void gpio_common_handler(uint32_t port_id, uint32_t port_mask)
{
     2cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     2d0:	4606      	mov	r6, r0
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[port_id]);
     2d2:	ea4f 2340 	mov.w	r3, r0, lsl #9
     2d6:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
     2da:	f500 2261 	add.w	r2, r0, #921600	; 0xe1000
	uint32_t i;
	uint32_t int_flags;
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;
     2de:	f8d2 90d0 	ldr.w	r9, [r2, #208]	; 0xd0
	gpio_port->GPIO_IFRC = (int_flags & port_mask);
     2e2:	ea01 0109 	and.w	r1, r1, r9
     2e6:	f8c2 10d8 	str.w	r1, [r2, #216]	; 0xd8

	for (i = 0; i < gpio_nb_sources; i++) {
     2ea:	f640 132c 	movw	r3, #2348	; 0x92c
     2ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
     2f2:	6818      	ldr	r0, [r3, #0]
     2f4:	b318      	cbz	r0, 33e <gpio_common_handler+0x72>
     2f6:	f04f 0400 	mov.w	r4, #0
     2fa:	4625      	mov	r5, r4
		pin = gpio_int_sources[i].pin;
     2fc:	f640 1730 	movw	r7, #2352	; 0x930
     300:	f2c2 0700 	movt	r7, #8192	; 0x2000
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
     304:	f04f 0a01 	mov.w	sl, #1
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;
	gpio_port->GPIO_IFRC = (int_flags & port_mask);

	for (i = 0; i < gpio_nb_sources; i++) {
     308:	f640 182c 	movw	r8, #2348	; 0x92c
     30c:	f2c2 0800 	movt	r8, #8192	; 0x2000
		pin = gpio_int_sources[i].pin;
     310:	59e2      	ldr	r2, [r4, r7]
		if ((ioport_pin_to_port_id(pin) == port_id) &&
     312:	ebb6 1f52 	cmp.w	r6, r2, lsr #5
     316:	d10a      	bne.n	32e <gpio_common_handler+0x62>
     318:	f002 011f 	and.w	r1, r2, #31
     31c:	fa0a f301 	lsl.w	r3, sl, r1
     320:	ea13 0f09 	tst.w	r3, r9
     324:	d003      	beq.n	32e <gpio_common_handler+0x62>
}

/**
 * Common GPIO handler.
 */
static void gpio_common_handler(uint32_t port_id, uint32_t port_mask)
     326:	1938      	adds	r0, r7, r4

	for (i = 0; i < gpio_nb_sources; i++) {
		pin = gpio_int_sources[i].pin;
		if ((ioport_pin_to_port_id(pin) == port_id) &&
				(ioport_pin_to_mask(pin) & int_flags)) {
			if (gpio_int_sources[i].callback != NULL) {
     328:	6842      	ldr	r2, [r0, #4]
     32a:	b102      	cbz	r2, 32e <gpio_common_handler+0x62>
				gpio_int_sources[i].callback();
     32c:	4790      	blx	r2
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;
	gpio_port->GPIO_IFRC = (int_flags & port_mask);

	for (i = 0; i < gpio_nb_sources; i++) {
     32e:	f105 0501 	add.w	r5, r5, #1
     332:	f104 0408 	add.w	r4, r4, #8
     336:	f8d8 1000 	ldr.w	r1, [r8]
     33a:	42a9      	cmp	r1, r5
     33c:	d8e8      	bhi.n	310 <gpio_common_handler+0x44>
     33e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     342:	bf00      	nop

00000344 <gpio_set_pin_callback>:
 * \retval \c false Wrong parameters or exceeding maximum number of interrupt
 *                  sources has been defined.
 */
bool gpio_set_pin_callback(ioport_pin_t pin, gpio_pin_callback_t callback,
		uint8_t irq_level)
{
     344:	b470      	push	{r4, r5, r6}
	int8_t i;
	int8_t irq_line;

	if (gpio_nb_sources >= GPIO_MAX_INTERRUPT_SOURCES) {
     346:	f640 132c 	movw	r3, #2348	; 0x92c
     34a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     34e:	681b      	ldr	r3, [r3, #0]
     350:	2b05      	cmp	r3, #5
     352:	d866      	bhi.n	422 <gpio_set_pin_callback+0xde>
     354:	f000 041f 	and.w	r4, r0, #31
     358:	f04f 0501 	mov.w	r5, #1
     35c:	fa05 f604 	lsl.w	r6, r5, r4
	 *
	 * \note Grouping interrupt generators into groups of eight, four
	 * different interrupt handlers can be installed for each GPIO port.
	 */
	for (i = 0; i < 4; i++) {
		if (ioport_pin_to_mask(pin) & (GPIO_INT_GROUP_MASK << (i * 8))) {
     360:	f016 0fff 	tst.w	r6, #255	; 0xff
     364:	d112      	bne.n	38c <gpio_set_pin_callback+0x48>
     366:	f416 4f7f 	tst.w	r6, #65280	; 0xff00
     36a:	d109      	bne.n	380 <gpio_set_pin_callback+0x3c>
     36c:	f416 0f7f 	tst.w	r6, #16711680	; 0xff0000
     370:	d109      	bne.n	386 <gpio_set_pin_callback+0x42>
     372:	f006 447f 	and.w	r4, r6, #4278190080	; 0xff000000
     376:	2c00      	cmp	r4, #0
     378:	bf0c      	ite	eq
     37a:	2604      	moveq	r6, #4
     37c:	2603      	movne	r6, #3
     37e:	e007      	b.n	390 <gpio_set_pin_callback+0x4c>
	 * Get IRQ line for the given pin.
	 *
	 * \note Grouping interrupt generators into groups of eight, four
	 * different interrupt handlers can be installed for each GPIO port.
	 */
	for (i = 0; i < 4; i++) {
     380:	f04f 0601 	mov.w	r6, #1
     384:	e004      	b.n	390 <gpio_set_pin_callback+0x4c>
     386:	f04f 0602 	mov.w	r6, #2
     38a:	e001      	b.n	390 <gpio_set_pin_callback+0x4c>
		if (ioport_pin_to_mask(pin) & (GPIO_INT_GROUP_MASK << (i * 8))) {
     38c:	f04f 0600 	mov.w	r6, #0
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
     390:	ea4f 1550 	mov.w	r5, r0, lsr #5
			break;
		}
	}
	irq_line = GPIO_0_IRQn + ioport_pin_to_port_id(pin) * 4 + i;
     394:	eb06 0485 	add.w	r4, r6, r5, lsl #2
     398:	f104 0419 	add.w	r4, r4, #25
     39c:	b2e4      	uxtb	r4, r4

	gpio_int_sources[gpio_nb_sources].pin = pin;
     39e:	f640 1630 	movw	r6, #2352	; 0x930
     3a2:	f2c2 0600 	movt	r6, #8192	; 0x2000
     3a6:	f846 0033 	str.w	r0, [r6, r3, lsl #3]
	gpio_int_sources[gpio_nb_sources].callback = callback;
     3aa:	eb06 00c3 	add.w	r0, r6, r3, lsl #3
     3ae:	6041      	str	r1, [r0, #4]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     3b0:	b263      	sxtb	r3, r4
     3b2:	ea4f 1153 	mov.w	r1, r3, lsr #5
     3b6:	f004 061f 	and.w	r6, r4, #31
     3ba:	f04f 0501 	mov.w	r5, #1
     3be:	fa05 f006 	lsl.w	r0, r5, r6
     3c2:	f44f 4561 	mov.w	r5, #57600	; 0xe100
     3c6:	f2ce 0500 	movt	r5, #57344	; 0xe000
     3ca:	f101 0660 	add.w	r6, r1, #96	; 0x60
     3ce:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
     3d2:	2b00      	cmp	r3, #0
     3d4:	da0b      	bge.n	3ee <gpio_set_pin_callback+0xaa>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
     3d6:	f004 040f 	and.w	r4, r4, #15
     3da:	ea4f 1202 	mov.w	r2, r2, lsl #4
     3de:	b2d2      	uxtb	r2, r2
     3e0:	f64e 43fc 	movw	r3, #60668	; 0xecfc
     3e4:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3e8:	18e3      	adds	r3, r4, r3
     3ea:	761a      	strb	r2, [r3, #24]
     3ec:	e008      	b.n	400 <gpio_set_pin_callback+0xbc>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
     3ee:	ea4f 1202 	mov.w	r2, r2, lsl #4
     3f2:	b2d2      	uxtb	r2, r2
     3f4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
     3f8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
     3fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
     400:	f44f 4261 	mov.w	r2, #57600	; 0xe100
     404:	f2ce 0200 	movt	r2, #57344	; 0xe000
     408:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	NVIC_ClearPendingIRQ((IRQn_Type)irq_line);
	NVIC_SetPriority((IRQn_Type)irq_line, irq_level);
	NVIC_EnableIRQ((IRQn_Type)irq_line);

	gpio_nb_sources++;
     40c:	f640 112c 	movw	r1, #2348	; 0x92c
     410:	f2c2 0100 	movt	r1, #8192	; 0x2000
     414:	6808      	ldr	r0, [r1, #0]
     416:	f100 0001 	add.w	r0, r0, #1
     41a:	6008      	str	r0, [r1, #0]

	return true;
     41c:	f04f 0001 	mov.w	r0, #1
     420:	e001      	b.n	426 <gpio_set_pin_callback+0xe2>
{
	int8_t i;
	int8_t irq_line;

	if (gpio_nb_sources >= GPIO_MAX_INTERRUPT_SOURCES) {
		return false;
     422:	f04f 0000 	mov.w	r0, #0
	NVIC_EnableIRQ((IRQn_Type)irq_line);

	gpio_nb_sources++;

	return true;
}
     426:	bc70      	pop	{r4, r5, r6}
     428:	4770      	bx	lr
     42a:	bf00      	nop

0000042c <GPIO_0_Handler>:

/**
 * GPIO handler 0 (PA 0..7)
 */
void GPIO_0_Handler(void)
{
     42c:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, GPIO_INT_GROUP_MASK);
     42e:	f04f 0000 	mov.w	r0, #0
     432:	f04f 01ff 	mov.w	r1, #255	; 0xff
     436:	f240 23cd 	movw	r3, #717	; 0x2cd
     43a:	f2c0 0300 	movt	r3, #0
     43e:	4798      	blx	r3
     440:	bd08      	pop	{r3, pc}
     442:	bf00      	nop

00000444 <GPIO_1_Handler>:

/**
 * GPIO handler 1 (PA 8..15)
 */
void GPIO_1_Handler(void)
{
     444:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 8));
     446:	f04f 0000 	mov.w	r0, #0
     44a:	f44f 417f 	mov.w	r1, #65280	; 0xff00
     44e:	f240 23cd 	movw	r3, #717	; 0x2cd
     452:	f2c0 0300 	movt	r3, #0
     456:	4798      	blx	r3
     458:	bd08      	pop	{r3, pc}
     45a:	bf00      	nop

0000045c <GPIO_2_Handler>:

/**
 * GPIO handler 2 (PA 16..23)
 */
void GPIO_2_Handler(void)
{
     45c:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 16));
     45e:	f04f 0000 	mov.w	r0, #0
     462:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
     466:	f240 23cd 	movw	r3, #717	; 0x2cd
     46a:	f2c0 0300 	movt	r3, #0
     46e:	4798      	blx	r3
     470:	bd08      	pop	{r3, pc}
     472:	bf00      	nop

00000474 <GPIO_3_Handler>:

/**
 * GPIO handler 3 (PA 24..31)
 */
void GPIO_3_Handler(void)
{
     474:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 23));
     476:	f04f 0000 	mov.w	r0, #0
     47a:	f04f 41ff 	mov.w	r1, #2139095040	; 0x7f800000
     47e:	f240 23cd 	movw	r3, #717	; 0x2cd
     482:	f2c0 0300 	movt	r3, #0
     486:	4798      	blx	r3
     488:	bd08      	pop	{r3, pc}
     48a:	bf00      	nop

0000048c <GPIO_4_Handler>:

/**
 * GPIO handler 4 (PB 0..7)
 */
void GPIO_4_Handler(void)
{
     48c:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, GPIO_INT_GROUP_MASK);
     48e:	f04f 0001 	mov.w	r0, #1
     492:	f04f 01ff 	mov.w	r1, #255	; 0xff
     496:	f240 23cd 	movw	r3, #717	; 0x2cd
     49a:	f2c0 0300 	movt	r3, #0
     49e:	4798      	blx	r3
     4a0:	bd08      	pop	{r3, pc}
     4a2:	bf00      	nop

000004a4 <GPIO_5_Handler>:

/**
 * GPIO handler 5 (PB 8..15)
 */
void GPIO_5_Handler(void)
{
     4a4:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 8));
     4a6:	f04f 0001 	mov.w	r0, #1
     4aa:	f44f 417f 	mov.w	r1, #65280	; 0xff00
     4ae:	f240 23cd 	movw	r3, #717	; 0x2cd
     4b2:	f2c0 0300 	movt	r3, #0
     4b6:	4798      	blx	r3
     4b8:	bd08      	pop	{r3, pc}
     4ba:	bf00      	nop

000004bc <GPIO_6_Handler>:

/**
 * GPIO handler 6 (PB 16..23)
 */
void GPIO_6_Handler(void)
{
     4bc:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 16));
     4be:	f04f 0001 	mov.w	r0, #1
     4c2:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
     4c6:	f240 23cd 	movw	r3, #717	; 0x2cd
     4ca:	f2c0 0300 	movt	r3, #0
     4ce:	4798      	blx	r3
     4d0:	bd08      	pop	{r3, pc}
     4d2:	bf00      	nop

000004d4 <GPIO_7_Handler>:

/**
 * GPIO handler 7 (PB 24..31)
 */
void GPIO_7_Handler(void)
{
     4d4:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 24));
     4d6:	f04f 0001 	mov.w	r0, #1
     4da:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
     4de:	f240 23cd 	movw	r3, #717	; 0x2cd
     4e2:	f2c0 0300 	movt	r3, #0
     4e6:	4798      	blx	r3
     4e8:	bd08      	pop	{r3, pc}
     4ea:	bf00      	nop

000004ec <GPIO_8_Handler>:

/**
 * GPIO handler 8 (PC 0..7)
 */
void GPIO_8_Handler(void)
{
     4ec:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, GPIO_INT_GROUP_MASK);
     4ee:	f04f 0002 	mov.w	r0, #2
     4f2:	f04f 01ff 	mov.w	r1, #255	; 0xff
     4f6:	f240 23cd 	movw	r3, #717	; 0x2cd
     4fa:	f2c0 0300 	movt	r3, #0
     4fe:	4798      	blx	r3
     500:	bd08      	pop	{r3, pc}
     502:	bf00      	nop

00000504 <GPIO_9_Handler>:

/**
 * GPIO handler 9 (PC 8..15)
 */
void GPIO_9_Handler(void)
{
     504:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 8));
     506:	f04f 0002 	mov.w	r0, #2
     50a:	f44f 417f 	mov.w	r1, #65280	; 0xff00
     50e:	f240 23cd 	movw	r3, #717	; 0x2cd
     512:	f2c0 0300 	movt	r3, #0
     516:	4798      	blx	r3
     518:	bd08      	pop	{r3, pc}
     51a:	bf00      	nop

0000051c <GPIO_10_Handler>:

/**
 * GPIO handler 10 (PC 16..23)
 */
void GPIO_10_Handler(void)
{
     51c:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 16));
     51e:	f04f 0002 	mov.w	r0, #2
     522:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
     526:	f240 23cd 	movw	r3, #717	; 0x2cd
     52a:	f2c0 0300 	movt	r3, #0
     52e:	4798      	blx	r3
     530:	bd08      	pop	{r3, pc}
     532:	bf00      	nop

00000534 <GPIO_11_Handler>:

/**
 * GPIO handler 11 (PC 24..31)
 */
void GPIO_11_Handler(void)
{
     534:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 24));
     536:	f04f 0002 	mov.w	r0, #2
     53a:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
     53e:	f240 23cd 	movw	r3, #717	; 0x2cd
     542:	f2c0 0300 	movt	r3, #0
     546:	4798      	blx	r3
     548:	bd08      	pop	{r3, pc}
     54a:	bf00      	nop

0000054c <VSYNC_Callback>:
	return arch_ioport_port_to_base(port)->GPIO_PVR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	arch_ioport_pin_to_base(pin)->GPIO_OVRT = arch_ioport_pin_to_mask(pin);
     54c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
     550:	f2c4 030e 	movt	r3, #16398	; 0x400e
     554:	f04f 0280 	mov.w	r2, #128	; 0x80
     558:	65da      	str	r2, [r3, #92]	; 0x5c
}

static void VSYNC_Callback(void)
{
	LED_Toggle(LED0);
	if (VSYNC_Count==1)//start a frame read
     55a:	f640 2024 	movw	r0, #2596	; 0xa24
     55e:	f2c2 0000 	movt	r0, #8192	; 0x2000
     562:	6801      	ldr	r1, [r0, #0]
     564:	2901      	cmp	r1, #1
     566:	d10f      	bne.n	588 <VSYNC_Callback+0x3c>

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     568:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
     56c:	f2c4 000e 	movt	r0, #16398	; 0x400e
     570:	f04f 0104 	mov.w	r1, #4
     574:	6541      	str	r1, [r0, #84]	; 0x54
	{
		/*xprintf(PSTR("WEN Set\n"));*/
		FIFO_WEN_SET;
		VSYNC_Count++;
     576:	f640 2324 	movw	r3, #2596	; 0xa24
     57a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     57e:	681a      	ldr	r2, [r3, #0]
     580:	f102 0201 	add.w	r2, r2, #1
     584:	601a      	str	r2, [r3, #0]
     586:	4770      	bx	lr
	}
	else if (VSYNC_Count==2)//end a frame read
     588:	f640 2324 	movw	r3, #2596	; 0xa24
     58c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     590:	681a      	ldr	r2, [r3, #0]
     592:	2a02      	cmp	r2, #2
     594:	d107      	bne.n	5a6 <VSYNC_Callback+0x5a>
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     596:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
     59a:	f2c4 030e 	movt	r3, #16398	; 0x400e
     59e:	f04f 0204 	mov.w	r2, #4
     5a2:	659a      	str	r2, [r3, #88]	; 0x58
     5a4:	4770      	bx	lr
		FIFO_WEN_CLR;
		/*xprintf(PSTR("WEN Clear\n"));*/
	}
	else
	{
		VSYNC_Count = 0;//wait for a read to be started
     5a6:	f640 2024 	movw	r0, #2596	; 0xa24
     5aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
     5ae:	f04f 0100 	mov.w	r1, #0
     5b2:	6001      	str	r1, [r0, #0]
     5b4:	4770      	bx	lr
     5b6:	bf00      	nop

000005b8 <write_twi>:
 * \brief Write the data pattern to the target.
 *
 * \return STATUS_OK   if all bytes were written, error code otherwise.
 */
static status_code_t write_twi(unsigned char regID, unsigned char regDat)
{
     5b8:	b508      	push	{r3, lr}
	/* TWI chip address to communicate with */
	packet_tx.chip = OV7670_ADDR;
     5ba:	f640 232c 	movw	r3, #2604	; 0xa2c
     5be:	f2c2 0300 	movt	r3, #8192	; 0x2000
     5c2:	f04f 0221 	mov.w	r2, #33	; 0x21
     5c6:	601a      	str	r2, [r3, #0]
	/* TWI address/commands to issue to the other chip (node) */
	packet_tx.addr[0] = regID; //(VIRTUALMEM_ADDR >> 16) & 0xFF;
     5c8:	7118      	strb	r0, [r3, #4]
	packet_tx.addr[1] = (VIRTUALMEM_ADDR >> 8) & 0xFF;
     5ca:	f04f 0000 	mov.w	r0, #0
     5ce:	7158      	strb	r0, [r3, #5]
	/* Length of the TWI data address segment (1-3 bytes) */
	packet_tx.addr_length = 1;
     5d0:	f04f 0201 	mov.w	r2, #1
     5d4:	71da      	strb	r2, [r3, #7]
	/* Where to find the data to be written */
	write_data[0] = regDat;
     5d6:	f640 1060 	movw	r0, #2400	; 0x960
     5da:	f2c2 0000 	movt	r0, #8192	; 0x2000
     5de:	7001      	strb	r1, [r0, #0]
	packet_tx.buffer = (void *) write_data;
     5e0:	6098      	str	r0, [r3, #8]
	/* How many bytes do we want to write */
	packet_tx.length = PATTERN_TEST_LENGTH;
     5e2:	60da      	str	r2, [r3, #12]
	//printf("Writing data to TARGET\r\n");
	/* Write data to TARGET */
	return twi_master_write(OV7670_TWI, &packet_tx);
     5e4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     5e8:	f2c4 0001 	movt	r0, #16385	; 0x4001
     5ec:	4619      	mov	r1, r3
     5ee:	f241 03fd 	movw	r3, #4349	; 0x10fd
     5f2:	f2c0 0300 	movt	r3, #0
     5f6:	4798      	blx	r3
}
     5f8:	bd08      	pop	{r3, pc}
     5fa:	bf00      	nop

000005fc <FIFO_init>:


//Initial FIFO
unsigned char FIFO_init(void)
{
     5fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
     600:	f44f 5490 	mov.w	r4, #4608	; 0x1200
     604:	f2c4 040e 	movt	r4, #16398	; 0x400e
     608:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
     60c:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
     610:	f8c4 a168 	str.w	sl, [r4, #360]	; 0x168

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
     614:	f04f 0501 	mov.w	r5, #1
     618:	6465      	str	r5, [r4, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
     61a:	f8c4 5168 	str.w	r5, [r4, #360]	; 0x168

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
     61e:	4656      	mov	r6, sl
     620:	f2c4 060e 	movt	r6, #16398	; 0x400e
     624:	f04f 0920 	mov.w	r9, #32
     628:	f8c6 9044 	str.w	r9, [r6, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
     62c:	f8c6 9168 	str.w	r9, [r6, #360]	; 0x168

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
     630:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
     634:	f2c4 030e 	movt	r3, #16398	; 0x400e
     638:	f04f 0204 	mov.w	r2, #4
     63c:	645a      	str	r2, [r3, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
     63e:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
     642:	f04f 0802 	mov.w	r8, #2
     646:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
     64a:	f8c4 8168 	str.w	r8, [r4, #360]	; 0x168
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     64e:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
     652:	65a5      	str	r5, [r4, #88]	; 0x58
     654:	f8c6 9058 	str.w	r9, [r6, #88]	; 0x58

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     658:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     65c:	659a      	str	r2, [r3, #88]	; 0x58
	FIFO_WRST_CLR;
	FIFO_RCLK_CLR;
	FIFO_nOE_CLR;
	FIFO_nRRST_SET;
	FIFO_WEN_CLR;
	delay_us(10);
     65e:	f04f 0023 	mov.w	r0, #35	; 0x23
     662:	f240 0701 	movw	r7, #1
     666:	f2c2 0700 	movt	r7, #8192	; 0x2000
     66a:	47b8      	blx	r7

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     66c:	6565      	str	r5, [r4, #84]	; 0x54
	FIFO_RCLK_SET;
	delay_us(10);
     66e:	f04f 0023 	mov.w	r0, #35	; 0x23
     672:	47b8      	blx	r7
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     674:	65a5      	str	r5, [r4, #88]	; 0x58
     676:	f8c4 8058 	str.w	r8, [r4, #88]	; 0x58
	FIFO_RCLK_CLR;
	FIFO_nRRST_CLR;
	delay_us(10);
     67a:	f04f 0023 	mov.w	r0, #35	; 0x23
     67e:	47b8      	blx	r7

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     680:	6565      	str	r5, [r4, #84]	; 0x54
	FIFO_RCLK_SET;
	delay_us(10);
     682:	f04f 0023 	mov.w	r0, #35	; 0x23
     686:	47b8      	blx	r7
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     688:	65a5      	str	r5, [r4, #88]	; 0x58

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     68a:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
	FIFO_RCLK_CLR;
	FIFO_nRRST_SET;
	delay_us(10);
     68e:	f04f 0023 	mov.w	r0, #35	; 0x23
     692:	47b8      	blx	r7
     694:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
     698:	f8c6 9054 	str.w	r9, [r6, #84]	; 0x54
	FIFO_WRST_SET;
	FIFO_nOE_SET;
	return STATUS_OK; //okay
}
     69c:	f04f 0000 	mov.w	r0, #0
     6a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000006a4 <OV7670_init>:
}



unsigned char OV7670_init(void)
{
     6a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     6a8:	b089      	sub	sp, #36	; 0x24
	uint8_t temp;
	status_code_t status;
	VSYNC_Count = 0;
     6aa:	f04f 0400 	mov.w	r4, #0
     6ae:	f640 2324 	movw	r3, #2596	; 0xa24
     6b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     6b6:	601c      	str	r4, [r3, #0]
	printf("Inialising I2C\n\r");
     6b8:	f645 7070 	movw	r0, #24432	; 0x5f70
     6bc:	f2c0 0000 	movt	r0, #0
     6c0:	f243 7639 	movw	r6, #14137	; 0x3739
     6c4:	f2c0 0600 	movt	r6, #0
     6c8:	47b0      	blx	r6
uint32_t cpu_speed = 0;

static status_code_t init_twi(void)
{
	/* Set TWIM options */
	cpu_speed = sysclk_get_peripheral_bus_hz(OV7670_TWI);
     6ca:	f44f 4500 	mov.w	r5, #32768	; 0x8000
     6ce:	f2c4 0501 	movt	r5, #16385	; 0x4001
     6d2:	4628      	mov	r0, r5
     6d4:	f641 6139 	movw	r1, #7737	; 0x1e39
     6d8:	f2c0 0100 	movt	r1, #0
     6dc:	4788      	blx	r1
     6de:	f640 1264 	movw	r2, #2404	; 0x964
     6e2:	f2c2 0200 	movt	r2, #8192	; 0x2000
     6e6:	6010      	str	r0, [r2, #0]
	struct twim_config opts = {
     6e8:	9002      	str	r0, [sp, #8]
     6ea:	f248 60a0 	movw	r0, #34464	; 0x86a0
     6ee:	f2c0 0001 	movt	r0, #1
     6f2:	9003      	str	r0, [sp, #12]
     6f4:	9404      	str	r4, [sp, #16]
     6f6:	f88d 4014 	strb.w	r4, [sp, #20]
     6fa:	f88d 4015 	strb.w	r4, [sp, #21]
     6fe:	f88d 4016 	strb.w	r4, [sp, #22]
     702:	f88d 4017 	strb.w	r4, [sp, #23]
     706:	f88d 4018 	strb.w	r4, [sp, #24]
     70a:	f88d 4019 	strb.w	r4, [sp, #25]
     70e:	f88d 401a 	strb.w	r4, [sp, #26]
     712:	f88d 401b 	strb.w	r4, [sp, #27]
     716:	f88d 401c 	strb.w	r4, [sp, #28]
     71a:	f88d 401d 	strb.w	r4, [sp, #29]
     71e:	f88d 401e 	strb.w	r4, [sp, #30]
     722:	f88d 401f 	strb.w	r4, [sp, #31]
		.hs_clock_drive_strength_low = 0,
		.hs_data_slew_limit = 0,
		.hs_data_drive_strength_low = 0,
	};
	/* Initialize the TWIM Module */
	twim_set_callback(OV7670_TWI, 0, twim_default_callback, 1);
     726:	4628      	mov	r0, r5
     728:	4621      	mov	r1, r4
     72a:	f640 42f1 	movw	r2, #3313	; 0xcf1
     72e:	f2c0 0200 	movt	r2, #0
     732:	f04f 0301 	mov.w	r3, #1
     736:	f241 344d 	movw	r4, #4941	; 0x134d
     73a:	f2c0 0400 	movt	r4, #0
     73e:	47a0      	blx	r4

	return twim_set_config(OV7670_TWI, &opts);
     740:	4628      	mov	r0, r5
     742:	a902      	add	r1, sp, #8
     744:	f640 73e1 	movw	r3, #4065	; 0xfe1
     748:	f2c0 0300 	movt	r3, #0
     74c:	4798      	blx	r3
	uint8_t temp;
	status_code_t status;
	VSYNC_Count = 0;
	printf("Inialising I2C\n\r");
	init_twi();
	printf("Inialising Camera\n\r");
     74e:	f645 7084 	movw	r0, #24452	; 0x5f84
     752:	f2c0 0000 	movt	r0, #0
     756:	47b0      	blx	r6

	status = write_twi(OV_COM7,0x80);
     758:	f04f 0012 	mov.w	r0, #18
     75c:	f04f 0180 	mov.w	r1, #128	; 0x80
     760:	f240 52b9 	movw	r2, #1465	; 0x5b9
     764:	f2c0 0200 	movt	r2, #0
     768:	4790      	blx	r2
	if(STATUS_OK != status)
     76a:	2800      	cmp	r0, #0
     76c:	f040 80a9 	bne.w	8c2 <OV7670_init+0x21e>
		return STATUS_ERR_DENIED;
	delay_ms(10);
     770:	f248 50da 	movw	r0, #34266	; 0x85da
     774:	f240 0601 	movw	r6, #1
     778:	f2c2 0600 	movt	r6, #8192	; 0x2000
     77c:	47b0      	blx	r6
     77e:	f645 6420 	movw	r4, #24096	; 0x5e20
     782:	f2c0 0400 	movt	r4, #0
	events_ch_enable(PEVC_ID_USER_PDCA_0);
}



unsigned char OV7670_init(void)
     786:	f504 79a7 	add.w	r9, r4, #334	; 0x14e
		return STATUS_ERR_DENIED;
	delay_ms(10);
	
	for(temp = 0; temp < SETTINGS_LENGTH; temp++)
	{
		if( STATUS_OK != write_twi(default_settings[temp][0], default_settings[temp][1] ))
     78a:	f240 56b9 	movw	r6, #1465	; 0x5b9
     78e:	f2c0 0600 	movt	r6, #0
		{
			return STATUS_ERR_DENIED;
		}
		delay_ms(1);
     792:	f640 5863 	movw	r8, #3427	; 0xd63
     796:	f240 0701 	movw	r7, #1
     79a:	f2c2 0700 	movt	r7, #8192	; 0x2000
		return STATUS_ERR_DENIED;
	delay_ms(10);
	
	for(temp = 0; temp < SETTINGS_LENGTH; temp++)
	{
		if( STATUS_OK != write_twi(default_settings[temp][0], default_settings[temp][1] ))
     79e:	7820      	ldrb	r0, [r4, #0]
     7a0:	7861      	ldrb	r1, [r4, #1]
     7a2:	47b0      	blx	r6
     7a4:	2800      	cmp	r0, #0
     7a6:	f000 8094 	beq.w	8d2 <OV7670_init+0x22e>
     7aa:	e08d      	b.n	8c8 <OV7670_init+0x224>
     7ac:	7820      	ldrb	r0, [r4, #0]
     7ae:	7861      	ldrb	r1, [r4, #1]
     7b0:	47b0      	blx	r6
     7b2:	2800      	cmp	r0, #0
     7b4:	f040 8088 	bne.w	8c8 <OV7670_init+0x224>
		{
			return STATUS_ERR_DENIED;
		}
		delay_ms(1);
     7b8:	4640      	mov	r0, r8
     7ba:	47b8      	blx	r7
     7bc:	f104 0502 	add.w	r5, r4, #2
		return STATUS_ERR_DENIED;
	delay_ms(10);
	
	for(temp = 0; temp < SETTINGS_LENGTH; temp++)
	{
		if( STATUS_OK != write_twi(default_settings[temp][0], default_settings[temp][1] ))
     7c0:	78a0      	ldrb	r0, [r4, #2]
     7c2:	7869      	ldrb	r1, [r5, #1]
     7c4:	47b0      	blx	r6
     7c6:	2800      	cmp	r0, #0
     7c8:	f000 8088 	beq.w	8dc <OV7670_init+0x238>
     7cc:	e07c      	b.n	8c8 <OV7670_init+0x224>
		{
			return STATUS_ERR_DENIED;
		}
		delay_ms(1);
	}
	FIFO_init();
     7ce:	f240 51fd 	movw	r1, #1533	; 0x5fd
     7d2:	f2c0 0100 	movt	r1, #0
     7d6:	4788      	blx	r1
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
     7d8:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
     7dc:	f2c4 000e 	movt	r0, #16398	; 0x400e
     7e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
     7e4:	6483      	str	r3, [r0, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
     7e6:	f8c0 3164 	str.w	r3, [r0, #356]	; 0x164
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
     7ea:	6743      	str	r3, [r0, #116]	; 0x74

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
     7ec:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
	}
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
     7f0:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
     7f4:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
     7f8:	6183      	str	r3, [r0, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
     7fa:	6283      	str	r3, [r0, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
     7fc:	6383      	str	r3, [r0, #56]	; 0x38
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (pin_sense & 0x01) {
		base->GPIO_IMR0S = mask;
	} else {
		base->GPIO_IMR0C = mask;
     7fe:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
	}

	if (pin_sense & 0x02) {
		base->GPIO_IMR1S = mask;
     802:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
	/* Configure push button 0 to trigger an interrupt on falling edge */
	ioport_set_pin_dir(OV7670_VSYNC_PIN, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(OV7670_VSYNC_PIN, IOPORT_MODE_PULLUP | IOPORT_MODE_GLITCH_FILTER);
	ioport_set_pin_sense_mode(OV7670_VSYNC_PIN, IOPORT_SENSE_FALLING);
	if (!gpio_set_pin_callback(OV7670_VSYNC_PIN, VSYNC_Callback, 1)) {
     806:	f04f 0059 	mov.w	r0, #89	; 0x59
     80a:	f240 514d 	movw	r1, #1357	; 0x54d
     80e:	f2c0 0100 	movt	r1, #0
     812:	f04f 0201 	mov.w	r2, #1
     816:	f240 3345 	movw	r3, #837	; 0x345
     81a:	f2c0 0300 	movt	r3, #0
     81e:	4798      	blx	r3
     820:	b958      	cbnz	r0, 83a <OV7670_init+0x196>
		printf("Set pin callback failure!\r\n");
     822:	f645 7098 	movw	r0, #24472	; 0x5f98
     826:	f2c0 0000 	movt	r0, #0
     82a:	f243 7339 	movw	r3, #14137	; 0x3739
     82e:	f2c0 0300 	movt	r3, #0
     832:	4798      	blx	r3
		return STATUS_ERR_DENIED;
     834:	f04f 001c 	mov.w	r0, #28
     838:	e048      	b.n	8cc <OV7670_init+0x228>
 * \param pin The pin number.
 */
static inline void gpio_enable_pin_interrupt(ioport_pin_t pin)
{
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[ioport_pin_to_port_id(pin)]);
	gpio_port->GPIO_IERS = ioport_pin_to_mask(pin);
     83a:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
     83e:	f2c4 050e 	movt	r5, #16398	; 0x400e
     842:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
     846:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
     84a:	676c      	str	r4, [r5, #116]	; 0x74

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
     84c:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
     850:	f8c5 40c8 	str.w	r4, [r5, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
     854:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
     858:	61ac      	str	r4, [r5, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
     85a:	626c      	str	r4, [r5, #36]	; 0x24

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
     85c:	63ac      	str	r4, [r5, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
     85e:	60ac      	str	r4, [r5, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (pin_sense & 0x01) {
		base->GPIO_IMR0S = mask;
	} else {
		base->GPIO_IMR0C = mask;
     860:	f8c5 40a8 	str.w	r4, [r5, #168]	; 0xa8
	}

	if (pin_sense & 0x02) {
		base->GPIO_IMR1S = mask;
     864:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
 * \param pin The pin number.
 */
static inline void gpio_enable_pin_periph_event(ioport_pin_t pin)
{
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[ioport_pin_to_port_id(pin)]);
	gpio_port->GPIO_EVERS = ioport_pin_to_mask(pin);
     868:	f8c5 4184 	str.w	r4, [r5, #388]	; 0x184
}
static void init_pevc(void)
{
	/* Set input glitch filter divider to 0x0A (2^10) */
	struct events_conf config;
	events_get_config_defaults(&config);
     86c:	a801      	add	r0, sp, #4
     86e:	f240 2231 	movw	r2, #561	; 0x231
     872:	f2c0 0200 	movt	r2, #0
     876:	4790      	blx	r2
	events_init(&config);
     878:	a801      	add	r0, sp, #4
     87a:	f240 2139 	movw	r1, #569	; 0x239
     87e:	f2c0 0100 	movt	r1, #0
     882:	4788      	blx	r1
	 * - Generator: PAD_EVT 1
	 * - User: PDCA - channel 0 transfer one word
	 * - Enable falling edge detection for EVS
	 */
	struct events_ch_conf ch_config;
	events_ch_get_config_defaults(&ch_config);
     884:	a802      	add	r0, sp, #8
     886:	f240 235d 	movw	r3, #605	; 0x25d
     88a:	f2c0 0300 	movt	r3, #0
     88e:	4798      	blx	r3
	ch_config.channel_id = PEVC_ID_USER_PDCA_0;
     890:	f04f 0500 	mov.w	r5, #0
     894:	9502      	str	r5, [sp, #8]
	ch_config.generator_id = PEVC_ID_GEN_PAD_1;
     896:	f04f 0401 	mov.w	r4, #1
     89a:	9403      	str	r4, [sp, #12]
	ch_config.shaper_enable = true;
     89c:	f88d 4010 	strb.w	r4, [sp, #16]
	ch_config.igf_edge = EVENT_IGF_EDGE_FALLING;
     8a0:	f04f 0002 	mov.w	r0, #2
     8a4:	f88d 0011 	strb.w	r0, [sp, #17]
	events_ch_configure(&ch_config);
     8a8:	a802      	add	r0, sp, #8
     8aa:	f240 2275 	movw	r2, #629	; 0x275
     8ae:	f2c0 0200 	movt	r2, #0
     8b2:	4790      	blx	r2
 *
 * \param channel_id  Channel ID.
 */
static inline void events_ch_enable(uint32_t channel_id)
{
	PEVC->PEVC_CHER = PEVC_CHER_CHE(PEVC_CHER_CHE_1 << channel_id);
     8b4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
     8b8:	f2c4 010a 	movt	r1, #16394	; 0x400a
     8bc:	604c      	str	r4, [r1, #4]
	ioport_disable_pin(OV7670_VSYNC_EVENT);
	ioport_set_pin_sense_mode(OV7670_VSYNC_EVENT, IOPORT_SENSE_FALLING);
	gpio_enable_pin_periph_event(OV7670_VSYNC_EVENT);
	init_pevc();
	
	return STATUS_OK;
     8be:	4628      	mov	r0, r5
     8c0:	e004      	b.n	8cc <OV7670_init+0x228>
	init_twi();
	printf("Inialising Camera\n\r");

	status = write_twi(OV_COM7,0x80);
	if(STATUS_OK != status)
		return STATUS_ERR_DENIED;
     8c2:	f04f 001c 	mov.w	r0, #28
     8c6:	e001      	b.n	8cc <OV7670_init+0x228>
	
	for(temp = 0; temp < SETTINGS_LENGTH; temp++)
	{
		if( STATUS_OK != write_twi(default_settings[temp][0], default_settings[temp][1] ))
		{
			return STATUS_ERR_DENIED;
     8c8:	f04f 001c 	mov.w	r0, #28
	ioport_set_pin_sense_mode(OV7670_VSYNC_EVENT, IOPORT_SENSE_FALLING);
	gpio_enable_pin_periph_event(OV7670_VSYNC_EVENT);
	init_pevc();
	
	return STATUS_OK;
}
     8cc:	b009      	add	sp, #36	; 0x24
     8ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	{
		if( STATUS_OK != write_twi(default_settings[temp][0], default_settings[temp][1] ))
		{
			return STATUS_ERR_DENIED;
		}
		delay_ms(1);
     8d2:	4640      	mov	r0, r8
     8d4:	47b8      	blx	r7
     8d6:	f104 0402 	add.w	r4, r4, #2
     8da:	e767      	b.n	7ac <OV7670_init+0x108>
     8dc:	4640      	mov	r0, r8
     8de:	47b8      	blx	r7
     8e0:	f105 0402 	add.w	r4, r5, #2
	status = write_twi(OV_COM7,0x80);
	if(STATUS_OK != status)
		return STATUS_ERR_DENIED;
	delay_ms(10);
	
	for(temp = 0; temp < SETTINGS_LENGTH; temp++)
     8e4:	454c      	cmp	r4, r9
     8e6:	f47f af61 	bne.w	7ac <OV7670_init+0x108>
     8ea:	e770      	b.n	7ce <OV7670_init+0x12a>

000008ec <LoadImageToBuffer>:
		return STATUS_ERR_BUSY;// No image available
	}
}

void LoadImageToBuffer( void )
{
     8ec:	b570      	push	{r4, r5, r6, lr}
	while(VSYNC_Count != 0); //wait for any frame to be written to complete
     8ee:	f640 2224 	movw	r2, #2596	; 0xa24
     8f2:	f2c2 0200 	movt	r2, #8192	; 0x2000
     8f6:	6813      	ldr	r3, [r2, #0]
     8f8:	2b00      	cmp	r3, #0
     8fa:	d1fc      	bne.n	8f6 <LoadImageToBuffer+0xa>
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     8fc:	f44f 5490 	mov.w	r4, #4608	; 0x1200
     900:	f2c4 040e 	movt	r4, #16398	; 0x400e
     904:	f44f 5680 	mov.w	r6, #4096	; 0x1000
     908:	65a6      	str	r6, [r4, #88]	; 0x58
	FIFO_WRST_CLR;//Reset the write pointer
	delay_ms(1);//wait a few clock cycles of the internal oscillator
     90a:	f640 5063 	movw	r0, #3427	; 0xd63
     90e:	f240 0501 	movw	r5, #1
     912:	f2c2 0500 	movt	r5, #8192	; 0x2000
     916:	47a8      	blx	r5

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     918:	6566      	str	r6, [r4, #84]	; 0x54
	FIFO_WRST_SET;
	delay_ms(1);
     91a:	f640 5063 	movw	r0, #3427	; 0xd63
     91e:	47a8      	blx	r5
	VSYNC_Count = 1;
     920:	f640 2024 	movw	r0, #2596	; 0xa24
     924:	f2c2 0000 	movt	r0, #8192	; 0x2000
     928:	f04f 0101 	mov.w	r1, #1
     92c:	6001      	str	r1, [r0, #0]
     92e:	bd70      	pop	{r4, r5, r6, pc}

00000930 <FIFO_TO_AVR>:
     930:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     934:	f2c4 030e 	movt	r3, #16398	; 0x400e
     938:	f04f 0201 	mov.w	r2, #1
     93c:	655a      	str	r2, [r3, #84]	; 0x54
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     93e:	659a      	str	r2, [r3, #88]	; 0x58

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     940:	655a      	str	r2, [r3, #84]	; 0x54
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     942:	659a      	str	r2, [r3, #88]	; 0x58
	//	FIFO_RCLK_CLR;
	//	FIFO_RCLK_SET;
	//	FIFO_RCLK_CLR;

	return(data);
}
     944:	f04f 0000 	mov.w	r0, #0
     948:	4770      	bx	lr
     94a:	bf00      	nop

0000094c <GetImageIfAvailiable>:
}


//Reads all data from the buffer if an image has been written
uint8_t GetImageIfAvailiable( int offset )
{
     94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (VSYNC_Count == 2)//if one full frame has elapsed.
     94e:	f640 2324 	movw	r3, #2596	; 0xa24
     952:	f2c2 0300 	movt	r3, #8192	; 0x2000
     956:	6818      	ldr	r0, [r3, #0]
     958:	2802      	cmp	r0, #2
     95a:	d139      	bne.n	9d0 <GetImageIfAvailiable+0x84>
     95c:	f44f 5490 	mov.w	r4, #4608	; 0x1200
     960:	f2c4 040e 	movt	r4, #16398	; 0x400e
     964:	f04f 0202 	mov.w	r2, #2
     968:	65a2      	str	r2, [r4, #88]	; 0x58

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     96a:	f04f 0101 	mov.w	r1, #1
     96e:	6561      	str	r1, [r4, #84]	; 0x54
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     970:	65a1      	str	r1, [r4, #88]	; 0x58

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     972:	6562      	str	r2, [r4, #84]	; 0x54
		uint16_t Temp;
		FIFO_nRRST_CLR; //Reset Read Pointer
		FIFO_RCLK_SET;
		FIFO_RCLK_CLR;
		FIFO_nRRST_SET;
		delay_ms(1);
     974:	f640 5063 	movw	r0, #3427	; 0xd63
     978:	f240 0501 	movw	r5, #1
     97c:	f2c2 0500 	movt	r5, #8192	; 0x2000
     980:	47a8      	blx	r5
     982:	f04f 06f0 	mov.w	r6, #240	; 0xf0
}


//Reads all data from the buffer if an image has been written
uint8_t GetImageIfAvailiable( int offset )
{
     986:	f44f 77a0 	mov.w	r7, #320	; 0x140
		for (j=HEIGHT; j > 0; j--) //Read all data
		{
			ptr = 0;
			for (i=0; i < WIDTH; i++)
			{
				Temp=FIFO_TO_AVR();
     98a:	f640 1531 	movw	r5, #2353	; 0x931
     98e:	f2c0 0500 	movt	r5, #0
     992:	e007      	b.n	9a4 <GetImageIfAvailiable+0x58>
     994:	47a8      	blx	r5
     996:	f104 34ff 	add.w	r4, r4, #4294967295
     99a:	47a8      	blx	r5
		FIFO_nRRST_SET;
		delay_ms(1);
		for (j=HEIGHT; j > 0; j--) //Read all data
		{
			ptr = 0;
			for (i=0; i < WIDTH; i++)
     99c:	3c01      	subs	r4, #1
     99e:	d1f9      	bne.n	994 <GetImageIfAvailiable+0x48>
		FIFO_nRRST_CLR; //Reset Read Pointer
		FIFO_RCLK_SET;
		FIFO_RCLK_CLR;
		FIFO_nRRST_SET;
		delay_ms(1);
		for (j=HEIGHT; j > 0; j--) //Read all data
     9a0:	3e01      	subs	r6, #1
     9a2:	d001      	beq.n	9a8 <GetImageIfAvailiable+0x5c>
}


//Reads all data from the buffer if an image has been written
uint8_t GetImageIfAvailiable( int offset )
{
     9a4:	463c      	mov	r4, r7
     9a6:	e7f5      	b.n	994 <GetImageIfAvailiable+0x48>
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     9a8:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     9ac:	f2c4 030e 	movt	r3, #16398	; 0x400e
     9b0:	f04f 0002 	mov.w	r0, #2
     9b4:	6598      	str	r0, [r3, #88]	; 0x58

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     9b6:	f04f 0201 	mov.w	r2, #1
     9ba:	655a      	str	r2, [r3, #84]	; 0x54
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     9bc:	659a      	str	r2, [r3, #88]	; 0x58

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     9be:	6558      	str	r0, [r3, #84]	; 0x54
		/*FIFO_Reset();*/
		FIFO_nRRST_CLR; //Reset Read Pointer
		FIFO_RCLK_SET;
		FIFO_RCLK_CLR;
		FIFO_nRRST_SET;
		VSYNC_Count = 0; //No image present in buffer
     9c0:	f04f 0000 	mov.w	r0, #0
     9c4:	f640 2124 	movw	r1, #2596	; 0xa24
     9c8:	f2c2 0100 	movt	r1, #8192	; 0x2000
     9cc:	6008      	str	r0, [r1, #0]
		// 		xprintf(PSTR("Success!\n"));
		// 		xprintf(PSTR("Closing File: %d\n"), f_close(&File[0]));
		return STATUS_OK; //Success!
     9ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	else
	{
		return STATUS_ERR_BUSY;// No image available
     9d0:	f04f 0019 	mov.w	r0, #25
	}
}
     9d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     9d6:	bf00      	nop

000009d8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     9d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     9dc:	460c      	mov	r4, r1
     9de:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     9e0:	bb48      	cbnz	r0, a36 <_read+0x5e>
		return -1;
	}

	for (; len > 0; --len) {
     9e2:	2a00      	cmp	r2, #0
     9e4:	dd2b      	ble.n	a3e <_read+0x66>

int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
     9e6:	188f      	adds	r7, r1, r2
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
     9e8:	f640 2650 	movw	r6, #2640	; 0xa50
     9ec:	f2c2 0600 	movt	r6, #8192	; 0x2000
     9f0:	f640 2548 	movw	r5, #2632	; 0xa48
     9f4:	f2c2 0500 	movt	r5, #8192	; 0x2000
     9f8:	ea6f 0901 	mvn.w	r9, r1
     9fc:	eb07 0009 	add.w	r0, r7, r9
     a00:	f000 0901 	and.w	r9, r0, #1
     a04:	6830      	ldr	r0, [r6, #0]
     a06:	682b      	ldr	r3, [r5, #0]
     a08:	4798      	blx	r3
		ptr++;
     a0a:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     a0e:	42bc      	cmp	r4, r7
     a10:	d119      	bne.n	a46 <_read+0x6e>
     a12:	e00d      	b.n	a30 <_read+0x58>
		ptr_get(stdio_base, ptr);
     a14:	6830      	ldr	r0, [r6, #0]
     a16:	682b      	ldr	r3, [r5, #0]
     a18:	4621      	mov	r1, r4
     a1a:	4798      	blx	r3
		ptr++;
     a1c:	f104 0401 	add.w	r4, r4, #1
     a20:	4621      	mov	r1, r4
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
     a22:	6830      	ldr	r0, [r6, #0]
     a24:	682a      	ldr	r2, [r5, #0]
     a26:	4790      	blx	r2
		ptr++;
     a28:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     a2c:	42bc      	cmp	r4, r7
     a2e:	d1f1      	bne.n	a14 <_read+0x3c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
     a30:	4640      	mov	r0, r8
     a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
     a36:	f04f 30ff 	mov.w	r0, #4294967295
     a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	for (; len > 0; --len) {
     a3e:	f04f 0000 	mov.w	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
     a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     a46:	f1b9 0f00 	cmp.w	r9, #0
     a4a:	d0e3      	beq.n	a14 <_read+0x3c>
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
     a4c:	6830      	ldr	r0, [r6, #0]
     a4e:	682a      	ldr	r2, [r5, #0]
     a50:	4621      	mov	r1, r4
     a52:	4790      	blx	r2
		ptr++;
     a54:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     a58:	42bc      	cmp	r4, r7
     a5a:	d1db      	bne.n	a14 <_read+0x3c>
     a5c:	e7e8      	b.n	a30 <_read+0x58>
     a5e:	bf00      	nop

00000a60 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
     a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     a64:	460d      	mov	r5, r1
     a66:	4690      	mov	r8, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     a68:	f100 30ff 	add.w	r0, r0, #4294967295
     a6c:	2802      	cmp	r0, #2
     a6e:	d824      	bhi.n	aba <_write+0x5a>
		return -1;
	}

	for (; len != 0; --len) {
     a70:	b332      	cbz	r2, ac0 <_write+0x60>
		if (ptr_put(stdio_base, *ptr++) < 0) {
     a72:	f640 2650 	movw	r6, #2640	; 0xa50
     a76:	f2c2 0600 	movt	r6, #8192	; 0x2000
     a7a:	f640 274c 	movw	r7, #2636	; 0xa4c
     a7e:	f2c2 0700 	movt	r7, #8192	; 0x2000
     a82:	f04f 0400 	mov.w	r4, #0
     a86:	f102 39ff 	add.w	r9, r2, #4294967295
     a8a:	f009 0901 	and.w	r9, r9, #1
     a8e:	6830      	ldr	r0, [r6, #0]
     a90:	683b      	ldr	r3, [r7, #0]
     a92:	5d09      	ldrb	r1, [r1, r4]
     a94:	4798      	blx	r3
     a96:	42a0      	cmp	r0, r4
     a98:	da1a      	bge.n	ad0 <_write+0x70>
     a9a:	e014      	b.n	ac6 <_write+0x66>
     a9c:	6830      	ldr	r0, [r6, #0]
     a9e:	683b      	ldr	r3, [r7, #0]
     aa0:	5d29      	ldrb	r1, [r5, r4]
     aa2:	4798      	blx	r3
     aa4:	2800      	cmp	r0, #0
     aa6:	db0e      	blt.n	ac6 <_write+0x66>
			return -1;
		}
		++nChars;
     aa8:	f104 0401 	add.w	r4, r4, #1
	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
     aac:	6830      	ldr	r0, [r6, #0]
     aae:	683a      	ldr	r2, [r7, #0]
     ab0:	5d29      	ldrb	r1, [r5, r4]
     ab2:	4790      	blx	r2
     ab4:	2800      	cmp	r0, #0
     ab6:	da1d      	bge.n	af4 <_write+0x94>
     ab8:	e005      	b.n	ac6 <_write+0x66>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
     aba:	f04f 34ff 	mov.w	r4, #4294967295
     abe:	e004      	b.n	aca <_write+0x6a>
	}

	for (; len != 0; --len) {
     ac0:	f04f 0400 	mov.w	r4, #0
     ac4:	e001      	b.n	aca <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
     ac6:	f04f 34ff 	mov.w	r4, #4294967295
		}
		++nChars;
	}
	return nChars;
}
     aca:	4620      	mov	r0, r4
     acc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
     ad0:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     ad4:	45a0      	cmp	r8, r4
     ad6:	d0f8      	beq.n	aca <_write+0x6a>
     ad8:	f1b9 0f00 	cmp.w	r9, #0
     adc:	d0de      	beq.n	a9c <_write+0x3c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
     ade:	6830      	ldr	r0, [r6, #0]
     ae0:	683a      	ldr	r2, [r7, #0]
     ae2:	5d29      	ldrb	r1, [r5, r4]
     ae4:	4790      	blx	r2
     ae6:	2800      	cmp	r0, #0
     ae8:	dbed      	blt.n	ac6 <_write+0x66>
			return -1;
		}
		++nChars;
     aea:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     aee:	45a0      	cmp	r8, r4
     af0:	d1d4      	bne.n	a9c <_write+0x3c>
     af2:	e7ea      	b.n	aca <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
     af4:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     af8:	45a0      	cmp	r8, r4
     afa:	d1cf      	bne.n	a9c <_write+0x3c>
     afc:	e7e5      	b.n	aca <_write+0x6a>
     afe:	bf00      	nop

00000b00 <pdca_channel_get_handler>:
 */
volatile PdcaChannel *pdca_channel_get_handler(pdca_channel_num_t
		pdca_ch_number)
{
	if (pdca_ch_number >= PDCA_NUMBER_OF_CHANNELS)
		pdca_ch_number = 0;
     b00:	280f      	cmp	r0, #15
     b02:	bf88      	it	hi
     b04:	2000      	movhi	r0, #0

	/* Get the correct channel pointer */
	volatile PdcaChannel *pdca_channel =
     b06:	ea4f 1080 	mov.w	r0, r0, lsl #6
     b0a:	f100 4180 	add.w	r1, r0, #1073741824	; 0x40000000
			&(PDCA->PDCA_CHANNEL[pdca_ch_number]);

	return pdca_channel;
}
     b0e:	f501 2022 	add.w	r0, r1, #663552	; 0xa2000
     b12:	4770      	bx	lr

00000b14 <pdca_get_channel_status>:
 *
 * \return 1 if channel transfer is enabled, else 0
 */
enum pdca_channel_status
		pdca_get_channel_status(pdca_channel_num_t pdca_ch_number)
{
     b14:	b508      	push	{r3, lr}
	/* Get the correct channel pointer */
	volatile PdcaChannel *pdca_channel =
     b16:	f640 3301 	movw	r3, #2817	; 0xb01
     b1a:	f2c0 0300 	movt	r3, #0
     b1e:	4798      	blx	r3
			pdca_channel_get_handler(pdca_ch_number);
	uint32_t status = pdca_channel->PDCA_SR;
     b20:	69c1      	ldr	r1, [r0, #28]
	uint32_t intflag = pdca_channel->PDCA_ISR;
     b22:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	if ((status & PDCA_SR_TEN) == PDCA_SR_TEN) {
     b24:	f011 0f01 	tst.w	r1, #1
     b28:	d00c      	beq.n	b44 <pdca_get_channel_status+0x30>
		if ((intflag & PDCA_ISR_TERR) == PDCA_ISR_TERR) {
     b2a:	f010 0f04 	tst.w	r0, #4
     b2e:	d10c      	bne.n	b4a <pdca_get_channel_status+0x36>
			return PDCA_CH_TRANSFER_ERROR;
		} else if ((intflag & PDCA_ISR_TRC) == PDCA_ISR_TRC) {
     b30:	f010 0f02 	tst.w	r0, #2
     b34:	d10c      	bne.n	b50 <pdca_get_channel_status+0x3c>
			return PDCA_CH_TRANSFER_COMPLETED;
		} else if ((intflag & PDCA_ISR_RCZ) == PDCA_ISR_RCZ) {
     b36:	f000 0201 	and.w	r2, r0, #1
			return PDCA_CH_COUNTER_RELOAD_IS_ZERO;
     b3a:	2a00      	cmp	r2, #0
     b3c:	bf0c      	ite	eq
     b3e:	2001      	moveq	r0, #1
     b40:	2002      	movne	r0, #2
     b42:	bd08      	pop	{r3, pc}
		}
		return PDCA_CH_BUSY;
	} else {
		return PDCA_CH_FREE;
     b44:	f04f 0000 	mov.w	r0, #0
     b48:	bd08      	pop	{r3, pc}
	uint32_t status = pdca_channel->PDCA_SR;
	uint32_t intflag = pdca_channel->PDCA_ISR;

	if ((status & PDCA_SR_TEN) == PDCA_SR_TEN) {
		if ((intflag & PDCA_ISR_TERR) == PDCA_ISR_TERR) {
			return PDCA_CH_TRANSFER_ERROR;
     b4a:	f04f 0004 	mov.w	r0, #4
     b4e:	bd08      	pop	{r3, pc}
		} else if ((intflag & PDCA_ISR_TRC) == PDCA_ISR_TRC) {
			return PDCA_CH_TRANSFER_COMPLETED;
     b50:	f04f 0003 	mov.w	r0, #3
		}
		return PDCA_CH_BUSY;
	} else {
		return PDCA_CH_FREE;
	}
}
     b54:	bd08      	pop	{r3, pc}
     b56:	bf00      	nop

00000b58 <pdca_channel_interrupt>:
 * pdca_channel_set_callback() function.
 *
 * \param pdca_ch_number PDCA channel number to handle interrupt for
 */
static void pdca_channel_interrupt(const pdca_channel_num_t pdca_ch_number)
{
     b58:	b510      	push	{r4, lr}
     b5a:	4604      	mov	r4, r0
	enum pdca_channel_status status;

	status = pdca_get_channel_status(pdca_ch_number);
     b5c:	f640 3315 	movw	r3, #2837	; 0xb15
     b60:	f2c0 0300 	movt	r3, #0
     b64:	4798      	blx	r3

	if (pdca_callback_pointer[pdca_ch_number]) {
     b66:	f640 2154 	movw	r1, #2644	; 0xa54
     b6a:	f2c2 0100 	movt	r1, #8192	; 0x2000
     b6e:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
     b72:	b102      	cbz	r2, b76 <pdca_channel_interrupt+0x1e>
		pdca_callback_pointer[pdca_ch_number] (status);
     b74:	4790      	blx	r2
     b76:	bd10      	pop	{r4, pc}

00000b78 <PDCA_0_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 0.
 */
void PDCA_0_Handler(void)
{
     b78:	b508      	push	{r3, lr}
	pdca_channel_interrupt(0);
     b7a:	f04f 0000 	mov.w	r0, #0
     b7e:	f640 3359 	movw	r3, #2905	; 0xb59
     b82:	f2c0 0300 	movt	r3, #0
     b86:	4798      	blx	r3
     b88:	bd08      	pop	{r3, pc}
     b8a:	bf00      	nop

00000b8c <PDCA_1_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 1.
 */
void PDCA_1_Handler(void)
{
     b8c:	b508      	push	{r3, lr}
	pdca_channel_interrupt(1);
     b8e:	f04f 0001 	mov.w	r0, #1
     b92:	f640 3359 	movw	r3, #2905	; 0xb59
     b96:	f2c0 0300 	movt	r3, #0
     b9a:	4798      	blx	r3
     b9c:	bd08      	pop	{r3, pc}
     b9e:	bf00      	nop

00000ba0 <PDCA_2_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 2.
 */
void PDCA_2_Handler(void)
{
     ba0:	b508      	push	{r3, lr}
	pdca_channel_interrupt(2);
     ba2:	f04f 0002 	mov.w	r0, #2
     ba6:	f640 3359 	movw	r3, #2905	; 0xb59
     baa:	f2c0 0300 	movt	r3, #0
     bae:	4798      	blx	r3
     bb0:	bd08      	pop	{r3, pc}
     bb2:	bf00      	nop

00000bb4 <PDCA_3_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 3.
 */
void PDCA_3_Handler(void)
{
     bb4:	b508      	push	{r3, lr}
	pdca_channel_interrupt(3);
     bb6:	f04f 0003 	mov.w	r0, #3
     bba:	f640 3359 	movw	r3, #2905	; 0xb59
     bbe:	f2c0 0300 	movt	r3, #0
     bc2:	4798      	blx	r3
     bc4:	bd08      	pop	{r3, pc}
     bc6:	bf00      	nop

00000bc8 <PDCA_4_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 4.
 */
void PDCA_4_Handler(void)
{
     bc8:	b508      	push	{r3, lr}
	pdca_channel_interrupt(4);
     bca:	f04f 0004 	mov.w	r0, #4
     bce:	f640 3359 	movw	r3, #2905	; 0xb59
     bd2:	f2c0 0300 	movt	r3, #0
     bd6:	4798      	blx	r3
     bd8:	bd08      	pop	{r3, pc}
     bda:	bf00      	nop

00000bdc <PDCA_5_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 5.
 */
void PDCA_5_Handler(void)
{
     bdc:	b508      	push	{r3, lr}
	pdca_channel_interrupt(5);
     bde:	f04f 0005 	mov.w	r0, #5
     be2:	f640 3359 	movw	r3, #2905	; 0xb59
     be6:	f2c0 0300 	movt	r3, #0
     bea:	4798      	blx	r3
     bec:	bd08      	pop	{r3, pc}
     bee:	bf00      	nop

00000bf0 <PDCA_6_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 6.
 */
void PDCA_6_Handler(void)
{
     bf0:	b508      	push	{r3, lr}
	pdca_channel_interrupt(6);
     bf2:	f04f 0006 	mov.w	r0, #6
     bf6:	f640 3359 	movw	r3, #2905	; 0xb59
     bfa:	f2c0 0300 	movt	r3, #0
     bfe:	4798      	blx	r3
     c00:	bd08      	pop	{r3, pc}
     c02:	bf00      	nop

00000c04 <PDCA_7_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 7.
 */
void PDCA_7_Handler(void)
{
     c04:	b508      	push	{r3, lr}
	pdca_channel_interrupt(7);
     c06:	f04f 0007 	mov.w	r0, #7
     c0a:	f640 3359 	movw	r3, #2905	; 0xb59
     c0e:	f2c0 0300 	movt	r3, #0
     c12:	4798      	blx	r3
     c14:	bd08      	pop	{r3, pc}
     c16:	bf00      	nop

00000c18 <PDCA_8_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 8.
 */
void PDCA_8_Handler(void)
{
     c18:	b508      	push	{r3, lr}
	pdca_channel_interrupt(8);
     c1a:	f04f 0008 	mov.w	r0, #8
     c1e:	f640 3359 	movw	r3, #2905	; 0xb59
     c22:	f2c0 0300 	movt	r3, #0
     c26:	4798      	blx	r3
     c28:	bd08      	pop	{r3, pc}
     c2a:	bf00      	nop

00000c2c <PDCA_9_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 9.
 */
void PDCA_9_Handler(void)
{
     c2c:	b508      	push	{r3, lr}
	pdca_channel_interrupt(9);
     c2e:	f04f 0009 	mov.w	r0, #9
     c32:	f640 3359 	movw	r3, #2905	; 0xb59
     c36:	f2c0 0300 	movt	r3, #0
     c3a:	4798      	blx	r3
     c3c:	bd08      	pop	{r3, pc}
     c3e:	bf00      	nop

00000c40 <PDCA_10_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 10.
 */
void PDCA_10_Handler(void)
{
     c40:	b508      	push	{r3, lr}
	pdca_channel_interrupt(10);
     c42:	f04f 000a 	mov.w	r0, #10
     c46:	f640 3359 	movw	r3, #2905	; 0xb59
     c4a:	f2c0 0300 	movt	r3, #0
     c4e:	4798      	blx	r3
     c50:	bd08      	pop	{r3, pc}
     c52:	bf00      	nop

00000c54 <PDCA_11_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 11.
 */
void PDCA_11_Handler(void)
{
     c54:	b508      	push	{r3, lr}
	pdca_channel_interrupt(11);
     c56:	f04f 000b 	mov.w	r0, #11
     c5a:	f640 3359 	movw	r3, #2905	; 0xb59
     c5e:	f2c0 0300 	movt	r3, #0
     c62:	4798      	blx	r3
     c64:	bd08      	pop	{r3, pc}
     c66:	bf00      	nop

00000c68 <PDCA_12_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 12.
 */
void PDCA_12_Handler(void)
{
     c68:	b508      	push	{r3, lr}
	pdca_channel_interrupt(12);
     c6a:	f04f 000c 	mov.w	r0, #12
     c6e:	f640 3359 	movw	r3, #2905	; 0xb59
     c72:	f2c0 0300 	movt	r3, #0
     c76:	4798      	blx	r3
     c78:	bd08      	pop	{r3, pc}
     c7a:	bf00      	nop

00000c7c <PDCA_13_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 13.
 */
void PDCA_13_Handler(void)
{
     c7c:	b508      	push	{r3, lr}
	pdca_channel_interrupt(13);
     c7e:	f04f 000d 	mov.w	r0, #13
     c82:	f640 3359 	movw	r3, #2905	; 0xb59
     c86:	f2c0 0300 	movt	r3, #0
     c8a:	4798      	blx	r3
     c8c:	bd08      	pop	{r3, pc}
     c8e:	bf00      	nop

00000c90 <PDCA_14_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 14.
 */
void PDCA_14_Handler(void)
{
     c90:	b508      	push	{r3, lr}
	pdca_channel_interrupt(14);
     c92:	f04f 000e 	mov.w	r0, #14
     c96:	f640 3359 	movw	r3, #2905	; 0xb59
     c9a:	f2c0 0300 	movt	r3, #0
     c9e:	4798      	blx	r3
     ca0:	bd08      	pop	{r3, pc}
     ca2:	bf00      	nop

00000ca4 <PDCA_15_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 15.
 */
void PDCA_15_Handler(void)
{
     ca4:	b508      	push	{r3, lr}
	pdca_channel_interrupt(15);
     ca6:	f04f 000f 	mov.w	r0, #15
     caa:	f640 3359 	movw	r3, #2905	; 0xb59
     cae:	f2c0 0300 	movt	r3, #0
     cb2:	4798      	blx	r3
     cb4:	bd08      	pop	{r3, pc}
     cb6:	bf00      	nop

00000cb8 <find_twim_channel_num>:
 * \return      TWIM channel number
 */
static uint32_t find_twim_channel_num(Twim *twim)
{
#if defined(ID_TWIM3)
	if (twim == TWIM3) {
     cb8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
     cbc:	f2c4 0307 	movt	r3, #16391	; 0x4007
     cc0:	4298      	cmp	r0, r3
     cc2:	d00e      	beq.n	ce2 <find_twim_channel_num+0x2a>
		return 3;
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
     cc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     cc8:	f2c4 0107 	movt	r1, #16391	; 0x4007
     ccc:	4288      	cmp	r0, r1
     cce:	d00b      	beq.n	ce8 <find_twim_channel_num+0x30>
		return 2;
	}
#endif
#if defined(ID_TWIM1)
	if (twim == TWIM1) {
     cd0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
     cd4:	f2c4 0201 	movt	r2, #16385	; 0x4001
     cd8:	4290      	cmp	r0, r2
     cda:	bf14      	ite	ne
     cdc:	2000      	movne	r0, #0
     cde:	2001      	moveq	r0, #1
     ce0:	4770      	bx	lr
 */
static uint32_t find_twim_channel_num(Twim *twim)
{
#if defined(ID_TWIM3)
	if (twim == TWIM3) {
		return 3;
     ce2:	f04f 0003 	mov.w	r0, #3
     ce6:	4770      	bx	lr
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
		return 2;
     ce8:	f04f 0002 	mov.w	r0, #2
		return 0;
	}
#endif

	return 0;
}
     cec:	4770      	bx	lr
     cee:	bf00      	nop

00000cf0 <twim_default_callback>:

/**
 * \brief TWIM default callback function
 */
void twim_default_callback(Twim *twim)
{
     cf0:	b510      	push	{r4, lr}
     cf2:	4604      	mov	r4, r0
	/* Get masked status register value */
	uint32_t twim_ch = find_twim_channel_num(twim);
     cf4:	f640 43b9 	movw	r3, #3257	; 0xcb9
     cf8:	f2c0 0300 	movt	r3, #0
     cfc:	4798      	blx	r3
	uint32_t status = twim->TWIM_SR;
     cfe:	69e1      	ldr	r1, [r4, #28]
	status &= twim_it_mask[twim_ch];
     d00:	f640 129c 	movw	r2, #2460	; 0x99c
     d04:	f2c2 0200 	movt	r2, #8192	; 0x2000
     d08:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
     d0c:	4019      	ands	r1, r3
	/* this is a NACK */
	if (status & TWIM_SR_STD_MASK) {
     d0e:	f411 6fa0 	tst.w	r1, #1280	; 0x500
     d12:	d01a      	beq.n	d4a <twim_default_callback+0x5a>
		/*
		 * If we get a nak, clear the valid bit in cmdr,
		 * otherwise the command will be resent.
		 */
		transfer_status[twim_ch] = (status & TWIM_IER_ANAK) ?
     d14:	f401 7380 	and.w	r3, r1, #256	; 0x100
     d18:	2b00      	cmp	r3, #0
     d1a:	bf0c      	ite	eq
     d1c:	21fe      	moveq	r1, #254	; 0xfe
     d1e:	21fc      	movne	r1, #252	; 0xfc
     d20:	f640 1288 	movw	r2, #2440	; 0x988
     d24:	f2c2 0200 	movt	r2, #8192	; 0x2000
     d28:	5411      	strb	r1, [r2, r0]
				TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim->TWIM_CMDR &= ~TWIM_CMDR_VALID;
     d2a:	68e3      	ldr	r3, [r4, #12]
     d2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
     d30:	60e1      	str	r1, [r4, #12]
		twim->TWIM_SCR = ~0UL;
     d32:	f04f 32ff 	mov.w	r2, #4294967295
     d36:	62e2      	str	r2, [r4, #44]	; 0x2c
		twim->TWIM_IDR = ~0UL;
     d38:	6262      	str	r2, [r4, #36]	; 0x24
		twim_next[twim_ch] = false;
     d3a:	f640 13ac 	movw	r3, #2476	; 0x9ac
     d3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d42:	f04f 0100 	mov.w	r1, #0
     d46:	5419      	strb	r1, [r3, r0]
     d48:	bd10      	pop	{r4, pc}
	}
	/* This is a RXRDY */
	else if (status & TWIM_SR_RXRDY) {
     d4a:	f011 0f01 	tst.w	r1, #1
     d4e:	d032      	beq.n	db6 <twim_default_callback+0xc6>
		/* Get data from Receive Holding Register */
		*twim_rx_data[twim_ch] = twim->TWIM_RHR;
     d50:	f640 1268 	movw	r2, #2408	; 0x968
     d54:	f2c2 0200 	movt	r2, #8192	; 0x2000
     d58:	6961      	ldr	r1, [r4, #20]
     d5a:	b2c9      	uxtb	r1, r1
     d5c:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
     d60:	f803 1b01 	strb.w	r1, [r3], #1
		twim_rx_data[twim_ch]++;
     d64:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
		/* Decrease received bytes number */
		twim_rx_nb_bytes[twim_ch]--;
     d68:	f640 1178 	movw	r1, #2424	; 0x978
     d6c:	f2c2 0100 	movt	r1, #8192	; 0x2000
     d70:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
     d74:	f102 33ff 	add.w	r3, r2, #4294967295
     d78:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
		/* Receive complete */
		if (twim_rx_nb_bytes[twim_ch] == 0) {
     d7c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
     d80:	2900      	cmp	r1, #0
     d82:	d17c      	bne.n	e7e <twim_default_callback+0x18e>
			/* Finish the receive operation */
			twim->TWIM_IDR = TWIM_IDR_RXRDY;
     d84:	f04f 0201 	mov.w	r2, #1
     d88:	6262      	str	r2, [r4, #36]	; 0x24
			/* Set busy to false */
			twim_next[twim_ch] = false;
     d8a:	f640 13ac 	movw	r3, #2476	; 0x9ac
     d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d92:	f04f 0100 	mov.w	r1, #0
     d96:	5419      	strb	r1, [r3, r0]
#if TWIM_LOW_POWER_ENABLE
			twim->TWIM_SCR = TWIM_SCR_CCOMP;
     d98:	f04f 0208 	mov.w	r2, #8
     d9c:	62e2      	str	r2, [r4, #44]	; 0x2c
			twim->TWIM_IER = TWIM_IER_CCOMP;
     d9e:	6222      	str	r2, [r4, #32]
			twim_it_mask[twim_ch] |= TWIM_IER_CCOMP;
     da0:	f640 139c 	movw	r3, #2460	; 0x99c
     da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     da8:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
     dac:	f041 0208 	orr.w	r2, r1, #8
     db0:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
     db4:	bd10      	pop	{r4, pc}
#endif
		}
	}
	/* This is a TXRDY */
	else if (status & TWIM_SR_TXRDY) {
     db6:	f011 0f02 	tst.w	r1, #2
     dba:	d059      	beq.n	e70 <twim_default_callback+0x180>
		/* No more bytes to transmit */
		if (twim_tx_nb_bytes[twim_ch] == 0) {
     dbc:	f640 11c0 	movw	r1, #2496	; 0x9c0
     dc0:	f2c2 0100 	movt	r1, #8192	; 0x2000
     dc4:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
     dc8:	b9c2      	cbnz	r2, dfc <twim_default_callback+0x10c>
			/* Finish the receive operation */
			twim->TWIM_IDR = TWIM_IDR_TXRDY;
     dca:	f04f 0202 	mov.w	r2, #2
     dce:	6262      	str	r2, [r4, #36]	; 0x24
			/* Set busy to false */
			twim_next[twim_ch] = false;
     dd0:	f640 11ac 	movw	r1, #2476	; 0x9ac
     dd4:	f2c2 0100 	movt	r1, #8192	; 0x2000
     dd8:	f04f 0300 	mov.w	r3, #0
     ddc:	540b      	strb	r3, [r1, r0]
#if TWIM_LOW_POWER_ENABLE
			twim->TWIM_SCR = TWIM_SCR_CCOMP;
     dde:	f04f 0208 	mov.w	r2, #8
     de2:	62e2      	str	r2, [r4, #44]	; 0x2c
			twim->TWIM_IER = TWIM_IER_CCOMP;
     de4:	6222      	str	r2, [r4, #32]
			twim_it_mask[twim_ch] |= TWIM_IER_CCOMP;
     de6:	f640 119c 	movw	r1, #2460	; 0x99c
     dea:	f2c2 0100 	movt	r1, #8192	; 0x2000
     dee:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
     df2:	f043 0208 	orr.w	r2, r3, #8
     df6:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
     dfa:	bd10      	pop	{r4, pc}
#endif
		} else {
			/* Put the byte in the Transmit Holding Register */
			twim->TWIM_THR = *twim_tx_data[twim_ch]++;
     dfc:	f640 128c 	movw	r2, #2444	; 0x98c
     e00:	f2c2 0200 	movt	r2, #8192	; 0x2000
     e04:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
     e08:	f813 1b01 	ldrb.w	r1, [r3], #1
     e0c:	61a1      	str	r1, [r4, #24]
     e0e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
			/* Decrease transmitted bytes number */
			twim_tx_nb_bytes[twim_ch]--;
     e12:	f640 13c0 	movw	r3, #2496	; 0x9c0
     e16:	f2c2 0300 	movt	r3, #8192	; 0x2000
     e1a:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
     e1e:	f102 31ff 	add.w	r1, r2, #4294967295
     e22:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
			if (twim_tx_nb_bytes[twim_ch] == 0) {
     e26:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     e2a:	bb43      	cbnz	r3, e7e <twim_default_callback+0x18e>
				/* Check for next transfer */
				if (twim_next[twim_ch]) {
     e2c:	f640 12ac 	movw	r2, #2476	; 0x9ac
     e30:	f2c2 0200 	movt	r2, #8192	; 0x2000
     e34:	5c11      	ldrb	r1, [r2, r0]
     e36:	b311      	cbz	r1, e7e <twim_default_callback+0x18e>
					twim_next[twim_ch] = false;
     e38:	f640 13ac 	movw	r3, #2476	; 0x9ac
     e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     e40:	f04f 0200 	mov.w	r2, #0
     e44:	541a      	strb	r2, [r3, r0]
					twim_tx_nb_bytes[twim_ch] = twim_package[twim_ch]->length;
     e46:	f640 11b0 	movw	r1, #2480	; 0x9b0
     e4a:	f2c2 0100 	movt	r1, #8192	; 0x2000
     e4e:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
     e52:	68d9      	ldr	r1, [r3, #12]
     e54:	f640 12c0 	movw	r2, #2496	; 0x9c0
     e58:	f2c2 0200 	movt	r2, #8192	; 0x2000
     e5c:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
					twim_tx_data[twim_ch] = twim_package[twim_ch]->buffer;
     e60:	6899      	ldr	r1, [r3, #8]
     e62:	f640 138c 	movw	r3, #2444	; 0x98c
     e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
     e6a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
     e6e:	bd10      	pop	{r4, pc}
				}
			}
		}
	}
#if TWIM_LOW_POWER_ENABLE
	else if (status & TWIM_SR_CCOMP) {
     e70:	f011 0f08 	tst.w	r1, #8
     e74:	d003      	beq.n	e7e <twim_default_callback+0x18e>
		twim->TWIM_SCR = TWIM_SCR_CCOMP;
     e76:	f04f 0008 	mov.w	r0, #8
     e7a:	62e0      	str	r0, [r4, #44]	; 0x2c
		twim->TWIM_IDR = TWIM_IDR_CCOMP;
     e7c:	6260      	str	r0, [r4, #36]	; 0x24
     e7e:	bd10      	pop	{r4, pc}

00000e80 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
     e80:	b470      	push	{r4, r5, r6}
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);
     e82:	fbb2 f2f1 	udiv	r2, r2, r1
     e86:	ea4f 0252 	mov.w	r2, r2, lsr #1

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     e8a:	2aff      	cmp	r2, #255	; 0xff
     e8c:	d91e      	bls.n	ecc <twim_set_speed+0x4c>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     e8e:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     e92:	2aff      	cmp	r2, #255	; 0xff
     e94:	d935      	bls.n	f02 <twim_set_speed+0x82>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     e96:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     e9a:	2aff      	cmp	r2, #255	; 0xff
     e9c:	d934      	bls.n	f08 <twim_set_speed+0x88>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     e9e:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     ea2:	2aff      	cmp	r2, #255	; 0xff
     ea4:	d933      	bls.n	f0e <twim_set_speed+0x8e>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     ea6:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     eaa:	2aff      	cmp	r2, #255	; 0xff
     eac:	d932      	bls.n	f14 <twim_set_speed+0x94>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     eae:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     eb2:	2aff      	cmp	r2, #255	; 0xff
     eb4:	d931      	bls.n	f1a <twim_set_speed+0x9a>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     eb6:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     eba:	2aff      	cmp	r2, #255	; 0xff
     ebc:	d930      	bls.n	f20 <twim_set_speed+0xa0>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     ebe:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     ec2:	2aff      	cmp	r2, #255	; 0xff
     ec4:	d92f      	bls.n	f26 <twim_set_speed+0xa6>
		/* divide f_prescaled value */
		f_prescaled /= 2;
	}

	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
     ec6:	f04f 00f8 	mov.w	r0, #248	; 0xf8
     eca:	e018      	b.n	efe <twim_set_speed+0x7e>
 */
status_code_t twim_set_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
     ecc:	f04f 0600 	mov.w	r6, #0
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
     ed0:	ea4f 0152 	mov.w	r1, r2, lsr #1
     ed4:	b2cd      	uxtb	r5, r1
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
			| TWIM_CWGR_STASTO(f_prescaled);
     ed6:	ea4f 4402 	mov.w	r4, r2, lsl #16
     eda:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
     ede:	432c      	orrs	r4, r5
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
     ee0:	ea4f 6303 	mov.w	r3, r3, lsl #24
     ee4:	f003 6570 	and.w	r5, r3, #251658240	; 0xf000000
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_CWGR_EXP(cwgr_exp)
     ee8:	432c      	orrs	r4, r5
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
     eea:	1a52      	subs	r2, r2, r1
     eec:	ea4f 6102 	mov.w	r1, r2, lsl #24
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
     ef0:	ea44 4311 	orr.w	r3, r4, r1, lsr #16
			| TWIM_CWGR_STASTO(f_prescaled);
     ef4:	ea43 7206 	orr.w	r2, r3, r6, lsl #28
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
     ef8:	6042      	str	r2, [r0, #4]
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
			| TWIM_CWGR_STASTO(f_prescaled);

	return STATUS_OK;
     efa:	f04f 0000 	mov.w	r0, #0
     efe:	b240      	sxtb	r0, r0
     f00:	e014      	b.n	f2c <twim_set_speed+0xac>
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
		/* increase clock divider */
		cwgr_exp++;
     f02:	f04f 0601 	mov.w	r6, #1
     f06:	e7e3      	b.n	ed0 <twim_set_speed+0x50>
     f08:	f04f 0602 	mov.w	r6, #2
     f0c:	e7e0      	b.n	ed0 <twim_set_speed+0x50>
     f0e:	f04f 0603 	mov.w	r6, #3
     f12:	e7dd      	b.n	ed0 <twim_set_speed+0x50>
     f14:	f04f 0604 	mov.w	r6, #4
     f18:	e7da      	b.n	ed0 <twim_set_speed+0x50>
     f1a:	f04f 0605 	mov.w	r6, #5
     f1e:	e7d7      	b.n	ed0 <twim_set_speed+0x50>
     f20:	f04f 0606 	mov.w	r6, #6
     f24:	e7d4      	b.n	ed0 <twim_set_speed+0x50>
     f26:	f04f 0607 	mov.w	r6, #7
     f2a:	e7d1      	b.n	ed0 <twim_set_speed+0x50>
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
			| TWIM_CWGR_STASTO(f_prescaled);

	return STATUS_OK;
}
     f2c:	bc70      	pop	{r4, r5, r6}
     f2e:	4770      	bx	lr

00000f30 <twim_set_hsmode_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_hsmode_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
     f30:	b470      	push	{r4, r5, r6}
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);
     f32:	fbb2 f2f1 	udiv	r2, r2, r1
     f36:	ea4f 0252 	mov.w	r2, r2, lsr #1

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     f3a:	2aff      	cmp	r2, #255	; 0xff
     f3c:	d91e      	bls.n	f7c <twim_set_hsmode_speed+0x4c>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     f3e:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     f42:	2aff      	cmp	r2, #255	; 0xff
     f44:	d935      	bls.n	fb2 <twim_set_hsmode_speed+0x82>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     f46:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     f4a:	2aff      	cmp	r2, #255	; 0xff
     f4c:	d934      	bls.n	fb8 <twim_set_hsmode_speed+0x88>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     f4e:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     f52:	2aff      	cmp	r2, #255	; 0xff
     f54:	d933      	bls.n	fbe <twim_set_hsmode_speed+0x8e>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     f56:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     f5a:	2aff      	cmp	r2, #255	; 0xff
     f5c:	d932      	bls.n	fc4 <twim_set_hsmode_speed+0x94>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     f5e:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     f62:	2aff      	cmp	r2, #255	; 0xff
     f64:	d931      	bls.n	fca <twim_set_hsmode_speed+0x9a>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     f66:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     f6a:	2aff      	cmp	r2, #255	; 0xff
     f6c:	d930      	bls.n	fd0 <twim_set_hsmode_speed+0xa0>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     f6e:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     f72:	2aff      	cmp	r2, #255	; 0xff
     f74:	d92f      	bls.n	fd6 <twim_set_hsmode_speed+0xa6>
		/* divide f_prescaled value */
		f_prescaled /= 2;
	}

	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
     f76:	f04f 00f8 	mov.w	r0, #248	; 0xf8
     f7a:	e018      	b.n	fae <twim_set_hsmode_speed+0x7e>
 */
status_code_t twim_set_hsmode_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
     f7c:	f04f 0600 	mov.w	r6, #0
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
     f80:	ea4f 0152 	mov.w	r1, r2, lsr #1
     f84:	b2cd      	uxtb	r5, r1
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
			| TWIM_HSCWGR_STASTO(f_prescaled);
     f86:	ea4f 4402 	mov.w	r4, r2, lsl #16
     f8a:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
     f8e:	432c      	orrs	r4, r5
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
     f90:	ea4f 6303 	mov.w	r3, r3, lsl #24
     f94:	f003 6570 	and.w	r5, r3, #251658240	; 0xf000000
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_HSCWGR_EXP(cwgr_exp)
     f98:	432c      	orrs	r4, r5
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
     f9a:	1a52      	subs	r2, r2, r1
     f9c:	ea4f 6102 	mov.w	r1, r2, lsl #24
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
     fa0:	ea44 4311 	orr.w	r3, r4, r1, lsr #16
			| TWIM_HSCWGR_STASTO(f_prescaled);
     fa4:	ea43 7206 	orr.w	r2, r3, r6, lsl #28
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
     fa8:	6382      	str	r2, [r0, #56]	; 0x38
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
			| TWIM_HSCWGR_STASTO(f_prescaled);

	return STATUS_OK;
     faa:	f04f 0000 	mov.w	r0, #0
     fae:	b240      	sxtb	r0, r0
     fb0:	e014      	b.n	fdc <twim_set_hsmode_speed+0xac>
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
		/* increase clock divider */
		cwgr_exp++;
     fb2:	f04f 0601 	mov.w	r6, #1
     fb6:	e7e3      	b.n	f80 <twim_set_hsmode_speed+0x50>
     fb8:	f04f 0602 	mov.w	r6, #2
     fbc:	e7e0      	b.n	f80 <twim_set_hsmode_speed+0x50>
     fbe:	f04f 0603 	mov.w	r6, #3
     fc2:	e7dd      	b.n	f80 <twim_set_hsmode_speed+0x50>
     fc4:	f04f 0604 	mov.w	r6, #4
     fc8:	e7da      	b.n	f80 <twim_set_hsmode_speed+0x50>
     fca:	f04f 0605 	mov.w	r6, #5
     fce:	e7d7      	b.n	f80 <twim_set_hsmode_speed+0x50>
     fd0:	f04f 0606 	mov.w	r6, #6
     fd4:	e7d4      	b.n	f80 <twim_set_hsmode_speed+0x50>
     fd6:	f04f 0607 	mov.w	r6, #7
     fda:	e7d1      	b.n	f80 <twim_set_hsmode_speed+0x50>
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
			| TWIM_HSCWGR_STASTO(f_prescaled);

	return STATUS_OK;
}
     fdc:	bc70      	pop	{r4, r5, r6}
     fde:	4770      	bx	lr

00000fe0 <twim_set_config>:
 *
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_config(Twim *twim, struct twim_config *config)
{
     fe0:	b570      	push	{r4, r5, r6, lr}
     fe2:	4605      	mov	r5, r0
     fe4:	460c      	mov	r4, r1
	sysclk_enable_peripheral_clock(twim);
     fe6:	f242 1331 	movw	r3, #8497	; 0x2131
     fea:	f2c0 0300 	movt	r3, #0
     fee:	4798      	blx	r3
	/* Enable master transfer */
	twim->TWIM_CR = TWIM_CR_MEN;
     ff0:	f04f 0001 	mov.w	r0, #1
     ff4:	6028      	str	r0, [r5, #0]
	/* Reset TWI */
	twim->TWIM_CR = TWIM_CR_SWRST;
     ff6:	f04f 0180 	mov.w	r1, #128	; 0x80
     ffa:	6029      	str	r1, [r5, #0]
	/* Clear SR */
	twim->TWIM_SCR = ~0UL;
     ffc:	f04f 32ff 	mov.w	r2, #4294967295
    1000:	62ea      	str	r2, [r5, #44]	; 0x2c

	if (config->smbus) {
    1002:	7ba3      	ldrb	r3, [r4, #14]
    1004:	b12b      	cbz	r3, 1012 <__stack_size__+0x12>
		/* Enable SMBUS Transfer */
		twim->TWIM_CR = TWIM_CR_SMEN;
    1006:	f04f 0010 	mov.w	r0, #16
    100a:	6028      	str	r0, [r5, #0]
		twim->TWIM_SMBTR = (uint32_t) -1;
    100c:	f04f 31ff 	mov.w	r1, #4294967295
    1010:	60a9      	str	r1, [r5, #8]
	}

	/* Select the speed */
	if (config->speed) {
    1012:	6861      	ldr	r1, [r4, #4]
    1014:	b149      	cbz	r1, 102a <__stack_size__+0x2a>
		if (twim_set_speed(twim, config->speed, config->twim_clk,
    1016:	4628      	mov	r0, r5
    1018:	6822      	ldr	r2, [r4, #0]
    101a:	7b23      	ldrb	r3, [r4, #12]
    101c:	f640 6681 	movw	r6, #3713	; 0xe81
    1020:	f2c0 0600 	movt	r6, #0
    1024:	47b0      	blx	r6
    1026:	2800      	cmp	r0, #0
    1028:	d15d      	bne.n	10e6 <__stack_size__+0xe6>
				config->data_setup_cycles) != STATUS_OK) {
			return ERR_INVALID_ARG;
		}
	}
	if (config->hsmode_speed) {
    102a:	68a1      	ldr	r1, [r4, #8]
    102c:	b149      	cbz	r1, 1042 <__stack_size__+0x42>
		if (twim_set_hsmode_speed(twim, config->hsmode_speed, config->twim_clk,
    102e:	4628      	mov	r0, r5
    1030:	6822      	ldr	r2, [r4, #0]
    1032:	7b63      	ldrb	r3, [r4, #13]
    1034:	f640 7631 	movw	r6, #3889	; 0xf31
    1038:	f2c0 0600 	movt	r6, #0
    103c:	47b0      	blx	r6
    103e:	2800      	cmp	r0, #0
    1040:	d154      	bne.n	10ec <__stack_size__+0xec>
		}
	}

	/* Set clock and data slew rate */
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
			TWIM_SRR_FILTER(2) : TWIM_SRR_FILTER(3))
    1042:	f244 233f 	movw	r3, #16959	; 0x423f
    1046:	f2c0 030f 	movt	r3, #15
    104a:	6862      	ldr	r2, [r4, #4]
    104c:	429a      	cmp	r2, r3
    104e:	bf8c      	ite	hi
    1050:	f04f 5240 	movhi.w	r2, #805306368	; 0x30000000
    1054:	f04f 5200 	movls.w	r2, #536870912	; 0x20000000
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
    1058:	7c60      	ldrb	r0, [r4, #17]
    105a:	ea4f 2100 	mov.w	r1, r0, lsl #8
    105e:	f401 7140 	and.w	r1, r1, #768	; 0x300
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
    1062:	7ca3      	ldrb	r3, [r4, #18]
    1064:	f003 0007 	and.w	r0, r3, #7

	/* Set clock and data slew rate */
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
			TWIM_SRR_FILTER(2) : TWIM_SRR_FILTER(3))
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
    1068:	4301      	orrs	r1, r0
    106a:	7c23      	ldrb	r3, [r4, #16]
    106c:	ea4f 4003 	mov.w	r0, r3, lsl #16
    1070:	f400 20e0 	and.w	r0, r0, #458752	; 0x70000
	}

	/* Set clock and data slew rate */
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
			TWIM_SRR_FILTER(2) : TWIM_SRR_FILTER(3))
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
    1074:	7be3      	ldrb	r3, [r4, #15]
    1076:	ea4f 6303 	mov.w	r3, r3, lsl #24
    107a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
    107e:	4318      	orrs	r0, r3
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
    1080:	4301      	orrs	r1, r0
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
    1082:	4311      	orrs	r1, r2
			return ERR_INVALID_ARG;
		}
	}

	/* Set clock and data slew rate */
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
    1084:	63e9      	str	r1, [r5, #60]	; 0x3c
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
			| TWIM_HSSRR_CLSLEW(config->hs_clock_slew_limit)
			| TWIM_HSSRR_CLDRIVEL(config->hs_clock_drive_strength_low)
			| TWIM_HSSRR_CLDRIVEH(config->hs_clock_drive_strength_high)
			| TWIM_HSSRR_DASLEW(config->hs_data_slew_limit)
			| TWIM_HSSRR_DADRIVEL(config->hs_data_drive_strength_low);
    1086:	7de2      	ldrb	r2, [r4, #23]
    1088:	f002 0307 	and.w	r3, r2, #7
    108c:	f043 5080 	orr.w	r0, r3, #268435456	; 0x10000000
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
			| TWIM_HSSRR_CLSLEW(config->hs_clock_slew_limit)
			| TWIM_HSSRR_CLDRIVEL(config->hs_clock_drive_strength_low)
    1090:	7d61      	ldrb	r1, [r4, #21]
    1092:	ea4f 4201 	mov.w	r2, r1, lsl #16
    1096:	f402 21e0 	and.w	r1, r2, #458752	; 0x70000
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
			| TWIM_HSSRR_CLSLEW(config->hs_clock_slew_limit)
    109a:	7ce3      	ldrb	r3, [r4, #19]
    109c:	ea4f 6203 	mov.w	r2, r3, lsl #24
    10a0:	f002 7340 	and.w	r3, r2, #50331648	; 0x3000000
			| TWIM_HSSRR_CLDRIVEL(config->hs_clock_drive_strength_low)
    10a4:	ea41 0203 	orr.w	r2, r1, r3
			| TWIM_HSSRR_CLDRIVEH(config->hs_clock_drive_strength_high)
    10a8:	7d21      	ldrb	r1, [r4, #20]
    10aa:	ea4f 5301 	mov.w	r3, r1, lsl #20
    10ae:	f403 1140 	and.w	r1, r3, #3145728	; 0x300000
    10b2:	430a      	orrs	r2, r1
			| TWIM_HSSRR_DASLEW(config->hs_data_slew_limit)
    10b4:	7da3      	ldrb	r3, [r4, #22]
    10b6:	ea4f 2103 	mov.w	r1, r3, lsl #8
    10ba:	f401 7340 	and.w	r3, r1, #768	; 0x300
    10be:	431a      	orrs	r2, r3
			| TWIM_HSSRR_DADRIVEL(config->hs_data_drive_strength_low);
    10c0:	4310      	orrs	r0, r2
			TWIM_SRR_FILTER(2) : TWIM_SRR_FILTER(3))
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
    10c2:	6428      	str	r0, [r5, #64]	; 0x40
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    10c4:	f640 2140 	movw	r1, #2624	; 0xa40
    10c8:	f2c2 0100 	movt	r1, #8192	; 0x2000
    10cc:	f04f 0300 	mov.w	r3, #0
    10d0:	700b      	strb	r3, [r1, #0]
    10d2:	704b      	strb	r3, [r1, #1]
    10d4:	708b      	strb	r3, [r1, #2]
    10d6:	70cb      	strb	r3, [r1, #3]
    10d8:	710b      	strb	r3, [r1, #4]
    10da:	714b      	strb	r3, [r1, #5]
    10dc:	718b      	strb	r3, [r1, #6]
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    10de:	f04f 0201 	mov.w	r2, #1
    10e2:	71ca      	strb	r2, [r1, #7]

#if TWIM_LOW_POWER_ENABLE
	sleepmgr_init();
#endif

	return STATUS_OK;
    10e4:	e004      	b.n	10f0 <__stack_size__+0xf0>

	/* Select the speed */
	if (config->speed) {
		if (twim_set_speed(twim, config->speed, config->twim_clk,
				config->data_setup_cycles) != STATUS_OK) {
			return ERR_INVALID_ARG;
    10e6:	f04f 03f8 	mov.w	r3, #248	; 0xf8
    10ea:	e001      	b.n	10f0 <__stack_size__+0xf0>
		}
	}
	if (config->hsmode_speed) {
		if (twim_set_hsmode_speed(twim, config->hsmode_speed, config->twim_clk,
				config->hsmode_data_setup_cycles) != STATUS_OK) {
			return ERR_INVALID_ARG;
    10ec:	f04f 03f8 	mov.w	r3, #248	; 0xf8
#if TWIM_LOW_POWER_ENABLE
	sleepmgr_init();
#endif

	return STATUS_OK;
}
    10f0:	b258      	sxtb	r0, r3
    10f2:	bd70      	pop	{r4, r5, r6, pc}

000010f4 <twim_enable_interrupt>:
 * \param interrupt_source  The TWI interrupt to be enabled
 */
void twim_enable_interrupt(Twim *twim, uint32_t interrupt_source)
{
	/* Set the interrupt flags */
	twim->TWIM_IER = interrupt_source;
    10f4:	6201      	str	r1, [r0, #32]
    10f6:	4770      	bx	lr

000010f8 <twim_get_status>:
 *
 * \param twim   Base address of the TWIM
 */
uint32_t twim_get_status(Twim *twim)
{
	return twim->TWIM_SR;
    10f8:	69c0      	ldr	r0, [r0, #28]
}
    10fa:	4770      	bx	lr

000010fc <twi_master_write>:
 *
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twi_master_write(Twim *twim, struct twim_package *package)
{
    10fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1100:	4606      	mov	r6, r0
    1102:	460c      	mov	r4, r1
	uint32_t twim_ch = find_twim_channel_num(twim);
    1104:	f640 43b9 	movw	r3, #3257	; 0xcb9
    1108:	f2c0 0300 	movt	r3, #0
    110c:	4798      	blx	r3
    110e:	4605      	mov	r5, r0

	/* Reset the TWIM module to clear the THR register */
	twim->TWIM_CR = TWIM_CR_MEN;
    1110:	f04f 0001 	mov.w	r0, #1
    1114:	6030      	str	r0, [r6, #0]
	twim->TWIM_CR = TWIM_CR_SWRST;
    1116:	f04f 0180 	mov.w	r1, #128	; 0x80
    111a:	6031      	str	r1, [r6, #0]
	twim->TWIM_CR = TWIM_CR_MDIS;
    111c:	f04f 0202 	mov.w	r2, #2
    1120:	6032      	str	r2, [r6, #0]
	/* Clear the interrupt flags */
	twim->TWIM_IDR = ~0UL;
    1122:	f04f 37ff 	mov.w	r7, #4294967295
    1126:	6277      	str	r7, [r6, #36]	; 0x24
	/* Clear the status flags */
	twim->TWIM_SCR = ~0UL;
    1128:	62f7      	str	r7, [r6, #44]	; 0x2c
	/* Initialize bus transfer status */
	transfer_status[twim_ch] = TWI_SUCCESS;
    112a:	f04f 0300 	mov.w	r3, #0
    112e:	f640 1088 	movw	r0, #2440	; 0x988
    1132:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1136:	5543      	strb	r3, [r0, r5]
	/* Mask NACK and TXRDY interrupts */
	twim_it_mask[twim_ch] = TWIM_IER_STD_MASK | TWIM_IER_TXRDY;
    1138:	f640 129c 	movw	r2, #2460	; 0x99c
    113c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1140:	f240 5102 	movw	r1, #1282	; 0x502
    1144:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
	/* Set next transfer to false */
	twim_next[twim_ch] = false;
    1148:	f640 17ac 	movw	r7, #2476	; 0x9ac
    114c:	f2c2 0700 	movt	r7, #8192	; 0x2000
    1150:	557b      	strb	r3, [r7, r5]

	/* Check if internal address access is performed */
	if (package->addr_length) {
    1152:	79e3      	ldrb	r3, [r4, #7]
    1154:	b1db      	cbz	r3, 118e <twi_master_write+0x92>
		/* Selection of first valid byte of the address */
		twim_tx_data[twim_ch] = package->addr;
    1156:	f104 0004 	add.w	r0, r4, #4
    115a:	f640 128c 	movw	r2, #2444	; 0x98c
    115e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1162:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
		/* Set the number of bytes to transmit */
		twim_tx_nb_bytes[twim_ch] = package->addr_length;
    1166:	f640 11c0 	movw	r1, #2496	; 0x9c0
    116a:	f2c2 0100 	movt	r1, #8192	; 0x2000
    116e:	f841 3025 	str.w	r3, [r1, r5, lsl #2]
		/* Set next transfer to true */
		twim_next[twim_ch] = true;
    1172:	f640 13ac 	movw	r3, #2476	; 0x9ac
    1176:	f2c2 0300 	movt	r3, #8192	; 0x2000
    117a:	f04f 0701 	mov.w	r7, #1
    117e:	555f      	strb	r7, [r3, r5]
		/* Set the number of bytes & address for next transfer */
		twim_package[twim_ch] = package;
    1180:	f640 10b0 	movw	r0, #2480	; 0x9b0
    1184:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1188:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
    118c:	e00d      	b.n	11aa <twi_master_write+0xae>
	} else {
		/* Get a pointer to applicative data */
		twim_tx_data[twim_ch] = package->buffer;
    118e:	68a0      	ldr	r0, [r4, #8]
    1190:	f640 128c 	movw	r2, #2444	; 0x98c
    1194:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1198:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
		/* Get a copy of nb bytes to write */
		twim_tx_nb_bytes[twim_ch] = package->length;
    119c:	68e1      	ldr	r1, [r4, #12]
    119e:	f640 17c0 	movw	r7, #2496	; 0x9c0
    11a2:	f2c2 0700 	movt	r7, #8192	; 0x2000
    11a6:	f847 1025 	str.w	r1, [r7, r5, lsl #2]
	}

	/* Initiate the transfer to send the data */
	twim->TWIM_CMDR = (package->high_speed ? (TWIM_CMDR_HS |
			TWIM_CMDR_HSMCODE(package->high_speed_code)) : 0)
			| TWIM_CMDR_SADR(package->chip)
    11aa:	7c62      	ldrb	r2, [r4, #17]
    11ac:	b13a      	cbz	r2, 11be <twi_master_write+0xc2>
		twim_tx_nb_bytes[twim_ch] = package->length;
	}

	/* Initiate the transfer to send the data */
	twim->TWIM_CMDR = (package->high_speed ? (TWIM_CMDR_HS |
			TWIM_CMDR_HSMCODE(package->high_speed_code)) : 0)
    11ae:	7ca3      	ldrb	r3, [r4, #18]
    11b0:	ea4f 7703 	mov.w	r7, r3, lsl #28
    11b4:	f007 40e0 	and.w	r0, r7, #1879048192	; 0x70000000
			| TWIM_CMDR_SADR(package->chip)
    11b8:	f040 6180 	orr.w	r1, r0, #67108864	; 0x4000000
    11bc:	e001      	b.n	11c2 <twi_master_write+0xc6>
    11be:	f04f 0100 	mov.w	r1, #0
    11c2:	6822      	ldr	r2, [r4, #0]
    11c4:	f240 73fe 	movw	r3, #2046	; 0x7fe
    11c8:	ea03 0742 	and.w	r7, r3, r2, lsl #1
			| TWIM_CMDR_NBYTES(package->length + package->addr_length)
    11cc:	79e0      	ldrb	r0, [r4, #7]
    11ce:	68e2      	ldr	r2, [r4, #12]
    11d0:	1883      	adds	r3, r0, r2
    11d2:	ea4f 4003 	mov.w	r0, r3, lsl #16
    11d6:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
			| TWIM_CMDR_VALID
			| TWIM_CMDR_START
			| TWIM_CMDR_STOP
			| (package->ten_bit ? TWIM_CMDR_TENBIT : 0);
    11da:	7c24      	ldrb	r4, [r4, #16]
    11dc:	2c00      	cmp	r4, #0
    11de:	bf14      	ite	ne
    11e0:	f44f 6200 	movne.w	r2, #2048	; 0x800
    11e4:	2200      	moveq	r2, #0
	}

	/* Initiate the transfer to send the data */
	twim->TWIM_CMDR = (package->high_speed ? (TWIM_CMDR_HS |
			TWIM_CMDR_HSMCODE(package->high_speed_code)) : 0)
			| TWIM_CMDR_SADR(package->chip)
    11e6:	f447 4760 	orr.w	r7, r7, #57344	; 0xe000
			| TWIM_CMDR_NBYTES(package->length + package->addr_length)
    11ea:	4307      	orrs	r7, r0
			| TWIM_CMDR_VALID
			| TWIM_CMDR_START
			| TWIM_CMDR_STOP
			| (package->ten_bit ? TWIM_CMDR_TENBIT : 0);
    11ec:	430f      	orrs	r7, r1
    11ee:	4317      	orrs	r7, r2
		/* Get a copy of nb bytes to write */
		twim_tx_nb_bytes[twim_ch] = package->length;
	}

	/* Initiate the transfer to send the data */
	twim->TWIM_CMDR = (package->high_speed ? (TWIM_CMDR_HS |
    11f0:	60f7      	str	r7, [r6, #12]
			| TWIM_CMDR_START
			| TWIM_CMDR_STOP
			| (package->ten_bit ? TWIM_CMDR_TENBIT : 0);

	/* Update IMR through IER */
	twim->TWIM_IER = twim_it_mask[twim_ch];
    11f2:	f640 119c 	movw	r1, #2460	; 0x99c
    11f6:	f2c2 0100 	movt	r1, #8192	; 0x2000
    11fa:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
    11fe:	6233      	str	r3, [r6, #32]
	/* Enable master transfer */
	twim->TWIM_CR = TWIM_CR_MEN;
    1200:	f04f 0001 	mov.w	r0, #1
    1204:	6030      	str	r0, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1206:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    120a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    120c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1210:	f240 0244 	movw	r2, #68	; 0x44
    1214:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1218:	f04f 0700 	mov.w	r7, #0
    121c:	7017      	strb	r7, [r2, #0]
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    121e:	f640 2340 	movw	r3, #2624	; 0xa40
    1222:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1226:	7899      	ldrb	r1, [r3, #2]
    1228:	f101 0101 	add.w	r1, r1, #1
    122c:	7099      	strb	r1, [r3, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    122e:	2c00      	cmp	r4, #0
    1230:	d138      	bne.n	12a4 <twi_master_write+0x1a8>
		cpu_irq_enable();
    1232:	f240 0044 	movw	r0, #68	; 0x44
    1236:	f2c2 0000 	movt	r0, #8192	; 0x2000
    123a:	f04f 0401 	mov.w	r4, #1
    123e:	7004      	strb	r4, [r0, #0]
    1240:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1244:	b662      	cpsie	i
    1246:	e02d      	b.n	12a4 <twi_master_write+0x1a8>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1248:	b672      	cpsid	i
    124a:	f3bf 8f5f 	dmb	sy
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    124e:	f04f 0300 	mov.w	r3, #0
    1252:	7023      	strb	r3, [r4, #0]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    1254:	f640 2140 	movw	r1, #2624	; 0xa40
    1258:	f2c2 0100 	movt	r1, #8192	; 0x2000
    125c:	7808      	ldrb	r0, [r1, #0]
    125e:	b968      	cbnz	r0, 127c <twi_master_write+0x180>
    1260:	f640 2340 	movw	r3, #2624	; 0xa40
    1264:	f2c2 0300 	movt	r3, #8192	; 0x2000
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
    1268:	f04f 0100 	mov.w	r1, #0
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    126c:	f101 0101 	add.w	r1, r1, #1
    1270:	b2c9      	uxtb	r1, r1

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    1272:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    1276:	2a00      	cmp	r2, #0
    1278:	d0f8      	beq.n	126c <twi_master_write+0x170>
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    127a:	b931      	cbnz	r1, 128a <twi_master_write+0x18e>
		cpu_irq_enable();
    127c:	f04f 0101 	mov.w	r1, #1
    1280:	7021      	strb	r1, [r4, #0]
    1282:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1286:	b662      	cpsie	i
    1288:	e01c      	b.n	12c4 <twi_master_write+0x1c8>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    128a:	b672      	cpsid	i
    128c:	f3bf 8f5f 	dmb	sy

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
    1290:	f04f 0000 	mov.w	r0, #0
    1294:	7020      	strb	r0, [r4, #0]

	/* Enter the sleep mode. */
	bpm_sleep(BPM, sleep_mode);
    1296:	4648      	mov	r0, r9
    1298:	f243 03c5 	movw	r3, #12485	; 0x30c5
    129c:	f2c0 0300 	movt	r3, #0
    12a0:	4798      	blx	r3
    12a2:	e00f      	b.n	12c4 <twi_master_write+0x1c8>
	/* Send data */
#if TWIM_LOW_POWER_ENABLE
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_1);
	while (!(transfer_status[twim_ch])
    12a4:	f640 1788 	movw	r7, #2440	; 0x988
    12a8:	f2c2 0700 	movt	r7, #8192	; 0x2000
			&& !(twim_get_status(twim) & TWIM_SR_IDLE)) {
    12ac:	f241 08f9 	movw	r8, #4345	; 0x10f9
    12b0:	f2c0 0800 	movt	r8, #0
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    12b4:	f240 0444 	movw	r4, #68	; 0x44
    12b8:	f2c2 0400 	movt	r4, #8192	; 0x2000
    12bc:	f04f 0900 	mov.w	r9, #0
    12c0:	f2c4 090f 	movt	r9, #16399	; 0x400f
	/* Enable master transfer */
	twim->TWIM_CR = TWIM_CR_MEN;
	/* Send data */
#if TWIM_LOW_POWER_ENABLE
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_1);
	while (!(transfer_status[twim_ch])
    12c4:	5d7a      	ldrb	r2, [r7, r5]
    12c6:	b922      	cbnz	r2, 12d2 <twi_master_write+0x1d6>
			&& !(twim_get_status(twim) & TWIM_SR_IDLE)) {
    12c8:	4630      	mov	r0, r6
    12ca:	47c0      	blx	r8
    12cc:	f010 0f10 	tst.w	r0, #16
    12d0:	d0ba      	beq.n	1248 <twi_master_write+0x14c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    12d2:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    12d6:	b672      	cpsid	i
    12d8:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    12dc:	f240 0344 	movw	r3, #68	; 0x44
    12e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    12e4:	f04f 0100 	mov.w	r1, #0
    12e8:	7019      	strb	r1, [r3, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    12ea:	f640 2240 	movw	r2, #2624	; 0xa40
    12ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
    12f2:	7893      	ldrb	r3, [r2, #2]
    12f4:	f103 31ff 	add.w	r1, r3, #4294967295
    12f8:	7091      	strb	r1, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    12fa:	b948      	cbnz	r0, 1310 <twi_master_write+0x214>
		cpu_irq_enable();
    12fc:	f240 0044 	movw	r0, #68	; 0x44
    1300:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1304:	f04f 0201 	mov.w	r2, #1
    1308:	7002      	strb	r2, [r0, #0]
    130a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    130e:	b662      	cpsie	i
			&& !(twim_get_status(twim) & TWIM_SR_IDLE)) {
	}
#endif

	/* Disable master transfer */
	twim->TWIM_CR = TWIM_CR_MDIS;
    1310:	f04f 0302 	mov.w	r3, #2
    1314:	6033      	str	r3, [r6, #0]
	/* Check for nack */
	if (transfer_status[twim_ch] == TWI_RECEIVE_NACK
    1316:	f640 1188 	movw	r1, #2440	; 0x988
    131a:	f2c2 0100 	movt	r1, #8192	; 0x2000
    131e:	5d48      	ldrb	r0, [r1, r5]
    1320:	b242      	sxtb	r2, r0
    1322:	f112 0f04 	cmn.w	r2, #4
    1326:	d00b      	beq.n	1340 <twi_master_write+0x244>
			|| transfer_status[twim_ch] == TWI_ARBITRATION_LOST) {
    1328:	f640 1388 	movw	r3, #2440	; 0x988
    132c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1330:	5d59      	ldrb	r1, [r3, r5]
    1332:	b248      	sxtb	r0, r1
		return ERR_IO_ERROR;
    1334:	f110 0f02 	cmn.w	r0, #2
    1338:	bf0c      	ite	eq
    133a:	22ff      	moveq	r2, #255	; 0xff
    133c:	2200      	movne	r2, #0
    133e:	e001      	b.n	1344 <twi_master_write+0x248>
    1340:	f04f 02ff 	mov.w	r2, #255	; 0xff
	}
	return STATUS_OK;
}
    1344:	b250      	sxtb	r0, r2
    1346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    134a:	bf00      	nop

0000134c <twim_set_callback>:
 * \param callback   Callback function pointer
 * \param irq_level  Interrupt level
 */
void twim_set_callback(Twim *twim, uint32_t interrupt_source,
	twim_callback_t callback, uint8_t irq_level)
{
    134c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1350:	4604      	mov	r4, r0
    1352:	460e      	mov	r6, r1
    1354:	4690      	mov	r8, r2
    1356:	461f      	mov	r7, r3
	uint32_t twim_ch = find_twim_channel_num(twim);
    1358:	f640 43b9 	movw	r3, #3257	; 0xcb9
    135c:	f2c0 0300 	movt	r3, #0
    1360:	4798      	blx	r3
	uint32_t irq_line = 0;

#if defined(ID_TWIM3)
	if (twim == TWIM3) {
    1362:	f44f 4540 	mov.w	r5, #49152	; 0xc000
    1366:	f2c4 0507 	movt	r5, #16391	; 0x4007
    136a:	42ac      	cmp	r4, r5
    136c:	d00e      	beq.n	138c <twim_set_callback+0x40>
		irq_line = TWIM3_IRQn;
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
    136e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1372:	f2c4 0107 	movt	r1, #16391	; 0x4007
    1376:	428c      	cmp	r4, r1
    1378:	d011      	beq.n	139e <twim_set_callback+0x52>
		irq_line = TWIM2_IRQn;
	}
#endif
#if defined(ID_TWIM1)
	if (twim == TWIM1) {
    137a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    137e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1382:	4294      	cmp	r4, r2
    1384:	d04f      	beq.n	1426 <twim_set_callback+0xda>
 */
void twim_set_callback(Twim *twim, uint32_t interrupt_source,
	twim_callback_t callback, uint8_t irq_level)
{
	uint32_t twim_ch = find_twim_channel_num(twim);
	uint32_t irq_line = 0;
    1386:	f04f 0500 	mov.w	r5, #0
    138a:	e001      	b.n	1390 <twim_set_callback+0x44>

#if defined(ID_TWIM3)
	if (twim == TWIM3) {
		irq_line = TWIM3_IRQn;
    138c:	f04f 054e 	mov.w	r5, #78	; 0x4e
	if (twim == TWIM1) {
		irq_line = TWIM1_IRQn;
	}
#endif
#if defined(ID_TWIM0)
	if (twim == TWIM0) {
    1390:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1394:	f2c4 0101 	movt	r1, #16385	; 0x4001
    1398:	428c      	cmp	r4, r1
    139a:	d102      	bne.n	13a2 <twim_set_callback+0x56>
    139c:	e030      	b.n	1400 <twim_set_callback+0xb4>
		irq_line = TWIM3_IRQn;
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
		irq_line = TWIM2_IRQn;
    139e:	f04f 054d 	mov.w	r5, #77	; 0x4d
#if defined(ID_TWIM0)
	if (twim == TWIM0) {
		irq_line = TWIM0_IRQn;
	}
#endif
	twim_callback_pointer[twim_ch] = callback;
    13a2:	f640 2394 	movw	r3, #2708	; 0xa94
    13a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    13aa:	f843 8020 	str.w	r8, [r3, r0, lsl #2]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    13ae:	462a      	mov	r2, r5
    13b0:	ea4f 1055 	mov.w	r0, r5, lsr #5
    13b4:	f005 051f 	and.w	r5, r5, #31
    13b8:	f04f 0101 	mov.w	r1, #1
    13bc:	fa01 f505 	lsl.w	r5, r1, r5
    13c0:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    13c4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    13c8:	f100 0160 	add.w	r1, r0, #96	; 0x60
    13cc:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    13d0:	ea4f 1707 	mov.w	r7, r7, lsl #4
    13d4:	b2ff      	uxtb	r7, r7
    13d6:	f102 4360 	add.w	r3, r2, #3758096384	; 0xe0000000
    13da:	f503 4161 	add.w	r1, r3, #57600	; 0xe100
    13de:	f881 7300 	strb.w	r7, [r1, #768]	; 0x300
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
    13e2:	f44f 4261 	mov.w	r2, #57600	; 0xe100
    13e6:	f2ce 0200 	movt	r2, #57344	; 0xe000
    13ea:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
	NVIC_ClearPendingIRQ((IRQn_Type)irq_line);
	NVIC_SetPriority((IRQn_Type)irq_line, irq_level);
	NVIC_EnableIRQ((IRQn_Type)irq_line);
	twim_enable_interrupt(twim, interrupt_source);
    13ee:	4620      	mov	r0, r4
    13f0:	4631      	mov	r1, r6
    13f2:	f241 03f5 	movw	r3, #4341	; 0x10f5
    13f6:	f2c0 0300 	movt	r3, #0
    13fa:	4798      	blx	r3
    13fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#if defined(ID_TWIM0)
	if (twim == TWIM0) {
		irq_line = TWIM0_IRQn;
	}
#endif
	twim_callback_pointer[twim_ch] = callback;
    1400:	f640 2294 	movw	r2, #2708	; 0xa94
    1404:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1408:	f842 8020 	str.w	r8, [r2, r0, lsl #2]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    140c:	f44f 4061 	mov.w	r0, #57600	; 0xe100
    1410:	f2ce 0000 	movt	r0, #57344	; 0xe000
    1414:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
    1418:	f8c0 5184 	str.w	r5, [r0, #388]	; 0x184
    141c:	f04f 0001 	mov.w	r0, #1
    1420:	f04f 023d 	mov.w	r2, #61	; 0x3d
    1424:	e7d4      	b.n	13d0 <twim_set_callback+0x84>
    1426:	f640 2394 	movw	r3, #2708	; 0xa94
    142a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    142e:	f843 8020 	str.w	r8, [r3, r0, lsl #2]
    1432:	f44f 4061 	mov.w	r0, #57600	; 0xe100
    1436:	f2ce 0000 	movt	r0, #57344	; 0xe000
    143a:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
    143e:	f8c0 5184 	str.w	r5, [r0, #388]	; 0x184
    1442:	f04f 0001 	mov.w	r0, #1
    1446:	f04f 023f 	mov.w	r2, #63	; 0x3f
    144a:	e7c1      	b.n	13d0 <twim_set_callback+0x84>

0000144c <TWIM0_Handler>:
	twim_enable_interrupt(twim, interrupt_source);
}

#if defined(ID_TWIM0)
void TWIM0_Handler(void)
{
    144c:	b508      	push	{r3, lr}
	twim_callback_pointer[0](TWIM0);
    144e:	f640 2394 	movw	r3, #2708	; 0xa94
    1452:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1456:	6819      	ldr	r1, [r3, #0]
    1458:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    145c:	f2c4 0001 	movt	r0, #16385	; 0x4001
    1460:	4788      	blx	r1
    1462:	bd08      	pop	{r3, pc}

00001464 <TWIM1_Handler>:
}
#endif

#if defined(ID_TWIM1)
void TWIM1_Handler(void)
{
    1464:	b508      	push	{r3, lr}
	twim_callback_pointer[1](TWIM1);
    1466:	f640 2394 	movw	r3, #2708	; 0xa94
    146a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    146e:	6859      	ldr	r1, [r3, #4]
    1470:	f44f 4040 	mov.w	r0, #49152	; 0xc000
    1474:	f2c4 0001 	movt	r0, #16385	; 0x4001
    1478:	4788      	blx	r1
    147a:	bd08      	pop	{r3, pc}

0000147c <TWIM2_Handler>:
}
#endif

#if defined(ID_TWIM2)
void TWIM2_Handler(void)
{
    147c:	b508      	push	{r3, lr}
	twim_callback_pointer[2](TWIM2);
    147e:	f640 2394 	movw	r3, #2708	; 0xa94
    1482:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1486:	6899      	ldr	r1, [r3, #8]
    1488:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    148c:	f2c4 0007 	movt	r0, #16391	; 0x4007
    1490:	4788      	blx	r1
    1492:	bd08      	pop	{r3, pc}

00001494 <TWIM3_Handler>:
}
#endif

#if defined(ID_TWIM3)
void TWIM3_Handler(void)
{
    1494:	b508      	push	{r3, lr}
	twim_callback_pointer[3](TWIM3);
    1496:	f640 2394 	movw	r3, #2708	; 0xa94
    149a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    149e:	68d9      	ldr	r1, [r3, #12]
    14a0:	f44f 4040 	mov.w	r0, #49152	; 0xc000
    14a4:	f2c4 0007 	movt	r0, #16391	; 0x4007
    14a8:	4788      	blx	r1
    14aa:	bd08      	pop	{r3, pc}

000014ac <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
    14ac:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
    14ae:	ea4f 1301 	mov.w	r3, r1, lsl #4
    14b2:	4293      	cmp	r3, r2
    14b4:	d910      	bls.n	14d8 <usart_set_async_baudrate+0x2c>
    14b6:	e020      	b.n	14fa <usart_set_async_baudrate+0x4e>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
    14b8:	6841      	ldr	r1, [r0, #4]
    14ba:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
    14be:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
    14c0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    14c4:	6202      	str	r2, [r0, #32]

	return 0;
    14c6:	f04f 0000 	mov.w	r0, #0
    14ca:	e029      	b.n	1520 <usart_set_async_baudrate+0x74>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
    14cc:	f04f 0001 	mov.w	r0, #1
    14d0:	e026      	b.n	1520 <usart_set_async_baudrate+0x74>
    14d2:	f04f 0001 	mov.w	r0, #1
    14d6:	e023      	b.n	1520 <usart_set_async_baudrate+0x74>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
    14d8:	ea4f 04c2 	mov.w	r4, r2, lsl #3
    14dc:	eb04 0253 	add.w	r2, r4, r3, lsr #1
    14e0:	fbb2 f3f3 	udiv	r3, r2, r3
	cd = cd_fp >> 3;
    14e4:	ea4f 02d3 	mov.w	r2, r3, lsr #3
	fp = cd_fp & 0x07;
    14e8:	f003 0307 	and.w	r3, r3, #7
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
    14ec:	f102 34ff 	add.w	r4, r2, #4294967295
    14f0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
    14f4:	428c      	cmp	r4, r1
    14f6:	d9e3      	bls.n	14c0 <usart_set_async_baudrate+0x14>
    14f8:	e7e8      	b.n	14cc <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
    14fa:	ea4f 01c1 	mov.w	r1, r1, lsl #3
    14fe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    1502:	eb02 0451 	add.w	r4, r2, r1, lsr #1
    1506:	fbb4 f3f1 	udiv	r3, r4, r1
	cd = cd_fp >> 3;
    150a:	ea4f 02d3 	mov.w	r2, r3, lsr #3
	fp = cd_fp & 0x07;
    150e:	f003 0307 	and.w	r3, r3, #7
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
    1512:	f102 34ff 	add.w	r4, r2, #4294967295
    1516:	f64f 71fe 	movw	r1, #65534	; 0xfffe
    151a:	428c      	cmp	r4, r1
    151c:	d9cc      	bls.n	14b8 <usart_set_async_baudrate+0xc>
    151e:	e7d8      	b.n	14d2 <usart_set_async_baudrate+0x26>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
    1520:	bc10      	pop	{r4}
    1522:	4770      	bx	lr

00001524 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
    1524:	f04f 0340 	mov.w	r3, #64	; 0x40
    1528:	6003      	str	r3, [r0, #0]
    152a:	4770      	bx	lr

0000152c <usart_reset_tx>:
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
    152c:	f04f 0388 	mov.w	r3, #136	; 0x88
    1530:	6003      	str	r3, [r0, #0]
    1532:	4770      	bx	lr

00001534 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
    1534:	f04f 0310 	mov.w	r3, #16
    1538:	6003      	str	r3, [r0, #0]
    153a:	4770      	bx	lr

0000153c <usart_reset_rx>:
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
    153c:	f04f 0324 	mov.w	r3, #36	; 0x24
    1540:	6003      	str	r3, [r0, #0]
    1542:	4770      	bx	lr

00001544 <usart_reset_status>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
    1544:	f44f 7380 	mov.w	r3, #256	; 0x100
    1548:	6003      	str	r3, [r0, #0]
    154a:	4770      	bx	lr

0000154c <usart_drive_DTR_pin_high>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_DTRDIS;
    154c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    1550:	6003      	str	r3, [r0, #0]
    1552:	4770      	bx	lr

00001554 <usart_drive_RTS_pin_high>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
    1554:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    1558:	6003      	str	r3, [r0, #0]
    155a:	4770      	bx	lr

0000155c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
    155c:	6943      	ldr	r3, [r0, #20]
    155e:	f013 0f02 	tst.w	r3, #2
    1562:	d007      	beq.n	1574 <usart_write+0x18>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
    1564:	ea4f 51c1 	mov.w	r1, r1, lsl #23
    1568:	ea4f 52d1 	mov.w	r2, r1, lsr #23
    156c:	61c2      	str	r2, [r0, #28]
	return 0;
    156e:	f04f 0000 	mov.w	r0, #0
    1572:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
    1574:	f04f 0001 	mov.w	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
    1578:	4770      	bx	lr
    157a:	bf00      	nop

0000157c <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
    157c:	6943      	ldr	r3, [r0, #20]
    157e:	f013 0f01 	tst.w	r3, #1
    1582:	d008      	beq.n	1596 <usart_read+0x1a>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
    1584:	6980      	ldr	r0, [r0, #24]
    1586:	ea4f 52c0 	mov.w	r2, r0, lsl #23
    158a:	ea4f 53d2 	mov.w	r3, r2, lsr #23
    158e:	600b      	str	r3, [r1, #0]

	return 0;
    1590:	f04f 0000 	mov.w	r0, #0
    1594:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
    1596:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
    159a:	4770      	bx	lr

0000159c <usart_disable_writeprotect>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
    159c:	f44f 4382 	mov.w	r3, #16640	; 0x4100
    15a0:	f2c5 5353 	movt	r3, #21843	; 0x5553
    15a4:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
    15a8:	4770      	bx	lr
    15aa:	bf00      	nop

000015ac <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
    15ac:	b510      	push	{r4, lr}
    15ae:	4604      	mov	r4, r0
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
    15b0:	f241 539d 	movw	r3, #5533	; 0x159d
    15b4:	f2c0 0300 	movt	r3, #0
    15b8:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
    15ba:	f04f 0000 	mov.w	r0, #0
    15be:	6060      	str	r0, [r4, #4]
	p_usart->US_RTOR = 0;
    15c0:	6260      	str	r0, [r4, #36]	; 0x24
	p_usart->US_TTGR = 0;
    15c2:	62a0      	str	r0, [r4, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
    15c4:	4620      	mov	r0, r4
    15c6:	f241 512d 	movw	r1, #5421	; 0x152d
    15ca:	f2c0 0100 	movt	r1, #0
    15ce:	4788      	blx	r1
	usart_reset_rx(p_usart);
    15d0:	4620      	mov	r0, r4
    15d2:	f241 523d 	movw	r2, #5437	; 0x153d
    15d6:	f2c0 0200 	movt	r2, #0
    15da:	4790      	blx	r2
	/* Reset status bits. */
	usart_reset_status(p_usart);
    15dc:	4620      	mov	r0, r4
    15de:	f241 5345 	movw	r3, #5445	; 0x1545
    15e2:	f2c0 0300 	movt	r3, #0
    15e6:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
    15e8:	4620      	mov	r0, r4
    15ea:	f241 5155 	movw	r1, #5461	; 0x1555
    15ee:	f2c0 0100 	movt	r1, #0
    15f2:	4788      	blx	r1
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
    15f4:	4620      	mov	r0, r4
    15f6:	f241 524d 	movw	r2, #5453	; 0x154d
    15fa:	f2c0 0200 	movt	r2, #0
    15fe:	4790      	blx	r2
    1600:	bd10      	pop	{r4, pc}
    1602:	bf00      	nop

00001604 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
    1604:	b570      	push	{r4, r5, r6, lr}
    1606:	4605      	mov	r5, r0
    1608:	460c      	mov	r4, r1
    160a:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
    160c:	f241 53ad 	movw	r3, #5549	; 0x15ad
    1610:	f2c0 0300 	movt	r3, #0
    1614:	4798      	blx	r3

	ul_reg_val = 0;
    1616:	f640 10d0 	movw	r0, #2512	; 0x9d0
    161a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    161e:	f04f 0100 	mov.w	r1, #0
    1622:	6001      	str	r1, [r0, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
    1624:	b1cc      	cbz	r4, 165a <usart_init_rs232+0x56>
    1626:	4628      	mov	r0, r5
    1628:	6821      	ldr	r1, [r4, #0]
    162a:	4632      	mov	r2, r6
    162c:	f241 43ad 	movw	r3, #5293	; 0x14ad
    1630:	f2c0 0300 	movt	r3, #0
    1634:	4798      	blx	r3
    1636:	b998      	cbnz	r0, 1660 <usart_init_rs232+0x5c>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
    1638:	68a2      	ldr	r2, [r4, #8]
    163a:	6861      	ldr	r1, [r4, #4]
    163c:	ea42 0301 	orr.w	r3, r2, r1
    1640:	6922      	ldr	r2, [r4, #16]
    1642:	4313      	orrs	r3, r2
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
    1644:	68e1      	ldr	r1, [r4, #12]
    1646:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
    1648:	f640 12d0 	movw	r2, #2512	; 0x9d0
    164c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1650:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
    1652:	6869      	ldr	r1, [r5, #4]
    1654:	430b      	orrs	r3, r1
    1656:	606b      	str	r3, [r5, #4]

	return 0;
    1658:	bd70      	pop	{r4, r5, r6, pc}

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
    165a:	f04f 0001 	mov.w	r0, #1
    165e:	bd70      	pop	{r4, r5, r6, pc}
    1660:	f04f 0001 	mov.w	r0, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
    1664:	bd70      	pop	{r4, r5, r6, pc}
    1666:	bf00      	nop

00001668 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
    1668:	b5f0      	push	{r4, r5, r6, r7, lr}
    166a:	b083      	sub	sp, #12
    166c:	4604      	mov	r4, r0
    166e:	460d      	mov	r5, r1
	uint32_t val = 0;
    1670:	f04f 0300 	mov.w	r3, #0
    1674:	9301      	str	r3, [sp, #4]
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
    1676:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    167a:	f2c4 0002 	movt	r0, #16386	; 0x4002
    167e:	4284      	cmp	r4, r0
    1680:	d10f      	bne.n	16a2 <usart_serial_getchar+0x3a>
		while (usart_read(p_usart, &val));
    1682:	f44f 4680 	mov.w	r6, #16384	; 0x4000
    1686:	f2c4 0602 	movt	r6, #16386	; 0x4002
    168a:	f241 577d 	movw	r7, #5501	; 0x157d
    168e:	f2c0 0700 	movt	r7, #0
    1692:	4630      	mov	r0, r6
    1694:	a901      	add	r1, sp, #4
    1696:	47b8      	blx	r7
    1698:	2800      	cmp	r0, #0
    169a:	d1fa      	bne.n	1692 <usart_serial_getchar+0x2a>
		*data = (uint8_t)(val & 0xFF);
    169c:	9901      	ldr	r1, [sp, #4]
    169e:	7029      	strb	r1, [r5, #0]
    16a0:	e02b      	b.n	16fa <usart_serial_getchar+0x92>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
    16a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    16a6:	f2c4 0102 	movt	r1, #16386	; 0x4002
    16aa:	428c      	cmp	r4, r1
    16ac:	d10f      	bne.n	16ce <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
    16ae:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    16b2:	f2c4 0402 	movt	r4, #16386	; 0x4002
    16b6:	f241 567d 	movw	r6, #5501	; 0x157d
    16ba:	f2c0 0600 	movt	r6, #0
    16be:	4620      	mov	r0, r4
    16c0:	a901      	add	r1, sp, #4
    16c2:	47b0      	blx	r6
    16c4:	2800      	cmp	r0, #0
    16c6:	d1fa      	bne.n	16be <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
    16c8:	9801      	ldr	r0, [sp, #4]
    16ca:	7028      	strb	r0, [r5, #0]
    16cc:	e02a      	b.n	1724 <usart_serial_getchar+0xbc>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
    16ce:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    16d2:	f2c4 0202 	movt	r2, #16386	; 0x4002
    16d6:	4294      	cmp	r4, r2
    16d8:	d10f      	bne.n	16fa <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
    16da:	f44f 4440 	mov.w	r4, #49152	; 0xc000
    16de:	f2c4 0402 	movt	r4, #16386	; 0x4002
    16e2:	f241 567d 	movw	r6, #5501	; 0x157d
    16e6:	f2c0 0600 	movt	r6, #0
    16ea:	4620      	mov	r0, r4
    16ec:	a901      	add	r1, sp, #4
    16ee:	47b0      	blx	r6
    16f0:	2800      	cmp	r0, #0
    16f2:	d1fa      	bne.n	16ea <usart_serial_getchar+0x82>
		*data = (uint8_t)(val & 0xFF);
    16f4:	9b01      	ldr	r3, [sp, #4]
    16f6:	702b      	strb	r3, [r5, #0]
    16f8:	e014      	b.n	1724 <usart_serial_getchar+0xbc>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
    16fa:	f04f 0200 	mov.w	r2, #0
    16fe:	f2c4 0203 	movt	r2, #16387	; 0x4003
    1702:	4294      	cmp	r4, r2
    1704:	d10e      	bne.n	1724 <usart_serial_getchar+0xbc>
		while (usart_read(p_usart, &val));
    1706:	f04f 0400 	mov.w	r4, #0
    170a:	f2c4 0403 	movt	r4, #16387	; 0x4003
    170e:	f241 567d 	movw	r6, #5501	; 0x157d
    1712:	f2c0 0600 	movt	r6, #0
    1716:	4620      	mov	r0, r4
    1718:	a901      	add	r1, sp, #4
    171a:	47b0      	blx	r6
    171c:	2800      	cmp	r0, #0
    171e:	d1fa      	bne.n	1716 <usart_serial_getchar+0xae>
		*data = (uint8_t)(val & 0xFF);
    1720:	9b01      	ldr	r3, [sp, #4]
    1722:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
    1724:	b003      	add	sp, #12
    1726:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001728 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
    1728:	b570      	push	{r4, r5, r6, lr}
    172a:	460c      	mov	r4, r1
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
    172c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    1730:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1734:	4298      	cmp	r0, r3
    1736:	d10f      	bne.n	1758 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
    1738:	f44f 4580 	mov.w	r5, #16384	; 0x4000
    173c:	f2c4 0502 	movt	r5, #16386	; 0x4002
    1740:	f241 565d 	movw	r6, #5469	; 0x155d
    1744:	f2c0 0600 	movt	r6, #0
    1748:	4628      	mov	r0, r5
    174a:	4621      	mov	r1, r4
    174c:	47b0      	blx	r6
    174e:	2800      	cmp	r0, #0
    1750:	d1fa      	bne.n	1748 <usart_serial_putchar+0x20>
		return 1;
    1752:	f04f 0001 	mov.w	r0, #1
    1756:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
    1758:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    175c:	f2c4 0102 	movt	r1, #16386	; 0x4002
    1760:	4288      	cmp	r0, r1
    1762:	d10f      	bne.n	1784 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
    1764:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    1768:	f2c4 0502 	movt	r5, #16386	; 0x4002
    176c:	f241 565d 	movw	r6, #5469	; 0x155d
    1770:	f2c0 0600 	movt	r6, #0
    1774:	4628      	mov	r0, r5
    1776:	4621      	mov	r1, r4
    1778:	47b0      	blx	r6
    177a:	2800      	cmp	r0, #0
    177c:	d1fa      	bne.n	1774 <usart_serial_putchar+0x4c>
		return 1;
    177e:	f04f 0001 	mov.w	r0, #1
    1782:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
    1784:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    1788:	f2c4 0202 	movt	r2, #16386	; 0x4002
    178c:	4290      	cmp	r0, r2
    178e:	d10f      	bne.n	17b0 <usart_serial_putchar+0x88>
		while (usart_write(p_usart, c)!=0);
    1790:	f44f 4540 	mov.w	r5, #49152	; 0xc000
    1794:	f2c4 0502 	movt	r5, #16386	; 0x4002
    1798:	f241 565d 	movw	r6, #5469	; 0x155d
    179c:	f2c0 0600 	movt	r6, #0
    17a0:	4628      	mov	r0, r5
    17a2:	4621      	mov	r1, r4
    17a4:	47b0      	blx	r6
    17a6:	2800      	cmp	r0, #0
    17a8:	d1fa      	bne.n	17a0 <usart_serial_putchar+0x78>
		return 1;
    17aa:	f04f 0001 	mov.w	r0, #1
    17ae:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
    17b0:	f04f 0300 	mov.w	r3, #0
    17b4:	f2c4 0303 	movt	r3, #16387	; 0x4003
    17b8:	4298      	cmp	r0, r3
    17ba:	d10f      	bne.n	17dc <usart_serial_putchar+0xb4>
		while (usart_write(p_usart, c)!=0);
    17bc:	f04f 0500 	mov.w	r5, #0
    17c0:	f2c4 0503 	movt	r5, #16387	; 0x4003
    17c4:	f241 565d 	movw	r6, #5469	; 0x155d
    17c8:	f2c0 0600 	movt	r6, #0
    17cc:	4628      	mov	r0, r5
    17ce:	4621      	mov	r1, r4
    17d0:	47b0      	blx	r6
    17d2:	2800      	cmp	r0, #0
    17d4:	d1fa      	bne.n	17cc <usart_serial_putchar+0xa4>
		return 1;
    17d6:	f04f 0001 	mov.w	r0, #1
    17da:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
    17dc:	f04f 0000 	mov.w	r0, #0
}
    17e0:	bd70      	pop	{r4, r5, r6, pc}
    17e2:	bf00      	nop

000017e4 <main>:
 * \brief Application entry point for usart_serial example.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
    17e4:	b570      	push	{r4, r5, r6, lr}
    17e6:	b086      	sub	sp, #24
	status_code_t status;
	uint8_t addr;
	/* Initialize the SAM system. */
	sysclk_init();
    17e8:	f642 63ad 	movw	r3, #11949	; 0x2ead
    17ec:	f2c0 0300 	movt	r3, #0
    17f0:	4798      	blx	r3
	board_init();
    17f2:	f642 7069 	movw	r0, #12137	; 0x2f69
    17f6:	f2c0 0000 	movt	r0, #0
    17fa:	4780      	blx	r0
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    17fc:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    1800:	f2c4 0402 	movt	r4, #16386	; 0x4002
    1804:	f640 2150 	movw	r1, #2640	; 0xa50
    1808:	f2c2 0100 	movt	r1, #8192	; 0x2000
    180c:	600c      	str	r4, [r1, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    180e:	f640 254c 	movw	r5, #2636	; 0xa4c
    1812:	f2c2 0500 	movt	r5, #8192	; 0x2000
    1816:	f241 7229 	movw	r2, #5929	; 0x1729
    181a:	f2c0 0200 	movt	r2, #0
    181e:	602a      	str	r2, [r5, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1820:	f640 2648 	movw	r6, #2632	; 0xa48
    1824:	f2c2 0600 	movt	r6, #8192	; 0x2000
    1828:	f241 6369 	movw	r3, #5737	; 0x1669
    182c:	f2c0 0300 	movt	r3, #0
    1830:	6033      	str	r3, [r6, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
    1832:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
    1836:	9000      	str	r0, [sp, #0]
	usart_settings.char_length = opt->charlength;
    1838:	f04f 01c0 	mov.w	r1, #192	; 0xc0
    183c:	9101      	str	r1, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
    183e:	f44f 6500 	mov.w	r5, #2048	; 0x800
    1842:	9502      	str	r5, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
    1844:	f04f 0500 	mov.w	r5, #0
    1848:	9503      	str	r5, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
    184a:	9504      	str	r5, [sp, #16]
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_hz());
#endif
#if (SAM4L)
		sysclk_enable_peripheral_clock(p_usart);
    184c:	4620      	mov	r0, r4
    184e:	f242 1231 	movw	r2, #8497	; 0x2131
    1852:	f2c0 0200 	movt	r2, #0
    1856:	4790      	blx	r2
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
    1858:	4620      	mov	r0, r4
    185a:	f641 6639 	movw	r6, #7737	; 0x1e39
    185e:	f2c0 0600 	movt	r6, #0
    1862:	47b0      	blx	r6
    1864:	4602      	mov	r2, r0
    1866:	4620      	mov	r0, r4
    1868:	4669      	mov	r1, sp
    186a:	f241 6305 	movw	r3, #5637	; 0x1605
    186e:	f2c0 0300 	movt	r3, #0
    1872:	4798      	blx	r3
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
    1874:	4620      	mov	r0, r4
    1876:	f241 5125 	movw	r1, #5413	; 0x1525
    187a:	f2c0 0100 	movt	r1, #0
    187e:	4788      	blx	r1
		usart_enable_rx(p_usart);
    1880:	4620      	mov	r0, r4
    1882:	f241 5435 	movw	r4, #5429	; 0x1535
    1886:	f2c0 0400 	movt	r4, #0
    188a:	47a0      	blx	r4
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    188c:	f240 0650 	movw	r6, #80	; 0x50
    1890:	f2c2 0600 	movt	r6, #8192	; 0x2000
    1894:	6830      	ldr	r0, [r6, #0]
    1896:	6880      	ldr	r0, [r0, #8]
    1898:	4629      	mov	r1, r5
    189a:	f243 74fd 	movw	r4, #14333	; 0x37fd
    189e:	f2c0 0400 	movt	r4, #0
    18a2:	47a0      	blx	r4
	setbuf(stdin, NULL);
    18a4:	6832      	ldr	r2, [r6, #0]
    18a6:	6850      	ldr	r0, [r2, #4]
    18a8:	4629      	mov	r1, r5
    18aa:	47a0      	blx	r4
	//init_twi();
	/* Configure UART for debug message output. */
	configure_console();

	/* Output example information. */
	puts("\n\r\nCamera App\n\r");
    18ac:	f645 70b4 	movw	r0, #24500	; 0x5fb4
    18b0:	f2c0 0000 	movt	r0, #0
    18b4:	f243 75ed 	movw	r5, #14317	; 0x37ed
    18b8:	f2c0 0500 	movt	r5, #0
    18bc:	47a8      	blx	r5

	puts("Start Scan...\n\r");
    18be:	f645 70c4 	movw	r0, #24516	; 0x5fc4
    18c2:	f2c0 0000 	movt	r0, #0
    18c6:	47a8      	blx	r5
	

	if (STATUS_OK == OV7670_init())
    18c8:	f240 63a5 	movw	r3, #1701	; 0x6a5
    18cc:	f2c0 0300 	movt	r3, #0
    18d0:	4798      	blx	r3
    18d2:	b948      	cbnz	r0, 18e8 <main+0x104>
	{
		printf("Initialise success\n\r");
    18d4:	f645 70d4 	movw	r0, #24532	; 0x5fd4
    18d8:	f2c0 0000 	movt	r0, #0
    18dc:	f243 7639 	movw	r6, #14137	; 0x3739
    18e0:	f2c0 0600 	movt	r6, #0
    18e4:	47b0      	blx	r6
    18e6:	e008      	b.n	18fa <main+0x116>
	}
	else
	{
		printf("Initialise fail\n\r");
    18e8:	f645 70ec 	movw	r0, #24556	; 0x5fec
    18ec:	f2c0 0000 	movt	r0, #0
    18f0:	f243 7139 	movw	r1, #14137	; 0x3739
    18f4:	f2c0 0100 	movt	r1, #0
    18f8:	4788      	blx	r1
	}
	
	printf("Get Image!\n\r");
    18fa:	f246 0000 	movw	r0, #24576	; 0x6000
    18fe:	f2c0 0000 	movt	r0, #0
    1902:	f243 7439 	movw	r4, #14137	; 0x3739
    1906:	f2c0 0400 	movt	r4, #0
    190a:	47a0      	blx	r4
	LoadImageToBuffer();
    190c:	f640 00ed 	movw	r0, #2285	; 0x8ed
    1910:	f2c0 0000 	movt	r0, #0
    1914:	4780      	blx	r0
	while ( STATUS_ERR_BUSY == GetImageIfAvailiable(0));
    1916:	f04f 0500 	mov.w	r5, #0
    191a:	f640 164d 	movw	r6, #2381	; 0x94d
    191e:	f2c0 0600 	movt	r6, #0
    1922:	4628      	mov	r0, r5
    1924:	47b0      	blx	r6
    1926:	2819      	cmp	r0, #25
    1928:	d0fb      	beq.n	1922 <main+0x13e>
    192a:	e7fe      	b.n	192a <main+0x146>

0000192c <dfll_enable_closed_loop>:
	/* Finally, stop the reference clock */
	genclk_disable(0);
}

void dfll_enable_closed_loop(const struct dfll_config *cfg, uint32_t dfll_id)
{
    192c:	b410      	push	{r4}
}

static inline void genclk_enable(const struct genclk_config *cfg,
		uint32_t id)
{
	 SCIF->SCIF_GCCTRL[id].SCIF_GCCTRL = cfg->ctrl | SCIF_GCCTRL_CEN;
    192e:	6803      	ldr	r3, [r0, #0]
    1930:	f043 0201 	orr.w	r2, r3, #1
    1934:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1938:	f2c4 030e 	movt	r3, #16398	; 0x400e
    193c:	675a      	str	r2, [r3, #116]	; 0x74
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    193e:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1942:	b672      	cpsid	i
    1944:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1948:	f240 0244 	movw	r2, #68	; 0x44
    194c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1950:	f04f 0400 	mov.w	r4, #0
    1954:	7014      	strb	r4, [r2, #0]
	 * Enable the DFLL first, but don't wait for the DFLL0RDY bit
	 * because if the DFLL has been disabled before, the DFLL0RDY
	 * bit stays cleared until it is re-enabled.
	 */
	flags = cpu_irq_save();
	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAUL)
    1956:	f04f 0228 	mov.w	r2, #40	; 0x28
    195a:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    195e:	619a      	str	r2, [r3, #24]
		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_DFLL0CONF - (uint32_t)SCIF);
	SCIF->SCIF_DFLL0CONF = SCIF_DFLL0CONF_EN;
    1960:	f04f 0201 	mov.w	r2, #1
    1964:	629a      	str	r2, [r3, #40]	; 0x28
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1966:	b939      	cbnz	r1, 1978 <dfll_enable_closed_loop+0x4c>
		cpu_irq_enable();
    1968:	f240 0344 	movw	r3, #68	; 0x44
    196c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1970:	701a      	strb	r2, [r3, #0]
    1972:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1976:	b662      	cpsie	i

	/*
	 * Then, configure the DFLL, taking care to wait for the
	 * DFLL0RDY bit before every step.
	 */
	dfll_write_reg(DFLL0STEP, cfg->step);
    1978:	f44f 6100 	mov.w	r1, #2048	; 0x800
    197c:	f2c4 010e 	movt	r1, #16398	; 0x400e
    1980:	694a      	ldr	r2, [r1, #20]
    1982:	f012 0f08 	tst.w	r2, #8
    1986:	d0fb      	beq.n	1980 <dfll_enable_closed_loop+0x54>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1988:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    198c:	b672      	cpsid	i
    198e:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1992:	f240 0344 	movw	r3, #68	; 0x44
    1996:	f2c2 0300 	movt	r3, #8192	; 0x2000
    199a:	f04f 0200 	mov.w	r2, #0
    199e:	701a      	strb	r2, [r3, #0]
    19a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
    19a4:	f2c4 030e 	movt	r3, #16398	; 0x400e
    19a8:	f04f 0234 	mov.w	r2, #52	; 0x34
    19ac:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    19b0:	619a      	str	r2, [r3, #24]
    19b2:	68c2      	ldr	r2, [r0, #12]
    19b4:	635a      	str	r2, [r3, #52]	; 0x34
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    19b6:	b949      	cbnz	r1, 19cc <dfll_enable_closed_loop+0xa0>
		cpu_irq_enable();
    19b8:	f240 0144 	movw	r1, #68	; 0x44
    19bc:	f2c2 0100 	movt	r1, #8192	; 0x2000
    19c0:	f04f 0301 	mov.w	r3, #1
    19c4:	700b      	strb	r3, [r1, #0]
    19c6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    19ca:	b662      	cpsie	i
	dfll_write_reg(DFLL0MUL, cfg->mul);
    19cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
    19d0:	f2c4 020e 	movt	r2, #16398	; 0x400e
    19d4:	6951      	ldr	r1, [r2, #20]
    19d6:	f011 0f08 	tst.w	r1, #8
    19da:	d0fb      	beq.n	19d4 <dfll_enable_closed_loop+0xa8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    19dc:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    19e0:	b672      	cpsid	i
    19e2:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    19e6:	f240 0344 	movw	r3, #68	; 0x44
    19ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    19ee:	f04f 0200 	mov.w	r2, #0
    19f2:	701a      	strb	r2, [r3, #0]
    19f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
    19f8:	f2c4 030e 	movt	r3, #16398	; 0x400e
    19fc:	f04f 0230 	mov.w	r2, #48	; 0x30
    1a00:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    1a04:	619a      	str	r2, [r3, #24]
    1a06:	6882      	ldr	r2, [r0, #8]
    1a08:	631a      	str	r2, [r3, #48]	; 0x30
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1a0a:	b949      	cbnz	r1, 1a20 <dfll_enable_closed_loop+0xf4>
		cpu_irq_enable();
    1a0c:	f240 0144 	movw	r1, #68	; 0x44
    1a10:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1a14:	f04f 0301 	mov.w	r3, #1
    1a18:	700b      	strb	r3, [r1, #0]
    1a1a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1a1e:	b662      	cpsie	i
	dfll_write_reg(DFLL0SSG, cfg->ssg);
    1a20:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1a24:	f2c4 020e 	movt	r2, #16398	; 0x400e
    1a28:	6951      	ldr	r1, [r2, #20]
    1a2a:	f011 0f08 	tst.w	r1, #8
    1a2e:	d0fb      	beq.n	1a28 <dfll_enable_closed_loop+0xfc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1a30:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1a34:	b672      	cpsid	i
    1a36:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1a3a:	f240 0344 	movw	r3, #68	; 0x44
    1a3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1a42:	f04f 0200 	mov.w	r2, #0
    1a46:	701a      	strb	r2, [r3, #0]
    1a48:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1a4c:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1a50:	f04f 0238 	mov.w	r2, #56	; 0x38
    1a54:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    1a58:	619a      	str	r2, [r3, #24]
    1a5a:	6902      	ldr	r2, [r0, #16]
    1a5c:	639a      	str	r2, [r3, #56]	; 0x38
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1a5e:	b949      	cbnz	r1, 1a74 <dfll_enable_closed_loop+0x148>
		cpu_irq_enable();
    1a60:	f240 0144 	movw	r1, #68	; 0x44
    1a64:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1a68:	f04f 0301 	mov.w	r3, #1
    1a6c:	700b      	strb	r3, [r1, #0]
    1a6e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1a72:	b662      	cpsie	i
	dfll_write_reg(DFLL0CONF, cfg->conf | SCIF_DFLL0CONF_EN);
    1a74:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1a78:	f2c4 020e 	movt	r2, #16398	; 0x400e
    1a7c:	6951      	ldr	r1, [r2, #20]
    1a7e:	f011 0f08 	tst.w	r1, #8
    1a82:	d0fb      	beq.n	1a7c <dfll_enable_closed_loop+0x150>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1a84:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1a88:	b672      	cpsid	i
    1a8a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1a8e:	f240 0344 	movw	r3, #68	; 0x44
    1a92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1a96:	f04f 0200 	mov.w	r2, #0
    1a9a:	701a      	strb	r2, [r3, #0]
    1a9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1aa0:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1aa4:	f04f 0228 	mov.w	r2, #40	; 0x28
    1aa8:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    1aac:	619a      	str	r2, [r3, #24]
    1aae:	6840      	ldr	r0, [r0, #4]
    1ab0:	f040 0201 	orr.w	r2, r0, #1
    1ab4:	629a      	str	r2, [r3, #40]	; 0x28
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1ab6:	b949      	cbnz	r1, 1acc <dfll_enable_closed_loop+0x1a0>
		cpu_irq_enable();
    1ab8:	f240 0144 	movw	r1, #68	; 0x44
    1abc:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1ac0:	f04f 0301 	mov.w	r3, #1
    1ac4:	700b      	strb	r3, [r1, #0]
    1ac6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1aca:	b662      	cpsie	i
}
    1acc:	bc10      	pop	{r4}
    1ace:	4770      	bx	lr

00001ad0 <dfll_enable_config_defaults>:
	/* Finally, stop the reference clock */
	genclk_disable(0);
}

void dfll_enable_config_defaults(uint32_t dfll_id)
{
    1ad0:	b500      	push	{lr}
    1ad2:	b089      	sub	sp, #36	; 0x24
#ifdef CONFIG_DFLL0_SOURCE
	struct dfll_config dfllcfg;
#endif
	static bool open_loop_done = false;

	if(SCIF->SCIF_DFLL0CONF & SCIF_DFLL0CONF_MODE) {
    1ad4:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1ad8:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1adc:	6a99      	ldr	r1, [r3, #40]	; 0x28
    1ade:	f011 0f02 	tst.w	r1, #2
    1ae2:	d007      	beq.n	1af4 <dfll_enable_config_defaults+0x24>
}

static inline bool dfll_is_fine_locked(uint32_t dfll_id)
{
	UNUSED(dfll_id);
	return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_DFLL0LOCKF);
    1ae4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1ae8:	f2c4 020e 	movt	r2, #16398	; 0x400e
    1aec:	6953      	ldr	r3, [r2, #20]
		// Closed-loop mode
		if (dfll_is_fine_locked(dfll_id)) {
    1aee:	f013 0f04 	tst.w	r3, #4
    1af2:	d14e      	bne.n	1b92 <dfll_enable_config_defaults+0xc2>
	}
	if (open_loop_done == true) {
		return;
	}

	switch (dfll_id) {
    1af4:	2800      	cmp	r0, #0
    1af6:	d14c      	bne.n	1b92 <dfll_enable_config_defaults+0xc2>
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_OSC32RDY);
    1af8:	f44f 6080 	mov.w	r0, #1024	; 0x400
    1afc:	f2c4 000f 	movt	r0, #16399	; 0x400f
    1b00:	6941      	ldr	r1, [r0, #20]
		/* Nothing to do */
		break;

#ifdef BOARD_OSC32_HZ
	case GENCLK_SRC_OSC32K:
		if (!osc_is_ready(OSC_ID_OSC32)) {
    1b02:	f011 0f01 	tst.w	r1, #1
    1b06:	d10c      	bne.n	1b22 <dfll_enable_config_defaults+0x52>
		break;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		osc_priv_enable_osc32();
    1b08:	f641 3299 	movw	r2, #7065	; 0x1b99
    1b0c:	f2c0 0200 	movt	r2, #0
    1b10:	4790      	blx	r2
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_OSC32RDY);
    1b12:	f44f 6080 	mov.w	r0, #1024	; 0x400
    1b16:	f2c4 000f 	movt	r0, #16399	; 0x400f
    1b1a:	6943      	ldr	r3, [r0, #20]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1b1c:	f013 0f01 	tst.w	r3, #1
    1b20:	d0fb      	beq.n	1b1a <dfll_enable_config_defaults+0x4a>
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
	cfg->ctrl = (cfg->ctrl & ~SCIF_GCCTRL_OSCSEL_Msk)
    1b22:	f44f 7180 	mov.w	r1, #256	; 0x100
    1b26:	9101      	str	r1, [sp, #4]
	genclk_config_defaults(&cfg->ref_cfg, 0);
	genclk_config_set_source(&cfg->ref_cfg, refclk);
	genclk_config_set_divider(&cfg->ref_cfg, divide);

	// Do a sync before reading a dfll conf register
	SCIF->SCIF_DFLL0SYNC = SCIF_DFLL0SYNC_SYNC;
    1b28:	f44f 6000 	mov.w	r0, #2048	; 0x800
    1b2c:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1b30:	f04f 0201 	mov.w	r2, #1
    1b34:	6402      	str	r2, [r0, #64]	; 0x40
	while (!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_DFLL0RDY));
    1b36:	f44f 6100 	mov.w	r1, #2048	; 0x800
    1b3a:	f2c4 010e 	movt	r1, #16398	; 0x400e
    1b3e:	694b      	ldr	r3, [r1, #20]
    1b40:	f013 0f08 	tst.w	r3, #8
    1b44:	d0fb      	beq.n	1b3e <dfll_enable_config_defaults+0x6e>
	cfg->conf = SCIF->SCIF_DFLL0CONF;
    1b46:	f44f 6000 	mov.w	r0, #2048	; 0x800
    1b4a:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1b4e:	6a81      	ldr	r1, [r0, #40]	; 0x28
{
	if (freq < DFLL_MAX_RANGE3){
		cfg->freq_range = DFLL_RANGE3;
	}
	else if (freq < DFLL_MAX_RANGE2){
		cfg->freq_range = DFLL_RANGE2;
    1b50:	f04f 0202 	mov.w	r2, #2
    1b54:	f88d 201c 	strb.w	r2, [sp, #28]
		cfg->freq_range = DFLL_RANGE1;
	}
	else {
		cfg->freq_range = DFLL_RANGE0;
	}
	cfg->conf &= ~SCIF_DFLL0CONF_RANGE_Msk;
    1b58:	f421 3340 	bic.w	r3, r1, #196608	; 0x30000
	cfg->conf |=SCIF_DFLL0CONF_RANGE(cfg->freq_range);
    1b5c:	f043 1002 	orr.w	r0, r3, #131074	; 0x20002
    1b60:	9002      	str	r0, [sp, #8]
	// Select Closed Loop Mode
	cfg->conf |= SCIF_DFLL0CONF_MODE;
	// Write DFLL Frequency Range
	dfll_priv_set_frequency_range(cfg, CONFIG_DFLL0_FREQ);

	cfg->mul = mul;
    1b62:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
    1b66:	9103      	str	r1, [sp, #12]
	cfg->val = 0;
    1b68:	f04f 0100 	mov.w	r1, #0
    1b6c:	9106      	str	r1, [sp, #24]
};

static inline void dfll_config_set_max_step(struct dfll_config *cfg,
		uint16_t coarse, uint16_t fine)
{
	cfg->step = (SCIF_DFLL0STEP_CSTEP(coarse)
    1b6e:	f04f 1204 	mov.w	r2, #262148	; 0x40004
    1b72:	9204      	str	r2, [sp, #16]
	/*
	 * Initial step length of 4. If this is set too high, the DFLL
	 * may fail to lock.
	 */
	dfll_config_set_max_step(cfg, 4, 4);
	cfg->ssg = 0;
    1b74:	9105      	str	r1, [sp, #20]
		dfll_config_init_closed_loop_mode(&dfllcfg,
			CONFIG_DFLL0_SOURCE,
			CONFIG_DFLL0_DIV,
			CONFIG_DFLL0_MUL);

		dfll_enable_closed_loop(&dfllcfg, dfll_id);
    1b76:	a801      	add	r0, sp, #4
    1b78:	f641 132d 	movw	r3, #6445	; 0x192d
    1b7c:	f2c0 0300 	movt	r3, #0
    1b80:	4798      	blx	r3
}

static inline bool dfll_is_fine_locked(uint32_t dfll_id)
{
	UNUSED(dfll_id);
	return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_DFLL0LOCKF);
    1b82:	f44f 6000 	mov.w	r0, #2048	; 0x800
    1b86:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1b8a:	6941      	ldr	r1, [r0, #20]
		while (!dfll_is_fine_locked(dfll_id));
    1b8c:	f011 0f04 	tst.w	r1, #4
    1b90:	d0fb      	beq.n	1b8a <dfll_enable_config_defaults+0xba>

	default:
		Assert(false);
		break;
	}
}
    1b92:	b009      	add	sp, #36	; 0x24
    1b94:	bd00      	pop	{pc}
    1b96:	bf00      	nop

00001b98 <osc_priv_enable_osc32>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1b98:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1b9c:	b672      	cpsid	i
    1b9e:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1ba2:	f240 0344 	movw	r3, #68	; 0x44
    1ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1baa:	f04f 0200 	mov.w	r2, #0
    1bae:	701a      	strb	r2, [r3, #0]
void osc_priv_enable_osc32(void)
{
	irqflags_t flags;

	flags = cpu_irq_save();
	BSCIF->BSCIF_UNLOCK = BSCIF_UNLOCK_KEY(0xAAu)
    1bb0:	f44f 6080 	mov.w	r0, #1024	; 0x400
    1bb4:	f2c4 000f 	movt	r0, #16399	; 0x400f
    1bb8:	f04f 0320 	mov.w	r3, #32
    1bbc:	f6ca 2300 	movt	r3, #43520	; 0xaa00
    1bc0:	6183      	str	r3, [r0, #24]
		| BSCIF_UNLOCK_ADDR((uint32_t)&BSCIF->BSCIF_OSCCTRL32 - (uint32_t)BSCIF);
	BSCIF->BSCIF_OSCCTRL32 =
    1bc2:	f24a 120d 	movw	r2, #41229	; 0xa10d
    1bc6:	f2c0 0205 	movt	r2, #5
    1bca:	6202      	str	r2, [r0, #32]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1bcc:	b949      	cbnz	r1, 1be2 <osc_priv_enable_osc32+0x4a>
		cpu_irq_enable();
    1bce:	f240 0144 	movw	r1, #68	; 0x44
    1bd2:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1bd6:	f04f 0001 	mov.w	r0, #1
    1bda:	7008      	strb	r0, [r1, #0]
    1bdc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1be0:	b662      	cpsie	i
    1be2:	4770      	bx	lr

00001be4 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(uint32_t bus_id, uint32_t module_index)
{
    1be4:	b430      	push	{r4, r5}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1be6:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1bea:	b672      	cpsid	i
    1bec:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1bf0:	f240 0344 	movw	r3, #68	; 0x44
    1bf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1bf8:	f04f 0200 	mov.w	r2, #0
    1bfc:	701a      	strb	r2, [r3, #0]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
    1bfe:	f04f 0320 	mov.w	r3, #32
    1c02:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1c06:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
	mask |= 1U << module_index;
    1c0a:	f04f 0501 	mov.w	r5, #1
    1c0e:	fa05 f101 	lsl.w	r1, r5, r1
    1c12:	4311      	orrs	r1, r2
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
    1c14:	f100 0208 	add.w	r2, r0, #8
    1c18:	ea4f 6502 	mov.w	r5, r2, lsl #24
    1c1c:	ea4f 5295 	mov.w	r2, r5, lsr #22
	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
	mask |= 1U << module_index;
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    1c20:	f042 452a 	orr.w	r5, r2, #2852126720	; 0xaa000000
    1c24:	f04f 0200 	mov.w	r2, #0
    1c28:	f2c4 020e 	movt	r2, #16398	; 0x400e
    1c2c:	6595      	str	r5, [r2, #88]	; 0x58
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
	*(&PM->PM_CPUMASK + bus_id) = mask;
    1c2e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1c32:	b94c      	cbnz	r4, 1c48 <sysclk_priv_enable_module+0x64>
		cpu_irq_enable();
    1c34:	f240 0044 	movw	r0, #68	; 0x44
    1c38:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1c3c:	f04f 0301 	mov.w	r3, #1
    1c40:	7003      	strb	r3, [r0, #0]
    1c42:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1c46:	b662      	cpsie	i

	cpu_irq_restore(flags);
}
    1c48:	bc30      	pop	{r4, r5}
    1c4a:	4770      	bx	lr

00001c4c <sysclk_priv_disable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be disabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_disable_module(uint32_t bus_id, uint32_t module_index)
{
    1c4c:	b430      	push	{r4, r5}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1c4e:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1c52:	b672      	cpsid	i
    1c54:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1c58:	f240 0344 	movw	r3, #68	; 0x44
    1c5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1c60:	f04f 0200 	mov.w	r2, #0
    1c64:	701a      	strb	r2, [r3, #0]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Disable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
    1c66:	f04f 0320 	mov.w	r3, #32
    1c6a:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1c6e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
	mask &= ~(1U << module_index);
    1c72:	f04f 0501 	mov.w	r5, #1
    1c76:	fa05 f101 	lsl.w	r1, r5, r1
    1c7a:	ea22 0101 	bic.w	r1, r2, r1
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
    1c7e:	f100 0208 	add.w	r2, r0, #8
    1c82:	ea4f 6502 	mov.w	r5, r2, lsl #24
    1c86:	ea4f 5295 	mov.w	r2, r5, lsr #22
	flags = cpu_irq_save();

	/* Disable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
	mask &= ~(1U << module_index);
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    1c8a:	f042 452a 	orr.w	r5, r2, #2852126720	; 0xaa000000
    1c8e:	f04f 0200 	mov.w	r2, #0
    1c92:	f2c4 020e 	movt	r2, #16398	; 0x400e
    1c96:	6595      	str	r5, [r2, #88]	; 0x58
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
	*(&PM->PM_CPUMASK + bus_id) = mask;
    1c98:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1c9c:	b94c      	cbnz	r4, 1cb2 <sysclk_priv_disable_module+0x66>
		cpu_irq_enable();
    1c9e:	f240 0044 	movw	r0, #68	; 0x44
    1ca2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1ca6:	f04f 0301 	mov.w	r3, #1
    1caa:	7003      	strb	r3, [r0, #0]
    1cac:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1cb0:	b662      	cpsie	i

	cpu_irq_restore(flags);
}
    1cb2:	bc30      	pop	{r4, r5}
    1cb4:	4770      	bx	lr
    1cb6:	bf00      	nop

00001cb8 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_enable_pba_module(uint32_t module_index)
{
    1cb8:	b538      	push	{r3, r4, r5, lr}
    1cba:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1cbc:	f3ef 8510 	mrs	r5, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1cc0:	b672      	cpsid	i
    1cc2:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1cc6:	f240 0344 	movw	r3, #68	; 0x44
    1cca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1cce:	f04f 0200 	mov.w	r2, #0
    1cd2:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (PM->PM_PBAMASK == 0) {
    1cd4:	4610      	mov	r0, r2
    1cd6:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1cda:	6a81      	ldr	r1, [r0, #40]	; 0x28
    1cdc:	b941      	cbnz	r1, 1cf0 <sysclk_enable_pba_module+0x38>
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    1cde:	f04f 0001 	mov.w	r0, #1
    1ce2:	f04f 0105 	mov.w	r1, #5
    1ce6:	f641 33e5 	movw	r3, #7141	; 0x1be5
    1cea:	f2c0 0300 	movt	r3, #0
    1cee:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1cf0:	b94d      	cbnz	r5, 1d06 <sysclk_enable_pba_module+0x4e>
		cpu_irq_enable();
    1cf2:	f240 0044 	movw	r0, #68	; 0x44
    1cf6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1cfa:	f04f 0201 	mov.w	r2, #1
    1cfe:	7002      	strb	r2, [r0, #0]
    1d00:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1d04:	b662      	cpsie	i
	}

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBA, module_index);
    1d06:	f04f 0002 	mov.w	r0, #2
    1d0a:	4621      	mov	r1, r4
    1d0c:	f641 33e5 	movw	r3, #7141	; 0x1be5
    1d10:	f2c0 0300 	movt	r3, #0
    1d14:	4798      	blx	r3
    1d16:	bd38      	pop	{r3, r4, r5, pc}

00001d18 <sysclk_disable_pba_module>:
/**
 * \brief Disable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_disable_pba_module(uint32_t module_index)
{
    1d18:	b510      	push	{r4, lr}
    1d1a:	4601      	mov	r1, r0
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBA, module_index);
    1d1c:	f04f 0002 	mov.w	r0, #2
    1d20:	f641 434d 	movw	r3, #7245	; 0x1c4d
    1d24:	f2c0 0300 	movt	r3, #0
    1d28:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1d2a:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1d2e:	b672      	cpsid	i
    1d30:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1d34:	f240 0044 	movw	r0, #68	; 0x44
    1d38:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1d3c:	f04f 0200 	mov.w	r2, #0
    1d40:	7002      	strb	r2, [r0, #0]

	/* Disable the bridge if possible */
	flags = cpu_irq_save();

	if (PM->PM_PBAMASK == 0) {
    1d42:	4611      	mov	r1, r2
    1d44:	f2c4 010e 	movt	r1, #16398	; 0x400e
    1d48:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    1d4a:	b943      	cbnz	r3, 1d5e <sysclk_disable_pba_module+0x46>
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
    1d4c:	f04f 0001 	mov.w	r0, #1
    1d50:	f04f 0105 	mov.w	r1, #5
    1d54:	f641 424d 	movw	r2, #7245	; 0x1c4d
    1d58:	f2c0 0200 	movt	r2, #0
    1d5c:	4790      	blx	r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1d5e:	b94c      	cbnz	r4, 1d74 <sysclk_disable_pba_module+0x5c>
		cpu_irq_enable();
    1d60:	f240 0044 	movw	r0, #68	; 0x44
    1d64:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1d68:	f04f 0101 	mov.w	r1, #1
    1d6c:	7001      	strb	r1, [r0, #0]
    1d6e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1d72:	b662      	cpsie	i
    1d74:	bd10      	pop	{r4, pc}
    1d76:	bf00      	nop

00001d78 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(uint32_t module_index)
{
    1d78:	b538      	push	{r3, r4, r5, lr}
    1d7a:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1d7c:	f3ef 8510 	mrs	r5, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1d80:	b672      	cpsid	i
    1d82:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1d86:	f240 0344 	movw	r3, #68	; 0x44
    1d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1d8e:	f04f 0200 	mov.w	r2, #0
    1d92:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (PM->PM_PBBMASK == 0) {
    1d94:	4610      	mov	r0, r2
    1d96:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1d9a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    1d9c:	b941      	cbnz	r1, 1db0 <sysclk_enable_pbb_module+0x38>
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    1d9e:	f04f 0001 	mov.w	r0, #1
    1da2:	f04f 0106 	mov.w	r1, #6
    1da6:	f641 33e5 	movw	r3, #7141	; 0x1be5
    1daa:	f2c0 0300 	movt	r3, #0
    1dae:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1db0:	b94d      	cbnz	r5, 1dc6 <sysclk_enable_pbb_module+0x4e>
		cpu_irq_enable();
    1db2:	f240 0044 	movw	r0, #68	; 0x44
    1db6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1dba:	f04f 0201 	mov.w	r2, #1
    1dbe:	7002      	strb	r2, [r0, #0]
    1dc0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1dc4:	b662      	cpsie	i
	}

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBB, module_index);
    1dc6:	f04f 0003 	mov.w	r0, #3
    1dca:	4621      	mov	r1, r4
    1dcc:	f641 33e5 	movw	r3, #7141	; 0x1be5
    1dd0:	f2c0 0300 	movt	r3, #0
    1dd4:	4798      	blx	r3
    1dd6:	bd38      	pop	{r3, r4, r5, pc}

00001dd8 <sysclk_disable_pbb_module>:
/**
 * \brief Disable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_disable_pbb_module(uint32_t module_index)
{
    1dd8:	b510      	push	{r4, lr}
    1dda:	4601      	mov	r1, r0
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBB, module_index);
    1ddc:	f04f 0003 	mov.w	r0, #3
    1de0:	f641 434d 	movw	r3, #7245	; 0x1c4d
    1de4:	f2c0 0300 	movt	r3, #0
    1de8:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1dea:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1dee:	b672      	cpsid	i
    1df0:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1df4:	f240 0044 	movw	r0, #68	; 0x44
    1df8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1dfc:	f04f 0200 	mov.w	r2, #0
    1e00:	7002      	strb	r2, [r0, #0]

	/* Disable the bridge if possible */
	flags = cpu_irq_save();

	if (PM->PM_PBBMASK == 0) {
    1e02:	4611      	mov	r1, r2
    1e04:	f2c4 010e 	movt	r1, #16398	; 0x400e
    1e08:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    1e0a:	b943      	cbnz	r3, 1e1e <sysclk_disable_pbb_module+0x46>
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
    1e0c:	f04f 0001 	mov.w	r0, #1
    1e10:	f04f 0106 	mov.w	r1, #6
    1e14:	f641 424d 	movw	r2, #7245	; 0x1c4d
    1e18:	f2c0 0200 	movt	r2, #0
    1e1c:	4790      	blx	r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1e1e:	b94c      	cbnz	r4, 1e34 <sysclk_disable_pbb_module+0x5c>
		cpu_irq_enable();
    1e20:	f240 0044 	movw	r0, #68	; 0x44
    1e24:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1e28:	f04f 0101 	mov.w	r1, #1
    1e2c:	7001      	strb	r1, [r0, #0]
    1e2e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1e32:	b662      	cpsie	i
    1e34:	bd10      	pop	{r4, pc}
    1e36:	bf00      	nop

00001e38 <sysclk_get_peripheral_bus_hz>:
 * \return Frequency of the bus attached to the specified peripheral, in Hz.
 */
uint32_t sysclk_get_peripheral_bus_hz(const volatile void *module)
{
	/* Fallthroughs intended for modules sharing the same peripheral bus. */
	switch ((uintptr_t)module) {
    1e38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1e3c:	f2c4 0307 	movt	r3, #16391	; 0x4007
    1e40:	4298      	cmp	r0, r3
    1e42:	f000 816f 	beq.w	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    1e46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1e4a:	f2c4 0107 	movt	r1, #16391	; 0x4007
    1e4e:	4288      	cmp	r0, r1
    1e50:	f200 80bb 	bhi.w	1fca <sysclk_get_peripheral_bus_hz+0x192>
    1e54:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1e58:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1e5c:	4290      	cmp	r0, r2
    1e5e:	f000 8161 	beq.w	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    1e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1e66:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1e6a:	4298      	cmp	r0, r3
    1e6c:	d851      	bhi.n	1f12 <sysclk_get_peripheral_bus_hz+0xda>
    1e6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1e72:	f2c4 0101 	movt	r1, #16385	; 0x4001
    1e76:	4288      	cmp	r0, r1
    1e78:	f000 8154 	beq.w	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    1e7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1e80:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1e84:	4290      	cmp	r0, r2
    1e86:	d820      	bhi.n	1eca <sysclk_get_peripheral_bus_hz+0x92>
    1e88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1e8c:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1e90:	4298      	cmp	r0, r3
    1e92:	f000 8147 	beq.w	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    1e96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1e9a:	f2c4 0100 	movt	r1, #16384	; 0x4000
    1e9e:	4288      	cmp	r0, r1
    1ea0:	d804      	bhi.n	1eac <sysclk_get_peripheral_bus_hz+0x74>
    1ea2:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    1ea6:	f040 8140 	bne.w	212a <sysclk_get_peripheral_bus_hz+0x2f2>
    1eaa:	e13b      	b.n	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    1eac:	f04f 0200 	mov.w	r2, #0
    1eb0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1eb4:	4290      	cmp	r0, r2
    1eb6:	f000 8135 	beq.w	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    1eba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    1ebe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ec2:	4298      	cmp	r0, r3
    1ec4:	f040 8131 	bne.w	212a <sysclk_get_peripheral_bus_hz+0x2f2>
    1ec8:	e12c      	b.n	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    1eca:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    1ece:	f2c4 0101 	movt	r1, #16385	; 0x4001
    1ed2:	4288      	cmp	r0, r1
    1ed4:	f000 8126 	beq.w	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    1ed8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    1edc:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1ee0:	4290      	cmp	r0, r2
    1ee2:	d807      	bhi.n	1ef4 <sysclk_get_peripheral_bus_hz+0xbc>
    1ee4:	f44f 4304 	mov.w	r3, #33792	; 0x8400
    1ee8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1eec:	4298      	cmp	r0, r3
    1eee:	f040 811c 	bne.w	212a <sysclk_get_peripheral_bus_hz+0x2f2>
    1ef2:	e117      	b.n	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    1ef4:	f44f 4144 	mov.w	r1, #50176	; 0xc400
    1ef8:	f2c4 0101 	movt	r1, #16385	; 0x4001
    1efc:	4288      	cmp	r0, r1
    1efe:	f000 8111 	beq.w	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    1f02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1f06:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1f0a:	4290      	cmp	r0, r2
    1f0c:	f040 810d 	bne.w	212a <sysclk_get_peripheral_bus_hz+0x2f2>
    1f10:	e108      	b.n	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    1f12:	f04f 0300 	mov.w	r3, #0
    1f16:	f2c4 0304 	movt	r3, #16388	; 0x4004
    1f1a:	4298      	cmp	r0, r3
    1f1c:	f000 8102 	beq.w	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    1f20:	f04f 0100 	mov.w	r1, #0
    1f24:	f2c4 0104 	movt	r1, #16388	; 0x4004
    1f28:	4288      	cmp	r0, r1
    1f2a:	d823      	bhi.n	1f74 <sysclk_get_peripheral_bus_hz+0x13c>
    1f2c:	f04f 0200 	mov.w	r2, #0
    1f30:	f2c4 0203 	movt	r2, #16387	; 0x4003
    1f34:	4290      	cmp	r0, r2
    1f36:	f000 80f5 	beq.w	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    1f3a:	f04f 0300 	mov.w	r3, #0
    1f3e:	f2c4 0303 	movt	r3, #16387	; 0x4003
    1f42:	4298      	cmp	r0, r3
    1f44:	d807      	bhi.n	1f56 <sysclk_get_peripheral_bus_hz+0x11e>
    1f46:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    1f4a:	f2c4 0102 	movt	r1, #16386	; 0x4002
    1f4e:	4288      	cmp	r0, r1
    1f50:	f040 80eb 	bne.w	212a <sysclk_get_peripheral_bus_hz+0x2f2>
    1f54:	e0e6      	b.n	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    1f56:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1f5a:	f2c4 0203 	movt	r2, #16387	; 0x4003
    1f5e:	4290      	cmp	r0, r2
    1f60:	f000 80e0 	beq.w	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    1f64:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    1f68:	f2c4 0303 	movt	r3, #16387	; 0x4003
    1f6c:	4298      	cmp	r0, r3
    1f6e:	f040 80dc 	bne.w	212a <sysclk_get_peripheral_bus_hz+0x2f2>
    1f72:	e0d7      	b.n	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    1f74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1f78:	f2c4 0106 	movt	r1, #16390	; 0x4006
    1f7c:	4288      	cmp	r0, r1
    1f7e:	f000 80d1 	beq.w	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    1f82:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1f86:	f2c4 0206 	movt	r2, #16390	; 0x4006
    1f8a:	4290      	cmp	r0, r2
    1f8c:	d80e      	bhi.n	1fac <sysclk_get_peripheral_bus_hz+0x174>
    1f8e:	f04f 0300 	mov.w	r3, #0
    1f92:	f2c4 0306 	movt	r3, #16390	; 0x4006
    1f96:	4298      	cmp	r0, r3
    1f98:	f000 80c4 	beq.w	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    1f9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    1fa0:	f2c4 0106 	movt	r1, #16390	; 0x4006
    1fa4:	4288      	cmp	r0, r1
    1fa6:	f040 80c0 	bne.w	212a <sysclk_get_peripheral_bus_hz+0x2f2>
    1faa:	e0bb      	b.n	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    1fac:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    1fb0:	f2c4 0206 	movt	r2, #16390	; 0x4006
    1fb4:	4290      	cmp	r0, r2
    1fb6:	f000 80b5 	beq.w	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    1fba:	f04f 0300 	mov.w	r3, #0
    1fbe:	f2c4 0307 	movt	r3, #16391	; 0x4007
    1fc2:	4298      	cmp	r0, r3
    1fc4:	f040 80b1 	bne.w	212a <sysclk_get_peripheral_bus_hz+0x2f2>
    1fc8:	e0ac      	b.n	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    1fca:	f04f 0100 	mov.w	r1, #0
    1fce:	f2c4 010e 	movt	r1, #16398	; 0x400e
    1fd2:	4288      	cmp	r0, r1
    1fd4:	f000 80a6 	beq.w	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    1fd8:	f04f 0200 	mov.w	r2, #0
    1fdc:	f2c4 020e 	movt	r2, #16398	; 0x400e
    1fe0:	4290      	cmp	r0, r2
    1fe2:	d84e      	bhi.n	2082 <sysclk_get_peripheral_bus_hz+0x24a>
    1fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1fe8:	f2c4 030a 	movt	r3, #16394	; 0x400a
    1fec:	4298      	cmp	r0, r3
    1fee:	f000 8099 	beq.w	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    1ff2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    1ff6:	f2c4 010a 	movt	r1, #16394	; 0x400a
    1ffa:	4288      	cmp	r0, r1
    1ffc:	d821      	bhi.n	2042 <sysclk_get_peripheral_bus_hz+0x20a>
    1ffe:	f04f 0200 	mov.w	r2, #0
    2002:	f2c4 0208 	movt	r2, #16392	; 0x4008
    2006:	4290      	cmp	r0, r2
    2008:	f000 808c 	beq.w	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    200c:	f04f 0300 	mov.w	r3, #0
    2010:	f2c4 0308 	movt	r3, #16392	; 0x4008
    2014:	4298      	cmp	r0, r3
    2016:	d807      	bhi.n	2028 <sysclk_get_peripheral_bus_hz+0x1f0>
    2018:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    201c:	f2c4 0107 	movt	r1, #16391	; 0x4007
    2020:	4288      	cmp	r0, r1
    2022:	f040 8082 	bne.w	212a <sysclk_get_peripheral_bus_hz+0x2f2>
    2026:	e07d      	b.n	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    2028:	f04f 0200 	mov.w	r2, #0
    202c:	f2c4 020a 	movt	r2, #16394	; 0x400a
    2030:	4290      	cmp	r0, r2
    2032:	d077      	beq.n	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    2034:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2038:	f2c4 030a 	movt	r3, #16394	; 0x400a
    203c:	4298      	cmp	r0, r3
    203e:	d174      	bne.n	212a <sysclk_get_peripheral_bus_hz+0x2f2>
    2040:	e070      	b.n	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    2042:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    2046:	f2c4 010a 	movt	r1, #16394	; 0x400a
    204a:	4288      	cmp	r0, r1
    204c:	d06a      	beq.n	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    204e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2052:	f2c4 020a 	movt	r2, #16394	; 0x400a
    2056:	4290      	cmp	r0, r2
    2058:	d806      	bhi.n	2068 <sysclk_get_peripheral_bus_hz+0x230>
    205a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    205e:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2062:	4298      	cmp	r0, r3
    2064:	d161      	bne.n	212a <sysclk_get_peripheral_bus_hz+0x2f2>
    2066:	e05d      	b.n	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    2068:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    206c:	f2c4 010a 	movt	r1, #16394	; 0x400a
    2070:	4288      	cmp	r0, r1
    2072:	d057      	beq.n	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    2074:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
    2078:	f2c4 020a 	movt	r2, #16394	; 0x400a
    207c:	4290      	cmp	r0, r2
    207e:	d154      	bne.n	212a <sysclk_get_peripheral_bus_hz+0x2f2>
    2080:	e050      	b.n	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    2082:	f04f 0300 	mov.w	r3, #0
    2086:	f2c4 030f 	movt	r3, #16399	; 0x400f
    208a:	4298      	cmp	r0, r3
    208c:	d04a      	beq.n	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    208e:	f04f 0100 	mov.w	r1, #0
    2092:	f2c4 010f 	movt	r1, #16399	; 0x400f
    2096:	4288      	cmp	r0, r1
    2098:	d81f      	bhi.n	20da <sysclk_get_peripheral_bus_hz+0x2a2>
    209a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    209e:	f2c4 020e 	movt	r2, #16398	; 0x400e
    20a2:	4290      	cmp	r0, r2
    20a4:	d03e      	beq.n	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    20a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
    20aa:	f2c4 030e 	movt	r3, #16398	; 0x400e
    20ae:	4298      	cmp	r0, r3
    20b0:	d806      	bhi.n	20c0 <sysclk_get_peripheral_bus_hz+0x288>
    20b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
    20b6:	f2c4 010e 	movt	r1, #16398	; 0x400e
    20ba:	4288      	cmp	r0, r1
    20bc:	d135      	bne.n	212a <sysclk_get_peripheral_bus_hz+0x2f2>
    20be:	e031      	b.n	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    20c0:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    20c4:	f2c4 020e 	movt	r2, #16398	; 0x400e
    20c8:	4290      	cmp	r0, r2
    20ca:	d02b      	beq.n	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    20cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    20d0:	f2c4 030e 	movt	r3, #16398	; 0x400e
    20d4:	4298      	cmp	r0, r3
    20d6:	d128      	bne.n	212a <sysclk_get_peripheral_bus_hz+0x2f2>
    20d8:	e024      	b.n	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    20da:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    20de:	f2c4 010f 	movt	r1, #16399	; 0x400f
    20e2:	4288      	cmp	r0, r1
    20e4:	d01e      	beq.n	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    20e6:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    20ea:	f2c4 020f 	movt	r2, #16399	; 0x400f
    20ee:	4290      	cmp	r0, r2
    20f0:	d80c      	bhi.n	210c <sysclk_get_peripheral_bus_hz+0x2d4>
    20f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20f6:	f2c4 030f 	movt	r3, #16399	; 0x400f
    20fa:	4298      	cmp	r0, r3
    20fc:	d012      	beq.n	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    20fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2102:	f2c4 010f 	movt	r1, #16399	; 0x400f
    2106:	4288      	cmp	r0, r1
    2108:	d10f      	bne.n	212a <sysclk_get_peripheral_bus_hz+0x2f2>
    210a:	e00b      	b.n	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    210c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    2110:	f2c4 020f 	movt	r2, #16399	; 0x400f
    2114:	4290      	cmp	r0, r2
    2116:	d005      	beq.n	2124 <sysclk_get_peripheral_bus_hz+0x2ec>
    2118:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    211c:	f2c4 030f 	movt	r3, #16399	; 0x400f
    2120:	4298      	cmp	r0, r3
    2122:	d102      	bne.n	212a <sysclk_get_peripheral_bus_hz+0x2f2>
	case PARC_ADDR:
	case CATB_ADDR:
	case TWIM2_ADDR:
	case TWIM3_ADDR:
	case LCDCA_ADDR:
		return sysclk_get_pba_hz();
    2124:	f04f 7037 	mov.w	r0, #47972352	; 0x2dc0000
    2128:	4770      	bx	lr
	case PICOUART_ADDR:
		return sysclk_get_pbd_hz();

	default:
		Assert(false);
		return 0;
    212a:	f04f 0000 	mov.w	r0, #0
	}
}
    212e:	4770      	bx	lr

00002130 <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
    2130:	b508      	push	{r3, lr}
	switch ((uintptr_t)module) {
    2132:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2136:	f2c4 0307 	movt	r3, #16391	; 0x4007
    213a:	4298      	cmp	r0, r3
    213c:	f000 827f 	beq.w	263e <sysclk_enable_peripheral_clock+0x50e>
    2140:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2144:	f2c4 0107 	movt	r1, #16391	; 0x4007
    2148:	4288      	cmp	r0, r1
    214a:	f200 80bb 	bhi.w	22c4 <sysclk_enable_peripheral_clock+0x194>
    214e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2152:	f2c4 0202 	movt	r2, #16386	; 0x4002
    2156:	4290      	cmp	r0, r2
    2158:	f000 81f2 	beq.w	2540 <sysclk_enable_peripheral_clock+0x410>
    215c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2160:	f2c4 0302 	movt	r3, #16386	; 0x4002
    2164:	4298      	cmp	r0, r3
    2166:	d851      	bhi.n	220c <sysclk_enable_peripheral_clock+0xdc>
    2168:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    216c:	f2c4 0101 	movt	r1, #16385	; 0x4001
    2170:	4288      	cmp	r0, r1
    2172:	f000 81b0 	beq.w	24d6 <sysclk_enable_peripheral_clock+0x3a6>
    2176:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    217a:	f2c4 0201 	movt	r2, #16385	; 0x4001
    217e:	4290      	cmp	r0, r2
    2180:	d820      	bhi.n	21c4 <sysclk_enable_peripheral_clock+0x94>
    2182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2186:	f2c4 0300 	movt	r3, #16384	; 0x4000
    218a:	4298      	cmp	r0, r3
    218c:	f000 8171 	beq.w	2472 <sysclk_enable_peripheral_clock+0x342>
    2190:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2194:	f2c4 0100 	movt	r1, #16384	; 0x4000
    2198:	4288      	cmp	r0, r1
    219a:	d804      	bhi.n	21a6 <sysclk_enable_peripheral_clock+0x76>
    219c:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    21a0:	f040 8334 	bne.w	280c <sysclk_enable_peripheral_clock+0x6dc>
    21a4:	e15d      	b.n	2462 <sysclk_enable_peripheral_clock+0x332>
    21a6:	f04f 0300 	mov.w	r3, #0
    21aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21ae:	4298      	cmp	r0, r3
    21b0:	f000 8167 	beq.w	2482 <sysclk_enable_peripheral_clock+0x352>
    21b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    21b8:	f2c4 0101 	movt	r1, #16385	; 0x4001
    21bc:	4288      	cmp	r0, r1
    21be:	f040 8325 	bne.w	280c <sysclk_enable_peripheral_clock+0x6dc>
    21c2:	e173      	b.n	24ac <sysclk_enable_peripheral_clock+0x37c>
    21c4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    21c8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21cc:	4298      	cmp	r0, r3
    21ce:	f000 8192 	beq.w	24f6 <sysclk_enable_peripheral_clock+0x3c6>
    21d2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    21d6:	f2c4 0201 	movt	r2, #16385	; 0x4001
    21da:	4290      	cmp	r0, r2
    21dc:	d807      	bhi.n	21ee <sysclk_enable_peripheral_clock+0xbe>
    21de:	f44f 4104 	mov.w	r1, #33792	; 0x8400
    21e2:	f2c4 0101 	movt	r1, #16385	; 0x4001
    21e6:	4288      	cmp	r0, r1
    21e8:	f040 8310 	bne.w	280c <sysclk_enable_peripheral_clock+0x6dc>
    21ec:	e17b      	b.n	24e6 <sysclk_enable_peripheral_clock+0x3b6>
    21ee:	f44f 4244 	mov.w	r2, #50176	; 0xc400
    21f2:	f2c4 0201 	movt	r2, #16385	; 0x4001
    21f6:	4290      	cmp	r0, r2
    21f8:	f000 8185 	beq.w	2506 <sysclk_enable_peripheral_clock+0x3d6>
    21fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    2200:	f2c4 0102 	movt	r1, #16386	; 0x4002
    2204:	4288      	cmp	r0, r1
    2206:	f040 8301 	bne.w	280c <sysclk_enable_peripheral_clock+0x6dc>
    220a:	e184      	b.n	2516 <sysclk_enable_peripheral_clock+0x3e6>
    220c:	f04f 0200 	mov.w	r2, #0
    2210:	f2c4 0204 	movt	r2, #16388	; 0x4004
    2214:	4290      	cmp	r0, r2
    2216:	f000 81e2 	beq.w	25de <sysclk_enable_peripheral_clock+0x4ae>
    221a:	f04f 0100 	mov.w	r1, #0
    221e:	f2c4 0104 	movt	r1, #16388	; 0x4004
    2222:	4288      	cmp	r0, r1
    2224:	d823      	bhi.n	226e <sysclk_enable_peripheral_clock+0x13e>
    2226:	f04f 0300 	mov.w	r3, #0
    222a:	f2c4 0303 	movt	r3, #16387	; 0x4003
    222e:	4298      	cmp	r0, r3
    2230:	f000 81b0 	beq.w	2594 <sysclk_enable_peripheral_clock+0x464>
    2234:	f04f 0200 	mov.w	r2, #0
    2238:	f2c4 0203 	movt	r2, #16387	; 0x4003
    223c:	4290      	cmp	r0, r2
    223e:	d807      	bhi.n	2250 <sysclk_enable_peripheral_clock+0x120>
    2240:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    2244:	f2c4 0102 	movt	r1, #16386	; 0x4002
    2248:	4288      	cmp	r0, r1
    224a:	f040 82df 	bne.w	280c <sysclk_enable_peripheral_clock+0x6dc>
    224e:	e18c      	b.n	256a <sysclk_enable_peripheral_clock+0x43a>
    2250:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2254:	f2c4 0203 	movt	r2, #16387	; 0x4003
    2258:	4290      	cmp	r0, r2
    225a:	f000 81b0 	beq.w	25be <sysclk_enable_peripheral_clock+0x48e>
    225e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    2262:	f2c4 0103 	movt	r1, #16387	; 0x4003
    2266:	4288      	cmp	r0, r1
    2268:	f040 82d0 	bne.w	280c <sysclk_enable_peripheral_clock+0x6dc>
    226c:	e1af      	b.n	25ce <sysclk_enable_peripheral_clock+0x49e>
    226e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2272:	f2c4 0306 	movt	r3, #16390	; 0x4006
    2276:	4298      	cmp	r0, r3
    2278:	f000 81c9 	beq.w	260e <sysclk_enable_peripheral_clock+0x4de>
    227c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2280:	f2c4 0106 	movt	r1, #16390	; 0x4006
    2284:	4288      	cmp	r0, r1
    2286:	d80e      	bhi.n	22a6 <sysclk_enable_peripheral_clock+0x176>
    2288:	f04f 0200 	mov.w	r2, #0
    228c:	f2c4 0206 	movt	r2, #16390	; 0x4006
    2290:	4290      	cmp	r0, r2
    2292:	f000 81ac 	beq.w	25ee <sysclk_enable_peripheral_clock+0x4be>
    2296:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    229a:	f2c4 0306 	movt	r3, #16390	; 0x4006
    229e:	4298      	cmp	r0, r3
    22a0:	f040 82b4 	bne.w	280c <sysclk_enable_peripheral_clock+0x6dc>
    22a4:	e1ab      	b.n	25fe <sysclk_enable_peripheral_clock+0x4ce>
    22a6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    22aa:	f2c4 0306 	movt	r3, #16390	; 0x4006
    22ae:	4298      	cmp	r0, r3
    22b0:	f000 81b5 	beq.w	261e <sysclk_enable_peripheral_clock+0x4ee>
    22b4:	f04f 0100 	mov.w	r1, #0
    22b8:	f2c4 0107 	movt	r1, #16391	; 0x4007
    22bc:	4288      	cmp	r0, r1
    22be:	f040 82a5 	bne.w	280c <sysclk_enable_peripheral_clock+0x6dc>
    22c2:	e1b4      	b.n	262e <sysclk_enable_peripheral_clock+0x4fe>
    22c4:	f04f 0100 	mov.w	r1, #0
    22c8:	f2c4 010e 	movt	r1, #16398	; 0x400e
    22cc:	4288      	cmp	r0, r1
    22ce:	f000 8232 	beq.w	2736 <sysclk_enable_peripheral_clock+0x606>
    22d2:	f04f 0300 	mov.w	r3, #0
    22d6:	f2c4 030e 	movt	r3, #16398	; 0x400e
    22da:	4298      	cmp	r0, r3
    22dc:	d85b      	bhi.n	2396 <sysclk_enable_peripheral_clock+0x266>
    22de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    22e2:	f2c4 020a 	movt	r2, #16394	; 0x400a
    22e6:	4290      	cmp	r0, r2
    22e8:	f000 81e2 	beq.w	26b0 <sysclk_enable_peripheral_clock+0x580>
    22ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    22f0:	f2c4 010a 	movt	r1, #16394	; 0x400a
    22f4:	4288      	cmp	r0, r1
    22f6:	d823      	bhi.n	2340 <sysclk_enable_peripheral_clock+0x210>
    22f8:	f04f 0300 	mov.w	r3, #0
    22fc:	f2c4 0308 	movt	r3, #16392	; 0x4008
    2300:	4298      	cmp	r0, r3
    2302:	f000 81ac 	beq.w	265e <sysclk_enable_peripheral_clock+0x52e>
    2306:	f04f 0200 	mov.w	r2, #0
    230a:	f2c4 0208 	movt	r2, #16392	; 0x4008
    230e:	4290      	cmp	r0, r2
    2310:	d807      	bhi.n	2322 <sysclk_enable_peripheral_clock+0x1f2>
    2312:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    2316:	f2c4 0107 	movt	r1, #16391	; 0x4007
    231a:	4288      	cmp	r0, r1
    231c:	f040 8276 	bne.w	280c <sysclk_enable_peripheral_clock+0x6dc>
    2320:	e195      	b.n	264e <sysclk_enable_peripheral_clock+0x51e>
    2322:	f04f 0200 	mov.w	r2, #0
    2326:	f2c4 020a 	movt	r2, #16394	; 0x400a
    232a:	4290      	cmp	r0, r2
    232c:	f000 819f 	beq.w	266e <sysclk_enable_peripheral_clock+0x53e>
    2330:	f44f 6180 	mov.w	r1, #1024	; 0x400
    2334:	f2c4 010a 	movt	r1, #16394	; 0x400a
    2338:	4288      	cmp	r0, r1
    233a:	f040 8267 	bne.w	280c <sysclk_enable_peripheral_clock+0x6dc>
    233e:	e1a6      	b.n	268e <sysclk_enable_peripheral_clock+0x55e>
    2340:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    2344:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2348:	4298      	cmp	r0, r3
    234a:	f000 81db 	beq.w	2704 <sysclk_enable_peripheral_clock+0x5d4>
    234e:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    2352:	f2c4 010a 	movt	r1, #16394	; 0x400a
    2356:	4288      	cmp	r0, r1
    2358:	d80e      	bhi.n	2378 <sysclk_enable_peripheral_clock+0x248>
    235a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    235e:	f2c4 020a 	movt	r2, #16394	; 0x400a
    2362:	4290      	cmp	r0, r2
    2364:	f000 81ac 	beq.w	26c0 <sysclk_enable_peripheral_clock+0x590>
    2368:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    236c:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2370:	4298      	cmp	r0, r3
    2372:	f040 824b 	bne.w	280c <sysclk_enable_peripheral_clock+0x6dc>
    2376:	e1b4      	b.n	26e2 <sysclk_enable_peripheral_clock+0x5b2>
    2378:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
    237c:	f2c4 010a 	movt	r1, #16394	; 0x400a
    2380:	4288      	cmp	r0, r1
    2382:	f000 81d0 	beq.w	2726 <sysclk_enable_peripheral_clock+0x5f6>
    2386:	f04f 0300 	mov.w	r3, #0
    238a:	f2c4 030b 	movt	r3, #16395	; 0x400b
    238e:	4298      	cmp	r0, r3
    2390:	f040 823c 	bne.w	280c <sysclk_enable_peripheral_clock+0x6dc>
    2394:	e05b      	b.n	244e <sysclk_enable_peripheral_clock+0x31e>
    2396:	f04f 0300 	mov.w	r3, #0
    239a:	f2c4 030f 	movt	r3, #16399	; 0x400f
    239e:	4298      	cmp	r0, r3
    23a0:	f000 81fa 	beq.w	2798 <sysclk_enable_peripheral_clock+0x668>
    23a4:	f04f 0200 	mov.w	r2, #0
    23a8:	f2c4 020f 	movt	r2, #16399	; 0x400f
    23ac:	4290      	cmp	r0, r2
    23ae:	d823      	bhi.n	23f8 <sysclk_enable_peripheral_clock+0x2c8>
    23b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    23b4:	f2c4 010e 	movt	r1, #16398	; 0x400e
    23b8:	4288      	cmp	r0, r1
    23ba:	f000 81d0 	beq.w	275e <sysclk_enable_peripheral_clock+0x62e>
    23be:	f44f 6300 	mov.w	r3, #2048	; 0x800
    23c2:	f2c4 030e 	movt	r3, #16398	; 0x400e
    23c6:	4298      	cmp	r0, r3
    23c8:	d807      	bhi.n	23da <sysclk_enable_peripheral_clock+0x2aa>
    23ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
    23ce:	f2c4 020e 	movt	r2, #16398	; 0x400e
    23d2:	4290      	cmp	r0, r2
    23d4:	f040 821a 	bne.w	280c <sysclk_enable_peripheral_clock+0x6dc>
    23d8:	e1b7      	b.n	274a <sysclk_enable_peripheral_clock+0x61a>
    23da:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    23de:	f2c4 010e 	movt	r1, #16398	; 0x400e
    23e2:	4288      	cmp	r0, r1
    23e4:	f000 81c5 	beq.w	2772 <sysclk_enable_peripheral_clock+0x642>
    23e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    23ec:	f2c4 020e 	movt	r2, #16398	; 0x400e
    23f0:	4290      	cmp	r0, r2
    23f2:	f040 820b 	bne.w	280c <sysclk_enable_peripheral_clock+0x6dc>
    23f6:	e1c6      	b.n	2786 <sysclk_enable_peripheral_clock+0x656>
    23f8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    23fc:	f2c4 010f 	movt	r1, #16399	; 0x400f
    2400:	4288      	cmp	r0, r1
    2402:	f000 81e7 	beq.w	27d4 <sysclk_enable_peripheral_clock+0x6a4>
    2406:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    240a:	f2c4 020f 	movt	r2, #16399	; 0x400f
    240e:	4290      	cmp	r0, r2
    2410:	d80e      	bhi.n	2430 <sysclk_enable_peripheral_clock+0x300>
    2412:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2416:	f2c4 030f 	movt	r3, #16399	; 0x400f
    241a:	4298      	cmp	r0, r3
    241c:	f000 81c6 	beq.w	27ac <sysclk_enable_peripheral_clock+0x67c>
    2420:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2424:	f2c4 010f 	movt	r1, #16399	; 0x400f
    2428:	4288      	cmp	r0, r1
    242a:	f040 81ef 	bne.w	280c <sysclk_enable_peripheral_clock+0x6dc>
    242e:	e1c7      	b.n	27c0 <sysclk_enable_peripheral_clock+0x690>
    2430:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    2434:	f2c4 010f 	movt	r1, #16399	; 0x400f
    2438:	4288      	cmp	r0, r1
    243a:	f000 81d5 	beq.w	27e8 <sysclk_enable_peripheral_clock+0x6b8>
    243e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
    2442:	f2c4 020f 	movt	r2, #16399	; 0x400f
    2446:	4290      	cmp	r0, r2
    2448:	f040 81e0 	bne.w	280c <sysclk_enable_peripheral_clock+0x6dc>
    244c:	e1d6      	b.n	27fc <sysclk_enable_peripheral_clock+0x6cc>
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    244e:	f04f 0001 	mov.w	r0, #1
    2452:	f04f 0109 	mov.w	r1, #9
    2456:	f641 32e5 	movw	r2, #7141	; 0x1be5
    245a:	f2c0 0200 	movt	r2, #0
    245e:	4790      	blx	r2
    2460:	bd08      	pop	{r3, pc}
	case AESA_ADDR:
		sysclk_enable_hsb_module(SYSCLK_AESA_HSB);
		break;

	case IISC_ADDR:
		sysclk_enable_pba_module(SYSCLK_IISC);
    2462:	f04f 0000 	mov.w	r0, #0
    2466:	f641 42b9 	movw	r2, #7353	; 0x1cb9
    246a:	f2c0 0200 	movt	r2, #0
    246e:	4790      	blx	r2
		break;
    2470:	bd08      	pop	{r3, pc}

	case SPI_ADDR:
		sysclk_enable_pba_module(SYSCLK_SPI);
    2472:	f04f 0001 	mov.w	r0, #1
    2476:	f641 41b9 	movw	r1, #7353	; 0x1cb9
    247a:	f2c0 0100 	movt	r1, #0
    247e:	4788      	blx	r1
		break;
    2480:	bd08      	pop	{r3, pc}

	case TC0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TC0);
    2482:	f04f 0002 	mov.w	r0, #2
    2486:	f641 43b9 	movw	r3, #7353	; 0x1cb9
    248a:	f2c0 0300 	movt	r3, #0
    248e:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    2490:	f04f 0000 	mov.w	r0, #0
    2494:	f2c4 000e 	movt	r0, #16398	; 0x400e
    2498:	6c01      	ldr	r1, [r0, #64]	; 0x40
	temp_mask |= mask;
    249a:	f041 0355 	orr.w	r3, r1, #85	; 0x55
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    249e:	f04f 0240 	mov.w	r2, #64	; 0x40
    24a2:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    24a6:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    24a8:	6403      	str	r3, [r0, #64]	; 0x40
    24aa:	bd08      	pop	{r3, pc}
			| PBA_DIVMASK_TIMER_CLOCK5
			);
		break;

	case TC1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TC1);
    24ac:	f04f 0003 	mov.w	r0, #3
    24b0:	f641 42b9 	movw	r2, #7353	; 0x1cb9
    24b4:	f2c0 0200 	movt	r2, #0
    24b8:	4790      	blx	r2
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    24ba:	f04f 0000 	mov.w	r0, #0
    24be:	f2c4 000e 	movt	r0, #16398	; 0x400e
    24c2:	6c03      	ldr	r3, [r0, #64]	; 0x40
	temp_mask |= mask;
    24c4:	f043 0155 	orr.w	r1, r3, #85	; 0x55
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    24c8:	f04f 0240 	mov.w	r2, #64	; 0x40
    24cc:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    24d0:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    24d2:	6401      	str	r1, [r0, #64]	; 0x40
    24d4:	bd08      	pop	{r3, pc}
			| PBA_DIVMASK_TIMER_CLOCK5
			);
		break;

	case TWIM0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM0);
    24d6:	f04f 0004 	mov.w	r0, #4
    24da:	f641 43b9 	movw	r3, #7353	; 0x1cb9
    24de:	f2c0 0300 	movt	r3, #0
    24e2:	4798      	blx	r3
		break;
    24e4:	bd08      	pop	{r3, pc}

	case TWIS0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIS0);
    24e6:	f04f 0005 	mov.w	r0, #5
    24ea:	f641 43b9 	movw	r3, #7353	; 0x1cb9
    24ee:	f2c0 0300 	movt	r3, #0
    24f2:	4798      	blx	r3
		break;
    24f4:	bd08      	pop	{r3, pc}

	case TWIM1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM1);
    24f6:	f04f 0006 	mov.w	r0, #6
    24fa:	f641 41b9 	movw	r1, #7353	; 0x1cb9
    24fe:	f2c0 0100 	movt	r1, #0
    2502:	4788      	blx	r1
		break;
    2504:	bd08      	pop	{r3, pc}

	case TWIS1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIS1);
    2506:	f04f 0007 	mov.w	r0, #7
    250a:	f641 42b9 	movw	r2, #7353	; 0x1cb9
    250e:	f2c0 0200 	movt	r2, #0
    2512:	4790      	blx	r2
		break;
    2514:	bd08      	pop	{r3, pc}

	case USART0_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART0);
    2516:	f04f 0008 	mov.w	r0, #8
    251a:	f641 43b9 	movw	r3, #7353	; 0x1cb9
    251e:	f2c0 0300 	movt	r3, #0
    2522:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    2524:	f04f 0000 	mov.w	r0, #0
    2528:	f2c4 000e 	movt	r0, #16398	; 0x400e
    252c:	6c02      	ldr	r2, [r0, #64]	; 0x40
	temp_mask |= mask;
    252e:	f042 0104 	orr.w	r1, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    2532:	f04f 0340 	mov.w	r3, #64	; 0x40
    2536:	f6ca 2300 	movt	r3, #43520	; 0xaa00
    253a:	6583      	str	r3, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    253c:	6401      	str	r1, [r0, #64]	; 0x40
    253e:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART1_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART1);
    2540:	f04f 0009 	mov.w	r0, #9
    2544:	f641 43b9 	movw	r3, #7353	; 0x1cb9
    2548:	f2c0 0300 	movt	r3, #0
    254c:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    254e:	f04f 0000 	mov.w	r0, #0
    2552:	f2c4 000e 	movt	r0, #16398	; 0x400e
    2556:	6c01      	ldr	r1, [r0, #64]	; 0x40
	temp_mask |= mask;
    2558:	f041 0304 	orr.w	r3, r1, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    255c:	f04f 0240 	mov.w	r2, #64	; 0x40
    2560:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    2564:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    2566:	6403      	str	r3, [r0, #64]	; 0x40
    2568:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART2_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART2);
    256a:	f04f 000a 	mov.w	r0, #10
    256e:	f641 43b9 	movw	r3, #7353	; 0x1cb9
    2572:	f2c0 0300 	movt	r3, #0
    2576:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    2578:	f04f 0000 	mov.w	r0, #0
    257c:	f2c4 000e 	movt	r0, #16398	; 0x400e
    2580:	6c02      	ldr	r2, [r0, #64]	; 0x40
	temp_mask |= mask;
    2582:	f042 0104 	orr.w	r1, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    2586:	f04f 0340 	mov.w	r3, #64	; 0x40
    258a:	f6ca 2300 	movt	r3, #43520	; 0xaa00
    258e:	6583      	str	r3, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    2590:	6401      	str	r1, [r0, #64]	; 0x40
    2592:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART3_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART3);
    2594:	f04f 000b 	mov.w	r0, #11
    2598:	f641 41b9 	movw	r1, #7353	; 0x1cb9
    259c:	f2c0 0100 	movt	r1, #0
    25a0:	4788      	blx	r1
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    25a2:	f04f 0000 	mov.w	r0, #0
    25a6:	f2c4 000e 	movt	r0, #16398	; 0x400e
    25aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
	temp_mask |= mask;
    25ac:	f043 0104 	orr.w	r1, r3, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    25b0:	f04f 0240 	mov.w	r2, #64	; 0x40
    25b4:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    25b8:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    25ba:	6401      	str	r1, [r0, #64]	; 0x40
    25bc:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case ADCIFE_ADDR:
		sysclk_enable_pba_module(SYSCLK_ADCIFE);
    25be:	f04f 000c 	mov.w	r0, #12
    25c2:	f641 42b9 	movw	r2, #7353	; 0x1cb9
    25c6:	f2c0 0200 	movt	r2, #0
    25ca:	4790      	blx	r2
		break;
    25cc:	bd08      	pop	{r3, pc}

	case DACC_ADDR:
		sysclk_enable_pba_module(SYSCLK_DACC);
    25ce:	f04f 000d 	mov.w	r0, #13
    25d2:	f641 43b9 	movw	r3, #7353	; 0x1cb9
    25d6:	f2c0 0300 	movt	r3, #0
    25da:	4798      	blx	r3
		break;
    25dc:	bd08      	pop	{r3, pc}

	case ACIFC_ADDR:
		sysclk_enable_pba_module(SYSCLK_ACIFC);
    25de:	f04f 000e 	mov.w	r0, #14
    25e2:	f641 42b9 	movw	r2, #7353	; 0x1cb9
    25e6:	f2c0 0200 	movt	r2, #0
    25ea:	4790      	blx	r2
		break;
    25ec:	bd08      	pop	{r3, pc}

	case GLOC_ADDR:
		sysclk_enable_pba_module(SYSCLK_GLOC);
    25ee:	f04f 000f 	mov.w	r0, #15
    25f2:	f641 42b9 	movw	r2, #7353	; 0x1cb9
    25f6:	f2c0 0200 	movt	r2, #0
    25fa:	4790      	blx	r2
		break;
    25fc:	bd08      	pop	{r3, pc}

	case ABDACB_ADDR:
		sysclk_enable_pba_module(SYSCLK_ABDACB);
    25fe:	f04f 0010 	mov.w	r0, #16
    2602:	f641 41b9 	movw	r1, #7353	; 0x1cb9
    2606:	f2c0 0100 	movt	r1, #0
    260a:	4788      	blx	r1
		break;
    260c:	bd08      	pop	{r3, pc}

	case TRNG_ADDR:
		sysclk_enable_pba_module(SYSCLK_TRNG);
    260e:	f04f 0011 	mov.w	r0, #17
    2612:	f641 41b9 	movw	r1, #7353	; 0x1cb9
    2616:	f2c0 0100 	movt	r1, #0
    261a:	4788      	blx	r1
		break;
    261c:	bd08      	pop	{r3, pc}

	case PARC_ADDR:
		sysclk_enable_pba_module(SYSCLK_PARC);
    261e:	f04f 0012 	mov.w	r0, #18
    2622:	f641 43b9 	movw	r3, #7353	; 0x1cb9
    2626:	f2c0 0300 	movt	r3, #0
    262a:	4798      	blx	r3
		break;
    262c:	bd08      	pop	{r3, pc}

	case CATB_ADDR:
		sysclk_enable_pba_module(SYSCLK_CATB);
    262e:	f04f 0013 	mov.w	r0, #19
    2632:	f641 42b9 	movw	r2, #7353	; 0x1cb9
    2636:	f2c0 0200 	movt	r2, #0
    263a:	4790      	blx	r2
		break;
    263c:	bd08      	pop	{r3, pc}

	case TWIM2_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM2);
    263e:	f04f 0015 	mov.w	r0, #21
    2642:	f641 41b9 	movw	r1, #7353	; 0x1cb9
    2646:	f2c0 0100 	movt	r1, #0
    264a:	4788      	blx	r1
		break;
    264c:	bd08      	pop	{r3, pc}

	case TWIM3_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM3);
    264e:	f04f 0016 	mov.w	r0, #22
    2652:	f641 43b9 	movw	r3, #7353	; 0x1cb9
    2656:	f2c0 0300 	movt	r3, #0
    265a:	4798      	blx	r3
		break;
    265c:	bd08      	pop	{r3, pc}

	case LCDCA_ADDR:
		sysclk_enable_pba_module(SYSCLK_LCDCA);
    265e:	f04f 0017 	mov.w	r0, #23
    2662:	f641 42b9 	movw	r2, #7353	; 0x1cb9
    2666:	f2c0 0200 	movt	r2, #0
    266a:	4790      	blx	r2
		break;
    266c:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    266e:	f04f 0001 	mov.w	r0, #1
    2672:	4601      	mov	r1, r0
    2674:	f641 33e5 	movw	r3, #7141	; 0x1be5
    2678:	f2c0 0300 	movt	r3, #0
    267c:	4798      	blx	r3

	case HFLASHC_ADDR:
		sysclk_enable_hsb_module(SYSCLK_HFLASHC_DATA);
		sysclk_enable_pbb_module(SYSCLK_HFLASHC_REGS);
    267e:	f04f 0000 	mov.w	r0, #0
    2682:	f641 5179 	movw	r1, #7545	; 0x1d79
    2686:	f2c0 0100 	movt	r1, #0
    268a:	4788      	blx	r1
		break;
    268c:	bd08      	pop	{r3, pc}
    268e:	f04f 0001 	mov.w	r0, #1
    2692:	f04f 0102 	mov.w	r1, #2
    2696:	f641 33e5 	movw	r3, #7141	; 0x1be5
    269a:	f2c0 0300 	movt	r3, #0
    269e:	4798      	blx	r3

	case HCACHE_ADDR:
		sysclk_enable_hsb_module(SYSCLK_HRAMC1_DATA);
		sysclk_enable_pbb_module(SYSCLK_HRAMC1_REGS);
    26a0:	f04f 0001 	mov.w	r0, #1
    26a4:	f641 5279 	movw	r2, #7545	; 0x1d79
    26a8:	f2c0 0200 	movt	r2, #0
    26ac:	4790      	blx	r2
		break;
    26ae:	bd08      	pop	{r3, pc}

	case HMATRIX_ADDR:
		sysclk_enable_pbb_module(SYSCLK_HMATRIX);
    26b0:	f04f 0002 	mov.w	r0, #2
    26b4:	f641 5179 	movw	r1, #7545	; 0x1d79
    26b8:	f2c0 0100 	movt	r1, #0
    26bc:	4788      	blx	r1
		break;
    26be:	bd08      	pop	{r3, pc}
    26c0:	f04f 0001 	mov.w	r0, #1
    26c4:	f04f 0100 	mov.w	r1, #0
    26c8:	f641 33e5 	movw	r3, #7141	; 0x1be5
    26cc:	f2c0 0300 	movt	r3, #0
    26d0:	4798      	blx	r3

	case PDCA_ADDR:
		sysclk_enable_hsb_module(SYSCLK_PDCA_HSB);
		sysclk_enable_pbb_module(SYSCLK_PDCA_PB);
    26d2:	f04f 0003 	mov.w	r0, #3
    26d6:	f641 5279 	movw	r2, #7545	; 0x1d79
    26da:	f2c0 0200 	movt	r2, #0
    26de:	4790      	blx	r2
		break;
    26e0:	bd08      	pop	{r3, pc}
    26e2:	f04f 0001 	mov.w	r0, #1
    26e6:	f04f 0104 	mov.w	r1, #4
    26ea:	f641 32e5 	movw	r2, #7141	; 0x1be5
    26ee:	f2c0 0200 	movt	r2, #0
    26f2:	4790      	blx	r2

	case CRCCU_ADDR:
		sysclk_enable_hsb_module(SYSCLK_CRCCU_DATA);
		sysclk_enable_pbb_module(SYSCLK_CRCCU_REGS);
    26f4:	f04f 0004 	mov.w	r0, #4
    26f8:	f641 5179 	movw	r1, #7545	; 0x1d79
    26fc:	f2c0 0100 	movt	r1, #0
    2700:	4788      	blx	r1
		break;
    2702:	bd08      	pop	{r3, pc}
    2704:	f04f 0001 	mov.w	r0, #1
    2708:	f04f 0103 	mov.w	r1, #3
    270c:	f641 33e5 	movw	r3, #7141	; 0x1be5
    2710:	f2c0 0300 	movt	r3, #0
    2714:	4798      	blx	r3

	case USBC_ADDR:
		sysclk_enable_hsb_module(SYSCLK_USBC_DATA);
		sysclk_enable_pbb_module(SYSCLK_USBC_REGS);
    2716:	f04f 0005 	mov.w	r0, #5
    271a:	f641 5279 	movw	r2, #7545	; 0x1d79
    271e:	f2c0 0200 	movt	r2, #0
    2722:	4790      	blx	r2
		break;
    2724:	bd08      	pop	{r3, pc}

	case PEVC_ADDR:
		sysclk_enable_pbb_module(SYSCLK_PEVC);
    2726:	f04f 0006 	mov.w	r0, #6
    272a:	f641 5179 	movw	r1, #7545	; 0x1d79
    272e:	f2c0 0100 	movt	r1, #0
    2732:	4788      	blx	r1
		break;
    2734:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbc_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_PBC, module_index);
    2736:	f04f 0004 	mov.w	r0, #4
    273a:	f04f 0100 	mov.w	r1, #0
    273e:	f641 33e5 	movw	r3, #7141	; 0x1be5
    2742:	f2c0 0300 	movt	r3, #0
    2746:	4798      	blx	r3
    2748:	bd08      	pop	{r3, pc}
    274a:	f04f 0004 	mov.w	r0, #4
    274e:	f04f 0101 	mov.w	r1, #1
    2752:	f641 33e5 	movw	r3, #7141	; 0x1be5
    2756:	f2c0 0300 	movt	r3, #0
    275a:	4798      	blx	r3
    275c:	bd08      	pop	{r3, pc}
    275e:	f04f 0004 	mov.w	r0, #4
    2762:	f04f 0102 	mov.w	r1, #2
    2766:	f641 33e5 	movw	r3, #7141	; 0x1be5
    276a:	f2c0 0300 	movt	r3, #0
    276e:	4798      	blx	r3
    2770:	bd08      	pop	{r3, pc}
    2772:	f04f 0004 	mov.w	r0, #4
    2776:	f04f 0103 	mov.w	r1, #3
    277a:	f641 32e5 	movw	r2, #7141	; 0x1be5
    277e:	f2c0 0200 	movt	r2, #0
    2782:	4790      	blx	r2
    2784:	bd08      	pop	{r3, pc}
    2786:	f04f 0004 	mov.w	r0, #4
    278a:	4601      	mov	r1, r0
    278c:	f641 33e5 	movw	r3, #7141	; 0x1be5
    2790:	f2c0 0300 	movt	r3, #0
    2794:	4798      	blx	r3
    2796:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbd_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_PBD, module_index);
    2798:	f04f 0005 	mov.w	r0, #5
    279c:	f04f 0100 	mov.w	r1, #0
    27a0:	f641 32e5 	movw	r2, #7141	; 0x1be5
    27a4:	f2c0 0200 	movt	r2, #0
    27a8:	4790      	blx	r2
    27aa:	bd08      	pop	{r3, pc}
    27ac:	f04f 0005 	mov.w	r0, #5
    27b0:	f04f 0101 	mov.w	r1, #1
    27b4:	f641 33e5 	movw	r3, #7141	; 0x1be5
    27b8:	f2c0 0300 	movt	r3, #0
    27bc:	4798      	blx	r3
    27be:	bd08      	pop	{r3, pc}
    27c0:	f04f 0005 	mov.w	r0, #5
    27c4:	f04f 0102 	mov.w	r1, #2
    27c8:	f641 32e5 	movw	r2, #7141	; 0x1be5
    27cc:	f2c0 0200 	movt	r2, #0
    27d0:	4790      	blx	r2
    27d2:	bd08      	pop	{r3, pc}
    27d4:	f04f 0005 	mov.w	r0, #5
    27d8:	f04f 0103 	mov.w	r1, #3
    27dc:	f641 33e5 	movw	r3, #7141	; 0x1be5
    27e0:	f2c0 0300 	movt	r3, #0
    27e4:	4798      	blx	r3
    27e6:	bd08      	pop	{r3, pc}
    27e8:	f04f 0005 	mov.w	r0, #5
    27ec:	f04f 0104 	mov.w	r1, #4
    27f0:	f641 32e5 	movw	r2, #7141	; 0x1be5
    27f4:	f2c0 0200 	movt	r2, #0
    27f8:	4790      	blx	r2
    27fa:	bd08      	pop	{r3, pc}
    27fc:	f04f 0005 	mov.w	r0, #5
    2800:	4601      	mov	r1, r0
    2802:	f641 33e5 	movw	r3, #7141	; 0x1be5
    2806:	f2c0 0300 	movt	r3, #0
    280a:	4798      	blx	r3
    280c:	bd08      	pop	{r3, pc}
    280e:	bf00      	nop

00002810 <sysclk_disable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be disabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
    2810:	b508      	push	{r3, lr}
	switch ((uintptr_t)module) {
    2812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2816:	f2c4 0307 	movt	r3, #16391	; 0x4007
    281a:	4298      	cmp	r0, r3
    281c:	f000 8231 	beq.w	2c82 <sysclk_disable_peripheral_clock+0x472>
    2820:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2824:	f2c4 0107 	movt	r1, #16391	; 0x4007
    2828:	4288      	cmp	r0, r1
    282a:	f200 80bb 	bhi.w	29a4 <sysclk_disable_peripheral_clock+0x194>
    282e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2832:	f2c4 0202 	movt	r2, #16386	; 0x4002
    2836:	4290      	cmp	r0, r2
    2838:	f000 81cb 	beq.w	2bd2 <sysclk_disable_peripheral_clock+0x3c2>
    283c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2840:	f2c4 0302 	movt	r3, #16386	; 0x4002
    2844:	4298      	cmp	r0, r3
    2846:	d851      	bhi.n	28ec <sysclk_disable_peripheral_clock+0xdc>
    2848:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    284c:	f2c4 0101 	movt	r1, #16385	; 0x4001
    2850:	4288      	cmp	r0, r1
    2852:	f000 8196 	beq.w	2b82 <sysclk_disable_peripheral_clock+0x372>
    2856:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    285a:	f2c4 0201 	movt	r2, #16385	; 0x4001
    285e:	4290      	cmp	r0, r2
    2860:	d820      	bhi.n	28a4 <sysclk_disable_peripheral_clock+0x94>
    2862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2866:	f2c4 0300 	movt	r3, #16384	; 0x4000
    286a:	4298      	cmp	r0, r3
    286c:	f000 8171 	beq.w	2b52 <sysclk_disable_peripheral_clock+0x342>
    2870:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2874:	f2c4 0100 	movt	r1, #16384	; 0x4000
    2878:	4288      	cmp	r0, r1
    287a:	d804      	bhi.n	2886 <sysclk_disable_peripheral_clock+0x76>
    287c:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    2880:	f040 82f3 	bne.w	2e6a <sysclk_disable_peripheral_clock+0x65a>
    2884:	e15d      	b.n	2b42 <sysclk_disable_peripheral_clock+0x332>
    2886:	f04f 0300 	mov.w	r3, #0
    288a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    288e:	4298      	cmp	r0, r3
    2890:	f000 8167 	beq.w	2b62 <sysclk_disable_peripheral_clock+0x352>
    2894:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    2898:	f2c4 0101 	movt	r1, #16385	; 0x4001
    289c:	4288      	cmp	r0, r1
    289e:	f040 82e4 	bne.w	2e6a <sysclk_disable_peripheral_clock+0x65a>
    28a2:	e166      	b.n	2b72 <sysclk_disable_peripheral_clock+0x362>
    28a4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    28a8:	f2c4 0201 	movt	r2, #16385	; 0x4001
    28ac:	4290      	cmp	r0, r2
    28ae:	f000 8178 	beq.w	2ba2 <sysclk_disable_peripheral_clock+0x392>
    28b2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    28b6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    28ba:	4298      	cmp	r0, r3
    28bc:	d807      	bhi.n	28ce <sysclk_disable_peripheral_clock+0xbe>
    28be:	f44f 4104 	mov.w	r1, #33792	; 0x8400
    28c2:	f2c4 0101 	movt	r1, #16385	; 0x4001
    28c6:	4288      	cmp	r0, r1
    28c8:	f040 82cf 	bne.w	2e6a <sysclk_disable_peripheral_clock+0x65a>
    28cc:	e161      	b.n	2b92 <sysclk_disable_peripheral_clock+0x382>
    28ce:	f44f 4344 	mov.w	r3, #50176	; 0xc400
    28d2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    28d6:	4298      	cmp	r0, r3
    28d8:	f000 816b 	beq.w	2bb2 <sysclk_disable_peripheral_clock+0x3a2>
    28dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    28e0:	f2c4 0102 	movt	r1, #16386	; 0x4002
    28e4:	4288      	cmp	r0, r1
    28e6:	f040 82c0 	bne.w	2e6a <sysclk_disable_peripheral_clock+0x65a>
    28ea:	e16a      	b.n	2bc2 <sysclk_disable_peripheral_clock+0x3b2>
    28ec:	f04f 0300 	mov.w	r3, #0
    28f0:	f2c4 0304 	movt	r3, #16388	; 0x4004
    28f4:	4298      	cmp	r0, r3
    28f6:	f000 8194 	beq.w	2c22 <sysclk_disable_peripheral_clock+0x412>
    28fa:	f04f 0100 	mov.w	r1, #0
    28fe:	f2c4 0104 	movt	r1, #16388	; 0x4004
    2902:	4288      	cmp	r0, r1
    2904:	d823      	bhi.n	294e <sysclk_disable_peripheral_clock+0x13e>
    2906:	f04f 0200 	mov.w	r2, #0
    290a:	f2c4 0203 	movt	r2, #16387	; 0x4003
    290e:	4290      	cmp	r0, r2
    2910:	f000 816f 	beq.w	2bf2 <sysclk_disable_peripheral_clock+0x3e2>
    2914:	f04f 0300 	mov.w	r3, #0
    2918:	f2c4 0303 	movt	r3, #16387	; 0x4003
    291c:	4298      	cmp	r0, r3
    291e:	d807      	bhi.n	2930 <sysclk_disable_peripheral_clock+0x120>
    2920:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    2924:	f2c4 0102 	movt	r1, #16386	; 0x4002
    2928:	4288      	cmp	r0, r1
    292a:	f040 829e 	bne.w	2e6a <sysclk_disable_peripheral_clock+0x65a>
    292e:	e158      	b.n	2be2 <sysclk_disable_peripheral_clock+0x3d2>
    2930:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2934:	f2c4 0303 	movt	r3, #16387	; 0x4003
    2938:	4298      	cmp	r0, r3
    293a:	f000 8162 	beq.w	2c02 <sysclk_disable_peripheral_clock+0x3f2>
    293e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    2942:	f2c4 0103 	movt	r1, #16387	; 0x4003
    2946:	4288      	cmp	r0, r1
    2948:	f040 828f 	bne.w	2e6a <sysclk_disable_peripheral_clock+0x65a>
    294c:	e161      	b.n	2c12 <sysclk_disable_peripheral_clock+0x402>
    294e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2952:	f2c4 0206 	movt	r2, #16390	; 0x4006
    2956:	4290      	cmp	r0, r2
    2958:	f000 817b 	beq.w	2c52 <sysclk_disable_peripheral_clock+0x442>
    295c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2960:	f2c4 0306 	movt	r3, #16390	; 0x4006
    2964:	4298      	cmp	r0, r3
    2966:	d80e      	bhi.n	2986 <sysclk_disable_peripheral_clock+0x176>
    2968:	f04f 0100 	mov.w	r1, #0
    296c:	f2c4 0106 	movt	r1, #16390	; 0x4006
    2970:	4288      	cmp	r0, r1
    2972:	f000 815e 	beq.w	2c32 <sysclk_disable_peripheral_clock+0x422>
    2976:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    297a:	f2c4 0206 	movt	r2, #16390	; 0x4006
    297e:	4290      	cmp	r0, r2
    2980:	f040 8273 	bne.w	2e6a <sysclk_disable_peripheral_clock+0x65a>
    2984:	e15d      	b.n	2c42 <sysclk_disable_peripheral_clock+0x432>
    2986:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    298a:	f2c4 0206 	movt	r2, #16390	; 0x4006
    298e:	4290      	cmp	r0, r2
    2990:	f000 8167 	beq.w	2c62 <sysclk_disable_peripheral_clock+0x452>
    2994:	f04f 0300 	mov.w	r3, #0
    2998:	f2c4 0307 	movt	r3, #16391	; 0x4007
    299c:	4298      	cmp	r0, r3
    299e:	f040 8264 	bne.w	2e6a <sysclk_disable_peripheral_clock+0x65a>
    29a2:	e166      	b.n	2c72 <sysclk_disable_peripheral_clock+0x462>
    29a4:	f04f 0300 	mov.w	r3, #0
    29a8:	f2c4 030e 	movt	r3, #16398	; 0x400e
    29ac:	4298      	cmp	r0, r3
    29ae:	f000 81dc 	beq.w	2d6a <sysclk_disable_peripheral_clock+0x55a>
    29b2:	f04f 0100 	mov.w	r1, #0
    29b6:	f2c4 010e 	movt	r1, #16398	; 0x400e
    29ba:	4288      	cmp	r0, r1
    29bc:	d85b      	bhi.n	2a76 <sysclk_disable_peripheral_clock+0x266>
    29be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    29c2:	f2c4 020a 	movt	r2, #16394	; 0x400a
    29c6:	4290      	cmp	r0, r2
    29c8:	f000 818c 	beq.w	2ce4 <sysclk_disable_peripheral_clock+0x4d4>
    29cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    29d0:	f2c4 030a 	movt	r3, #16394	; 0x400a
    29d4:	4298      	cmp	r0, r3
    29d6:	d823      	bhi.n	2a20 <sysclk_disable_peripheral_clock+0x210>
    29d8:	f04f 0100 	mov.w	r1, #0
    29dc:	f2c4 0108 	movt	r1, #16392	; 0x4008
    29e0:	4288      	cmp	r0, r1
    29e2:	f000 815e 	beq.w	2ca2 <sysclk_disable_peripheral_clock+0x492>
    29e6:	f04f 0200 	mov.w	r2, #0
    29ea:	f2c4 0208 	movt	r2, #16392	; 0x4008
    29ee:	4290      	cmp	r0, r2
    29f0:	d807      	bhi.n	2a02 <sysclk_disable_peripheral_clock+0x1f2>
    29f2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    29f6:	f2c4 0307 	movt	r3, #16391	; 0x4007
    29fa:	4298      	cmp	r0, r3
    29fc:	f040 8235 	bne.w	2e6a <sysclk_disable_peripheral_clock+0x65a>
    2a00:	e147      	b.n	2c92 <sysclk_disable_peripheral_clock+0x482>
    2a02:	f04f 0200 	mov.w	r2, #0
    2a06:	f2c4 020a 	movt	r2, #16394	; 0x400a
    2a0a:	4290      	cmp	r0, r2
    2a0c:	f000 8151 	beq.w	2cb2 <sysclk_disable_peripheral_clock+0x4a2>
    2a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2a14:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2a18:	4298      	cmp	r0, r3
    2a1a:	f040 8226 	bne.w	2e6a <sysclk_disable_peripheral_clock+0x65a>
    2a1e:	e150      	b.n	2cc2 <sysclk_disable_peripheral_clock+0x4b2>
    2a20:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    2a24:	f2c4 010a 	movt	r1, #16394	; 0x400a
    2a28:	4288      	cmp	r0, r1
    2a2a:	f000 8185 	beq.w	2d38 <sysclk_disable_peripheral_clock+0x528>
    2a2e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    2a32:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2a36:	4298      	cmp	r0, r3
    2a38:	d80e      	bhi.n	2a58 <sysclk_disable_peripheral_clock+0x248>
    2a3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    2a3e:	f2c4 020a 	movt	r2, #16394	; 0x400a
    2a42:	4290      	cmp	r0, r2
    2a44:	f000 8156 	beq.w	2cf4 <sysclk_disable_peripheral_clock+0x4e4>
    2a48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    2a4c:	f2c4 010a 	movt	r1, #16394	; 0x400a
    2a50:	4288      	cmp	r0, r1
    2a52:	f040 820a 	bne.w	2e6a <sysclk_disable_peripheral_clock+0x65a>
    2a56:	e15e      	b.n	2d16 <sysclk_disable_peripheral_clock+0x506>
    2a58:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
    2a5c:	f2c4 020a 	movt	r2, #16394	; 0x400a
    2a60:	4290      	cmp	r0, r2
    2a62:	f000 817a 	beq.w	2d5a <sysclk_disable_peripheral_clock+0x54a>
    2a66:	f04f 0300 	mov.w	r3, #0
    2a6a:	f2c4 030b 	movt	r3, #16395	; 0x400b
    2a6e:	4298      	cmp	r0, r3
    2a70:	f040 81fb 	bne.w	2e6a <sysclk_disable_peripheral_clock+0x65a>
    2a74:	e05b      	b.n	2b2e <sysclk_disable_peripheral_clock+0x31e>
    2a76:	f04f 0300 	mov.w	r3, #0
    2a7a:	f2c4 030f 	movt	r3, #16399	; 0x400f
    2a7e:	4298      	cmp	r0, r3
    2a80:	f000 81a4 	beq.w	2dcc <sysclk_disable_peripheral_clock+0x5bc>
    2a84:	f04f 0200 	mov.w	r2, #0
    2a88:	f2c4 020f 	movt	r2, #16399	; 0x400f
    2a8c:	4290      	cmp	r0, r2
    2a8e:	d823      	bhi.n	2ad8 <sysclk_disable_peripheral_clock+0x2c8>
    2a90:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2a94:	f2c4 010e 	movt	r1, #16398	; 0x400e
    2a98:	4288      	cmp	r0, r1
    2a9a:	f000 817a 	beq.w	2d92 <sysclk_disable_peripheral_clock+0x582>
    2a9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    2aa2:	f2c4 030e 	movt	r3, #16398	; 0x400e
    2aa6:	4298      	cmp	r0, r3
    2aa8:	d807      	bhi.n	2aba <sysclk_disable_peripheral_clock+0x2aa>
    2aaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2aae:	f2c4 020e 	movt	r2, #16398	; 0x400e
    2ab2:	4290      	cmp	r0, r2
    2ab4:	f040 81d9 	bne.w	2e6a <sysclk_disable_peripheral_clock+0x65a>
    2ab8:	e161      	b.n	2d7e <sysclk_disable_peripheral_clock+0x56e>
    2aba:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    2abe:	f2c4 010e 	movt	r1, #16398	; 0x400e
    2ac2:	4288      	cmp	r0, r1
    2ac4:	f000 816f 	beq.w	2da6 <sysclk_disable_peripheral_clock+0x596>
    2ac8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    2acc:	f2c4 020e 	movt	r2, #16398	; 0x400e
    2ad0:	4290      	cmp	r0, r2
    2ad2:	f040 81ca 	bne.w	2e6a <sysclk_disable_peripheral_clock+0x65a>
    2ad6:	e170      	b.n	2dba <sysclk_disable_peripheral_clock+0x5aa>
    2ad8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    2adc:	f2c4 010f 	movt	r1, #16399	; 0x400f
    2ae0:	4288      	cmp	r0, r1
    2ae2:	f000 8191 	beq.w	2e08 <sysclk_disable_peripheral_clock+0x5f8>
    2ae6:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    2aea:	f2c4 020f 	movt	r2, #16399	; 0x400f
    2aee:	4290      	cmp	r0, r2
    2af0:	d80e      	bhi.n	2b10 <sysclk_disable_peripheral_clock+0x300>
    2af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2af6:	f2c4 030f 	movt	r3, #16399	; 0x400f
    2afa:	4298      	cmp	r0, r3
    2afc:	f000 8170 	beq.w	2de0 <sysclk_disable_peripheral_clock+0x5d0>
    2b00:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2b04:	f2c4 010f 	movt	r1, #16399	; 0x400f
    2b08:	4288      	cmp	r0, r1
    2b0a:	f040 81ae 	bne.w	2e6a <sysclk_disable_peripheral_clock+0x65a>
    2b0e:	e171      	b.n	2df4 <sysclk_disable_peripheral_clock+0x5e4>
    2b10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    2b14:	f2c4 010f 	movt	r1, #16399	; 0x400f
    2b18:	4288      	cmp	r0, r1
    2b1a:	f000 817f 	beq.w	2e1c <sysclk_disable_peripheral_clock+0x60c>
    2b1e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
    2b22:	f2c4 020f 	movt	r2, #16399	; 0x400f
    2b26:	4290      	cmp	r0, r2
    2b28:	f040 819f 	bne.w	2e6a <sysclk_disable_peripheral_clock+0x65a>
    2b2c:	e180      	b.n	2e30 <sysclk_disable_peripheral_clock+0x620>
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
    2b2e:	f04f 0001 	mov.w	r0, #1
    2b32:	f04f 0109 	mov.w	r1, #9
    2b36:	f641 424d 	movw	r2, #7245	; 0x1c4d
    2b3a:	f2c0 0200 	movt	r2, #0
    2b3e:	4790      	blx	r2
    2b40:	e17e      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>
	case AESA_ADDR:
		sysclk_disable_hsb_module(SYSCLK_AESA_HSB);
		break;

	case IISC_ADDR:
		sysclk_disable_pba_module(SYSCLK_IISC);
    2b42:	f04f 0000 	mov.w	r0, #0
    2b46:	f641 5219 	movw	r2, #7449	; 0x1d19
    2b4a:	f2c0 0200 	movt	r2, #0
    2b4e:	4790      	blx	r2
		break;
    2b50:	e176      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>

	case SPI_ADDR:
		sysclk_disable_pba_module(SYSCLK_SPI);
    2b52:	f04f 0001 	mov.w	r0, #1
    2b56:	f641 5119 	movw	r1, #7449	; 0x1d19
    2b5a:	f2c0 0100 	movt	r1, #0
    2b5e:	4788      	blx	r1
		break;
    2b60:	e16e      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>

	case TC0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TC0);
    2b62:	f04f 0002 	mov.w	r0, #2
    2b66:	f641 5319 	movw	r3, #7449	; 0x1d19
    2b6a:	f2c0 0300 	movt	r3, #0
    2b6e:	4798      	blx	r3
		break;
    2b70:	e166      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>

	case TC1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TC1);
    2b72:	f04f 0003 	mov.w	r0, #3
    2b76:	f641 5219 	movw	r2, #7449	; 0x1d19
    2b7a:	f2c0 0200 	movt	r2, #0
    2b7e:	4790      	blx	r2
		break;
    2b80:	e15e      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>

	case TWIM0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM0);
    2b82:	f04f 0004 	mov.w	r0, #4
    2b86:	f641 5219 	movw	r2, #7449	; 0x1d19
    2b8a:	f2c0 0200 	movt	r2, #0
    2b8e:	4790      	blx	r2
		break;
    2b90:	e156      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>

	case TWIS0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIS0);
    2b92:	f04f 0005 	mov.w	r0, #5
    2b96:	f641 5219 	movw	r2, #7449	; 0x1d19
    2b9a:	f2c0 0200 	movt	r2, #0
    2b9e:	4790      	blx	r2
		break;
    2ba0:	e14e      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>

	case TWIM1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM1);
    2ba2:	f04f 0006 	mov.w	r0, #6
    2ba6:	f641 5119 	movw	r1, #7449	; 0x1d19
    2baa:	f2c0 0100 	movt	r1, #0
    2bae:	4788      	blx	r1
		break;
    2bb0:	e146      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>

	case TWIS1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIS1);
    2bb2:	f04f 0007 	mov.w	r0, #7
    2bb6:	f641 5319 	movw	r3, #7449	; 0x1d19
    2bba:	f2c0 0300 	movt	r3, #0
    2bbe:	4798      	blx	r3
		break;
    2bc0:	e13e      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>

	case USART0_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART0);
    2bc2:	f04f 0008 	mov.w	r0, #8
    2bc6:	f641 5219 	movw	r2, #7449	; 0x1d19
    2bca:	f2c0 0200 	movt	r2, #0
    2bce:	4790      	blx	r2
		break;
    2bd0:	e136      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>

	case USART1_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART1);
    2bd2:	f04f 0009 	mov.w	r0, #9
    2bd6:	f641 5219 	movw	r2, #7449	; 0x1d19
    2bda:	f2c0 0200 	movt	r2, #0
    2bde:	4790      	blx	r2
		break;
    2be0:	e12e      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>

	case USART2_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART2);
    2be2:	f04f 000a 	mov.w	r0, #10
    2be6:	f641 5219 	movw	r2, #7449	; 0x1d19
    2bea:	f2c0 0200 	movt	r2, #0
    2bee:	4790      	blx	r2
		break;
    2bf0:	e126      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>

	case USART3_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART3);
    2bf2:	f04f 000b 	mov.w	r0, #11
    2bf6:	f641 5119 	movw	r1, #7449	; 0x1d19
    2bfa:	f2c0 0100 	movt	r1, #0
    2bfe:	4788      	blx	r1
		break;
    2c00:	e11e      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>

	case ADCIFE_ADDR:
		sysclk_disable_pba_module(SYSCLK_ADCIFE);
    2c02:	f04f 000c 	mov.w	r0, #12
    2c06:	f641 5319 	movw	r3, #7449	; 0x1d19
    2c0a:	f2c0 0300 	movt	r3, #0
    2c0e:	4798      	blx	r3
		break;
    2c10:	e116      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>

	case DACC_ADDR:
		sysclk_disable_pba_module(SYSCLK_DACC);
    2c12:	f04f 000d 	mov.w	r0, #13
    2c16:	f641 5219 	movw	r2, #7449	; 0x1d19
    2c1a:	f2c0 0200 	movt	r2, #0
    2c1e:	4790      	blx	r2
		break;
    2c20:	e10e      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>

	case ACIFC_ADDR:
		sysclk_disable_pba_module(SYSCLK_ACIFC);
    2c22:	f04f 000e 	mov.w	r0, #14
    2c26:	f641 5119 	movw	r1, #7449	; 0x1d19
    2c2a:	f2c0 0100 	movt	r1, #0
    2c2e:	4788      	blx	r1
		break;
    2c30:	e106      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>

	case GLOC_ADDR:
		sysclk_disable_pba_module(SYSCLK_GLOC);
    2c32:	f04f 000f 	mov.w	r0, #15
    2c36:	f641 5119 	movw	r1, #7449	; 0x1d19
    2c3a:	f2c0 0100 	movt	r1, #0
    2c3e:	4788      	blx	r1
		break;
    2c40:	e0fe      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>

	case ABDACB_ADDR:
		sysclk_disable_pba_module(SYSCLK_ABDACB);
    2c42:	f04f 0010 	mov.w	r0, #16
    2c46:	f641 5319 	movw	r3, #7449	; 0x1d19
    2c4a:	f2c0 0300 	movt	r3, #0
    2c4e:	4798      	blx	r3
		break;
    2c50:	e0f6      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>

	case TRNG_ADDR:
		sysclk_disable_pba_module(SYSCLK_TRNG);
    2c52:	f04f 0011 	mov.w	r0, #17
    2c56:	f641 5319 	movw	r3, #7449	; 0x1d19
    2c5a:	f2c0 0300 	movt	r3, #0
    2c5e:	4798      	blx	r3
		break;
    2c60:	e0ee      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>

	case PARC_ADDR:
		sysclk_disable_pba_module(SYSCLK_PARC);
    2c62:	f04f 0012 	mov.w	r0, #18
    2c66:	f641 5219 	movw	r2, #7449	; 0x1d19
    2c6a:	f2c0 0200 	movt	r2, #0
    2c6e:	4790      	blx	r2
		break;
    2c70:	e0e6      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>

	case CATB_ADDR:
		sysclk_disable_pba_module(SYSCLK_CATB);
    2c72:	f04f 0013 	mov.w	r0, #19
    2c76:	f641 5119 	movw	r1, #7449	; 0x1d19
    2c7a:	f2c0 0100 	movt	r1, #0
    2c7e:	4788      	blx	r1
		break;
    2c80:	e0de      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>

	case TWIM2_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM2);
    2c82:	f04f 0015 	mov.w	r0, #21
    2c86:	f641 5119 	movw	r1, #7449	; 0x1d19
    2c8a:	f2c0 0100 	movt	r1, #0
    2c8e:	4788      	blx	r1
		break;
    2c90:	e0d6      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>

	case TWIM3_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM3);
    2c92:	f04f 0016 	mov.w	r0, #22
    2c96:	f641 5119 	movw	r1, #7449	; 0x1d19
    2c9a:	f2c0 0100 	movt	r1, #0
    2c9e:	4788      	blx	r1
		break;
    2ca0:	e0ce      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>

	case LCDCA_ADDR:
		sysclk_disable_pba_module(SYSCLK_LCDCA);
    2ca2:	f04f 0017 	mov.w	r0, #23
    2ca6:	f641 5219 	movw	r2, #7449	; 0x1d19
    2caa:	f2c0 0200 	movt	r2, #0
    2cae:	4790      	blx	r2
		break;
    2cb0:	e0c6      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>

	case HFLASHC_ADDR:
		sysclk_disable_pbb_module(SYSCLK_HFLASHC_REGS);
    2cb2:	f04f 0000 	mov.w	r0, #0
    2cb6:	f641 53d9 	movw	r3, #7641	; 0x1dd9
    2cba:	f2c0 0300 	movt	r3, #0
    2cbe:	4798      	blx	r3
		break;
    2cc0:	e0be      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>
    2cc2:	f04f 0001 	mov.w	r0, #1
    2cc6:	f04f 0102 	mov.w	r1, #2
    2cca:	f641 424d 	movw	r2, #7245	; 0x1c4d
    2cce:	f2c0 0200 	movt	r2, #0
    2cd2:	4790      	blx	r2

	case HCACHE_ADDR:
		sysclk_disable_hsb_module(SYSCLK_HRAMC1_DATA);
		sysclk_disable_pbb_module(SYSCLK_HRAMC1_REGS);
    2cd4:	f04f 0001 	mov.w	r0, #1
    2cd8:	f641 51d9 	movw	r1, #7641	; 0x1dd9
    2cdc:	f2c0 0100 	movt	r1, #0
    2ce0:	4788      	blx	r1
		break;
    2ce2:	e0ad      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>

	case HMATRIX_ADDR:
		sysclk_disable_pbb_module(SYSCLK_HMATRIX);
    2ce4:	f04f 0002 	mov.w	r0, #2
    2ce8:	f641 51d9 	movw	r1, #7641	; 0x1dd9
    2cec:	f2c0 0100 	movt	r1, #0
    2cf0:	4788      	blx	r1
		break;
    2cf2:	e0a5      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>
    2cf4:	f04f 0001 	mov.w	r0, #1
    2cf8:	f04f 0100 	mov.w	r1, #0
    2cfc:	f641 434d 	movw	r3, #7245	; 0x1c4d
    2d00:	f2c0 0300 	movt	r3, #0
    2d04:	4798      	blx	r3

	case PDCA_ADDR:
		sysclk_disable_hsb_module(SYSCLK_PDCA_HSB);
		sysclk_disable_pbb_module(SYSCLK_PDCA_PB);
    2d06:	f04f 0003 	mov.w	r0, #3
    2d0a:	f641 51d9 	movw	r1, #7641	; 0x1dd9
    2d0e:	f2c0 0100 	movt	r1, #0
    2d12:	4788      	blx	r1
		break;
    2d14:	e094      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>
    2d16:	f04f 0001 	mov.w	r0, #1
    2d1a:	f04f 0104 	mov.w	r1, #4
    2d1e:	f641 434d 	movw	r3, #7245	; 0x1c4d
    2d22:	f2c0 0300 	movt	r3, #0
    2d26:	4798      	blx	r3

	case CRCCU_ADDR:
		sysclk_disable_hsb_module(SYSCLK_CRCCU_DATA);
		sysclk_disable_pbb_module(SYSCLK_CRCCU_REGS);
    2d28:	f04f 0004 	mov.w	r0, #4
    2d2c:	f641 52d9 	movw	r2, #7641	; 0x1dd9
    2d30:	f2c0 0200 	movt	r2, #0
    2d34:	4790      	blx	r2
		break;
    2d36:	e083      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>
    2d38:	f04f 0001 	mov.w	r0, #1
    2d3c:	f04f 0103 	mov.w	r1, #3
    2d40:	f641 434d 	movw	r3, #7245	; 0x1c4d
    2d44:	f2c0 0300 	movt	r3, #0
    2d48:	4798      	blx	r3

	case USBC_ADDR:
		sysclk_disable_hsb_module(SYSCLK_USBC_DATA);
		sysclk_disable_pbb_module(SYSCLK_USBC_REGS);
    2d4a:	f04f 0005 	mov.w	r0, #5
    2d4e:	f641 52d9 	movw	r2, #7641	; 0x1dd9
    2d52:	f2c0 0200 	movt	r2, #0
    2d56:	4790      	blx	r2
		break;
    2d58:	e072      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>

	case PEVC_ADDR:
		sysclk_disable_pbb_module(SYSCLK_PEVC);
    2d5a:	f04f 0006 	mov.w	r0, #6
    2d5e:	f641 51d9 	movw	r1, #7641	; 0x1dd9
    2d62:	f2c0 0100 	movt	r1, #0
    2d66:	4788      	blx	r1
		break;
    2d68:	e06a      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>
 * \brief Disable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_disable_pbc_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_PBC, module_index);
    2d6a:	f04f 0004 	mov.w	r0, #4
    2d6e:	f04f 0100 	mov.w	r1, #0
    2d72:	f641 434d 	movw	r3, #7245	; 0x1c4d
    2d76:	f2c0 0300 	movt	r3, #0
    2d7a:	4798      	blx	r3
    2d7c:	e060      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>
    2d7e:	f04f 0004 	mov.w	r0, #4
    2d82:	f04f 0101 	mov.w	r1, #1
    2d86:	f641 434d 	movw	r3, #7245	; 0x1c4d
    2d8a:	f2c0 0300 	movt	r3, #0
    2d8e:	4798      	blx	r3
    2d90:	e056      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>
    2d92:	f04f 0004 	mov.w	r0, #4
    2d96:	f04f 0102 	mov.w	r1, #2
    2d9a:	f641 434d 	movw	r3, #7245	; 0x1c4d
    2d9e:	f2c0 0300 	movt	r3, #0
    2da2:	4798      	blx	r3
    2da4:	e04c      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>
    2da6:	f04f 0004 	mov.w	r0, #4
    2daa:	f04f 0103 	mov.w	r1, #3
    2dae:	f641 424d 	movw	r2, #7245	; 0x1c4d
    2db2:	f2c0 0200 	movt	r2, #0
    2db6:	4790      	blx	r2
    2db8:	e042      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>
    2dba:	f04f 0004 	mov.w	r0, #4
    2dbe:	4601      	mov	r1, r0
    2dc0:	f641 434d 	movw	r3, #7245	; 0x1c4d
    2dc4:	f2c0 0300 	movt	r3, #0
    2dc8:	4798      	blx	r3
    2dca:	e039      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>
 * \brief Disable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_disable_pbd_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_PBD, module_index);
    2dcc:	f04f 0005 	mov.w	r0, #5
    2dd0:	f04f 0100 	mov.w	r1, #0
    2dd4:	f641 424d 	movw	r2, #7245	; 0x1c4d
    2dd8:	f2c0 0200 	movt	r2, #0
    2ddc:	4790      	blx	r2
    2dde:	e02f      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>
    2de0:	f04f 0005 	mov.w	r0, #5
    2de4:	f04f 0101 	mov.w	r1, #1
    2de8:	f641 434d 	movw	r3, #7245	; 0x1c4d
    2dec:	f2c0 0300 	movt	r3, #0
    2df0:	4798      	blx	r3
    2df2:	e025      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>
    2df4:	f04f 0005 	mov.w	r0, #5
    2df8:	f04f 0102 	mov.w	r1, #2
    2dfc:	f641 424d 	movw	r2, #7245	; 0x1c4d
    2e00:	f2c0 0200 	movt	r2, #0
    2e04:	4790      	blx	r2
    2e06:	e01b      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>
    2e08:	f04f 0005 	mov.w	r0, #5
    2e0c:	f04f 0103 	mov.w	r1, #3
    2e10:	f641 434d 	movw	r3, #7245	; 0x1c4d
    2e14:	f2c0 0300 	movt	r3, #0
    2e18:	4798      	blx	r3
    2e1a:	e011      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>
    2e1c:	f04f 0005 	mov.w	r0, #5
    2e20:	f04f 0104 	mov.w	r1, #4
    2e24:	f641 424d 	movw	r2, #7245	; 0x1c4d
    2e28:	f2c0 0200 	movt	r2, #0
    2e2c:	4790      	blx	r2
    2e2e:	e007      	b.n	2e40 <sysclk_disable_peripheral_clock+0x630>
    2e30:	f04f 0005 	mov.w	r0, #5
    2e34:	4601      	mov	r1, r0
    2e36:	f641 434d 	movw	r3, #7245	; 0x1c4d
    2e3a:	f2c0 0300 	movt	r3, #0
    2e3e:	4798      	blx	r3
	}

	// Disable PBA divided clock if possible.
#define PBADIV_CLKSRC_MASK (SYSCLK_TC0 | SYSCLK_TC1 \
		| SYSCLK_USART0 | SYSCLK_USART1 | SYSCLK_USART2 | SYSCLK_USART3)
	if ((PM->PM_PBAMASK & PBADIV_CLKSRC_MASK) == 0) {
    2e40:	f04f 0000 	mov.w	r0, #0
    2e44:	f2c4 000e 	movt	r0, #16398	; 0x400e
    2e48:	6a82      	ldr	r2, [r0, #40]	; 0x28
    2e4a:	f012 0f0b 	tst.w	r2, #11
    2e4e:	d10c      	bne.n	2e6a <sysclk_disable_peripheral_clock+0x65a>
 */
static inline void sysclk_disable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    2e50:	f04f 0300 	mov.w	r3, #0
    2e54:	f2c4 030e 	movt	r3, #16398	; 0x400e
    2e58:	6c19      	ldr	r1, [r3, #64]	; 0x40
	temp_mask &= ~mask;
    2e5a:	f021 007f 	bic.w	r0, r1, #127	; 0x7f
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    2e5e:	f04f 0240 	mov.w	r2, #64	; 0x40
    2e62:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    2e66:	659a      	str	r2, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    2e68:	6418      	str	r0, [r3, #64]	; 0x40
    2e6a:	bd08      	pop	{r3, pc}

00002e6c <sysclk_set_source>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2e6c:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2e70:	b672      	cpsid	i
    2e72:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    2e76:	f240 0344 	movw	r3, #68	; 0x44
    2e7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e7e:	f04f 0100 	mov.w	r1, #0
    2e82:	7019      	strb	r1, [r3, #0]
{
	irqflags_t flags;
	Assert(src <= SYSCLK_SRC_RC1M);

	flags = cpu_irq_save();
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    2e84:	460b      	mov	r3, r1
    2e86:	f2c4 030e 	movt	r3, #16398	; 0x400e
    2e8a:	f04f 412a 	mov.w	r1, #2852126720	; 0xaa000000
    2e8e:	6599      	str	r1, [r3, #88]	; 0x58
		| PM_UNLOCK_ADDR((uint32_t)&PM->PM_MCCTRL - (uint32_t)PM);
	PM->PM_MCCTRL = src;
    2e90:	6018      	str	r0, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2e92:	b94a      	cbnz	r2, 2ea8 <sysclk_set_source+0x3c>
		cpu_irq_enable();
    2e94:	f240 0044 	movw	r0, #68	; 0x44
    2e98:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2e9c:	f04f 0201 	mov.w	r2, #1
    2ea0:	7002      	strb	r2, [r0, #0]
    2ea2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    2ea6:	b662      	cpsie	i
    2ea8:	4770      	bx	lr
    2eaa:	bf00      	nop

00002eac <sysclk_init>:
   genclk_disable(7);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
    2eac:	b538      	push	{r3, r4, r5, lr}
	uint32_t ps_value = 0;
	bool is_fwu_enabled = false;

#if CONFIG_HCACHE_ENABLE == 1
	/* Enable HCACHE */
	sysclk_enable_peripheral_clock(HCACHE);
    2eae:	f44f 6480 	mov.w	r4, #1024	; 0x400
    2eb2:	f2c4 040a 	movt	r4, #16394	; 0x400a
    2eb6:	4620      	mov	r0, r4
    2eb8:	f242 1331 	movw	r3, #8497	; 0x2131
    2ebc:	f2c0 0300 	movt	r3, #0
    2ec0:	4798      	blx	r3
	HCACHE->HCACHE_CTRL = HCACHE_CTRL_CEN_YES;
    2ec2:	f04f 0001 	mov.w	r0, #1
    2ec6:	60a0      	str	r0, [r4, #8]
	while (!(HCACHE->HCACHE_SR & HCACHE_SR_CSTS_EN));
    2ec8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2ecc:	f2c4 020a 	movt	r2, #16394	; 0x400a
    2ed0:	68d1      	ldr	r1, [r2, #12]
    2ed2:	f011 0f01 	tst.w	r1, #1
    2ed6:	d0fb      	beq.n	2ed0 <sysclk_init+0x24>
		sysclk_set_source(SYSCLK_SRC_OSC0);
	}
#endif
#ifdef CONFIG_DFLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_DFLL) {
		dfll_enable_config_defaults(0);
    2ed8:	f04f 0000 	mov.w	r0, #0
    2edc:	f641 25d1 	movw	r5, #6865	; 0x1ad1
    2ee0:	f2c0 0500 	movt	r5, #0
    2ee4:	47a8      	blx	r5
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz(), ps_value, is_fwu_enabled);
    2ee6:	f04f 7037 	mov.w	r0, #47972352	; 0x2dc0000
    2eea:	f04f 0100 	mov.w	r1, #0
    2eee:	460a      	mov	r2, r1
    2ef0:	f243 2471 	movw	r4, #12913	; 0x3271
    2ef4:	f2c0 0400 	movt	r4, #0
    2ef8:	47a0      	blx	r4
		sysclk_set_source(SYSCLK_SRC_DFLL);
    2efa:	f04f 0003 	mov.w	r0, #3
    2efe:	f642 636d 	movw	r3, #11885	; 0x2e6d
    2f02:	f2c0 0300 	movt	r3, #0
    2f06:	4798      	blx	r3
	if (!no_halt) {
		bpm_power_scaling_cpu(bpm, ps_value);
		return true;
	}

	return bpm_power_scaling_cpu_failsafe(bpm, ps_value, 240000);
    2f08:	f04f 0000 	mov.w	r0, #0
    2f0c:	f2c4 000f 	movt	r0, #16399	; 0x400f
    2f10:	f04f 0100 	mov.w	r1, #0
    2f14:	f64a 1280 	movw	r2, #43392	; 0xa980
    2f18:	f2c0 0203 	movt	r2, #3
    2f1c:	f243 0549 	movw	r5, #12361	; 0x3049
    2f20:	f2c0 0500 	movt	r5, #0
    2f24:	47a8      	blx	r5
		Assert(false);
	}

	/* Automatically switch to low power mode */
	bpm_configure_power_scaling(BPM, ps_value, BPM_PSCM_CPU_NOT_HALT);
	while ((bpm_get_status(BPM) & BPM_SR_PSOK) == 0);
    2f26:	f04f 0400 	mov.w	r4, #0
    2f2a:	f2c4 040f 	movt	r4, #16399	; 0x400f
    2f2e:	f243 05c1 	movw	r5, #12481	; 0x30c1
    2f32:	f2c0 0500 	movt	r5, #0
    2f36:	4620      	mov	r0, r4
    2f38:	47a8      	blx	r5
    2f3a:	f010 0f01 	tst.w	r0, #1
    2f3e:	d0fa      	beq.n	2f36 <sysclk_init+0x8a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2f40:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2f44:	b672      	cpsid	i
    2f46:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    2f4a:	f240 0244 	movw	r2, #68	; 0x44
    2f4e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f52:	f04f 0100 	mov.w	r1, #0
    2f56:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2f58:	b928      	cbnz	r0, 2f66 <sysclk_init+0xba>
		cpu_irq_enable();
    2f5a:	f04f 0001 	mov.w	r0, #1
    2f5e:	7010      	strb	r0, [r2, #0]
    2f60:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    2f64:	b662      	cpsie	i
    2f66:	bd38      	pop	{r3, r4, r5, pc}

00002f68 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_disable_pin(pin);\
	} while (0)

void board_init(void)
{
    2f68:	b510      	push	{r4, lr}
    2f6a:	b086      	sub	sp, #24
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	struct wdt_dev_inst wdt_inst;
	struct wdt_config   wdt_cfg;

	wdt_get_config_defaults(&wdt_cfg);
    2f6c:	4668      	mov	r0, sp
    2f6e:	f243 339d 	movw	r3, #13213	; 0x339d
    2f72:	f2c0 0300 	movt	r3, #0
    2f76:	4798      	blx	r3
	wdt_init(&wdt_inst, WDT, &wdt_cfg);
    2f78:	a804      	add	r0, sp, #16
    2f7a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    2f7e:	f2c4 010f 	movt	r1, #16399	; 0x400f
    2f82:	466a      	mov	r2, sp
    2f84:	f243 34b9 	movw	r4, #13241	; 0x33b9
    2f88:	f2c0 0400 	movt	r4, #0
    2f8c:	47a0      	blx	r4
	wdt_disable(&wdt_inst);
    2f8e:	a804      	add	r0, sp, #16
    2f90:	f243 4185 	movw	r1, #13445	; 0x3485
    2f94:	f2c0 0100 	movt	r1, #0
    2f98:	4788      	blx	r1
	return 1U << (pin & 0x1F);
}

__always_inline static void arch_ioport_init(void)
{
	sysclk_enable_peripheral_clock(GPIO);
    2f9a:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    2f9e:	f2c4 040e 	movt	r4, #16398	; 0x400e
    2fa2:	4620      	mov	r0, r4
    2fa4:	f242 1231 	movw	r2, #8497	; 0x2131
    2fa8:	f2c0 0200 	movt	r2, #0
    2fac:	4790      	blx	r2

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    2fae:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
    2fb2:	f2c4 000e 	movt	r0, #16398	; 0x400e
    2fb6:	f04f 0380 	mov.w	r3, #128	; 0x80
    2fba:	6443      	str	r3, [r0, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    2fbc:	f8c0 3168 	str.w	r3, [r0, #360]	; 0x168

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    2fc0:	6543      	str	r3, [r0, #84]	; 0x54
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    2fc2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    2fc6:	6482      	str	r2, [r0, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    2fc8:	f8c0 2164 	str.w	r2, [r0, #356]	; 0x164
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
    2fcc:	6742      	str	r2, [r0, #116]	; 0x74

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    2fce:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    2fd2:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    2fd6:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    2fda:	6182      	str	r2, [r0, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    2fdc:	6282      	str	r2, [r0, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    2fde:	6382      	str	r2, [r0, #56]	; 0x38
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    2fe0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    2fe4:	6781      	str	r1, [r0, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    2fe6:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    2fea:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    2fee:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    2ff2:	6181      	str	r1, [r0, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    2ff4:	6281      	str	r1, [r0, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    2ff6:	6381      	str	r1, [r0, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    2ff8:	6081      	str	r1, [r0, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    2ffa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    2ffe:	6783      	str	r3, [r0, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    3000:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    3004:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    3008:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    300c:	6183      	str	r3, [r0, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    300e:	6283      	str	r3, [r0, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    3010:	6383      	str	r3, [r0, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    3012:	6083      	str	r3, [r0, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    3014:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    3018:	67a0      	str	r0, [r4, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    301a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    301e:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    3022:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
    3026:	6160      	str	r0, [r4, #20]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    3028:	62a0      	str	r0, [r4, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    302a:	63a0      	str	r0, [r4, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    302c:	60a0      	str	r0, [r4, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    302e:	67a2      	str	r2, [r4, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    3030:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    3034:	f8c4 20c8 	str.w	r2, [r4, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    3038:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
    303c:	6162      	str	r2, [r4, #20]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    303e:	62a2      	str	r2, [r4, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    3040:	63a2      	str	r2, [r4, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    3042:	60a2      	str	r2, [r4, #8]
	ioport_set_pin_peripheral_mode(PIN_PA15D_PARC_PCDATA6, MUX_PA15D_PARC_PCDATA6);
	ioport_set_pin_peripheral_mode(PIN_PA16D_PARC_PCDATA7, MUX_PA16D_PARC_PCDATA7);
	ioport_set_pin_peripheral_mode(PIN_PA18D_PARC_PCEN1, MUX_PA18D_PARC_PCEN1);
	ioport_set_pin_peripheral_mode(PIN_PA19D_PARC_PCEN2, MUX_PA19D_PARC_PCEN2);
#endif
}
    3044:	b006      	add	sp, #24
    3046:	bd10      	pop	{r4, pc}

00003048 <bpm_power_scaling_cpu_failsafe>:
}


bool bpm_power_scaling_cpu_failsafe(Bpm *bpm, uint32_t ps_value,
	uint32_t timeout)
{
    3048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t pmcon = 0;

	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;
    304c:	69c4      	ldr	r4, [r0, #28]

	/* Clear last PS Value & Write new one */
	pmcon &= ~BPM_PMCON_PS_Msk;
    304e:	f024 0503 	bic.w	r5, r4, #3
	pmcon |= BPM_PMCON_PS(ps_value);
    3052:	f045 030c 	orr.w	r3, r5, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3056:	f3ef 8610 	mrs	r6, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    305a:	b672      	cpsid	i
    305c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    3060:	f04f 0500 	mov.w	r5, #0
    3064:	f240 0744 	movw	r7, #68	; 0x44
    3068:	f2c2 0700 	movt	r7, #8192	; 0x2000
    306c:	703d      	strb	r5, [r7, #0]
	uint32_t ctrl, load, val;
	/* Avoid interrupt while flash halt */
	flags = cpu_irq_save();

	/* Save SysTick */
	val = SysTick->VAL;
    306e:	f24e 0410 	movw	r4, #57360	; 0xe010
    3072:	f2ce 0400 	movt	r4, #57344	; 0xe000
    3076:	f8d4 8008 	ldr.w	r8, [r4, #8]
	ctrl = SysTick->CTRL;
    307a:	6827      	ldr	r7, [r4, #0]
	load = SysTick->LOAD;
    307c:	f8d4 9004 	ldr.w	r9, [r4, #4]
	/* Setup SysTick & start counting */
	SysTick->LOAD = timeout;
    3080:	6062      	str	r2, [r4, #4]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    3082:	f04f 0205 	mov.w	r2, #5
    3086:	6022      	str	r2, [r4, #0]
	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;

	/* Clear last PS Value & Write new one */
	pmcon &= ~BPM_PMCON_PS_Msk;
	pmcon |= BPM_PMCON_PS(ps_value);
    3088:	f001 0103 	and.w	r1, r1, #3
	load = SysTick->LOAD;
	/* Setup SysTick & start counting */
	SysTick->LOAD = timeout;
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;

	b_psok = bpm_ps_no_halt_exec(bpm, pmcon);
    308c:	4319      	orrs	r1, r3
    308e:	f240 030d 	movw	r3, #13
    3092:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3096:	4798      	blx	r3

	/* Restore SysTick */
	SysTick->CTRL = 0;
    3098:	6025      	str	r5, [r4, #0]
	SysTick->LOAD = load;
    309a:	f8c4 9004 	str.w	r9, [r4, #4]
	SysTick->VAL = val;
    309e:	f8c4 8008 	str.w	r8, [r4, #8]
	SysTick->CTRL = ctrl;
    30a2:	6027      	str	r7, [r4, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    30a4:	b94e      	cbnz	r6, 30ba <bpm_power_scaling_cpu_failsafe+0x72>
		cpu_irq_enable();
    30a6:	f240 0144 	movw	r1, #68	; 0x44
    30aa:	f2c2 0100 	movt	r1, #8192	; 0x2000
    30ae:	f04f 0201 	mov.w	r2, #1
    30b2:	700a      	strb	r2, [r1, #0]
    30b4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    30b8:	b662      	cpsie	i

	cpu_irq_restore(flags);
	return b_psok;
}
    30ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    30be:	bf00      	nop

000030c0 <bpm_get_status>:
	bpm->BPM_ICR = sources;
}

uint32_t bpm_get_status(Bpm *bpm)
{
	return bpm->BPM_SR;
    30c0:	6940      	ldr	r0, [r0, #20]
}
    30c2:	4770      	bx	lr

000030c4 <bpm_sleep>:
{
	return bpm->BPM_VERSION;
}

void bpm_sleep(Bpm *bpm, uint32_t sleep_mode)
{
    30c4:	b410      	push	{r4}
	uint32_t pmcon;

	/* Read PMCON register */
	pmcon = bpm->BPM_PMCON;
    30c6:	69c3      	ldr	r3, [r0, #28]
	pmcon &= ~BPM_PMCON_BKUP;
	pmcon &= ~BPM_PMCON_RET;
	pmcon &= ~BPM_PMCON_SLEEP_Msk;
    30c8:	f423 544c 	bic.w	r4, r3, #13056	; 0x3300

	/* Unlock PMCON register */
	BPM_UNLOCK(PMCON);
    30cc:	f04f 0300 	mov.w	r3, #0
    30d0:	f2c4 030f 	movt	r3, #16399	; 0x400f
    30d4:	f04f 021c 	mov.w	r2, #28
    30d8:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    30dc:	619a      	str	r2, [r3, #24]

	if (sleep_mode == BPM_SM_SLEEP_0) {
    30de:	2901      	cmp	r1, #1
    30e0:	d109      	bne.n	30f6 <bpm_sleep+0x32>
		pmcon |= BPM_PMCON_SLEEP(0);
		bpm->BPM_PMCON = pmcon;
    30e2:	61c4      	str	r4, [r0, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    30e4:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    30e8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    30ec:	6918      	ldr	r0, [r3, #16]
    30ee:	f020 0104 	bic.w	r1, r0, #4
    30f2:	6119      	str	r1, [r3, #16]
    30f4:	e050      	b.n	3198 <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_SLEEP_1) {
    30f6:	2902      	cmp	r1, #2
    30f8:	d10b      	bne.n	3112 <bpm_sleep+0x4e>
		pmcon |= BPM_PMCON_SLEEP(1);
    30fa:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
		bpm->BPM_PMCON = pmcon;
    30fe:	61c4      	str	r4, [r0, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    3100:	f44f 406d 	mov.w	r0, #60672	; 0xed00
    3104:	f2ce 0000 	movt	r0, #57344	; 0xe000
    3108:	6901      	ldr	r1, [r0, #16]
    310a:	f021 0204 	bic.w	r2, r1, #4
    310e:	6102      	str	r2, [r0, #16]
    3110:	e042      	b.n	3198 <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_SLEEP_2) {
    3112:	2903      	cmp	r1, #3
    3114:	d10b      	bne.n	312e <bpm_sleep+0x6a>
		pmcon |= BPM_PMCON_SLEEP(2);
    3116:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
		bpm->BPM_PMCON = pmcon;
    311a:	61c4      	str	r4, [r0, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    311c:	f44f 416d 	mov.w	r1, #60672	; 0xed00
    3120:	f2ce 0100 	movt	r1, #57344	; 0xe000
    3124:	690a      	ldr	r2, [r1, #16]
    3126:	f022 0304 	bic.w	r3, r2, #4
    312a:	610b      	str	r3, [r1, #16]
    312c:	e034      	b.n	3198 <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_SLEEP_3) {
    312e:	2904      	cmp	r1, #4
    3130:	d10b      	bne.n	314a <bpm_sleep+0x86>
		pmcon |= BPM_PMCON_SLEEP(3);
    3132:	f444 5440 	orr.w	r4, r4, #12288	; 0x3000
		bpm->BPM_PMCON = pmcon;
    3136:	61c4      	str	r4, [r0, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    3138:	f44f 416d 	mov.w	r1, #60672	; 0xed00
    313c:	f2ce 0100 	movt	r1, #57344	; 0xe000
    3140:	690b      	ldr	r3, [r1, #16]
    3142:	f023 0004 	bic.w	r0, r3, #4
    3146:	6108      	str	r0, [r1, #16]
    3148:	e026      	b.n	3198 <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_WAIT) {
    314a:	2905      	cmp	r1, #5
    314c:	d109      	bne.n	3162 <bpm_sleep+0x9e>
		bpm->BPM_PMCON = pmcon;
    314e:	61c4      	str	r4, [r0, #28]
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    3150:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    3154:	f2ce 0300 	movt	r3, #57344	; 0xe000
    3158:	6918      	ldr	r0, [r3, #16]
    315a:	f040 0204 	orr.w	r2, r0, #4
    315e:	611a      	str	r2, [r3, #16]
    3160:	e01a      	b.n	3198 <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_RET) {
    3162:	2906      	cmp	r1, #6
    3164:	d10b      	bne.n	317e <bpm_sleep+0xba>
		pmcon |= BPM_PMCON_RET;
    3166:	f444 7400 	orr.w	r4, r4, #512	; 0x200
		bpm->BPM_PMCON = pmcon;
    316a:	61c4      	str	r4, [r0, #28]
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    316c:	f44f 406d 	mov.w	r0, #60672	; 0xed00
    3170:	f2ce 0000 	movt	r0, #57344	; 0xe000
    3174:	6902      	ldr	r2, [r0, #16]
    3176:	f042 0104 	orr.w	r1, r2, #4
    317a:	6101      	str	r1, [r0, #16]
    317c:	e00c      	b.n	3198 <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_BACKUP) { 
    317e:	2907      	cmp	r1, #7
    3180:	d11e      	bne.n	31c0 <bpm_sleep+0xfc>
		pmcon |= BPM_PMCON_BKUP;
    3182:	f444 7480 	orr.w	r4, r4, #256	; 0x100
		bpm->BPM_PMCON = pmcon;
    3186:	61c4      	str	r4, [r0, #28]
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    3188:	f44f 406d 	mov.w	r0, #60672	; 0xed00
    318c:	f2ce 0000 	movt	r0, #57344	; 0xe000
    3190:	6901      	ldr	r1, [r0, #16]
    3192:	f041 0304 	orr.w	r3, r1, #4
    3196:	6103      	str	r3, [r0, #16]
	} else {
		return;
	}

	/* Wait until vreg is ok. */
	while(!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_VREGOK));
    3198:	f44f 6280 	mov.w	r2, #1024	; 0x400
    319c:	f2c4 020f 	movt	r2, #16399	; 0x400f
    31a0:	6953      	ldr	r3, [r2, #20]
    31a2:	f413 6f80 	tst.w	r3, #1024	; 0x400
    31a6:	d0fb      	beq.n	31a0 <bpm_sleep+0xdc>
	asm volatile ("wfi");
    31a8:	bf30      	wfi
	/* ensure sleep request propagation to flash. */
	asm volatile ("nop");
    31aa:	bf00      	nop
	 * masked since we are in the critical section thanks to the previous
	 * set_pri_mask(1). Thus, we need to leave the critical section.
	 * Please note that we should probably use something like
	 * cpu_leave_critical(), using set_pri_mask(0)
	 */
	cpu_irq_enable();
    31ac:	f240 0044 	movw	r0, #68	; 0x44
    31b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    31b4:	f04f 0101 	mov.w	r1, #1
    31b8:	7001      	strb	r1, [r0, #0]
    31ba:	f3bf 8f5f 	dmb	sy
    31be:	b662      	cpsie	i
}
    31c0:	bc10      	pop	{r4}
    31c2:	4770      	bx	lr

000031c4 <flashcalw_set_wait_state>:
 * \param wait_state The number of wait states of flash read accesses: \c 0 to
 *                   \c 1.
 */
void flashcalw_set_wait_state(uint32_t wait_state)
{
	HFLASHC->FLASHCALW_FCR = (HFLASHC->FLASHCALW_FCR & ~FLASHCALW_FCR_FWS)
    31c4:	f04f 0300 	mov.w	r3, #0
    31c8:	f2c4 030a 	movt	r3, #16394	; 0x400a
    31cc:	6819      	ldr	r1, [r3, #0]
    31ce:	f021 0240 	bic.w	r2, r1, #64	; 0x40
			| (wait_state ? FLASHCALW_FCR_FWS_1 :
    31d2:	2800      	cmp	r0, #0
    31d4:	bf14      	ite	ne
    31d6:	2040      	movne	r0, #64	; 0x40
    31d8:	2000      	moveq	r0, #0
    31da:	4310      	orrs	r0, r2
 * \param wait_state The number of wait states of flash read accesses: \c 0 to
 *                   \c 1.
 */
void flashcalw_set_wait_state(uint32_t wait_state)
{
	HFLASHC->FLASHCALW_FCR = (HFLASHC->FLASHCALW_FCR & ~FLASHCALW_FCR_FWS)
    31dc:	f04f 0300 	mov.w	r3, #0
    31e0:	f2c4 030a 	movt	r3, #16394	; 0x400a
    31e4:	6018      	str	r0, [r3, #0]
    31e6:	4770      	bx	lr

000031e8 <flashcalw_is_ready>:
 *
 * \return Whether the FLASHCALW is ready to run a new command.
 */
bool flashcalw_is_ready(void)
{
	return ((HFLASHC->FLASHCALW_FSR & FLASHCALW_FSR_FRDY) != 0);
    31e8:	f04f 0300 	mov.w	r3, #0
    31ec:	f2c4 030a 	movt	r3, #16394	; 0x400a
    31f0:	6898      	ldr	r0, [r3, #8]
}
    31f2:	f000 0001 	and.w	r0, r0, #1
    31f6:	4770      	bx	lr

000031f8 <flashcalw_default_wait_until_ready>:
/*! \brief Waits actively until the FLASHCALW is ready to run a new command.
 *
 * This is the default function assigned to \ref flashcalw_wait_until_ready.
 */
void flashcalw_default_wait_until_ready(void)
{
    31f8:	b510      	push	{r4, lr}
	while (!flashcalw_is_ready()) {
    31fa:	f243 14e9 	movw	r4, #12777	; 0x31e9
    31fe:	f2c0 0400 	movt	r4, #0
    3202:	47a0      	blx	r4
    3204:	2800      	cmp	r0, #0
    3206:	d0fc      	beq.n	3202 <flashcalw_default_wait_until_ready+0xa>
	}
}
    3208:	bd10      	pop	{r4, pc}
    320a:	bf00      	nop

0000320c <flashcalw_issue_command>:
 *
 * \note The FLASHCALW error status returned by \ref flashcalw_is_lock_error and
 *       \ref flashcalw_is_programming_error is updated.
 */
void flashcalw_issue_command(uint32_t command, int page_number)
{
    320c:	b538      	push	{r3, r4, r5, lr}
    320e:	4605      	mov	r5, r0
    3210:	460c      	mov	r4, r1
	uint32_t tempo;

	flashcalw_wait_until_ready();
    3212:	f240 0348 	movw	r3, #72	; 0x48
    3216:	f2c2 0300 	movt	r3, #8192	; 0x2000
    321a:	6818      	ldr	r0, [r3, #0]
    321c:	4780      	blx	r0
	tempo = HFLASHC->FLASHCALW_FCMD;
    321e:	f04f 0100 	mov.w	r1, #0
    3222:	f2c4 010a 	movt	r1, #16394	; 0x400a
    3226:	684a      	ldr	r2, [r1, #4]
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
	if (page_number >= 0) {
    3228:	2c00      	cmp	r4, #0
    322a:	db07      	blt.n	323c <flashcalw_issue_command+0x30>
		tempo = (FLASHCALW_FCMD_KEY_KEY
				| FLASHCALW_FCMD_PAGEN(page_number) | command);
    322c:	f045 4525 	orr.w	r5, r5, #2768240640	; 0xa5000000
    3230:	ea4f 2404 	mov.w	r4, r4, lsl #8
    3234:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	flashcalw_wait_until_ready();
	tempo = HFLASHC->FLASHCALW_FCMD;
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
	if (page_number >= 0) {
		tempo = (FLASHCALW_FCMD_KEY_KEY
    3238:	4325      	orrs	r5, r4
    323a:	e004      	b.n	3246 <flashcalw_issue_command+0x3a>
	uint32_t tempo;

	flashcalw_wait_until_ready();
	tempo = HFLASHC->FLASHCALW_FCMD;
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
    323c:	f022 033f 	bic.w	r3, r2, #63	; 0x3f
	if (page_number >= 0) {
		tempo = (FLASHCALW_FCMD_KEY_KEY
				| FLASHCALW_FCMD_PAGEN(page_number) | command);
	} else {
		tempo |= (FLASHCALW_FCMD_KEY_KEY | command);
    3240:	f043 4025 	orr.w	r0, r3, #2768240640	; 0xa5000000
    3244:	4305      	orrs	r5, r0
	}

	HFLASHC->FLASHCALW_FCMD = tempo;
    3246:	f04f 0100 	mov.w	r1, #0
    324a:	f2c4 010a 	movt	r1, #16394	; 0x400a
    324e:	604d      	str	r5, [r1, #4]
 *          the driver's API which instead presents \ref flashcalw_is_lock_error
 *          and \ref flashcalw_is_programming_error.
 */
static uint32_t flashcalw_get_error_status(void)
{
	return HFLASHC->FLASHCALW_FSR &
    3250:	688a      	ldr	r2, [r1, #8]
    3252:	f002 000c 	and.w	r0, r2, #12
	} else {
		tempo |= (FLASHCALW_FCMD_KEY_KEY | command);
	}

	HFLASHC->FLASHCALW_FCMD = tempo;
	flashcalw_error_status = flashcalw_get_error_status();
    3256:	f640 13d4 	movw	r3, #2516	; 0x9d4
    325a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    325e:	6018      	str	r0, [r3, #0]
	flashcalw_wait_until_ready();
    3260:	f240 0148 	movw	r1, #72	; 0x48
    3264:	f2c2 0100 	movt	r1, #8192	; 0x2000
    3268:	680a      	ldr	r2, [r1, #0]
    326a:	4790      	blx	r2
    326c:	bd38      	pop	{r3, r4, r5, pc}
    326e:	bf00      	nop

00003270 <flashcalw_set_flash_waitstate_and_readmode>:
 * \param ps_value Power Scaling mode value (0, 1)
 * \param is_fwu_enabled (boolean), Is fast wakeup mode enabled or not
 */
void flashcalw_set_flash_waitstate_and_readmode(uint32_t cpu_f_hz,
		uint32_t ps_value, bool is_fwu_enabled)
{
    3270:	b508      	push	{r3, lr}
	}

	/* Enable the high-speed read mode. */
	flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSEN, -1);
#else
	if (ps_value == 0) {
    3272:	2900      	cmp	r1, #0
    3274:	d156      	bne.n	3324 <flashcalw_set_flash_waitstate_and_readmode+0xb4>
		if (cpu_f_hz > FLASH_FREQ_PS0_FWS_0_MAX_FREQ) {
    3276:	f64a 0380 	movw	r3, #43136	; 0xa880
    327a:	f2c0 1312 	movt	r3, #274	; 0x112
    327e:	4298      	cmp	r0, r3
    3280:	d927      	bls.n	32d2 <flashcalw_set_flash_waitstate_and_readmode+0x62>
			// > 18MHz
			if (cpu_f_hz <= FLASH_FREQ_PS0_FWS_1_MAX_FREQ) {
    3282:	f44f 43a2 	mov.w	r3, #20736	; 0x5100
    3286:	f2c0 2325 	movt	r3, #549	; 0x225
    328a:	4298      	cmp	r0, r3
    328c:	d810      	bhi.n	32b0 <flashcalw_set_flash_waitstate_and_readmode+0x40>
				// <= 36MHz
				/* Set a wait-state, disable the high-speed read
				 * mode. */
				flashcalw_set_wait_state(1);
    328e:	f04f 0001 	mov.w	r0, #1
    3292:	f243 13c5 	movw	r3, #12741	; 0x31c5
    3296:	f2c0 0300 	movt	r3, #0
    329a:	4798      	blx	r3
				flashcalw_issue_command(
    329c:	f04f 0011 	mov.w	r0, #17
    32a0:	f04f 31ff 	mov.w	r1, #4294967295
    32a4:	f243 220d 	movw	r2, #12813	; 0x320d
    32a8:	f2c0 0200 	movt	r2, #0
    32ac:	4790      	blx	r2
    32ae:	bd08      	pop	{r3, pc}
						FLASHCALW_FCMD_CMD_HSDIS, -1);
			} else {
				// > 36 MHz
				/* Set a wait-state, enable the high-speed read
				mode. */
				flashcalw_set_wait_state(1);
    32b0:	f04f 0001 	mov.w	r0, #1
    32b4:	f243 11c5 	movw	r1, #12741	; 0x31c5
    32b8:	f2c0 0100 	movt	r1, #0
    32bc:	4788      	blx	r1
				flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSEN,
    32be:	f04f 0010 	mov.w	r0, #16
    32c2:	f04f 31ff 	mov.w	r1, #4294967295
    32c6:	f243 220d 	movw	r2, #12813	; 0x320d
    32ca:	f2c0 0200 	movt	r2, #0
    32ce:	4790      	blx	r2
    32d0:	bd08      	pop	{r3, pc}
						-1);
			}
		} else { // <= 18MHz
			if((is_fwu_enabled == true) &&
    32d2:	b1b2      	cbz	r2, 3302 <flashcalw_set_flash_waitstate_and_readmode+0x92>
    32d4:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
    32d8:	f2c0 01b7 	movt	r1, #183	; 0xb7
    32dc:	4288      	cmp	r0, r1
    32de:	d810      	bhi.n	3302 <flashcalw_set_flash_waitstate_and_readmode+0x92>
				(cpu_f_hz <= FLASH_FREQ_PS1_FWS_1_FWU_MAX_FREQ))
			{
				// <= 12MHz
				/* Set a wait-state, disable the high-speed read
				mode. */
				flashcalw_set_wait_state(1);
    32e0:	f04f 0001 	mov.w	r0, #1
    32e4:	f243 11c5 	movw	r1, #12741	; 0x31c5
    32e8:	f2c0 0100 	movt	r1, #0
    32ec:	4788      	blx	r1
				flashcalw_issue_command(
    32ee:	f04f 0011 	mov.w	r0, #17
    32f2:	f04f 31ff 	mov.w	r1, #4294967295
    32f6:	f243 220d 	movw	r2, #12813	; 0x320d
    32fa:	f2c0 0200 	movt	r2, #0
    32fe:	4790      	blx	r2
    3300:	bd08      	pop	{r3, pc}
						FLASHCALW_FCMD_CMD_HSDIS, -1);
			} else {
				/* No wait-state, disable the high-speed read
				mode */
				flashcalw_set_wait_state(0);
    3302:	f04f 0000 	mov.w	r0, #0
    3306:	f243 12c5 	movw	r2, #12741	; 0x31c5
    330a:	f2c0 0200 	movt	r2, #0
    330e:	4790      	blx	r2
				flashcalw_issue_command(
    3310:	f04f 0011 	mov.w	r0, #17
    3314:	f04f 31ff 	mov.w	r1, #4294967295
    3318:	f243 230d 	movw	r3, #12813	; 0x320d
    331c:	f2c0 0300 	movt	r3, #0
    3320:	4798      	blx	r3
    3322:	bd08      	pop	{r3, pc}
					FLASHCALW_FCMD_CMD_HSDIS, -1);
			}
		}
	} else { /* ps_value == 1 */
		if (cpu_f_hz > FLASH_FREQ_PS0_FWS_0_MAX_FREQ) { /* > 8MHz */
    3324:	f64a 0380 	movw	r3, #43136	; 0xa880
    3328:	f2c0 1312 	movt	r3, #274	; 0x112
    332c:	4298      	cmp	r0, r3
			/* Set a wait-state. */
			flashcalw_set_wait_state(1);
    332e:	bf8c      	ite	hi
    3330:	2001      	movhi	r0, #1
		} else {
			/* No wait-state. */
			flashcalw_set_wait_state(0);
    3332:	2000      	movls	r0, #0
    3334:	f243 11c5 	movw	r1, #12741	; 0x31c5
    3338:	f2c0 0100 	movt	r1, #0
    333c:	4788      	blx	r1
		}

		/* Disable the high-speed read mode. */
		flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSDIS, -1);
    333e:	f04f 0011 	mov.w	r0, #17
    3342:	f04f 31ff 	mov.w	r1, #4294967295
    3346:	f243 220d 	movw	r2, #12813	; 0x320d
    334a:	f2c0 0200 	movt	r2, #0
    334e:	4790      	blx	r2
    3350:	bd08      	pop	{r3, pc}
    3352:	bf00      	nop

00003354 <wdt_set_ctrl>:
 *        to the WatchDog Timer key.
 *
 * \param ctrl  Value to set the WatchDog Timer Control register to.
 */
static void wdt_set_ctrl(uint32_t ctrl)
{
    3354:	b082      	sub	sp, #8
	volatile uint32_t dly;

	/* Calculate delay for internal synchronization, see 44.1.2 WDT errata */
	if ((WDT->WDT_CTRL & WDT_CTRL_CSSEL) == WDT_CLK_SRC_RCSYS) {
    3356:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    335a:	f2c4 030f 	movt	r3, #16399	; 0x400f
    335e:	6819      	ldr	r1, [r3, #0]
    3360:	f411 3f00 	tst.w	r1, #131072	; 0x20000
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RCSYS_NOMINAL_HZ);
    3364:	bf0c      	ite	eq
    3366:	f240 3143 	movweq	r1, #835	; 0x343
	} else { /* WDT_CLK_SRC_32K */
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RC32K_NOMINAL_HZ);
    336a:	f44f 6137 	movne.w	r1, #2928	; 0xb70
    336e:	9101      	str	r1, [sp, #4]
	}
	dly >>= 3; /* ~8 cycles for one while loop */
    3370:	9a01      	ldr	r2, [sp, #4]
    3372:	ea4f 03d2 	mov.w	r3, r2, lsr #3
    3376:	9301      	str	r3, [sp, #4]
	while(dly--);
    3378:	9901      	ldr	r1, [sp, #4]
    337a:	f101 32ff 	add.w	r2, r1, #4294967295
    337e:	9201      	str	r2, [sp, #4]
    3380:	2900      	cmp	r1, #0
    3382:	d1f9      	bne.n	3378 <wdt_set_ctrl+0x24>
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_FIRST_KEY);
    3384:	f040 41aa 	orr.w	r1, r0, #1426063360	; 0x55000000
    3388:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    338c:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3390:	6019      	str	r1, [r3, #0]
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_SECOND_KEY);
    3392:	f040 402a 	orr.w	r0, r0, #2852126720	; 0xaa000000
    3396:	6018      	str	r0, [r3, #0]
}
    3398:	b002      	add	sp, #8
    339a:	4770      	bx	lr

0000339c <wdt_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(cfg);

	/* Default configuration values */
	cfg->clk_src = WDT_CLK_SRC_RCSYS;
    339c:	f04f 0300 	mov.w	r3, #0
    33a0:	6003      	str	r3, [r0, #0]
	cfg->wdt_mode = WDT_MODE_BASIC;
    33a2:	6043      	str	r3, [r0, #4]
	cfg->timeout_period = WDT_PERIOD_131072_CLK;
    33a4:	f04f 0210 	mov.w	r2, #16
    33a8:	7202      	strb	r2, [r0, #8]
	cfg->window_period = WDT_PERIOD_NONE;
    33aa:	7243      	strb	r3, [r0, #9]
	cfg->disable_flash_cali = true;
    33ac:	f04f 0101 	mov.w	r1, #1
    33b0:	7281      	strb	r1, [r0, #10]
	cfg->disable_wdt_after_reset = true;
    33b2:	72c1      	strb	r1, [r0, #11]
	cfg->always_on = false;
    33b4:	7303      	strb	r3, [r0, #12]
    33b6:	4770      	bx	lr

000033b8 <wdt_init>:
 */
bool wdt_init(
		struct wdt_dev_inst *const dev_inst,
		Wdt *const wdt,
		struct wdt_config *const cfg)
{
    33b8:	b538      	push	{r3, r4, r5, lr}
    33ba:	460c      	mov	r4, r1
    33bc:	4615      	mov	r5, r2
	/* Sanity check arguments */
	Assert(dev_inst);
	Assert(wdt);
	Assert(cfg);

	dev_inst->hw_dev = wdt;
    33be:	6001      	str	r1, [r0, #0]
	dev_inst->wdt_cfg = cfg;
    33c0:	6042      	str	r2, [r0, #4]

	/* Enable APB clock for WDT */
	sysclk_enable_peripheral_clock(wdt);
    33c2:	4608      	mov	r0, r1
    33c4:	f242 1331 	movw	r3, #8497	; 0x2131
    33c8:	f2c0 0300 	movt	r3, #0
    33cc:	4798      	blx	r3

	/* Check SFV bit: if SFV bit is set, Control Register is locked */
	if (wdt->WDT_CTRL & WDT_CTRL_SFV) {
    33ce:	6820      	ldr	r0, [r4, #0]
    33d0:	f010 0f08 	tst.w	r0, #8
    33d4:	d152      	bne.n	347c <wdt_init+0xc4>
		return false;
	}

	/* Disable the WDT */
	if (wdt->WDT_CTRL & WDT_CTRL_EN) {
    33d6:	6821      	ldr	r1, [r4, #0]
    33d8:	f011 0f01 	tst.w	r1, #1
    33dc:	d00b      	beq.n	33f6 <wdt_init+0x3e>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    33de:	6822      	ldr	r2, [r4, #0]
    33e0:	f022 0001 	bic.w	r0, r2, #1
    33e4:	f243 3355 	movw	r3, #13141	; 0x3355
    33e8:	f2c0 0300 	movt	r3, #0
    33ec:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    33ee:	6820      	ldr	r0, [r4, #0]
    33f0:	f010 0f01 	tst.w	r0, #1
    33f4:	d1fb      	bne.n	33ee <wdt_init+0x36>
		}
	}
	/* Disable the WDT clock */
	if (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    33f6:	6821      	ldr	r1, [r4, #0]
    33f8:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    33fc:	d00b      	beq.n	3416 <wdt_init+0x5e>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_CEN);
    33fe:	6822      	ldr	r2, [r4, #0]
    3400:	f422 3080 	bic.w	r0, r2, #65536	; 0x10000
    3404:	f243 3355 	movw	r3, #13141	; 0x3355
    3408:	f2c0 0300 	movt	r3, #0
    340c:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    340e:	6820      	ldr	r0, [r4, #0]
    3410:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    3414:	d1fb      	bne.n	340e <wdt_init+0x56>
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
    3416:	6869      	ldr	r1, [r5, #4]
    3418:	682a      	ldr	r2, [r5, #0]
    341a:	ea41 0302 	orr.w	r3, r1, r2
			cfg->wdt_mode |
			WDT_CTRL_PSEL(cfg->timeout_period) |
    341e:	7a28      	ldrb	r0, [r5, #8]
    3420:	ea4f 2100 	mov.w	r1, r0, lsl #8
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
			cfg->wdt_mode |
    3424:	f401 52f8 	and.w	r2, r1, #7936	; 0x1f00
    3428:	ea43 0002 	orr.w	r0, r3, r2
			WDT_CTRL_PSEL(cfg->timeout_period) |
			WDT_CTRL_TBAN(cfg->window_period) |
    342c:	7a6b      	ldrb	r3, [r5, #9]
    342e:	ea4f 4183 	mov.w	r1, r3, lsl #18
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
			cfg->wdt_mode |
			WDT_CTRL_PSEL(cfg->timeout_period) |
    3432:	f401 02f8 	and.w	r2, r1, #8126464	; 0x7c0000
    3436:	4310      	orrs	r0, r2
			WDT_CTRL_TBAN(cfg->window_period) |
    3438:	7aab      	ldrb	r3, [r5, #10]
    343a:	2b00      	cmp	r3, #0
    343c:	bf14      	ite	ne
    343e:	2180      	movne	r1, #128	; 0x80
    3440:	2100      	moveq	r1, #0
    3442:	4308      	orrs	r0, r1
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
    3444:	7aed      	ldrb	r5, [r5, #11]
    3446:	2d00      	cmp	r5, #0
    3448:	bf14      	ite	ne
    344a:	2202      	movne	r2, #2
    344c:	2200      	moveq	r2, #0
    344e:	4310      	orrs	r0, r2
    3450:	f243 3555 	movw	r5, #13141	; 0x3355
    3454:	f2c0 0500 	movt	r5, #0
    3458:	47a8      	blx	r5
			WDT_CTRL_PSEL(cfg->timeout_period) |
			WDT_CTRL_TBAN(cfg->window_period) |
			(cfg->disable_flash_cali ? WDT_CTRL_FCD : 0) |
			(cfg->disable_wdt_after_reset ? WDT_CTRL_DAR : 0)
	);
	wdt_set_ctrl(wdt->WDT_CTRL | WDT_CTRL_CEN);
    345a:	6820      	ldr	r0, [r4, #0]
    345c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
    3460:	47a8      	blx	r5
	while (!(wdt->WDT_CTRL & WDT_CTRL_CEN)) {
    3462:	6823      	ldr	r3, [r4, #0]
    3464:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3468:	d0fb      	beq.n	3462 <wdt_init+0xaa>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    346a:	4620      	mov	r0, r4
    346c:	f642 0111 	movw	r1, #10257	; 0x2811
    3470:	f2c0 0100 	movt	r1, #0
    3474:	4788      	blx	r1

	return true;
    3476:	f04f 0001 	mov.w	r0, #1
    347a:	bd38      	pop	{r3, r4, r5, pc}
	/* Enable APB clock for WDT */
	sysclk_enable_peripheral_clock(wdt);

	/* Check SFV bit: if SFV bit is set, Control Register is locked */
	if (wdt->WDT_CTRL & WDT_CTRL_SFV) {
		return false;
    347c:	f04f 0000 	mov.w	r0, #0

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);

	return true;
}
    3480:	bd38      	pop	{r3, r4, r5, pc}
    3482:	bf00      	nop

00003484 <wdt_disable>:
 * \brief Disable the WDT module.
 *
 * \param dev_inst    Device structure pointer.
 */
void wdt_disable(struct wdt_dev_inst *const dev_inst)
{
    3484:	b510      	push	{r4, lr}
	Wdt *wdt = dev_inst->hw_dev;
    3486:	6804      	ldr	r4, [r0, #0]

	/* Disable the WDT */
	wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    3488:	6820      	ldr	r0, [r4, #0]
    348a:	f020 0001 	bic.w	r0, r0, #1
    348e:	f243 3355 	movw	r3, #13141	; 0x3355
    3492:	f2c0 0300 	movt	r3, #0
    3496:	4798      	blx	r3
	while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    3498:	6821      	ldr	r1, [r4, #0]
    349a:	f011 0f01 	tst.w	r1, #1
    349e:	d1fb      	bne.n	3498 <wdt_disable+0x14>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    34a0:	4620      	mov	r0, r4
    34a2:	f642 0211 	movw	r2, #10257	; 0x2811
    34a6:	f2c0 0200 	movt	r2, #0
    34aa:	4790      	blx	r2
    34ac:	bd10      	pop	{r4, pc}
    34ae:	bf00      	nop

000034b0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    34b0:	e7fe      	b.n	34b0 <Dummy_Handler>
    34b2:	bf00      	nop

000034b4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    34b4:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
    34b6:	f240 0300 	movw	r3, #0
    34ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34be:	f246 0290 	movw	r2, #24720	; 0x6090
    34c2:	f2c0 0200 	movt	r2, #0
    34c6:	429a      	cmp	r2, r3
    34c8:	d003      	beq.n	34d2 <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
    34ca:	4839      	ldr	r0, [pc, #228]	; (35b0 <Reset_Handler+0xfc>)
    34cc:	4939      	ldr	r1, [pc, #228]	; (35b4 <Reset_Handler+0x100>)
    34ce:	4281      	cmp	r1, r0
    34d0:	d304      	bcc.n	34dc <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    34d2:	4b39      	ldr	r3, [pc, #228]	; (35b8 <Reset_Handler+0x104>)
    34d4:	4a39      	ldr	r2, [pc, #228]	; (35bc <Reset_Handler+0x108>)
    34d6:	429a      	cmp	r2, r3
    34d8:	d325      	bcc.n	3526 <Reset_Handler+0x72>
    34da:	e042      	b.n	3562 <Reset_Handler+0xae>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
    34dc:	4d38      	ldr	r5, [pc, #224]	; (35c0 <Reset_Handler+0x10c>)
    34de:	4c39      	ldr	r4, [pc, #228]	; (35c4 <Reset_Handler+0x110>)
    34e0:	1b63      	subs	r3, r4, r5
    34e2:	f023 0503 	bic.w	r5, r3, #3
    34e6:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
    34ea:	f240 0200 	movw	r2, #0
    34ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
    34f2:	f246 0190 	movw	r1, #24720	; 0x6090
    34f6:	f2c0 0100 	movt	r1, #0
    34fa:	f105 0004 	add.w	r0, r5, #4
    34fe:	f3c5 0480 	ubfx	r4, r5, #2, #1
    3502:	585d      	ldr	r5, [r3, r1]
    3504:	509d      	str	r5, [r3, r2]
    3506:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    350a:	4283      	cmp	r3, r0
    350c:	d146      	bne.n	359c <Reset_Handler+0xe8>
    350e:	e7e0      	b.n	34d2 <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
    3510:	585d      	ldr	r5, [r3, r1]
    3512:	509d      	str	r5, [r3, r2]
    3514:	f103 0304 	add.w	r3, r3, #4
    3518:	585c      	ldr	r4, [r3, r1]
    351a:	509c      	str	r4, [r3, r2]
    351c:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    3520:	4283      	cmp	r3, r0
    3522:	d1f5      	bne.n	3510 <Reset_Handler+0x5c>
    3524:	e7d5      	b.n	34d2 <Reset_Handler+0x1e>
    3526:	4d28      	ldr	r5, [pc, #160]	; (35c8 <Reset_Handler+0x114>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
    3528:	4928      	ldr	r1, [pc, #160]	; (35cc <Reset_Handler+0x118>)
    352a:	1b48      	subs	r0, r1, r5
    352c:	f020 0403 	bic.w	r4, r0, #3
    3530:	f640 1310 	movw	r3, #2320	; 0x910
    3534:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3538:	18e2      	adds	r2, r4, r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
    353a:	f04f 0100 	mov.w	r1, #0
    353e:	1b50      	subs	r0, r2, r5
    3540:	f1a0 0004 	sub.w	r0, r0, #4
    3544:	f3c0 0480 	ubfx	r4, r0, #2, #1
    3548:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    354c:	4295      	cmp	r5, r2
    354e:	d11e      	bne.n	358e <Reset_Handler+0xda>
    3550:	e007      	b.n	3562 <Reset_Handler+0xae>
    3552:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
    3556:	6069      	str	r1, [r5, #4]
    3558:	f105 0508 	add.w	r5, r5, #8
    355c:	6059      	str	r1, [r3, #4]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    355e:	4295      	cmp	r5, r2
    3560:	d1f7      	bne.n	3552 <Reset_Handler+0x9e>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) &_sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3562:	f240 0500 	movw	r5, #0
    3566:	f2c0 0500 	movt	r5, #0
    356a:	f025 027f 	bic.w	r2, r5, #127	; 0x7f
    356e:	f44f 416d 	mov.w	r1, #60672	; 0xed00
    3572:	f2ce 0100 	movt	r1, #57344	; 0xe000
    3576:	608a      	str	r2, [r1, #8]

	/* Initialize the C library */
	__libc_init_array();
    3578:	f243 60ed 	movw	r0, #14061	; 0x36ed
    357c:	f2c0 0000 	movt	r0, #0
    3580:	4780      	blx	r0

	/* Branch to main function */
	main();
    3582:	f241 74e5 	movw	r4, #6117	; 0x17e5
    3586:	f2c0 0400 	movt	r4, #0
    358a:	47a0      	blx	r4
    358c:	e7fe      	b.n	358c <Reset_Handler+0xd8>
    358e:	2c00      	cmp	r4, #0
    3590:	d0df      	beq.n	3552 <Reset_Handler+0x9e>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
    3592:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    3596:	4295      	cmp	r5, r2
    3598:	d1db      	bne.n	3552 <Reset_Handler+0x9e>
    359a:	e7e2      	b.n	3562 <Reset_Handler+0xae>
    359c:	2c00      	cmp	r4, #0
    359e:	d0b7      	beq.n	3510 <Reset_Handler+0x5c>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
    35a0:	585c      	ldr	r4, [r3, r1]
    35a2:	509c      	str	r4, [r3, r2]
    35a4:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    35a8:	4283      	cmp	r3, r0
    35aa:	d1b1      	bne.n	3510 <Reset_Handler+0x5c>
    35ac:	e791      	b.n	34d2 <Reset_Handler+0x1e>
    35ae:	bf00      	nop
    35b0:	20000910 	.word	0x20000910
    35b4:	20000000 	.word	0x20000000
    35b8:	20000aa8 	.word	0x20000aa8
    35bc:	20000910 	.word	0x20000910
    35c0:	20000004 	.word	0x20000004
    35c4:	20000913 	.word	0x20000913
    35c8:	2000090c 	.word	0x2000090c
    35cc:	20000aa3 	.word	0x20000aa3

000035d0 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    35d0:	f640 13d8 	movw	r3, #2520	; 0x9d8
    35d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35d8:	6819      	ldr	r1, [r3, #0]
    35da:	b941      	cbnz	r1, 35ee <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
    35dc:	f640 13d8 	movw	r3, #2520	; 0x9d8
    35e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35e4:	f641 22a8 	movw	r2, #6824	; 0x1aa8
    35e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    35ec:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    35ee:	f640 11d8 	movw	r1, #2520	; 0x9d8
    35f2:	f2c2 0100 	movt	r1, #8192	; 0x2000
    35f6:	680b      	ldr	r3, [r1, #0]

	heap += incr;
    35f8:	1818      	adds	r0, r3, r0
    35fa:	6008      	str	r0, [r1, #0]

	return (caddr_t) prev_heap;
}
    35fc:	4618      	mov	r0, r3
    35fe:	4770      	bx	lr

00003600 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    3600:	f04f 30ff 	mov.w	r0, #4294967295
    3604:	4770      	bx	lr
    3606:	bf00      	nop

00003608 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    3608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    360c:	604b      	str	r3, [r1, #4]

	return 0;
}
    360e:	f04f 0000 	mov.w	r0, #0
    3612:	4770      	bx	lr

00003614 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    3614:	f04f 0001 	mov.w	r0, #1
    3618:	4770      	bx	lr
    361a:	bf00      	nop

0000361c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    361c:	f04f 0000 	mov.w	r0, #0
    3620:	4770      	bx	lr
    3622:	bf00      	nop

00003624 <__register_exitproc>:
    3624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3628:	4698      	mov	r8, r3
    362a:	4b23      	ldr	r3, [pc, #140]	; (36b8 <__register_exitproc+0x94>)
    362c:	681c      	ldr	r4, [r3, #0]
    362e:	4606      	mov	r6, r0
    3630:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    3634:	460f      	mov	r7, r1
    3636:	4691      	mov	r9, r2
    3638:	b918      	cbnz	r0, 3642 <__register_exitproc+0x1e>
    363a:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
    363e:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    3642:	6841      	ldr	r1, [r0, #4]
    3644:	291f      	cmp	r1, #31
    3646:	dd16      	ble.n	3676 <__register_exitproc+0x52>
    3648:	481c      	ldr	r0, [pc, #112]	; (36bc <__register_exitproc+0x98>)
    364a:	b918      	cbnz	r0, 3654 <__register_exitproc+0x30>
    364c:	f04f 30ff 	mov.w	r0, #4294967295
    3650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3654:	f44f 70c8 	mov.w	r0, #400	; 0x190
    3658:	f001 fb84 	bl	4d64 <malloc>
    365c:	2800      	cmp	r0, #0
    365e:	d0f5      	beq.n	364c <__register_exitproc+0x28>
    3660:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    3664:	2500      	movs	r5, #0
    3666:	6045      	str	r5, [r0, #4]
    3668:	6002      	str	r2, [r0, #0]
    366a:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    366e:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
    3672:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
    3676:	b1b6      	cbz	r6, 36a6 <__register_exitproc+0x82>
    3678:	6844      	ldr	r4, [r0, #4]
    367a:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    367e:	2201      	movs	r2, #1
    3680:	eb00 0384 	add.w	r3, r0, r4, lsl #2
    3684:	fa02 f204 	lsl.w	r2, r2, r4
    3688:	4311      	orrs	r1, r2
    368a:	2e02      	cmp	r6, #2
    368c:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
    3690:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    3694:	461c      	mov	r4, r3
    3696:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
    369a:	d104      	bne.n	36a6 <__register_exitproc+0x82>
    369c:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
    36a0:	431a      	orrs	r2, r3
    36a2:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
    36a6:	6841      	ldr	r1, [r0, #4]
    36a8:	1c8b      	adds	r3, r1, #2
    36aa:	1c4a      	adds	r2, r1, #1
    36ac:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    36b0:	6042      	str	r2, [r0, #4]
    36b2:	2000      	movs	r0, #0
    36b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    36b8:	00006010 	.word	0x00006010
    36bc:	00004d65 	.word	0x00004d65

000036c0 <__libc_fini_array>:
    36c0:	b570      	push	{r4, r5, r6, lr}
    36c2:	4b08      	ldr	r3, [pc, #32]	; (36e4 <__libc_fini_array+0x24>)
    36c4:	4c08      	ldr	r4, [pc, #32]	; (36e8 <__libc_fini_array+0x28>)
    36c6:	1ae0      	subs	r0, r4, r3
    36c8:	1084      	asrs	r4, r0, #2
    36ca:	eb03 0684 	add.w	r6, r3, r4, lsl #2
    36ce:	2500      	movs	r5, #0
    36d0:	3d04      	subs	r5, #4
    36d2:	b11c      	cbz	r4, 36dc <__libc_fini_array+0x1c>
    36d4:	5972      	ldr	r2, [r6, r5]
    36d6:	4790      	blx	r2
    36d8:	3c01      	subs	r4, #1
    36da:	e7f9      	b.n	36d0 <__libc_fini_array+0x10>
    36dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    36e0:	f002 bcca 	b.w	6078 <_fini>
    36e4:	00006084 	.word	0x00006084
    36e8:	00006088 	.word	0x00006088

000036ec <__libc_init_array>:
    36ec:	b538      	push	{r3, r4, r5, lr}
    36ee:	4d0e      	ldr	r5, [pc, #56]	; (3728 <__libc_init_array+0x3c>)
    36f0:	4b0e      	ldr	r3, [pc, #56]	; (372c <__libc_init_array+0x40>)
    36f2:	1ae8      	subs	r0, r5, r3
    36f4:	1085      	asrs	r5, r0, #2
    36f6:	2400      	movs	r4, #0
    36f8:	42ac      	cmp	r4, r5
    36fa:	d005      	beq.n	3708 <__libc_init_array+0x1c>
    36fc:	490b      	ldr	r1, [pc, #44]	; (372c <__libc_init_array+0x40>)
    36fe:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
    3702:	4790      	blx	r2
    3704:	3401      	adds	r4, #1
    3706:	e7f7      	b.n	36f8 <__libc_init_array+0xc>
    3708:	f002 fcac 	bl	6064 <_init>
    370c:	4908      	ldr	r1, [pc, #32]	; (3730 <__libc_init_array+0x44>)
    370e:	4a09      	ldr	r2, [pc, #36]	; (3734 <__libc_init_array+0x48>)
    3710:	1a54      	subs	r4, r2, r1
    3712:	10a5      	asrs	r5, r4, #2
    3714:	2400      	movs	r4, #0
    3716:	42ac      	cmp	r4, r5
    3718:	d005      	beq.n	3726 <__libc_init_array+0x3a>
    371a:	4b05      	ldr	r3, [pc, #20]	; (3730 <__libc_init_array+0x44>)
    371c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    3720:	4780      	blx	r0
    3722:	3401      	adds	r4, #1
    3724:	e7f7      	b.n	3716 <__libc_init_array+0x2a>
    3726:	bd38      	pop	{r3, r4, r5, pc}
    3728:	00006070 	.word	0x00006070
    372c:	00006070 	.word	0x00006070
    3730:	00006070 	.word	0x00006070
    3734:	00006078 	.word	0x00006078

00003738 <iprintf>:
    3738:	b40f      	push	{r0, r1, r2, r3}
    373a:	b507      	push	{r0, r1, r2, lr}
    373c:	4906      	ldr	r1, [pc, #24]	; (3758 <iprintf+0x20>)
    373e:	ab04      	add	r3, sp, #16
    3740:	6808      	ldr	r0, [r1, #0]
    3742:	f853 2b04 	ldr.w	r2, [r3], #4
    3746:	6881      	ldr	r1, [r0, #8]
    3748:	9301      	str	r3, [sp, #4]
    374a:	f000 f911 	bl	3970 <_vfiprintf_r>
    374e:	e8bd 400e 	ldmia.w	sp!, {r1, r2, r3, lr}
    3752:	b004      	add	sp, #16
    3754:	4770      	bx	lr
    3756:	bf00      	nop
    3758:	20000050 	.word	0x20000050

0000375c <_iprintf_r>:
    375c:	b40e      	push	{r1, r2, r3}
    375e:	b503      	push	{r0, r1, lr}
    3760:	ab03      	add	r3, sp, #12
    3762:	6881      	ldr	r1, [r0, #8]
    3764:	f853 2b04 	ldr.w	r2, [r3], #4
    3768:	9301      	str	r3, [sp, #4]
    376a:	f000 f901 	bl	3970 <_vfiprintf_r>
    376e:	e8bd 400c 	ldmia.w	sp!, {r2, r3, lr}
    3772:	b003      	add	sp, #12
    3774:	4770      	bx	lr
    3776:	bf00      	nop

00003778 <memset>:
    3778:	1882      	adds	r2, r0, r2
    377a:	4603      	mov	r3, r0
    377c:	4293      	cmp	r3, r2
    377e:	d002      	beq.n	3786 <memset+0xe>
    3780:	f803 1b01 	strb.w	r1, [r3], #1
    3784:	e7fa      	b.n	377c <memset+0x4>
    3786:	4770      	bx	lr

00003788 <_puts_r>:
    3788:	b530      	push	{r4, r5, lr}
    378a:	4605      	mov	r5, r0
    378c:	b089      	sub	sp, #36	; 0x24
    378e:	4608      	mov	r0, r1
    3790:	460c      	mov	r4, r1
    3792:	f000 f8b1 	bl	38f8 <strlen>
    3796:	2101      	movs	r1, #1
    3798:	1843      	adds	r3, r0, r1
    379a:	9107      	str	r1, [sp, #28]
    379c:	4911      	ldr	r1, [pc, #68]	; (37e4 <_puts_r+0x5c>)
    379e:	9303      	str	r3, [sp, #12]
    37a0:	680b      	ldr	r3, [r1, #0]
    37a2:	4a11      	ldr	r2, [pc, #68]	; (37e8 <_puts_r+0x60>)
    37a4:	9005      	str	r0, [sp, #20]
    37a6:	a804      	add	r0, sp, #16
    37a8:	9001      	str	r0, [sp, #4]
    37aa:	6898      	ldr	r0, [r3, #8]
    37ac:	9206      	str	r2, [sp, #24]
    37ae:	2202      	movs	r2, #2
    37b0:	9202      	str	r2, [sp, #8]
    37b2:	8982      	ldrh	r2, [r0, #12]
    37b4:	9404      	str	r4, [sp, #16]
    37b6:	f402 5100 	and.w	r1, r2, #8192	; 0x2000
    37ba:	b20b      	sxth	r3, r1
    37bc:	b933      	cbnz	r3, 37cc <_puts_r+0x44>
    37be:	6e41      	ldr	r1, [r0, #100]	; 0x64
    37c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    37c4:	f421 5300 	bic.w	r3, r1, #8192	; 0x2000
    37c8:	8182      	strh	r2, [r0, #12]
    37ca:	6643      	str	r3, [r0, #100]	; 0x64
    37cc:	4628      	mov	r0, r5
    37ce:	68a9      	ldr	r1, [r5, #8]
    37d0:	aa01      	add	r2, sp, #4
    37d2:	f001 f879 	bl	48c8 <__sfvwrite_r>
    37d6:	2800      	cmp	r0, #0
    37d8:	bf0c      	ite	eq
    37da:	200a      	moveq	r0, #10
    37dc:	f04f 30ff 	movne.w	r0, #4294967295
    37e0:	b009      	add	sp, #36	; 0x24
    37e2:	bd30      	pop	{r4, r5, pc}
    37e4:	20000050 	.word	0x20000050
    37e8:	00006016 	.word	0x00006016

000037ec <puts>:
    37ec:	4b02      	ldr	r3, [pc, #8]	; (37f8 <puts+0xc>)
    37ee:	4601      	mov	r1, r0
    37f0:	6818      	ldr	r0, [r3, #0]
    37f2:	f7ff bfc9 	b.w	3788 <_puts_r>
    37f6:	bf00      	nop
    37f8:	20000050 	.word	0x20000050

000037fc <setbuf>:
    37fc:	2900      	cmp	r1, #0
    37fe:	bf0c      	ite	eq
    3800:	2202      	moveq	r2, #2
    3802:	2200      	movne	r2, #0
    3804:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3808:	f000 b800 	b.w	380c <setvbuf>

0000380c <setvbuf>:
    380c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3810:	461d      	mov	r5, r3
    3812:	4b37      	ldr	r3, [pc, #220]	; (38f0 <setvbuf+0xe4>)
    3814:	4604      	mov	r4, r0
    3816:	6818      	ldr	r0, [r3, #0]
    3818:	460e      	mov	r6, r1
    381a:	4617      	mov	r7, r2
    381c:	4698      	mov	r8, r3
    381e:	b118      	cbz	r0, 3828 <setvbuf+0x1c>
    3820:	6b82      	ldr	r2, [r0, #56]	; 0x38
    3822:	b90a      	cbnz	r2, 3828 <setvbuf+0x1c>
    3824:	f000 fe5c 	bl	44e0 <__sinit>
    3828:	2f02      	cmp	r7, #2
    382a:	d85d      	bhi.n	38e8 <setvbuf+0xdc>
    382c:	2d00      	cmp	r5, #0
    382e:	db5b      	blt.n	38e8 <setvbuf+0xdc>
    3830:	4621      	mov	r1, r4
    3832:	f8d8 0000 	ldr.w	r0, [r8]
    3836:	f000 fd5f 	bl	42f8 <_fflush_r>
    383a:	89a1      	ldrh	r1, [r4, #12]
    383c:	f001 0380 	and.w	r3, r1, #128	; 0x80
    3840:	2000      	movs	r0, #0
    3842:	b21a      	sxth	r2, r3
    3844:	6060      	str	r0, [r4, #4]
    3846:	61a0      	str	r0, [r4, #24]
    3848:	b122      	cbz	r2, 3854 <setvbuf+0x48>
    384a:	4829      	ldr	r0, [pc, #164]	; (38f0 <setvbuf+0xe4>)
    384c:	6921      	ldr	r1, [r4, #16]
    384e:	6800      	ldr	r0, [r0, #0]
    3850:	f000 ff84 	bl	475c <_free_r>
    3854:	89a1      	ldrh	r1, [r4, #12]
    3856:	2f02      	cmp	r7, #2
    3858:	f021 0383 	bic.w	r3, r1, #131	; 0x83
    385c:	81a3      	strh	r3, [r4, #12]
    385e:	d012      	beq.n	3886 <setvbuf+0x7a>
    3860:	bb36      	cbnz	r6, 38b0 <setvbuf+0xa4>
    3862:	2d00      	cmp	r5, #0
    3864:	bf08      	it	eq
    3866:	f44f 6580 	moveq.w	r5, #1024	; 0x400
    386a:	4628      	mov	r0, r5
    386c:	f001 fa7a 	bl	4d64 <malloc>
    3870:	4606      	mov	r6, r0
    3872:	b9c8      	cbnz	r0, 38a8 <setvbuf+0x9c>
    3874:	f44f 6080 	mov.w	r0, #1024	; 0x400
    3878:	f001 fa74 	bl	4d64 <malloc>
    387c:	4606      	mov	r6, r0
    387e:	b988      	cbnz	r0, 38a4 <setvbuf+0x98>
    3880:	f04f 30ff 	mov.w	r0, #4294967295
    3884:	e000      	b.n	3888 <setvbuf+0x7c>
    3886:	2000      	movs	r0, #0
    3888:	89a1      	ldrh	r1, [r4, #12]
    388a:	f041 0302 	orr.w	r3, r1, #2
    388e:	81a3      	strh	r3, [r4, #12]
    3890:	f104 0143 	add.w	r1, r4, #67	; 0x43
    3894:	2200      	movs	r2, #0
    3896:	2301      	movs	r3, #1
    3898:	60a2      	str	r2, [r4, #8]
    389a:	6021      	str	r1, [r4, #0]
    389c:	6121      	str	r1, [r4, #16]
    389e:	6163      	str	r3, [r4, #20]
    38a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    38a4:	f44f 6580 	mov.w	r5, #1024	; 0x400
    38a8:	89a2      	ldrh	r2, [r4, #12]
    38aa:	f042 0080 	orr.w	r0, r2, #128	; 0x80
    38ae:	81a0      	strh	r0, [r4, #12]
    38b0:	2f01      	cmp	r7, #1
    38b2:	d105      	bne.n	38c0 <setvbuf+0xb4>
    38b4:	89a1      	ldrh	r1, [r4, #12]
    38b6:	426a      	negs	r2, r5
    38b8:	f041 0301 	orr.w	r3, r1, #1
    38bc:	81a3      	strh	r3, [r4, #12]
    38be:	61a2      	str	r2, [r4, #24]
    38c0:	480b      	ldr	r0, [pc, #44]	; (38f0 <setvbuf+0xe4>)
    38c2:	89a2      	ldrh	r2, [r4, #12]
    38c4:	6801      	ldr	r1, [r0, #0]
    38c6:	4b0b      	ldr	r3, [pc, #44]	; (38f4 <setvbuf+0xe8>)
    38c8:	f002 0008 	and.w	r0, r2, #8
    38cc:	b200      	sxth	r0, r0
    38ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    38d0:	6026      	str	r6, [r4, #0]
    38d2:	6126      	str	r6, [r4, #16]
    38d4:	6165      	str	r5, [r4, #20]
    38d6:	b148      	cbz	r0, 38ec <setvbuf+0xe0>
    38d8:	f012 0f03 	tst.w	r2, #3
    38dc:	bf18      	it	ne
    38de:	2500      	movne	r5, #0
    38e0:	60a5      	str	r5, [r4, #8]
    38e2:	2000      	movs	r0, #0
    38e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    38e8:	f04f 30ff 	mov.w	r0, #4294967295
    38ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    38f0:	20000050 	.word	0x20000050
    38f4:	00004455 	.word	0x00004455

000038f8 <strlen>:
    38f8:	4603      	mov	r3, r0
    38fa:	f813 2b01 	ldrb.w	r2, [r3], #1
    38fe:	2a00      	cmp	r2, #0
    3900:	d1fb      	bne.n	38fa <strlen+0x2>
    3902:	1a18      	subs	r0, r3, r0
    3904:	3801      	subs	r0, #1
    3906:	4770      	bx	lr

00003908 <__sprint_r>:
    3908:	6893      	ldr	r3, [r2, #8]
    390a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    390e:	4681      	mov	r9, r0
    3910:	460f      	mov	r7, r1
    3912:	4614      	mov	r4, r2
    3914:	b91b      	cbnz	r3, 391e <__sprint_r+0x16>
    3916:	6053      	str	r3, [r2, #4]
    3918:	4618      	mov	r0, r3
    391a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    391e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    3920:	049b      	lsls	r3, r3, #18
    3922:	d51e      	bpl.n	3962 <__sprint_r+0x5a>
    3924:	6815      	ldr	r5, [r2, #0]
    3926:	68a0      	ldr	r0, [r4, #8]
    3928:	3508      	adds	r5, #8
    392a:	b1c8      	cbz	r0, 3960 <__sprint_r+0x58>
    392c:	f855 1c04 	ldr.w	r1, [r5, #-4]
    3930:	f855 ac08 	ldr.w	sl, [r5, #-8]
    3934:	ea4f 0891 	mov.w	r8, r1, lsr #2
    3938:	2600      	movs	r6, #0
    393a:	4546      	cmp	r6, r8
    393c:	da09      	bge.n	3952 <__sprint_r+0x4a>
    393e:	4648      	mov	r0, r9
    3940:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
    3944:	463a      	mov	r2, r7
    3946:	f000 fe47 	bl	45d8 <_fputwc_r>
    394a:	1c43      	adds	r3, r0, #1
    394c:	d00b      	beq.n	3966 <__sprint_r+0x5e>
    394e:	3601      	adds	r6, #1
    3950:	e7f3      	b.n	393a <__sprint_r+0x32>
    3952:	68a2      	ldr	r2, [r4, #8]
    3954:	ea4f 0888 	mov.w	r8, r8, lsl #2
    3958:	ebc8 0302 	rsb	r3, r8, r2
    395c:	60a3      	str	r3, [r4, #8]
    395e:	e7e2      	b.n	3926 <__sprint_r+0x1e>
    3960:	e001      	b.n	3966 <__sprint_r+0x5e>
    3962:	f000 ffb1 	bl	48c8 <__sfvwrite_r>
    3966:	2100      	movs	r1, #0
    3968:	60a1      	str	r1, [r4, #8]
    396a:	6061      	str	r1, [r4, #4]
    396c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00003970 <_vfiprintf_r>:
    3970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3974:	4689      	mov	r9, r1
    3976:	b0a9      	sub	sp, #164	; 0xa4
    3978:	4614      	mov	r4, r2
    397a:	461d      	mov	r5, r3
    397c:	461e      	mov	r6, r3
    397e:	4682      	mov	sl, r0
    3980:	b118      	cbz	r0, 398a <_vfiprintf_r+0x1a>
    3982:	6b83      	ldr	r3, [r0, #56]	; 0x38
    3984:	b90b      	cbnz	r3, 398a <_vfiprintf_r+0x1a>
    3986:	f000 fdab 	bl	44e0 <__sinit>
    398a:	f8b9 000c 	ldrh.w	r0, [r9, #12]
    398e:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
    3992:	b211      	sxth	r1, r2
    3994:	b949      	cbnz	r1, 39aa <_vfiprintf_r+0x3a>
    3996:	f440 5300 	orr.w	r3, r0, #8192	; 0x2000
    399a:	f8d9 0064 	ldr.w	r0, [r9, #100]	; 0x64
    399e:	f8a9 300c 	strh.w	r3, [r9, #12]
    39a2:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
    39a6:	f8c9 2064 	str.w	r2, [r9, #100]	; 0x64
    39aa:	f8b9 100c 	ldrh.w	r1, [r9, #12]
    39ae:	f001 0308 	and.w	r3, r1, #8
    39b2:	b218      	sxth	r0, r3
    39b4:	b148      	cbz	r0, 39ca <_vfiprintf_r+0x5a>
    39b6:	f8d9 2010 	ldr.w	r2, [r9, #16]
    39ba:	b132      	cbz	r2, 39ca <_vfiprintf_r+0x5a>
    39bc:	f8b9 100c 	ldrh.w	r1, [r9, #12]
    39c0:	f001 031a 	and.w	r3, r1, #26
    39c4:	2b0a      	cmp	r3, #10
    39c6:	d116      	bne.n	39f6 <_vfiprintf_r+0x86>
    39c8:	e009      	b.n	39de <_vfiprintf_r+0x6e>
    39ca:	4650      	mov	r0, sl
    39cc:	4649      	mov	r1, r9
    39ce:	f000 fc27 	bl	4220 <__swsetup_r>
    39d2:	2800      	cmp	r0, #0
    39d4:	d0f2      	beq.n	39bc <_vfiprintf_r+0x4c>
    39d6:	f04f 32ff 	mov.w	r2, #4294967295
    39da:	9203      	str	r2, [sp, #12]
    39dc:	e3d5      	b.n	418a <_vfiprintf_r+0x81a>
    39de:	f9b9 000e 	ldrsh.w	r0, [r9, #14]
    39e2:	2800      	cmp	r0, #0
    39e4:	db07      	blt.n	39f6 <_vfiprintf_r+0x86>
    39e6:	4650      	mov	r0, sl
    39e8:	4649      	mov	r1, r9
    39ea:	4622      	mov	r2, r4
    39ec:	462b      	mov	r3, r5
    39ee:	f000 fbd0 	bl	4192 <__sbprintf>
    39f2:	9003      	str	r0, [sp, #12]
    39f4:	e3c9      	b.n	418a <_vfiprintf_r+0x81a>
    39f6:	2200      	movs	r2, #0
    39f8:	ad18      	add	r5, sp, #96	; 0x60
    39fa:	950b      	str	r5, [sp, #44]	; 0x2c
    39fc:	920d      	str	r2, [sp, #52]	; 0x34
    39fe:	920c      	str	r2, [sp, #48]	; 0x30
    3a00:	9401      	str	r4, [sp, #4]
    3a02:	9205      	str	r2, [sp, #20]
    3a04:	9203      	str	r2, [sp, #12]
    3a06:	46a8      	mov	r8, r5
    3a08:	9901      	ldr	r1, [sp, #4]
    3a0a:	460c      	mov	r4, r1
    3a0c:	f811 3b01 	ldrb.w	r3, [r1], #1
    3a10:	b10b      	cbz	r3, 3a16 <_vfiprintf_r+0xa6>
    3a12:	2b25      	cmp	r3, #37	; 0x25
    3a14:	d1f9      	bne.n	3a0a <_vfiprintf_r+0x9a>
    3a16:	9a01      	ldr	r2, [sp, #4]
    3a18:	1aa5      	subs	r5, r4, r2
    3a1a:	d019      	beq.n	3a50 <_vfiprintf_r+0xe0>
    3a1c:	990c      	ldr	r1, [sp, #48]	; 0x30
    3a1e:	980d      	ldr	r0, [sp, #52]	; 0x34
    3a20:	1c4b      	adds	r3, r1, #1
    3a22:	e888 0024 	stmia.w	r8, {r2, r5}
    3a26:	2b07      	cmp	r3, #7
    3a28:	eb00 0205 	add.w	r2, r0, r5
    3a2c:	920d      	str	r2, [sp, #52]	; 0x34
    3a2e:	f108 0808 	add.w	r8, r8, #8
    3a32:	930c      	str	r3, [sp, #48]	; 0x30
    3a34:	dd09      	ble.n	3a4a <_vfiprintf_r+0xda>
    3a36:	4650      	mov	r0, sl
    3a38:	4649      	mov	r1, r9
    3a3a:	aa0b      	add	r2, sp, #44	; 0x2c
    3a3c:	f7ff ff64 	bl	3908 <__sprint_r>
    3a40:	2800      	cmp	r0, #0
    3a42:	f040 839a 	bne.w	417a <_vfiprintf_r+0x80a>
    3a46:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    3a4a:	9803      	ldr	r0, [sp, #12]
    3a4c:	1942      	adds	r2, r0, r5
    3a4e:	9203      	str	r2, [sp, #12]
    3a50:	7821      	ldrb	r1, [r4, #0]
    3a52:	2900      	cmp	r1, #0
    3a54:	f000 838a 	beq.w	416c <_vfiprintf_r+0x7fc>
    3a58:	2200      	movs	r2, #0
    3a5a:	3401      	adds	r4, #1
    3a5c:	9401      	str	r4, [sp, #4]
    3a5e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3a62:	f04f 3cff 	mov.w	ip, #4294967295
    3a66:	9204      	str	r2, [sp, #16]
    3a68:	4617      	mov	r7, r2
    3a6a:	9801      	ldr	r0, [sp, #4]
    3a6c:	f810 3b01 	ldrb.w	r3, [r0], #1
    3a70:	9001      	str	r0, [sp, #4]
    3a72:	2b63      	cmp	r3, #99	; 0x63
    3a74:	f000 80b3 	beq.w	3bde <_vfiprintf_r+0x26e>
    3a78:	dc33      	bgt.n	3ae2 <_vfiprintf_r+0x172>
    3a7a:	2b39      	cmp	r3, #57	; 0x39
    3a7c:	dc1a      	bgt.n	3ab4 <_vfiprintf_r+0x144>
    3a7e:	2b31      	cmp	r3, #49	; 0x31
    3a80:	f280 8091 	bge.w	3ba6 <_vfiprintf_r+0x236>
    3a84:	2b2b      	cmp	r3, #43	; 0x2b
    3a86:	d101      	bne.n	3a8c <_vfiprintf_r+0x11c>
    3a88:	461a      	mov	r2, r3
    3a8a:	e7ee      	b.n	3a6a <_vfiprintf_r+0xfa>
    3a8c:	dc0a      	bgt.n	3aa4 <_vfiprintf_r+0x134>
    3a8e:	2b23      	cmp	r3, #35	; 0x23
    3a90:	d055      	beq.n	3b3e <_vfiprintf_r+0x1ce>
    3a92:	2b2a      	cmp	r3, #42	; 0x2a
    3a94:	d056      	beq.n	3b44 <_vfiprintf_r+0x1d4>
    3a96:	2b20      	cmp	r3, #32
    3a98:	f040 81f7 	bne.w	3e8a <_vfiprintf_r+0x51a>
    3a9c:	2a00      	cmp	r2, #0
    3a9e:	bf08      	it	eq
    3aa0:	2220      	moveq	r2, #32
    3aa2:	e7e2      	b.n	3a6a <_vfiprintf_r+0xfa>
    3aa4:	2b2e      	cmp	r3, #46	; 0x2e
    3aa6:	d058      	beq.n	3b5a <_vfiprintf_r+0x1ea>
    3aa8:	2b30      	cmp	r3, #48	; 0x30
    3aaa:	d079      	beq.n	3ba0 <_vfiprintf_r+0x230>
    3aac:	2b2d      	cmp	r3, #45	; 0x2d
    3aae:	f040 81ec 	bne.w	3e8a <_vfiprintf_r+0x51a>
    3ab2:	e04f      	b.n	3b54 <_vfiprintf_r+0x1e4>
    3ab4:	2b4f      	cmp	r3, #79	; 0x4f
    3ab6:	f000 80de 	beq.w	3c76 <_vfiprintf_r+0x306>
    3aba:	dc07      	bgt.n	3acc <_vfiprintf_r+0x15c>
    3abc:	2b44      	cmp	r3, #68	; 0x44
    3abe:	f040 81e4 	bne.w	3e8a <_vfiprintf_r+0x51a>
    3ac2:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3ac6:	f047 0710 	orr.w	r7, r7, #16
    3aca:	e090      	b.n	3bee <_vfiprintf_r+0x27e>
    3acc:	2b55      	cmp	r3, #85	; 0x55
    3ace:	f000 811f 	beq.w	3d10 <_vfiprintf_r+0x3a0>
    3ad2:	2b58      	cmp	r3, #88	; 0x58
    3ad4:	f040 81d9 	bne.w	3e8a <_vfiprintf_r+0x51a>
    3ad8:	4daf      	ldr	r5, [pc, #700]	; (3d98 <_vfiprintf_r+0x428>)
    3ada:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3ade:	9505      	str	r5, [sp, #20]
    3ae0:	e131      	b.n	3d46 <_vfiprintf_r+0x3d6>
    3ae2:	2b6f      	cmp	r3, #111	; 0x6f
    3ae4:	f000 80c9 	beq.w	3c7a <_vfiprintf_r+0x30a>
    3ae8:	dc10      	bgt.n	3b0c <_vfiprintf_r+0x19c>
    3aea:	2b69      	cmp	r3, #105	; 0x69
    3aec:	d024      	beq.n	3b38 <_vfiprintf_r+0x1c8>
    3aee:	dc07      	bgt.n	3b00 <_vfiprintf_r+0x190>
    3af0:	2b64      	cmp	r3, #100	; 0x64
    3af2:	d021      	beq.n	3b38 <_vfiprintf_r+0x1c8>
    3af4:	2b68      	cmp	r3, #104	; 0x68
    3af6:	f040 81c8 	bne.w	3e8a <_vfiprintf_r+0x51a>
    3afa:	f047 0740 	orr.w	r7, r7, #64	; 0x40
    3afe:	e7b4      	b.n	3a6a <_vfiprintf_r+0xfa>
    3b00:	2b6c      	cmp	r3, #108	; 0x6c
    3b02:	d05f      	beq.n	3bc4 <_vfiprintf_r+0x254>
    3b04:	2b6e      	cmp	r3, #110	; 0x6e
    3b06:	f040 81c0 	bne.w	3e8a <_vfiprintf_r+0x51a>
    3b0a:	e096      	b.n	3c3a <_vfiprintf_r+0x2ca>
    3b0c:	2b73      	cmp	r3, #115	; 0x73
    3b0e:	f000 80df 	beq.w	3cd0 <_vfiprintf_r+0x360>
    3b12:	dc06      	bgt.n	3b22 <_vfiprintf_r+0x1b2>
    3b14:	2b70      	cmp	r3, #112	; 0x70
    3b16:	f000 80cd 	beq.w	3cb4 <_vfiprintf_r+0x344>
    3b1a:	2b71      	cmp	r3, #113	; 0x71
    3b1c:	f040 81b5 	bne.w	3e8a <_vfiprintf_r+0x51a>
    3b20:	e05a      	b.n	3bd8 <_vfiprintf_r+0x268>
    3b22:	2b75      	cmp	r3, #117	; 0x75
    3b24:	f000 80f6 	beq.w	3d14 <_vfiprintf_r+0x3a4>
    3b28:	2b78      	cmp	r3, #120	; 0x78
    3b2a:	f040 81ae 	bne.w	3e8a <_vfiprintf_r+0x51a>
    3b2e:	4d9b      	ldr	r5, [pc, #620]	; (3d9c <_vfiprintf_r+0x42c>)
    3b30:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3b34:	9505      	str	r5, [sp, #20]
    3b36:	e106      	b.n	3d46 <_vfiprintf_r+0x3d6>
    3b38:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3b3c:	e057      	b.n	3bee <_vfiprintf_r+0x27e>
    3b3e:	f047 0701 	orr.w	r7, r7, #1
    3b42:	e792      	b.n	3a6a <_vfiprintf_r+0xfa>
    3b44:	1d33      	adds	r3, r6, #4
    3b46:	6836      	ldr	r6, [r6, #0]
    3b48:	2e00      	cmp	r6, #0
    3b4a:	9604      	str	r6, [sp, #16]
    3b4c:	da15      	bge.n	3b7a <_vfiprintf_r+0x20a>
    3b4e:	4270      	negs	r0, r6
    3b50:	9004      	str	r0, [sp, #16]
    3b52:	461e      	mov	r6, r3
    3b54:	f047 0704 	orr.w	r7, r7, #4
    3b58:	e787      	b.n	3a6a <_vfiprintf_r+0xfa>
    3b5a:	9901      	ldr	r1, [sp, #4]
    3b5c:	f811 3b01 	ldrb.w	r3, [r1], #1
    3b60:	2b2a      	cmp	r3, #42	; 0x2a
    3b62:	9101      	str	r1, [sp, #4]
    3b64:	d10b      	bne.n	3b7e <_vfiprintf_r+0x20e>
    3b66:	f8d6 c000 	ldr.w	ip, [r6]
    3b6a:	1d33      	adds	r3, r6, #4
    3b6c:	f1bc 0f00 	cmp.w	ip, #0
    3b70:	da03      	bge.n	3b7a <_vfiprintf_r+0x20a>
    3b72:	461e      	mov	r6, r3
    3b74:	f04f 3cff 	mov.w	ip, #4294967295
    3b78:	e777      	b.n	3a6a <_vfiprintf_r+0xfa>
    3b7a:	461e      	mov	r6, r3
    3b7c:	e775      	b.n	3a6a <_vfiprintf_r+0xfa>
    3b7e:	f04f 0c00 	mov.w	ip, #0
    3b82:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    3b86:	2809      	cmp	r0, #9
    3b88:	d807      	bhi.n	3b9a <_vfiprintf_r+0x22a>
    3b8a:	9901      	ldr	r1, [sp, #4]
    3b8c:	230a      	movs	r3, #10
    3b8e:	fb03 0c0c 	mla	ip, r3, ip, r0
    3b92:	f811 3b01 	ldrb.w	r3, [r1], #1
    3b96:	9101      	str	r1, [sp, #4]
    3b98:	e7f3      	b.n	3b82 <_vfiprintf_r+0x212>
    3b9a:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
    3b9e:	e768      	b.n	3a72 <_vfiprintf_r+0x102>
    3ba0:	f047 0780 	orr.w	r7, r7, #128	; 0x80
    3ba4:	e761      	b.n	3a6a <_vfiprintf_r+0xfa>
    3ba6:	9801      	ldr	r0, [sp, #4]
    3ba8:	2100      	movs	r1, #0
    3baa:	3b30      	subs	r3, #48	; 0x30
    3bac:	240a      	movs	r4, #10
    3bae:	fb04 3101 	mla	r1, r4, r1, r3
    3bb2:	f810 3b01 	ldrb.w	r3, [r0], #1
    3bb6:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
    3bba:	2c09      	cmp	r4, #9
    3bbc:	9001      	str	r0, [sp, #4]
    3bbe:	d9f4      	bls.n	3baa <_vfiprintf_r+0x23a>
    3bc0:	9104      	str	r1, [sp, #16]
    3bc2:	e756      	b.n	3a72 <_vfiprintf_r+0x102>
    3bc4:	9901      	ldr	r1, [sp, #4]
    3bc6:	780b      	ldrb	r3, [r1, #0]
    3bc8:	2b6c      	cmp	r3, #108	; 0x6c
    3bca:	d102      	bne.n	3bd2 <_vfiprintf_r+0x262>
    3bcc:	1c48      	adds	r0, r1, #1
    3bce:	9001      	str	r0, [sp, #4]
    3bd0:	e002      	b.n	3bd8 <_vfiprintf_r+0x268>
    3bd2:	f047 0710 	orr.w	r7, r7, #16
    3bd6:	e748      	b.n	3a6a <_vfiprintf_r+0xfa>
    3bd8:	f047 0720 	orr.w	r7, r7, #32
    3bdc:	e745      	b.n	3a6a <_vfiprintf_r+0xfa>
    3bde:	6832      	ldr	r2, [r6, #0]
    3be0:	2500      	movs	r5, #0
    3be2:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    3be6:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
    3bea:	3604      	adds	r6, #4
    3bec:	e157      	b.n	3e9e <_vfiprintf_r+0x52e>
    3bee:	06ba      	lsls	r2, r7, #26
    3bf0:	d507      	bpl.n	3c02 <_vfiprintf_r+0x292>
    3bf2:	3607      	adds	r6, #7
    3bf4:	f026 0507 	bic.w	r5, r6, #7
    3bf8:	f105 0608 	add.w	r6, r5, #8
    3bfc:	e9d5 4500 	ldrd	r4, r5, [r5]
    3c00:	e00f      	b.n	3c22 <_vfiprintf_r+0x2b2>
    3c02:	f017 0f10 	tst.w	r7, #16
    3c06:	f106 0104 	add.w	r1, r6, #4
    3c0a:	d001      	beq.n	3c10 <_vfiprintf_r+0x2a0>
    3c0c:	6832      	ldr	r2, [r6, #0]
    3c0e:	e005      	b.n	3c1c <_vfiprintf_r+0x2ac>
    3c10:	f017 0f40 	tst.w	r7, #64	; 0x40
    3c14:	6832      	ldr	r2, [r6, #0]
    3c16:	d001      	beq.n	3c1c <_vfiprintf_r+0x2ac>
    3c18:	b214      	sxth	r4, r2
    3c1a:	e000      	b.n	3c1e <_vfiprintf_r+0x2ae>
    3c1c:	4614      	mov	r4, r2
    3c1e:	17e5      	asrs	r5, r4, #31
    3c20:	460e      	mov	r6, r1
    3c22:	2c00      	cmp	r4, #0
    3c24:	f175 0200 	sbcs.w	r2, r5, #0
    3c28:	f280 80ba 	bge.w	3da0 <_vfiprintf_r+0x430>
    3c2c:	232d      	movs	r3, #45	; 0x2d
    3c2e:	4264      	negs	r4, r4
    3c30:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    3c34:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    3c38:	e0b2      	b.n	3da0 <_vfiprintf_r+0x430>
    3c3a:	f017 0f20 	tst.w	r7, #32
    3c3e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3c42:	f106 0204 	add.w	r2, r6, #4
    3c46:	d005      	beq.n	3c54 <_vfiprintf_r+0x2e4>
    3c48:	9c03      	ldr	r4, [sp, #12]
    3c4a:	6835      	ldr	r5, [r6, #0]
    3c4c:	17e0      	asrs	r0, r4, #31
    3c4e:	602c      	str	r4, [r5, #0]
    3c50:	6068      	str	r0, [r5, #4]
    3c52:	e004      	b.n	3c5e <_vfiprintf_r+0x2ee>
    3c54:	06fb      	lsls	r3, r7, #27
    3c56:	d504      	bpl.n	3c62 <_vfiprintf_r+0x2f2>
    3c58:	6833      	ldr	r3, [r6, #0]
    3c5a:	9903      	ldr	r1, [sp, #12]
    3c5c:	6019      	str	r1, [r3, #0]
    3c5e:	4616      	mov	r6, r2
    3c60:	e6d2      	b.n	3a08 <_vfiprintf_r+0x98>
    3c62:	6830      	ldr	r0, [r6, #0]
    3c64:	9c03      	ldr	r4, [sp, #12]
    3c66:	f017 0f40 	tst.w	r7, #64	; 0x40
    3c6a:	f106 0604 	add.w	r6, r6, #4
    3c6e:	bf14      	ite	ne
    3c70:	8004      	strhne	r4, [r0, #0]
    3c72:	6004      	streq	r4, [r0, #0]
    3c74:	e6c8      	b.n	3a08 <_vfiprintf_r+0x98>
    3c76:	f047 0710 	orr.w	r7, r7, #16
    3c7a:	f017 0020 	ands.w	r0, r7, #32
    3c7e:	d008      	beq.n	3c92 <_vfiprintf_r+0x322>
    3c80:	1df3      	adds	r3, r6, #7
    3c82:	f023 0507 	bic.w	r5, r3, #7
    3c86:	f105 0608 	add.w	r6, r5, #8
    3c8a:	e9d5 4500 	ldrd	r4, r5, [r5]
    3c8e:	2000      	movs	r0, #0
    3c90:	e07d      	b.n	3d8e <_vfiprintf_r+0x41e>
    3c92:	f017 0110 	ands.w	r1, r7, #16
    3c96:	f106 0204 	add.w	r2, r6, #4
    3c9a:	d106      	bne.n	3caa <_vfiprintf_r+0x33a>
    3c9c:	f017 0040 	ands.w	r0, r7, #64	; 0x40
    3ca0:	d003      	beq.n	3caa <_vfiprintf_r+0x33a>
    3ca2:	8834      	ldrh	r4, [r6, #0]
    3ca4:	2500      	movs	r5, #0
    3ca6:	4616      	mov	r6, r2
    3ca8:	e7f1      	b.n	3c8e <_vfiprintf_r+0x31e>
    3caa:	6836      	ldr	r6, [r6, #0]
    3cac:	2500      	movs	r5, #0
    3cae:	4634      	mov	r4, r6
    3cb0:	4616      	mov	r6, r2
    3cb2:	e06c      	b.n	3d8e <_vfiprintf_r+0x41e>
    3cb4:	4b39      	ldr	r3, [pc, #228]	; (3d9c <_vfiprintf_r+0x42c>)
    3cb6:	6834      	ldr	r4, [r6, #0]
    3cb8:	9305      	str	r3, [sp, #20]
    3cba:	2130      	movs	r1, #48	; 0x30
    3cbc:	2278      	movs	r2, #120	; 0x78
    3cbe:	2500      	movs	r5, #0
    3cc0:	f047 0702 	orr.w	r7, r7, #2
    3cc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    3cc8:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
    3ccc:	3604      	adds	r6, #4
    3cce:	e05d      	b.n	3d8c <_vfiprintf_r+0x41c>
    3cd0:	4631      	mov	r1, r6
    3cd2:	2500      	movs	r5, #0
    3cd4:	f8d1 b000 	ldr.w	fp, [r1]
    3cd8:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
    3cdc:	3604      	adds	r6, #4
    3cde:	45ac      	cmp	ip, r5
    3ce0:	4658      	mov	r0, fp
    3ce2:	db11      	blt.n	3d08 <_vfiprintf_r+0x398>
    3ce4:	4662      	mov	r2, ip
    3ce6:	4629      	mov	r1, r5
    3ce8:	f8cd c000 	str.w	ip, [sp]
    3cec:	f001 fa4c 	bl	5188 <memchr>
    3cf0:	f8dd c000 	ldr.w	ip, [sp]
    3cf4:	2800      	cmp	r0, #0
    3cf6:	f000 80d6 	beq.w	3ea6 <_vfiprintf_r+0x536>
    3cfa:	ebcb 0400 	rsb	r4, fp, r0
    3cfe:	4564      	cmp	r4, ip
    3d00:	f340 80d3 	ble.w	3eaa <_vfiprintf_r+0x53a>
    3d04:	4664      	mov	r4, ip
    3d06:	e0d0      	b.n	3eaa <_vfiprintf_r+0x53a>
    3d08:	f7ff fdf6 	bl	38f8 <strlen>
    3d0c:	4604      	mov	r4, r0
    3d0e:	e0cc      	b.n	3eaa <_vfiprintf_r+0x53a>
    3d10:	f047 0710 	orr.w	r7, r7, #16
    3d14:	06bd      	lsls	r5, r7, #26
    3d16:	d507      	bpl.n	3d28 <_vfiprintf_r+0x3b8>
    3d18:	1df0      	adds	r0, r6, #7
    3d1a:	f020 0407 	bic.w	r4, r0, #7
    3d1e:	f104 0608 	add.w	r6, r4, #8
    3d22:	e9d4 4500 	ldrd	r4, r5, [r4]
    3d26:	e00c      	b.n	3d42 <_vfiprintf_r+0x3d2>
    3d28:	f017 0f10 	tst.w	r7, #16
    3d2c:	f106 0304 	add.w	r3, r6, #4
    3d30:	d103      	bne.n	3d3a <_vfiprintf_r+0x3ca>
    3d32:	067c      	lsls	r4, r7, #25
    3d34:	d501      	bpl.n	3d3a <_vfiprintf_r+0x3ca>
    3d36:	8834      	ldrh	r4, [r6, #0]
    3d38:	e001      	b.n	3d3e <_vfiprintf_r+0x3ce>
    3d3a:	6835      	ldr	r5, [r6, #0]
    3d3c:	462c      	mov	r4, r5
    3d3e:	2500      	movs	r5, #0
    3d40:	461e      	mov	r6, r3
    3d42:	2001      	movs	r0, #1
    3d44:	e023      	b.n	3d8e <_vfiprintf_r+0x41e>
    3d46:	06b8      	lsls	r0, r7, #26
    3d48:	d507      	bpl.n	3d5a <_vfiprintf_r+0x3ea>
    3d4a:	1df4      	adds	r4, r6, #7
    3d4c:	f024 0107 	bic.w	r1, r4, #7
    3d50:	f101 0608 	add.w	r6, r1, #8
    3d54:	e9d1 4500 	ldrd	r4, r5, [r1]
    3d58:	e00c      	b.n	3d74 <_vfiprintf_r+0x404>
    3d5a:	f017 0f10 	tst.w	r7, #16
    3d5e:	f106 0004 	add.w	r0, r6, #4
    3d62:	d103      	bne.n	3d6c <_vfiprintf_r+0x3fc>
    3d64:	0679      	lsls	r1, r7, #25
    3d66:	d501      	bpl.n	3d6c <_vfiprintf_r+0x3fc>
    3d68:	8834      	ldrh	r4, [r6, #0]
    3d6a:	e001      	b.n	3d70 <_vfiprintf_r+0x400>
    3d6c:	6836      	ldr	r6, [r6, #0]
    3d6e:	4634      	mov	r4, r6
    3d70:	2500      	movs	r5, #0
    3d72:	4606      	mov	r6, r0
    3d74:	07fa      	lsls	r2, r7, #31
    3d76:	d509      	bpl.n	3d8c <_vfiprintf_r+0x41c>
    3d78:	ea54 0205 	orrs.w	r2, r4, r5
    3d7c:	d006      	beq.n	3d8c <_vfiprintf_r+0x41c>
    3d7e:	2230      	movs	r2, #48	; 0x30
    3d80:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
    3d84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    3d88:	f047 0702 	orr.w	r7, r7, #2
    3d8c:	2002      	movs	r0, #2
    3d8e:	2100      	movs	r1, #0
    3d90:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    3d94:	e005      	b.n	3da2 <_vfiprintf_r+0x432>
    3d96:	bf00      	nop
    3d98:	00006038 	.word	0x00006038
    3d9c:	00006049 	.word	0x00006049
    3da0:	2001      	movs	r0, #1
    3da2:	f1bc 0f00 	cmp.w	ip, #0
    3da6:	bfa8      	it	ge
    3da8:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
    3dac:	ea54 0105 	orrs.w	r1, r4, r5
    3db0:	d102      	bne.n	3db8 <_vfiprintf_r+0x448>
    3db2:	f1bc 0f00 	cmp.w	ip, #0
    3db6:	d058      	beq.n	3e6a <_vfiprintf_r+0x4fa>
    3db8:	2801      	cmp	r0, #1
    3dba:	d01d      	beq.n	3df8 <_vfiprintf_r+0x488>
    3dbc:	2802      	cmp	r0, #2
    3dbe:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
    3dc2:	d041      	beq.n	3e48 <_vfiprintf_r+0x4d8>
    3dc4:	f004 0207 	and.w	r2, r4, #7
    3dc8:	08e4      	lsrs	r4, r4, #3
    3dca:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
    3dce:	08e9      	lsrs	r1, r5, #3
    3dd0:	4604      	mov	r4, r0
    3dd2:	460d      	mov	r5, r1
    3dd4:	3230      	adds	r2, #48	; 0x30
    3dd6:	ea54 0105 	orrs.w	r1, r4, r5
    3dda:	469b      	mov	fp, r3
    3ddc:	701a      	strb	r2, [r3, #0]
    3dde:	f103 33ff 	add.w	r3, r3, #4294967295
    3de2:	d1ef      	bne.n	3dc4 <_vfiprintf_r+0x454>
    3de4:	07f8      	lsls	r0, r7, #31
    3de6:	465d      	mov	r5, fp
    3de8:	d54a      	bpl.n	3e80 <_vfiprintf_r+0x510>
    3dea:	2a30      	cmp	r2, #48	; 0x30
    3dec:	d048      	beq.n	3e80 <_vfiprintf_r+0x510>
    3dee:	2230      	movs	r2, #48	; 0x30
    3df0:	469b      	mov	fp, r3
    3df2:	f805 2c01 	strb.w	r2, [r5, #-1]
    3df6:	e043      	b.n	3e80 <_vfiprintf_r+0x510>
    3df8:	2d00      	cmp	r5, #0
    3dfa:	bf08      	it	eq
    3dfc:	2c0a      	cmpeq	r4, #10
    3dfe:	d203      	bcs.n	3e08 <_vfiprintf_r+0x498>
    3e00:	3430      	adds	r4, #48	; 0x30
    3e02:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
    3e06:	e036      	b.n	3e76 <_vfiprintf_r+0x506>
    3e08:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
    3e0c:	9302      	str	r3, [sp, #8]
    3e0e:	4620      	mov	r0, r4
    3e10:	4629      	mov	r1, r5
    3e12:	220a      	movs	r2, #10
    3e14:	2300      	movs	r3, #0
    3e16:	f8cd c000 	str.w	ip, [sp]
    3e1a:	f001 fd1b 	bl	5854 <__aeabi_uldivmod>
    3e1e:	9802      	ldr	r0, [sp, #8]
    3e20:	f8dd b008 	ldr.w	fp, [sp, #8]
    3e24:	3230      	adds	r2, #48	; 0x30
    3e26:	f800 2901 	strb.w	r2, [r0], #-1
    3e2a:	4629      	mov	r1, r5
    3e2c:	9002      	str	r0, [sp, #8]
    3e2e:	220a      	movs	r2, #10
    3e30:	4620      	mov	r0, r4
    3e32:	2300      	movs	r3, #0
    3e34:	f001 fd0e 	bl	5854 <__aeabi_uldivmod>
    3e38:	4604      	mov	r4, r0
    3e3a:	460d      	mov	r5, r1
    3e3c:	ea54 0105 	orrs.w	r1, r4, r5
    3e40:	f8dd c000 	ldr.w	ip, [sp]
    3e44:	d1e3      	bne.n	3e0e <_vfiprintf_r+0x49e>
    3e46:	e01b      	b.n	3e80 <_vfiprintf_r+0x510>
    3e48:	f004 000f 	and.w	r0, r4, #15
    3e4c:	9905      	ldr	r1, [sp, #20]
    3e4e:	0924      	lsrs	r4, r4, #4
    3e50:	5c0a      	ldrb	r2, [r1, r0]
    3e52:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
    3e56:	0929      	lsrs	r1, r5, #4
    3e58:	4604      	mov	r4, r0
    3e5a:	460d      	mov	r5, r1
    3e5c:	469b      	mov	fp, r3
    3e5e:	f803 2901 	strb.w	r2, [r3], #-1
    3e62:	ea54 0205 	orrs.w	r2, r4, r5
    3e66:	d1ef      	bne.n	3e48 <_vfiprintf_r+0x4d8>
    3e68:	e00a      	b.n	3e80 <_vfiprintf_r+0x510>
    3e6a:	b938      	cbnz	r0, 3e7c <_vfiprintf_r+0x50c>
    3e6c:	07f9      	lsls	r1, r7, #31
    3e6e:	d505      	bpl.n	3e7c <_vfiprintf_r+0x50c>
    3e70:	2030      	movs	r0, #48	; 0x30
    3e72:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
    3e76:	f10d 0b5f 	add.w	fp, sp, #95	; 0x5f
    3e7a:	e001      	b.n	3e80 <_vfiprintf_r+0x510>
    3e7c:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
    3e80:	ad18      	add	r5, sp, #96	; 0x60
    3e82:	ebcb 0405 	rsb	r4, fp, r5
    3e86:	4665      	mov	r5, ip
    3e88:	e00f      	b.n	3eaa <_vfiprintf_r+0x53a>
    3e8a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3e8e:	2b00      	cmp	r3, #0
    3e90:	f000 816c 	beq.w	416c <_vfiprintf_r+0x7fc>
    3e94:	2500      	movs	r5, #0
    3e96:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    3e9a:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
    3e9e:	2401      	movs	r4, #1
    3ea0:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
    3ea4:	e001      	b.n	3eaa <_vfiprintf_r+0x53a>
    3ea6:	4664      	mov	r4, ip
    3ea8:	4605      	mov	r5, r0
    3eaa:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3eae:	42ac      	cmp	r4, r5
    3eb0:	bfac      	ite	ge
    3eb2:	4621      	movge	r1, r4
    3eb4:	4629      	movlt	r1, r5
    3eb6:	9102      	str	r1, [sp, #8]
    3eb8:	b113      	cbz	r3, 3ec0 <_vfiprintf_r+0x550>
    3eba:	9802      	ldr	r0, [sp, #8]
    3ebc:	1c42      	adds	r2, r0, #1
    3ebe:	9202      	str	r2, [sp, #8]
    3ec0:	f017 0102 	ands.w	r1, r7, #2
    3ec4:	9106      	str	r1, [sp, #24]
    3ec6:	d002      	beq.n	3ece <_vfiprintf_r+0x55e>
    3ec8:	9b02      	ldr	r3, [sp, #8]
    3eca:	1c98      	adds	r0, r3, #2
    3ecc:	9002      	str	r0, [sp, #8]
    3ece:	f017 0284 	ands.w	r2, r7, #132	; 0x84
    3ed2:	9207      	str	r2, [sp, #28]
    3ed4:	d13a      	bne.n	3f4c <_vfiprintf_r+0x5dc>
    3ed6:	9904      	ldr	r1, [sp, #16]
    3ed8:	9b02      	ldr	r3, [sp, #8]
    3eda:	1acb      	subs	r3, r1, r3
    3edc:	2b00      	cmp	r3, #0
    3ede:	dd35      	ble.n	3f4c <_vfiprintf_r+0x5dc>
    3ee0:	48a0      	ldr	r0, [pc, #640]	; (4164 <_vfiprintf_r+0x7f4>)
    3ee2:	2b10      	cmp	r3, #16
    3ee4:	f8c8 0000 	str.w	r0, [r8]
    3ee8:	dd1a      	ble.n	3f20 <_vfiprintf_r+0x5b0>
    3eea:	990c      	ldr	r1, [sp, #48]	; 0x30
    3eec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3eee:	2010      	movs	r0, #16
    3ef0:	f8c8 0004 	str.w	r0, [r8, #4]
    3ef4:	1c48      	adds	r0, r1, #1
    3ef6:	3210      	adds	r2, #16
    3ef8:	2807      	cmp	r0, #7
    3efa:	920d      	str	r2, [sp, #52]	; 0x34
    3efc:	f108 0808 	add.w	r8, r8, #8
    3f00:	900c      	str	r0, [sp, #48]	; 0x30
    3f02:	dd0b      	ble.n	3f1c <_vfiprintf_r+0x5ac>
    3f04:	4650      	mov	r0, sl
    3f06:	4649      	mov	r1, r9
    3f08:	aa0b      	add	r2, sp, #44	; 0x2c
    3f0a:	9300      	str	r3, [sp, #0]
    3f0c:	f7ff fcfc 	bl	3908 <__sprint_r>
    3f10:	9b00      	ldr	r3, [sp, #0]
    3f12:	2800      	cmp	r0, #0
    3f14:	f040 8131 	bne.w	417a <_vfiprintf_r+0x80a>
    3f18:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    3f1c:	3b10      	subs	r3, #16
    3f1e:	e7df      	b.n	3ee0 <_vfiprintf_r+0x570>
    3f20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3f22:	f8c8 3004 	str.w	r3, [r8, #4]
    3f26:	18d1      	adds	r1, r2, r3
    3f28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3f2a:	910d      	str	r1, [sp, #52]	; 0x34
    3f2c:	1c58      	adds	r0, r3, #1
    3f2e:	2807      	cmp	r0, #7
    3f30:	f108 0808 	add.w	r8, r8, #8
    3f34:	900c      	str	r0, [sp, #48]	; 0x30
    3f36:	dd09      	ble.n	3f4c <_vfiprintf_r+0x5dc>
    3f38:	4650      	mov	r0, sl
    3f3a:	4649      	mov	r1, r9
    3f3c:	aa0b      	add	r2, sp, #44	; 0x2c
    3f3e:	f7ff fce3 	bl	3908 <__sprint_r>
    3f42:	2800      	cmp	r0, #0
    3f44:	f040 8119 	bne.w	417a <_vfiprintf_r+0x80a>
    3f48:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    3f4c:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    3f50:	b1d2      	cbz	r2, 3f88 <_vfiprintf_r+0x618>
    3f52:	f10d 0127 	add.w	r1, sp, #39	; 0x27
    3f56:	f8c8 1000 	str.w	r1, [r8]
    3f5a:	990c      	ldr	r1, [sp, #48]	; 0x30
    3f5c:	980d      	ldr	r0, [sp, #52]	; 0x34
    3f5e:	2301      	movs	r3, #1
    3f60:	f8c8 3004 	str.w	r3, [r8, #4]
    3f64:	1c4b      	adds	r3, r1, #1
    3f66:	1c42      	adds	r2, r0, #1
    3f68:	2b07      	cmp	r3, #7
    3f6a:	920d      	str	r2, [sp, #52]	; 0x34
    3f6c:	f108 0808 	add.w	r8, r8, #8
    3f70:	930c      	str	r3, [sp, #48]	; 0x30
    3f72:	dd09      	ble.n	3f88 <_vfiprintf_r+0x618>
    3f74:	4650      	mov	r0, sl
    3f76:	4649      	mov	r1, r9
    3f78:	aa0b      	add	r2, sp, #44	; 0x2c
    3f7a:	f7ff fcc5 	bl	3908 <__sprint_r>
    3f7e:	2800      	cmp	r0, #0
    3f80:	f040 80fb 	bne.w	417a <_vfiprintf_r+0x80a>
    3f84:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    3f88:	9806      	ldr	r0, [sp, #24]
    3f8a:	b1c8      	cbz	r0, 3fc0 <_vfiprintf_r+0x650>
    3f8c:	aa0a      	add	r2, sp, #40	; 0x28
    3f8e:	f8c8 2000 	str.w	r2, [r8]
    3f92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3f94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3f96:	2102      	movs	r1, #2
    3f98:	f8c8 1004 	str.w	r1, [r8, #4]
    3f9c:	1c51      	adds	r1, r2, #1
    3f9e:	1c98      	adds	r0, r3, #2
    3fa0:	2907      	cmp	r1, #7
    3fa2:	900d      	str	r0, [sp, #52]	; 0x34
    3fa4:	f108 0808 	add.w	r8, r8, #8
    3fa8:	910c      	str	r1, [sp, #48]	; 0x30
    3faa:	dd09      	ble.n	3fc0 <_vfiprintf_r+0x650>
    3fac:	4650      	mov	r0, sl
    3fae:	4649      	mov	r1, r9
    3fb0:	aa0b      	add	r2, sp, #44	; 0x2c
    3fb2:	f7ff fca9 	bl	3908 <__sprint_r>
    3fb6:	2800      	cmp	r0, #0
    3fb8:	f040 80df 	bne.w	417a <_vfiprintf_r+0x80a>
    3fbc:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    3fc0:	9b07      	ldr	r3, [sp, #28]
    3fc2:	2b80      	cmp	r3, #128	; 0x80
    3fc4:	d13a      	bne.n	403c <_vfiprintf_r+0x6cc>
    3fc6:	9804      	ldr	r0, [sp, #16]
    3fc8:	9a02      	ldr	r2, [sp, #8]
    3fca:	1a83      	subs	r3, r0, r2
    3fcc:	2b00      	cmp	r3, #0
    3fce:	dd35      	ble.n	403c <_vfiprintf_r+0x6cc>
    3fd0:	4965      	ldr	r1, [pc, #404]	; (4168 <_vfiprintf_r+0x7f8>)
    3fd2:	2b10      	cmp	r3, #16
    3fd4:	f8c8 1000 	str.w	r1, [r8]
    3fd8:	dd1a      	ble.n	4010 <_vfiprintf_r+0x6a0>
    3fda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3fdc:	980d      	ldr	r0, [sp, #52]	; 0x34
    3fde:	2110      	movs	r1, #16
    3fe0:	f8c8 1004 	str.w	r1, [r8, #4]
    3fe4:	1c51      	adds	r1, r2, #1
    3fe6:	3010      	adds	r0, #16
    3fe8:	2907      	cmp	r1, #7
    3fea:	900d      	str	r0, [sp, #52]	; 0x34
    3fec:	f108 0808 	add.w	r8, r8, #8
    3ff0:	910c      	str	r1, [sp, #48]	; 0x30
    3ff2:	dd0b      	ble.n	400c <_vfiprintf_r+0x69c>
    3ff4:	4650      	mov	r0, sl
    3ff6:	4649      	mov	r1, r9
    3ff8:	aa0b      	add	r2, sp, #44	; 0x2c
    3ffa:	9300      	str	r3, [sp, #0]
    3ffc:	f7ff fc84 	bl	3908 <__sprint_r>
    4000:	9b00      	ldr	r3, [sp, #0]
    4002:	2800      	cmp	r0, #0
    4004:	f040 80b9 	bne.w	417a <_vfiprintf_r+0x80a>
    4008:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    400c:	3b10      	subs	r3, #16
    400e:	e7df      	b.n	3fd0 <_vfiprintf_r+0x660>
    4010:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4012:	980d      	ldr	r0, [sp, #52]	; 0x34
    4014:	f8c8 3004 	str.w	r3, [r8, #4]
    4018:	1c51      	adds	r1, r2, #1
    401a:	18c3      	adds	r3, r0, r3
    401c:	2907      	cmp	r1, #7
    401e:	930d      	str	r3, [sp, #52]	; 0x34
    4020:	f108 0808 	add.w	r8, r8, #8
    4024:	910c      	str	r1, [sp, #48]	; 0x30
    4026:	dd09      	ble.n	403c <_vfiprintf_r+0x6cc>
    4028:	4650      	mov	r0, sl
    402a:	4649      	mov	r1, r9
    402c:	aa0b      	add	r2, sp, #44	; 0x2c
    402e:	f7ff fc6b 	bl	3908 <__sprint_r>
    4032:	2800      	cmp	r0, #0
    4034:	f040 80a1 	bne.w	417a <_vfiprintf_r+0x80a>
    4038:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    403c:	1b2d      	subs	r5, r5, r4
    403e:	2d00      	cmp	r5, #0
    4040:	dd32      	ble.n	40a8 <_vfiprintf_r+0x738>
    4042:	4849      	ldr	r0, [pc, #292]	; (4168 <_vfiprintf_r+0x7f8>)
    4044:	2d10      	cmp	r5, #16
    4046:	f8c8 0000 	str.w	r0, [r8]
    404a:	dd18      	ble.n	407e <_vfiprintf_r+0x70e>
    404c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    404e:	980d      	ldr	r0, [sp, #52]	; 0x34
    4050:	1c53      	adds	r3, r2, #1
    4052:	2110      	movs	r1, #16
    4054:	3010      	adds	r0, #16
    4056:	2b07      	cmp	r3, #7
    4058:	f8c8 1004 	str.w	r1, [r8, #4]
    405c:	900d      	str	r0, [sp, #52]	; 0x34
    405e:	f108 0808 	add.w	r8, r8, #8
    4062:	930c      	str	r3, [sp, #48]	; 0x30
    4064:	dd09      	ble.n	407a <_vfiprintf_r+0x70a>
    4066:	4650      	mov	r0, sl
    4068:	4649      	mov	r1, r9
    406a:	aa0b      	add	r2, sp, #44	; 0x2c
    406c:	f7ff fc4c 	bl	3908 <__sprint_r>
    4070:	2800      	cmp	r0, #0
    4072:	f040 8082 	bne.w	417a <_vfiprintf_r+0x80a>
    4076:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    407a:	3d10      	subs	r5, #16
    407c:	e7e1      	b.n	4042 <_vfiprintf_r+0x6d2>
    407e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4080:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4082:	f8c8 5004 	str.w	r5, [r8, #4]
    4086:	1c51      	adds	r1, r2, #1
    4088:	195d      	adds	r5, r3, r5
    408a:	2907      	cmp	r1, #7
    408c:	950d      	str	r5, [sp, #52]	; 0x34
    408e:	f108 0808 	add.w	r8, r8, #8
    4092:	910c      	str	r1, [sp, #48]	; 0x30
    4094:	dd08      	ble.n	40a8 <_vfiprintf_r+0x738>
    4096:	4650      	mov	r0, sl
    4098:	4649      	mov	r1, r9
    409a:	aa0b      	add	r2, sp, #44	; 0x2c
    409c:	f7ff fc34 	bl	3908 <__sprint_r>
    40a0:	2800      	cmp	r0, #0
    40a2:	d16a      	bne.n	417a <_vfiprintf_r+0x80a>
    40a4:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    40a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    40aa:	980d      	ldr	r0, [sp, #52]	; 0x34
    40ac:	f8c8 4004 	str.w	r4, [r8, #4]
    40b0:	1c51      	adds	r1, r2, #1
    40b2:	1904      	adds	r4, r0, r4
    40b4:	2907      	cmp	r1, #7
    40b6:	f8c8 b000 	str.w	fp, [r8]
    40ba:	940d      	str	r4, [sp, #52]	; 0x34
    40bc:	f108 0308 	add.w	r3, r8, #8
    40c0:	910c      	str	r1, [sp, #48]	; 0x30
    40c2:	dd07      	ble.n	40d4 <_vfiprintf_r+0x764>
    40c4:	4650      	mov	r0, sl
    40c6:	4649      	mov	r1, r9
    40c8:	aa0b      	add	r2, sp, #44	; 0x2c
    40ca:	f7ff fc1d 	bl	3908 <__sprint_r>
    40ce:	2800      	cmp	r0, #0
    40d0:	d153      	bne.n	417a <_vfiprintf_r+0x80a>
    40d2:	ab18      	add	r3, sp, #96	; 0x60
    40d4:	077a      	lsls	r2, r7, #29
    40d6:	d40b      	bmi.n	40f0 <_vfiprintf_r+0x780>
    40d8:	9b03      	ldr	r3, [sp, #12]
    40da:	9a02      	ldr	r2, [sp, #8]
    40dc:	9904      	ldr	r1, [sp, #16]
    40de:	980d      	ldr	r0, [sp, #52]	; 0x34
    40e0:	428a      	cmp	r2, r1
    40e2:	bfac      	ite	ge
    40e4:	189b      	addge	r3, r3, r2
    40e6:	185b      	addlt	r3, r3, r1
    40e8:	9303      	str	r3, [sp, #12]
    40ea:	2800      	cmp	r0, #0
    40ec:	d035      	beq.n	415a <_vfiprintf_r+0x7ea>
    40ee:	e02e      	b.n	414e <_vfiprintf_r+0x7de>
    40f0:	9c04      	ldr	r4, [sp, #16]
    40f2:	9802      	ldr	r0, [sp, #8]
    40f4:	1a24      	subs	r4, r4, r0
    40f6:	2c00      	cmp	r4, #0
    40f8:	ddee      	ble.n	40d8 <_vfiprintf_r+0x768>
    40fa:	4a1a      	ldr	r2, [pc, #104]	; (4164 <_vfiprintf_r+0x7f4>)
    40fc:	2c10      	cmp	r4, #16
    40fe:	601a      	str	r2, [r3, #0]
    4100:	dd14      	ble.n	412c <_vfiprintf_r+0x7bc>
    4102:	980c      	ldr	r0, [sp, #48]	; 0x30
    4104:	990d      	ldr	r1, [sp, #52]	; 0x34
    4106:	2210      	movs	r2, #16
    4108:	605a      	str	r2, [r3, #4]
    410a:	1c42      	adds	r2, r0, #1
    410c:	3110      	adds	r1, #16
    410e:	3308      	adds	r3, #8
    4110:	2a07      	cmp	r2, #7
    4112:	910d      	str	r1, [sp, #52]	; 0x34
    4114:	920c      	str	r2, [sp, #48]	; 0x30
    4116:	dd07      	ble.n	4128 <_vfiprintf_r+0x7b8>
    4118:	4650      	mov	r0, sl
    411a:	4649      	mov	r1, r9
    411c:	aa0b      	add	r2, sp, #44	; 0x2c
    411e:	f7ff fbf3 	bl	3908 <__sprint_r>
    4122:	2800      	cmp	r0, #0
    4124:	d129      	bne.n	417a <_vfiprintf_r+0x80a>
    4126:	ab18      	add	r3, sp, #96	; 0x60
    4128:	3c10      	subs	r4, #16
    412a:	e7e6      	b.n	40fa <_vfiprintf_r+0x78a>
    412c:	990c      	ldr	r1, [sp, #48]	; 0x30
    412e:	605c      	str	r4, [r3, #4]
    4130:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4132:	1c48      	adds	r0, r1, #1
    4134:	191c      	adds	r4, r3, r4
    4136:	2807      	cmp	r0, #7
    4138:	940d      	str	r4, [sp, #52]	; 0x34
    413a:	900c      	str	r0, [sp, #48]	; 0x30
    413c:	ddcc      	ble.n	40d8 <_vfiprintf_r+0x768>
    413e:	4650      	mov	r0, sl
    4140:	4649      	mov	r1, r9
    4142:	aa0b      	add	r2, sp, #44	; 0x2c
    4144:	f7ff fbe0 	bl	3908 <__sprint_r>
    4148:	2800      	cmp	r0, #0
    414a:	d0c5      	beq.n	40d8 <_vfiprintf_r+0x768>
    414c:	e015      	b.n	417a <_vfiprintf_r+0x80a>
    414e:	4650      	mov	r0, sl
    4150:	4649      	mov	r1, r9
    4152:	aa0b      	add	r2, sp, #44	; 0x2c
    4154:	f7ff fbd8 	bl	3908 <__sprint_r>
    4158:	b978      	cbnz	r0, 417a <_vfiprintf_r+0x80a>
    415a:	2500      	movs	r5, #0
    415c:	950c      	str	r5, [sp, #48]	; 0x30
    415e:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    4162:	e451      	b.n	3a08 <_vfiprintf_r+0x98>
    4164:	00006018 	.word	0x00006018
    4168:	00006028 	.word	0x00006028
    416c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    416e:	b122      	cbz	r2, 417a <_vfiprintf_r+0x80a>
    4170:	4650      	mov	r0, sl
    4172:	4649      	mov	r1, r9
    4174:	aa0b      	add	r2, sp, #44	; 0x2c
    4176:	f7ff fbc7 	bl	3908 <__sprint_r>
    417a:	f8b9 100c 	ldrh.w	r1, [r9, #12]
    417e:	f001 0040 	and.w	r0, r1, #64	; 0x40
    4182:	b203      	sxth	r3, r0
    4184:	2b00      	cmp	r3, #0
    4186:	f47f ac26 	bne.w	39d6 <_vfiprintf_r+0x66>
    418a:	9803      	ldr	r0, [sp, #12]
    418c:	b029      	add	sp, #164	; 0xa4
    418e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00004192 <__sbprintf>:
    4192:	b570      	push	{r4, r5, r6, lr}
    4194:	460c      	mov	r4, r1
    4196:	8989      	ldrh	r1, [r1, #12]
    4198:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
    419c:	f021 0502 	bic.w	r5, r1, #2
    41a0:	6e61      	ldr	r1, [r4, #100]	; 0x64
    41a2:	f8ad 500c 	strh.w	r5, [sp, #12]
    41a6:	9119      	str	r1, [sp, #100]	; 0x64
    41a8:	89e5      	ldrh	r5, [r4, #14]
    41aa:	69e1      	ldr	r1, [r4, #28]
    41ac:	f8ad 500e 	strh.w	r5, [sp, #14]
    41b0:	9107      	str	r1, [sp, #28]
    41b2:	6a65      	ldr	r5, [r4, #36]	; 0x24
    41b4:	a91a      	add	r1, sp, #104	; 0x68
    41b6:	9100      	str	r1, [sp, #0]
    41b8:	9104      	str	r1, [sp, #16]
    41ba:	2100      	movs	r1, #0
    41bc:	9509      	str	r5, [sp, #36]	; 0x24
    41be:	9106      	str	r1, [sp, #24]
    41c0:	f44f 6580 	mov.w	r5, #1024	; 0x400
    41c4:	4669      	mov	r1, sp
    41c6:	9502      	str	r5, [sp, #8]
    41c8:	9505      	str	r5, [sp, #20]
    41ca:	4606      	mov	r6, r0
    41cc:	f7ff fbd0 	bl	3970 <_vfiprintf_r>
    41d0:	1e05      	subs	r5, r0, #0
    41d2:	db07      	blt.n	41e4 <__sbprintf+0x52>
    41d4:	4630      	mov	r0, r6
    41d6:	4669      	mov	r1, sp
    41d8:	f000 f88e 	bl	42f8 <_fflush_r>
    41dc:	2800      	cmp	r0, #0
    41de:	bf18      	it	ne
    41e0:	f04f 35ff 	movne.w	r5, #4294967295
    41e4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    41e8:	f003 0040 	and.w	r0, r3, #64	; 0x40
    41ec:	b202      	sxth	r2, r0
    41ee:	b11a      	cbz	r2, 41f8 <__sbprintf+0x66>
    41f0:	89a1      	ldrh	r1, [r4, #12]
    41f2:	f041 0340 	orr.w	r3, r1, #64	; 0x40
    41f6:	81a3      	strh	r3, [r4, #12]
    41f8:	4628      	mov	r0, r5
    41fa:	b01a      	add	sp, #104	; 0x68
    41fc:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
    4200:	bd70      	pop	{r4, r5, r6, pc}

00004202 <vfiprintf>:
    4202:	b530      	push	{r4, r5, lr}
    4204:	4613      	mov	r3, r2
    4206:	4a05      	ldr	r2, [pc, #20]	; (421c <vfiprintf+0x1a>)
    4208:	4605      	mov	r5, r0
    420a:	460c      	mov	r4, r1
    420c:	6810      	ldr	r0, [r2, #0]
    420e:	4629      	mov	r1, r5
    4210:	4622      	mov	r2, r4
    4212:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    4216:	f7ff bbab 	b.w	3970 <_vfiprintf_r>
    421a:	bf00      	nop
    421c:	20000050 	.word	0x20000050

00004220 <__swsetup_r>:
    4220:	b538      	push	{r3, r4, r5, lr}
    4222:	4b2c      	ldr	r3, [pc, #176]	; (42d4 <__swsetup_r+0xb4>)
    4224:	4605      	mov	r5, r0
    4226:	6818      	ldr	r0, [r3, #0]
    4228:	460c      	mov	r4, r1
    422a:	b118      	cbz	r0, 4234 <__swsetup_r+0x14>
    422c:	6b82      	ldr	r2, [r0, #56]	; 0x38
    422e:	b90a      	cbnz	r2, 4234 <__swsetup_r+0x14>
    4230:	f000 f956 	bl	44e0 <__sinit>
    4234:	89a0      	ldrh	r0, [r4, #12]
    4236:	f000 0108 	and.w	r1, r0, #8
    423a:	b20b      	sxth	r3, r1
    423c:	bb0b      	cbnz	r3, 4282 <__swsetup_r+0x62>
    423e:	f000 0210 	and.w	r2, r0, #16
    4242:	b211      	sxth	r1, r2
    4244:	b911      	cbnz	r1, 424c <__swsetup_r+0x2c>
    4246:	f04f 30ff 	mov.w	r0, #4294967295
    424a:	bd38      	pop	{r3, r4, r5, pc}
    424c:	f000 0004 	and.w	r0, r0, #4
    4250:	b203      	sxth	r3, r0
    4252:	b193      	cbz	r3, 427a <__swsetup_r+0x5a>
    4254:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4256:	b141      	cbz	r1, 426a <__swsetup_r+0x4a>
    4258:	f104 0240 	add.w	r2, r4, #64	; 0x40
    425c:	4291      	cmp	r1, r2
    425e:	d002      	beq.n	4266 <__swsetup_r+0x46>
    4260:	4628      	mov	r0, r5
    4262:	f000 fa7b 	bl	475c <_free_r>
    4266:	2100      	movs	r1, #0
    4268:	6321      	str	r1, [r4, #48]	; 0x30
    426a:	89a0      	ldrh	r0, [r4, #12]
    426c:	6921      	ldr	r1, [r4, #16]
    426e:	f020 0324 	bic.w	r3, r0, #36	; 0x24
    4272:	2200      	movs	r2, #0
    4274:	81a3      	strh	r3, [r4, #12]
    4276:	6062      	str	r2, [r4, #4]
    4278:	6021      	str	r1, [r4, #0]
    427a:	89a0      	ldrh	r0, [r4, #12]
    427c:	f040 0308 	orr.w	r3, r0, #8
    4280:	81a3      	strh	r3, [r4, #12]
    4282:	6922      	ldr	r2, [r4, #16]
    4284:	b94a      	cbnz	r2, 429a <__swsetup_r+0x7a>
    4286:	89a1      	ldrh	r1, [r4, #12]
    4288:	f401 7020 	and.w	r0, r1, #640	; 0x280
    428c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    4290:	d003      	beq.n	429a <__swsetup_r+0x7a>
    4292:	4628      	mov	r0, r5
    4294:	4621      	mov	r1, r4
    4296:	f000 fcf9 	bl	4c8c <__smakebuf_r>
    429a:	89a3      	ldrh	r3, [r4, #12]
    429c:	f013 0201 	ands.w	r2, r3, #1
    42a0:	d005      	beq.n	42ae <__swsetup_r+0x8e>
    42a2:	6961      	ldr	r1, [r4, #20]
    42a4:	2200      	movs	r2, #0
    42a6:	4248      	negs	r0, r1
    42a8:	60a2      	str	r2, [r4, #8]
    42aa:	61a0      	str	r0, [r4, #24]
    42ac:	e007      	b.n	42be <__swsetup_r+0x9e>
    42ae:	f003 0102 	and.w	r1, r3, #2
    42b2:	b208      	sxth	r0, r1
    42b4:	b908      	cbnz	r0, 42ba <__swsetup_r+0x9a>
    42b6:	6963      	ldr	r3, [r4, #20]
    42b8:	e000      	b.n	42bc <__swsetup_r+0x9c>
    42ba:	4613      	mov	r3, r2
    42bc:	60a3      	str	r3, [r4, #8]
    42be:	6923      	ldr	r3, [r4, #16]
    42c0:	b933      	cbnz	r3, 42d0 <__swsetup_r+0xb0>
    42c2:	89a2      	ldrh	r2, [r4, #12]
    42c4:	f002 0180 	and.w	r1, r2, #128	; 0x80
    42c8:	b208      	sxth	r0, r1
    42ca:	2800      	cmp	r0, #0
    42cc:	d1bb      	bne.n	4246 <__swsetup_r+0x26>
    42ce:	bd38      	pop	{r3, r4, r5, pc}
    42d0:	2000      	movs	r0, #0
    42d2:	bd38      	pop	{r3, r4, r5, pc}
    42d4:	20000050 	.word	0x20000050

000042d8 <register_fini>:
    42d8:	4b02      	ldr	r3, [pc, #8]	; (42e4 <register_fini+0xc>)
    42da:	b113      	cbz	r3, 42e2 <register_fini+0xa>
    42dc:	4802      	ldr	r0, [pc, #8]	; (42e8 <register_fini+0x10>)
    42de:	f000 b805 	b.w	42ec <atexit>
    42e2:	4770      	bx	lr
    42e4:	00000000 	.word	0x00000000
    42e8:	000036c1 	.word	0x000036c1

000042ec <atexit>:
    42ec:	4601      	mov	r1, r0
    42ee:	2000      	movs	r0, #0
    42f0:	4602      	mov	r2, r0
    42f2:	4603      	mov	r3, r0
    42f4:	f7ff b996 	b.w	3624 <__register_exitproc>

000042f8 <_fflush_r>:
    42f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    42fc:	460c      	mov	r4, r1
    42fe:	4605      	mov	r5, r0
    4300:	b118      	cbz	r0, 430a <_fflush_r+0x12>
    4302:	6b83      	ldr	r3, [r0, #56]	; 0x38
    4304:	b90b      	cbnz	r3, 430a <_fflush_r+0x12>
    4306:	f000 f8eb 	bl	44e0 <__sinit>
    430a:	89a2      	ldrh	r2, [r4, #12]
    430c:	b332      	cbz	r2, 435c <_fflush_r+0x64>
    430e:	f002 0008 	and.w	r0, r2, #8
    4312:	b201      	sxth	r1, r0
    4314:	2900      	cmp	r1, #0
    4316:	d162      	bne.n	43de <_fflush_r+0xe6>
    4318:	6861      	ldr	r1, [r4, #4]
    431a:	f442 6000 	orr.w	r0, r2, #2048	; 0x800
    431e:	2900      	cmp	r1, #0
    4320:	81a0      	strh	r0, [r4, #12]
    4322:	dc02      	bgt.n	432a <_fflush_r+0x32>
    4324:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4326:	2b00      	cmp	r3, #0
    4328:	dd18      	ble.n	435c <_fflush_r+0x64>
    432a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    432c:	b1b6      	cbz	r6, 435c <_fflush_r+0x64>
    432e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    4332:	2000      	movs	r0, #0
    4334:	b212      	sxth	r2, r2
    4336:	682f      	ldr	r7, [r5, #0]
    4338:	6028      	str	r0, [r5, #0]
    433a:	b10a      	cbz	r2, 4340 <_fflush_r+0x48>
    433c:	6d22      	ldr	r2, [r4, #80]	; 0x50
    433e:	e010      	b.n	4362 <_fflush_r+0x6a>
    4340:	2301      	movs	r3, #1
    4342:	4628      	mov	r0, r5
    4344:	69e1      	ldr	r1, [r4, #28]
    4346:	47b0      	blx	r6
    4348:	4602      	mov	r2, r0
    434a:	3001      	adds	r0, #1
    434c:	d109      	bne.n	4362 <_fflush_r+0x6a>
    434e:	6829      	ldr	r1, [r5, #0]
    4350:	b139      	cbz	r1, 4362 <_fflush_r+0x6a>
    4352:	291d      	cmp	r1, #29
    4354:	d001      	beq.n	435a <_fflush_r+0x62>
    4356:	2916      	cmp	r1, #22
    4358:	d14f      	bne.n	43fa <_fflush_r+0x102>
    435a:	602f      	str	r7, [r5, #0]
    435c:	2000      	movs	r0, #0
    435e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4362:	89a6      	ldrh	r6, [r4, #12]
    4364:	f006 0104 	and.w	r1, r6, #4
    4368:	b20b      	sxth	r3, r1
    436a:	b12b      	cbz	r3, 4378 <_fflush_r+0x80>
    436c:	6860      	ldr	r0, [r4, #4]
    436e:	6b26      	ldr	r6, [r4, #48]	; 0x30
    4370:	1a12      	subs	r2, r2, r0
    4372:	b10e      	cbz	r6, 4378 <_fflush_r+0x80>
    4374:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    4376:	1a52      	subs	r2, r2, r1
    4378:	69e1      	ldr	r1, [r4, #28]
    437a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    437c:	2300      	movs	r3, #0
    437e:	4628      	mov	r0, r5
    4380:	47b0      	blx	r6
    4382:	1c41      	adds	r1, r0, #1
    4384:	d105      	bne.n	4392 <_fflush_r+0x9a>
    4386:	682a      	ldr	r2, [r5, #0]
    4388:	b11a      	cbz	r2, 4392 <_fflush_r+0x9a>
    438a:	2a1d      	cmp	r2, #29
    438c:	d001      	beq.n	4392 <_fflush_r+0x9a>
    438e:	2a16      	cmp	r2, #22
    4390:	d11f      	bne.n	43d2 <_fflush_r+0xda>
    4392:	89a3      	ldrh	r3, [r4, #12]
    4394:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
    4398:	2100      	movs	r1, #0
    439a:	81a2      	strh	r2, [r4, #12]
    439c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    43a0:	6922      	ldr	r2, [r4, #16]
    43a2:	6061      	str	r1, [r4, #4]
    43a4:	b219      	sxth	r1, r3
    43a6:	6022      	str	r2, [r4, #0]
    43a8:	b121      	cbz	r1, 43b4 <_fflush_r+0xbc>
    43aa:	1c42      	adds	r2, r0, #1
    43ac:	d101      	bne.n	43b2 <_fflush_r+0xba>
    43ae:	682a      	ldr	r2, [r5, #0]
    43b0:	b902      	cbnz	r2, 43b4 <_fflush_r+0xbc>
    43b2:	6520      	str	r0, [r4, #80]	; 0x50
    43b4:	6b21      	ldr	r1, [r4, #48]	; 0x30
    43b6:	602f      	str	r7, [r5, #0]
    43b8:	2900      	cmp	r1, #0
    43ba:	d0cf      	beq.n	435c <_fflush_r+0x64>
    43bc:	f104 0040 	add.w	r0, r4, #64	; 0x40
    43c0:	4281      	cmp	r1, r0
    43c2:	d002      	beq.n	43ca <_fflush_r+0xd2>
    43c4:	4628      	mov	r0, r5
    43c6:	f000 f9c9 	bl	475c <_free_r>
    43ca:	2000      	movs	r0, #0
    43cc:	6320      	str	r0, [r4, #48]	; 0x30
    43ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    43d2:	89a3      	ldrh	r3, [r4, #12]
    43d4:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    43d8:	81a1      	strh	r1, [r4, #12]
    43da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    43de:	6926      	ldr	r6, [r4, #16]
    43e0:	2e00      	cmp	r6, #0
    43e2:	d0bb      	beq.n	435c <_fflush_r+0x64>
    43e4:	0792      	lsls	r2, r2, #30
    43e6:	6823      	ldr	r3, [r4, #0]
    43e8:	bf08      	it	eq
    43ea:	6962      	ldreq	r2, [r4, #20]
    43ec:	6026      	str	r6, [r4, #0]
    43ee:	bf18      	it	ne
    43f0:	2200      	movne	r2, #0
    43f2:	ebc6 0803 	rsb	r8, r6, r3
    43f6:	60a2      	str	r2, [r4, #8]
    43f8:	e012      	b.n	4420 <_fflush_r+0x128>
    43fa:	89a3      	ldrh	r3, [r4, #12]
    43fc:	f043 0040 	orr.w	r0, r3, #64	; 0x40
    4400:	81a0      	strh	r0, [r4, #12]
    4402:	f04f 30ff 	mov.w	r0, #4294967295
    4406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    440a:	6a67      	ldr	r7, [r4, #36]	; 0x24
    440c:	69e1      	ldr	r1, [r4, #28]
    440e:	4628      	mov	r0, r5
    4410:	4632      	mov	r2, r6
    4412:	4643      	mov	r3, r8
    4414:	47b8      	blx	r7
    4416:	2800      	cmp	r0, #0
    4418:	ddef      	ble.n	43fa <_fflush_r+0x102>
    441a:	1836      	adds	r6, r6, r0
    441c:	ebc0 0808 	rsb	r8, r0, r8
    4420:	f1b8 0f00 	cmp.w	r8, #0
    4424:	dcf1      	bgt.n	440a <_fflush_r+0x112>
    4426:	e799      	b.n	435c <_fflush_r+0x64>

00004428 <fflush>:
    4428:	4601      	mov	r1, r0
    442a:	b920      	cbnz	r0, 4436 <fflush+0xe>
    442c:	4804      	ldr	r0, [pc, #16]	; (4440 <fflush+0x18>)
    442e:	4905      	ldr	r1, [pc, #20]	; (4444 <fflush+0x1c>)
    4430:	6800      	ldr	r0, [r0, #0]
    4432:	f000 bbc5 	b.w	4bc0 <_fwalk_reent>
    4436:	4b04      	ldr	r3, [pc, #16]	; (4448 <fflush+0x20>)
    4438:	6818      	ldr	r0, [r3, #0]
    443a:	f7ff bf5d 	b.w	42f8 <_fflush_r>
    443e:	bf00      	nop
    4440:	00006010 	.word	0x00006010
    4444:	000042f9 	.word	0x000042f9
    4448:	20000050 	.word	0x20000050

0000444c <__fp_lock>:
    444c:	2000      	movs	r0, #0
    444e:	4770      	bx	lr

00004450 <__fp_unlock>:
    4450:	2000      	movs	r0, #0
    4452:	4770      	bx	lr

00004454 <_cleanup_r>:
    4454:	4901      	ldr	r1, [pc, #4]	; (445c <_cleanup_r+0x8>)
    4456:	f000 bb92 	b.w	4b7e <_fwalk>
    445a:	bf00      	nop
    445c:	000057b9 	.word	0x000057b9

00004460 <std.isra.0>:
    4460:	2300      	movs	r3, #0
    4462:	b510      	push	{r4, lr}
    4464:	4604      	mov	r4, r0
    4466:	6003      	str	r3, [r0, #0]
    4468:	6043      	str	r3, [r0, #4]
    446a:	6083      	str	r3, [r0, #8]
    446c:	8181      	strh	r1, [r0, #12]
    446e:	6643      	str	r3, [r0, #100]	; 0x64
    4470:	81c2      	strh	r2, [r0, #14]
    4472:	6103      	str	r3, [r0, #16]
    4474:	6143      	str	r3, [r0, #20]
    4476:	6183      	str	r3, [r0, #24]
    4478:	4619      	mov	r1, r3
    447a:	2208      	movs	r2, #8
    447c:	f100 005c 	add.w	r0, r0, #92	; 0x5c
    4480:	f7ff f97a 	bl	3778 <memset>
    4484:	4804      	ldr	r0, [pc, #16]	; (4498 <std.isra.0+0x38>)
    4486:	4905      	ldr	r1, [pc, #20]	; (449c <std.isra.0+0x3c>)
    4488:	4a05      	ldr	r2, [pc, #20]	; (44a0 <std.isra.0+0x40>)
    448a:	4b06      	ldr	r3, [pc, #24]	; (44a4 <std.isra.0+0x44>)
    448c:	61e4      	str	r4, [r4, #28]
    448e:	6220      	str	r0, [r4, #32]
    4490:	6261      	str	r1, [r4, #36]	; 0x24
    4492:	62a2      	str	r2, [r4, #40]	; 0x28
    4494:	62e3      	str	r3, [r4, #44]	; 0x2c
    4496:	bd10      	pop	{r4, pc}
    4498:	000054ed 	.word	0x000054ed
    449c:	00005513 	.word	0x00005513
    44a0:	0000554f 	.word	0x0000554f
    44a4:	00005573 	.word	0x00005573

000044a8 <__sfmoreglue>:
    44a8:	b570      	push	{r4, r5, r6, lr}
    44aa:	2568      	movs	r5, #104	; 0x68
    44ac:	434d      	muls	r5, r1
    44ae:	460e      	mov	r6, r1
    44b0:	f105 010c 	add.w	r1, r5, #12
    44b4:	f000 fc66 	bl	4d84 <_malloc_r>
    44b8:	4604      	mov	r4, r0
    44ba:	b140      	cbz	r0, 44ce <__sfmoreglue+0x26>
    44bc:	f100 000c 	add.w	r0, r0, #12
    44c0:	2100      	movs	r1, #0
    44c2:	e884 0042 	stmia.w	r4, {r1, r6}
    44c6:	60a0      	str	r0, [r4, #8]
    44c8:	462a      	mov	r2, r5
    44ca:	f7ff f955 	bl	3778 <memset>
    44ce:	4620      	mov	r0, r4
    44d0:	bd70      	pop	{r4, r5, r6, pc}

000044d2 <_cleanup>:
    44d2:	4b02      	ldr	r3, [pc, #8]	; (44dc <_cleanup+0xa>)
    44d4:	6818      	ldr	r0, [r3, #0]
    44d6:	f7ff bfbd 	b.w	4454 <_cleanup_r>
    44da:	bf00      	nop
    44dc:	00006010 	.word	0x00006010

000044e0 <__sinit>:
    44e0:	b538      	push	{r3, r4, r5, lr}
    44e2:	6b83      	ldr	r3, [r0, #56]	; 0x38
    44e4:	4604      	mov	r4, r0
    44e6:	b9eb      	cbnz	r3, 4524 <__sinit+0x44>
    44e8:	4a0f      	ldr	r2, [pc, #60]	; (4528 <__sinit+0x48>)
    44ea:	f8c0 32e0 	str.w	r3, [r0, #736]	; 0x2e0
    44ee:	2501      	movs	r5, #1
    44f0:	63c2      	str	r2, [r0, #60]	; 0x3c
    44f2:	6385      	str	r5, [r0, #56]	; 0x38
    44f4:	f504 713b 	add.w	r1, r4, #748	; 0x2ec
    44f8:	2003      	movs	r0, #3
    44fa:	461a      	mov	r2, r3
    44fc:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
    4500:	f8c4 12e8 	str.w	r1, [r4, #744]	; 0x2e8
    4504:	6860      	ldr	r0, [r4, #4]
    4506:	2104      	movs	r1, #4
    4508:	f7ff ffaa 	bl	4460 <std.isra.0>
    450c:	68a0      	ldr	r0, [r4, #8]
    450e:	2109      	movs	r1, #9
    4510:	462a      	mov	r2, r5
    4512:	f7ff ffa5 	bl	4460 <std.isra.0>
    4516:	68e0      	ldr	r0, [r4, #12]
    4518:	2112      	movs	r1, #18
    451a:	2202      	movs	r2, #2
    451c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4520:	f7ff bf9e 	b.w	4460 <std.isra.0>
    4524:	bd38      	pop	{r3, r4, r5, pc}
    4526:	bf00      	nop
    4528:	00004455 	.word	0x00004455

0000452c <__sfp>:
    452c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    452e:	4b1d      	ldr	r3, [pc, #116]	; (45a4 <__sfp+0x78>)
    4530:	681e      	ldr	r6, [r3, #0]
    4532:	4607      	mov	r7, r0
    4534:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    4536:	b910      	cbnz	r0, 453e <__sfp+0x12>
    4538:	4630      	mov	r0, r6
    453a:	f7ff ffd1 	bl	44e0 <__sinit>
    453e:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
    4542:	68b4      	ldr	r4, [r6, #8]
    4544:	6871      	ldr	r1, [r6, #4]
    4546:	3901      	subs	r1, #1
    4548:	d404      	bmi.n	4554 <__sfp+0x28>
    454a:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    454e:	b185      	cbz	r5, 4572 <__sfp+0x46>
    4550:	3468      	adds	r4, #104	; 0x68
    4552:	e7f8      	b.n	4546 <__sfp+0x1a>
    4554:	6832      	ldr	r2, [r6, #0]
    4556:	b10a      	cbz	r2, 455c <__sfp+0x30>
    4558:	6836      	ldr	r6, [r6, #0]
    455a:	e7f2      	b.n	4542 <__sfp+0x16>
    455c:	4638      	mov	r0, r7
    455e:	2104      	movs	r1, #4
    4560:	f7ff ffa2 	bl	44a8 <__sfmoreglue>
    4564:	6030      	str	r0, [r6, #0]
    4566:	2800      	cmp	r0, #0
    4568:	d1f6      	bne.n	4558 <__sfp+0x2c>
    456a:	240c      	movs	r4, #12
    456c:	603c      	str	r4, [r7, #0]
    456e:	4604      	mov	r4, r0
    4570:	e015      	b.n	459e <__sfp+0x72>
    4572:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4576:	2001      	movs	r0, #1
    4578:	81a0      	strh	r0, [r4, #12]
    457a:	81e3      	strh	r3, [r4, #14]
    457c:	6665      	str	r5, [r4, #100]	; 0x64
    457e:	6025      	str	r5, [r4, #0]
    4580:	60a5      	str	r5, [r4, #8]
    4582:	6065      	str	r5, [r4, #4]
    4584:	6125      	str	r5, [r4, #16]
    4586:	6165      	str	r5, [r4, #20]
    4588:	61a5      	str	r5, [r4, #24]
    458a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    458e:	4629      	mov	r1, r5
    4590:	2208      	movs	r2, #8
    4592:	f7ff f8f1 	bl	3778 <memset>
    4596:	6325      	str	r5, [r4, #48]	; 0x30
    4598:	6365      	str	r5, [r4, #52]	; 0x34
    459a:	6465      	str	r5, [r4, #68]	; 0x44
    459c:	64a5      	str	r5, [r4, #72]	; 0x48
    459e:	4620      	mov	r0, r4
    45a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    45a2:	bf00      	nop
    45a4:	00006010 	.word	0x00006010

000045a8 <__sfp_lock_acquire>:
    45a8:	4770      	bx	lr

000045aa <__sfp_lock_release>:
    45aa:	4770      	bx	lr

000045ac <__sinit_lock_acquire>:
    45ac:	4770      	bx	lr

000045ae <__sinit_lock_release>:
    45ae:	4770      	bx	lr

000045b0 <__fp_lock_all>:
    45b0:	4b02      	ldr	r3, [pc, #8]	; (45bc <__fp_lock_all+0xc>)
    45b2:	4903      	ldr	r1, [pc, #12]	; (45c0 <__fp_lock_all+0x10>)
    45b4:	6818      	ldr	r0, [r3, #0]
    45b6:	f000 bae2 	b.w	4b7e <_fwalk>
    45ba:	bf00      	nop
    45bc:	20000050 	.word	0x20000050
    45c0:	0000444d 	.word	0x0000444d

000045c4 <__fp_unlock_all>:
    45c4:	4b02      	ldr	r3, [pc, #8]	; (45d0 <__fp_unlock_all+0xc>)
    45c6:	4903      	ldr	r1, [pc, #12]	; (45d4 <__fp_unlock_all+0x10>)
    45c8:	6818      	ldr	r0, [r3, #0]
    45ca:	f000 bad8 	b.w	4b7e <_fwalk>
    45ce:	bf00      	nop
    45d0:	20000050 	.word	0x20000050
    45d4:	00004451 	.word	0x00004451

000045d8 <_fputwc_r>:
    45d8:	8993      	ldrh	r3, [r2, #12]
    45da:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    45de:	4614      	mov	r4, r2
    45e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
    45e4:	4680      	mov	r8, r0
    45e6:	b210      	sxth	r0, r2
    45e8:	460e      	mov	r6, r1
    45ea:	b930      	cbnz	r0, 45fa <_fputwc_r+0x22>
    45ec:	6e67      	ldr	r7, [r4, #100]	; 0x64
    45ee:	f443 5100 	orr.w	r1, r3, #8192	; 0x2000
    45f2:	f447 5300 	orr.w	r3, r7, #8192	; 0x2000
    45f6:	81a1      	strh	r1, [r4, #12]
    45f8:	6663      	str	r3, [r4, #100]	; 0x64
    45fa:	f000 fb29 	bl	4c50 <__locale_mb_cur_max>
    45fe:	2801      	cmp	r0, #1
    4600:	d106      	bne.n	4610 <_fputwc_r+0x38>
    4602:	b12e      	cbz	r6, 4610 <_fputwc_r+0x38>
    4604:	2eff      	cmp	r6, #255	; 0xff
    4606:	d803      	bhi.n	4610 <_fputwc_r+0x38>
    4608:	f88d 6004 	strb.w	r6, [sp, #4]
    460c:	4607      	mov	r7, r0
    460e:	e00f      	b.n	4630 <_fputwc_r+0x58>
    4610:	4632      	mov	r2, r6
    4612:	4640      	mov	r0, r8
    4614:	a901      	add	r1, sp, #4
    4616:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    461a:	f001 f813 	bl	5644 <_wcrtomb_r>
    461e:	1c42      	adds	r2, r0, #1
    4620:	4607      	mov	r7, r0
    4622:	d105      	bne.n	4630 <_fputwc_r+0x58>
    4624:	89a2      	ldrh	r2, [r4, #12]
    4626:	f042 0040 	orr.w	r0, r2, #64	; 0x40
    462a:	81a0      	strh	r0, [r4, #12]
    462c:	4638      	mov	r0, r7
    462e:	e031      	b.n	4694 <_fputwc_r+0xbc>
    4630:	2500      	movs	r5, #0
    4632:	42bd      	cmp	r5, r7
    4634:	d02a      	beq.n	468c <_fputwc_r+0xb4>
    4636:	68a1      	ldr	r1, [r4, #8]
    4638:	1e4a      	subs	r2, r1, #1
    463a:	2a00      	cmp	r2, #0
    463c:	60a2      	str	r2, [r4, #8]
    463e:	ab01      	add	r3, sp, #4
    4640:	da1a      	bge.n	4678 <_fputwc_r+0xa0>
    4642:	69a0      	ldr	r0, [r4, #24]
    4644:	4282      	cmp	r2, r0
    4646:	db0c      	blt.n	4662 <_fputwc_r+0x8a>
    4648:	6821      	ldr	r1, [r4, #0]
    464a:	5d5a      	ldrb	r2, [r3, r5]
    464c:	700a      	strb	r2, [r1, #0]
    464e:	6823      	ldr	r3, [r4, #0]
    4650:	7819      	ldrb	r1, [r3, #0]
    4652:	290a      	cmp	r1, #10
    4654:	d003      	beq.n	465e <_fputwc_r+0x86>
    4656:	3301      	adds	r3, #1
    4658:	2200      	movs	r2, #0
    465a:	6023      	str	r3, [r4, #0]
    465c:	e013      	b.n	4686 <_fputwc_r+0xae>
    465e:	4640      	mov	r0, r8
    4660:	e001      	b.n	4666 <_fputwc_r+0x8e>
    4662:	5d59      	ldrb	r1, [r3, r5]
    4664:	4640      	mov	r0, r8
    4666:	4622      	mov	r2, r4
    4668:	f000 ff92 	bl	5590 <__swbuf_r>
    466c:	f1b0 31ff 	subs.w	r1, r0, #4294967295
    4670:	4248      	negs	r0, r1
    4672:	eb50 0201 	adcs.w	r2, r0, r1
    4676:	e006      	b.n	4686 <_fputwc_r+0xae>
    4678:	6820      	ldr	r0, [r4, #0]
    467a:	5d59      	ldrb	r1, [r3, r5]
    467c:	7001      	strb	r1, [r0, #0]
    467e:	6822      	ldr	r2, [r4, #0]
    4680:	1c53      	adds	r3, r2, #1
    4682:	6023      	str	r3, [r4, #0]
    4684:	e000      	b.n	4688 <_fputwc_r+0xb0>
    4686:	b91a      	cbnz	r2, 4690 <_fputwc_r+0xb8>
    4688:	3501      	adds	r5, #1
    468a:	e7d2      	b.n	4632 <_fputwc_r+0x5a>
    468c:	4630      	mov	r0, r6
    468e:	e001      	b.n	4694 <_fputwc_r+0xbc>
    4690:	f04f 30ff 	mov.w	r0, #4294967295
    4694:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

00004698 <fputwc>:
    4698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    469a:	4c08      	ldr	r4, [pc, #32]	; (46bc <fputwc+0x24>)
    469c:	4607      	mov	r7, r0
    469e:	6820      	ldr	r0, [r4, #0]
    46a0:	460e      	mov	r6, r1
    46a2:	b118      	cbz	r0, 46ac <fputwc+0x14>
    46a4:	6b85      	ldr	r5, [r0, #56]	; 0x38
    46a6:	b90d      	cbnz	r5, 46ac <fputwc+0x14>
    46a8:	f7ff ff1a 	bl	44e0 <__sinit>
    46ac:	6820      	ldr	r0, [r4, #0]
    46ae:	4639      	mov	r1, r7
    46b0:	4632      	mov	r2, r6
    46b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    46b6:	f7ff bf8f 	b.w	45d8 <_fputwc_r>
    46ba:	bf00      	nop
    46bc:	20000050 	.word	0x20000050

000046c0 <_malloc_trim_r>:
    46c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46c2:	4d23      	ldr	r5, [pc, #140]	; (4750 <_malloc_trim_r+0x90>)
    46c4:	460e      	mov	r6, r1
    46c6:	4604      	mov	r4, r0
    46c8:	f000 fd8f 	bl	51ea <__malloc_lock>
    46cc:	68ab      	ldr	r3, [r5, #8]
    46ce:	685f      	ldr	r7, [r3, #4]
    46d0:	f027 0703 	bic.w	r7, r7, #3
    46d4:	f607 70ef 	addw	r0, r7, #4079	; 0xfef
    46d8:	1b81      	subs	r1, r0, r6
    46da:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
    46de:	f022 060f 	bic.w	r6, r2, #15
    46e2:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
    46e6:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
    46ea:	da04      	bge.n	46f6 <_malloc_trim_r+0x36>
    46ec:	4620      	mov	r0, r4
    46ee:	f000 fd7d 	bl	51ec <__malloc_unlock>
    46f2:	2000      	movs	r0, #0
    46f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    46f6:	2100      	movs	r1, #0
    46f8:	4620      	mov	r0, r4
    46fa:	f000 fee7 	bl	54cc <_sbrk_r>
    46fe:	68ab      	ldr	r3, [r5, #8]
    4700:	19d9      	adds	r1, r3, r7
    4702:	4288      	cmp	r0, r1
    4704:	d1f2      	bne.n	46ec <_malloc_trim_r+0x2c>
    4706:	4271      	negs	r1, r6
    4708:	4620      	mov	r0, r4
    470a:	f000 fedf 	bl	54cc <_sbrk_r>
    470e:	3001      	adds	r0, #1
    4710:	d110      	bne.n	4734 <_malloc_trim_r+0x74>
    4712:	2100      	movs	r1, #0
    4714:	4620      	mov	r0, r4
    4716:	f000 fed9 	bl	54cc <_sbrk_r>
    471a:	68ab      	ldr	r3, [r5, #8]
    471c:	1ac2      	subs	r2, r0, r3
    471e:	2a0f      	cmp	r2, #15
    4720:	dde4      	ble.n	46ec <_malloc_trim_r+0x2c>
    4722:	490c      	ldr	r1, [pc, #48]	; (4754 <_malloc_trim_r+0x94>)
    4724:	6809      	ldr	r1, [r1, #0]
    4726:	1a40      	subs	r0, r0, r1
    4728:	490b      	ldr	r1, [pc, #44]	; (4758 <_malloc_trim_r+0x98>)
    472a:	f042 0201 	orr.w	r2, r2, #1
    472e:	6008      	str	r0, [r1, #0]
    4730:	605a      	str	r2, [r3, #4]
    4732:	e7db      	b.n	46ec <_malloc_trim_r+0x2c>
    4734:	4b08      	ldr	r3, [pc, #32]	; (4758 <_malloc_trim_r+0x98>)
    4736:	68a8      	ldr	r0, [r5, #8]
    4738:	681a      	ldr	r2, [r3, #0]
    473a:	1bbf      	subs	r7, r7, r6
    473c:	f047 0701 	orr.w	r7, r7, #1
    4740:	6047      	str	r7, [r0, #4]
    4742:	1b96      	subs	r6, r2, r6
    4744:	4620      	mov	r0, r4
    4746:	601e      	str	r6, [r3, #0]
    4748:	f000 fd50 	bl	51ec <__malloc_unlock>
    474c:	2001      	movs	r0, #1
    474e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4750:	200004fc 	.word	0x200004fc
    4754:	20000904 	.word	0x20000904
    4758:	200009e0 	.word	0x200009e0

0000475c <_free_r>:
    475c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    475e:	4606      	mov	r6, r0
    4760:	460d      	mov	r5, r1
    4762:	2900      	cmp	r1, #0
    4764:	f000 80a6 	beq.w	48b4 <_free_r+0x158>
    4768:	f000 fd3f 	bl	51ea <__malloc_lock>
    476c:	f855 cc04 	ldr.w	ip, [r5, #-4]
    4770:	4f51      	ldr	r7, [pc, #324]	; (48b8 <_free_r+0x15c>)
    4772:	f1a5 0308 	sub.w	r3, r5, #8
    4776:	f02c 0201 	bic.w	r2, ip, #1
    477a:	189c      	adds	r4, r3, r2
    477c:	68b9      	ldr	r1, [r7, #8]
    477e:	6860      	ldr	r0, [r4, #4]
    4780:	428c      	cmp	r4, r1
    4782:	f020 0003 	bic.w	r0, r0, #3
    4786:	f00c 0101 	and.w	r1, ip, #1
    478a:	d11c      	bne.n	47c6 <_free_r+0x6a>
    478c:	1882      	adds	r2, r0, r2
    478e:	b939      	cbnz	r1, 47a0 <_free_r+0x44>
    4790:	f855 1c08 	ldr.w	r1, [r5, #-8]
    4794:	1a5b      	subs	r3, r3, r1
    4796:	1852      	adds	r2, r2, r1
    4798:	6898      	ldr	r0, [r3, #8]
    479a:	68d9      	ldr	r1, [r3, #12]
    479c:	60c1      	str	r1, [r0, #12]
    479e:	6088      	str	r0, [r1, #8]
    47a0:	4845      	ldr	r0, [pc, #276]	; (48b8 <_free_r+0x15c>)
    47a2:	f042 0101 	orr.w	r1, r2, #1
    47a6:	6059      	str	r1, [r3, #4]
    47a8:	6083      	str	r3, [r0, #8]
    47aa:	4b44      	ldr	r3, [pc, #272]	; (48bc <_free_r+0x160>)
    47ac:	6819      	ldr	r1, [r3, #0]
    47ae:	428a      	cmp	r2, r1
    47b0:	d304      	bcc.n	47bc <_free_r+0x60>
    47b2:	4a43      	ldr	r2, [pc, #268]	; (48c0 <_free_r+0x164>)
    47b4:	4630      	mov	r0, r6
    47b6:	6811      	ldr	r1, [r2, #0]
    47b8:	f7ff ff82 	bl	46c0 <_malloc_trim_r>
    47bc:	4630      	mov	r0, r6
    47be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    47c2:	f000 bd13 	b.w	51ec <__malloc_unlock>
    47c6:	6060      	str	r0, [r4, #4]
    47c8:	b959      	cbnz	r1, 47e2 <_free_r+0x86>
    47ca:	f855 5c08 	ldr.w	r5, [r5, #-8]
    47ce:	1b5b      	subs	r3, r3, r5
    47d0:	1952      	adds	r2, r2, r5
    47d2:	689d      	ldr	r5, [r3, #8]
    47d4:	3708      	adds	r7, #8
    47d6:	42bd      	cmp	r5, r7
    47d8:	d005      	beq.n	47e6 <_free_r+0x8a>
    47da:	68df      	ldr	r7, [r3, #12]
    47dc:	60ef      	str	r7, [r5, #12]
    47de:	60bd      	str	r5, [r7, #8]
    47e0:	e002      	b.n	47e8 <_free_r+0x8c>
    47e2:	2100      	movs	r1, #0
    47e4:	e000      	b.n	47e8 <_free_r+0x8c>
    47e6:	2101      	movs	r1, #1
    47e8:	1825      	adds	r5, r4, r0
    47ea:	686d      	ldr	r5, [r5, #4]
    47ec:	f015 0f01 	tst.w	r5, #1
    47f0:	d10f      	bne.n	4812 <_free_r+0xb6>
    47f2:	1812      	adds	r2, r2, r0
    47f4:	b949      	cbnz	r1, 480a <_free_r+0xae>
    47f6:	68a0      	ldr	r0, [r4, #8]
    47f8:	4d32      	ldr	r5, [pc, #200]	; (48c4 <_free_r+0x168>)
    47fa:	42a8      	cmp	r0, r5
    47fc:	d105      	bne.n	480a <_free_r+0xae>
    47fe:	60eb      	str	r3, [r5, #12]
    4800:	60ab      	str	r3, [r5, #8]
    4802:	60d8      	str	r0, [r3, #12]
    4804:	6098      	str	r0, [r3, #8]
    4806:	2101      	movs	r1, #1
    4808:	e003      	b.n	4812 <_free_r+0xb6>
    480a:	68e0      	ldr	r0, [r4, #12]
    480c:	68a4      	ldr	r4, [r4, #8]
    480e:	60e0      	str	r0, [r4, #12]
    4810:	6084      	str	r4, [r0, #8]
    4812:	f042 0001 	orr.w	r0, r2, #1
    4816:	6058      	str	r0, [r3, #4]
    4818:	509a      	str	r2, [r3, r2]
    481a:	2900      	cmp	r1, #0
    481c:	d1ce      	bne.n	47bc <_free_r+0x60>
    481e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    4822:	d20c      	bcs.n	483e <_free_r+0xe2>
    4824:	4924      	ldr	r1, [pc, #144]	; (48b8 <_free_r+0x15c>)
    4826:	08d2      	lsrs	r2, r2, #3
    4828:	1090      	asrs	r0, r2, #2
    482a:	2401      	movs	r4, #1
    482c:	fa04 f400 	lsl.w	r4, r4, r0
    4830:	6848      	ldr	r0, [r1, #4]
    4832:	4320      	orrs	r0, r4
    4834:	6048      	str	r0, [r1, #4]
    4836:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    483a:	6881      	ldr	r1, [r0, #8]
    483c:	e035      	b.n	48aa <_free_r+0x14e>
    483e:	0a54      	lsrs	r4, r2, #9
    4840:	2c04      	cmp	r4, #4
    4842:	d802      	bhi.n	484a <_free_r+0xee>
    4844:	0994      	lsrs	r4, r2, #6
    4846:	3438      	adds	r4, #56	; 0x38
    4848:	e016      	b.n	4878 <_free_r+0x11c>
    484a:	2c14      	cmp	r4, #20
    484c:	d801      	bhi.n	4852 <_free_r+0xf6>
    484e:	345b      	adds	r4, #91	; 0x5b
    4850:	e012      	b.n	4878 <_free_r+0x11c>
    4852:	2c54      	cmp	r4, #84	; 0x54
    4854:	d802      	bhi.n	485c <_free_r+0x100>
    4856:	0b14      	lsrs	r4, r2, #12
    4858:	346e      	adds	r4, #110	; 0x6e
    485a:	e00d      	b.n	4878 <_free_r+0x11c>
    485c:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
    4860:	d802      	bhi.n	4868 <_free_r+0x10c>
    4862:	0bd4      	lsrs	r4, r2, #15
    4864:	3477      	adds	r4, #119	; 0x77
    4866:	e007      	b.n	4878 <_free_r+0x11c>
    4868:	f240 5554 	movw	r5, #1364	; 0x554
    486c:	42ac      	cmp	r4, r5
    486e:	d802      	bhi.n	4876 <_free_r+0x11a>
    4870:	0c94      	lsrs	r4, r2, #18
    4872:	347c      	adds	r4, #124	; 0x7c
    4874:	e000      	b.n	4878 <_free_r+0x11c>
    4876:	247e      	movs	r4, #126	; 0x7e
    4878:	4d0f      	ldr	r5, [pc, #60]	; (48b8 <_free_r+0x15c>)
    487a:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    487e:	6881      	ldr	r1, [r0, #8]
    4880:	4281      	cmp	r1, r0
    4882:	d10c      	bne.n	489e <_free_r+0x142>
    4884:	6868      	ldr	r0, [r5, #4]
    4886:	2201      	movs	r2, #1
    4888:	10a4      	asrs	r4, r4, #2
    488a:	fa02 f404 	lsl.w	r4, r2, r4
    488e:	ea44 0200 	orr.w	r2, r4, r0
    4892:	606a      	str	r2, [r5, #4]
    4894:	4608      	mov	r0, r1
    4896:	e008      	b.n	48aa <_free_r+0x14e>
    4898:	6889      	ldr	r1, [r1, #8]
    489a:	4281      	cmp	r1, r0
    489c:	d004      	beq.n	48a8 <_free_r+0x14c>
    489e:	684c      	ldr	r4, [r1, #4]
    48a0:	f024 0403 	bic.w	r4, r4, #3
    48a4:	42a2      	cmp	r2, r4
    48a6:	d3f7      	bcc.n	4898 <_free_r+0x13c>
    48a8:	68c8      	ldr	r0, [r1, #12]
    48aa:	60d8      	str	r0, [r3, #12]
    48ac:	6099      	str	r1, [r3, #8]
    48ae:	6083      	str	r3, [r0, #8]
    48b0:	60cb      	str	r3, [r1, #12]
    48b2:	e783      	b.n	47bc <_free_r+0x60>
    48b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    48b6:	bf00      	nop
    48b8:	200004fc 	.word	0x200004fc
    48bc:	20000908 	.word	0x20000908
    48c0:	200009dc 	.word	0x200009dc
    48c4:	20000504 	.word	0x20000504

000048c8 <__sfvwrite_r>:
    48c8:	6893      	ldr	r3, [r2, #8]
    48ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    48ce:	4606      	mov	r6, r0
    48d0:	460c      	mov	r4, r1
    48d2:	4691      	mov	r9, r2
    48d4:	b90b      	cbnz	r3, 48da <__sfvwrite_r+0x12>
    48d6:	2000      	movs	r0, #0
    48d8:	e14f      	b.n	4b7a <__sfvwrite_r+0x2b2>
    48da:	8988      	ldrh	r0, [r1, #12]
    48dc:	f000 0108 	and.w	r1, r0, #8
    48e0:	b20a      	sxth	r2, r1
    48e2:	b10a      	cbz	r2, 48e8 <__sfvwrite_r+0x20>
    48e4:	6923      	ldr	r3, [r4, #16]
    48e6:	b95b      	cbnz	r3, 4900 <__sfvwrite_r+0x38>
    48e8:	4630      	mov	r0, r6
    48ea:	4621      	mov	r1, r4
    48ec:	f7ff fc98 	bl	4220 <__swsetup_r>
    48f0:	b130      	cbz	r0, 4900 <__sfvwrite_r+0x38>
    48f2:	89a1      	ldrh	r1, [r4, #12]
    48f4:	2209      	movs	r2, #9
    48f6:	f041 0040 	orr.w	r0, r1, #64	; 0x40
    48fa:	81a0      	strh	r0, [r4, #12]
    48fc:	6032      	str	r2, [r6, #0]
    48fe:	e13a      	b.n	4b76 <__sfvwrite_r+0x2ae>
    4900:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
    4904:	f8d9 8000 	ldr.w	r8, [r9]
    4908:	f00a 0c02 	and.w	ip, sl, #2
    490c:	fa0f f58c 	sxth.w	r5, ip
    4910:	b315      	cbz	r5, 4958 <__sfvwrite_r+0x90>
    4912:	f04f 0a00 	mov.w	sl, #0
    4916:	4657      	mov	r7, sl
    4918:	b937      	cbnz	r7, 4928 <__sfvwrite_r+0x60>
    491a:	f8d8 a000 	ldr.w	sl, [r8]
    491e:	f8d8 7004 	ldr.w	r7, [r8, #4]
    4922:	f108 0808 	add.w	r8, r8, #8
    4926:	e7f7      	b.n	4918 <__sfvwrite_r+0x50>
    4928:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    492c:	bf34      	ite	cc
    492e:	463b      	movcc	r3, r7
    4930:	f44f 6380 	movcs.w	r3, #1024	; 0x400
    4934:	4630      	mov	r0, r6
    4936:	69e1      	ldr	r1, [r4, #28]
    4938:	6a65      	ldr	r5, [r4, #36]	; 0x24
    493a:	4652      	mov	r2, sl
    493c:	47a8      	blx	r5
    493e:	2800      	cmp	r0, #0
    4940:	f340 8115 	ble.w	4b6e <__sfvwrite_r+0x2a6>
    4944:	f8d9 1008 	ldr.w	r1, [r9, #8]
    4948:	4482      	add	sl, r0
    494a:	1a3f      	subs	r7, r7, r0
    494c:	1a08      	subs	r0, r1, r0
    494e:	f8c9 0008 	str.w	r0, [r9, #8]
    4952:	2800      	cmp	r0, #0
    4954:	d1e0      	bne.n	4918 <__sfvwrite_r+0x50>
    4956:	e7be      	b.n	48d6 <__sfvwrite_r+0xe>
    4958:	f01a 0a01 	ands.w	sl, sl, #1
    495c:	d004      	beq.n	4968 <__sfvwrite_r+0xa0>
    495e:	46ab      	mov	fp, r5
    4960:	9501      	str	r5, [sp, #4]
    4962:	462f      	mov	r7, r5
    4964:	46aa      	mov	sl, r5
    4966:	e0c7      	b.n	4af8 <__sfvwrite_r+0x230>
    4968:	4655      	mov	r5, sl
    496a:	b935      	cbnz	r5, 497a <__sfvwrite_r+0xb2>
    496c:	f8d8 a000 	ldr.w	sl, [r8]
    4970:	f8d8 5004 	ldr.w	r5, [r8, #4]
    4974:	f108 0808 	add.w	r8, r8, #8
    4978:	e7f7      	b.n	496a <__sfvwrite_r+0xa2>
    497a:	89a2      	ldrh	r2, [r4, #12]
    497c:	f8d4 b008 	ldr.w	fp, [r4, #8]
    4980:	f402 7000 	and.w	r0, r2, #512	; 0x200
    4984:	b203      	sxth	r3, r0
    4986:	2b00      	cmp	r3, #0
    4988:	d052      	beq.n	4a30 <__sfvwrite_r+0x168>
    498a:	455d      	cmp	r5, fp
    498c:	d340      	bcc.n	4a10 <__sfvwrite_r+0x148>
    498e:	f412 6f90 	tst.w	r2, #1152	; 0x480
    4992:	d03b      	beq.n	4a0c <__sfvwrite_r+0x144>
    4994:	6921      	ldr	r1, [r4, #16]
    4996:	6827      	ldr	r7, [r4, #0]
    4998:	6963      	ldr	r3, [r4, #20]
    499a:	f04f 0b03 	mov.w	fp, #3
    499e:	fb0b f303 	mul.w	r3, fp, r3
    49a2:	2002      	movs	r0, #2
    49a4:	1a7f      	subs	r7, r7, r1
    49a6:	fb93 fcf0 	sdiv	ip, r3, r0
    49aa:	1c7b      	adds	r3, r7, #1
    49ac:	1958      	adds	r0, r3, r5
    49ae:	f402 6280 	and.w	r2, r2, #1024	; 0x400
    49b2:	4584      	cmp	ip, r0
    49b4:	bf28      	it	cs
    49b6:	4660      	movcs	r0, ip
    49b8:	b213      	sxth	r3, r2
    49ba:	9001      	str	r0, [sp, #4]
    49bc:	4630      	mov	r0, r6
    49be:	b17b      	cbz	r3, 49e0 <__sfvwrite_r+0x118>
    49c0:	9901      	ldr	r1, [sp, #4]
    49c2:	f000 f9df 	bl	4d84 <_malloc_r>
    49c6:	4683      	mov	fp, r0
    49c8:	b198      	cbz	r0, 49f2 <__sfvwrite_r+0x12a>
    49ca:	6921      	ldr	r1, [r4, #16]
    49cc:	463a      	mov	r2, r7
    49ce:	f000 fbe9 	bl	51a4 <memcpy>
    49d2:	89a1      	ldrh	r1, [r4, #12]
    49d4:	f421 6090 	bic.w	r0, r1, #1152	; 0x480
    49d8:	f040 0280 	orr.w	r2, r0, #128	; 0x80
    49dc:	81a2      	strh	r2, [r4, #12]
    49de:	e00b      	b.n	49f8 <__sfvwrite_r+0x130>
    49e0:	9a01      	ldr	r2, [sp, #4]
    49e2:	f000 fc05 	bl	51f0 <_realloc_r>
    49e6:	4683      	mov	fp, r0
    49e8:	b930      	cbnz	r0, 49f8 <__sfvwrite_r+0x130>
    49ea:	4630      	mov	r0, r6
    49ec:	6921      	ldr	r1, [r4, #16]
    49ee:	f7ff feb5 	bl	475c <_free_r>
    49f2:	230c      	movs	r3, #12
    49f4:	6033      	str	r3, [r6, #0]
    49f6:	e0ba      	b.n	4b6e <__sfvwrite_r+0x2a6>
    49f8:	9901      	ldr	r1, [sp, #4]
    49fa:	f8c4 b010 	str.w	fp, [r4, #16]
    49fe:	eb0b 0307 	add.w	r3, fp, r7
    4a02:	1bcf      	subs	r7, r1, r7
    4a04:	6023      	str	r3, [r4, #0]
    4a06:	6161      	str	r1, [r4, #20]
    4a08:	46ab      	mov	fp, r5
    4a0a:	60a7      	str	r7, [r4, #8]
    4a0c:	455d      	cmp	r5, fp
    4a0e:	d200      	bcs.n	4a12 <__sfvwrite_r+0x14a>
    4a10:	46ab      	mov	fp, r5
    4a12:	465a      	mov	r2, fp
    4a14:	4651      	mov	r1, sl
    4a16:	6820      	ldr	r0, [r4, #0]
    4a18:	f000 fbcd 	bl	51b6 <memmove>
    4a1c:	68a0      	ldr	r0, [r4, #8]
    4a1e:	6823      	ldr	r3, [r4, #0]
    4a20:	ebcb 0200 	rsb	r2, fp, r0
    4a24:	eb03 010b 	add.w	r1, r3, fp
    4a28:	60a2      	str	r2, [r4, #8]
    4a2a:	6021      	str	r1, [r4, #0]
    4a2c:	46ab      	mov	fp, r5
    4a2e:	e02a      	b.n	4a86 <__sfvwrite_r+0x1be>
    4a30:	6820      	ldr	r0, [r4, #0]
    4a32:	6921      	ldr	r1, [r4, #16]
    4a34:	4288      	cmp	r0, r1
    4a36:	d90f      	bls.n	4a58 <__sfvwrite_r+0x190>
    4a38:	455d      	cmp	r5, fp
    4a3a:	d90d      	bls.n	4a58 <__sfvwrite_r+0x190>
    4a3c:	4651      	mov	r1, sl
    4a3e:	465a      	mov	r2, fp
    4a40:	f000 fbb9 	bl	51b6 <memmove>
    4a44:	6822      	ldr	r2, [r4, #0]
    4a46:	eb02 000b 	add.w	r0, r2, fp
    4a4a:	6020      	str	r0, [r4, #0]
    4a4c:	4621      	mov	r1, r4
    4a4e:	4630      	mov	r0, r6
    4a50:	f7ff fc52 	bl	42f8 <_fflush_r>
    4a54:	b1b8      	cbz	r0, 4a86 <__sfvwrite_r+0x1be>
    4a56:	e08a      	b.n	4b6e <__sfvwrite_r+0x2a6>
    4a58:	6963      	ldr	r3, [r4, #20]
    4a5a:	429d      	cmp	r5, r3
    4a5c:	d308      	bcc.n	4a70 <__sfvwrite_r+0x1a8>
    4a5e:	6a67      	ldr	r7, [r4, #36]	; 0x24
    4a60:	69e1      	ldr	r1, [r4, #28]
    4a62:	4630      	mov	r0, r6
    4a64:	4652      	mov	r2, sl
    4a66:	47b8      	blx	r7
    4a68:	f1b0 0b00 	subs.w	fp, r0, #0
    4a6c:	dc0b      	bgt.n	4a86 <__sfvwrite_r+0x1be>
    4a6e:	e07e      	b.n	4b6e <__sfvwrite_r+0x2a6>
    4a70:	4651      	mov	r1, sl
    4a72:	462a      	mov	r2, r5
    4a74:	f000 fb9f 	bl	51b6 <memmove>
    4a78:	68a2      	ldr	r2, [r4, #8]
    4a7a:	6823      	ldr	r3, [r4, #0]
    4a7c:	1b50      	subs	r0, r2, r5
    4a7e:	1959      	adds	r1, r3, r5
    4a80:	46ab      	mov	fp, r5
    4a82:	60a0      	str	r0, [r4, #8]
    4a84:	6021      	str	r1, [r4, #0]
    4a86:	f8d9 0008 	ldr.w	r0, [r9, #8]
    4a8a:	ebcb 0200 	rsb	r2, fp, r0
    4a8e:	44da      	add	sl, fp
    4a90:	ebcb 0505 	rsb	r5, fp, r5
    4a94:	f8c9 2008 	str.w	r2, [r9, #8]
    4a98:	2a00      	cmp	r2, #0
    4a9a:	f47f af66 	bne.w	496a <__sfvwrite_r+0xa2>
    4a9e:	e71a      	b.n	48d6 <__sfvwrite_r+0xe>
    4aa0:	9801      	ldr	r0, [sp, #4]
    4aa2:	2800      	cmp	r0, #0
    4aa4:	d032      	beq.n	4b0c <__sfvwrite_r+0x244>
    4aa6:	6820      	ldr	r0, [r4, #0]
    4aa8:	6921      	ldr	r1, [r4, #16]
    4aaa:	68a5      	ldr	r5, [r4, #8]
    4aac:	f8d4 e014 	ldr.w	lr, [r4, #20]
    4ab0:	45d3      	cmp	fp, sl
    4ab2:	bf34      	ite	cc
    4ab4:	465b      	movcc	r3, fp
    4ab6:	4653      	movcs	r3, sl
    4ab8:	4288      	cmp	r0, r1
    4aba:	d937      	bls.n	4b2c <__sfvwrite_r+0x264>
    4abc:	4475      	add	r5, lr
    4abe:	42ab      	cmp	r3, r5
    4ac0:	dd34      	ble.n	4b2c <__sfvwrite_r+0x264>
    4ac2:	4639      	mov	r1, r7
    4ac4:	462a      	mov	r2, r5
    4ac6:	f000 fb76 	bl	51b6 <memmove>
    4aca:	6820      	ldr	r0, [r4, #0]
    4acc:	1943      	adds	r3, r0, r5
    4ace:	6023      	str	r3, [r4, #0]
    4ad0:	4630      	mov	r0, r6
    4ad2:	4621      	mov	r1, r4
    4ad4:	f7ff fc10 	bl	42f8 <_fflush_r>
    4ad8:	2800      	cmp	r0, #0
    4ada:	d148      	bne.n	4b6e <__sfvwrite_r+0x2a6>
    4adc:	ebbb 0b05 	subs.w	fp, fp, r5
    4ae0:	d03d      	beq.n	4b5e <__sfvwrite_r+0x296>
    4ae2:	f8d9 2008 	ldr.w	r2, [r9, #8]
    4ae6:	197f      	adds	r7, r7, r5
    4ae8:	ebc5 0a0a 	rsb	sl, r5, sl
    4aec:	1b55      	subs	r5, r2, r5
    4aee:	f8c9 5008 	str.w	r5, [r9, #8]
    4af2:	2d00      	cmp	r5, #0
    4af4:	f43f aeef 	beq.w	48d6 <__sfvwrite_r+0xe>
    4af8:	f1ba 0f00 	cmp.w	sl, #0
    4afc:	d1d0      	bne.n	4aa0 <__sfvwrite_r+0x1d8>
    4afe:	2100      	movs	r1, #0
    4b00:	e898 0480 	ldmia.w	r8, {r7, sl}
    4b04:	9101      	str	r1, [sp, #4]
    4b06:	f108 0808 	add.w	r8, r8, #8
    4b0a:	e7f5      	b.n	4af8 <__sfvwrite_r+0x230>
    4b0c:	4638      	mov	r0, r7
    4b0e:	210a      	movs	r1, #10
    4b10:	4652      	mov	r2, sl
    4b12:	f000 fb39 	bl	5188 <memchr>
    4b16:	b120      	cbz	r0, 4b22 <__sfvwrite_r+0x25a>
    4b18:	f100 0101 	add.w	r1, r0, #1
    4b1c:	ebc7 0b01 	rsb	fp, r7, r1
    4b20:	e001      	b.n	4b26 <__sfvwrite_r+0x25e>
    4b22:	f10a 0b01 	add.w	fp, sl, #1
    4b26:	2201      	movs	r2, #1
    4b28:	9201      	str	r2, [sp, #4]
    4b2a:	e7bc      	b.n	4aa6 <__sfvwrite_r+0x1de>
    4b2c:	4573      	cmp	r3, lr
    4b2e:	db08      	blt.n	4b42 <__sfvwrite_r+0x27a>
    4b30:	6a65      	ldr	r5, [r4, #36]	; 0x24
    4b32:	69e1      	ldr	r1, [r4, #28]
    4b34:	4630      	mov	r0, r6
    4b36:	463a      	mov	r2, r7
    4b38:	4673      	mov	r3, lr
    4b3a:	47a8      	blx	r5
    4b3c:	1e05      	subs	r5, r0, #0
    4b3e:	dccd      	bgt.n	4adc <__sfvwrite_r+0x214>
    4b40:	e015      	b.n	4b6e <__sfvwrite_r+0x2a6>
    4b42:	461a      	mov	r2, r3
    4b44:	4639      	mov	r1, r7
    4b46:	9300      	str	r3, [sp, #0]
    4b48:	f000 fb35 	bl	51b6 <memmove>
    4b4c:	9b00      	ldr	r3, [sp, #0]
    4b4e:	6825      	ldr	r5, [r4, #0]
    4b50:	68a0      	ldr	r0, [r4, #8]
    4b52:	18e9      	adds	r1, r5, r3
    4b54:	1ac2      	subs	r2, r0, r3
    4b56:	60a2      	str	r2, [r4, #8]
    4b58:	6021      	str	r1, [r4, #0]
    4b5a:	461d      	mov	r5, r3
    4b5c:	e7be      	b.n	4adc <__sfvwrite_r+0x214>
    4b5e:	4630      	mov	r0, r6
    4b60:	4621      	mov	r1, r4
    4b62:	f7ff fbc9 	bl	42f8 <_fflush_r>
    4b66:	b910      	cbnz	r0, 4b6e <__sfvwrite_r+0x2a6>
    4b68:	f8cd b004 	str.w	fp, [sp, #4]
    4b6c:	e7b9      	b.n	4ae2 <__sfvwrite_r+0x21a>
    4b6e:	89a2      	ldrh	r2, [r4, #12]
    4b70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
    4b74:	81a3      	strh	r3, [r4, #12]
    4b76:	f04f 30ff 	mov.w	r0, #4294967295
    4b7a:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00004b7e <_fwalk>:
    4b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b82:	4604      	mov	r4, r0
    4b84:	4688      	mov	r8, r1
    4b86:	f7ff fd0f 	bl	45a8 <__sfp_lock_acquire>
    4b8a:	f504 7438 	add.w	r4, r4, #736	; 0x2e0
    4b8e:	2600      	movs	r6, #0
    4b90:	b18c      	cbz	r4, 4bb6 <_fwalk+0x38>
    4b92:	68a5      	ldr	r5, [r4, #8]
    4b94:	6867      	ldr	r7, [r4, #4]
    4b96:	3f01      	subs	r7, #1
    4b98:	d40b      	bmi.n	4bb2 <_fwalk+0x34>
    4b9a:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
    4b9e:	b133      	cbz	r3, 4bae <_fwalk+0x30>
    4ba0:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
    4ba4:	1c43      	adds	r3, r0, #1
    4ba6:	d002      	beq.n	4bae <_fwalk+0x30>
    4ba8:	4628      	mov	r0, r5
    4baa:	47c0      	blx	r8
    4bac:	4306      	orrs	r6, r0
    4bae:	3568      	adds	r5, #104	; 0x68
    4bb0:	e7f1      	b.n	4b96 <_fwalk+0x18>
    4bb2:	6824      	ldr	r4, [r4, #0]
    4bb4:	e7ec      	b.n	4b90 <_fwalk+0x12>
    4bb6:	f7ff fcf8 	bl	45aa <__sfp_lock_release>
    4bba:	4630      	mov	r0, r6
    4bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004bc0 <_fwalk_reent>:
    4bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4bc4:	4680      	mov	r8, r0
    4bc6:	4689      	mov	r9, r1
    4bc8:	f7ff fcee 	bl	45a8 <__sfp_lock_acquire>
    4bcc:	f508 7438 	add.w	r4, r8, #736	; 0x2e0
    4bd0:	2600      	movs	r6, #0
    4bd2:	b194      	cbz	r4, 4bfa <_fwalk_reent+0x3a>
    4bd4:	68a5      	ldr	r5, [r4, #8]
    4bd6:	6867      	ldr	r7, [r4, #4]
    4bd8:	3f01      	subs	r7, #1
    4bda:	d40c      	bmi.n	4bf6 <_fwalk_reent+0x36>
    4bdc:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
    4be0:	b13b      	cbz	r3, 4bf2 <_fwalk_reent+0x32>
    4be2:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
    4be6:	1c43      	adds	r3, r0, #1
    4be8:	d003      	beq.n	4bf2 <_fwalk_reent+0x32>
    4bea:	4640      	mov	r0, r8
    4bec:	4629      	mov	r1, r5
    4bee:	47c8      	blx	r9
    4bf0:	4306      	orrs	r6, r0
    4bf2:	3568      	adds	r5, #104	; 0x68
    4bf4:	e7f0      	b.n	4bd8 <_fwalk_reent+0x18>
    4bf6:	6824      	ldr	r4, [r4, #0]
    4bf8:	e7eb      	b.n	4bd2 <_fwalk_reent+0x12>
    4bfa:	f7ff fcd6 	bl	45aa <__sfp_lock_release>
    4bfe:	4630      	mov	r0, r6
    4c00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00004c04 <_setlocale_r>:
    4c04:	b510      	push	{r4, lr}
    4c06:	4614      	mov	r4, r2
    4c08:	b90a      	cbnz	r2, 4c0e <_setlocale_r+0xa>
    4c0a:	480c      	ldr	r0, [pc, #48]	; (4c3c <_setlocale_r+0x38>)
    4c0c:	bd10      	pop	{r4, pc}
    4c0e:	4610      	mov	r0, r2
    4c10:	490b      	ldr	r1, [pc, #44]	; (4c40 <_setlocale_r+0x3c>)
    4c12:	f000 fcb2 	bl	557a <strcmp>
    4c16:	2800      	cmp	r0, #0
    4c18:	d0f7      	beq.n	4c0a <_setlocale_r+0x6>
    4c1a:	4620      	mov	r0, r4
    4c1c:	4907      	ldr	r1, [pc, #28]	; (4c3c <_setlocale_r+0x38>)
    4c1e:	f000 fcac 	bl	557a <strcmp>
    4c22:	2800      	cmp	r0, #0
    4c24:	d0f1      	beq.n	4c0a <_setlocale_r+0x6>
    4c26:	4620      	mov	r0, r4
    4c28:	4906      	ldr	r1, [pc, #24]	; (4c44 <_setlocale_r+0x40>)
    4c2a:	f000 fca6 	bl	557a <strcmp>
    4c2e:	4b03      	ldr	r3, [pc, #12]	; (4c3c <_setlocale_r+0x38>)
    4c30:	2800      	cmp	r0, #0
    4c32:	bf0c      	ite	eq
    4c34:	4618      	moveq	r0, r3
    4c36:	2000      	movne	r0, #0
    4c38:	bd10      	pop	{r4, pc}
    4c3a:	bf00      	nop
    4c3c:	00006014 	.word	0x00006014
    4c40:	0000605a 	.word	0x0000605a
    4c44:	00006017 	.word	0x00006017

00004c48 <__locale_charset>:
    4c48:	4800      	ldr	r0, [pc, #0]	; (4c4c <__locale_charset+0x4>)
    4c4a:	4770      	bx	lr
    4c4c:	20000480 	.word	0x20000480

00004c50 <__locale_mb_cur_max>:
    4c50:	4b01      	ldr	r3, [pc, #4]	; (4c58 <__locale_mb_cur_max+0x8>)
    4c52:	6a18      	ldr	r0, [r3, #32]
    4c54:	4770      	bx	lr
    4c56:	bf00      	nop
    4c58:	20000480 	.word	0x20000480

00004c5c <__locale_msgcharset>:
    4c5c:	4800      	ldr	r0, [pc, #0]	; (4c60 <__locale_msgcharset+0x4>)
    4c5e:	4770      	bx	lr
    4c60:	200004a4 	.word	0x200004a4

00004c64 <__locale_cjk_lang>:
    4c64:	2000      	movs	r0, #0
    4c66:	4770      	bx	lr

00004c68 <_localeconv_r>:
    4c68:	4800      	ldr	r0, [pc, #0]	; (4c6c <_localeconv_r+0x4>)
    4c6a:	4770      	bx	lr
    4c6c:	200004c4 	.word	0x200004c4

00004c70 <setlocale>:
    4c70:	460a      	mov	r2, r1
    4c72:	4903      	ldr	r1, [pc, #12]	; (4c80 <setlocale+0x10>)
    4c74:	4603      	mov	r3, r0
    4c76:	6808      	ldr	r0, [r1, #0]
    4c78:	4619      	mov	r1, r3
    4c7a:	f7ff bfc3 	b.w	4c04 <_setlocale_r>
    4c7e:	bf00      	nop
    4c80:	20000050 	.word	0x20000050

00004c84 <localeconv>:
    4c84:	4800      	ldr	r0, [pc, #0]	; (4c88 <localeconv+0x4>)
    4c86:	4770      	bx	lr
    4c88:	200004c4 	.word	0x200004c4

00004c8c <__smakebuf_r>:
    4c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c8e:	898b      	ldrh	r3, [r1, #12]
    4c90:	460c      	mov	r4, r1
    4c92:	f003 0102 	and.w	r1, r3, #2
    4c96:	b20a      	sxth	r2, r1
    4c98:	b091      	sub	sp, #68	; 0x44
    4c9a:	4606      	mov	r6, r0
    4c9c:	2a00      	cmp	r2, #0
    4c9e:	d13f      	bne.n	4d20 <__smakebuf_r+0x94>
    4ca0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    4ca4:	2900      	cmp	r1, #0
    4ca6:	da0d      	bge.n	4cc4 <__smakebuf_r+0x38>
    4ca8:	89a7      	ldrh	r7, [r4, #12]
    4caa:	f007 0280 	and.w	r2, r7, #128	; 0x80
    4cae:	f447 6300 	orr.w	r3, r7, #2048	; 0x800
    4cb2:	b210      	sxth	r0, r2
    4cb4:	2800      	cmp	r0, #0
    4cb6:	bf0c      	ite	eq
    4cb8:	f44f 6580 	moveq.w	r5, #1024	; 0x400
    4cbc:	2540      	movne	r5, #64	; 0x40
    4cbe:	81a3      	strh	r3, [r4, #12]
    4cc0:	2700      	movs	r7, #0
    4cc2:	e020      	b.n	4d06 <__smakebuf_r+0x7a>
    4cc4:	aa01      	add	r2, sp, #4
    4cc6:	f000 fd7f 	bl	57c8 <_fstat_r>
    4cca:	2800      	cmp	r0, #0
    4ccc:	dbec      	blt.n	4ca8 <__smakebuf_r+0x1c>
    4cce:	9802      	ldr	r0, [sp, #8]
    4cd0:	f400 4570 	and.w	r5, r0, #61440	; 0xf000
    4cd4:	f5b5 5300 	subs.w	r3, r5, #8192	; 0x2000
    4cd8:	425f      	negs	r7, r3
    4cda:	415f      	adcs	r7, r3
    4cdc:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    4ce0:	d10b      	bne.n	4cfa <__smakebuf_r+0x6e>
    4ce2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    4ce4:	4a1d      	ldr	r2, [pc, #116]	; (4d5c <__smakebuf_r+0xd0>)
    4ce6:	4291      	cmp	r1, r2
    4ce8:	d107      	bne.n	4cfa <__smakebuf_r+0x6e>
    4cea:	89a3      	ldrh	r3, [r4, #12]
    4cec:	f44f 6580 	mov.w	r5, #1024	; 0x400
    4cf0:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
    4cf4:	81a1      	strh	r1, [r4, #12]
    4cf6:	64e5      	str	r5, [r4, #76]	; 0x4c
    4cf8:	e005      	b.n	4d06 <__smakebuf_r+0x7a>
    4cfa:	89a0      	ldrh	r0, [r4, #12]
    4cfc:	f440 6500 	orr.w	r5, r0, #2048	; 0x800
    4d00:	81a5      	strh	r5, [r4, #12]
    4d02:	f44f 6580 	mov.w	r5, #1024	; 0x400
    4d06:	4630      	mov	r0, r6
    4d08:	4629      	mov	r1, r5
    4d0a:	f000 f83b 	bl	4d84 <_malloc_r>
    4d0e:	b970      	cbnz	r0, 4d2e <__smakebuf_r+0xa2>
    4d10:	89a3      	ldrh	r3, [r4, #12]
    4d12:	f403 7200 	and.w	r2, r3, #512	; 0x200
    4d16:	b210      	sxth	r0, r2
    4d18:	b9e8      	cbnz	r0, 4d56 <__smakebuf_r+0xca>
    4d1a:	f043 0102 	orr.w	r1, r3, #2
    4d1e:	81a1      	strh	r1, [r4, #12]
    4d20:	f104 0343 	add.w	r3, r4, #67	; 0x43
    4d24:	2201      	movs	r2, #1
    4d26:	6023      	str	r3, [r4, #0]
    4d28:	6123      	str	r3, [r4, #16]
    4d2a:	6162      	str	r2, [r4, #20]
    4d2c:	e013      	b.n	4d56 <__smakebuf_r+0xca>
    4d2e:	89a2      	ldrh	r2, [r4, #12]
    4d30:	490b      	ldr	r1, [pc, #44]	; (4d60 <__smakebuf_r+0xd4>)
    4d32:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    4d36:	63f1      	str	r1, [r6, #60]	; 0x3c
    4d38:	81a3      	strh	r3, [r4, #12]
    4d3a:	6020      	str	r0, [r4, #0]
    4d3c:	6120      	str	r0, [r4, #16]
    4d3e:	6165      	str	r5, [r4, #20]
    4d40:	b14f      	cbz	r7, 4d56 <__smakebuf_r+0xca>
    4d42:	4630      	mov	r0, r6
    4d44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    4d48:	f000 fd50 	bl	57ec <_isatty_r>
    4d4c:	b118      	cbz	r0, 4d56 <__smakebuf_r+0xca>
    4d4e:	89a0      	ldrh	r0, [r4, #12]
    4d50:	f040 0101 	orr.w	r1, r0, #1
    4d54:	81a1      	strh	r1, [r4, #12]
    4d56:	b011      	add	sp, #68	; 0x44
    4d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d5a:	bf00      	nop
    4d5c:	0000554f 	.word	0x0000554f
    4d60:	00004455 	.word	0x00004455

00004d64 <malloc>:
    4d64:	4b02      	ldr	r3, [pc, #8]	; (4d70 <malloc+0xc>)
    4d66:	4601      	mov	r1, r0
    4d68:	6818      	ldr	r0, [r3, #0]
    4d6a:	f000 b80b 	b.w	4d84 <_malloc_r>
    4d6e:	bf00      	nop
    4d70:	20000050 	.word	0x20000050

00004d74 <free>:
    4d74:	4b02      	ldr	r3, [pc, #8]	; (4d80 <free+0xc>)
    4d76:	4601      	mov	r1, r0
    4d78:	6818      	ldr	r0, [r3, #0]
    4d7a:	f7ff bcef 	b.w	475c <_free_r>
    4d7e:	bf00      	nop
    4d80:	20000050 	.word	0x20000050

00004d84 <_malloc_r>:
    4d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4d88:	f101 040b 	add.w	r4, r1, #11
    4d8c:	2c16      	cmp	r4, #22
    4d8e:	4606      	mov	r6, r0
    4d90:	d903      	bls.n	4d9a <_malloc_r+0x16>
    4d92:	f034 0407 	bics.w	r4, r4, #7
    4d96:	d501      	bpl.n	4d9c <_malloc_r+0x18>
    4d98:	e002      	b.n	4da0 <_malloc_r+0x1c>
    4d9a:	2410      	movs	r4, #16
    4d9c:	428c      	cmp	r4, r1
    4d9e:	d202      	bcs.n	4da6 <_malloc_r+0x22>
    4da0:	250c      	movs	r5, #12
    4da2:	6035      	str	r5, [r6, #0]
    4da4:	e1d9      	b.n	515a <_malloc_r+0x3d6>
    4da6:	4630      	mov	r0, r6
    4da8:	f000 fa1f 	bl	51ea <__malloc_lock>
    4dac:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
    4db0:	d214      	bcs.n	4ddc <_malloc_r+0x58>
    4db2:	4da0      	ldr	r5, [pc, #640]	; (5034 <_malloc_r+0x2b0>)
    4db4:	08e1      	lsrs	r1, r4, #3
    4db6:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
    4dba:	68c5      	ldr	r5, [r0, #12]
    4dbc:	4285      	cmp	r5, r0
    4dbe:	d105      	bne.n	4dcc <_malloc_r+0x48>
    4dc0:	f105 0308 	add.w	r3, r5, #8
    4dc4:	696d      	ldr	r5, [r5, #20]
    4dc6:	1c8a      	adds	r2, r1, #2
    4dc8:	429d      	cmp	r5, r3
    4dca:	d044      	beq.n	4e56 <_malloc_r+0xd2>
    4dcc:	68e8      	ldr	r0, [r5, #12]
    4dce:	68a9      	ldr	r1, [r5, #8]
    4dd0:	686a      	ldr	r2, [r5, #4]
    4dd2:	60c8      	str	r0, [r1, #12]
    4dd4:	f022 0303 	bic.w	r3, r2, #3
    4dd8:	6081      	str	r1, [r0, #8]
    4dda:	e059      	b.n	4e90 <_malloc_r+0x10c>
    4ddc:	0a62      	lsrs	r2, r4, #9
    4dde:	d101      	bne.n	4de4 <_malloc_r+0x60>
    4de0:	08e2      	lsrs	r2, r4, #3
    4de2:	e01b      	b.n	4e1c <_malloc_r+0x98>
    4de4:	2a04      	cmp	r2, #4
    4de6:	d802      	bhi.n	4dee <_malloc_r+0x6a>
    4de8:	09a2      	lsrs	r2, r4, #6
    4dea:	3238      	adds	r2, #56	; 0x38
    4dec:	e016      	b.n	4e1c <_malloc_r+0x98>
    4dee:	2a14      	cmp	r2, #20
    4df0:	d801      	bhi.n	4df6 <_malloc_r+0x72>
    4df2:	325b      	adds	r2, #91	; 0x5b
    4df4:	e012      	b.n	4e1c <_malloc_r+0x98>
    4df6:	2a54      	cmp	r2, #84	; 0x54
    4df8:	d802      	bhi.n	4e00 <_malloc_r+0x7c>
    4dfa:	0b22      	lsrs	r2, r4, #12
    4dfc:	326e      	adds	r2, #110	; 0x6e
    4dfe:	e00d      	b.n	4e1c <_malloc_r+0x98>
    4e00:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    4e04:	d802      	bhi.n	4e0c <_malloc_r+0x88>
    4e06:	0be2      	lsrs	r2, r4, #15
    4e08:	3277      	adds	r2, #119	; 0x77
    4e0a:	e007      	b.n	4e1c <_malloc_r+0x98>
    4e0c:	f240 5354 	movw	r3, #1364	; 0x554
    4e10:	429a      	cmp	r2, r3
    4e12:	d802      	bhi.n	4e1a <_malloc_r+0x96>
    4e14:	0ca2      	lsrs	r2, r4, #18
    4e16:	327c      	adds	r2, #124	; 0x7c
    4e18:	e000      	b.n	4e1c <_malloc_r+0x98>
    4e1a:	227e      	movs	r2, #126	; 0x7e
    4e1c:	4885      	ldr	r0, [pc, #532]	; (5034 <_malloc_r+0x2b0>)
    4e1e:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
    4e22:	68dd      	ldr	r5, [r3, #12]
    4e24:	429d      	cmp	r5, r3
    4e26:	d015      	beq.n	4e54 <_malloc_r+0xd0>
    4e28:	6869      	ldr	r1, [r5, #4]
    4e2a:	f021 0103 	bic.w	r1, r1, #3
    4e2e:	1b08      	subs	r0, r1, r4
    4e30:	280f      	cmp	r0, #15
    4e32:	dd01      	ble.n	4e38 <_malloc_r+0xb4>
    4e34:	3a01      	subs	r2, #1
    4e36:	e00d      	b.n	4e54 <_malloc_r+0xd0>
    4e38:	2800      	cmp	r0, #0
    4e3a:	db09      	blt.n	4e50 <_malloc_r+0xcc>
    4e3c:	68eb      	ldr	r3, [r5, #12]
    4e3e:	68aa      	ldr	r2, [r5, #8]
    4e40:	60d3      	str	r3, [r2, #12]
    4e42:	609a      	str	r2, [r3, #8]
    4e44:	186b      	adds	r3, r5, r1
    4e46:	685a      	ldr	r2, [r3, #4]
    4e48:	f042 0001 	orr.w	r0, r2, #1
    4e4c:	6058      	str	r0, [r3, #4]
    4e4e:	e190      	b.n	5172 <_malloc_r+0x3ee>
    4e50:	68ed      	ldr	r5, [r5, #12]
    4e52:	e7e7      	b.n	4e24 <_malloc_r+0xa0>
    4e54:	3201      	adds	r2, #1
    4e56:	4977      	ldr	r1, [pc, #476]	; (5034 <_malloc_r+0x2b0>)
    4e58:	690d      	ldr	r5, [r1, #16]
    4e5a:	f101 0708 	add.w	r7, r1, #8
    4e5e:	42bd      	cmp	r5, r7
    4e60:	d068      	beq.n	4f34 <_malloc_r+0x1b0>
    4e62:	6868      	ldr	r0, [r5, #4]
    4e64:	f020 0303 	bic.w	r3, r0, #3
    4e68:	1b18      	subs	r0, r3, r4
    4e6a:	280f      	cmp	r0, #15
    4e6c:	dd0c      	ble.n	4e88 <_malloc_r+0x104>
    4e6e:	192b      	adds	r3, r5, r4
    4e70:	614b      	str	r3, [r1, #20]
    4e72:	610b      	str	r3, [r1, #16]
    4e74:	f044 0401 	orr.w	r4, r4, #1
    4e78:	f040 0101 	orr.w	r1, r0, #1
    4e7c:	606c      	str	r4, [r5, #4]
    4e7e:	60df      	str	r7, [r3, #12]
    4e80:	609f      	str	r7, [r3, #8]
    4e82:	6059      	str	r1, [r3, #4]
    4e84:	5018      	str	r0, [r3, r0]
    4e86:	e174      	b.n	5172 <_malloc_r+0x3ee>
    4e88:	2800      	cmp	r0, #0
    4e8a:	614f      	str	r7, [r1, #20]
    4e8c:	610f      	str	r7, [r1, #16]
    4e8e:	db01      	blt.n	4e94 <_malloc_r+0x110>
    4e90:	18eb      	adds	r3, r5, r3
    4e92:	e7d8      	b.n	4e46 <_malloc_r+0xc2>
    4e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4e98:	d20f      	bcs.n	4eba <_malloc_r+0x136>
    4e9a:	08db      	lsrs	r3, r3, #3
    4e9c:	1098      	asrs	r0, r3, #2
    4e9e:	2701      	movs	r7, #1
    4ea0:	fa07 f700 	lsl.w	r7, r7, r0
    4ea4:	6848      	ldr	r0, [r1, #4]
    4ea6:	4307      	orrs	r7, r0
    4ea8:	604f      	str	r7, [r1, #4]
    4eaa:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    4eae:	60e9      	str	r1, [r5, #12]
    4eb0:	688b      	ldr	r3, [r1, #8]
    4eb2:	60ab      	str	r3, [r5, #8]
    4eb4:	60dd      	str	r5, [r3, #12]
    4eb6:	608d      	str	r5, [r1, #8]
    4eb8:	e03c      	b.n	4f34 <_malloc_r+0x1b0>
    4eba:	0a58      	lsrs	r0, r3, #9
    4ebc:	2804      	cmp	r0, #4
    4ebe:	d802      	bhi.n	4ec6 <_malloc_r+0x142>
    4ec0:	0998      	lsrs	r0, r3, #6
    4ec2:	3038      	adds	r0, #56	; 0x38
    4ec4:	e016      	b.n	4ef4 <_malloc_r+0x170>
    4ec6:	2814      	cmp	r0, #20
    4ec8:	d801      	bhi.n	4ece <_malloc_r+0x14a>
    4eca:	305b      	adds	r0, #91	; 0x5b
    4ecc:	e012      	b.n	4ef4 <_malloc_r+0x170>
    4ece:	2854      	cmp	r0, #84	; 0x54
    4ed0:	d802      	bhi.n	4ed8 <_malloc_r+0x154>
    4ed2:	0b18      	lsrs	r0, r3, #12
    4ed4:	306e      	adds	r0, #110	; 0x6e
    4ed6:	e00d      	b.n	4ef4 <_malloc_r+0x170>
    4ed8:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
    4edc:	d802      	bhi.n	4ee4 <_malloc_r+0x160>
    4ede:	0bd8      	lsrs	r0, r3, #15
    4ee0:	3077      	adds	r0, #119	; 0x77
    4ee2:	e007      	b.n	4ef4 <_malloc_r+0x170>
    4ee4:	f240 5754 	movw	r7, #1364	; 0x554
    4ee8:	42b8      	cmp	r0, r7
    4eea:	d802      	bhi.n	4ef2 <_malloc_r+0x16e>
    4eec:	0c98      	lsrs	r0, r3, #18
    4eee:	307c      	adds	r0, #124	; 0x7c
    4ef0:	e000      	b.n	4ef4 <_malloc_r+0x170>
    4ef2:	207e      	movs	r0, #126	; 0x7e
    4ef4:	f8df e13c 	ldr.w	lr, [pc, #316]	; 5034 <_malloc_r+0x2b0>
    4ef8:	eb0e 07c0 	add.w	r7, lr, r0, lsl #3
    4efc:	68b9      	ldr	r1, [r7, #8]
    4efe:	42b9      	cmp	r1, r7
    4f00:	d10e      	bne.n	4f20 <_malloc_r+0x19c>
    4f02:	1087      	asrs	r7, r0, #2
    4f04:	2301      	movs	r3, #1
    4f06:	fa03 f007 	lsl.w	r0, r3, r7
    4f0a:	f8de 7004 	ldr.w	r7, [lr, #4]
    4f0e:	ea40 0307 	orr.w	r3, r0, r7
    4f12:	f8ce 3004 	str.w	r3, [lr, #4]
    4f16:	4608      	mov	r0, r1
    4f18:	e008      	b.n	4f2c <_malloc_r+0x1a8>
    4f1a:	6889      	ldr	r1, [r1, #8]
    4f1c:	42b9      	cmp	r1, r7
    4f1e:	d004      	beq.n	4f2a <_malloc_r+0x1a6>
    4f20:	6848      	ldr	r0, [r1, #4]
    4f22:	f020 0003 	bic.w	r0, r0, #3
    4f26:	4283      	cmp	r3, r0
    4f28:	d3f7      	bcc.n	4f1a <_malloc_r+0x196>
    4f2a:	68c8      	ldr	r0, [r1, #12]
    4f2c:	60e8      	str	r0, [r5, #12]
    4f2e:	60a9      	str	r1, [r5, #8]
    4f30:	60cd      	str	r5, [r1, #12]
    4f32:	6085      	str	r5, [r0, #8]
    4f34:	4f3f      	ldr	r7, [pc, #252]	; (5034 <_malloc_r+0x2b0>)
    4f36:	1095      	asrs	r5, r2, #2
    4f38:	2001      	movs	r0, #1
    4f3a:	6879      	ldr	r1, [r7, #4]
    4f3c:	fa00 f305 	lsl.w	r3, r0, r5
    4f40:	428b      	cmp	r3, r1
    4f42:	d85d      	bhi.n	5000 <_malloc_r+0x27c>
    4f44:	420b      	tst	r3, r1
    4f46:	d105      	bne.n	4f54 <_malloc_r+0x1d0>
    4f48:	f022 0203 	bic.w	r2, r2, #3
    4f4c:	005b      	lsls	r3, r3, #1
    4f4e:	3204      	adds	r2, #4
    4f50:	420b      	tst	r3, r1
    4f52:	d0fb      	beq.n	4f4c <_malloc_r+0x1c8>
    4f54:	4d37      	ldr	r5, [pc, #220]	; (5034 <_malloc_r+0x2b0>)
    4f56:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
    4f5a:	4677      	mov	r7, lr
    4f5c:	4610      	mov	r0, r2
    4f5e:	68fd      	ldr	r5, [r7, #12]
    4f60:	42bd      	cmp	r5, r7
    4f62:	d02d      	beq.n	4fc0 <_malloc_r+0x23c>
    4f64:	6869      	ldr	r1, [r5, #4]
    4f66:	f021 0c03 	bic.w	ip, r1, #3
    4f6a:	ebc4 010c 	rsb	r1, r4, ip
    4f6e:	290f      	cmp	r1, #15
    4f70:	dd13      	ble.n	4f9a <_malloc_r+0x216>
    4f72:	192b      	adds	r3, r5, r4
    4f74:	f044 0401 	orr.w	r4, r4, #1
    4f78:	68ea      	ldr	r2, [r5, #12]
    4f7a:	606c      	str	r4, [r5, #4]
    4f7c:	f855 0f08 	ldr.w	r0, [r5, #8]!
    4f80:	5059      	str	r1, [r3, r1]
    4f82:	60c2      	str	r2, [r0, #12]
    4f84:	6090      	str	r0, [r2, #8]
    4f86:	4a2b      	ldr	r2, [pc, #172]	; (5034 <_malloc_r+0x2b0>)
    4f88:	f041 0001 	orr.w	r0, r1, #1
    4f8c:	6153      	str	r3, [r2, #20]
    4f8e:	6113      	str	r3, [r2, #16]
    4f90:	3208      	adds	r2, #8
    4f92:	60da      	str	r2, [r3, #12]
    4f94:	609a      	str	r2, [r3, #8]
    4f96:	6058      	str	r0, [r3, #4]
    4f98:	e00c      	b.n	4fb4 <_malloc_r+0x230>
    4f9a:	2900      	cmp	r1, #0
    4f9c:	db0e      	blt.n	4fbc <_malloc_r+0x238>
    4f9e:	eb05 000c 	add.w	r0, r5, ip
    4fa2:	68e9      	ldr	r1, [r5, #12]
    4fa4:	6842      	ldr	r2, [r0, #4]
    4fa6:	f042 0301 	orr.w	r3, r2, #1
    4faa:	6043      	str	r3, [r0, #4]
    4fac:	f855 0f08 	ldr.w	r0, [r5, #8]!
    4fb0:	60c1      	str	r1, [r0, #12]
    4fb2:	6088      	str	r0, [r1, #8]
    4fb4:	4630      	mov	r0, r6
    4fb6:	f000 f919 	bl	51ec <__malloc_unlock>
    4fba:	e0de      	b.n	517a <_malloc_r+0x3f6>
    4fbc:	68ed      	ldr	r5, [r5, #12]
    4fbe:	e7cf      	b.n	4f60 <_malloc_r+0x1dc>
    4fc0:	3001      	adds	r0, #1
    4fc2:	0781      	lsls	r1, r0, #30
    4fc4:	f105 0708 	add.w	r7, r5, #8
    4fc8:	d1c9      	bne.n	4f5e <_malloc_r+0x1da>
    4fca:	4671      	mov	r1, lr
    4fcc:	0795      	lsls	r5, r2, #30
    4fce:	d105      	bne.n	4fdc <_malloc_r+0x258>
    4fd0:	4a18      	ldr	r2, [pc, #96]	; (5034 <_malloc_r+0x2b0>)
    4fd2:	6855      	ldr	r5, [r2, #4]
    4fd4:	ea25 0503 	bic.w	r5, r5, r3
    4fd8:	6055      	str	r5, [r2, #4]
    4fda:	e005      	b.n	4fe8 <_malloc_r+0x264>
    4fdc:	f1a1 0708 	sub.w	r7, r1, #8
    4fe0:	6809      	ldr	r1, [r1, #0]
    4fe2:	3a01      	subs	r2, #1
    4fe4:	42b9      	cmp	r1, r7
    4fe6:	d0f1      	beq.n	4fcc <_malloc_r+0x248>
    4fe8:	4f12      	ldr	r7, [pc, #72]	; (5034 <_malloc_r+0x2b0>)
    4fea:	687f      	ldr	r7, [r7, #4]
    4fec:	005b      	lsls	r3, r3, #1
    4fee:	42bb      	cmp	r3, r7
    4ff0:	d806      	bhi.n	5000 <_malloc_r+0x27c>
    4ff2:	b12b      	cbz	r3, 5000 <_malloc_r+0x27c>
    4ff4:	4602      	mov	r2, r0
    4ff6:	423b      	tst	r3, r7
    4ff8:	d1ac      	bne.n	4f54 <_malloc_r+0x1d0>
    4ffa:	3204      	adds	r2, #4
    4ffc:	005b      	lsls	r3, r3, #1
    4ffe:	e7fa      	b.n	4ff6 <_malloc_r+0x272>
    5000:	4b0c      	ldr	r3, [pc, #48]	; (5034 <_malloc_r+0x2b0>)
    5002:	689f      	ldr	r7, [r3, #8]
    5004:	6878      	ldr	r0, [r7, #4]
    5006:	f020 0903 	bic.w	r9, r0, #3
    500a:	45a1      	cmp	r9, r4
    500c:	4619      	mov	r1, r3
    500e:	d304      	bcc.n	501a <_malloc_r+0x296>
    5010:	ebc4 0009 	rsb	r0, r4, r9
    5014:	280f      	cmp	r0, #15
    5016:	f300 80a2 	bgt.w	515e <_malloc_r+0x3da>
    501a:	4a07      	ldr	r2, [pc, #28]	; (5038 <_malloc_r+0x2b4>)
    501c:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
    5020:	6815      	ldr	r5, [r2, #0]
    5022:	3301      	adds	r3, #1
    5024:	eb07 0a09 	add.w	sl, r7, r9
    5028:	eb04 0805 	add.w	r8, r4, r5
    502c:	d106      	bne.n	503c <_malloc_r+0x2b8>
    502e:	f108 0810 	add.w	r8, r8, #16
    5032:	e00b      	b.n	504c <_malloc_r+0x2c8>
    5034:	200004fc 	.word	0x200004fc
    5038:	200009dc 	.word	0x200009dc
    503c:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
    5040:	f100 010f 	add.w	r1, r0, #15
    5044:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
    5048:	f022 080f 	bic.w	r8, r2, #15
    504c:	4630      	mov	r0, r6
    504e:	4641      	mov	r1, r8
    5050:	f000 fa3c 	bl	54cc <_sbrk_r>
    5054:	1c42      	adds	r2, r0, #1
    5056:	4605      	mov	r5, r0
    5058:	d071      	beq.n	513e <_malloc_r+0x3ba>
    505a:	4550      	cmp	r0, sl
    505c:	d202      	bcs.n	5064 <_malloc_r+0x2e0>
    505e:	4b48      	ldr	r3, [pc, #288]	; (5180 <_malloc_r+0x3fc>)
    5060:	429f      	cmp	r7, r3
    5062:	d16c      	bne.n	513e <_malloc_r+0x3ba>
    5064:	4847      	ldr	r0, [pc, #284]	; (5184 <_malloc_r+0x400>)
    5066:	4a46      	ldr	r2, [pc, #280]	; (5180 <_malloc_r+0x3fc>)
    5068:	6841      	ldr	r1, [r0, #4]
    506a:	4555      	cmp	r5, sl
    506c:	eb08 0301 	add.w	r3, r8, r1
    5070:	6043      	str	r3, [r0, #4]
    5072:	d107      	bne.n	5084 <_malloc_r+0x300>
    5074:	0529      	lsls	r1, r5, #20
    5076:	d105      	bne.n	5084 <_malloc_r+0x300>
    5078:	6895      	ldr	r5, [r2, #8]
    507a:	44c8      	add	r8, r9
    507c:	f048 0001 	orr.w	r0, r8, #1
    5080:	6068      	str	r0, [r5, #4]
    5082:	e051      	b.n	5128 <_malloc_r+0x3a4>
    5084:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
    5088:	1c42      	adds	r2, r0, #1
    508a:	d103      	bne.n	5094 <_malloc_r+0x310>
    508c:	4a3c      	ldr	r2, [pc, #240]	; (5180 <_malloc_r+0x3fc>)
    508e:	f8c2 5408 	str.w	r5, [r2, #1032]	; 0x408
    5092:	e005      	b.n	50a0 <_malloc_r+0x31c>
    5094:	ebca 0a05 	rsb	sl, sl, r5
    5098:	eb03 010a 	add.w	r1, r3, sl
    509c:	4b39      	ldr	r3, [pc, #228]	; (5184 <_malloc_r+0x400>)
    509e:	6059      	str	r1, [r3, #4]
    50a0:	f015 0007 	ands.w	r0, r5, #7
    50a4:	bf1c      	itt	ne
    50a6:	f1c0 0008 	rsbne	r0, r0, #8
    50aa:	182d      	addne	r5, r5, r0
    50ac:	eb05 0c08 	add.w	ip, r5, r8
    50b0:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
    50b4:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
    50b8:	eba1 581e 	sub.w	r8, r1, lr, lsr #20
    50bc:	4641      	mov	r1, r8
    50be:	4630      	mov	r0, r6
    50c0:	f000 fa04 	bl	54cc <_sbrk_r>
    50c4:	4a2f      	ldr	r2, [pc, #188]	; (5184 <_malloc_r+0x400>)
    50c6:	1c43      	adds	r3, r0, #1
    50c8:	6853      	ldr	r3, [r2, #4]
    50ca:	bf08      	it	eq
    50cc:	f04f 0800 	moveq.w	r8, #0
    50d0:	eb08 0103 	add.w	r1, r8, r3
    50d4:	bf08      	it	eq
    50d6:	4628      	moveq	r0, r5
    50d8:	6051      	str	r1, [r2, #4]
    50da:	1b40      	subs	r0, r0, r5
    50dc:	4a28      	ldr	r2, [pc, #160]	; (5180 <_malloc_r+0x3fc>)
    50de:	eb00 0308 	add.w	r3, r0, r8
    50e2:	f043 0101 	orr.w	r1, r3, #1
    50e6:	4297      	cmp	r7, r2
    50e8:	6095      	str	r5, [r2, #8]
    50ea:	6069      	str	r1, [r5, #4]
    50ec:	d01c      	beq.n	5128 <_malloc_r+0x3a4>
    50ee:	f1b9 0f0f 	cmp.w	r9, #15
    50f2:	d802      	bhi.n	50fa <_malloc_r+0x376>
    50f4:	2201      	movs	r2, #1
    50f6:	606a      	str	r2, [r5, #4]
    50f8:	e021      	b.n	513e <_malloc_r+0x3ba>
    50fa:	687d      	ldr	r5, [r7, #4]
    50fc:	f1a9 090c 	sub.w	r9, r9, #12
    5100:	f029 0907 	bic.w	r9, r9, #7
    5104:	eb07 0309 	add.w	r3, r7, r9
    5108:	f005 0201 	and.w	r2, r5, #1
    510c:	2105      	movs	r1, #5
    510e:	ea49 0002 	orr.w	r0, r9, r2
    5112:	f1b9 0f0f 	cmp.w	r9, #15
    5116:	6078      	str	r0, [r7, #4]
    5118:	6059      	str	r1, [r3, #4]
    511a:	6099      	str	r1, [r3, #8]
    511c:	d904      	bls.n	5128 <_malloc_r+0x3a4>
    511e:	4630      	mov	r0, r6
    5120:	f107 0108 	add.w	r1, r7, #8
    5124:	f7ff fb1a 	bl	475c <_free_r>
    5128:	4a16      	ldr	r2, [pc, #88]	; (5184 <_malloc_r+0x400>)
    512a:	6853      	ldr	r3, [r2, #4]
    512c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    512e:	6b15      	ldr	r5, [r2, #48]	; 0x30
    5130:	428b      	cmp	r3, r1
    5132:	bf88      	it	hi
    5134:	62d3      	strhi	r3, [r2, #44]	; 0x2c
    5136:	42ab      	cmp	r3, r5
    5138:	bf84      	itt	hi
    513a:	4d12      	ldrhi	r5, [pc, #72]	; (5184 <_malloc_r+0x400>)
    513c:	632b      	strhi	r3, [r5, #48]	; 0x30
    513e:	4810      	ldr	r0, [pc, #64]	; (5180 <_malloc_r+0x3fc>)
    5140:	6882      	ldr	r2, [r0, #8]
    5142:	6853      	ldr	r3, [r2, #4]
    5144:	f023 0103 	bic.w	r1, r3, #3
    5148:	42a1      	cmp	r1, r4
    514a:	ebc4 0001 	rsb	r0, r4, r1
    514e:	d301      	bcc.n	5154 <_malloc_r+0x3d0>
    5150:	280f      	cmp	r0, #15
    5152:	dc04      	bgt.n	515e <_malloc_r+0x3da>
    5154:	4630      	mov	r0, r6
    5156:	f000 f849 	bl	51ec <__malloc_unlock>
    515a:	2500      	movs	r5, #0
    515c:	e00d      	b.n	517a <_malloc_r+0x3f6>
    515e:	4a08      	ldr	r2, [pc, #32]	; (5180 <_malloc_r+0x3fc>)
    5160:	6895      	ldr	r5, [r2, #8]
    5162:	f044 0301 	orr.w	r3, r4, #1
    5166:	192c      	adds	r4, r5, r4
    5168:	f040 0101 	orr.w	r1, r0, #1
    516c:	606b      	str	r3, [r5, #4]
    516e:	6094      	str	r4, [r2, #8]
    5170:	6061      	str	r1, [r4, #4]
    5172:	4630      	mov	r0, r6
    5174:	f000 f83a 	bl	51ec <__malloc_unlock>
    5178:	3508      	adds	r5, #8
    517a:	4628      	mov	r0, r5
    517c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5180:	200004fc 	.word	0x200004fc
    5184:	200009dc 	.word	0x200009dc

00005188 <memchr>:
    5188:	b510      	push	{r4, lr}
    518a:	b2c9      	uxtb	r1, r1
    518c:	4603      	mov	r3, r0
    518e:	1882      	adds	r2, r0, r2
    5190:	4293      	cmp	r3, r2
    5192:	4618      	mov	r0, r3
    5194:	d004      	beq.n	51a0 <memchr+0x18>
    5196:	7804      	ldrb	r4, [r0, #0]
    5198:	3301      	adds	r3, #1
    519a:	428c      	cmp	r4, r1
    519c:	d1f8      	bne.n	5190 <memchr+0x8>
    519e:	e000      	b.n	51a2 <memchr+0x1a>
    51a0:	2000      	movs	r0, #0
    51a2:	bd10      	pop	{r4, pc}

000051a4 <memcpy>:
    51a4:	b510      	push	{r4, lr}
    51a6:	2300      	movs	r3, #0
    51a8:	4293      	cmp	r3, r2
    51aa:	d003      	beq.n	51b4 <memcpy+0x10>
    51ac:	5ccc      	ldrb	r4, [r1, r3]
    51ae:	54c4      	strb	r4, [r0, r3]
    51b0:	3301      	adds	r3, #1
    51b2:	e7f9      	b.n	51a8 <memcpy+0x4>
    51b4:	bd10      	pop	{r4, pc}

000051b6 <memmove>:
    51b6:	4281      	cmp	r1, r0
    51b8:	b570      	push	{r4, r5, r6, lr}
    51ba:	d20e      	bcs.n	51da <memmove+0x24>
    51bc:	188c      	adds	r4, r1, r2
    51be:	42a0      	cmp	r0, r4
    51c0:	d20b      	bcs.n	51da <memmove+0x24>
    51c2:	1885      	adds	r5, r0, r2
    51c4:	4613      	mov	r3, r2
    51c6:	f113 33ff 	adds.w	r3, r3, #4294967295
    51ca:	d305      	bcc.n	51d8 <memmove+0x22>
    51cc:	4251      	negs	r1, r2
    51ce:	1866      	adds	r6, r4, r1
    51d0:	1869      	adds	r1, r5, r1
    51d2:	5cf6      	ldrb	r6, [r6, r3]
    51d4:	54ce      	strb	r6, [r1, r3]
    51d6:	e7f6      	b.n	51c6 <memmove+0x10>
    51d8:	bd70      	pop	{r4, r5, r6, pc}
    51da:	2300      	movs	r3, #0
    51dc:	4293      	cmp	r3, r2
    51de:	d003      	beq.n	51e8 <memmove+0x32>
    51e0:	5ccc      	ldrb	r4, [r1, r3]
    51e2:	54c4      	strb	r4, [r0, r3]
    51e4:	3301      	adds	r3, #1
    51e6:	e7f9      	b.n	51dc <memmove+0x26>
    51e8:	bd70      	pop	{r4, r5, r6, pc}

000051ea <__malloc_lock>:
    51ea:	4770      	bx	lr

000051ec <__malloc_unlock>:
    51ec:	4770      	bx	lr
	...

000051f0 <_realloc_r>:
    51f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    51f4:	4681      	mov	r9, r0
    51f6:	4616      	mov	r6, r2
    51f8:	460c      	mov	r4, r1
    51fa:	b921      	cbnz	r1, 5206 <_realloc_r+0x16>
    51fc:	4611      	mov	r1, r2
    51fe:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5202:	f7ff bdbf 	b.w	4d84 <_malloc_r>
    5206:	f7ff fff0 	bl	51ea <__malloc_lock>
    520a:	f106 070b 	add.w	r7, r6, #11
    520e:	f854 5c04 	ldr.w	r5, [r4, #-4]
    5212:	2f16      	cmp	r7, #22
    5214:	f1a4 0b08 	sub.w	fp, r4, #8
    5218:	f025 0803 	bic.w	r8, r5, #3
    521c:	d903      	bls.n	5226 <_realloc_r+0x36>
    521e:	f037 0707 	bics.w	r7, r7, #7
    5222:	d501      	bpl.n	5228 <_realloc_r+0x38>
    5224:	e002      	b.n	522c <_realloc_r+0x3c>
    5226:	2710      	movs	r7, #16
    5228:	42b7      	cmp	r7, r6
    522a:	d204      	bcs.n	5236 <_realloc_r+0x46>
    522c:	200c      	movs	r0, #12
    522e:	f8c9 0000 	str.w	r0, [r9]
    5232:	2600      	movs	r6, #0
    5234:	e145      	b.n	54c2 <_realloc_r+0x2d2>
    5236:	45b8      	cmp	r8, r7
    5238:	f280 811a 	bge.w	5470 <_realloc_r+0x280>
    523c:	4aa2      	ldr	r2, [pc, #648]	; (54c8 <_realloc_r+0x2d8>)
    523e:	6891      	ldr	r1, [r2, #8]
    5240:	eb0b 0308 	add.w	r3, fp, r8
    5244:	428b      	cmp	r3, r1
    5246:	d006      	beq.n	5256 <_realloc_r+0x66>
    5248:	6858      	ldr	r0, [r3, #4]
    524a:	f020 0201 	bic.w	r2, r0, #1
    524e:	1898      	adds	r0, r3, r2
    5250:	6842      	ldr	r2, [r0, #4]
    5252:	07d0      	lsls	r0, r2, #31
    5254:	d426      	bmi.n	52a4 <_realloc_r+0xb4>
    5256:	685a      	ldr	r2, [r3, #4]
    5258:	428b      	cmp	r3, r1
    525a:	f022 0003 	bic.w	r0, r2, #3
    525e:	eb00 0a08 	add.w	sl, r0, r8
    5262:	d118      	bne.n	5296 <_realloc_r+0xa6>
    5264:	f107 0210 	add.w	r2, r7, #16
    5268:	4592      	cmp	sl, r2
    526a:	db1d      	blt.n	52a8 <_realloc_r+0xb8>
    526c:	eb0b 0507 	add.w	r5, fp, r7
    5270:	ebc7 0a0a 	rsb	sl, r7, sl
    5274:	f04a 0101 	orr.w	r1, sl, #1
    5278:	6069      	str	r1, [r5, #4]
    527a:	f854 2c04 	ldr.w	r2, [r4, #-4]
    527e:	4e92      	ldr	r6, [pc, #584]	; (54c8 <_realloc_r+0x2d8>)
    5280:	f002 0301 	and.w	r3, r2, #1
    5284:	431f      	orrs	r7, r3
    5286:	60b5      	str	r5, [r6, #8]
    5288:	f844 7c04 	str.w	r7, [r4, #-4]
    528c:	4648      	mov	r0, r9
    528e:	f7ff ffad 	bl	51ec <__malloc_unlock>
    5292:	4626      	mov	r6, r4
    5294:	e115      	b.n	54c2 <_realloc_r+0x2d2>
    5296:	45ba      	cmp	sl, r7
    5298:	db06      	blt.n	52a8 <_realloc_r+0xb8>
    529a:	68dd      	ldr	r5, [r3, #12]
    529c:	689e      	ldr	r6, [r3, #8]
    529e:	60f5      	str	r5, [r6, #12]
    52a0:	60ae      	str	r6, [r5, #8]
    52a2:	e0e6      	b.n	5472 <_realloc_r+0x282>
    52a4:	2000      	movs	r0, #0
    52a6:	4603      	mov	r3, r0
    52a8:	07ea      	lsls	r2, r5, #31
    52aa:	f100 8091 	bmi.w	53d0 <_realloc_r+0x1e0>
    52ae:	f854 5c08 	ldr.w	r5, [r4, #-8]
    52b2:	ebc5 050b 	rsb	r5, r5, fp
    52b6:	686a      	ldr	r2, [r5, #4]
    52b8:	f022 0203 	bic.w	r2, r2, #3
    52bc:	2b00      	cmp	r3, #0
    52be:	d051      	beq.n	5364 <_realloc_r+0x174>
    52c0:	eb02 0a08 	add.w	sl, r2, r8
    52c4:	428b      	cmp	r3, r1
    52c6:	4482      	add	sl, r0
    52c8:	d145      	bne.n	5356 <_realloc_r+0x166>
    52ca:	f107 0310 	add.w	r3, r7, #16
    52ce:	459a      	cmp	sl, r3
    52d0:	db48      	blt.n	5364 <_realloc_r+0x174>
    52d2:	462e      	mov	r6, r5
    52d4:	68e9      	ldr	r1, [r5, #12]
    52d6:	f856 3f08 	ldr.w	r3, [r6, #8]!
    52da:	f1a8 0204 	sub.w	r2, r8, #4
    52de:	2a24      	cmp	r2, #36	; 0x24
    52e0:	60d9      	str	r1, [r3, #12]
    52e2:	608b      	str	r3, [r1, #8]
    52e4:	d825      	bhi.n	5332 <_realloc_r+0x142>
    52e6:	2a13      	cmp	r2, #19
    52e8:	d91b      	bls.n	5322 <_realloc_r+0x132>
    52ea:	6821      	ldr	r1, [r4, #0]
    52ec:	60a9      	str	r1, [r5, #8]
    52ee:	6863      	ldr	r3, [r4, #4]
    52f0:	2a1b      	cmp	r2, #27
    52f2:	60eb      	str	r3, [r5, #12]
    52f4:	d803      	bhi.n	52fe <_realloc_r+0x10e>
    52f6:	f105 0010 	add.w	r0, r5, #16
    52fa:	3408      	adds	r4, #8
    52fc:	e012      	b.n	5324 <_realloc_r+0x134>
    52fe:	68a0      	ldr	r0, [r4, #8]
    5300:	6128      	str	r0, [r5, #16]
    5302:	68e1      	ldr	r1, [r4, #12]
    5304:	2a24      	cmp	r2, #36	; 0x24
    5306:	6169      	str	r1, [r5, #20]
    5308:	d003      	beq.n	5312 <_realloc_r+0x122>
    530a:	f105 0018 	add.w	r0, r5, #24
    530e:	3410      	adds	r4, #16
    5310:	e008      	b.n	5324 <_realloc_r+0x134>
    5312:	6922      	ldr	r2, [r4, #16]
    5314:	61aa      	str	r2, [r5, #24]
    5316:	6963      	ldr	r3, [r4, #20]
    5318:	f105 0020 	add.w	r0, r5, #32
    531c:	61eb      	str	r3, [r5, #28]
    531e:	3418      	adds	r4, #24
    5320:	e000      	b.n	5324 <_realloc_r+0x134>
    5322:	4630      	mov	r0, r6
    5324:	6821      	ldr	r1, [r4, #0]
    5326:	6001      	str	r1, [r0, #0]
    5328:	6862      	ldr	r2, [r4, #4]
    532a:	6042      	str	r2, [r0, #4]
    532c:	68a3      	ldr	r3, [r4, #8]
    532e:	6083      	str	r3, [r0, #8]
    5330:	e003      	b.n	533a <_realloc_r+0x14a>
    5332:	4630      	mov	r0, r6
    5334:	4621      	mov	r1, r4
    5336:	f7ff ff3e 	bl	51b6 <memmove>
    533a:	19e8      	adds	r0, r5, r7
    533c:	ebc7 0a0a 	rsb	sl, r7, sl
    5340:	f04a 0201 	orr.w	r2, sl, #1
    5344:	6042      	str	r2, [r0, #4]
    5346:	686b      	ldr	r3, [r5, #4]
    5348:	495f      	ldr	r1, [pc, #380]	; (54c8 <_realloc_r+0x2d8>)
    534a:	6088      	str	r0, [r1, #8]
    534c:	f003 0001 	and.w	r0, r3, #1
    5350:	4307      	orrs	r7, r0
    5352:	606f      	str	r7, [r5, #4]
    5354:	e088      	b.n	5468 <_realloc_r+0x278>
    5356:	45ba      	cmp	sl, r7
    5358:	db04      	blt.n	5364 <_realloc_r+0x174>
    535a:	68d9      	ldr	r1, [r3, #12]
    535c:	6898      	ldr	r0, [r3, #8]
    535e:	60c1      	str	r1, [r0, #12]
    5360:	6088      	str	r0, [r1, #8]
    5362:	e003      	b.n	536c <_realloc_r+0x17c>
    5364:	eb02 0a08 	add.w	sl, r2, r8
    5368:	45ba      	cmp	sl, r7
    536a:	db31      	blt.n	53d0 <_realloc_r+0x1e0>
    536c:	4628      	mov	r0, r5
    536e:	68eb      	ldr	r3, [r5, #12]
    5370:	f850 1f08 	ldr.w	r1, [r0, #8]!
    5374:	f1a8 0204 	sub.w	r2, r8, #4
    5378:	2a24      	cmp	r2, #36	; 0x24
    537a:	60cb      	str	r3, [r1, #12]
    537c:	6099      	str	r1, [r3, #8]
    537e:	d823      	bhi.n	53c8 <_realloc_r+0x1d8>
    5380:	2a13      	cmp	r2, #19
    5382:	d91a      	bls.n	53ba <_realloc_r+0x1ca>
    5384:	6820      	ldr	r0, [r4, #0]
    5386:	60a8      	str	r0, [r5, #8]
    5388:	6866      	ldr	r6, [r4, #4]
    538a:	2a1b      	cmp	r2, #27
    538c:	60ee      	str	r6, [r5, #12]
    538e:	d803      	bhi.n	5398 <_realloc_r+0x1a8>
    5390:	f105 0010 	add.w	r0, r5, #16
    5394:	3408      	adds	r4, #8
    5396:	e010      	b.n	53ba <_realloc_r+0x1ca>
    5398:	68a3      	ldr	r3, [r4, #8]
    539a:	612b      	str	r3, [r5, #16]
    539c:	68e1      	ldr	r1, [r4, #12]
    539e:	2a24      	cmp	r2, #36	; 0x24
    53a0:	6169      	str	r1, [r5, #20]
    53a2:	d003      	beq.n	53ac <_realloc_r+0x1bc>
    53a4:	f105 0018 	add.w	r0, r5, #24
    53a8:	3410      	adds	r4, #16
    53aa:	e006      	b.n	53ba <_realloc_r+0x1ca>
    53ac:	6922      	ldr	r2, [r4, #16]
    53ae:	61aa      	str	r2, [r5, #24]
    53b0:	6960      	ldr	r0, [r4, #20]
    53b2:	3418      	adds	r4, #24
    53b4:	61e8      	str	r0, [r5, #28]
    53b6:	f105 0020 	add.w	r0, r5, #32
    53ba:	6826      	ldr	r6, [r4, #0]
    53bc:	6006      	str	r6, [r0, #0]
    53be:	6863      	ldr	r3, [r4, #4]
    53c0:	6043      	str	r3, [r0, #4]
    53c2:	68a1      	ldr	r1, [r4, #8]
    53c4:	6081      	str	r1, [r0, #8]
    53c6:	e055      	b.n	5474 <_realloc_r+0x284>
    53c8:	4621      	mov	r1, r4
    53ca:	f7ff fef4 	bl	51b6 <memmove>
    53ce:	e051      	b.n	5474 <_realloc_r+0x284>
    53d0:	4631      	mov	r1, r6
    53d2:	4648      	mov	r0, r9
    53d4:	f7ff fcd6 	bl	4d84 <_malloc_r>
    53d8:	4606      	mov	r6, r0
    53da:	2800      	cmp	r0, #0
    53dc:	d044      	beq.n	5468 <_realloc_r+0x278>
    53de:	f854 1c04 	ldr.w	r1, [r4, #-4]
    53e2:	f021 0301 	bic.w	r3, r1, #1
    53e6:	f1a0 0208 	sub.w	r2, r0, #8
    53ea:	eb0b 0103 	add.w	r1, fp, r3
    53ee:	428a      	cmp	r2, r1
    53f0:	d106      	bne.n	5400 <_realloc_r+0x210>
    53f2:	f850 6c04 	ldr.w	r6, [r0, #-4]
    53f6:	f026 0503 	bic.w	r5, r6, #3
    53fa:	eb05 0a08 	add.w	sl, r5, r8
    53fe:	e038      	b.n	5472 <_realloc_r+0x282>
    5400:	f1a8 0204 	sub.w	r2, r8, #4
    5404:	2a24      	cmp	r2, #36	; 0x24
    5406:	d828      	bhi.n	545a <_realloc_r+0x26a>
    5408:	2a13      	cmp	r2, #19
    540a:	d91e      	bls.n	544a <_realloc_r+0x25a>
    540c:	6823      	ldr	r3, [r4, #0]
    540e:	6003      	str	r3, [r0, #0]
    5410:	6861      	ldr	r1, [r4, #4]
    5412:	2a1b      	cmp	r2, #27
    5414:	6041      	str	r1, [r0, #4]
    5416:	d804      	bhi.n	5422 <_realloc_r+0x232>
    5418:	f100 0008 	add.w	r0, r0, #8
    541c:	f104 0208 	add.w	r2, r4, #8
    5420:	e014      	b.n	544c <_realloc_r+0x25c>
    5422:	68a0      	ldr	r0, [r4, #8]
    5424:	60b0      	str	r0, [r6, #8]
    5426:	68e3      	ldr	r3, [r4, #12]
    5428:	2a24      	cmp	r2, #36	; 0x24
    542a:	60f3      	str	r3, [r6, #12]
    542c:	d004      	beq.n	5438 <_realloc_r+0x248>
    542e:	f106 0010 	add.w	r0, r6, #16
    5432:	f104 0210 	add.w	r2, r4, #16
    5436:	e009      	b.n	544c <_realloc_r+0x25c>
    5438:	6922      	ldr	r2, [r4, #16]
    543a:	6132      	str	r2, [r6, #16]
    543c:	6961      	ldr	r1, [r4, #20]
    543e:	f106 0018 	add.w	r0, r6, #24
    5442:	6171      	str	r1, [r6, #20]
    5444:	f104 0218 	add.w	r2, r4, #24
    5448:	e000      	b.n	544c <_realloc_r+0x25c>
    544a:	4622      	mov	r2, r4
    544c:	6813      	ldr	r3, [r2, #0]
    544e:	6003      	str	r3, [r0, #0]
    5450:	6851      	ldr	r1, [r2, #4]
    5452:	6041      	str	r1, [r0, #4]
    5454:	6892      	ldr	r2, [r2, #8]
    5456:	6082      	str	r2, [r0, #8]
    5458:	e002      	b.n	5460 <_realloc_r+0x270>
    545a:	4621      	mov	r1, r4
    545c:	f7ff feab 	bl	51b6 <memmove>
    5460:	4648      	mov	r0, r9
    5462:	4621      	mov	r1, r4
    5464:	f7ff f97a 	bl	475c <_free_r>
    5468:	4648      	mov	r0, r9
    546a:	f7ff febf 	bl	51ec <__malloc_unlock>
    546e:	e028      	b.n	54c2 <_realloc_r+0x2d2>
    5470:	46c2      	mov	sl, r8
    5472:	465d      	mov	r5, fp
    5474:	ebc7 000a 	rsb	r0, r7, sl
    5478:	280f      	cmp	r0, #15
    547a:	686a      	ldr	r2, [r5, #4]
    547c:	d911      	bls.n	54a2 <_realloc_r+0x2b2>
    547e:	19e9      	adds	r1, r5, r7
    5480:	f002 0601 	and.w	r6, r2, #1
    5484:	4337      	orrs	r7, r6
    5486:	f040 0301 	orr.w	r3, r0, #1
    548a:	1808      	adds	r0, r1, r0
    548c:	606f      	str	r7, [r5, #4]
    548e:	604b      	str	r3, [r1, #4]
    5490:	6842      	ldr	r2, [r0, #4]
    5492:	f042 0601 	orr.w	r6, r2, #1
    5496:	6046      	str	r6, [r0, #4]
    5498:	3108      	adds	r1, #8
    549a:	4648      	mov	r0, r9
    549c:	f7ff f95e 	bl	475c <_free_r>
    54a0:	e00a      	b.n	54b8 <_realloc_r+0x2c8>
    54a2:	f002 0601 	and.w	r6, r2, #1
    54a6:	eb05 010a 	add.w	r1, r5, sl
    54aa:	ea4a 0306 	orr.w	r3, sl, r6
    54ae:	606b      	str	r3, [r5, #4]
    54b0:	6848      	ldr	r0, [r1, #4]
    54b2:	f040 0201 	orr.w	r2, r0, #1
    54b6:	604a      	str	r2, [r1, #4]
    54b8:	4648      	mov	r0, r9
    54ba:	f7ff fe97 	bl	51ec <__malloc_unlock>
    54be:	f105 0608 	add.w	r6, r5, #8
    54c2:	4630      	mov	r0, r6
    54c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    54c8:	200004fc 	.word	0x200004fc

000054cc <_sbrk_r>:
    54cc:	b538      	push	{r3, r4, r5, lr}
    54ce:	4c06      	ldr	r4, [pc, #24]	; (54e8 <_sbrk_r+0x1c>)
    54d0:	2300      	movs	r3, #0
    54d2:	4605      	mov	r5, r0
    54d4:	4608      	mov	r0, r1
    54d6:	6023      	str	r3, [r4, #0]
    54d8:	f7fe f87a 	bl	35d0 <_sbrk>
    54dc:	1c43      	adds	r3, r0, #1
    54de:	d102      	bne.n	54e6 <_sbrk_r+0x1a>
    54e0:	6821      	ldr	r1, [r4, #0]
    54e2:	b101      	cbz	r1, 54e6 <_sbrk_r+0x1a>
    54e4:	6029      	str	r1, [r5, #0]
    54e6:	bd38      	pop	{r3, r4, r5, pc}
    54e8:	20000aa4 	.word	0x20000aa4

000054ec <__sread>:
    54ec:	b510      	push	{r4, lr}
    54ee:	460c      	mov	r4, r1
    54f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    54f4:	f000 f99c 	bl	5830 <_read_r>
    54f8:	2800      	cmp	r0, #0
    54fa:	db03      	blt.n	5504 <__sread+0x18>
    54fc:	6d22      	ldr	r2, [r4, #80]	; 0x50
    54fe:	1813      	adds	r3, r2, r0
    5500:	6523      	str	r3, [r4, #80]	; 0x50
    5502:	bd10      	pop	{r4, pc}
    5504:	89a3      	ldrh	r3, [r4, #12]
    5506:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
    550a:	81a1      	strh	r1, [r4, #12]
    550c:	bd10      	pop	{r4, pc}

0000550e <__seofread>:
    550e:	2000      	movs	r0, #0
    5510:	4770      	bx	lr

00005512 <__swrite>:
    5512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5516:	461d      	mov	r5, r3
    5518:	898b      	ldrh	r3, [r1, #12]
    551a:	460c      	mov	r4, r1
    551c:	f403 7180 	and.w	r1, r3, #256	; 0x100
    5520:	4616      	mov	r6, r2
    5522:	b20a      	sxth	r2, r1
    5524:	4607      	mov	r7, r0
    5526:	b12a      	cbz	r2, 5534 <__swrite+0x22>
    5528:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    552c:	2200      	movs	r2, #0
    552e:	2302      	movs	r3, #2
    5530:	f000 f96c 	bl	580c <_lseek_r>
    5534:	89a0      	ldrh	r0, [r4, #12]
    5536:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    553a:	f420 5380 	bic.w	r3, r0, #4096	; 0x1000
    553e:	81a3      	strh	r3, [r4, #12]
    5540:	4638      	mov	r0, r7
    5542:	4632      	mov	r2, r6
    5544:	462b      	mov	r3, r5
    5546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    554a:	f000 b8d1 	b.w	56f0 <_write_r>

0000554e <__sseek>:
    554e:	b510      	push	{r4, lr}
    5550:	460c      	mov	r4, r1
    5552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5556:	f000 f959 	bl	580c <_lseek_r>
    555a:	1c43      	adds	r3, r0, #1
    555c:	89a3      	ldrh	r3, [r4, #12]
    555e:	d103      	bne.n	5568 <__sseek+0x1a>
    5560:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    5564:	81a2      	strh	r2, [r4, #12]
    5566:	bd10      	pop	{r4, pc}
    5568:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
    556c:	81a1      	strh	r1, [r4, #12]
    556e:	6520      	str	r0, [r4, #80]	; 0x50
    5570:	bd10      	pop	{r4, pc}

00005572 <__sclose>:
    5572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5576:	f000 b8cd 	b.w	5714 <_close_r>

0000557a <strcmp>:
    557a:	f810 2b01 	ldrb.w	r2, [r0], #1
    557e:	f811 3b01 	ldrb.w	r3, [r1], #1
    5582:	2a01      	cmp	r2, #1
    5584:	bf28      	it	cs
    5586:	429a      	cmpcs	r2, r3
    5588:	d0f7      	beq.n	557a <strcmp>
    558a:	eba2 0003 	sub.w	r0, r2, r3
    558e:	4770      	bx	lr

00005590 <__swbuf_r>:
    5590:	b570      	push	{r4, r5, r6, lr}
    5592:	460d      	mov	r5, r1
    5594:	4614      	mov	r4, r2
    5596:	4606      	mov	r6, r0
    5598:	b118      	cbz	r0, 55a2 <__swbuf_r+0x12>
    559a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    559c:	b90b      	cbnz	r3, 55a2 <__swbuf_r+0x12>
    559e:	f7fe ff9f 	bl	44e0 <__sinit>
    55a2:	89a1      	ldrh	r1, [r4, #12]
    55a4:	69a0      	ldr	r0, [r4, #24]
    55a6:	f001 0208 	and.w	r2, r1, #8
    55aa:	b213      	sxth	r3, r2
    55ac:	60a0      	str	r0, [r4, #8]
    55ae:	b10b      	cbz	r3, 55b4 <__swbuf_r+0x24>
    55b0:	6920      	ldr	r0, [r4, #16]
    55b2:	b958      	cbnz	r0, 55cc <__swbuf_r+0x3c>
    55b4:	4630      	mov	r0, r6
    55b6:	4621      	mov	r1, r4
    55b8:	f7fe fe32 	bl	4220 <__swsetup_r>
    55bc:	b130      	cbz	r0, 55cc <__swbuf_r+0x3c>
    55be:	89a5      	ldrh	r5, [r4, #12]
    55c0:	2009      	movs	r0, #9
    55c2:	f045 0140 	orr.w	r1, r5, #64	; 0x40
    55c6:	81a1      	strh	r1, [r4, #12]
    55c8:	6030      	str	r0, [r6, #0]
    55ca:	e017      	b.n	55fc <__swbuf_r+0x6c>
    55cc:	89a1      	ldrh	r1, [r4, #12]
    55ce:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
    55d2:	b213      	sxth	r3, r2
    55d4:	b2ed      	uxtb	r5, r5
    55d6:	b933      	cbnz	r3, 55e6 <__swbuf_r+0x56>
    55d8:	f441 5000 	orr.w	r0, r1, #8192	; 0x2000
    55dc:	6e61      	ldr	r1, [r4, #100]	; 0x64
    55de:	81a0      	strh	r0, [r4, #12]
    55e0:	f421 5200 	bic.w	r2, r1, #8192	; 0x2000
    55e4:	6662      	str	r2, [r4, #100]	; 0x64
    55e6:	6820      	ldr	r0, [r4, #0]
    55e8:	6923      	ldr	r3, [r4, #16]
    55ea:	6961      	ldr	r1, [r4, #20]
    55ec:	1ac0      	subs	r0, r0, r3
    55ee:	4288      	cmp	r0, r1
    55f0:	db07      	blt.n	5602 <__swbuf_r+0x72>
    55f2:	4630      	mov	r0, r6
    55f4:	4621      	mov	r1, r4
    55f6:	f7fe fe7f 	bl	42f8 <_fflush_r>
    55fa:	b110      	cbz	r0, 5602 <__swbuf_r+0x72>
    55fc:	f04f 35ff 	mov.w	r5, #4294967295
    5600:	e015      	b.n	562e <__swbuf_r+0x9e>
    5602:	68a2      	ldr	r2, [r4, #8]
    5604:	6821      	ldr	r1, [r4, #0]
    5606:	1e53      	subs	r3, r2, #1
    5608:	60a3      	str	r3, [r4, #8]
    560a:	f801 5b01 	strb.w	r5, [r1], #1
    560e:	6962      	ldr	r2, [r4, #20]
    5610:	6021      	str	r1, [r4, #0]
    5612:	3001      	adds	r0, #1
    5614:	4290      	cmp	r0, r2
    5616:	d004      	beq.n	5622 <__swbuf_r+0x92>
    5618:	89a3      	ldrh	r3, [r4, #12]
    561a:	07db      	lsls	r3, r3, #31
    561c:	d507      	bpl.n	562e <__swbuf_r+0x9e>
    561e:	2d0a      	cmp	r5, #10
    5620:	d105      	bne.n	562e <__swbuf_r+0x9e>
    5622:	4630      	mov	r0, r6
    5624:	4621      	mov	r1, r4
    5626:	f7fe fe67 	bl	42f8 <_fflush_r>
    562a:	2800      	cmp	r0, #0
    562c:	d1e6      	bne.n	55fc <__swbuf_r+0x6c>
    562e:	4628      	mov	r0, r5
    5630:	bd70      	pop	{r4, r5, r6, pc}

00005632 <__swbuf>:
    5632:	460a      	mov	r2, r1
    5634:	4902      	ldr	r1, [pc, #8]	; (5640 <__swbuf+0xe>)
    5636:	4603      	mov	r3, r0
    5638:	6808      	ldr	r0, [r1, #0]
    563a:	4619      	mov	r1, r3
    563c:	f7ff bfa8 	b.w	5590 <__swbuf_r>
    5640:	20000050 	.word	0x20000050

00005644 <_wcrtomb_r>:
    5644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5648:	461d      	mov	r5, r3
    564a:	4b10      	ldr	r3, [pc, #64]	; (568c <_wcrtomb_r+0x48>)
    564c:	b086      	sub	sp, #24
    564e:	4604      	mov	r4, r0
    5650:	4690      	mov	r8, r2
    5652:	460e      	mov	r6, r1
    5654:	681f      	ldr	r7, [r3, #0]
    5656:	b939      	cbnz	r1, 5668 <_wcrtomb_r+0x24>
    5658:	f7ff faf6 	bl	4c48 <__locale_charset>
    565c:	9500      	str	r5, [sp, #0]
    565e:	4603      	mov	r3, r0
    5660:	a903      	add	r1, sp, #12
    5662:	4620      	mov	r0, r4
    5664:	4632      	mov	r2, r6
    5666:	e006      	b.n	5676 <_wcrtomb_r+0x32>
    5668:	f7ff faee 	bl	4c48 <__locale_charset>
    566c:	9500      	str	r5, [sp, #0]
    566e:	4603      	mov	r3, r0
    5670:	4631      	mov	r1, r6
    5672:	4620      	mov	r0, r4
    5674:	4642      	mov	r2, r8
    5676:	47b8      	blx	r7
    5678:	1c43      	adds	r3, r0, #1
    567a:	d103      	bne.n	5684 <_wcrtomb_r+0x40>
    567c:	2100      	movs	r1, #0
    567e:	228a      	movs	r2, #138	; 0x8a
    5680:	6029      	str	r1, [r5, #0]
    5682:	6022      	str	r2, [r4, #0]
    5684:	b006      	add	sp, #24
    5686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    568a:	bf00      	nop
    568c:	2000090c 	.word	0x2000090c

00005690 <wcrtomb>:
    5690:	b530      	push	{r4, r5, lr}
    5692:	4613      	mov	r3, r2
    5694:	4a04      	ldr	r2, [pc, #16]	; (56a8 <wcrtomb+0x18>)
    5696:	4605      	mov	r5, r0
    5698:	460c      	mov	r4, r1
    569a:	6810      	ldr	r0, [r2, #0]
    569c:	4629      	mov	r1, r5
    569e:	4622      	mov	r2, r4
    56a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    56a4:	f7ff bfce 	b.w	5644 <_wcrtomb_r>
    56a8:	20000050 	.word	0x20000050

000056ac <__ascii_wctomb>:
    56ac:	b149      	cbz	r1, 56c2 <__ascii_wctomb+0x16>
    56ae:	2aff      	cmp	r2, #255	; 0xff
    56b0:	d904      	bls.n	56bc <__ascii_wctomb+0x10>
    56b2:	238a      	movs	r3, #138	; 0x8a
    56b4:	6003      	str	r3, [r0, #0]
    56b6:	f04f 30ff 	mov.w	r0, #4294967295
    56ba:	4770      	bx	lr
    56bc:	700a      	strb	r2, [r1, #0]
    56be:	2001      	movs	r0, #1
    56c0:	4770      	bx	lr
    56c2:	4608      	mov	r0, r1
    56c4:	4770      	bx	lr

000056c6 <_wctomb_r>:
    56c6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    56ca:	4698      	mov	r8, r3
    56cc:	4b07      	ldr	r3, [pc, #28]	; (56ec <_wctomb_r+0x26>)
    56ce:	4605      	mov	r5, r0
    56d0:	460f      	mov	r7, r1
    56d2:	4616      	mov	r6, r2
    56d4:	681c      	ldr	r4, [r3, #0]
    56d6:	f7ff fab7 	bl	4c48 <__locale_charset>
    56da:	f8cd 8000 	str.w	r8, [sp]
    56de:	4603      	mov	r3, r0
    56e0:	4639      	mov	r1, r7
    56e2:	4628      	mov	r0, r5
    56e4:	4632      	mov	r2, r6
    56e6:	47a0      	blx	r4
    56e8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    56ec:	2000090c 	.word	0x2000090c

000056f0 <_write_r>:
    56f0:	b538      	push	{r3, r4, r5, lr}
    56f2:	4c07      	ldr	r4, [pc, #28]	; (5710 <_write_r+0x20>)
    56f4:	4605      	mov	r5, r0
    56f6:	2000      	movs	r0, #0
    56f8:	6020      	str	r0, [r4, #0]
    56fa:	4608      	mov	r0, r1
    56fc:	4611      	mov	r1, r2
    56fe:	461a      	mov	r2, r3
    5700:	f7fb f9ae 	bl	a60 <_write>
    5704:	1c43      	adds	r3, r0, #1
    5706:	d102      	bne.n	570e <_write_r+0x1e>
    5708:	6823      	ldr	r3, [r4, #0]
    570a:	b103      	cbz	r3, 570e <_write_r+0x1e>
    570c:	602b      	str	r3, [r5, #0]
    570e:	bd38      	pop	{r3, r4, r5, pc}
    5710:	20000aa4 	.word	0x20000aa4

00005714 <_close_r>:
    5714:	b538      	push	{r3, r4, r5, lr}
    5716:	4c06      	ldr	r4, [pc, #24]	; (5730 <_close_r+0x1c>)
    5718:	2300      	movs	r3, #0
    571a:	4605      	mov	r5, r0
    571c:	4608      	mov	r0, r1
    571e:	6023      	str	r3, [r4, #0]
    5720:	f7fd ff6e 	bl	3600 <_close>
    5724:	1c43      	adds	r3, r0, #1
    5726:	d102      	bne.n	572e <_close_r+0x1a>
    5728:	6821      	ldr	r1, [r4, #0]
    572a:	b101      	cbz	r1, 572e <_close_r+0x1a>
    572c:	6029      	str	r1, [r5, #0]
    572e:	bd38      	pop	{r3, r4, r5, pc}
    5730:	20000aa4 	.word	0x20000aa4

00005734 <_fclose_r>:
    5734:	b570      	push	{r4, r5, r6, lr}
    5736:	4605      	mov	r5, r0
    5738:	460c      	mov	r4, r1
    573a:	2900      	cmp	r1, #0
    573c:	d039      	beq.n	57b2 <_fclose_r+0x7e>
    573e:	f7fe ff33 	bl	45a8 <__sfp_lock_acquire>
    5742:	b125      	cbz	r5, 574e <_fclose_r+0x1a>
    5744:	6bab      	ldr	r3, [r5, #56]	; 0x38
    5746:	b913      	cbnz	r3, 574e <_fclose_r+0x1a>
    5748:	4628      	mov	r0, r5
    574a:	f7fe fec9 	bl	44e0 <__sinit>
    574e:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
    5752:	b35e      	cbz	r6, 57ac <_fclose_r+0x78>
    5754:	4628      	mov	r0, r5
    5756:	4621      	mov	r1, r4
    5758:	f7fe fdce 	bl	42f8 <_fflush_r>
    575c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    575e:	4606      	mov	r6, r0
    5760:	b13a      	cbz	r2, 5772 <_fclose_r+0x3e>
    5762:	4628      	mov	r0, r5
    5764:	69e1      	ldr	r1, [r4, #28]
    5766:	4790      	blx	r2
    5768:	ea36 0620 	bics.w	r6, r6, r0, asr #32
    576c:	bf28      	it	cs
    576e:	f04f 36ff 	movcs.w	r6, #4294967295
    5772:	89a0      	ldrh	r0, [r4, #12]
    5774:	f000 0180 	and.w	r1, r0, #128	; 0x80
    5778:	b20b      	sxth	r3, r1
    577a:	b11b      	cbz	r3, 5784 <_fclose_r+0x50>
    577c:	4628      	mov	r0, r5
    577e:	6921      	ldr	r1, [r4, #16]
    5780:	f7fe ffec 	bl	475c <_free_r>
    5784:	6b21      	ldr	r1, [r4, #48]	; 0x30
    5786:	b141      	cbz	r1, 579a <_fclose_r+0x66>
    5788:	f104 0240 	add.w	r2, r4, #64	; 0x40
    578c:	4291      	cmp	r1, r2
    578e:	d002      	beq.n	5796 <_fclose_r+0x62>
    5790:	4628      	mov	r0, r5
    5792:	f7fe ffe3 	bl	475c <_free_r>
    5796:	2000      	movs	r0, #0
    5798:	6320      	str	r0, [r4, #48]	; 0x30
    579a:	6c61      	ldr	r1, [r4, #68]	; 0x44
    579c:	b121      	cbz	r1, 57a8 <_fclose_r+0x74>
    579e:	4628      	mov	r0, r5
    57a0:	f7fe ffdc 	bl	475c <_free_r>
    57a4:	2100      	movs	r1, #0
    57a6:	6461      	str	r1, [r4, #68]	; 0x44
    57a8:	2300      	movs	r3, #0
    57aa:	81a3      	strh	r3, [r4, #12]
    57ac:	f7fe fefd 	bl	45aa <__sfp_lock_release>
    57b0:	e000      	b.n	57b4 <_fclose_r+0x80>
    57b2:	460e      	mov	r6, r1
    57b4:	4630      	mov	r0, r6
    57b6:	bd70      	pop	{r4, r5, r6, pc}

000057b8 <fclose>:
    57b8:	4b02      	ldr	r3, [pc, #8]	; (57c4 <fclose+0xc>)
    57ba:	4601      	mov	r1, r0
    57bc:	6818      	ldr	r0, [r3, #0]
    57be:	f7ff bfb9 	b.w	5734 <_fclose_r>
    57c2:	bf00      	nop
    57c4:	20000050 	.word	0x20000050

000057c8 <_fstat_r>:
    57c8:	b538      	push	{r3, r4, r5, lr}
    57ca:	4c07      	ldr	r4, [pc, #28]	; (57e8 <_fstat_r+0x20>)
    57cc:	2300      	movs	r3, #0
    57ce:	4605      	mov	r5, r0
    57d0:	4608      	mov	r0, r1
    57d2:	4611      	mov	r1, r2
    57d4:	6023      	str	r3, [r4, #0]
    57d6:	f7fd ff17 	bl	3608 <_fstat>
    57da:	1c43      	adds	r3, r0, #1
    57dc:	d102      	bne.n	57e4 <_fstat_r+0x1c>
    57de:	6821      	ldr	r1, [r4, #0]
    57e0:	b101      	cbz	r1, 57e4 <_fstat_r+0x1c>
    57e2:	6029      	str	r1, [r5, #0]
    57e4:	bd38      	pop	{r3, r4, r5, pc}
    57e6:	bf00      	nop
    57e8:	20000aa4 	.word	0x20000aa4

000057ec <_isatty_r>:
    57ec:	b538      	push	{r3, r4, r5, lr}
    57ee:	4c06      	ldr	r4, [pc, #24]	; (5808 <_isatty_r+0x1c>)
    57f0:	2300      	movs	r3, #0
    57f2:	4605      	mov	r5, r0
    57f4:	4608      	mov	r0, r1
    57f6:	6023      	str	r3, [r4, #0]
    57f8:	f7fd ff0c 	bl	3614 <_isatty>
    57fc:	1c43      	adds	r3, r0, #1
    57fe:	d102      	bne.n	5806 <_isatty_r+0x1a>
    5800:	6821      	ldr	r1, [r4, #0]
    5802:	b101      	cbz	r1, 5806 <_isatty_r+0x1a>
    5804:	6029      	str	r1, [r5, #0]
    5806:	bd38      	pop	{r3, r4, r5, pc}
    5808:	20000aa4 	.word	0x20000aa4

0000580c <_lseek_r>:
    580c:	b538      	push	{r3, r4, r5, lr}
    580e:	4c07      	ldr	r4, [pc, #28]	; (582c <_lseek_r+0x20>)
    5810:	4605      	mov	r5, r0
    5812:	2000      	movs	r0, #0
    5814:	6020      	str	r0, [r4, #0]
    5816:	4608      	mov	r0, r1
    5818:	4611      	mov	r1, r2
    581a:	461a      	mov	r2, r3
    581c:	f7fd fefe 	bl	361c <_lseek>
    5820:	1c43      	adds	r3, r0, #1
    5822:	d102      	bne.n	582a <_lseek_r+0x1e>
    5824:	6823      	ldr	r3, [r4, #0]
    5826:	b103      	cbz	r3, 582a <_lseek_r+0x1e>
    5828:	602b      	str	r3, [r5, #0]
    582a:	bd38      	pop	{r3, r4, r5, pc}
    582c:	20000aa4 	.word	0x20000aa4

00005830 <_read_r>:
    5830:	b538      	push	{r3, r4, r5, lr}
    5832:	4c07      	ldr	r4, [pc, #28]	; (5850 <_read_r+0x20>)
    5834:	4605      	mov	r5, r0
    5836:	2000      	movs	r0, #0
    5838:	6020      	str	r0, [r4, #0]
    583a:	4608      	mov	r0, r1
    583c:	4611      	mov	r1, r2
    583e:	461a      	mov	r2, r3
    5840:	f7fb f8ca 	bl	9d8 <_read>
    5844:	1c43      	adds	r3, r0, #1
    5846:	d102      	bne.n	584e <_read_r+0x1e>
    5848:	6823      	ldr	r3, [r4, #0]
    584a:	b103      	cbz	r3, 584e <_read_r+0x1e>
    584c:	602b      	str	r3, [r5, #0]
    584e:	bd38      	pop	{r3, r4, r5, pc}
    5850:	20000aa4 	.word	0x20000aa4

00005854 <__aeabi_uldivmod>:
    5854:	b94b      	cbnz	r3, 586a <__aeabi_uldivmod+0x16>
    5856:	b942      	cbnz	r2, 586a <__aeabi_uldivmod+0x16>
    5858:	2900      	cmp	r1, #0
    585a:	bf08      	it	eq
    585c:	2800      	cmpeq	r0, #0
    585e:	d002      	beq.n	5866 <__aeabi_uldivmod+0x12>
    5860:	f04f 31ff 	mov.w	r1, #4294967295
    5864:	4608      	mov	r0, r1
    5866:	f000 b837 	b.w	58d8 <__aeabi_idiv0>
    586a:	b082      	sub	sp, #8
    586c:	46ec      	mov	ip, sp
    586e:	e92d 5000 	stmdb	sp!, {ip, lr}
    5872:	f000 f81b 	bl	58ac <__gnu_uldivmod_helper>
    5876:	f8dd e004 	ldr.w	lr, [sp, #4]
    587a:	b002      	add	sp, #8
    587c:	bc0c      	pop	{r2, r3}
    587e:	4770      	bx	lr

00005880 <__gnu_ldivmod_helper>:
    5880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5882:	4616      	mov	r6, r2
    5884:	4604      	mov	r4, r0
    5886:	460d      	mov	r5, r1
    5888:	461f      	mov	r7, r3
    588a:	f000 f827 	bl	58dc <__divdi3>
    588e:	fb06 f301 	mul.w	r3, r6, r1
    5892:	fb00 3707 	mla	r7, r0, r7, r3
    5896:	fba6 2300 	umull	r2, r3, r6, r0
    589a:	18fb      	adds	r3, r7, r3
    589c:	1aa2      	subs	r2, r4, r2
    589e:	eb65 0303 	sbc.w	r3, r5, r3
    58a2:	9c06      	ldr	r4, [sp, #24]
    58a4:	e9c4 2300 	strd	r2, r3, [r4]
    58a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    58aa:	bf00      	nop

000058ac <__gnu_uldivmod_helper>:
    58ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    58ae:	4616      	mov	r6, r2
    58b0:	4604      	mov	r4, r0
    58b2:	460d      	mov	r5, r1
    58b4:	461f      	mov	r7, r3
    58b6:	f000 f96f 	bl	5b98 <__udivdi3>
    58ba:	fb00 f707 	mul.w	r7, r0, r7
    58be:	fba0 2306 	umull	r2, r3, r0, r6
    58c2:	fb06 7701 	mla	r7, r6, r1, r7
    58c6:	18fb      	adds	r3, r7, r3
    58c8:	1aa2      	subs	r2, r4, r2
    58ca:	eb65 0303 	sbc.w	r3, r5, r3
    58ce:	9c06      	ldr	r4, [sp, #24]
    58d0:	e9c4 2300 	strd	r2, r3, [r4]
    58d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    58d6:	bf00      	nop

000058d8 <__aeabi_idiv0>:
    58d8:	4770      	bx	lr
    58da:	bf00      	nop

000058dc <__divdi3>:
    58dc:	2900      	cmp	r1, #0
    58de:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    58e2:	461d      	mov	r5, r3
    58e4:	f2c0 809d 	blt.w	5a22 <__divdi3+0x146>
    58e8:	2400      	movs	r4, #0
    58ea:	2d00      	cmp	r5, #0
    58ec:	f2c0 8094 	blt.w	5a18 <__divdi3+0x13c>
    58f0:	4680      	mov	r8, r0
    58f2:	460f      	mov	r7, r1
    58f4:	4694      	mov	ip, r2
    58f6:	461e      	mov	r6, r3
    58f8:	bbe3      	cbnz	r3, 5974 <__divdi3+0x98>
    58fa:	428a      	cmp	r2, r1
    58fc:	d955      	bls.n	59aa <__divdi3+0xce>
    58fe:	fab2 f782 	clz	r7, r2
    5902:	b147      	cbz	r7, 5916 <__divdi3+0x3a>
    5904:	f1c7 0520 	rsb	r5, r7, #32
    5908:	fa20 f605 	lsr.w	r6, r0, r5
    590c:	fa01 f107 	lsl.w	r1, r1, r7
    5910:	40ba      	lsls	r2, r7
    5912:	4331      	orrs	r1, r6
    5914:	40b8      	lsls	r0, r7
    5916:	0c17      	lsrs	r7, r2, #16
    5918:	fbb1 f6f7 	udiv	r6, r1, r7
    591c:	0c03      	lsrs	r3, r0, #16
    591e:	fa1f fc82 	uxth.w	ip, r2
    5922:	fb07 1116 	mls	r1, r7, r6, r1
    5926:	fb0c f506 	mul.w	r5, ip, r6
    592a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    592e:	429d      	cmp	r5, r3
    5930:	d908      	bls.n	5944 <__divdi3+0x68>
    5932:	1e71      	subs	r1, r6, #1
    5934:	189b      	adds	r3, r3, r2
    5936:	f080 8113 	bcs.w	5b60 <__divdi3+0x284>
    593a:	429d      	cmp	r5, r3
    593c:	f240 8110 	bls.w	5b60 <__divdi3+0x284>
    5940:	3e02      	subs	r6, #2
    5942:	189b      	adds	r3, r3, r2
    5944:	1b59      	subs	r1, r3, r5
    5946:	fbb1 f5f7 	udiv	r5, r1, r7
    594a:	fb07 1315 	mls	r3, r7, r5, r1
    594e:	b280      	uxth	r0, r0
    5950:	fb0c fc05 	mul.w	ip, ip, r5
    5954:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
    5958:	458c      	cmp	ip, r1
    595a:	d907      	bls.n	596c <__divdi3+0x90>
    595c:	1e6b      	subs	r3, r5, #1
    595e:	188a      	adds	r2, r1, r2
    5960:	f080 8100 	bcs.w	5b64 <__divdi3+0x288>
    5964:	4594      	cmp	ip, r2
    5966:	f240 80fd 	bls.w	5b64 <__divdi3+0x288>
    596a:	3d02      	subs	r5, #2
    596c:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
    5970:	2500      	movs	r5, #0
    5972:	e003      	b.n	597c <__divdi3+0xa0>
    5974:	428b      	cmp	r3, r1
    5976:	d90c      	bls.n	5992 <__divdi3+0xb6>
    5978:	2500      	movs	r5, #0
    597a:	4629      	mov	r1, r5
    597c:	460a      	mov	r2, r1
    597e:	462b      	mov	r3, r5
    5980:	b114      	cbz	r4, 5988 <__divdi3+0xac>
    5982:	4252      	negs	r2, r2
    5984:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    5988:	4610      	mov	r0, r2
    598a:	4619      	mov	r1, r3
    598c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5990:	4770      	bx	lr
    5992:	fab3 f583 	clz	r5, r3
    5996:	2d00      	cmp	r5, #0
    5998:	f040 8087 	bne.w	5aaa <__divdi3+0x1ce>
    599c:	428b      	cmp	r3, r1
    599e:	d301      	bcc.n	59a4 <__divdi3+0xc8>
    59a0:	4282      	cmp	r2, r0
    59a2:	d8ea      	bhi.n	597a <__divdi3+0x9e>
    59a4:	2500      	movs	r5, #0
    59a6:	2101      	movs	r1, #1
    59a8:	e7e8      	b.n	597c <__divdi3+0xa0>
    59aa:	b912      	cbnz	r2, 59b2 <__divdi3+0xd6>
    59ac:	2601      	movs	r6, #1
    59ae:	fbb6 f2f2 	udiv	r2, r6, r2
    59b2:	fab2 f682 	clz	r6, r2
    59b6:	2e00      	cmp	r6, #0
    59b8:	d139      	bne.n	5a2e <__divdi3+0x152>
    59ba:	1a8e      	subs	r6, r1, r2
    59bc:	0c13      	lsrs	r3, r2, #16
    59be:	fa1f fc82 	uxth.w	ip, r2
    59c2:	2501      	movs	r5, #1
    59c4:	fbb6 f7f3 	udiv	r7, r6, r3
    59c8:	fb03 6117 	mls	r1, r3, r7, r6
    59cc:	ea4f 4910 	mov.w	r9, r0, lsr #16
    59d0:	fb0c f807 	mul.w	r8, ip, r7
    59d4:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
    59d8:	45b0      	cmp	r8, r6
    59da:	d906      	bls.n	59ea <__divdi3+0x10e>
    59dc:	1e79      	subs	r1, r7, #1
    59de:	18b6      	adds	r6, r6, r2
    59e0:	d202      	bcs.n	59e8 <__divdi3+0x10c>
    59e2:	45b0      	cmp	r8, r6
    59e4:	f200 80d3 	bhi.w	5b8e <__divdi3+0x2b2>
    59e8:	460f      	mov	r7, r1
    59ea:	ebc8 0606 	rsb	r6, r8, r6
    59ee:	fbb6 f1f3 	udiv	r1, r6, r3
    59f2:	fb03 6311 	mls	r3, r3, r1, r6
    59f6:	b280      	uxth	r0, r0
    59f8:	fb0c fc01 	mul.w	ip, ip, r1
    59fc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    5a00:	459c      	cmp	ip, r3
    5a02:	d906      	bls.n	5a12 <__divdi3+0x136>
    5a04:	1e4e      	subs	r6, r1, #1
    5a06:	189a      	adds	r2, r3, r2
    5a08:	d202      	bcs.n	5a10 <__divdi3+0x134>
    5a0a:	4594      	cmp	ip, r2
    5a0c:	f200 80c2 	bhi.w	5b94 <__divdi3+0x2b8>
    5a10:	4631      	mov	r1, r6
    5a12:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
    5a16:	e7b1      	b.n	597c <__divdi3+0xa0>
    5a18:	43e4      	mvns	r4, r4
    5a1a:	4252      	negs	r2, r2
    5a1c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    5a20:	e766      	b.n	58f0 <__divdi3+0x14>
    5a22:	4240      	negs	r0, r0
    5a24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    5a28:	f04f 34ff 	mov.w	r4, #4294967295
    5a2c:	e75d      	b.n	58ea <__divdi3+0xe>
    5a2e:	40b2      	lsls	r2, r6
    5a30:	f1c6 0920 	rsb	r9, r6, #32
    5a34:	fa21 f709 	lsr.w	r7, r1, r9
    5a38:	fa20 f509 	lsr.w	r5, r0, r9
    5a3c:	0c13      	lsrs	r3, r2, #16
    5a3e:	fa01 f106 	lsl.w	r1, r1, r6
    5a42:	fbb7 f8f3 	udiv	r8, r7, r3
    5a46:	ea45 0901 	orr.w	r9, r5, r1
    5a4a:	fa1f fc82 	uxth.w	ip, r2
    5a4e:	fb03 7718 	mls	r7, r3, r8, r7
    5a52:	ea4f 4119 	mov.w	r1, r9, lsr #16
    5a56:	fb0c f508 	mul.w	r5, ip, r8
    5a5a:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
    5a5e:	40b0      	lsls	r0, r6
    5a60:	42bd      	cmp	r5, r7
    5a62:	d90a      	bls.n	5a7a <__divdi3+0x19e>
    5a64:	18bf      	adds	r7, r7, r2
    5a66:	f108 36ff 	add.w	r6, r8, #4294967295
    5a6a:	f080 808e 	bcs.w	5b8a <__divdi3+0x2ae>
    5a6e:	42bd      	cmp	r5, r7
    5a70:	f240 808b 	bls.w	5b8a <__divdi3+0x2ae>
    5a74:	f1a8 0802 	sub.w	r8, r8, #2
    5a78:	18bf      	adds	r7, r7, r2
    5a7a:	1b79      	subs	r1, r7, r5
    5a7c:	fbb1 f5f3 	udiv	r5, r1, r3
    5a80:	fb03 1715 	mls	r7, r3, r5, r1
    5a84:	fa1f f989 	uxth.w	r9, r9
    5a88:	fb0c f605 	mul.w	r6, ip, r5
    5a8c:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
    5a90:	428e      	cmp	r6, r1
    5a92:	d906      	bls.n	5aa2 <__divdi3+0x1c6>
    5a94:	1e6f      	subs	r7, r5, #1
    5a96:	1889      	adds	r1, r1, r2
    5a98:	d271      	bcs.n	5b7e <__divdi3+0x2a2>
    5a9a:	428e      	cmp	r6, r1
    5a9c:	d96f      	bls.n	5b7e <__divdi3+0x2a2>
    5a9e:	3d02      	subs	r5, #2
    5aa0:	1889      	adds	r1, r1, r2
    5aa2:	1b8e      	subs	r6, r1, r6
    5aa4:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
    5aa8:	e78c      	b.n	59c4 <__divdi3+0xe8>
    5aaa:	f1c5 0120 	rsb	r1, r5, #32
    5aae:	fa22 f301 	lsr.w	r3, r2, r1
    5ab2:	fa06 f605 	lsl.w	r6, r6, r5
    5ab6:	431e      	orrs	r6, r3
    5ab8:	fa27 f201 	lsr.w	r2, r7, r1
    5abc:	ea4f 4916 	mov.w	r9, r6, lsr #16
    5ac0:	fa07 f705 	lsl.w	r7, r7, r5
    5ac4:	fa20 f101 	lsr.w	r1, r0, r1
    5ac8:	fbb2 f8f9 	udiv	r8, r2, r9
    5acc:	430f      	orrs	r7, r1
    5ace:	0c3b      	lsrs	r3, r7, #16
    5ad0:	fa1f fa86 	uxth.w	sl, r6
    5ad4:	fb09 2218 	mls	r2, r9, r8, r2
    5ad8:	fb0a fb08 	mul.w	fp, sl, r8
    5adc:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    5ae0:	4593      	cmp	fp, r2
    5ae2:	fa0c fc05 	lsl.w	ip, ip, r5
    5ae6:	d908      	bls.n	5afa <__divdi3+0x21e>
    5ae8:	1992      	adds	r2, r2, r6
    5aea:	f108 31ff 	add.w	r1, r8, #4294967295
    5aee:	d24a      	bcs.n	5b86 <__divdi3+0x2aa>
    5af0:	4593      	cmp	fp, r2
    5af2:	d948      	bls.n	5b86 <__divdi3+0x2aa>
    5af4:	f1a8 0802 	sub.w	r8, r8, #2
    5af8:	1992      	adds	r2, r2, r6
    5afa:	ebcb 0302 	rsb	r3, fp, r2
    5afe:	fbb3 f1f9 	udiv	r1, r3, r9
    5b02:	fb09 3211 	mls	r2, r9, r1, r3
    5b06:	b2bf      	uxth	r7, r7
    5b08:	fb0a fa01 	mul.w	sl, sl, r1
    5b0c:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
    5b10:	459a      	cmp	sl, r3
    5b12:	d906      	bls.n	5b22 <__divdi3+0x246>
    5b14:	1e4a      	subs	r2, r1, #1
    5b16:	199b      	adds	r3, r3, r6
    5b18:	d233      	bcs.n	5b82 <__divdi3+0x2a6>
    5b1a:	459a      	cmp	sl, r3
    5b1c:	d931      	bls.n	5b82 <__divdi3+0x2a6>
    5b1e:	3902      	subs	r1, #2
    5b20:	199b      	adds	r3, r3, r6
    5b22:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
    5b26:	0c0f      	lsrs	r7, r1, #16
    5b28:	fa1f f88c 	uxth.w	r8, ip
    5b2c:	fb08 f607 	mul.w	r6, r8, r7
    5b30:	b28a      	uxth	r2, r1
    5b32:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
    5b36:	fb08 f802 	mul.w	r8, r8, r2
    5b3a:	fb0c 6202 	mla	r2, ip, r2, r6
    5b3e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
    5b42:	fb0c fc07 	mul.w	ip, ip, r7
    5b46:	4296      	cmp	r6, r2
    5b48:	bf88      	it	hi
    5b4a:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
    5b4e:	ebca 0303 	rsb	r3, sl, r3
    5b52:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
    5b56:	4563      	cmp	r3, ip
    5b58:	d30e      	bcc.n	5b78 <__divdi3+0x29c>
    5b5a:	d005      	beq.n	5b68 <__divdi3+0x28c>
    5b5c:	2500      	movs	r5, #0
    5b5e:	e70d      	b.n	597c <__divdi3+0xa0>
    5b60:	460e      	mov	r6, r1
    5b62:	e6ef      	b.n	5944 <__divdi3+0x68>
    5b64:	461d      	mov	r5, r3
    5b66:	e701      	b.n	596c <__divdi3+0x90>
    5b68:	fa1f f888 	uxth.w	r8, r8
    5b6c:	fa00 f005 	lsl.w	r0, r0, r5
    5b70:	eb08 4502 	add.w	r5, r8, r2, lsl #16
    5b74:	42a8      	cmp	r0, r5
    5b76:	d2f1      	bcs.n	5b5c <__divdi3+0x280>
    5b78:	3901      	subs	r1, #1
    5b7a:	2500      	movs	r5, #0
    5b7c:	e6fe      	b.n	597c <__divdi3+0xa0>
    5b7e:	463d      	mov	r5, r7
    5b80:	e78f      	b.n	5aa2 <__divdi3+0x1c6>
    5b82:	4611      	mov	r1, r2
    5b84:	e7cd      	b.n	5b22 <__divdi3+0x246>
    5b86:	4688      	mov	r8, r1
    5b88:	e7b7      	b.n	5afa <__divdi3+0x21e>
    5b8a:	46b0      	mov	r8, r6
    5b8c:	e775      	b.n	5a7a <__divdi3+0x19e>
    5b8e:	3f02      	subs	r7, #2
    5b90:	18b6      	adds	r6, r6, r2
    5b92:	e72a      	b.n	59ea <__divdi3+0x10e>
    5b94:	3902      	subs	r1, #2
    5b96:	e73c      	b.n	5a12 <__divdi3+0x136>

00005b98 <__udivdi3>:
    5b98:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    5b9c:	4614      	mov	r4, r2
    5b9e:	4605      	mov	r5, r0
    5ba0:	460e      	mov	r6, r1
    5ba2:	2b00      	cmp	r3, #0
    5ba4:	d13d      	bne.n	5c22 <__udivdi3+0x8a>
    5ba6:	428a      	cmp	r2, r1
    5ba8:	d949      	bls.n	5c3e <__udivdi3+0xa6>
    5baa:	fab2 f782 	clz	r7, r2
    5bae:	b147      	cbz	r7, 5bc2 <__udivdi3+0x2a>
    5bb0:	f1c7 0120 	rsb	r1, r7, #32
    5bb4:	fa20 f201 	lsr.w	r2, r0, r1
    5bb8:	fa06 f607 	lsl.w	r6, r6, r7
    5bbc:	40bc      	lsls	r4, r7
    5bbe:	4316      	orrs	r6, r2
    5bc0:	40bd      	lsls	r5, r7
    5bc2:	0c22      	lsrs	r2, r4, #16
    5bc4:	fbb6 f0f2 	udiv	r0, r6, r2
    5bc8:	0c2f      	lsrs	r7, r5, #16
    5bca:	b2a1      	uxth	r1, r4
    5bcc:	fb02 6610 	mls	r6, r2, r0, r6
    5bd0:	fb01 f300 	mul.w	r3, r1, r0
    5bd4:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    5bd8:	42b3      	cmp	r3, r6
    5bda:	d908      	bls.n	5bee <__udivdi3+0x56>
    5bdc:	1e47      	subs	r7, r0, #1
    5bde:	1936      	adds	r6, r6, r4
    5be0:	f080 80f8 	bcs.w	5dd4 <__udivdi3+0x23c>
    5be4:	42b3      	cmp	r3, r6
    5be6:	f240 80f5 	bls.w	5dd4 <__udivdi3+0x23c>
    5bea:	3802      	subs	r0, #2
    5bec:	1936      	adds	r6, r6, r4
    5bee:	1af6      	subs	r6, r6, r3
    5bf0:	fbb6 f3f2 	udiv	r3, r6, r2
    5bf4:	fb02 6213 	mls	r2, r2, r3, r6
    5bf8:	b2ad      	uxth	r5, r5
    5bfa:	fb01 f103 	mul.w	r1, r1, r3
    5bfe:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
    5c02:	4291      	cmp	r1, r2
    5c04:	d907      	bls.n	5c16 <__udivdi3+0x7e>
    5c06:	1e5e      	subs	r6, r3, #1
    5c08:	1912      	adds	r2, r2, r4
    5c0a:	f080 80e5 	bcs.w	5dd8 <__udivdi3+0x240>
    5c0e:	4291      	cmp	r1, r2
    5c10:	f240 80e2 	bls.w	5dd8 <__udivdi3+0x240>
    5c14:	3b02      	subs	r3, #2
    5c16:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    5c1a:	2100      	movs	r1, #0
    5c1c:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    5c20:	4770      	bx	lr
    5c22:	428b      	cmp	r3, r1
    5c24:	d843      	bhi.n	5cae <__udivdi3+0x116>
    5c26:	fab3 f483 	clz	r4, r3
    5c2a:	2c00      	cmp	r4, #0
    5c2c:	d142      	bne.n	5cb4 <__udivdi3+0x11c>
    5c2e:	428b      	cmp	r3, r1
    5c30:	d302      	bcc.n	5c38 <__udivdi3+0xa0>
    5c32:	4282      	cmp	r2, r0
    5c34:	f200 80df 	bhi.w	5df6 <__udivdi3+0x25e>
    5c38:	2100      	movs	r1, #0
    5c3a:	2001      	movs	r0, #1
    5c3c:	e7ee      	b.n	5c1c <__udivdi3+0x84>
    5c3e:	b912      	cbnz	r2, 5c46 <__udivdi3+0xae>
    5c40:	2701      	movs	r7, #1
    5c42:	fbb7 f4f2 	udiv	r4, r7, r2
    5c46:	fab4 f284 	clz	r2, r4
    5c4a:	2a00      	cmp	r2, #0
    5c4c:	f040 8088 	bne.w	5d60 <__udivdi3+0x1c8>
    5c50:	1b0a      	subs	r2, r1, r4
    5c52:	0c23      	lsrs	r3, r4, #16
    5c54:	b2a7      	uxth	r7, r4
    5c56:	2101      	movs	r1, #1
    5c58:	fbb2 f6f3 	udiv	r6, r2, r3
    5c5c:	fb03 2216 	mls	r2, r3, r6, r2
    5c60:	ea4f 4c15 	mov.w	ip, r5, lsr #16
    5c64:	fb07 f006 	mul.w	r0, r7, r6
    5c68:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
    5c6c:	4290      	cmp	r0, r2
    5c6e:	d907      	bls.n	5c80 <__udivdi3+0xe8>
    5c70:	1912      	adds	r2, r2, r4
    5c72:	f106 3cff 	add.w	ip, r6, #4294967295
    5c76:	d202      	bcs.n	5c7e <__udivdi3+0xe6>
    5c78:	4290      	cmp	r0, r2
    5c7a:	f200 80ce 	bhi.w	5e1a <__udivdi3+0x282>
    5c7e:	4666      	mov	r6, ip
    5c80:	1a12      	subs	r2, r2, r0
    5c82:	fbb2 f0f3 	udiv	r0, r2, r3
    5c86:	fb03 2310 	mls	r3, r3, r0, r2
    5c8a:	b2ad      	uxth	r5, r5
    5c8c:	fb07 f700 	mul.w	r7, r7, r0
    5c90:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
    5c94:	429f      	cmp	r7, r3
    5c96:	d907      	bls.n	5ca8 <__udivdi3+0x110>
    5c98:	1e42      	subs	r2, r0, #1
    5c9a:	191b      	adds	r3, r3, r4
    5c9c:	f080 809e 	bcs.w	5ddc <__udivdi3+0x244>
    5ca0:	429f      	cmp	r7, r3
    5ca2:	f240 809b 	bls.w	5ddc <__udivdi3+0x244>
    5ca6:	3802      	subs	r0, #2
    5ca8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    5cac:	e7b6      	b.n	5c1c <__udivdi3+0x84>
    5cae:	2100      	movs	r1, #0
    5cb0:	4608      	mov	r0, r1
    5cb2:	e7b3      	b.n	5c1c <__udivdi3+0x84>
    5cb4:	f1c4 0620 	rsb	r6, r4, #32
    5cb8:	fa22 f506 	lsr.w	r5, r2, r6
    5cbc:	fa03 f304 	lsl.w	r3, r3, r4
    5cc0:	432b      	orrs	r3, r5
    5cc2:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    5cc6:	fa21 f506 	lsr.w	r5, r1, r6
    5cca:	fa01 f104 	lsl.w	r1, r1, r4
    5cce:	fa20 f606 	lsr.w	r6, r0, r6
    5cd2:	fbb5 f7fc 	udiv	r7, r5, ip
    5cd6:	ea46 0a01 	orr.w	sl, r6, r1
    5cda:	fa1f f883 	uxth.w	r8, r3
    5cde:	fb0c 5517 	mls	r5, ip, r7, r5
    5ce2:	ea4f 411a 	mov.w	r1, sl, lsr #16
    5ce6:	fb08 f907 	mul.w	r9, r8, r7
    5cea:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
    5cee:	45a9      	cmp	r9, r5
    5cf0:	fa02 f204 	lsl.w	r2, r2, r4
    5cf4:	d903      	bls.n	5cfe <__udivdi3+0x166>
    5cf6:	1e7e      	subs	r6, r7, #1
    5cf8:	18ed      	adds	r5, r5, r3
    5cfa:	d37f      	bcc.n	5dfc <__udivdi3+0x264>
    5cfc:	4637      	mov	r7, r6
    5cfe:	ebc9 0105 	rsb	r1, r9, r5
    5d02:	fbb1 f6fc 	udiv	r6, r1, ip
    5d06:	fb0c 1516 	mls	r5, ip, r6, r1
    5d0a:	fa1f fa8a 	uxth.w	sl, sl
    5d0e:	fb08 f806 	mul.w	r8, r8, r6
    5d12:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
    5d16:	4588      	cmp	r8, r1
    5d18:	d903      	bls.n	5d22 <__udivdi3+0x18a>
    5d1a:	1e75      	subs	r5, r6, #1
    5d1c:	18c9      	adds	r1, r1, r3
    5d1e:	d373      	bcc.n	5e08 <__udivdi3+0x270>
    5d20:	462e      	mov	r6, r5
    5d22:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
    5d26:	0c37      	lsrs	r7, r6, #16
    5d28:	fa1f fc82 	uxth.w	ip, r2
    5d2c:	fb0c f507 	mul.w	r5, ip, r7
    5d30:	0c12      	lsrs	r2, r2, #16
    5d32:	b2b3      	uxth	r3, r6
    5d34:	fb0c fc03 	mul.w	ip, ip, r3
    5d38:	fb02 5303 	mla	r3, r2, r3, r5
    5d3c:	eb03 431c 	add.w	r3, r3, ip, lsr #16
    5d40:	fb02 f207 	mul.w	r2, r2, r7
    5d44:	429d      	cmp	r5, r3
    5d46:	bf88      	it	hi
    5d48:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
    5d4c:	ebc8 0101 	rsb	r1, r8, r1
    5d50:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    5d54:	4291      	cmp	r1, r2
    5d56:	d34b      	bcc.n	5df0 <__udivdi3+0x258>
    5d58:	d042      	beq.n	5de0 <__udivdi3+0x248>
    5d5a:	4630      	mov	r0, r6
    5d5c:	2100      	movs	r1, #0
    5d5e:	e75d      	b.n	5c1c <__udivdi3+0x84>
    5d60:	4094      	lsls	r4, r2
    5d62:	f1c2 0520 	rsb	r5, r2, #32
    5d66:	fa21 f605 	lsr.w	r6, r1, r5
    5d6a:	0c23      	lsrs	r3, r4, #16
    5d6c:	fa20 f705 	lsr.w	r7, r0, r5
    5d70:	fa01 f102 	lsl.w	r1, r1, r2
    5d74:	fbb6 fcf3 	udiv	ip, r6, r3
    5d78:	4339      	orrs	r1, r7
    5d7a:	0c0d      	lsrs	r5, r1, #16
    5d7c:	b2a7      	uxth	r7, r4
    5d7e:	fb03 661c 	mls	r6, r3, ip, r6
    5d82:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    5d86:	fb07 f80c 	mul.w	r8, r7, ip
    5d8a:	45b0      	cmp	r8, r6
    5d8c:	fa00 f502 	lsl.w	r5, r0, r2
    5d90:	d908      	bls.n	5da4 <__udivdi3+0x20c>
    5d92:	1936      	adds	r6, r6, r4
    5d94:	f10c 30ff 	add.w	r0, ip, #4294967295
    5d98:	d23d      	bcs.n	5e16 <__udivdi3+0x27e>
    5d9a:	45b0      	cmp	r8, r6
    5d9c:	d93b      	bls.n	5e16 <__udivdi3+0x27e>
    5d9e:	f1ac 0c02 	sub.w	ip, ip, #2
    5da2:	1936      	adds	r6, r6, r4
    5da4:	ebc8 0206 	rsb	r2, r8, r6
    5da8:	fbb2 f0f3 	udiv	r0, r2, r3
    5dac:	fb03 2610 	mls	r6, r3, r0, r2
    5db0:	b28a      	uxth	r2, r1
    5db2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
    5db6:	fb07 f100 	mul.w	r1, r7, r0
    5dba:	4291      	cmp	r1, r2
    5dbc:	d906      	bls.n	5dcc <__udivdi3+0x234>
    5dbe:	1e46      	subs	r6, r0, #1
    5dc0:	1912      	adds	r2, r2, r4
    5dc2:	d226      	bcs.n	5e12 <__udivdi3+0x27a>
    5dc4:	4291      	cmp	r1, r2
    5dc6:	d924      	bls.n	5e12 <__udivdi3+0x27a>
    5dc8:	3802      	subs	r0, #2
    5dca:	1912      	adds	r2, r2, r4
    5dcc:	1a52      	subs	r2, r2, r1
    5dce:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
    5dd2:	e741      	b.n	5c58 <__udivdi3+0xc0>
    5dd4:	4638      	mov	r0, r7
    5dd6:	e70a      	b.n	5bee <__udivdi3+0x56>
    5dd8:	4633      	mov	r3, r6
    5dda:	e71c      	b.n	5c16 <__udivdi3+0x7e>
    5ddc:	4610      	mov	r0, r2
    5dde:	e763      	b.n	5ca8 <__udivdi3+0x110>
    5de0:	fa1f fc8c 	uxth.w	ip, ip
    5de4:	fa00 f004 	lsl.w	r0, r0, r4
    5de8:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
    5dec:	4298      	cmp	r0, r3
    5dee:	d2b4      	bcs.n	5d5a <__udivdi3+0x1c2>
    5df0:	1e70      	subs	r0, r6, #1
    5df2:	2100      	movs	r1, #0
    5df4:	e712      	b.n	5c1c <__udivdi3+0x84>
    5df6:	4621      	mov	r1, r4
    5df8:	4620      	mov	r0, r4
    5dfa:	e70f      	b.n	5c1c <__udivdi3+0x84>
    5dfc:	45a9      	cmp	r9, r5
    5dfe:	f67f af7d 	bls.w	5cfc <__udivdi3+0x164>
    5e02:	3f02      	subs	r7, #2
    5e04:	18ed      	adds	r5, r5, r3
    5e06:	e77a      	b.n	5cfe <__udivdi3+0x166>
    5e08:	4588      	cmp	r8, r1
    5e0a:	d989      	bls.n	5d20 <__udivdi3+0x188>
    5e0c:	3e02      	subs	r6, #2
    5e0e:	18c9      	adds	r1, r1, r3
    5e10:	e787      	b.n	5d22 <__udivdi3+0x18a>
    5e12:	4630      	mov	r0, r6
    5e14:	e7da      	b.n	5dcc <__udivdi3+0x234>
    5e16:	4684      	mov	ip, r0
    5e18:	e7c4      	b.n	5da4 <__udivdi3+0x20c>
    5e1a:	3e02      	subs	r6, #2
    5e1c:	1912      	adds	r2, r2, r4
    5e1e:	e72f      	b.n	5c80 <__udivdi3+0xe8>

00005e20 <default_settings>:
    5e20:	043a d040 1412 8032 1617 0418 0219 7b1a     :.@...2........{
    5e30:	0603 000c 003e 0070 0071 1172 0073 02a2     ....>.p.q.r.s...
    5e40:	0111 207a 1c7b 287c 3c7d 557e 687f 7680     ..z {.|(}<~U.h.v
    5e50:	8081 8882 8f83 9684 a385 af86 c487 d788     ................
    5e60:	e889 e013 0000 0010 000d 2014 05a5 07ab     ........... ....
    5e70:	7524 6325 a526 789f 68a0 03a1 dfa6 dfa7     $u%c&..x.h......
    5e80:	f0a8 90a9 94aa e513 610e 4b0f 0216 271e     .........a.K...'
    5e90:	0221 9122 0729 0b33 0b35 1d37 7138 2a39     !.".).3.5.7.8q9*
    5ea0:	783c 404d 204e 0c69 606b 1974 4f8d 008e     <xM@N i.k`t..O..
    5eb0:	008f 0090 0091 0092 0096 809a 84b0 0cb1     ................
    5ec0:	0eb2 82b3 0ab8 1443 f044 3445 5846 2847     ......C.D.E4FXG(
    5ed0:	3a48 8859 885a 445b 675c 495d 0e5e 0464     H:Y.Z.[D\g]I^.d.
    5ee0:	2065 0566 0494 0895 0a6c 556d 116e 9f6f     e f.....l.mUn.o.
    5ef0:	406a 4001 4002 e713 0215 804f 8050 0051     j@.@.@....O.P.Q.
    5f00:	2252 5e53 8054 9e58 0841 003f 0575 e176     R"S^T.X.A.?.u.v.
    5f10:	004c 0177 c23d 094b 60c9 3841 4056 1134     L.w.=.K..`A8V@4.
    5f20:	023b 89a4 0096 3097 2098 3099 849a 299b     ;......0. .0...)
    5f30:	039c 4c9d 3f9e 0478 0179 f0c8 0f79 00c8     ...L.?x.y...y...
    5f40:	1079 7ec8 0a79 80c8 0b79 01c8 0c79 0fc8     y..~y...y...y...
    5f50:	0d79 20c8 0979 80c8 0279 c0c8 0379 40c8     y.. y...y...y..@
    5f60:	0579 30c8 2679 0309 0055 4056 423b 0000     y..0y&..U.V@;B..
    5f70:	6e49 6169 696c 6973 676e 4920 4332 0d0a     Inialising I2C..
    5f80:	0000 0000 6e49 6169 696c 6973 676e 4320     ....Inialising C
    5f90:	6d61 7265 0a61 000d 6553 2074 6970 206e     amera...Set pin 
    5fa0:	6163 6c6c 6162 6b63 6620 6961 756c 6572     callback failure
    5fb0:	0d21 000a 0d0a 430a 6d61 7265 2061 7041     !......Camera Ap
    5fc0:	0a70 000d 7453 7261 2074 6353 6e61 2e2e     p...Start Scan..
    5fd0:	0a2e 000d 6e49 7469 6169 696c 6573 7320     ....Initialise s
    5fe0:	6375 6563 7373 0d0a 0000 0000 6e49 7469     uccess......Init
    5ff0:	6169 696c 6573 6620 6961 0a6c 000d 0000     ialise fail.....
    6000:	6547 2074 6d49 6761 2165 0d0a 0000 0000     Get Image!......

00006010 <_global_impure_ptr>:
    6010:	0058 2000 0043 000a                         X.. C...

00006018 <blanks.6678>:
    6018:	2020 2020 2020 2020 2020 2020 2020 2020                     

00006028 <zeroes.6679>:
    6028:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
    6038:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
    6048:	3000 3231 3433 3635 3837 6139 6362 6564     .0123456789abcde
    6058:	0066 4f50 4953 0058 002e 0000               f.POSIX.....

00006064 <_init>:
    6064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6066:	bf00      	nop
    6068:	bcf8      	pop	{r3, r4, r5, r6, r7}
    606a:	bc08      	pop	{r3}
    606c:	469e      	mov	lr, r3
    606e:	4770      	bx	lr

00006070 <__init_array_start>:
    6070:	000042d9 	.word	0x000042d9

00006074 <__frame_dummy_init_array_entry>:
    6074:	000001f9                                ....

00006078 <_fini>:
    6078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    607a:	bf00      	nop
    607c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    607e:	bc08      	pop	{r3}
    6080:	469e      	mov	lr, r3
    6082:	4770      	bx	lr

00006084 <__fini_array_start>:
    6084:	000001d1 	.word	0x000001d1

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <bpm_ps_no_halt_exec>:
 */
RAMFUNC bool bpm_ps_no_halt_exec(Bpm *bpm, uint32_t pmcon)
{
	bool b_psok = false;
	bool b_timeout = false;
	BPM_UNLOCK(PMCON);
2000000c:	f04f 0300 	mov.w	r3, #0
20000010:	f2c4 030f 	movt	r3, #16399	; 0x400f
20000014:	f04f 021c 	mov.w	r2, #28
20000018:	f6ca 2200 	movt	r2, #43520	; 0xaa00
2000001c:	619a      	str	r2, [r3, #24]
	bpm->BPM_PMCON = pmcon;
2000001e:	61c1      	str	r1, [r0, #28]
	do {
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
20000020:	f04f 0100 	mov.w	r1, #0
20000024:	f2c4 010f 	movt	r1, #16399	; 0x400f
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
20000028:	f24e 0210 	movw	r2, #57360	; 0xe010
2000002c:	f2ce 0200 	movt	r2, #57344	; 0xe000
	bool b_psok = false;
	bool b_timeout = false;
	BPM_UNLOCK(PMCON);
	bpm->BPM_PMCON = pmcon;
	do {
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
20000030:	6948      	ldr	r0, [r1, #20]
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
20000032:	6813      	ldr	r3, [r2, #0]
20000034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
	} while (!b_psok && !b_timeout);
20000038:	f010 0001 	ands.w	r0, r0, #1
2000003c:	d101      	bne.n	20000042 <bpm_ps_no_halt_exec+0x36>
2000003e:	2b00      	cmp	r3, #0
20000040:	d0f6      	beq.n	20000030 <bpm_ps_no_halt_exec+0x24>
	return b_psok;
}
20000042:	4770      	bx	lr

20000044 <g_interrupt_enabled>:
20000044:	0001 0000                                   ....

20000048 <flashcalw_wait_until_ready>:
20000048:	31f9 0000 0000 0000                         .1......

20000050 <_impure_ptr>:
20000050:	0058 2000 0000 0000                         X.. ....

20000058 <impure_data>:
20000058:	0000 0000 0344 2000 03ac 2000 0414 2000     ....D.. ... ... 
	...
2000008c:	6014 0000 0000 0000 0000 0000 0000 0000     .`..............
	...
20000100:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000110:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000480 <lc_ctype_charset>:
20000480:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

200004a0 <__mb_cur_max>:
200004a0:	0001 0000                                   ....

200004a4 <lc_message_charset>:
200004a4:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

200004c4 <lconv>:
200004c4:	6060 0000 6017 0000 6017 0000 6017 0000     ``...`...`...`..
200004d4:	6017 0000 6017 0000 6017 0000 6017 0000     .`...`...`...`..
200004e4:	6017 0000 6017 0000 ffff ffff ffff ffff     .`...`..........
200004f4:	ffff ffff ffff 0000                         ........

200004fc <__malloc_av_>:
	...
20000504:	04fc 2000 04fc 2000 0504 2000 0504 2000     ... ... ... ... 
20000514:	050c 2000 050c 2000 0514 2000 0514 2000     ... ... ... ... 
20000524:	051c 2000 051c 2000 0524 2000 0524 2000     ... ... $.. $.. 
20000534:	052c 2000 052c 2000 0534 2000 0534 2000     ,.. ,.. 4.. 4.. 
20000544:	053c 2000 053c 2000 0544 2000 0544 2000     <.. <.. D.. D.. 
20000554:	054c 2000 054c 2000 0554 2000 0554 2000     L.. L.. T.. T.. 
20000564:	055c 2000 055c 2000 0564 2000 0564 2000     \.. \.. d.. d.. 
20000574:	056c 2000 056c 2000 0574 2000 0574 2000     l.. l.. t.. t.. 
20000584:	057c 2000 057c 2000 0584 2000 0584 2000     |.. |.. ... ... 
20000594:	058c 2000 058c 2000 0594 2000 0594 2000     ... ... ... ... 
200005a4:	059c 2000 059c 2000 05a4 2000 05a4 2000     ... ... ... ... 
200005b4:	05ac 2000 05ac 2000 05b4 2000 05b4 2000     ... ... ... ... 
200005c4:	05bc 2000 05bc 2000 05c4 2000 05c4 2000     ... ... ... ... 
200005d4:	05cc 2000 05cc 2000 05d4 2000 05d4 2000     ... ... ... ... 
200005e4:	05dc 2000 05dc 2000 05e4 2000 05e4 2000     ... ... ... ... 
200005f4:	05ec 2000 05ec 2000 05f4 2000 05f4 2000     ... ... ... ... 
20000604:	05fc 2000 05fc 2000 0604 2000 0604 2000     ... ... ... ... 
20000614:	060c 2000 060c 2000 0614 2000 0614 2000     ... ... ... ... 
20000624:	061c 2000 061c 2000 0624 2000 0624 2000     ... ... $.. $.. 
20000634:	062c 2000 062c 2000 0634 2000 0634 2000     ,.. ,.. 4.. 4.. 
20000644:	063c 2000 063c 2000 0644 2000 0644 2000     <.. <.. D.. D.. 
20000654:	064c 2000 064c 2000 0654 2000 0654 2000     L.. L.. T.. T.. 
20000664:	065c 2000 065c 2000 0664 2000 0664 2000     \.. \.. d.. d.. 
20000674:	066c 2000 066c 2000 0674 2000 0674 2000     l.. l.. t.. t.. 
20000684:	067c 2000 067c 2000 0684 2000 0684 2000     |.. |.. ... ... 
20000694:	068c 2000 068c 2000 0694 2000 0694 2000     ... ... ... ... 
200006a4:	069c 2000 069c 2000 06a4 2000 06a4 2000     ... ... ... ... 
200006b4:	06ac 2000 06ac 2000 06b4 2000 06b4 2000     ... ... ... ... 
200006c4:	06bc 2000 06bc 2000 06c4 2000 06c4 2000     ... ... ... ... 
200006d4:	06cc 2000 06cc 2000 06d4 2000 06d4 2000     ... ... ... ... 
200006e4:	06dc 2000 06dc 2000 06e4 2000 06e4 2000     ... ... ... ... 
200006f4:	06ec 2000 06ec 2000 06f4 2000 06f4 2000     ... ... ... ... 
20000704:	06fc 2000 06fc 2000 0704 2000 0704 2000     ... ... ... ... 
20000714:	070c 2000 070c 2000 0714 2000 0714 2000     ... ... ... ... 
20000724:	071c 2000 071c 2000 0724 2000 0724 2000     ... ... $.. $.. 
20000734:	072c 2000 072c 2000 0734 2000 0734 2000     ,.. ,.. 4.. 4.. 
20000744:	073c 2000 073c 2000 0744 2000 0744 2000     <.. <.. D.. D.. 
20000754:	074c 2000 074c 2000 0754 2000 0754 2000     L.. L.. T.. T.. 
20000764:	075c 2000 075c 2000 0764 2000 0764 2000     \.. \.. d.. d.. 
20000774:	076c 2000 076c 2000 0774 2000 0774 2000     l.. l.. t.. t.. 
20000784:	077c 2000 077c 2000 0784 2000 0784 2000     |.. |.. ... ... 
20000794:	078c 2000 078c 2000 0794 2000 0794 2000     ... ... ... ... 
200007a4:	079c 2000 079c 2000 07a4 2000 07a4 2000     ... ... ... ... 
200007b4:	07ac 2000 07ac 2000 07b4 2000 07b4 2000     ... ... ... ... 
200007c4:	07bc 2000 07bc 2000 07c4 2000 07c4 2000     ... ... ... ... 
200007d4:	07cc 2000 07cc 2000 07d4 2000 07d4 2000     ... ... ... ... 
200007e4:	07dc 2000 07dc 2000 07e4 2000 07e4 2000     ... ... ... ... 
200007f4:	07ec 2000 07ec 2000 07f4 2000 07f4 2000     ... ... ... ... 
20000804:	07fc 2000 07fc 2000 0804 2000 0804 2000     ... ... ... ... 
20000814:	080c 2000 080c 2000 0814 2000 0814 2000     ... ... ... ... 
20000824:	081c 2000 081c 2000 0824 2000 0824 2000     ... ... $.. $.. 
20000834:	082c 2000 082c 2000 0834 2000 0834 2000     ,.. ,.. 4.. 4.. 
20000844:	083c 2000 083c 2000 0844 2000 0844 2000     <.. <.. D.. D.. 
20000854:	084c 2000 084c 2000 0854 2000 0854 2000     L.. L.. T.. T.. 
20000864:	085c 2000 085c 2000 0864 2000 0864 2000     \.. \.. d.. d.. 
20000874:	086c 2000 086c 2000 0874 2000 0874 2000     l.. l.. t.. t.. 
20000884:	087c 2000 087c 2000 0884 2000 0884 2000     |.. |.. ... ... 
20000894:	088c 2000 088c 2000 0894 2000 0894 2000     ... ... ... ... 
200008a4:	089c 2000 089c 2000 08a4 2000 08a4 2000     ... ... ... ... 
200008b4:	08ac 2000 08ac 2000 08b4 2000 08b4 2000     ... ... ... ... 
200008c4:	08bc 2000 08bc 2000 08c4 2000 08c4 2000     ... ... ... ... 
200008d4:	08cc 2000 08cc 2000 08d4 2000 08d4 2000     ... ... ... ... 
200008e4:	08dc 2000 08dc 2000 08e4 2000 08e4 2000     ... ... ... ... 
200008f4:	08ec 2000 08ec 2000 08f4 2000 08f4 2000     ... ... ... ... 

20000904 <__malloc_sbrk_base>:
20000904:	ffff ffff                                   ....

20000908 <__malloc_trim_threshold>:
20000908:	0000 0002                                   ....

2000090c <__wctomb>:
2000090c:	56ad 0000                                   .V..
