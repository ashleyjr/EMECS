
Camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005e50  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00005e50  00005e50  0000de50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000910  20000000  00005e58  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000198  20000910  00006768  00010910  2**2
                  ALLOC
  4 .stack        00001000  20000aa8  00006900  00010910  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00010910  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  0001093a  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002d603  00000000  00000000  000109ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008005  00000000  00000000  0003dfae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000011a8  00000000  00000000  00045fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ef8  00000000  00000000  00047160  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000320d7  00000000  00000000  00048058  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001ab6c  00000000  00000000  0007a12f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000e5d48  00000000  00000000  00094c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002660  00000000  00000000  0017a9e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000e915  00000000  00000000  0017d044  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20001aa8 	.word	0x20001aa8
       4:	0000328d 	.word	0x0000328d
       8:	00003289 	.word	0x00003289
       c:	00003289 	.word	0x00003289
      10:	00003289 	.word	0x00003289
      14:	00003289 	.word	0x00003289
      18:	00003289 	.word	0x00003289
	...
      2c:	00003289 	.word	0x00003289
      30:	00003289 	.word	0x00003289
      34:	00000000 	.word	0x00000000
      38:	00003289 	.word	0x00003289
      3c:	00003289 	.word	0x00003289
      40:	00003289 	.word	0x00003289
      44:	00000975 	.word	0x00000975
      48:	00000989 	.word	0x00000989
      4c:	0000099d 	.word	0x0000099d
      50:	000009b1 	.word	0x000009b1
      54:	000009c5 	.word	0x000009c5
      58:	000009d9 	.word	0x000009d9
      5c:	000009ed 	.word	0x000009ed
      60:	00000a01 	.word	0x00000a01
      64:	00000a15 	.word	0x00000a15
      68:	00000a29 	.word	0x00000a29
      6c:	00000a3d 	.word	0x00000a3d
      70:	00000a51 	.word	0x00000a51
      74:	00000a65 	.word	0x00000a65
      78:	00000a79 	.word	0x00000a79
      7c:	00000a8d 	.word	0x00000a8d
      80:	00000aa1 	.word	0x00000aa1
      84:	00003289 	.word	0x00003289
      88:	00003289 	.word	0x00003289
      8c:	00003289 	.word	0x00003289
      90:	00003289 	.word	0x00003289
      94:	00003289 	.word	0x00003289
      98:	00003289 	.word	0x00003289
      9c:	00003289 	.word	0x00003289
      a0:	00003289 	.word	0x00003289
      a4:	0000042d 	.word	0x0000042d
      a8:	00000445 	.word	0x00000445
      ac:	0000045d 	.word	0x0000045d
      b0:	00000475 	.word	0x00000475
      b4:	0000048d 	.word	0x0000048d
      b8:	000004a5 	.word	0x000004a5
      bc:	000004bd 	.word	0x000004bd
      c0:	000004d5 	.word	0x000004d5
      c4:	000004ed 	.word	0x000004ed
      c8:	00000505 	.word	0x00000505
      cc:	0000051d 	.word	0x0000051d
      d0:	00000535 	.word	0x00000535
      d4:	00003289 	.word	0x00003289
      d8:	00003289 	.word	0x00003289
      dc:	00003289 	.word	0x00003289
      e0:	00003289 	.word	0x00003289
      e4:	00003289 	.word	0x00003289
      e8:	00003289 	.word	0x00003289
      ec:	00003289 	.word	0x00003289
      f0:	00003289 	.word	0x00003289
      f4:	00003289 	.word	0x00003289
      f8:	00003289 	.word	0x00003289
      fc:	00003289 	.word	0x00003289
     100:	00003289 	.word	0x00003289
     104:	00003289 	.word	0x00003289
     108:	00003289 	.word	0x00003289
     10c:	00003289 	.word	0x00003289
     110:	00003289 	.word	0x00003289
     114:	00003289 	.word	0x00003289
     118:	00003289 	.word	0x00003289
     11c:	00003289 	.word	0x00003289
     120:	00003289 	.word	0x00003289
     124:	00003289 	.word	0x00003289
     128:	00003289 	.word	0x00003289
     12c:	00003289 	.word	0x00003289
     130:	00003289 	.word	0x00003289
     134:	00001249 	.word	0x00001249
     138:	00003289 	.word	0x00003289
     13c:	00001261 	.word	0x00001261
     140:	00003289 	.word	0x00003289
     144:	00003289 	.word	0x00003289
     148:	00003289 	.word	0x00003289
     14c:	00003289 	.word	0x00003289
     150:	00003289 	.word	0x00003289
     154:	00003289 	.word	0x00003289
     158:	00003289 	.word	0x00003289
     15c:	00003289 	.word	0x00003289
     160:	00003289 	.word	0x00003289
     164:	00003289 	.word	0x00003289
     168:	00003289 	.word	0x00003289
     16c:	00003289 	.word	0x00003289
     170:	00003289 	.word	0x00003289
     174:	00001279 	.word	0x00001279
     178:	00001291 	.word	0x00001291
     17c:	00003289 	.word	0x00003289

00000180 <deregister_tm_clones>:
     180:	b508      	push	{r3, lr}
     182:	4805      	ldr	r0, [pc, #20]	; (198 <deregister_tm_clones+0x18>)
     184:	4b05      	ldr	r3, [pc, #20]	; (19c <deregister_tm_clones+0x1c>)
     186:	1a19      	subs	r1, r3, r0
     188:	2906      	cmp	r1, #6
     18a:	d800      	bhi.n	18e <deregister_tm_clones+0xe>
     18c:	bd08      	pop	{r3, pc}
     18e:	4a04      	ldr	r2, [pc, #16]	; (1a0 <deregister_tm_clones+0x20>)
     190:	2a00      	cmp	r2, #0
     192:	d0fb      	beq.n	18c <deregister_tm_clones+0xc>
     194:	4790      	blx	r2
     196:	e7f9      	b.n	18c <deregister_tm_clones+0xc>
     198:	00005e58 	.word	0x00005e58
     19c:	00005e5b 	.word	0x00005e5b
     1a0:	00000000 	.word	0x00000000

000001a4 <register_tm_clones>:
     1a4:	b508      	push	{r3, lr}
     1a6:	4807      	ldr	r0, [pc, #28]	; (1c4 <register_tm_clones+0x20>)
     1a8:	4b07      	ldr	r3, [pc, #28]	; (1c8 <register_tm_clones+0x24>)
     1aa:	1a19      	subs	r1, r3, r0
     1ac:	108a      	asrs	r2, r1, #2
     1ae:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
     1b2:	1059      	asrs	r1, r3, #1
     1b4:	d100      	bne.n	1b8 <register_tm_clones+0x14>
     1b6:	bd08      	pop	{r3, pc}
     1b8:	4a04      	ldr	r2, [pc, #16]	; (1cc <register_tm_clones+0x28>)
     1ba:	2a00      	cmp	r2, #0
     1bc:	d0fb      	beq.n	1b6 <register_tm_clones+0x12>
     1be:	4790      	blx	r2
     1c0:	e7f9      	b.n	1b6 <register_tm_clones+0x12>
     1c2:	bf00      	nop
     1c4:	00005e58 	.word	0x00005e58
     1c8:	00005e58 	.word	0x00005e58
     1cc:	00000000 	.word	0x00000000

000001d0 <__do_global_dtors_aux>:
     1d0:	b510      	push	{r4, lr}
     1d2:	4c06      	ldr	r4, [pc, #24]	; (1ec <__do_global_dtors_aux+0x1c>)
     1d4:	7823      	ldrb	r3, [r4, #0]
     1d6:	b943      	cbnz	r3, 1ea <__do_global_dtors_aux+0x1a>
     1d8:	f7ff ffd2 	bl	180 <deregister_tm_clones>
     1dc:	4804      	ldr	r0, [pc, #16]	; (1f0 <__do_global_dtors_aux+0x20>)
     1de:	b110      	cbz	r0, 1e6 <__do_global_dtors_aux+0x16>
     1e0:	4804      	ldr	r0, [pc, #16]	; (1f4 <__do_global_dtors_aux+0x24>)
     1e2:	f3af 8000 	nop.w
     1e6:	2101      	movs	r1, #1
     1e8:	7021      	strb	r1, [r4, #0]
     1ea:	bd10      	pop	{r4, pc}
     1ec:	20000910 	.word	0x20000910
     1f0:	00000000 	.word	0x00000000
     1f4:	00005e58 	.word	0x00005e58

000001f8 <frame_dummy>:
     1f8:	b508      	push	{r3, lr}
     1fa:	4b08      	ldr	r3, [pc, #32]	; (21c <frame_dummy+0x24>)
     1fc:	b11b      	cbz	r3, 206 <frame_dummy+0xe>
     1fe:	4808      	ldr	r0, [pc, #32]	; (220 <frame_dummy+0x28>)
     200:	4908      	ldr	r1, [pc, #32]	; (224 <frame_dummy+0x2c>)
     202:	f3af 8000 	nop.w
     206:	4808      	ldr	r0, [pc, #32]	; (228 <frame_dummy+0x30>)
     208:	6801      	ldr	r1, [r0, #0]
     20a:	b111      	cbz	r1, 212 <frame_dummy+0x1a>
     20c:	4a07      	ldr	r2, [pc, #28]	; (22c <frame_dummy+0x34>)
     20e:	b102      	cbz	r2, 212 <frame_dummy+0x1a>
     210:	4790      	blx	r2
     212:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     216:	f7ff bfc5 	b.w	1a4 <register_tm_clones>
     21a:	bf00      	nop
     21c:	00000000 	.word	0x00000000
     220:	00005e58 	.word	0x00005e58
     224:	20000914 	.word	0x20000914
     228:	00005e58 	.word	0x00005e58
     22c:	00000000 	.word	0x00000000

00000230 <events_get_config_defaults>:
 *
 *  \param config    Configuration structure to initialize to default values.
 */
void events_get_config_defaults(struct events_conf *const config)
{
	config->igf_divider = EVENT_IGF_DIVIDER_1024;
     230:	f04f 030a 	mov.w	r3, #10
     234:	7003      	strb	r3, [r0, #0]
     236:	4770      	bx	lr

00000238 <events_init>:
 * \brief Initialize the events module.
 *
 *  \param config    Configuration structure to initialize to default values.
 */
void events_init(struct events_conf *const config)
{
     238:	b538      	push	{r3, r4, r5, lr}
     23a:	4605      	mov	r5, r0
	/* Enable clock for PEVC module */
	sysclk_enable_peripheral_clock(PEVC);
     23c:	f44f 44c0 	mov.w	r4, #24576	; 0x6000
     240:	f2c4 040a 	movt	r4, #16394	; 0x400a
     244:	4620      	mov	r0, r4
     246:	f641 63fd 	movw	r3, #7933	; 0x1efd
     24a:	f2c0 0300 	movt	r3, #0
     24e:	4798      	blx	r3
 * \note As stated in the datasheet, there is one divider value for
 * all EVS instance.
 */
static inline void events_set_igf_divider(enum events_igf_divider divider)
{
	PEVC->PEVC_IGFDR = PEVC_IGFDR_IGFDR(divider);
     250:	7828      	ldrb	r0, [r5, #0]
     252:	f000 010f 	and.w	r1, r0, #15
     256:	f8c4 1300 	str.w	r1, [r4, #768]	; 0x300
     25a:	bd38      	pop	{r3, r4, r5, pc}

0000025c <events_ch_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->channel_id = EVENT_CHANNEL_N;
     25c:	f04f 0313 	mov.w	r3, #19
     260:	6003      	str	r3, [r0, #0]
	config->generator_id = EVENT_GENERATOR_N;
     262:	f04f 011f 	mov.w	r1, #31
     266:	6041      	str	r1, [r0, #4]
	config->shaper_enable = false;
     268:	f04f 0200 	mov.w	r2, #0
     26c:	7202      	strb	r2, [r0, #8]
	config->igf_edge = EVENT_IGF_EDGE_NONE;
     26e:	7242      	strb	r2, [r0, #9]
     270:	4770      	bx	lr
     272:	bf00      	nop

00000274 <events_ch_configure>:
 *
 * \param channel_id  Channel ID.
 */
static inline void events_ch_disable(uint32_t channel_id)
{
	PEVC->PEVC_CHDR = PEVC_CHDR_CHD(PEVC_CHDR_CHD_1 << channel_id);
     274:	6803      	ldr	r3, [r0, #0]
     276:	f04f 0201 	mov.w	r2, #1
     27a:	fa02 f203 	lsl.w	r2, r2, r3
     27e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
     282:	f2c4 030a 	movt	r3, #16394	; 0x400a
     286:	609a      	str	r2, [r3, #8]

	/* Disable the channel first */
	events_ch_disable(config->channel_id);

	/* Configure the event channel */
	PEVC->PEVC_CHMX[config->channel_id].PEVC_CHMX =
     288:	6802      	ldr	r2, [r0, #0]
		PEVC_CHMX_EVMX(config->generator_id);
     28a:	6841      	ldr	r1, [r0, #4]
     28c:	f001 013f 	and.w	r1, r1, #63	; 0x3f

	/* Disable the channel first */
	events_ch_disable(config->channel_id);

	/* Configure the event channel */
	PEVC->PEVC_CHMX[config->channel_id].PEVC_CHMX =
     290:	f102 0240 	add.w	r2, r2, #64	; 0x40
     294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		PEVC_CHMX_EVMX(config->generator_id);
	if (config->shaper_enable) {
		evs_val |= PEVC_EVS_EN;
     298:	7a03      	ldrb	r3, [r0, #8]
	} else {
		evs_val &= (~PEVC_EVS_EN);
	}
	switch (config->igf_edge) {
     29a:	7a42      	ldrb	r2, [r0, #9]
     29c:	2a02      	cmp	r2, #2
     29e:	d006      	beq.n	2ae <events_ch_configure+0x3a>
     2a0:	2a03      	cmp	r2, #3
     2a2:	d007      	beq.n	2b4 <events_ch_configure+0x40>
     2a4:	2a01      	cmp	r2, #1
     2a6:	d107      	bne.n	2b8 <events_ch_configure+0x44>
	case EVENT_IGF_EDGE_RISING:
		evs_val |= PEVC_EVS_IGFR_1;
     2a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
		break;
     2ac:	e004      	b.n	2b8 <events_ch_configure+0x44>
	case EVENT_IGF_EDGE_FALLING:
		evs_val |= PEVC_EVS_IGFF_1;
     2ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		break;
     2b2:	e001      	b.n	2b8 <events_ch_configure+0x44>
	case EVENT_IGF_EDGE_BOTH:
		evs_val |= (PEVC_EVS_IGFR_1 | PEVC_EVS_IGFF_1);
     2b4:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
		break;
	case EVENT_IGF_EDGE_NONE:
	default:
		break;
	}
	PEVC->PEVC_EVS[config->generator_id].PEVC_EVS = evs_val;
     2b8:	6840      	ldr	r0, [r0, #4]
     2ba:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
     2be:	f2c4 010a 	movt	r1, #16394	; 0x400a
     2c2:	f100 0080 	add.w	r0, r0, #128	; 0x80
     2c6:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
     2ca:	4770      	bx	lr

000002cc <gpio_common_handler>:

/**
 * Common GPIO handler.
 */
static void gpio_common_handler(uint32_t port_id, uint32_t port_mask)
{
     2cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     2d0:	4606      	mov	r6, r0
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[port_id]);
     2d2:	ea4f 2340 	mov.w	r3, r0, lsl #9
     2d6:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
     2da:	f500 2261 	add.w	r2, r0, #921600	; 0xe1000
	uint32_t i;
	uint32_t int_flags;
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;
     2de:	f8d2 90d0 	ldr.w	r9, [r2, #208]	; 0xd0
	gpio_port->GPIO_IFRC = (int_flags & port_mask);
     2e2:	ea01 0109 	and.w	r1, r1, r9
     2e6:	f8c2 10d8 	str.w	r1, [r2, #216]	; 0xd8

	for (i = 0; i < gpio_nb_sources; i++) {
     2ea:	f640 132c 	movw	r3, #2348	; 0x92c
     2ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
     2f2:	6818      	ldr	r0, [r3, #0]
     2f4:	b318      	cbz	r0, 33e <gpio_common_handler+0x72>
     2f6:	f04f 0400 	mov.w	r4, #0
     2fa:	4625      	mov	r5, r4
		pin = gpio_int_sources[i].pin;
     2fc:	f640 1730 	movw	r7, #2352	; 0x930
     300:	f2c2 0700 	movt	r7, #8192	; 0x2000
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
     304:	f04f 0a01 	mov.w	sl, #1
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;
	gpio_port->GPIO_IFRC = (int_flags & port_mask);

	for (i = 0; i < gpio_nb_sources; i++) {
     308:	f640 182c 	movw	r8, #2348	; 0x92c
     30c:	f2c2 0800 	movt	r8, #8192	; 0x2000
		pin = gpio_int_sources[i].pin;
     310:	59e2      	ldr	r2, [r4, r7]
		if ((ioport_pin_to_port_id(pin) == port_id) &&
     312:	ebb6 1f52 	cmp.w	r6, r2, lsr #5
     316:	d10a      	bne.n	32e <gpio_common_handler+0x62>
     318:	f002 011f 	and.w	r1, r2, #31
     31c:	fa0a f301 	lsl.w	r3, sl, r1
     320:	ea13 0f09 	tst.w	r3, r9
     324:	d003      	beq.n	32e <gpio_common_handler+0x62>
}

/**
 * Common GPIO handler.
 */
static void gpio_common_handler(uint32_t port_id, uint32_t port_mask)
     326:	1938      	adds	r0, r7, r4

	for (i = 0; i < gpio_nb_sources; i++) {
		pin = gpio_int_sources[i].pin;
		if ((ioport_pin_to_port_id(pin) == port_id) &&
				(ioport_pin_to_mask(pin) & int_flags)) {
			if (gpio_int_sources[i].callback != NULL) {
     328:	6842      	ldr	r2, [r0, #4]
     32a:	b102      	cbz	r2, 32e <gpio_common_handler+0x62>
				gpio_int_sources[i].callback();
     32c:	4790      	blx	r2
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;
	gpio_port->GPIO_IFRC = (int_flags & port_mask);

	for (i = 0; i < gpio_nb_sources; i++) {
     32e:	f105 0501 	add.w	r5, r5, #1
     332:	f104 0408 	add.w	r4, r4, #8
     336:	f8d8 1000 	ldr.w	r1, [r8]
     33a:	42a9      	cmp	r1, r5
     33c:	d8e8      	bhi.n	310 <gpio_common_handler+0x44>
     33e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     342:	bf00      	nop

00000344 <gpio_set_pin_callback>:
 * \retval \c false Wrong parameters or exceeding maximum number of interrupt
 *                  sources has been defined.
 */
bool gpio_set_pin_callback(ioport_pin_t pin, gpio_pin_callback_t callback,
		uint8_t irq_level)
{
     344:	b470      	push	{r4, r5, r6}
	int8_t i;
	int8_t irq_line;

	if (gpio_nb_sources >= GPIO_MAX_INTERRUPT_SOURCES) {
     346:	f640 132c 	movw	r3, #2348	; 0x92c
     34a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     34e:	681b      	ldr	r3, [r3, #0]
     350:	2b05      	cmp	r3, #5
     352:	d866      	bhi.n	422 <gpio_set_pin_callback+0xde>
     354:	f000 041f 	and.w	r4, r0, #31
     358:	f04f 0501 	mov.w	r5, #1
     35c:	fa05 f604 	lsl.w	r6, r5, r4
	 *
	 * \note Grouping interrupt generators into groups of eight, four
	 * different interrupt handlers can be installed for each GPIO port.
	 */
	for (i = 0; i < 4; i++) {
		if (ioport_pin_to_mask(pin) & (GPIO_INT_GROUP_MASK << (i * 8))) {
     360:	f016 0fff 	tst.w	r6, #255	; 0xff
     364:	d112      	bne.n	38c <gpio_set_pin_callback+0x48>
     366:	f416 4f7f 	tst.w	r6, #65280	; 0xff00
     36a:	d109      	bne.n	380 <gpio_set_pin_callback+0x3c>
     36c:	f416 0f7f 	tst.w	r6, #16711680	; 0xff0000
     370:	d109      	bne.n	386 <gpio_set_pin_callback+0x42>
     372:	f006 447f 	and.w	r4, r6, #4278190080	; 0xff000000
     376:	2c00      	cmp	r4, #0
     378:	bf0c      	ite	eq
     37a:	2604      	moveq	r6, #4
     37c:	2603      	movne	r6, #3
     37e:	e007      	b.n	390 <gpio_set_pin_callback+0x4c>
	 * Get IRQ line for the given pin.
	 *
	 * \note Grouping interrupt generators into groups of eight, four
	 * different interrupt handlers can be installed for each GPIO port.
	 */
	for (i = 0; i < 4; i++) {
     380:	f04f 0601 	mov.w	r6, #1
     384:	e004      	b.n	390 <gpio_set_pin_callback+0x4c>
     386:	f04f 0602 	mov.w	r6, #2
     38a:	e001      	b.n	390 <gpio_set_pin_callback+0x4c>
		if (ioport_pin_to_mask(pin) & (GPIO_INT_GROUP_MASK << (i * 8))) {
     38c:	f04f 0600 	mov.w	r6, #0
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
     390:	ea4f 1550 	mov.w	r5, r0, lsr #5
			break;
		}
	}
	irq_line = GPIO_0_IRQn + ioport_pin_to_port_id(pin) * 4 + i;
     394:	eb06 0485 	add.w	r4, r6, r5, lsl #2
     398:	f104 0419 	add.w	r4, r4, #25
     39c:	b2e4      	uxtb	r4, r4

	gpio_int_sources[gpio_nb_sources].pin = pin;
     39e:	f640 1630 	movw	r6, #2352	; 0x930
     3a2:	f2c2 0600 	movt	r6, #8192	; 0x2000
     3a6:	f846 0033 	str.w	r0, [r6, r3, lsl #3]
	gpio_int_sources[gpio_nb_sources].callback = callback;
     3aa:	eb06 00c3 	add.w	r0, r6, r3, lsl #3
     3ae:	6041      	str	r1, [r0, #4]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     3b0:	b263      	sxtb	r3, r4
     3b2:	ea4f 1153 	mov.w	r1, r3, lsr #5
     3b6:	f004 061f 	and.w	r6, r4, #31
     3ba:	f04f 0501 	mov.w	r5, #1
     3be:	fa05 f006 	lsl.w	r0, r5, r6
     3c2:	f44f 4561 	mov.w	r5, #57600	; 0xe100
     3c6:	f2ce 0500 	movt	r5, #57344	; 0xe000
     3ca:	f101 0660 	add.w	r6, r1, #96	; 0x60
     3ce:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
     3d2:	2b00      	cmp	r3, #0
     3d4:	da0b      	bge.n	3ee <gpio_set_pin_callback+0xaa>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
     3d6:	f004 040f 	and.w	r4, r4, #15
     3da:	ea4f 1202 	mov.w	r2, r2, lsl #4
     3de:	b2d2      	uxtb	r2, r2
     3e0:	f64e 43fc 	movw	r3, #60668	; 0xecfc
     3e4:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3e8:	18e3      	adds	r3, r4, r3
     3ea:	761a      	strb	r2, [r3, #24]
     3ec:	e008      	b.n	400 <gpio_set_pin_callback+0xbc>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
     3ee:	ea4f 1202 	mov.w	r2, r2, lsl #4
     3f2:	b2d2      	uxtb	r2, r2
     3f4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
     3f8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
     3fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
     400:	f44f 4261 	mov.w	r2, #57600	; 0xe100
     404:	f2ce 0200 	movt	r2, #57344	; 0xe000
     408:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	NVIC_ClearPendingIRQ((IRQn_Type)irq_line);
	NVIC_SetPriority((IRQn_Type)irq_line, irq_level);
	NVIC_EnableIRQ((IRQn_Type)irq_line);

	gpio_nb_sources++;
     40c:	f640 112c 	movw	r1, #2348	; 0x92c
     410:	f2c2 0100 	movt	r1, #8192	; 0x2000
     414:	6808      	ldr	r0, [r1, #0]
     416:	f100 0001 	add.w	r0, r0, #1
     41a:	6008      	str	r0, [r1, #0]

	return true;
     41c:	f04f 0001 	mov.w	r0, #1
     420:	e001      	b.n	426 <gpio_set_pin_callback+0xe2>
{
	int8_t i;
	int8_t irq_line;

	if (gpio_nb_sources >= GPIO_MAX_INTERRUPT_SOURCES) {
		return false;
     422:	f04f 0000 	mov.w	r0, #0
	NVIC_EnableIRQ((IRQn_Type)irq_line);

	gpio_nb_sources++;

	return true;
}
     426:	bc70      	pop	{r4, r5, r6}
     428:	4770      	bx	lr
     42a:	bf00      	nop

0000042c <GPIO_0_Handler>:

/**
 * GPIO handler 0 (PA 0..7)
 */
void GPIO_0_Handler(void)
{
     42c:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, GPIO_INT_GROUP_MASK);
     42e:	f04f 0000 	mov.w	r0, #0
     432:	f04f 01ff 	mov.w	r1, #255	; 0xff
     436:	f240 23cd 	movw	r3, #717	; 0x2cd
     43a:	f2c0 0300 	movt	r3, #0
     43e:	4798      	blx	r3
     440:	bd08      	pop	{r3, pc}
     442:	bf00      	nop

00000444 <GPIO_1_Handler>:

/**
 * GPIO handler 1 (PA 8..15)
 */
void GPIO_1_Handler(void)
{
     444:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 8));
     446:	f04f 0000 	mov.w	r0, #0
     44a:	f44f 417f 	mov.w	r1, #65280	; 0xff00
     44e:	f240 23cd 	movw	r3, #717	; 0x2cd
     452:	f2c0 0300 	movt	r3, #0
     456:	4798      	blx	r3
     458:	bd08      	pop	{r3, pc}
     45a:	bf00      	nop

0000045c <GPIO_2_Handler>:

/**
 * GPIO handler 2 (PA 16..23)
 */
void GPIO_2_Handler(void)
{
     45c:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 16));
     45e:	f04f 0000 	mov.w	r0, #0
     462:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
     466:	f240 23cd 	movw	r3, #717	; 0x2cd
     46a:	f2c0 0300 	movt	r3, #0
     46e:	4798      	blx	r3
     470:	bd08      	pop	{r3, pc}
     472:	bf00      	nop

00000474 <GPIO_3_Handler>:

/**
 * GPIO handler 3 (PA 24..31)
 */
void GPIO_3_Handler(void)
{
     474:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 23));
     476:	f04f 0000 	mov.w	r0, #0
     47a:	f04f 41ff 	mov.w	r1, #2139095040	; 0x7f800000
     47e:	f240 23cd 	movw	r3, #717	; 0x2cd
     482:	f2c0 0300 	movt	r3, #0
     486:	4798      	blx	r3
     488:	bd08      	pop	{r3, pc}
     48a:	bf00      	nop

0000048c <GPIO_4_Handler>:

/**
 * GPIO handler 4 (PB 0..7)
 */
void GPIO_4_Handler(void)
{
     48c:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, GPIO_INT_GROUP_MASK);
     48e:	f04f 0001 	mov.w	r0, #1
     492:	f04f 01ff 	mov.w	r1, #255	; 0xff
     496:	f240 23cd 	movw	r3, #717	; 0x2cd
     49a:	f2c0 0300 	movt	r3, #0
     49e:	4798      	blx	r3
     4a0:	bd08      	pop	{r3, pc}
     4a2:	bf00      	nop

000004a4 <GPIO_5_Handler>:

/**
 * GPIO handler 5 (PB 8..15)
 */
void GPIO_5_Handler(void)
{
     4a4:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 8));
     4a6:	f04f 0001 	mov.w	r0, #1
     4aa:	f44f 417f 	mov.w	r1, #65280	; 0xff00
     4ae:	f240 23cd 	movw	r3, #717	; 0x2cd
     4b2:	f2c0 0300 	movt	r3, #0
     4b6:	4798      	blx	r3
     4b8:	bd08      	pop	{r3, pc}
     4ba:	bf00      	nop

000004bc <GPIO_6_Handler>:

/**
 * GPIO handler 6 (PB 16..23)
 */
void GPIO_6_Handler(void)
{
     4bc:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 16));
     4be:	f04f 0001 	mov.w	r0, #1
     4c2:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
     4c6:	f240 23cd 	movw	r3, #717	; 0x2cd
     4ca:	f2c0 0300 	movt	r3, #0
     4ce:	4798      	blx	r3
     4d0:	bd08      	pop	{r3, pc}
     4d2:	bf00      	nop

000004d4 <GPIO_7_Handler>:

/**
 * GPIO handler 7 (PB 24..31)
 */
void GPIO_7_Handler(void)
{
     4d4:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 24));
     4d6:	f04f 0001 	mov.w	r0, #1
     4da:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
     4de:	f240 23cd 	movw	r3, #717	; 0x2cd
     4e2:	f2c0 0300 	movt	r3, #0
     4e6:	4798      	blx	r3
     4e8:	bd08      	pop	{r3, pc}
     4ea:	bf00      	nop

000004ec <GPIO_8_Handler>:

/**
 * GPIO handler 8 (PC 0..7)
 */
void GPIO_8_Handler(void)
{
     4ec:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, GPIO_INT_GROUP_MASK);
     4ee:	f04f 0002 	mov.w	r0, #2
     4f2:	f04f 01ff 	mov.w	r1, #255	; 0xff
     4f6:	f240 23cd 	movw	r3, #717	; 0x2cd
     4fa:	f2c0 0300 	movt	r3, #0
     4fe:	4798      	blx	r3
     500:	bd08      	pop	{r3, pc}
     502:	bf00      	nop

00000504 <GPIO_9_Handler>:

/**
 * GPIO handler 9 (PC 8..15)
 */
void GPIO_9_Handler(void)
{
     504:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 8));
     506:	f04f 0002 	mov.w	r0, #2
     50a:	f44f 417f 	mov.w	r1, #65280	; 0xff00
     50e:	f240 23cd 	movw	r3, #717	; 0x2cd
     512:	f2c0 0300 	movt	r3, #0
     516:	4798      	blx	r3
     518:	bd08      	pop	{r3, pc}
     51a:	bf00      	nop

0000051c <GPIO_10_Handler>:

/**
 * GPIO handler 10 (PC 16..23)
 */
void GPIO_10_Handler(void)
{
     51c:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 16));
     51e:	f04f 0002 	mov.w	r0, #2
     522:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
     526:	f240 23cd 	movw	r3, #717	; 0x2cd
     52a:	f2c0 0300 	movt	r3, #0
     52e:	4798      	blx	r3
     530:	bd08      	pop	{r3, pc}
     532:	bf00      	nop

00000534 <GPIO_11_Handler>:

/**
 * GPIO handler 11 (PC 24..31)
 */
void GPIO_11_Handler(void)
{
     534:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 24));
     536:	f04f 0002 	mov.w	r0, #2
     53a:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
     53e:	f240 23cd 	movw	r3, #717	; 0x2cd
     542:	f2c0 0300 	movt	r3, #0
     546:	4798      	blx	r3
     548:	bd08      	pop	{r3, pc}
     54a:	bf00      	nop

0000054c <VSYNC_Callback>:
	return arch_ioport_port_to_base(port)->GPIO_PVR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	arch_ioport_pin_to_base(pin)->GPIO_OVRT = arch_ioport_pin_to_mask(pin);
     54c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
     550:	f2c4 030e 	movt	r3, #16398	; 0x400e
     554:	f04f 0280 	mov.w	r2, #128	; 0x80
     558:	65da      	str	r2, [r3, #92]	; 0x5c
     55a:	4770      	bx	lr

0000055c <write_twi>:
 * \brief Write the data pattern to the target.
 *
 * \return STATUS_OK   if all bytes were written, error code otherwise.
 */
static status_code_t write_twi(unsigned char regID, unsigned char regDat)
{
     55c:	b508      	push	{r3, lr}
	/* TWI chip address to communicate with */
	packet_tx.chip = OV7670_ADDR;
     55e:	f640 232c 	movw	r3, #2604	; 0xa2c
     562:	f2c2 0300 	movt	r3, #8192	; 0x2000
     566:	f04f 0221 	mov.w	r2, #33	; 0x21
     56a:	601a      	str	r2, [r3, #0]
	/* TWI address/commands to issue to the other chip (node) */
	packet_tx.addr[0] = regID; //(VIRTUALMEM_ADDR >> 16) & 0xFF;
     56c:	7118      	strb	r0, [r3, #4]
	packet_tx.addr[1] = (VIRTUALMEM_ADDR >> 8) & 0xFF;
     56e:	f04f 0000 	mov.w	r0, #0
     572:	7158      	strb	r0, [r3, #5]
	/* Length of the TWI data address segment (1-3 bytes) */
	packet_tx.addr_length = 1;
     574:	f04f 0201 	mov.w	r2, #1
     578:	71da      	strb	r2, [r3, #7]
	/* Where to find the data to be written */
	write_data[0] = regDat;
     57a:	f640 1060 	movw	r0, #2400	; 0x960
     57e:	f2c2 0000 	movt	r0, #8192	; 0x2000
     582:	7001      	strb	r1, [r0, #0]
	packet_tx.buffer = (void *) write_data;
     584:	6098      	str	r0, [r3, #8]
	/* How many bytes do we want to write */
	packet_tx.length = PATTERN_TEST_LENGTH;
     586:	60da      	str	r2, [r3, #12]
	//printf("Writing data to TARGET\r\n");
	/* Write data to TARGET */
	return twi_master_write(EXAMPLE_TWIM, &packet_tx);
     588:	f44f 4040 	mov.w	r0, #49152	; 0xc000
     58c:	f2c4 0007 	movt	r0, #16391	; 0x4007
     590:	4619      	mov	r1, r3
     592:	f640 63f9 	movw	r3, #3833	; 0xef9
     596:	f2c0 0300 	movt	r3, #0
     59a:	4798      	blx	r3
}
     59c:	bd08      	pop	{r3, pc}
     59e:	bf00      	nop

000005a0 <OV7670_init>:
}



unsigned char OV7670_init(void)
{
     5a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     5a4:	b089      	sub	sp, #36	; 0x24
	uint8_t temp;
	status_code_t status;
	printf("Inialising I2C\n\r");
     5a6:	f645 5048 	movw	r0, #23880	; 0x5d48
     5aa:	f2c0 0000 	movt	r0, #0
     5ae:	f243 5511 	movw	r5, #13585	; 0x3511
     5b2:	f2c0 0500 	movt	r5, #0
     5b6:	47a8      	blx	r5
uint32_t cpu_speed = 0;

static status_code_t init_twi(void)
{
	/* Set TWIM options */
	cpu_speed = sysclk_get_peripheral_bus_hz(EXAMPLE_TWIM);
     5b8:	f44f 4440 	mov.w	r4, #49152	; 0xc000
     5bc:	f2c4 0407 	movt	r4, #16391	; 0x4007
     5c0:	4620      	mov	r0, r4
     5c2:	f641 4305 	movw	r3, #7173	; 0x1c05
     5c6:	f2c0 0300 	movt	r3, #0
     5ca:	4798      	blx	r3
     5cc:	f640 1164 	movw	r1, #2404	; 0x964
     5d0:	f2c2 0100 	movt	r1, #8192	; 0x2000
     5d4:	6008      	str	r0, [r1, #0]
	struct twim_config opts = {
     5d6:	9002      	str	r0, [sp, #8]
     5d8:	f248 60a0 	movw	r0, #34464	; 0x86a0
     5dc:	f2c0 0001 	movt	r0, #1
     5e0:	9003      	str	r0, [sp, #12]
     5e2:	f04f 0100 	mov.w	r1, #0
     5e6:	9104      	str	r1, [sp, #16]
     5e8:	f88d 1014 	strb.w	r1, [sp, #20]
     5ec:	f88d 1015 	strb.w	r1, [sp, #21]
     5f0:	f88d 1016 	strb.w	r1, [sp, #22]
     5f4:	f88d 1017 	strb.w	r1, [sp, #23]
     5f8:	f88d 1018 	strb.w	r1, [sp, #24]
     5fc:	f88d 1019 	strb.w	r1, [sp, #25]
     600:	f88d 101a 	strb.w	r1, [sp, #26]
     604:	f88d 101b 	strb.w	r1, [sp, #27]
     608:	f88d 101c 	strb.w	r1, [sp, #28]
     60c:	f88d 101d 	strb.w	r1, [sp, #29]
     610:	f88d 101e 	strb.w	r1, [sp, #30]
     614:	f88d 101f 	strb.w	r1, [sp, #31]
		.hs_clock_drive_strength_low = 0,
		.hs_data_slew_limit = 0,
		.hs_data_drive_strength_low = 0,
	};
	/* Initialize the TWIM Module */
	twim_set_callback(EXAMPLE_TWIM, 0, twim_default_callback, 1);
     618:	4620      	mov	r0, r4
     61a:	f640 22ed 	movw	r2, #2797	; 0xaed
     61e:	f2c0 0200 	movt	r2, #0
     622:	f04f 0301 	mov.w	r3, #1
     626:	f241 1649 	movw	r6, #4425	; 0x1149
     62a:	f2c0 0600 	movt	r6, #0
     62e:	47b0      	blx	r6

	return twim_set_config(EXAMPLE_TWIM, &opts);
     630:	4620      	mov	r0, r4
     632:	a902      	add	r1, sp, #8
     634:	f640 52dd 	movw	r2, #3549	; 0xddd
     638:	f2c0 0200 	movt	r2, #0
     63c:	4790      	blx	r2
{
	uint8_t temp;
	status_code_t status;
	printf("Inialising I2C\n\r");
	init_twi();
	printf("Inialising Camera\n\r");
     63e:	f645 505c 	movw	r0, #23900	; 0x5d5c
     642:	f2c0 0000 	movt	r0, #0
     646:	47a8      	blx	r5

	status = write_twi(OV_COM7,0x80);
     648:	f04f 0012 	mov.w	r0, #18
     64c:	f04f 0180 	mov.w	r1, #128	; 0x80
     650:	f240 535d 	movw	r3, #1373	; 0x55d
     654:	f2c0 0300 	movt	r3, #0
     658:	4798      	blx	r3
	if(STATUS_OK != status)
     65a:	2800      	cmp	r0, #0
     65c:	f040 80a4 	bne.w	7a8 <OV7670_init+0x208>
		return STATUS_ERR_DENIED;
	delay_ms(10);
     660:	f248 50da 	movw	r0, #34266	; 0x85da
     664:	f240 0401 	movw	r4, #1
     668:	f2c2 0400 	movt	r4, #8192	; 0x2000
     66c:	47a0      	blx	r4
     66e:	f645 34f8 	movw	r4, #23544	; 0x5bf8
     672:	f2c0 0400 	movt	r4, #0
	events_ch_enable(PEVC_ID_USER_PDCA_0);
}



unsigned char OV7670_init(void)
     676:	f504 79a7 	add.w	r9, r4, #334	; 0x14e
		return STATUS_ERR_DENIED;
	delay_ms(10);
	
	for(temp = 0; temp < SETTINGS_LENGTH; temp++)
	{
		if( STATUS_OK != write_twi(default_settings[temp][0], default_settings[temp][1] ))
     67a:	f240 565d 	movw	r6, #1373	; 0x55d
     67e:	f2c0 0600 	movt	r6, #0
		{
			return STATUS_ERR_DENIED;
		}
		delay_ms(1);
     682:	f640 5863 	movw	r8, #3427	; 0xd63
     686:	f240 0701 	movw	r7, #1
     68a:	f2c2 0700 	movt	r7, #8192	; 0x2000
		return STATUS_ERR_DENIED;
	delay_ms(10);
	
	for(temp = 0; temp < SETTINGS_LENGTH; temp++)
	{
		if( STATUS_OK != write_twi(default_settings[temp][0], default_settings[temp][1] ))
     68e:	7820      	ldrb	r0, [r4, #0]
     690:	7861      	ldrb	r1, [r4, #1]
     692:	47b0      	blx	r6
     694:	2800      	cmp	r0, #0
     696:	f000 808f 	beq.w	7b8 <OV7670_init+0x218>
     69a:	e088      	b.n	7ae <OV7670_init+0x20e>
     69c:	7820      	ldrb	r0, [r4, #0]
     69e:	7861      	ldrb	r1, [r4, #1]
     6a0:	47b0      	blx	r6
     6a2:	2800      	cmp	r0, #0
     6a4:	f040 8083 	bne.w	7ae <OV7670_init+0x20e>
		{
			return STATUS_ERR_DENIED;
		}
		delay_ms(1);
     6a8:	4640      	mov	r0, r8
     6aa:	47b8      	blx	r7
     6ac:	f104 0502 	add.w	r5, r4, #2
		return STATUS_ERR_DENIED;
	delay_ms(10);
	
	for(temp = 0; temp < SETTINGS_LENGTH; temp++)
	{
		if( STATUS_OK != write_twi(default_settings[temp][0], default_settings[temp][1] ))
     6b0:	78a0      	ldrb	r0, [r4, #2]
     6b2:	7869      	ldrb	r1, [r5, #1]
     6b4:	47b0      	blx	r6
     6b6:	2800      	cmp	r0, #0
     6b8:	f000 8083 	beq.w	7c2 <OV7670_init+0x222>
     6bc:	e077      	b.n	7ae <OV7670_init+0x20e>
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
     6be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     6c2:	f2c4 010e 	movt	r1, #16398	; 0x400e
     6c6:	f04f 0040 	mov.w	r0, #64	; 0x40
     6ca:	6488      	str	r0, [r1, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
     6cc:	f8c1 0164 	str.w	r0, [r1, #356]	; 0x164
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
     6d0:	6748      	str	r0, [r1, #116]	; 0x74

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
     6d2:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
	}
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
     6d6:	f8c1 00c4 	str.w	r0, [r1, #196]	; 0xc4

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
     6da:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
     6de:	6188      	str	r0, [r1, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
     6e0:	6288      	str	r0, [r1, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
     6e2:	6388      	str	r0, [r1, #56]	; 0x38
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (pin_sense & 0x01) {
		base->GPIO_IMR0S = mask;
	} else {
		base->GPIO_IMR0C = mask;
     6e4:	f8c1 00a8 	str.w	r0, [r1, #168]	; 0xa8
	}

	if (pin_sense & 0x02) {
		base->GPIO_IMR1S = mask;
     6e8:	f8c1 00b4 	str.w	r0, [r1, #180]	; 0xb4

	/* Configure push button 0 to trigger an interrupt on falling edge */
	ioport_set_pin_dir(OV7670_VSYNC_PIN, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(OV7670_VSYNC_PIN, IOPORT_MODE_PULLUP | IOPORT_MODE_GLITCH_FILTER);
	ioport_set_pin_sense_mode(OV7670_VSYNC_PIN, IOPORT_SENSE_FALLING);
	if (!gpio_set_pin_callback(OV7670_VSYNC_PIN, VSYNC_Callback, 1)) {
     6ec:	f04f 0006 	mov.w	r0, #6
     6f0:	f240 514d 	movw	r1, #1357	; 0x54d
     6f4:	f2c0 0100 	movt	r1, #0
     6f8:	f04f 0201 	mov.w	r2, #1
     6fc:	f240 3345 	movw	r3, #837	; 0x345
     700:	f2c0 0300 	movt	r3, #0
     704:	4798      	blx	r3
     706:	b958      	cbnz	r0, 720 <OV7670_init+0x180>
		printf("Set pin callback failure!\r\n");
     708:	f645 5070 	movw	r0, #23920	; 0x5d70
     70c:	f2c0 0000 	movt	r0, #0
     710:	f243 5311 	movw	r3, #13585	; 0x3511
     714:	f2c0 0300 	movt	r3, #0
     718:	4798      	blx	r3
		return STATUS_ERR_DENIED;
     71a:	f04f 001c 	mov.w	r0, #28
     71e:	e048      	b.n	7b2 <OV7670_init+0x212>
 * \param pin The pin number.
 */
static inline void gpio_enable_pin_interrupt(ioport_pin_t pin)
{
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[ioport_pin_to_port_id(pin)]);
	gpio_port->GPIO_IERS = ioport_pin_to_mask(pin);
     720:	f44f 5580 	mov.w	r5, #4096	; 0x1000
     724:	f2c4 050e 	movt	r5, #16398	; 0x400e
     728:	f04f 0240 	mov.w	r2, #64	; 0x40
     72c:	f8c5 2094 	str.w	r2, [r5, #148]	; 0x94
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
     730:	676a      	str	r2, [r5, #116]	; 0x74

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
     732:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
     736:	f8c5 20c8 	str.w	r2, [r5, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
     73a:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
     73e:	61aa      	str	r2, [r5, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
     740:	626a      	str	r2, [r5, #36]	; 0x24

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
     742:	63aa      	str	r2, [r5, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
     744:	60aa      	str	r2, [r5, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (pin_sense & 0x01) {
		base->GPIO_IMR0S = mask;
	} else {
		base->GPIO_IMR0C = mask;
     746:	f8c5 20a8 	str.w	r2, [r5, #168]	; 0xa8
	}

	if (pin_sense & 0x02) {
		base->GPIO_IMR1S = mask;
     74a:	f8c5 20b4 	str.w	r2, [r5, #180]	; 0xb4
 * \param pin The pin number.
 */
static inline void gpio_enable_pin_periph_event(ioport_pin_t pin)
{
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[ioport_pin_to_port_id(pin)]);
	gpio_port->GPIO_EVERS = ioport_pin_to_mask(pin);
     74e:	f8c5 2184 	str.w	r2, [r5, #388]	; 0x184
}
static void init_pevc(void)
{
	/* Set input glitch filter divider to 0x0A (2^10) */
	struct events_conf config;
	events_get_config_defaults(&config);
     752:	a801      	add	r0, sp, #4
     754:	f240 2431 	movw	r4, #561	; 0x231
     758:	f2c0 0400 	movt	r4, #0
     75c:	47a0      	blx	r4
	events_init(&config);
     75e:	a801      	add	r0, sp, #4
     760:	f240 2139 	movw	r1, #569	; 0x239
     764:	f2c0 0100 	movt	r1, #0
     768:	4788      	blx	r1
	 * - Generator: PAD_EVT 1
	 * - User: PDCA - channel 0 transfer one word
	 * - Enable falling edge detection for EVS
	 */
	struct events_ch_conf ch_config;
	events_ch_get_config_defaults(&ch_config);
     76a:	a802      	add	r0, sp, #8
     76c:	f240 235d 	movw	r3, #605	; 0x25d
     770:	f2c0 0300 	movt	r3, #0
     774:	4798      	blx	r3
	ch_config.channel_id = PEVC_ID_USER_PDCA_0;
     776:	f04f 0500 	mov.w	r5, #0
     77a:	9502      	str	r5, [sp, #8]
	ch_config.generator_id = PEVC_ID_GEN_PAD_1;
     77c:	f04f 0401 	mov.w	r4, #1
     780:	9403      	str	r4, [sp, #12]
	ch_config.shaper_enable = true;
     782:	f88d 4010 	strb.w	r4, [sp, #16]
	ch_config.igf_edge = EVENT_IGF_EDGE_FALLING;
     786:	f04f 0002 	mov.w	r0, #2
     78a:	f88d 0011 	strb.w	r0, [sp, #17]
	events_ch_configure(&ch_config);
     78e:	a802      	add	r0, sp, #8
     790:	f240 2275 	movw	r2, #629	; 0x275
     794:	f2c0 0200 	movt	r2, #0
     798:	4790      	blx	r2
 *
 * \param channel_id  Channel ID.
 */
static inline void events_ch_enable(uint32_t channel_id)
{
	PEVC->PEVC_CHER = PEVC_CHER_CHE(PEVC_CHER_CHE_1 << channel_id);
     79a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
     79e:	f2c4 010a 	movt	r1, #16394	; 0x400a
     7a2:	604c      	str	r4, [r1, #4]
	ioport_disable_pin(OV7670_VSYNC_EVENT);
	ioport_set_pin_sense_mode(OV7670_VSYNC_EVENT, IOPORT_SENSE_FALLING);
	gpio_enable_pin_periph_event(OV7670_VSYNC_EVENT);
	init_pevc();
	
	return STATUS_OK;
     7a4:	4628      	mov	r0, r5
     7a6:	e004      	b.n	7b2 <OV7670_init+0x212>
	init_twi();
	printf("Inialising Camera\n\r");

	status = write_twi(OV_COM7,0x80);
	if(STATUS_OK != status)
		return STATUS_ERR_DENIED;
     7a8:	f04f 001c 	mov.w	r0, #28
     7ac:	e001      	b.n	7b2 <OV7670_init+0x212>
	
	for(temp = 0; temp < SETTINGS_LENGTH; temp++)
	{
		if( STATUS_OK != write_twi(default_settings[temp][0], default_settings[temp][1] ))
		{
			return STATUS_ERR_DENIED;
     7ae:	f04f 001c 	mov.w	r0, #28
	ioport_set_pin_sense_mode(OV7670_VSYNC_EVENT, IOPORT_SENSE_FALLING);
	gpio_enable_pin_periph_event(OV7670_VSYNC_EVENT);
	init_pevc();
	
	return STATUS_OK;
     7b2:	b009      	add	sp, #36	; 0x24
     7b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	{
		if( STATUS_OK != write_twi(default_settings[temp][0], default_settings[temp][1] ))
		{
			return STATUS_ERR_DENIED;
		}
		delay_ms(1);
     7b8:	4640      	mov	r0, r8
     7ba:	47b8      	blx	r7
     7bc:	f104 0402 	add.w	r4, r4, #2
     7c0:	e76c      	b.n	69c <OV7670_init+0xfc>
     7c2:	4640      	mov	r0, r8
     7c4:	47b8      	blx	r7
     7c6:	f105 0402 	add.w	r4, r5, #2
	status = write_twi(OV_COM7,0x80);
	if(STATUS_OK != status)
		return STATUS_ERR_DENIED;
	delay_ms(10);
	
	for(temp = 0; temp < SETTINGS_LENGTH; temp++)
     7ca:	454c      	cmp	r4, r9
     7cc:	f47f af66 	bne.w	69c <OV7670_init+0xfc>
     7d0:	e775      	b.n	6be <OV7670_init+0x11e>
     7d2:	bf00      	nop

000007d4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     7d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     7d8:	460c      	mov	r4, r1
     7da:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     7dc:	bb48      	cbnz	r0, 832 <_read+0x5e>
		return -1;
	}

	for (; len > 0; --len) {
     7de:	2a00      	cmp	r2, #0
     7e0:	dd2b      	ble.n	83a <_read+0x66>

int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
     7e2:	188f      	adds	r7, r1, r2
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
     7e4:	f640 2650 	movw	r6, #2640	; 0xa50
     7e8:	f2c2 0600 	movt	r6, #8192	; 0x2000
     7ec:	f640 2548 	movw	r5, #2632	; 0xa48
     7f0:	f2c2 0500 	movt	r5, #8192	; 0x2000
     7f4:	ea6f 0901 	mvn.w	r9, r1
     7f8:	eb07 0009 	add.w	r0, r7, r9
     7fc:	f000 0901 	and.w	r9, r0, #1
     800:	6830      	ldr	r0, [r6, #0]
     802:	682b      	ldr	r3, [r5, #0]
     804:	4798      	blx	r3
		ptr++;
     806:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     80a:	42bc      	cmp	r4, r7
     80c:	d119      	bne.n	842 <_read+0x6e>
     80e:	e00d      	b.n	82c <_read+0x58>
		ptr_get(stdio_base, ptr);
     810:	6830      	ldr	r0, [r6, #0]
     812:	682b      	ldr	r3, [r5, #0]
     814:	4621      	mov	r1, r4
     816:	4798      	blx	r3
		ptr++;
     818:	f104 0401 	add.w	r4, r4, #1
     81c:	4621      	mov	r1, r4
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
     81e:	6830      	ldr	r0, [r6, #0]
     820:	682a      	ldr	r2, [r5, #0]
     822:	4790      	blx	r2
		ptr++;
     824:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     828:	42bc      	cmp	r4, r7
     82a:	d1f1      	bne.n	810 <_read+0x3c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
     82c:	4640      	mov	r0, r8
     82e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
     832:	f04f 30ff 	mov.w	r0, #4294967295
     836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	for (; len > 0; --len) {
     83a:	f04f 0000 	mov.w	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
     83e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     842:	f1b9 0f00 	cmp.w	r9, #0
     846:	d0e3      	beq.n	810 <_read+0x3c>
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
     848:	6830      	ldr	r0, [r6, #0]
     84a:	682a      	ldr	r2, [r5, #0]
     84c:	4621      	mov	r1, r4
     84e:	4790      	blx	r2
		ptr++;
     850:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     854:	42bc      	cmp	r4, r7
     856:	d1db      	bne.n	810 <_read+0x3c>
     858:	e7e8      	b.n	82c <_read+0x58>
     85a:	bf00      	nop

0000085c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
     85c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     860:	460d      	mov	r5, r1
     862:	4690      	mov	r8, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     864:	f100 30ff 	add.w	r0, r0, #4294967295
     868:	2802      	cmp	r0, #2
     86a:	d824      	bhi.n	8b6 <_write+0x5a>
		return -1;
	}

	for (; len != 0; --len) {
     86c:	b332      	cbz	r2, 8bc <_write+0x60>
		if (ptr_put(stdio_base, *ptr++) < 0) {
     86e:	f640 2650 	movw	r6, #2640	; 0xa50
     872:	f2c2 0600 	movt	r6, #8192	; 0x2000
     876:	f640 274c 	movw	r7, #2636	; 0xa4c
     87a:	f2c2 0700 	movt	r7, #8192	; 0x2000
     87e:	f04f 0400 	mov.w	r4, #0
     882:	f102 39ff 	add.w	r9, r2, #4294967295
     886:	f009 0901 	and.w	r9, r9, #1
     88a:	6830      	ldr	r0, [r6, #0]
     88c:	683b      	ldr	r3, [r7, #0]
     88e:	5d09      	ldrb	r1, [r1, r4]
     890:	4798      	blx	r3
     892:	42a0      	cmp	r0, r4
     894:	da1a      	bge.n	8cc <_write+0x70>
     896:	e014      	b.n	8c2 <_write+0x66>
     898:	6830      	ldr	r0, [r6, #0]
     89a:	683b      	ldr	r3, [r7, #0]
     89c:	5d29      	ldrb	r1, [r5, r4]
     89e:	4798      	blx	r3
     8a0:	2800      	cmp	r0, #0
     8a2:	db0e      	blt.n	8c2 <_write+0x66>
			return -1;
		}
		++nChars;
     8a4:	f104 0401 	add.w	r4, r4, #1
	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
     8a8:	6830      	ldr	r0, [r6, #0]
     8aa:	683a      	ldr	r2, [r7, #0]
     8ac:	5d29      	ldrb	r1, [r5, r4]
     8ae:	4790      	blx	r2
     8b0:	2800      	cmp	r0, #0
     8b2:	da1d      	bge.n	8f0 <_write+0x94>
     8b4:	e005      	b.n	8c2 <_write+0x66>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
     8b6:	f04f 34ff 	mov.w	r4, #4294967295
     8ba:	e004      	b.n	8c6 <_write+0x6a>
	}

	for (; len != 0; --len) {
     8bc:	f04f 0400 	mov.w	r4, #0
     8c0:	e001      	b.n	8c6 <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
     8c2:	f04f 34ff 	mov.w	r4, #4294967295
		}
		++nChars;
	}
	return nChars;
}
     8c6:	4620      	mov	r0, r4
     8c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
     8cc:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     8d0:	45a0      	cmp	r8, r4
     8d2:	d0f8      	beq.n	8c6 <_write+0x6a>
     8d4:	f1b9 0f00 	cmp.w	r9, #0
     8d8:	d0de      	beq.n	898 <_write+0x3c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
     8da:	6830      	ldr	r0, [r6, #0]
     8dc:	683a      	ldr	r2, [r7, #0]
     8de:	5d29      	ldrb	r1, [r5, r4]
     8e0:	4790      	blx	r2
     8e2:	2800      	cmp	r0, #0
     8e4:	dbed      	blt.n	8c2 <_write+0x66>
			return -1;
		}
		++nChars;
     8e6:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     8ea:	45a0      	cmp	r8, r4
     8ec:	d1d4      	bne.n	898 <_write+0x3c>
     8ee:	e7ea      	b.n	8c6 <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
     8f0:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     8f4:	45a0      	cmp	r8, r4
     8f6:	d1cf      	bne.n	898 <_write+0x3c>
     8f8:	e7e5      	b.n	8c6 <_write+0x6a>
     8fa:	bf00      	nop

000008fc <pdca_channel_get_handler>:
 */
volatile PdcaChannel *pdca_channel_get_handler(pdca_channel_num_t
		pdca_ch_number)
{
	if (pdca_ch_number >= PDCA_NUMBER_OF_CHANNELS)
		pdca_ch_number = 0;
     8fc:	280f      	cmp	r0, #15
     8fe:	bf88      	it	hi
     900:	2000      	movhi	r0, #0

	/* Get the correct channel pointer */
	volatile PdcaChannel *pdca_channel =
     902:	ea4f 1080 	mov.w	r0, r0, lsl #6
     906:	f100 4180 	add.w	r1, r0, #1073741824	; 0x40000000
			&(PDCA->PDCA_CHANNEL[pdca_ch_number]);

	return pdca_channel;
}
     90a:	f501 2022 	add.w	r0, r1, #663552	; 0xa2000
     90e:	4770      	bx	lr

00000910 <pdca_get_channel_status>:
 *
 * \return 1 if channel transfer is enabled, else 0
 */
enum pdca_channel_status
		pdca_get_channel_status(pdca_channel_num_t pdca_ch_number)
{
     910:	b508      	push	{r3, lr}
	/* Get the correct channel pointer */
	volatile PdcaChannel *pdca_channel =
     912:	f640 03fd 	movw	r3, #2301	; 0x8fd
     916:	f2c0 0300 	movt	r3, #0
     91a:	4798      	blx	r3
			pdca_channel_get_handler(pdca_ch_number);
	uint32_t status = pdca_channel->PDCA_SR;
     91c:	69c1      	ldr	r1, [r0, #28]
	uint32_t intflag = pdca_channel->PDCA_ISR;
     91e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	if ((status & PDCA_SR_TEN) == PDCA_SR_TEN) {
     920:	f011 0f01 	tst.w	r1, #1
     924:	d00c      	beq.n	940 <pdca_get_channel_status+0x30>
		if ((intflag & PDCA_ISR_TERR) == PDCA_ISR_TERR) {
     926:	f010 0f04 	tst.w	r0, #4
     92a:	d10c      	bne.n	946 <pdca_get_channel_status+0x36>
			return PDCA_CH_TRANSFER_ERROR;
		} else if ((intflag & PDCA_ISR_TRC) == PDCA_ISR_TRC) {
     92c:	f010 0f02 	tst.w	r0, #2
     930:	d10c      	bne.n	94c <pdca_get_channel_status+0x3c>
			return PDCA_CH_TRANSFER_COMPLETED;
		} else if ((intflag & PDCA_ISR_RCZ) == PDCA_ISR_RCZ) {
     932:	f000 0201 	and.w	r2, r0, #1
			return PDCA_CH_COUNTER_RELOAD_IS_ZERO;
     936:	2a00      	cmp	r2, #0
     938:	bf0c      	ite	eq
     93a:	2001      	moveq	r0, #1
     93c:	2002      	movne	r0, #2
     93e:	bd08      	pop	{r3, pc}
		}
		return PDCA_CH_BUSY;
	} else {
		return PDCA_CH_FREE;
     940:	f04f 0000 	mov.w	r0, #0
     944:	bd08      	pop	{r3, pc}
	uint32_t status = pdca_channel->PDCA_SR;
	uint32_t intflag = pdca_channel->PDCA_ISR;

	if ((status & PDCA_SR_TEN) == PDCA_SR_TEN) {
		if ((intflag & PDCA_ISR_TERR) == PDCA_ISR_TERR) {
			return PDCA_CH_TRANSFER_ERROR;
     946:	f04f 0004 	mov.w	r0, #4
     94a:	bd08      	pop	{r3, pc}
		} else if ((intflag & PDCA_ISR_TRC) == PDCA_ISR_TRC) {
			return PDCA_CH_TRANSFER_COMPLETED;
     94c:	f04f 0003 	mov.w	r0, #3
		}
		return PDCA_CH_BUSY;
	} else {
		return PDCA_CH_FREE;
	}
}
     950:	bd08      	pop	{r3, pc}
     952:	bf00      	nop

00000954 <pdca_channel_interrupt>:
 * pdca_channel_set_callback() function.
 *
 * \param pdca_ch_number PDCA channel number to handle interrupt for
 */
static void pdca_channel_interrupt(const pdca_channel_num_t pdca_ch_number)
{
     954:	b510      	push	{r4, lr}
     956:	4604      	mov	r4, r0
	enum pdca_channel_status status;

	status = pdca_get_channel_status(pdca_ch_number);
     958:	f640 1311 	movw	r3, #2321	; 0x911
     95c:	f2c0 0300 	movt	r3, #0
     960:	4798      	blx	r3

	if (pdca_callback_pointer[pdca_ch_number]) {
     962:	f640 2154 	movw	r1, #2644	; 0xa54
     966:	f2c2 0100 	movt	r1, #8192	; 0x2000
     96a:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
     96e:	b102      	cbz	r2, 972 <pdca_channel_interrupt+0x1e>
		pdca_callback_pointer[pdca_ch_number] (status);
     970:	4790      	blx	r2
     972:	bd10      	pop	{r4, pc}

00000974 <PDCA_0_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 0.
 */
void PDCA_0_Handler(void)
{
     974:	b508      	push	{r3, lr}
	pdca_channel_interrupt(0);
     976:	f04f 0000 	mov.w	r0, #0
     97a:	f640 1355 	movw	r3, #2389	; 0x955
     97e:	f2c0 0300 	movt	r3, #0
     982:	4798      	blx	r3
     984:	bd08      	pop	{r3, pc}
     986:	bf00      	nop

00000988 <PDCA_1_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 1.
 */
void PDCA_1_Handler(void)
{
     988:	b508      	push	{r3, lr}
	pdca_channel_interrupt(1);
     98a:	f04f 0001 	mov.w	r0, #1
     98e:	f640 1355 	movw	r3, #2389	; 0x955
     992:	f2c0 0300 	movt	r3, #0
     996:	4798      	blx	r3
     998:	bd08      	pop	{r3, pc}
     99a:	bf00      	nop

0000099c <PDCA_2_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 2.
 */
void PDCA_2_Handler(void)
{
     99c:	b508      	push	{r3, lr}
	pdca_channel_interrupt(2);
     99e:	f04f 0002 	mov.w	r0, #2
     9a2:	f640 1355 	movw	r3, #2389	; 0x955
     9a6:	f2c0 0300 	movt	r3, #0
     9aa:	4798      	blx	r3
     9ac:	bd08      	pop	{r3, pc}
     9ae:	bf00      	nop

000009b0 <PDCA_3_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 3.
 */
void PDCA_3_Handler(void)
{
     9b0:	b508      	push	{r3, lr}
	pdca_channel_interrupt(3);
     9b2:	f04f 0003 	mov.w	r0, #3
     9b6:	f640 1355 	movw	r3, #2389	; 0x955
     9ba:	f2c0 0300 	movt	r3, #0
     9be:	4798      	blx	r3
     9c0:	bd08      	pop	{r3, pc}
     9c2:	bf00      	nop

000009c4 <PDCA_4_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 4.
 */
void PDCA_4_Handler(void)
{
     9c4:	b508      	push	{r3, lr}
	pdca_channel_interrupt(4);
     9c6:	f04f 0004 	mov.w	r0, #4
     9ca:	f640 1355 	movw	r3, #2389	; 0x955
     9ce:	f2c0 0300 	movt	r3, #0
     9d2:	4798      	blx	r3
     9d4:	bd08      	pop	{r3, pc}
     9d6:	bf00      	nop

000009d8 <PDCA_5_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 5.
 */
void PDCA_5_Handler(void)
{
     9d8:	b508      	push	{r3, lr}
	pdca_channel_interrupt(5);
     9da:	f04f 0005 	mov.w	r0, #5
     9de:	f640 1355 	movw	r3, #2389	; 0x955
     9e2:	f2c0 0300 	movt	r3, #0
     9e6:	4798      	blx	r3
     9e8:	bd08      	pop	{r3, pc}
     9ea:	bf00      	nop

000009ec <PDCA_6_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 6.
 */
void PDCA_6_Handler(void)
{
     9ec:	b508      	push	{r3, lr}
	pdca_channel_interrupt(6);
     9ee:	f04f 0006 	mov.w	r0, #6
     9f2:	f640 1355 	movw	r3, #2389	; 0x955
     9f6:	f2c0 0300 	movt	r3, #0
     9fa:	4798      	blx	r3
     9fc:	bd08      	pop	{r3, pc}
     9fe:	bf00      	nop

00000a00 <PDCA_7_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 7.
 */
void PDCA_7_Handler(void)
{
     a00:	b508      	push	{r3, lr}
	pdca_channel_interrupt(7);
     a02:	f04f 0007 	mov.w	r0, #7
     a06:	f640 1355 	movw	r3, #2389	; 0x955
     a0a:	f2c0 0300 	movt	r3, #0
     a0e:	4798      	blx	r3
     a10:	bd08      	pop	{r3, pc}
     a12:	bf00      	nop

00000a14 <PDCA_8_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 8.
 */
void PDCA_8_Handler(void)
{
     a14:	b508      	push	{r3, lr}
	pdca_channel_interrupt(8);
     a16:	f04f 0008 	mov.w	r0, #8
     a1a:	f640 1355 	movw	r3, #2389	; 0x955
     a1e:	f2c0 0300 	movt	r3, #0
     a22:	4798      	blx	r3
     a24:	bd08      	pop	{r3, pc}
     a26:	bf00      	nop

00000a28 <PDCA_9_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 9.
 */
void PDCA_9_Handler(void)
{
     a28:	b508      	push	{r3, lr}
	pdca_channel_interrupt(9);
     a2a:	f04f 0009 	mov.w	r0, #9
     a2e:	f640 1355 	movw	r3, #2389	; 0x955
     a32:	f2c0 0300 	movt	r3, #0
     a36:	4798      	blx	r3
     a38:	bd08      	pop	{r3, pc}
     a3a:	bf00      	nop

00000a3c <PDCA_10_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 10.
 */
void PDCA_10_Handler(void)
{
     a3c:	b508      	push	{r3, lr}
	pdca_channel_interrupt(10);
     a3e:	f04f 000a 	mov.w	r0, #10
     a42:	f640 1355 	movw	r3, #2389	; 0x955
     a46:	f2c0 0300 	movt	r3, #0
     a4a:	4798      	blx	r3
     a4c:	bd08      	pop	{r3, pc}
     a4e:	bf00      	nop

00000a50 <PDCA_11_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 11.
 */
void PDCA_11_Handler(void)
{
     a50:	b508      	push	{r3, lr}
	pdca_channel_interrupt(11);
     a52:	f04f 000b 	mov.w	r0, #11
     a56:	f640 1355 	movw	r3, #2389	; 0x955
     a5a:	f2c0 0300 	movt	r3, #0
     a5e:	4798      	blx	r3
     a60:	bd08      	pop	{r3, pc}
     a62:	bf00      	nop

00000a64 <PDCA_12_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 12.
 */
void PDCA_12_Handler(void)
{
     a64:	b508      	push	{r3, lr}
	pdca_channel_interrupt(12);
     a66:	f04f 000c 	mov.w	r0, #12
     a6a:	f640 1355 	movw	r3, #2389	; 0x955
     a6e:	f2c0 0300 	movt	r3, #0
     a72:	4798      	blx	r3
     a74:	bd08      	pop	{r3, pc}
     a76:	bf00      	nop

00000a78 <PDCA_13_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 13.
 */
void PDCA_13_Handler(void)
{
     a78:	b508      	push	{r3, lr}
	pdca_channel_interrupt(13);
     a7a:	f04f 000d 	mov.w	r0, #13
     a7e:	f640 1355 	movw	r3, #2389	; 0x955
     a82:	f2c0 0300 	movt	r3, #0
     a86:	4798      	blx	r3
     a88:	bd08      	pop	{r3, pc}
     a8a:	bf00      	nop

00000a8c <PDCA_14_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 14.
 */
void PDCA_14_Handler(void)
{
     a8c:	b508      	push	{r3, lr}
	pdca_channel_interrupt(14);
     a8e:	f04f 000e 	mov.w	r0, #14
     a92:	f640 1355 	movw	r3, #2389	; 0x955
     a96:	f2c0 0300 	movt	r3, #0
     a9a:	4798      	blx	r3
     a9c:	bd08      	pop	{r3, pc}
     a9e:	bf00      	nop

00000aa0 <PDCA_15_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 15.
 */
void PDCA_15_Handler(void)
{
     aa0:	b508      	push	{r3, lr}
	pdca_channel_interrupt(15);
     aa2:	f04f 000f 	mov.w	r0, #15
     aa6:	f640 1355 	movw	r3, #2389	; 0x955
     aaa:	f2c0 0300 	movt	r3, #0
     aae:	4798      	blx	r3
     ab0:	bd08      	pop	{r3, pc}
     ab2:	bf00      	nop

00000ab4 <find_twim_channel_num>:
 * \return      TWIM channel number
 */
static uint32_t find_twim_channel_num(Twim *twim)
{
#if defined(ID_TWIM3)
	if (twim == TWIM3) {
     ab4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
     ab8:	f2c4 0307 	movt	r3, #16391	; 0x4007
     abc:	4298      	cmp	r0, r3
     abe:	d00e      	beq.n	ade <find_twim_channel_num+0x2a>
		return 3;
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
     ac0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     ac4:	f2c4 0107 	movt	r1, #16391	; 0x4007
     ac8:	4288      	cmp	r0, r1
     aca:	d00b      	beq.n	ae4 <find_twim_channel_num+0x30>
		return 2;
	}
#endif
#if defined(ID_TWIM1)
	if (twim == TWIM1) {
     acc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
     ad0:	f2c4 0201 	movt	r2, #16385	; 0x4001
     ad4:	4290      	cmp	r0, r2
     ad6:	bf14      	ite	ne
     ad8:	2000      	movne	r0, #0
     ada:	2001      	moveq	r0, #1
     adc:	4770      	bx	lr
 */
static uint32_t find_twim_channel_num(Twim *twim)
{
#if defined(ID_TWIM3)
	if (twim == TWIM3) {
		return 3;
     ade:	f04f 0003 	mov.w	r0, #3
     ae2:	4770      	bx	lr
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
		return 2;
     ae4:	f04f 0002 	mov.w	r0, #2
		return 0;
	}
#endif

	return 0;
}
     ae8:	4770      	bx	lr
     aea:	bf00      	nop

00000aec <twim_default_callback>:

/**
 * \brief TWIM default callback function
 */
void twim_default_callback(Twim *twim)
{
     aec:	b510      	push	{r4, lr}
     aee:	4604      	mov	r4, r0
	/* Get masked status register value */
	uint32_t twim_ch = find_twim_channel_num(twim);
     af0:	f640 23b5 	movw	r3, #2741	; 0xab5
     af4:	f2c0 0300 	movt	r3, #0
     af8:	4798      	blx	r3
	uint32_t status = twim->TWIM_SR;
     afa:	69e1      	ldr	r1, [r4, #28]
	status &= twim_it_mask[twim_ch];
     afc:	f640 129c 	movw	r2, #2460	; 0x99c
     b00:	f2c2 0200 	movt	r2, #8192	; 0x2000
     b04:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
     b08:	4019      	ands	r1, r3
	/* this is a NACK */
	if (status & TWIM_SR_STD_MASK) {
     b0a:	f411 6fa0 	tst.w	r1, #1280	; 0x500
     b0e:	d01a      	beq.n	b46 <twim_default_callback+0x5a>
		/*
		 * If we get a nak, clear the valid bit in cmdr,
		 * otherwise the command will be resent.
		 */
		transfer_status[twim_ch] = (status & TWIM_IER_ANAK) ?
     b10:	f401 7380 	and.w	r3, r1, #256	; 0x100
     b14:	2b00      	cmp	r3, #0
     b16:	bf0c      	ite	eq
     b18:	21fe      	moveq	r1, #254	; 0xfe
     b1a:	21fc      	movne	r1, #252	; 0xfc
     b1c:	f640 1288 	movw	r2, #2440	; 0x988
     b20:	f2c2 0200 	movt	r2, #8192	; 0x2000
     b24:	5411      	strb	r1, [r2, r0]
				TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim->TWIM_CMDR &= ~TWIM_CMDR_VALID;
     b26:	68e3      	ldr	r3, [r4, #12]
     b28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
     b2c:	60e1      	str	r1, [r4, #12]
		twim->TWIM_SCR = ~0UL;
     b2e:	f04f 32ff 	mov.w	r2, #4294967295
     b32:	62e2      	str	r2, [r4, #44]	; 0x2c
		twim->TWIM_IDR = ~0UL;
     b34:	6262      	str	r2, [r4, #36]	; 0x24
		twim_next[twim_ch] = false;
     b36:	f640 13ac 	movw	r3, #2476	; 0x9ac
     b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     b3e:	f04f 0100 	mov.w	r1, #0
     b42:	5419      	strb	r1, [r3, r0]
     b44:	bd10      	pop	{r4, pc}
	}
	/* This is a RXRDY */
	else if (status & TWIM_SR_RXRDY) {
     b46:	f011 0f01 	tst.w	r1, #1
     b4a:	d032      	beq.n	bb2 <twim_default_callback+0xc6>
		/* Get data from Receive Holding Register */
		*twim_rx_data[twim_ch] = twim->TWIM_RHR;
     b4c:	f640 1268 	movw	r2, #2408	; 0x968
     b50:	f2c2 0200 	movt	r2, #8192	; 0x2000
     b54:	6961      	ldr	r1, [r4, #20]
     b56:	b2c9      	uxtb	r1, r1
     b58:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
     b5c:	f803 1b01 	strb.w	r1, [r3], #1
		twim_rx_data[twim_ch]++;
     b60:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
		/* Decrease received bytes number */
		twim_rx_nb_bytes[twim_ch]--;
     b64:	f640 1178 	movw	r1, #2424	; 0x978
     b68:	f2c2 0100 	movt	r1, #8192	; 0x2000
     b6c:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
     b70:	f102 33ff 	add.w	r3, r2, #4294967295
     b74:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
		/* Receive complete */
		if (twim_rx_nb_bytes[twim_ch] == 0) {
     b78:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
     b7c:	2900      	cmp	r1, #0
     b7e:	d17c      	bne.n	c7a <twim_default_callback+0x18e>
			/* Finish the receive operation */
			twim->TWIM_IDR = TWIM_IDR_RXRDY;
     b80:	f04f 0201 	mov.w	r2, #1
     b84:	6262      	str	r2, [r4, #36]	; 0x24
			/* Set busy to false */
			twim_next[twim_ch] = false;
     b86:	f640 13ac 	movw	r3, #2476	; 0x9ac
     b8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     b8e:	f04f 0100 	mov.w	r1, #0
     b92:	5419      	strb	r1, [r3, r0]
#if TWIM_LOW_POWER_ENABLE
			twim->TWIM_SCR = TWIM_SCR_CCOMP;
     b94:	f04f 0208 	mov.w	r2, #8
     b98:	62e2      	str	r2, [r4, #44]	; 0x2c
			twim->TWIM_IER = TWIM_IER_CCOMP;
     b9a:	6222      	str	r2, [r4, #32]
			twim_it_mask[twim_ch] |= TWIM_IER_CCOMP;
     b9c:	f640 139c 	movw	r3, #2460	; 0x99c
     ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ba4:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
     ba8:	f041 0208 	orr.w	r2, r1, #8
     bac:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
     bb0:	bd10      	pop	{r4, pc}
#endif
		}
	}
	/* This is a TXRDY */
	else if (status & TWIM_SR_TXRDY) {
     bb2:	f011 0f02 	tst.w	r1, #2
     bb6:	d059      	beq.n	c6c <twim_default_callback+0x180>
		/* No more bytes to transmit */
		if (twim_tx_nb_bytes[twim_ch] == 0) {
     bb8:	f640 11c0 	movw	r1, #2496	; 0x9c0
     bbc:	f2c2 0100 	movt	r1, #8192	; 0x2000
     bc0:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
     bc4:	b9c2      	cbnz	r2, bf8 <twim_default_callback+0x10c>
			/* Finish the receive operation */
			twim->TWIM_IDR = TWIM_IDR_TXRDY;
     bc6:	f04f 0202 	mov.w	r2, #2
     bca:	6262      	str	r2, [r4, #36]	; 0x24
			/* Set busy to false */
			twim_next[twim_ch] = false;
     bcc:	f640 11ac 	movw	r1, #2476	; 0x9ac
     bd0:	f2c2 0100 	movt	r1, #8192	; 0x2000
     bd4:	f04f 0300 	mov.w	r3, #0
     bd8:	540b      	strb	r3, [r1, r0]
#if TWIM_LOW_POWER_ENABLE
			twim->TWIM_SCR = TWIM_SCR_CCOMP;
     bda:	f04f 0208 	mov.w	r2, #8
     bde:	62e2      	str	r2, [r4, #44]	; 0x2c
			twim->TWIM_IER = TWIM_IER_CCOMP;
     be0:	6222      	str	r2, [r4, #32]
			twim_it_mask[twim_ch] |= TWIM_IER_CCOMP;
     be2:	f640 119c 	movw	r1, #2460	; 0x99c
     be6:	f2c2 0100 	movt	r1, #8192	; 0x2000
     bea:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
     bee:	f043 0208 	orr.w	r2, r3, #8
     bf2:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
     bf6:	bd10      	pop	{r4, pc}
#endif
		} else {
			/* Put the byte in the Transmit Holding Register */
			twim->TWIM_THR = *twim_tx_data[twim_ch]++;
     bf8:	f640 128c 	movw	r2, #2444	; 0x98c
     bfc:	f2c2 0200 	movt	r2, #8192	; 0x2000
     c00:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
     c04:	f813 1b01 	ldrb.w	r1, [r3], #1
     c08:	61a1      	str	r1, [r4, #24]
     c0a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
			/* Decrease transmitted bytes number */
			twim_tx_nb_bytes[twim_ch]--;
     c0e:	f640 13c0 	movw	r3, #2496	; 0x9c0
     c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
     c16:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
     c1a:	f102 31ff 	add.w	r1, r2, #4294967295
     c1e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
			if (twim_tx_nb_bytes[twim_ch] == 0) {
     c22:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     c26:	bb43      	cbnz	r3, c7a <twim_default_callback+0x18e>
				/* Check for next transfer */
				if (twim_next[twim_ch]) {
     c28:	f640 12ac 	movw	r2, #2476	; 0x9ac
     c2c:	f2c2 0200 	movt	r2, #8192	; 0x2000
     c30:	5c11      	ldrb	r1, [r2, r0]
     c32:	b311      	cbz	r1, c7a <twim_default_callback+0x18e>
					twim_next[twim_ch] = false;
     c34:	f640 13ac 	movw	r3, #2476	; 0x9ac
     c38:	f2c2 0300 	movt	r3, #8192	; 0x2000
     c3c:	f04f 0200 	mov.w	r2, #0
     c40:	541a      	strb	r2, [r3, r0]
					twim_tx_nb_bytes[twim_ch] = twim_package[twim_ch]->length;
     c42:	f640 11b0 	movw	r1, #2480	; 0x9b0
     c46:	f2c2 0100 	movt	r1, #8192	; 0x2000
     c4a:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
     c4e:	68d9      	ldr	r1, [r3, #12]
     c50:	f640 12c0 	movw	r2, #2496	; 0x9c0
     c54:	f2c2 0200 	movt	r2, #8192	; 0x2000
     c58:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
					twim_tx_data[twim_ch] = twim_package[twim_ch]->buffer;
     c5c:	6899      	ldr	r1, [r3, #8]
     c5e:	f640 138c 	movw	r3, #2444	; 0x98c
     c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
     c66:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
     c6a:	bd10      	pop	{r4, pc}
				}
			}
		}
	}
#if TWIM_LOW_POWER_ENABLE
	else if (status & TWIM_SR_CCOMP) {
     c6c:	f011 0f08 	tst.w	r1, #8
     c70:	d003      	beq.n	c7a <twim_default_callback+0x18e>
		twim->TWIM_SCR = TWIM_SCR_CCOMP;
     c72:	f04f 0008 	mov.w	r0, #8
     c76:	62e0      	str	r0, [r4, #44]	; 0x2c
		twim->TWIM_IDR = TWIM_IDR_CCOMP;
     c78:	6260      	str	r0, [r4, #36]	; 0x24
     c7a:	bd10      	pop	{r4, pc}

00000c7c <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
     c7c:	b470      	push	{r4, r5, r6}
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);
     c7e:	fbb2 f2f1 	udiv	r2, r2, r1
     c82:	ea4f 0252 	mov.w	r2, r2, lsr #1

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     c86:	2aff      	cmp	r2, #255	; 0xff
     c88:	d91e      	bls.n	cc8 <twim_set_speed+0x4c>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     c8a:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     c8e:	2aff      	cmp	r2, #255	; 0xff
     c90:	d935      	bls.n	cfe <twim_set_speed+0x82>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     c92:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     c96:	2aff      	cmp	r2, #255	; 0xff
     c98:	d934      	bls.n	d04 <twim_set_speed+0x88>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     c9a:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     c9e:	2aff      	cmp	r2, #255	; 0xff
     ca0:	d933      	bls.n	d0a <twim_set_speed+0x8e>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     ca2:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     ca6:	2aff      	cmp	r2, #255	; 0xff
     ca8:	d932      	bls.n	d10 <twim_set_speed+0x94>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     caa:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     cae:	2aff      	cmp	r2, #255	; 0xff
     cb0:	d931      	bls.n	d16 <twim_set_speed+0x9a>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     cb2:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     cb6:	2aff      	cmp	r2, #255	; 0xff
     cb8:	d930      	bls.n	d1c <twim_set_speed+0xa0>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     cba:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     cbe:	2aff      	cmp	r2, #255	; 0xff
     cc0:	d92f      	bls.n	d22 <twim_set_speed+0xa6>
		/* divide f_prescaled value */
		f_prescaled /= 2;
	}

	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
     cc2:	f04f 00f8 	mov.w	r0, #248	; 0xf8
     cc6:	e018      	b.n	cfa <twim_set_speed+0x7e>
 */
status_code_t twim_set_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
     cc8:	f04f 0600 	mov.w	r6, #0
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
     ccc:	ea4f 0152 	mov.w	r1, r2, lsr #1
     cd0:	b2cd      	uxtb	r5, r1
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
			| TWIM_CWGR_STASTO(f_prescaled);
     cd2:	ea4f 4402 	mov.w	r4, r2, lsl #16
     cd6:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
     cda:	432c      	orrs	r4, r5
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
     cdc:	ea4f 6303 	mov.w	r3, r3, lsl #24
     ce0:	f003 6570 	and.w	r5, r3, #251658240	; 0xf000000
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_CWGR_EXP(cwgr_exp)
     ce4:	432c      	orrs	r4, r5
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
     ce6:	1a52      	subs	r2, r2, r1
     ce8:	ea4f 6102 	mov.w	r1, r2, lsl #24
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
     cec:	ea44 4311 	orr.w	r3, r4, r1, lsr #16
			| TWIM_CWGR_STASTO(f_prescaled);
     cf0:	ea43 7206 	orr.w	r2, r3, r6, lsl #28
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
     cf4:	6042      	str	r2, [r0, #4]
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
			| TWIM_CWGR_STASTO(f_prescaled);

	return STATUS_OK;
     cf6:	f04f 0000 	mov.w	r0, #0
     cfa:	b240      	sxtb	r0, r0
     cfc:	e014      	b.n	d28 <twim_set_speed+0xac>
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
		/* increase clock divider */
		cwgr_exp++;
     cfe:	f04f 0601 	mov.w	r6, #1
     d02:	e7e3      	b.n	ccc <twim_set_speed+0x50>
     d04:	f04f 0602 	mov.w	r6, #2
     d08:	e7e0      	b.n	ccc <twim_set_speed+0x50>
     d0a:	f04f 0603 	mov.w	r6, #3
     d0e:	e7dd      	b.n	ccc <twim_set_speed+0x50>
     d10:	f04f 0604 	mov.w	r6, #4
     d14:	e7da      	b.n	ccc <twim_set_speed+0x50>
     d16:	f04f 0605 	mov.w	r6, #5
     d1a:	e7d7      	b.n	ccc <twim_set_speed+0x50>
     d1c:	f04f 0606 	mov.w	r6, #6
     d20:	e7d4      	b.n	ccc <twim_set_speed+0x50>
     d22:	f04f 0607 	mov.w	r6, #7
     d26:	e7d1      	b.n	ccc <twim_set_speed+0x50>
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
			| TWIM_CWGR_STASTO(f_prescaled);

	return STATUS_OK;
}
     d28:	bc70      	pop	{r4, r5, r6}
     d2a:	4770      	bx	lr

00000d2c <twim_set_hsmode_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_hsmode_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
     d2c:	b470      	push	{r4, r5, r6}
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);
     d2e:	fbb2 f2f1 	udiv	r2, r2, r1
     d32:	ea4f 0252 	mov.w	r2, r2, lsr #1

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     d36:	2aff      	cmp	r2, #255	; 0xff
     d38:	d91e      	bls.n	d78 <twim_set_hsmode_speed+0x4c>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     d3a:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     d3e:	2aff      	cmp	r2, #255	; 0xff
     d40:	d935      	bls.n	dae <twim_set_hsmode_speed+0x82>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     d42:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     d46:	2aff      	cmp	r2, #255	; 0xff
     d48:	d934      	bls.n	db4 <twim_set_hsmode_speed+0x88>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     d4a:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     d4e:	2aff      	cmp	r2, #255	; 0xff
     d50:	d933      	bls.n	dba <twim_set_hsmode_speed+0x8e>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     d52:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     d56:	2aff      	cmp	r2, #255	; 0xff
     d58:	d932      	bls.n	dc0 <twim_set_hsmode_speed+0x94>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     d5a:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     d5e:	2aff      	cmp	r2, #255	; 0xff
     d60:	d931      	bls.n	dc6 <twim_set_hsmode_speed+0x9a>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     d62:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     d66:	2aff      	cmp	r2, #255	; 0xff
     d68:	d930      	bls.n	dcc <twim_set_hsmode_speed+0xa0>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     d6a:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     d6e:	2aff      	cmp	r2, #255	; 0xff
     d70:	d92f      	bls.n	dd2 <twim_set_hsmode_speed+0xa6>
		/* divide f_prescaled value */
		f_prescaled /= 2;
	}

	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
     d72:	f04f 00f8 	mov.w	r0, #248	; 0xf8
     d76:	e018      	b.n	daa <twim_set_hsmode_speed+0x7e>
 */
status_code_t twim_set_hsmode_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
     d78:	f04f 0600 	mov.w	r6, #0
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
     d7c:	ea4f 0152 	mov.w	r1, r2, lsr #1
     d80:	b2cd      	uxtb	r5, r1
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
			| TWIM_HSCWGR_STASTO(f_prescaled);
     d82:	ea4f 4402 	mov.w	r4, r2, lsl #16
     d86:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
     d8a:	432c      	orrs	r4, r5
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
     d8c:	ea4f 6303 	mov.w	r3, r3, lsl #24
     d90:	f003 6570 	and.w	r5, r3, #251658240	; 0xf000000
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_HSCWGR_EXP(cwgr_exp)
     d94:	432c      	orrs	r4, r5
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
     d96:	1a52      	subs	r2, r2, r1
     d98:	ea4f 6102 	mov.w	r1, r2, lsl #24
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
     d9c:	ea44 4311 	orr.w	r3, r4, r1, lsr #16
			| TWIM_HSCWGR_STASTO(f_prescaled);
     da0:	ea43 7206 	orr.w	r2, r3, r6, lsl #28
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
     da4:	6382      	str	r2, [r0, #56]	; 0x38
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
			| TWIM_HSCWGR_STASTO(f_prescaled);

	return STATUS_OK;
     da6:	f04f 0000 	mov.w	r0, #0
     daa:	b240      	sxtb	r0, r0
     dac:	e014      	b.n	dd8 <twim_set_hsmode_speed+0xac>
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
		/* increase clock divider */
		cwgr_exp++;
     dae:	f04f 0601 	mov.w	r6, #1
     db2:	e7e3      	b.n	d7c <twim_set_hsmode_speed+0x50>
     db4:	f04f 0602 	mov.w	r6, #2
     db8:	e7e0      	b.n	d7c <twim_set_hsmode_speed+0x50>
     dba:	f04f 0603 	mov.w	r6, #3
     dbe:	e7dd      	b.n	d7c <twim_set_hsmode_speed+0x50>
     dc0:	f04f 0604 	mov.w	r6, #4
     dc4:	e7da      	b.n	d7c <twim_set_hsmode_speed+0x50>
     dc6:	f04f 0605 	mov.w	r6, #5
     dca:	e7d7      	b.n	d7c <twim_set_hsmode_speed+0x50>
     dcc:	f04f 0606 	mov.w	r6, #6
     dd0:	e7d4      	b.n	d7c <twim_set_hsmode_speed+0x50>
     dd2:	f04f 0607 	mov.w	r6, #7
     dd6:	e7d1      	b.n	d7c <twim_set_hsmode_speed+0x50>
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
			| TWIM_HSCWGR_STASTO(f_prescaled);

	return STATUS_OK;
}
     dd8:	bc70      	pop	{r4, r5, r6}
     dda:	4770      	bx	lr

00000ddc <twim_set_config>:
 *
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_config(Twim *twim, struct twim_config *config)
{
     ddc:	b570      	push	{r4, r5, r6, lr}
     dde:	4605      	mov	r5, r0
     de0:	460c      	mov	r4, r1
	sysclk_enable_peripheral_clock(twim);
     de2:	f641 63fd 	movw	r3, #7933	; 0x1efd
     de6:	f2c0 0300 	movt	r3, #0
     dea:	4798      	blx	r3
	/* Enable master transfer */
	twim->TWIM_CR = TWIM_CR_MEN;
     dec:	f04f 0001 	mov.w	r0, #1
     df0:	6028      	str	r0, [r5, #0]
	/* Reset TWI */
	twim->TWIM_CR = TWIM_CR_SWRST;
     df2:	f04f 0180 	mov.w	r1, #128	; 0x80
     df6:	6029      	str	r1, [r5, #0]
	/* Clear SR */
	twim->TWIM_SCR = ~0UL;
     df8:	f04f 32ff 	mov.w	r2, #4294967295
     dfc:	62ea      	str	r2, [r5, #44]	; 0x2c

	if (config->smbus) {
     dfe:	7ba3      	ldrb	r3, [r4, #14]
     e00:	b12b      	cbz	r3, e0e <twim_set_config+0x32>
		/* Enable SMBUS Transfer */
		twim->TWIM_CR = TWIM_CR_SMEN;
     e02:	f04f 0010 	mov.w	r0, #16
     e06:	6028      	str	r0, [r5, #0]
		twim->TWIM_SMBTR = (uint32_t) -1;
     e08:	f04f 31ff 	mov.w	r1, #4294967295
     e0c:	60a9      	str	r1, [r5, #8]
	}

	/* Select the speed */
	if (config->speed) {
     e0e:	6861      	ldr	r1, [r4, #4]
     e10:	b149      	cbz	r1, e26 <twim_set_config+0x4a>
		if (twim_set_speed(twim, config->speed, config->twim_clk,
     e12:	4628      	mov	r0, r5
     e14:	6822      	ldr	r2, [r4, #0]
     e16:	7b23      	ldrb	r3, [r4, #12]
     e18:	f640 467d 	movw	r6, #3197	; 0xc7d
     e1c:	f2c0 0600 	movt	r6, #0
     e20:	47b0      	blx	r6
     e22:	2800      	cmp	r0, #0
     e24:	d15d      	bne.n	ee2 <twim_set_config+0x106>
				config->data_setup_cycles) != STATUS_OK) {
			return ERR_INVALID_ARG;
		}
	}
	if (config->hsmode_speed) {
     e26:	68a1      	ldr	r1, [r4, #8]
     e28:	b149      	cbz	r1, e3e <twim_set_config+0x62>
		if (twim_set_hsmode_speed(twim, config->hsmode_speed, config->twim_clk,
     e2a:	4628      	mov	r0, r5
     e2c:	6822      	ldr	r2, [r4, #0]
     e2e:	7b63      	ldrb	r3, [r4, #13]
     e30:	f640 562d 	movw	r6, #3373	; 0xd2d
     e34:	f2c0 0600 	movt	r6, #0
     e38:	47b0      	blx	r6
     e3a:	2800      	cmp	r0, #0
     e3c:	d154      	bne.n	ee8 <twim_set_config+0x10c>
		}
	}

	/* Set clock and data slew rate */
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
			TWIM_SRR_FILTER(2) : TWIM_SRR_FILTER(3))
     e3e:	f244 233f 	movw	r3, #16959	; 0x423f
     e42:	f2c0 030f 	movt	r3, #15
     e46:	6862      	ldr	r2, [r4, #4]
     e48:	429a      	cmp	r2, r3
     e4a:	bf8c      	ite	hi
     e4c:	f04f 5240 	movhi.w	r2, #805306368	; 0x30000000
     e50:	f04f 5200 	movls.w	r2, #536870912	; 0x20000000
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
     e54:	7c60      	ldrb	r0, [r4, #17]
     e56:	ea4f 2100 	mov.w	r1, r0, lsl #8
     e5a:	f401 7140 	and.w	r1, r1, #768	; 0x300
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
     e5e:	7ca3      	ldrb	r3, [r4, #18]
     e60:	f003 0007 	and.w	r0, r3, #7

	/* Set clock and data slew rate */
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
			TWIM_SRR_FILTER(2) : TWIM_SRR_FILTER(3))
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
     e64:	4301      	orrs	r1, r0
     e66:	7c23      	ldrb	r3, [r4, #16]
     e68:	ea4f 4003 	mov.w	r0, r3, lsl #16
     e6c:	f400 20e0 	and.w	r0, r0, #458752	; 0x70000
	}

	/* Set clock and data slew rate */
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
			TWIM_SRR_FILTER(2) : TWIM_SRR_FILTER(3))
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
     e70:	7be3      	ldrb	r3, [r4, #15]
     e72:	ea4f 6303 	mov.w	r3, r3, lsl #24
     e76:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
     e7a:	4318      	orrs	r0, r3
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
     e7c:	4301      	orrs	r1, r0
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
     e7e:	4311      	orrs	r1, r2
			return ERR_INVALID_ARG;
		}
	}

	/* Set clock and data slew rate */
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
     e80:	63e9      	str	r1, [r5, #60]	; 0x3c
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
			| TWIM_HSSRR_CLSLEW(config->hs_clock_slew_limit)
			| TWIM_HSSRR_CLDRIVEL(config->hs_clock_drive_strength_low)
			| TWIM_HSSRR_CLDRIVEH(config->hs_clock_drive_strength_high)
			| TWIM_HSSRR_DASLEW(config->hs_data_slew_limit)
			| TWIM_HSSRR_DADRIVEL(config->hs_data_drive_strength_low);
     e82:	7de2      	ldrb	r2, [r4, #23]
     e84:	f002 0307 	and.w	r3, r2, #7
     e88:	f043 5080 	orr.w	r0, r3, #268435456	; 0x10000000
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
			| TWIM_HSSRR_CLSLEW(config->hs_clock_slew_limit)
			| TWIM_HSSRR_CLDRIVEL(config->hs_clock_drive_strength_low)
     e8c:	7d61      	ldrb	r1, [r4, #21]
     e8e:	ea4f 4201 	mov.w	r2, r1, lsl #16
     e92:	f402 21e0 	and.w	r1, r2, #458752	; 0x70000
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
			| TWIM_HSSRR_CLSLEW(config->hs_clock_slew_limit)
     e96:	7ce3      	ldrb	r3, [r4, #19]
     e98:	ea4f 6203 	mov.w	r2, r3, lsl #24
     e9c:	f002 7340 	and.w	r3, r2, #50331648	; 0x3000000
			| TWIM_HSSRR_CLDRIVEL(config->hs_clock_drive_strength_low)
     ea0:	ea41 0203 	orr.w	r2, r1, r3
			| TWIM_HSSRR_CLDRIVEH(config->hs_clock_drive_strength_high)
     ea4:	7d21      	ldrb	r1, [r4, #20]
     ea6:	ea4f 5301 	mov.w	r3, r1, lsl #20
     eaa:	f403 1140 	and.w	r1, r3, #3145728	; 0x300000
     eae:	430a      	orrs	r2, r1
			| TWIM_HSSRR_DASLEW(config->hs_data_slew_limit)
     eb0:	7da3      	ldrb	r3, [r4, #22]
     eb2:	ea4f 2103 	mov.w	r1, r3, lsl #8
     eb6:	f401 7340 	and.w	r3, r1, #768	; 0x300
     eba:	431a      	orrs	r2, r3
			| TWIM_HSSRR_DADRIVEL(config->hs_data_drive_strength_low);
     ebc:	4310      	orrs	r0, r2
			TWIM_SRR_FILTER(2) : TWIM_SRR_FILTER(3))
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
     ebe:	6428      	str	r0, [r5, #64]	; 0x40
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
     ec0:	f640 2140 	movw	r1, #2624	; 0xa40
     ec4:	f2c2 0100 	movt	r1, #8192	; 0x2000
     ec8:	f04f 0300 	mov.w	r3, #0
     ecc:	700b      	strb	r3, [r1, #0]
     ece:	704b      	strb	r3, [r1, #1]
     ed0:	708b      	strb	r3, [r1, #2]
     ed2:	70cb      	strb	r3, [r1, #3]
     ed4:	710b      	strb	r3, [r1, #4]
     ed6:	714b      	strb	r3, [r1, #5]
     ed8:	718b      	strb	r3, [r1, #6]
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
     eda:	f04f 0201 	mov.w	r2, #1
     ede:	71ca      	strb	r2, [r1, #7]

#if TWIM_LOW_POWER_ENABLE
	sleepmgr_init();
#endif

	return STATUS_OK;
     ee0:	e004      	b.n	eec <twim_set_config+0x110>

	/* Select the speed */
	if (config->speed) {
		if (twim_set_speed(twim, config->speed, config->twim_clk,
				config->data_setup_cycles) != STATUS_OK) {
			return ERR_INVALID_ARG;
     ee2:	f04f 03f8 	mov.w	r3, #248	; 0xf8
     ee6:	e001      	b.n	eec <twim_set_config+0x110>
		}
	}
	if (config->hsmode_speed) {
		if (twim_set_hsmode_speed(twim, config->hsmode_speed, config->twim_clk,
				config->hsmode_data_setup_cycles) != STATUS_OK) {
			return ERR_INVALID_ARG;
     ee8:	f04f 03f8 	mov.w	r3, #248	; 0xf8
#if TWIM_LOW_POWER_ENABLE
	sleepmgr_init();
#endif

	return STATUS_OK;
}
     eec:	b258      	sxtb	r0, r3
     eee:	bd70      	pop	{r4, r5, r6, pc}

00000ef0 <twim_enable_interrupt>:
 * \param interrupt_source  The TWI interrupt to be enabled
 */
void twim_enable_interrupt(Twim *twim, uint32_t interrupt_source)
{
	/* Set the interrupt flags */
	twim->TWIM_IER = interrupt_source;
     ef0:	6201      	str	r1, [r0, #32]
     ef2:	4770      	bx	lr

00000ef4 <twim_get_status>:
 *
 * \param twim   Base address of the TWIM
 */
uint32_t twim_get_status(Twim *twim)
{
	return twim->TWIM_SR;
     ef4:	69c0      	ldr	r0, [r0, #28]
}
     ef6:	4770      	bx	lr

00000ef8 <twi_master_write>:
 *
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twi_master_write(Twim *twim, struct twim_package *package)
{
     ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     efc:	4606      	mov	r6, r0
     efe:	460c      	mov	r4, r1
	uint32_t twim_ch = find_twim_channel_num(twim);
     f00:	f640 23b5 	movw	r3, #2741	; 0xab5
     f04:	f2c0 0300 	movt	r3, #0
     f08:	4798      	blx	r3
     f0a:	4605      	mov	r5, r0

	/* Reset the TWIM module to clear the THR register */
	twim->TWIM_CR = TWIM_CR_MEN;
     f0c:	f04f 0001 	mov.w	r0, #1
     f10:	6030      	str	r0, [r6, #0]
	twim->TWIM_CR = TWIM_CR_SWRST;
     f12:	f04f 0180 	mov.w	r1, #128	; 0x80
     f16:	6031      	str	r1, [r6, #0]
	twim->TWIM_CR = TWIM_CR_MDIS;
     f18:	f04f 0202 	mov.w	r2, #2
     f1c:	6032      	str	r2, [r6, #0]
	/* Clear the interrupt flags */
	twim->TWIM_IDR = ~0UL;
     f1e:	f04f 37ff 	mov.w	r7, #4294967295
     f22:	6277      	str	r7, [r6, #36]	; 0x24
	/* Clear the status flags */
	twim->TWIM_SCR = ~0UL;
     f24:	62f7      	str	r7, [r6, #44]	; 0x2c
	/* Initialize bus transfer status */
	transfer_status[twim_ch] = TWI_SUCCESS;
     f26:	f04f 0300 	mov.w	r3, #0
     f2a:	f640 1088 	movw	r0, #2440	; 0x988
     f2e:	f2c2 0000 	movt	r0, #8192	; 0x2000
     f32:	5543      	strb	r3, [r0, r5]
	/* Mask NACK and TXRDY interrupts */
	twim_it_mask[twim_ch] = TWIM_IER_STD_MASK | TWIM_IER_TXRDY;
     f34:	f640 129c 	movw	r2, #2460	; 0x99c
     f38:	f2c2 0200 	movt	r2, #8192	; 0x2000
     f3c:	f240 5102 	movw	r1, #1282	; 0x502
     f40:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
	/* Set next transfer to false */
	twim_next[twim_ch] = false;
     f44:	f640 17ac 	movw	r7, #2476	; 0x9ac
     f48:	f2c2 0700 	movt	r7, #8192	; 0x2000
     f4c:	557b      	strb	r3, [r7, r5]

	/* Check if internal address access is performed */
	if (package->addr_length) {
     f4e:	79e3      	ldrb	r3, [r4, #7]
     f50:	b1db      	cbz	r3, f8a <twi_master_write+0x92>
		/* Selection of first valid byte of the address */
		twim_tx_data[twim_ch] = package->addr;
     f52:	f104 0004 	add.w	r0, r4, #4
     f56:	f640 128c 	movw	r2, #2444	; 0x98c
     f5a:	f2c2 0200 	movt	r2, #8192	; 0x2000
     f5e:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
		/* Set the number of bytes to transmit */
		twim_tx_nb_bytes[twim_ch] = package->addr_length;
     f62:	f640 11c0 	movw	r1, #2496	; 0x9c0
     f66:	f2c2 0100 	movt	r1, #8192	; 0x2000
     f6a:	f841 3025 	str.w	r3, [r1, r5, lsl #2]
		/* Set next transfer to true */
		twim_next[twim_ch] = true;
     f6e:	f640 13ac 	movw	r3, #2476	; 0x9ac
     f72:	f2c2 0300 	movt	r3, #8192	; 0x2000
     f76:	f04f 0701 	mov.w	r7, #1
     f7a:	555f      	strb	r7, [r3, r5]
		/* Set the number of bytes & address for next transfer */
		twim_package[twim_ch] = package;
     f7c:	f640 10b0 	movw	r0, #2480	; 0x9b0
     f80:	f2c2 0000 	movt	r0, #8192	; 0x2000
     f84:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
     f88:	e00d      	b.n	fa6 <twi_master_write+0xae>
	} else {
		/* Get a pointer to applicative data */
		twim_tx_data[twim_ch] = package->buffer;
     f8a:	68a0      	ldr	r0, [r4, #8]
     f8c:	f640 128c 	movw	r2, #2444	; 0x98c
     f90:	f2c2 0200 	movt	r2, #8192	; 0x2000
     f94:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
		/* Get a copy of nb bytes to write */
		twim_tx_nb_bytes[twim_ch] = package->length;
     f98:	68e1      	ldr	r1, [r4, #12]
     f9a:	f640 17c0 	movw	r7, #2496	; 0x9c0
     f9e:	f2c2 0700 	movt	r7, #8192	; 0x2000
     fa2:	f847 1025 	str.w	r1, [r7, r5, lsl #2]
	}

	/* Initiate the transfer to send the data */
	twim->TWIM_CMDR = (package->high_speed ? (TWIM_CMDR_HS |
			TWIM_CMDR_HSMCODE(package->high_speed_code)) : 0)
			| TWIM_CMDR_SADR(package->chip)
     fa6:	7c62      	ldrb	r2, [r4, #17]
     fa8:	b13a      	cbz	r2, fba <twi_master_write+0xc2>
		twim_tx_nb_bytes[twim_ch] = package->length;
	}

	/* Initiate the transfer to send the data */
	twim->TWIM_CMDR = (package->high_speed ? (TWIM_CMDR_HS |
			TWIM_CMDR_HSMCODE(package->high_speed_code)) : 0)
     faa:	7ca3      	ldrb	r3, [r4, #18]
     fac:	ea4f 7703 	mov.w	r7, r3, lsl #28
     fb0:	f007 40e0 	and.w	r0, r7, #1879048192	; 0x70000000
			| TWIM_CMDR_SADR(package->chip)
     fb4:	f040 6180 	orr.w	r1, r0, #67108864	; 0x4000000
     fb8:	e001      	b.n	fbe <twi_master_write+0xc6>
     fba:	f04f 0100 	mov.w	r1, #0
     fbe:	6822      	ldr	r2, [r4, #0]
     fc0:	f240 73fe 	movw	r3, #2046	; 0x7fe
     fc4:	ea03 0742 	and.w	r7, r3, r2, lsl #1
			| TWIM_CMDR_NBYTES(package->length + package->addr_length)
     fc8:	79e0      	ldrb	r0, [r4, #7]
     fca:	68e2      	ldr	r2, [r4, #12]
     fcc:	1883      	adds	r3, r0, r2
     fce:	ea4f 4003 	mov.w	r0, r3, lsl #16
     fd2:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
			| TWIM_CMDR_VALID
			| TWIM_CMDR_START
			| TWIM_CMDR_STOP
			| (package->ten_bit ? TWIM_CMDR_TENBIT : 0);
     fd6:	7c24      	ldrb	r4, [r4, #16]
     fd8:	2c00      	cmp	r4, #0
     fda:	bf14      	ite	ne
     fdc:	f44f 6200 	movne.w	r2, #2048	; 0x800
     fe0:	2200      	moveq	r2, #0
	}

	/* Initiate the transfer to send the data */
	twim->TWIM_CMDR = (package->high_speed ? (TWIM_CMDR_HS |
			TWIM_CMDR_HSMCODE(package->high_speed_code)) : 0)
			| TWIM_CMDR_SADR(package->chip)
     fe2:	f447 4760 	orr.w	r7, r7, #57344	; 0xe000
			| TWIM_CMDR_NBYTES(package->length + package->addr_length)
     fe6:	4307      	orrs	r7, r0
			| TWIM_CMDR_VALID
			| TWIM_CMDR_START
			| TWIM_CMDR_STOP
			| (package->ten_bit ? TWIM_CMDR_TENBIT : 0);
     fe8:	430f      	orrs	r7, r1
     fea:	4317      	orrs	r7, r2
		/* Get a copy of nb bytes to write */
		twim_tx_nb_bytes[twim_ch] = package->length;
	}

	/* Initiate the transfer to send the data */
	twim->TWIM_CMDR = (package->high_speed ? (TWIM_CMDR_HS |
     fec:	60f7      	str	r7, [r6, #12]
			| TWIM_CMDR_START
			| TWIM_CMDR_STOP
			| (package->ten_bit ? TWIM_CMDR_TENBIT : 0);

	/* Update IMR through IER */
	twim->TWIM_IER = twim_it_mask[twim_ch];
     fee:	f640 119c 	movw	r1, #2460	; 0x99c
     ff2:	f2c2 0100 	movt	r1, #8192	; 0x2000
     ff6:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
     ffa:	6233      	str	r3, [r6, #32]
	/* Enable master transfer */
	twim->TWIM_CR = TWIM_CR_MEN;
     ffc:	f04f 0001 	mov.w	r0, #1
    1000:	6030      	str	r0, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1002:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1006:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1008:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    100c:	f240 0244 	movw	r2, #68	; 0x44
    1010:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1014:	f04f 0700 	mov.w	r7, #0
    1018:	7017      	strb	r7, [r2, #0]
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    101a:	f640 2340 	movw	r3, #2624	; 0xa40
    101e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1022:	7899      	ldrb	r1, [r3, #2]
    1024:	f101 0101 	add.w	r1, r1, #1
    1028:	7099      	strb	r1, [r3, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    102a:	2c00      	cmp	r4, #0
    102c:	d138      	bne.n	10a0 <__stack_size__+0xa0>
		cpu_irq_enable();
    102e:	f240 0044 	movw	r0, #68	; 0x44
    1032:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1036:	f04f 0401 	mov.w	r4, #1
    103a:	7004      	strb	r4, [r0, #0]
    103c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1040:	b662      	cpsie	i
    1042:	e02d      	b.n	10a0 <__stack_size__+0xa0>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1044:	b672      	cpsid	i
    1046:	f3bf 8f5f 	dmb	sy
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    104a:	f04f 0300 	mov.w	r3, #0
    104e:	7023      	strb	r3, [r4, #0]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    1050:	f640 2140 	movw	r1, #2624	; 0xa40
    1054:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1058:	7808      	ldrb	r0, [r1, #0]
    105a:	b968      	cbnz	r0, 1078 <__stack_size__+0x78>
    105c:	f640 2340 	movw	r3, #2624	; 0xa40
    1060:	f2c2 0300 	movt	r3, #8192	; 0x2000
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
    1064:	f04f 0100 	mov.w	r1, #0
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    1068:	f101 0101 	add.w	r1, r1, #1
    106c:	b2c9      	uxtb	r1, r1

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    106e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    1072:	2a00      	cmp	r2, #0
    1074:	d0f8      	beq.n	1068 <__stack_size__+0x68>
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    1076:	b931      	cbnz	r1, 1086 <__stack_size__+0x86>
		cpu_irq_enable();
    1078:	f04f 0101 	mov.w	r1, #1
    107c:	7021      	strb	r1, [r4, #0]
    107e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1082:	b662      	cpsie	i
    1084:	e01c      	b.n	10c0 <__stack_size__+0xc0>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1086:	b672      	cpsid	i
    1088:	f3bf 8f5f 	dmb	sy

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
    108c:	f04f 0000 	mov.w	r0, #0
    1090:	7020      	strb	r0, [r4, #0]

	/* Enter the sleep mode. */
	bpm_sleep(BPM, sleep_mode);
    1092:	4648      	mov	r0, r9
    1094:	f642 639d 	movw	r3, #11933	; 0x2e9d
    1098:	f2c0 0300 	movt	r3, #0
    109c:	4798      	blx	r3
    109e:	e00f      	b.n	10c0 <__stack_size__+0xc0>
	/* Send data */
#if TWIM_LOW_POWER_ENABLE
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_1);
	while (!(transfer_status[twim_ch])
    10a0:	f640 1788 	movw	r7, #2440	; 0x988
    10a4:	f2c2 0700 	movt	r7, #8192	; 0x2000
			&& !(twim_get_status(twim) & TWIM_SR_IDLE)) {
    10a8:	f640 68f5 	movw	r8, #3829	; 0xef5
    10ac:	f2c0 0800 	movt	r8, #0
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    10b0:	f240 0444 	movw	r4, #68	; 0x44
    10b4:	f2c2 0400 	movt	r4, #8192	; 0x2000
    10b8:	f04f 0900 	mov.w	r9, #0
    10bc:	f2c4 090f 	movt	r9, #16399	; 0x400f
	/* Enable master transfer */
	twim->TWIM_CR = TWIM_CR_MEN;
	/* Send data */
#if TWIM_LOW_POWER_ENABLE
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_1);
	while (!(transfer_status[twim_ch])
    10c0:	5d7a      	ldrb	r2, [r7, r5]
    10c2:	b922      	cbnz	r2, 10ce <__stack_size__+0xce>
			&& !(twim_get_status(twim) & TWIM_SR_IDLE)) {
    10c4:	4630      	mov	r0, r6
    10c6:	47c0      	blx	r8
    10c8:	f010 0f10 	tst.w	r0, #16
    10cc:	d0ba      	beq.n	1044 <__stack_size__+0x44>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    10ce:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    10d2:	b672      	cpsid	i
    10d4:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    10d8:	f240 0344 	movw	r3, #68	; 0x44
    10dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    10e0:	f04f 0100 	mov.w	r1, #0
    10e4:	7019      	strb	r1, [r3, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    10e6:	f640 2240 	movw	r2, #2624	; 0xa40
    10ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
    10ee:	7893      	ldrb	r3, [r2, #2]
    10f0:	f103 31ff 	add.w	r1, r3, #4294967295
    10f4:	7091      	strb	r1, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    10f6:	b948      	cbnz	r0, 110c <__stack_size__+0x10c>
		cpu_irq_enable();
    10f8:	f240 0044 	movw	r0, #68	; 0x44
    10fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1100:	f04f 0201 	mov.w	r2, #1
    1104:	7002      	strb	r2, [r0, #0]
    1106:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    110a:	b662      	cpsie	i
			&& !(twim_get_status(twim) & TWIM_SR_IDLE)) {
	}
#endif

	/* Disable master transfer */
	twim->TWIM_CR = TWIM_CR_MDIS;
    110c:	f04f 0302 	mov.w	r3, #2
    1110:	6033      	str	r3, [r6, #0]
	/* Check for nack */
	if (transfer_status[twim_ch] == TWI_RECEIVE_NACK
    1112:	f640 1188 	movw	r1, #2440	; 0x988
    1116:	f2c2 0100 	movt	r1, #8192	; 0x2000
    111a:	5d48      	ldrb	r0, [r1, r5]
    111c:	b242      	sxtb	r2, r0
    111e:	f112 0f04 	cmn.w	r2, #4
    1122:	d00b      	beq.n	113c <__stack_size__+0x13c>
			|| transfer_status[twim_ch] == TWI_ARBITRATION_LOST) {
    1124:	f640 1388 	movw	r3, #2440	; 0x988
    1128:	f2c2 0300 	movt	r3, #8192	; 0x2000
    112c:	5d59      	ldrb	r1, [r3, r5]
    112e:	b248      	sxtb	r0, r1
		return ERR_IO_ERROR;
    1130:	f110 0f02 	cmn.w	r0, #2
    1134:	bf0c      	ite	eq
    1136:	22ff      	moveq	r2, #255	; 0xff
    1138:	2200      	movne	r2, #0
    113a:	e001      	b.n	1140 <__stack_size__+0x140>
    113c:	f04f 02ff 	mov.w	r2, #255	; 0xff
	}
	return STATUS_OK;
}
    1140:	b250      	sxtb	r0, r2
    1142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1146:	bf00      	nop

00001148 <twim_set_callback>:
 * \param callback   Callback function pointer
 * \param irq_level  Interrupt level
 */
void twim_set_callback(Twim *twim, uint32_t interrupt_source,
	twim_callback_t callback, uint8_t irq_level)
{
    1148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    114c:	4604      	mov	r4, r0
    114e:	460e      	mov	r6, r1
    1150:	4690      	mov	r8, r2
    1152:	461f      	mov	r7, r3
	uint32_t twim_ch = find_twim_channel_num(twim);
    1154:	f640 23b5 	movw	r3, #2741	; 0xab5
    1158:	f2c0 0300 	movt	r3, #0
    115c:	4798      	blx	r3
	uint32_t irq_line = 0;

#if defined(ID_TWIM3)
	if (twim == TWIM3) {
    115e:	f44f 4540 	mov.w	r5, #49152	; 0xc000
    1162:	f2c4 0507 	movt	r5, #16391	; 0x4007
    1166:	42ac      	cmp	r4, r5
    1168:	d00e      	beq.n	1188 <twim_set_callback+0x40>
		irq_line = TWIM3_IRQn;
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
    116a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    116e:	f2c4 0107 	movt	r1, #16391	; 0x4007
    1172:	428c      	cmp	r4, r1
    1174:	d011      	beq.n	119a <twim_set_callback+0x52>
		irq_line = TWIM2_IRQn;
	}
#endif
#if defined(ID_TWIM1)
	if (twim == TWIM1) {
    1176:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    117a:	f2c4 0201 	movt	r2, #16385	; 0x4001
    117e:	4294      	cmp	r4, r2
    1180:	d04f      	beq.n	1222 <twim_set_callback+0xda>
 */
void twim_set_callback(Twim *twim, uint32_t interrupt_source,
	twim_callback_t callback, uint8_t irq_level)
{
	uint32_t twim_ch = find_twim_channel_num(twim);
	uint32_t irq_line = 0;
    1182:	f04f 0500 	mov.w	r5, #0
    1186:	e001      	b.n	118c <twim_set_callback+0x44>

#if defined(ID_TWIM3)
	if (twim == TWIM3) {
		irq_line = TWIM3_IRQn;
    1188:	f04f 054e 	mov.w	r5, #78	; 0x4e
	if (twim == TWIM1) {
		irq_line = TWIM1_IRQn;
	}
#endif
#if defined(ID_TWIM0)
	if (twim == TWIM0) {
    118c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1190:	f2c4 0101 	movt	r1, #16385	; 0x4001
    1194:	428c      	cmp	r4, r1
    1196:	d102      	bne.n	119e <twim_set_callback+0x56>
    1198:	e030      	b.n	11fc <twim_set_callback+0xb4>
		irq_line = TWIM3_IRQn;
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
		irq_line = TWIM2_IRQn;
    119a:	f04f 054d 	mov.w	r5, #77	; 0x4d
#if defined(ID_TWIM0)
	if (twim == TWIM0) {
		irq_line = TWIM0_IRQn;
	}
#endif
	twim_callback_pointer[twim_ch] = callback;
    119e:	f640 2394 	movw	r3, #2708	; 0xa94
    11a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    11a6:	f843 8020 	str.w	r8, [r3, r0, lsl #2]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    11aa:	462a      	mov	r2, r5
    11ac:	ea4f 1055 	mov.w	r0, r5, lsr #5
    11b0:	f005 051f 	and.w	r5, r5, #31
    11b4:	f04f 0101 	mov.w	r1, #1
    11b8:	fa01 f505 	lsl.w	r5, r1, r5
    11bc:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    11c0:	f2ce 0300 	movt	r3, #57344	; 0xe000
    11c4:	f100 0160 	add.w	r1, r0, #96	; 0x60
    11c8:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    11cc:	ea4f 1707 	mov.w	r7, r7, lsl #4
    11d0:	b2ff      	uxtb	r7, r7
    11d2:	f102 4360 	add.w	r3, r2, #3758096384	; 0xe0000000
    11d6:	f503 4161 	add.w	r1, r3, #57600	; 0xe100
    11da:	f881 7300 	strb.w	r7, [r1, #768]	; 0x300
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
    11de:	f44f 4261 	mov.w	r2, #57600	; 0xe100
    11e2:	f2ce 0200 	movt	r2, #57344	; 0xe000
    11e6:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
	NVIC_ClearPendingIRQ((IRQn_Type)irq_line);
	NVIC_SetPriority((IRQn_Type)irq_line, irq_level);
	NVIC_EnableIRQ((IRQn_Type)irq_line);
	twim_enable_interrupt(twim, interrupt_source);
    11ea:	4620      	mov	r0, r4
    11ec:	4631      	mov	r1, r6
    11ee:	f640 63f1 	movw	r3, #3825	; 0xef1
    11f2:	f2c0 0300 	movt	r3, #0
    11f6:	4798      	blx	r3
    11f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#if defined(ID_TWIM0)
	if (twim == TWIM0) {
		irq_line = TWIM0_IRQn;
	}
#endif
	twim_callback_pointer[twim_ch] = callback;
    11fc:	f640 2294 	movw	r2, #2708	; 0xa94
    1200:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1204:	f842 8020 	str.w	r8, [r2, r0, lsl #2]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    1208:	f44f 4061 	mov.w	r0, #57600	; 0xe100
    120c:	f2ce 0000 	movt	r0, #57344	; 0xe000
    1210:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
    1214:	f8c0 5184 	str.w	r5, [r0, #388]	; 0x184
    1218:	f04f 0001 	mov.w	r0, #1
    121c:	f04f 023d 	mov.w	r2, #61	; 0x3d
    1220:	e7d4      	b.n	11cc <twim_set_callback+0x84>
    1222:	f640 2394 	movw	r3, #2708	; 0xa94
    1226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    122a:	f843 8020 	str.w	r8, [r3, r0, lsl #2]
    122e:	f44f 4061 	mov.w	r0, #57600	; 0xe100
    1232:	f2ce 0000 	movt	r0, #57344	; 0xe000
    1236:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
    123a:	f8c0 5184 	str.w	r5, [r0, #388]	; 0x184
    123e:	f04f 0001 	mov.w	r0, #1
    1242:	f04f 023f 	mov.w	r2, #63	; 0x3f
    1246:	e7c1      	b.n	11cc <twim_set_callback+0x84>

00001248 <TWIM0_Handler>:
	twim_enable_interrupt(twim, interrupt_source);
}

#if defined(ID_TWIM0)
void TWIM0_Handler(void)
{
    1248:	b508      	push	{r3, lr}
	twim_callback_pointer[0](TWIM0);
    124a:	f640 2394 	movw	r3, #2708	; 0xa94
    124e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1252:	6819      	ldr	r1, [r3, #0]
    1254:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    1258:	f2c4 0001 	movt	r0, #16385	; 0x4001
    125c:	4788      	blx	r1
    125e:	bd08      	pop	{r3, pc}

00001260 <TWIM1_Handler>:
}
#endif

#if defined(ID_TWIM1)
void TWIM1_Handler(void)
{
    1260:	b508      	push	{r3, lr}
	twim_callback_pointer[1](TWIM1);
    1262:	f640 2394 	movw	r3, #2708	; 0xa94
    1266:	f2c2 0300 	movt	r3, #8192	; 0x2000
    126a:	6859      	ldr	r1, [r3, #4]
    126c:	f44f 4040 	mov.w	r0, #49152	; 0xc000
    1270:	f2c4 0001 	movt	r0, #16385	; 0x4001
    1274:	4788      	blx	r1
    1276:	bd08      	pop	{r3, pc}

00001278 <TWIM2_Handler>:
}
#endif

#if defined(ID_TWIM2)
void TWIM2_Handler(void)
{
    1278:	b508      	push	{r3, lr}
	twim_callback_pointer[2](TWIM2);
    127a:	f640 2394 	movw	r3, #2708	; 0xa94
    127e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1282:	6899      	ldr	r1, [r3, #8]
    1284:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    1288:	f2c4 0007 	movt	r0, #16391	; 0x4007
    128c:	4788      	blx	r1
    128e:	bd08      	pop	{r3, pc}

00001290 <TWIM3_Handler>:
}
#endif

#if defined(ID_TWIM3)
void TWIM3_Handler(void)
{
    1290:	b508      	push	{r3, lr}
	twim_callback_pointer[3](TWIM3);
    1292:	f640 2394 	movw	r3, #2708	; 0xa94
    1296:	f2c2 0300 	movt	r3, #8192	; 0x2000
    129a:	68d9      	ldr	r1, [r3, #12]
    129c:	f44f 4040 	mov.w	r0, #49152	; 0xc000
    12a0:	f2c4 0007 	movt	r0, #16391	; 0x4007
    12a4:	4788      	blx	r1
    12a6:	bd08      	pop	{r3, pc}

000012a8 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
    12a8:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
    12aa:	ea4f 1301 	mov.w	r3, r1, lsl #4
    12ae:	4293      	cmp	r3, r2
    12b0:	d910      	bls.n	12d4 <usart_set_async_baudrate+0x2c>
    12b2:	e020      	b.n	12f6 <usart_set_async_baudrate+0x4e>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
    12b4:	6841      	ldr	r1, [r0, #4]
    12b6:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
    12ba:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
    12bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    12c0:	6202      	str	r2, [r0, #32]

	return 0;
    12c2:	f04f 0000 	mov.w	r0, #0
    12c6:	e029      	b.n	131c <usart_set_async_baudrate+0x74>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
    12c8:	f04f 0001 	mov.w	r0, #1
    12cc:	e026      	b.n	131c <usart_set_async_baudrate+0x74>
    12ce:	f04f 0001 	mov.w	r0, #1
    12d2:	e023      	b.n	131c <usart_set_async_baudrate+0x74>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
    12d4:	ea4f 04c2 	mov.w	r4, r2, lsl #3
    12d8:	eb04 0253 	add.w	r2, r4, r3, lsr #1
    12dc:	fbb2 f3f3 	udiv	r3, r2, r3
	cd = cd_fp >> 3;
    12e0:	ea4f 02d3 	mov.w	r2, r3, lsr #3
	fp = cd_fp & 0x07;
    12e4:	f003 0307 	and.w	r3, r3, #7
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
    12e8:	f102 34ff 	add.w	r4, r2, #4294967295
    12ec:	f64f 71fe 	movw	r1, #65534	; 0xfffe
    12f0:	428c      	cmp	r4, r1
    12f2:	d9e3      	bls.n	12bc <usart_set_async_baudrate+0x14>
    12f4:	e7e8      	b.n	12c8 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
    12f6:	ea4f 01c1 	mov.w	r1, r1, lsl #3
    12fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    12fe:	eb02 0451 	add.w	r4, r2, r1, lsr #1
    1302:	fbb4 f3f1 	udiv	r3, r4, r1
	cd = cd_fp >> 3;
    1306:	ea4f 02d3 	mov.w	r2, r3, lsr #3
	fp = cd_fp & 0x07;
    130a:	f003 0307 	and.w	r3, r3, #7
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
    130e:	f102 34ff 	add.w	r4, r2, #4294967295
    1312:	f64f 71fe 	movw	r1, #65534	; 0xfffe
    1316:	428c      	cmp	r4, r1
    1318:	d9cc      	bls.n	12b4 <usart_set_async_baudrate+0xc>
    131a:	e7d8      	b.n	12ce <usart_set_async_baudrate+0x26>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
    131c:	bc10      	pop	{r4}
    131e:	4770      	bx	lr

00001320 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
    1320:	f04f 0340 	mov.w	r3, #64	; 0x40
    1324:	6003      	str	r3, [r0, #0]
    1326:	4770      	bx	lr

00001328 <usart_reset_tx>:
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
    1328:	f04f 0388 	mov.w	r3, #136	; 0x88
    132c:	6003      	str	r3, [r0, #0]
    132e:	4770      	bx	lr

00001330 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
    1330:	f04f 0310 	mov.w	r3, #16
    1334:	6003      	str	r3, [r0, #0]
    1336:	4770      	bx	lr

00001338 <usart_reset_rx>:
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
    1338:	f04f 0324 	mov.w	r3, #36	; 0x24
    133c:	6003      	str	r3, [r0, #0]
    133e:	4770      	bx	lr

00001340 <usart_reset_status>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
    1340:	f44f 7380 	mov.w	r3, #256	; 0x100
    1344:	6003      	str	r3, [r0, #0]
    1346:	4770      	bx	lr

00001348 <usart_drive_DTR_pin_high>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_DTRDIS;
    1348:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    134c:	6003      	str	r3, [r0, #0]
    134e:	4770      	bx	lr

00001350 <usart_drive_RTS_pin_high>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
    1350:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    1354:	6003      	str	r3, [r0, #0]
    1356:	4770      	bx	lr

00001358 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
    1358:	6943      	ldr	r3, [r0, #20]
    135a:	f013 0f02 	tst.w	r3, #2
    135e:	d007      	beq.n	1370 <usart_write+0x18>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
    1360:	ea4f 51c1 	mov.w	r1, r1, lsl #23
    1364:	ea4f 52d1 	mov.w	r2, r1, lsr #23
    1368:	61c2      	str	r2, [r0, #28]
	return 0;
    136a:	f04f 0000 	mov.w	r0, #0
    136e:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
    1370:	f04f 0001 	mov.w	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
    1374:	4770      	bx	lr
    1376:	bf00      	nop

00001378 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
    1378:	6943      	ldr	r3, [r0, #20]
    137a:	f013 0f01 	tst.w	r3, #1
    137e:	d008      	beq.n	1392 <usart_read+0x1a>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
    1380:	6980      	ldr	r0, [r0, #24]
    1382:	ea4f 52c0 	mov.w	r2, r0, lsl #23
    1386:	ea4f 53d2 	mov.w	r3, r2, lsr #23
    138a:	600b      	str	r3, [r1, #0]

	return 0;
    138c:	f04f 0000 	mov.w	r0, #0
    1390:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
    1392:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
    1396:	4770      	bx	lr

00001398 <usart_disable_writeprotect>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
    1398:	f44f 4382 	mov.w	r3, #16640	; 0x4100
    139c:	f2c5 5353 	movt	r3, #21843	; 0x5553
    13a0:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
    13a8:	b510      	push	{r4, lr}
    13aa:	4604      	mov	r4, r0
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
    13ac:	f241 3399 	movw	r3, #5017	; 0x1399
    13b0:	f2c0 0300 	movt	r3, #0
    13b4:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
    13b6:	f04f 0000 	mov.w	r0, #0
    13ba:	6060      	str	r0, [r4, #4]
	p_usart->US_RTOR = 0;
    13bc:	6260      	str	r0, [r4, #36]	; 0x24
	p_usart->US_TTGR = 0;
    13be:	62a0      	str	r0, [r4, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
    13c0:	4620      	mov	r0, r4
    13c2:	f241 3129 	movw	r1, #4905	; 0x1329
    13c6:	f2c0 0100 	movt	r1, #0
    13ca:	4788      	blx	r1
	usart_reset_rx(p_usart);
    13cc:	4620      	mov	r0, r4
    13ce:	f241 3239 	movw	r2, #4921	; 0x1339
    13d2:	f2c0 0200 	movt	r2, #0
    13d6:	4790      	blx	r2
	/* Reset status bits. */
	usart_reset_status(p_usart);
    13d8:	4620      	mov	r0, r4
    13da:	f241 3341 	movw	r3, #4929	; 0x1341
    13de:	f2c0 0300 	movt	r3, #0
    13e2:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
    13e4:	4620      	mov	r0, r4
    13e6:	f241 3151 	movw	r1, #4945	; 0x1351
    13ea:	f2c0 0100 	movt	r1, #0
    13ee:	4788      	blx	r1
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
    13f0:	4620      	mov	r0, r4
    13f2:	f241 3249 	movw	r2, #4937	; 0x1349
    13f6:	f2c0 0200 	movt	r2, #0
    13fa:	4790      	blx	r2
    13fc:	bd10      	pop	{r4, pc}
    13fe:	bf00      	nop

00001400 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
    1400:	b570      	push	{r4, r5, r6, lr}
    1402:	4605      	mov	r5, r0
    1404:	460c      	mov	r4, r1
    1406:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
    1408:	f241 33a9 	movw	r3, #5033	; 0x13a9
    140c:	f2c0 0300 	movt	r3, #0
    1410:	4798      	blx	r3

	ul_reg_val = 0;
    1412:	f640 10d0 	movw	r0, #2512	; 0x9d0
    1416:	f2c2 0000 	movt	r0, #8192	; 0x2000
    141a:	f04f 0100 	mov.w	r1, #0
    141e:	6001      	str	r1, [r0, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
    1420:	b1cc      	cbz	r4, 1456 <usart_init_rs232+0x56>
    1422:	4628      	mov	r0, r5
    1424:	6821      	ldr	r1, [r4, #0]
    1426:	4632      	mov	r2, r6
    1428:	f241 23a9 	movw	r3, #4777	; 0x12a9
    142c:	f2c0 0300 	movt	r3, #0
    1430:	4798      	blx	r3
    1432:	b998      	cbnz	r0, 145c <usart_init_rs232+0x5c>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
    1434:	68a2      	ldr	r2, [r4, #8]
    1436:	6861      	ldr	r1, [r4, #4]
    1438:	ea42 0301 	orr.w	r3, r2, r1
    143c:	6922      	ldr	r2, [r4, #16]
    143e:	4313      	orrs	r3, r2
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
    1440:	68e1      	ldr	r1, [r4, #12]
    1442:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
    1444:	f640 12d0 	movw	r2, #2512	; 0x9d0
    1448:	f2c2 0200 	movt	r2, #8192	; 0x2000
    144c:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
    144e:	6869      	ldr	r1, [r5, #4]
    1450:	430b      	orrs	r3, r1
    1452:	606b      	str	r3, [r5, #4]

	return 0;
    1454:	bd70      	pop	{r4, r5, r6, pc}

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
    1456:	f04f 0001 	mov.w	r0, #1
    145a:	bd70      	pop	{r4, r5, r6, pc}
    145c:	f04f 0001 	mov.w	r0, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
    1460:	bd70      	pop	{r4, r5, r6, pc}
    1462:	bf00      	nop

00001464 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
    1464:	b5f0      	push	{r4, r5, r6, r7, lr}
    1466:	b083      	sub	sp, #12
    1468:	4604      	mov	r4, r0
    146a:	460d      	mov	r5, r1
	uint32_t val = 0;
    146c:	f04f 0300 	mov.w	r3, #0
    1470:	9301      	str	r3, [sp, #4]
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
    1472:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1476:	f2c4 0002 	movt	r0, #16386	; 0x4002
    147a:	4284      	cmp	r4, r0
    147c:	d10f      	bne.n	149e <usart_serial_getchar+0x3a>
		while (usart_read(p_usart, &val));
    147e:	f44f 4680 	mov.w	r6, #16384	; 0x4000
    1482:	f2c4 0602 	movt	r6, #16386	; 0x4002
    1486:	f241 3779 	movw	r7, #4985	; 0x1379
    148a:	f2c0 0700 	movt	r7, #0
    148e:	4630      	mov	r0, r6
    1490:	a901      	add	r1, sp, #4
    1492:	47b8      	blx	r7
    1494:	2800      	cmp	r0, #0
    1496:	d1fa      	bne.n	148e <usart_serial_getchar+0x2a>
		*data = (uint8_t)(val & 0xFF);
    1498:	9901      	ldr	r1, [sp, #4]
    149a:	7029      	strb	r1, [r5, #0]
    149c:	e02b      	b.n	14f6 <usart_serial_getchar+0x92>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
    149e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    14a2:	f2c4 0102 	movt	r1, #16386	; 0x4002
    14a6:	428c      	cmp	r4, r1
    14a8:	d10f      	bne.n	14ca <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
    14aa:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    14ae:	f2c4 0402 	movt	r4, #16386	; 0x4002
    14b2:	f241 3679 	movw	r6, #4985	; 0x1379
    14b6:	f2c0 0600 	movt	r6, #0
    14ba:	4620      	mov	r0, r4
    14bc:	a901      	add	r1, sp, #4
    14be:	47b0      	blx	r6
    14c0:	2800      	cmp	r0, #0
    14c2:	d1fa      	bne.n	14ba <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
    14c4:	9801      	ldr	r0, [sp, #4]
    14c6:	7028      	strb	r0, [r5, #0]
    14c8:	e02a      	b.n	1520 <usart_serial_getchar+0xbc>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
    14ca:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    14ce:	f2c4 0202 	movt	r2, #16386	; 0x4002
    14d2:	4294      	cmp	r4, r2
    14d4:	d10f      	bne.n	14f6 <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
    14d6:	f44f 4440 	mov.w	r4, #49152	; 0xc000
    14da:	f2c4 0402 	movt	r4, #16386	; 0x4002
    14de:	f241 3679 	movw	r6, #4985	; 0x1379
    14e2:	f2c0 0600 	movt	r6, #0
    14e6:	4620      	mov	r0, r4
    14e8:	a901      	add	r1, sp, #4
    14ea:	47b0      	blx	r6
    14ec:	2800      	cmp	r0, #0
    14ee:	d1fa      	bne.n	14e6 <usart_serial_getchar+0x82>
		*data = (uint8_t)(val & 0xFF);
    14f0:	9b01      	ldr	r3, [sp, #4]
    14f2:	702b      	strb	r3, [r5, #0]
    14f4:	e014      	b.n	1520 <usart_serial_getchar+0xbc>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
    14f6:	f04f 0200 	mov.w	r2, #0
    14fa:	f2c4 0203 	movt	r2, #16387	; 0x4003
    14fe:	4294      	cmp	r4, r2
    1500:	d10e      	bne.n	1520 <usart_serial_getchar+0xbc>
		while (usart_read(p_usart, &val));
    1502:	f04f 0400 	mov.w	r4, #0
    1506:	f2c4 0403 	movt	r4, #16387	; 0x4003
    150a:	f241 3679 	movw	r6, #4985	; 0x1379
    150e:	f2c0 0600 	movt	r6, #0
    1512:	4620      	mov	r0, r4
    1514:	a901      	add	r1, sp, #4
    1516:	47b0      	blx	r6
    1518:	2800      	cmp	r0, #0
    151a:	d1fa      	bne.n	1512 <usart_serial_getchar+0xae>
		*data = (uint8_t)(val & 0xFF);
    151c:	9b01      	ldr	r3, [sp, #4]
    151e:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
    1520:	b003      	add	sp, #12
    1522:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001524 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
    1524:	b570      	push	{r4, r5, r6, lr}
    1526:	460c      	mov	r4, r1
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
    1528:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    152c:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1530:	4298      	cmp	r0, r3
    1532:	d10f      	bne.n	1554 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
    1534:	f44f 4580 	mov.w	r5, #16384	; 0x4000
    1538:	f2c4 0502 	movt	r5, #16386	; 0x4002
    153c:	f241 3659 	movw	r6, #4953	; 0x1359
    1540:	f2c0 0600 	movt	r6, #0
    1544:	4628      	mov	r0, r5
    1546:	4621      	mov	r1, r4
    1548:	47b0      	blx	r6
    154a:	2800      	cmp	r0, #0
    154c:	d1fa      	bne.n	1544 <usart_serial_putchar+0x20>
		return 1;
    154e:	f04f 0001 	mov.w	r0, #1
    1552:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
    1554:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1558:	f2c4 0102 	movt	r1, #16386	; 0x4002
    155c:	4288      	cmp	r0, r1
    155e:	d10f      	bne.n	1580 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
    1560:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    1564:	f2c4 0502 	movt	r5, #16386	; 0x4002
    1568:	f241 3659 	movw	r6, #4953	; 0x1359
    156c:	f2c0 0600 	movt	r6, #0
    1570:	4628      	mov	r0, r5
    1572:	4621      	mov	r1, r4
    1574:	47b0      	blx	r6
    1576:	2800      	cmp	r0, #0
    1578:	d1fa      	bne.n	1570 <usart_serial_putchar+0x4c>
		return 1;
    157a:	f04f 0001 	mov.w	r0, #1
    157e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
    1580:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    1584:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1588:	4290      	cmp	r0, r2
    158a:	d10f      	bne.n	15ac <usart_serial_putchar+0x88>
		while (usart_write(p_usart, c)!=0);
    158c:	f44f 4540 	mov.w	r5, #49152	; 0xc000
    1590:	f2c4 0502 	movt	r5, #16386	; 0x4002
    1594:	f241 3659 	movw	r6, #4953	; 0x1359
    1598:	f2c0 0600 	movt	r6, #0
    159c:	4628      	mov	r0, r5
    159e:	4621      	mov	r1, r4
    15a0:	47b0      	blx	r6
    15a2:	2800      	cmp	r0, #0
    15a4:	d1fa      	bne.n	159c <usart_serial_putchar+0x78>
		return 1;
    15a6:	f04f 0001 	mov.w	r0, #1
    15aa:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
    15ac:	f04f 0300 	mov.w	r3, #0
    15b0:	f2c4 0303 	movt	r3, #16387	; 0x4003
    15b4:	4298      	cmp	r0, r3
    15b6:	d10f      	bne.n	15d8 <usart_serial_putchar+0xb4>
		while (usart_write(p_usart, c)!=0);
    15b8:	f04f 0500 	mov.w	r5, #0
    15bc:	f2c4 0503 	movt	r5, #16387	; 0x4003
    15c0:	f241 3659 	movw	r6, #4953	; 0x1359
    15c4:	f2c0 0600 	movt	r6, #0
    15c8:	4628      	mov	r0, r5
    15ca:	4621      	mov	r1, r4
    15cc:	47b0      	blx	r6
    15ce:	2800      	cmp	r0, #0
    15d0:	d1fa      	bne.n	15c8 <usart_serial_putchar+0xa4>
		return 1;
    15d2:	f04f 0001 	mov.w	r0, #1
    15d6:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
    15d8:	f04f 0000 	mov.w	r0, #0
}
    15dc:	bd70      	pop	{r4, r5, r6, pc}
    15de:	bf00      	nop

000015e0 <main>:
 * \brief Application entry point for usart_serial example.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
    15e0:	b570      	push	{r4, r5, r6, lr}
    15e2:	b086      	sub	sp, #24
	status_code_t status;
	uint8_t addr;
	/* Initialize the SAM system. */
	sysclk_init();
    15e4:	f642 4379 	movw	r3, #11385	; 0x2c79
    15e8:	f2c0 0300 	movt	r3, #0
    15ec:	4798      	blx	r3
	board_init();
    15ee:	f642 5035 	movw	r0, #11573	; 0x2d35
    15f2:	f2c0 0000 	movt	r0, #0
    15f6:	4780      	blx	r0
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    15f8:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    15fc:	f2c4 0402 	movt	r4, #16386	; 0x4002
    1600:	f640 2150 	movw	r1, #2640	; 0xa50
    1604:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1608:	600c      	str	r4, [r1, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    160a:	f640 254c 	movw	r5, #2636	; 0xa4c
    160e:	f2c2 0500 	movt	r5, #8192	; 0x2000
    1612:	f241 5225 	movw	r2, #5413	; 0x1525
    1616:	f2c0 0200 	movt	r2, #0
    161a:	602a      	str	r2, [r5, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    161c:	f640 2648 	movw	r6, #2632	; 0xa48
    1620:	f2c2 0600 	movt	r6, #8192	; 0x2000
    1624:	f241 4365 	movw	r3, #5221	; 0x1465
    1628:	f2c0 0300 	movt	r3, #0
    162c:	6033      	str	r3, [r6, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
    162e:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
    1632:	9000      	str	r0, [sp, #0]
	usart_settings.char_length = opt->charlength;
    1634:	f04f 01c0 	mov.w	r1, #192	; 0xc0
    1638:	9101      	str	r1, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
    163a:	f44f 6500 	mov.w	r5, #2048	; 0x800
    163e:	9502      	str	r5, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
    1640:	f04f 0500 	mov.w	r5, #0
    1644:	9503      	str	r5, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
    1646:	9504      	str	r5, [sp, #16]
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_hz());
#endif
#if (SAM4L)
		sysclk_enable_peripheral_clock(p_usart);
    1648:	4620      	mov	r0, r4
    164a:	f641 62fd 	movw	r2, #7933	; 0x1efd
    164e:	f2c0 0200 	movt	r2, #0
    1652:	4790      	blx	r2
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
    1654:	4620      	mov	r0, r4
    1656:	f641 4605 	movw	r6, #7173	; 0x1c05
    165a:	f2c0 0600 	movt	r6, #0
    165e:	47b0      	blx	r6
    1660:	4602      	mov	r2, r0
    1662:	4620      	mov	r0, r4
    1664:	4669      	mov	r1, sp
    1666:	f241 4301 	movw	r3, #5121	; 0x1401
    166a:	f2c0 0300 	movt	r3, #0
    166e:	4798      	blx	r3
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
    1670:	4620      	mov	r0, r4
    1672:	f241 3121 	movw	r1, #4897	; 0x1321
    1676:	f2c0 0100 	movt	r1, #0
    167a:	4788      	blx	r1
		usart_enable_rx(p_usart);
    167c:	4620      	mov	r0, r4
    167e:	f241 3431 	movw	r4, #4913	; 0x1331
    1682:	f2c0 0400 	movt	r4, #0
    1686:	47a0      	blx	r4
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    1688:	f240 0650 	movw	r6, #80	; 0x50
    168c:	f2c2 0600 	movt	r6, #8192	; 0x2000
    1690:	6830      	ldr	r0, [r6, #0]
    1692:	6880      	ldr	r0, [r0, #8]
    1694:	4629      	mov	r1, r5
    1696:	f243 54d5 	movw	r4, #13781	; 0x35d5
    169a:	f2c0 0400 	movt	r4, #0
    169e:	47a0      	blx	r4
	setbuf(stdin, NULL);
    16a0:	6832      	ldr	r2, [r6, #0]
    16a2:	6850      	ldr	r0, [r2, #4]
    16a4:	4629      	mov	r1, r5
    16a6:	47a0      	blx	r4
	//init_twi();
	/* Configure UART for debug message output. */
	configure_console();

	/* Output example information. */
	puts("\n\r\nCamera App\n\r");
    16a8:	f645 508c 	movw	r0, #23948	; 0x5d8c
    16ac:	f2c0 0000 	movt	r0, #0
    16b0:	f243 55c5 	movw	r5, #13765	; 0x35c5
    16b4:	f2c0 0500 	movt	r5, #0
    16b8:	47a8      	blx	r5

	puts("Start Scan...\n\r");
    16ba:	f645 509c 	movw	r0, #23964	; 0x5d9c
    16be:	f2c0 0000 	movt	r0, #0
    16c2:	47a8      	blx	r5
	

	if (STATUS_OK == OV7670_init())
    16c4:	f240 53a1 	movw	r3, #1441	; 0x5a1
    16c8:	f2c0 0300 	movt	r3, #0
    16cc:	4798      	blx	r3
    16ce:	b948      	cbnz	r0, 16e4 <main+0x104>
	{
		printf("Initialise success\n\r");
    16d0:	f645 50ac 	movw	r0, #23980	; 0x5dac
    16d4:	f2c0 0000 	movt	r0, #0
    16d8:	f243 5611 	movw	r6, #13585	; 0x3511
    16dc:	f2c0 0600 	movt	r6, #0
    16e0:	47b0      	blx	r6
    16e2:	e008      	b.n	16f6 <main+0x116>
	}
	else
	{
		printf("Initialise fail\n\r");
    16e4:	f645 50c4 	movw	r0, #24004	; 0x5dc4
    16e8:	f2c0 0000 	movt	r0, #0
    16ec:	f243 5111 	movw	r1, #13585	; 0x3511
    16f0:	f2c0 0100 	movt	r1, #0
    16f4:	4788      	blx	r1
    16f6:	e7fe      	b.n	16f6 <main+0x116>

000016f8 <dfll_enable_closed_loop>:
	/* Finally, stop the reference clock */
	genclk_disable(0);
}

void dfll_enable_closed_loop(const struct dfll_config *cfg, uint32_t dfll_id)
{
    16f8:	b410      	push	{r4}
}

static inline void genclk_enable(const struct genclk_config *cfg,
		uint32_t id)
{
	 SCIF->SCIF_GCCTRL[id].SCIF_GCCTRL = cfg->ctrl | SCIF_GCCTRL_CEN;
    16fa:	6803      	ldr	r3, [r0, #0]
    16fc:	f043 0201 	orr.w	r2, r3, #1
    1700:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1704:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1708:	675a      	str	r2, [r3, #116]	; 0x74
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    170a:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    170e:	b672      	cpsid	i
    1710:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1714:	f240 0244 	movw	r2, #68	; 0x44
    1718:	f2c2 0200 	movt	r2, #8192	; 0x2000
    171c:	f04f 0400 	mov.w	r4, #0
    1720:	7014      	strb	r4, [r2, #0]
	 * Enable the DFLL first, but don't wait for the DFLL0RDY bit
	 * because if the DFLL has been disabled before, the DFLL0RDY
	 * bit stays cleared until it is re-enabled.
	 */
	flags = cpu_irq_save();
	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAUL)
    1722:	f04f 0228 	mov.w	r2, #40	; 0x28
    1726:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    172a:	619a      	str	r2, [r3, #24]
		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_DFLL0CONF - (uint32_t)SCIF);
	SCIF->SCIF_DFLL0CONF = SCIF_DFLL0CONF_EN;
    172c:	f04f 0201 	mov.w	r2, #1
    1730:	629a      	str	r2, [r3, #40]	; 0x28
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1732:	b939      	cbnz	r1, 1744 <dfll_enable_closed_loop+0x4c>
		cpu_irq_enable();
    1734:	f240 0344 	movw	r3, #68	; 0x44
    1738:	f2c2 0300 	movt	r3, #8192	; 0x2000
    173c:	701a      	strb	r2, [r3, #0]
    173e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1742:	b662      	cpsie	i

	/*
	 * Then, configure the DFLL, taking care to wait for the
	 * DFLL0RDY bit before every step.
	 */
	dfll_write_reg(DFLL0STEP, cfg->step);
    1744:	f44f 6100 	mov.w	r1, #2048	; 0x800
    1748:	f2c4 010e 	movt	r1, #16398	; 0x400e
    174c:	694a      	ldr	r2, [r1, #20]
    174e:	f012 0f08 	tst.w	r2, #8
    1752:	d0fb      	beq.n	174c <dfll_enable_closed_loop+0x54>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1754:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1758:	b672      	cpsid	i
    175a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    175e:	f240 0344 	movw	r3, #68	; 0x44
    1762:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1766:	f04f 0200 	mov.w	r2, #0
    176a:	701a      	strb	r2, [r3, #0]
    176c:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1770:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1774:	f04f 0234 	mov.w	r2, #52	; 0x34
    1778:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    177c:	619a      	str	r2, [r3, #24]
    177e:	68c2      	ldr	r2, [r0, #12]
    1780:	635a      	str	r2, [r3, #52]	; 0x34
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1782:	b949      	cbnz	r1, 1798 <dfll_enable_closed_loop+0xa0>
		cpu_irq_enable();
    1784:	f240 0144 	movw	r1, #68	; 0x44
    1788:	f2c2 0100 	movt	r1, #8192	; 0x2000
    178c:	f04f 0301 	mov.w	r3, #1
    1790:	700b      	strb	r3, [r1, #0]
    1792:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1796:	b662      	cpsie	i
	dfll_write_reg(DFLL0MUL, cfg->mul);
    1798:	f44f 6200 	mov.w	r2, #2048	; 0x800
    179c:	f2c4 020e 	movt	r2, #16398	; 0x400e
    17a0:	6951      	ldr	r1, [r2, #20]
    17a2:	f011 0f08 	tst.w	r1, #8
    17a6:	d0fb      	beq.n	17a0 <dfll_enable_closed_loop+0xa8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    17a8:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    17ac:	b672      	cpsid	i
    17ae:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    17b2:	f240 0344 	movw	r3, #68	; 0x44
    17b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    17ba:	f04f 0200 	mov.w	r2, #0
    17be:	701a      	strb	r2, [r3, #0]
    17c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
    17c4:	f2c4 030e 	movt	r3, #16398	; 0x400e
    17c8:	f04f 0230 	mov.w	r2, #48	; 0x30
    17cc:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    17d0:	619a      	str	r2, [r3, #24]
    17d2:	6882      	ldr	r2, [r0, #8]
    17d4:	631a      	str	r2, [r3, #48]	; 0x30
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    17d6:	b949      	cbnz	r1, 17ec <dfll_enable_closed_loop+0xf4>
		cpu_irq_enable();
    17d8:	f240 0144 	movw	r1, #68	; 0x44
    17dc:	f2c2 0100 	movt	r1, #8192	; 0x2000
    17e0:	f04f 0301 	mov.w	r3, #1
    17e4:	700b      	strb	r3, [r1, #0]
    17e6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    17ea:	b662      	cpsie	i
	dfll_write_reg(DFLL0SSG, cfg->ssg);
    17ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
    17f0:	f2c4 020e 	movt	r2, #16398	; 0x400e
    17f4:	6951      	ldr	r1, [r2, #20]
    17f6:	f011 0f08 	tst.w	r1, #8
    17fa:	d0fb      	beq.n	17f4 <dfll_enable_closed_loop+0xfc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    17fc:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1800:	b672      	cpsid	i
    1802:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1806:	f240 0344 	movw	r3, #68	; 0x44
    180a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    180e:	f04f 0200 	mov.w	r2, #0
    1812:	701a      	strb	r2, [r3, #0]
    1814:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1818:	f2c4 030e 	movt	r3, #16398	; 0x400e
    181c:	f04f 0238 	mov.w	r2, #56	; 0x38
    1820:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    1824:	619a      	str	r2, [r3, #24]
    1826:	6902      	ldr	r2, [r0, #16]
    1828:	639a      	str	r2, [r3, #56]	; 0x38
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    182a:	b949      	cbnz	r1, 1840 <dfll_enable_closed_loop+0x148>
		cpu_irq_enable();
    182c:	f240 0144 	movw	r1, #68	; 0x44
    1830:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1834:	f04f 0301 	mov.w	r3, #1
    1838:	700b      	strb	r3, [r1, #0]
    183a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    183e:	b662      	cpsie	i
	dfll_write_reg(DFLL0CONF, cfg->conf | SCIF_DFLL0CONF_EN);
    1840:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1844:	f2c4 020e 	movt	r2, #16398	; 0x400e
    1848:	6951      	ldr	r1, [r2, #20]
    184a:	f011 0f08 	tst.w	r1, #8
    184e:	d0fb      	beq.n	1848 <dfll_enable_closed_loop+0x150>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1850:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1854:	b672      	cpsid	i
    1856:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    185a:	f240 0344 	movw	r3, #68	; 0x44
    185e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1862:	f04f 0200 	mov.w	r2, #0
    1866:	701a      	strb	r2, [r3, #0]
    1868:	f44f 6300 	mov.w	r3, #2048	; 0x800
    186c:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1870:	f04f 0228 	mov.w	r2, #40	; 0x28
    1874:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    1878:	619a      	str	r2, [r3, #24]
    187a:	6840      	ldr	r0, [r0, #4]
    187c:	f040 0201 	orr.w	r2, r0, #1
    1880:	629a      	str	r2, [r3, #40]	; 0x28
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1882:	b949      	cbnz	r1, 1898 <dfll_enable_closed_loop+0x1a0>
		cpu_irq_enable();
    1884:	f240 0144 	movw	r1, #68	; 0x44
    1888:	f2c2 0100 	movt	r1, #8192	; 0x2000
    188c:	f04f 0301 	mov.w	r3, #1
    1890:	700b      	strb	r3, [r1, #0]
    1892:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1896:	b662      	cpsie	i
}
    1898:	bc10      	pop	{r4}
    189a:	4770      	bx	lr

0000189c <dfll_enable_config_defaults>:
	/* Finally, stop the reference clock */
	genclk_disable(0);
}

void dfll_enable_config_defaults(uint32_t dfll_id)
{
    189c:	b500      	push	{lr}
    189e:	b089      	sub	sp, #36	; 0x24
#ifdef CONFIG_DFLL0_SOURCE
	struct dfll_config dfllcfg;
#endif
	static bool open_loop_done = false;

	if(SCIF->SCIF_DFLL0CONF & SCIF_DFLL0CONF_MODE) {
    18a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
    18a4:	f2c4 030e 	movt	r3, #16398	; 0x400e
    18a8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    18aa:	f011 0f02 	tst.w	r1, #2
    18ae:	d007      	beq.n	18c0 <dfll_enable_config_defaults+0x24>
}

static inline bool dfll_is_fine_locked(uint32_t dfll_id)
{
	UNUSED(dfll_id);
	return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_DFLL0LOCKF);
    18b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    18b4:	f2c4 020e 	movt	r2, #16398	; 0x400e
    18b8:	6953      	ldr	r3, [r2, #20]
		// Closed-loop mode
		if (dfll_is_fine_locked(dfll_id)) {
    18ba:	f013 0f04 	tst.w	r3, #4
    18be:	d14e      	bne.n	195e <dfll_enable_config_defaults+0xc2>
	}
	if (open_loop_done == true) {
		return;
	}

	switch (dfll_id) {
    18c0:	2800      	cmp	r0, #0
    18c2:	d14c      	bne.n	195e <dfll_enable_config_defaults+0xc2>
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_OSC32RDY);
    18c4:	f44f 6080 	mov.w	r0, #1024	; 0x400
    18c8:	f2c4 000f 	movt	r0, #16399	; 0x400f
    18cc:	6941      	ldr	r1, [r0, #20]
		/* Nothing to do */
		break;

#ifdef BOARD_OSC32_HZ
	case GENCLK_SRC_OSC32K:
		if (!osc_is_ready(OSC_ID_OSC32)) {
    18ce:	f011 0f01 	tst.w	r1, #1
    18d2:	d10c      	bne.n	18ee <dfll_enable_config_defaults+0x52>
		break;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		osc_priv_enable_osc32();
    18d4:	f641 1265 	movw	r2, #6501	; 0x1965
    18d8:	f2c0 0200 	movt	r2, #0
    18dc:	4790      	blx	r2
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_OSC32RDY);
    18de:	f44f 6080 	mov.w	r0, #1024	; 0x400
    18e2:	f2c4 000f 	movt	r0, #16399	; 0x400f
    18e6:	6943      	ldr	r3, [r0, #20]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    18e8:	f013 0f01 	tst.w	r3, #1
    18ec:	d0fb      	beq.n	18e6 <dfll_enable_config_defaults+0x4a>
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
	cfg->ctrl = (cfg->ctrl & ~SCIF_GCCTRL_OSCSEL_Msk)
    18ee:	f44f 7180 	mov.w	r1, #256	; 0x100
    18f2:	9101      	str	r1, [sp, #4]
	genclk_config_defaults(&cfg->ref_cfg, 0);
	genclk_config_set_source(&cfg->ref_cfg, refclk);
	genclk_config_set_divider(&cfg->ref_cfg, divide);

	// Do a sync before reading a dfll conf register
	SCIF->SCIF_DFLL0SYNC = SCIF_DFLL0SYNC_SYNC;
    18f4:	f44f 6000 	mov.w	r0, #2048	; 0x800
    18f8:	f2c4 000e 	movt	r0, #16398	; 0x400e
    18fc:	f04f 0201 	mov.w	r2, #1
    1900:	6402      	str	r2, [r0, #64]	; 0x40
	while (!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_DFLL0RDY));
    1902:	f44f 6100 	mov.w	r1, #2048	; 0x800
    1906:	f2c4 010e 	movt	r1, #16398	; 0x400e
    190a:	694b      	ldr	r3, [r1, #20]
    190c:	f013 0f08 	tst.w	r3, #8
    1910:	d0fb      	beq.n	190a <dfll_enable_config_defaults+0x6e>
	cfg->conf = SCIF->SCIF_DFLL0CONF;
    1912:	f44f 6000 	mov.w	r0, #2048	; 0x800
    1916:	f2c4 000e 	movt	r0, #16398	; 0x400e
    191a:	6a81      	ldr	r1, [r0, #40]	; 0x28
{
	if (freq < DFLL_MAX_RANGE3){
		cfg->freq_range = DFLL_RANGE3;
	}
	else if (freq < DFLL_MAX_RANGE2){
		cfg->freq_range = DFLL_RANGE2;
    191c:	f04f 0202 	mov.w	r2, #2
    1920:	f88d 201c 	strb.w	r2, [sp, #28]
		cfg->freq_range = DFLL_RANGE1;
	}
	else {
		cfg->freq_range = DFLL_RANGE0;
	}
	cfg->conf &= ~SCIF_DFLL0CONF_RANGE_Msk;
    1924:	f421 3340 	bic.w	r3, r1, #196608	; 0x30000
	cfg->conf |=SCIF_DFLL0CONF_RANGE(cfg->freq_range);
    1928:	f043 1002 	orr.w	r0, r3, #131074	; 0x20002
    192c:	9002      	str	r0, [sp, #8]
	// Select Closed Loop Mode
	cfg->conf |= SCIF_DFLL0CONF_MODE;
	// Write DFLL Frequency Range
	dfll_priv_set_frequency_range(cfg, CONFIG_DFLL0_FREQ);

	cfg->mul = mul;
    192e:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
    1932:	9103      	str	r1, [sp, #12]
	cfg->val = 0;
    1934:	f04f 0100 	mov.w	r1, #0
    1938:	9106      	str	r1, [sp, #24]
};

static inline void dfll_config_set_max_step(struct dfll_config *cfg,
		uint16_t coarse, uint16_t fine)
{
	cfg->step = (SCIF_DFLL0STEP_CSTEP(coarse)
    193a:	f04f 1204 	mov.w	r2, #262148	; 0x40004
    193e:	9204      	str	r2, [sp, #16]
	/*
	 * Initial step length of 4. If this is set too high, the DFLL
	 * may fail to lock.
	 */
	dfll_config_set_max_step(cfg, 4, 4);
	cfg->ssg = 0;
    1940:	9105      	str	r1, [sp, #20]
		dfll_config_init_closed_loop_mode(&dfllcfg,
			CONFIG_DFLL0_SOURCE,
			CONFIG_DFLL0_DIV,
			CONFIG_DFLL0_MUL);

		dfll_enable_closed_loop(&dfllcfg, dfll_id);
    1942:	a801      	add	r0, sp, #4
    1944:	f241 63f9 	movw	r3, #5881	; 0x16f9
    1948:	f2c0 0300 	movt	r3, #0
    194c:	4798      	blx	r3
}

static inline bool dfll_is_fine_locked(uint32_t dfll_id)
{
	UNUSED(dfll_id);
	return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_DFLL0LOCKF);
    194e:	f44f 6000 	mov.w	r0, #2048	; 0x800
    1952:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1956:	6941      	ldr	r1, [r0, #20]
		while (!dfll_is_fine_locked(dfll_id));
    1958:	f011 0f04 	tst.w	r1, #4
    195c:	d0fb      	beq.n	1956 <dfll_enable_config_defaults+0xba>

	default:
		Assert(false);
		break;
	}
}
    195e:	b009      	add	sp, #36	; 0x24
    1960:	bd00      	pop	{pc}
    1962:	bf00      	nop

00001964 <osc_priv_enable_osc32>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1964:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1968:	b672      	cpsid	i
    196a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    196e:	f240 0344 	movw	r3, #68	; 0x44
    1972:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1976:	f04f 0200 	mov.w	r2, #0
    197a:	701a      	strb	r2, [r3, #0]
void osc_priv_enable_osc32(void)
{
	irqflags_t flags;

	flags = cpu_irq_save();
	BSCIF->BSCIF_UNLOCK = BSCIF_UNLOCK_KEY(0xAAu)
    197c:	f44f 6080 	mov.w	r0, #1024	; 0x400
    1980:	f2c4 000f 	movt	r0, #16399	; 0x400f
    1984:	f04f 0320 	mov.w	r3, #32
    1988:	f6ca 2300 	movt	r3, #43520	; 0xaa00
    198c:	6183      	str	r3, [r0, #24]
		| BSCIF_UNLOCK_ADDR((uint32_t)&BSCIF->BSCIF_OSCCTRL32 - (uint32_t)BSCIF);
	BSCIF->BSCIF_OSCCTRL32 =
    198e:	f24a 120d 	movw	r2, #41229	; 0xa10d
    1992:	f2c0 0205 	movt	r2, #5
    1996:	6202      	str	r2, [r0, #32]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1998:	b949      	cbnz	r1, 19ae <osc_priv_enable_osc32+0x4a>
		cpu_irq_enable();
    199a:	f240 0144 	movw	r1, #68	; 0x44
    199e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    19a2:	f04f 0001 	mov.w	r0, #1
    19a6:	7008      	strb	r0, [r1, #0]
    19a8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    19ac:	b662      	cpsie	i
    19ae:	4770      	bx	lr

000019b0 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(uint32_t bus_id, uint32_t module_index)
{
    19b0:	b430      	push	{r4, r5}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    19b2:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    19b6:	b672      	cpsid	i
    19b8:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    19bc:	f240 0344 	movw	r3, #68	; 0x44
    19c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    19c4:	f04f 0200 	mov.w	r2, #0
    19c8:	701a      	strb	r2, [r3, #0]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
    19ca:	f04f 0320 	mov.w	r3, #32
    19ce:	f2c4 030e 	movt	r3, #16398	; 0x400e
    19d2:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
	mask |= 1U << module_index;
    19d6:	f04f 0501 	mov.w	r5, #1
    19da:	fa05 f101 	lsl.w	r1, r5, r1
    19de:	4311      	orrs	r1, r2
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
    19e0:	f100 0208 	add.w	r2, r0, #8
    19e4:	ea4f 6502 	mov.w	r5, r2, lsl #24
    19e8:	ea4f 5295 	mov.w	r2, r5, lsr #22
	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
	mask |= 1U << module_index;
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    19ec:	f042 452a 	orr.w	r5, r2, #2852126720	; 0xaa000000
    19f0:	f04f 0200 	mov.w	r2, #0
    19f4:	f2c4 020e 	movt	r2, #16398	; 0x400e
    19f8:	6595      	str	r5, [r2, #88]	; 0x58
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
	*(&PM->PM_CPUMASK + bus_id) = mask;
    19fa:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    19fe:	b94c      	cbnz	r4, 1a14 <sysclk_priv_enable_module+0x64>
		cpu_irq_enable();
    1a00:	f240 0044 	movw	r0, #68	; 0x44
    1a04:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1a08:	f04f 0301 	mov.w	r3, #1
    1a0c:	7003      	strb	r3, [r0, #0]
    1a0e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1a12:	b662      	cpsie	i

	cpu_irq_restore(flags);
}
    1a14:	bc30      	pop	{r4, r5}
    1a16:	4770      	bx	lr

00001a18 <sysclk_priv_disable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be disabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_disable_module(uint32_t bus_id, uint32_t module_index)
{
    1a18:	b430      	push	{r4, r5}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1a1a:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1a1e:	b672      	cpsid	i
    1a20:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1a24:	f240 0344 	movw	r3, #68	; 0x44
    1a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1a2c:	f04f 0200 	mov.w	r2, #0
    1a30:	701a      	strb	r2, [r3, #0]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Disable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
    1a32:	f04f 0320 	mov.w	r3, #32
    1a36:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1a3a:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
	mask &= ~(1U << module_index);
    1a3e:	f04f 0501 	mov.w	r5, #1
    1a42:	fa05 f101 	lsl.w	r1, r5, r1
    1a46:	ea22 0101 	bic.w	r1, r2, r1
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
    1a4a:	f100 0208 	add.w	r2, r0, #8
    1a4e:	ea4f 6502 	mov.w	r5, r2, lsl #24
    1a52:	ea4f 5295 	mov.w	r2, r5, lsr #22
	flags = cpu_irq_save();

	/* Disable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
	mask &= ~(1U << module_index);
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    1a56:	f042 452a 	orr.w	r5, r2, #2852126720	; 0xaa000000
    1a5a:	f04f 0200 	mov.w	r2, #0
    1a5e:	f2c4 020e 	movt	r2, #16398	; 0x400e
    1a62:	6595      	str	r5, [r2, #88]	; 0x58
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
	*(&PM->PM_CPUMASK + bus_id) = mask;
    1a64:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1a68:	b94c      	cbnz	r4, 1a7e <sysclk_priv_disable_module+0x66>
		cpu_irq_enable();
    1a6a:	f240 0044 	movw	r0, #68	; 0x44
    1a6e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1a72:	f04f 0301 	mov.w	r3, #1
    1a76:	7003      	strb	r3, [r0, #0]
    1a78:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1a7c:	b662      	cpsie	i

	cpu_irq_restore(flags);
}
    1a7e:	bc30      	pop	{r4, r5}
    1a80:	4770      	bx	lr
    1a82:	bf00      	nop

00001a84 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_enable_pba_module(uint32_t module_index)
{
    1a84:	b538      	push	{r3, r4, r5, lr}
    1a86:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1a88:	f3ef 8510 	mrs	r5, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1a8c:	b672      	cpsid	i
    1a8e:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1a92:	f240 0344 	movw	r3, #68	; 0x44
    1a96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1a9a:	f04f 0200 	mov.w	r2, #0
    1a9e:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (PM->PM_PBAMASK == 0) {
    1aa0:	4610      	mov	r0, r2
    1aa2:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1aa6:	6a81      	ldr	r1, [r0, #40]	; 0x28
    1aa8:	b941      	cbnz	r1, 1abc <sysclk_enable_pba_module+0x38>
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    1aaa:	f04f 0001 	mov.w	r0, #1
    1aae:	f04f 0105 	mov.w	r1, #5
    1ab2:	f641 13b1 	movw	r3, #6577	; 0x19b1
    1ab6:	f2c0 0300 	movt	r3, #0
    1aba:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1abc:	b94d      	cbnz	r5, 1ad2 <sysclk_enable_pba_module+0x4e>
		cpu_irq_enable();
    1abe:	f240 0044 	movw	r0, #68	; 0x44
    1ac2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1ac6:	f04f 0201 	mov.w	r2, #1
    1aca:	7002      	strb	r2, [r0, #0]
    1acc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1ad0:	b662      	cpsie	i
	}

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBA, module_index);
    1ad2:	f04f 0002 	mov.w	r0, #2
    1ad6:	4621      	mov	r1, r4
    1ad8:	f641 13b1 	movw	r3, #6577	; 0x19b1
    1adc:	f2c0 0300 	movt	r3, #0
    1ae0:	4798      	blx	r3
    1ae2:	bd38      	pop	{r3, r4, r5, pc}

00001ae4 <sysclk_disable_pba_module>:
/**
 * \brief Disable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_disable_pba_module(uint32_t module_index)
{
    1ae4:	b510      	push	{r4, lr}
    1ae6:	4601      	mov	r1, r0
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBA, module_index);
    1ae8:	f04f 0002 	mov.w	r0, #2
    1aec:	f641 2319 	movw	r3, #6681	; 0x1a19
    1af0:	f2c0 0300 	movt	r3, #0
    1af4:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1af6:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1afa:	b672      	cpsid	i
    1afc:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1b00:	f240 0044 	movw	r0, #68	; 0x44
    1b04:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1b08:	f04f 0200 	mov.w	r2, #0
    1b0c:	7002      	strb	r2, [r0, #0]

	/* Disable the bridge if possible */
	flags = cpu_irq_save();

	if (PM->PM_PBAMASK == 0) {
    1b0e:	4611      	mov	r1, r2
    1b10:	f2c4 010e 	movt	r1, #16398	; 0x400e
    1b14:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    1b16:	b943      	cbnz	r3, 1b2a <sysclk_disable_pba_module+0x46>
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
    1b18:	f04f 0001 	mov.w	r0, #1
    1b1c:	f04f 0105 	mov.w	r1, #5
    1b20:	f641 2219 	movw	r2, #6681	; 0x1a19
    1b24:	f2c0 0200 	movt	r2, #0
    1b28:	4790      	blx	r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1b2a:	b94c      	cbnz	r4, 1b40 <sysclk_disable_pba_module+0x5c>
		cpu_irq_enable();
    1b2c:	f240 0044 	movw	r0, #68	; 0x44
    1b30:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1b34:	f04f 0101 	mov.w	r1, #1
    1b38:	7001      	strb	r1, [r0, #0]
    1b3a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1b3e:	b662      	cpsie	i
    1b40:	bd10      	pop	{r4, pc}
    1b42:	bf00      	nop

00001b44 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(uint32_t module_index)
{
    1b44:	b538      	push	{r3, r4, r5, lr}
    1b46:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1b48:	f3ef 8510 	mrs	r5, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1b4c:	b672      	cpsid	i
    1b4e:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1b52:	f240 0344 	movw	r3, #68	; 0x44
    1b56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1b5a:	f04f 0200 	mov.w	r2, #0
    1b5e:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (PM->PM_PBBMASK == 0) {
    1b60:	4610      	mov	r0, r2
    1b62:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1b66:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    1b68:	b941      	cbnz	r1, 1b7c <sysclk_enable_pbb_module+0x38>
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    1b6a:	f04f 0001 	mov.w	r0, #1
    1b6e:	f04f 0106 	mov.w	r1, #6
    1b72:	f641 13b1 	movw	r3, #6577	; 0x19b1
    1b76:	f2c0 0300 	movt	r3, #0
    1b7a:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1b7c:	b94d      	cbnz	r5, 1b92 <sysclk_enable_pbb_module+0x4e>
		cpu_irq_enable();
    1b7e:	f240 0044 	movw	r0, #68	; 0x44
    1b82:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1b86:	f04f 0201 	mov.w	r2, #1
    1b8a:	7002      	strb	r2, [r0, #0]
    1b8c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1b90:	b662      	cpsie	i
	}

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBB, module_index);
    1b92:	f04f 0003 	mov.w	r0, #3
    1b96:	4621      	mov	r1, r4
    1b98:	f641 13b1 	movw	r3, #6577	; 0x19b1
    1b9c:	f2c0 0300 	movt	r3, #0
    1ba0:	4798      	blx	r3
    1ba2:	bd38      	pop	{r3, r4, r5, pc}

00001ba4 <sysclk_disable_pbb_module>:
/**
 * \brief Disable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_disable_pbb_module(uint32_t module_index)
{
    1ba4:	b510      	push	{r4, lr}
    1ba6:	4601      	mov	r1, r0
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBB, module_index);
    1ba8:	f04f 0003 	mov.w	r0, #3
    1bac:	f641 2319 	movw	r3, #6681	; 0x1a19
    1bb0:	f2c0 0300 	movt	r3, #0
    1bb4:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1bb6:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1bba:	b672      	cpsid	i
    1bbc:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1bc0:	f240 0044 	movw	r0, #68	; 0x44
    1bc4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1bc8:	f04f 0200 	mov.w	r2, #0
    1bcc:	7002      	strb	r2, [r0, #0]

	/* Disable the bridge if possible */
	flags = cpu_irq_save();

	if (PM->PM_PBBMASK == 0) {
    1bce:	4611      	mov	r1, r2
    1bd0:	f2c4 010e 	movt	r1, #16398	; 0x400e
    1bd4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    1bd6:	b943      	cbnz	r3, 1bea <sysclk_disable_pbb_module+0x46>
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
    1bd8:	f04f 0001 	mov.w	r0, #1
    1bdc:	f04f 0106 	mov.w	r1, #6
    1be0:	f641 2219 	movw	r2, #6681	; 0x1a19
    1be4:	f2c0 0200 	movt	r2, #0
    1be8:	4790      	blx	r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1bea:	b94c      	cbnz	r4, 1c00 <sysclk_disable_pbb_module+0x5c>
		cpu_irq_enable();
    1bec:	f240 0044 	movw	r0, #68	; 0x44
    1bf0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1bf4:	f04f 0101 	mov.w	r1, #1
    1bf8:	7001      	strb	r1, [r0, #0]
    1bfa:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1bfe:	b662      	cpsie	i
    1c00:	bd10      	pop	{r4, pc}
    1c02:	bf00      	nop

00001c04 <sysclk_get_peripheral_bus_hz>:
 * \return Frequency of the bus attached to the specified peripheral, in Hz.
 */
uint32_t sysclk_get_peripheral_bus_hz(const volatile void *module)
{
	/* Fallthroughs intended for modules sharing the same peripheral bus. */
	switch ((uintptr_t)module) {
    1c04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1c08:	f2c4 0307 	movt	r3, #16391	; 0x4007
    1c0c:	4298      	cmp	r0, r3
    1c0e:	f000 816f 	beq.w	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1c12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1c16:	f2c4 0107 	movt	r1, #16391	; 0x4007
    1c1a:	4288      	cmp	r0, r1
    1c1c:	f200 80bb 	bhi.w	1d96 <sysclk_get_peripheral_bus_hz+0x192>
    1c20:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1c24:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1c28:	4290      	cmp	r0, r2
    1c2a:	f000 8161 	beq.w	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1c32:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1c36:	4298      	cmp	r0, r3
    1c38:	d851      	bhi.n	1cde <sysclk_get_peripheral_bus_hz+0xda>
    1c3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1c3e:	f2c4 0101 	movt	r1, #16385	; 0x4001
    1c42:	4288      	cmp	r0, r1
    1c44:	f000 8154 	beq.w	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1c48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1c4c:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1c50:	4290      	cmp	r0, r2
    1c52:	d820      	bhi.n	1c96 <sysclk_get_peripheral_bus_hz+0x92>
    1c54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1c58:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1c5c:	4298      	cmp	r0, r3
    1c5e:	f000 8147 	beq.w	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1c62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1c66:	f2c4 0100 	movt	r1, #16384	; 0x4000
    1c6a:	4288      	cmp	r0, r1
    1c6c:	d804      	bhi.n	1c78 <sysclk_get_peripheral_bus_hz+0x74>
    1c6e:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    1c72:	f040 8140 	bne.w	1ef6 <sysclk_get_peripheral_bus_hz+0x2f2>
    1c76:	e13b      	b.n	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1c78:	f04f 0200 	mov.w	r2, #0
    1c7c:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1c80:	4290      	cmp	r0, r2
    1c82:	f000 8135 	beq.w	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1c86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    1c8a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1c8e:	4298      	cmp	r0, r3
    1c90:	f040 8131 	bne.w	1ef6 <sysclk_get_peripheral_bus_hz+0x2f2>
    1c94:	e12c      	b.n	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1c96:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    1c9a:	f2c4 0101 	movt	r1, #16385	; 0x4001
    1c9e:	4288      	cmp	r0, r1
    1ca0:	f000 8126 	beq.w	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1ca4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    1ca8:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1cac:	4290      	cmp	r0, r2
    1cae:	d807      	bhi.n	1cc0 <sysclk_get_peripheral_bus_hz+0xbc>
    1cb0:	f44f 4304 	mov.w	r3, #33792	; 0x8400
    1cb4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1cb8:	4298      	cmp	r0, r3
    1cba:	f040 811c 	bne.w	1ef6 <sysclk_get_peripheral_bus_hz+0x2f2>
    1cbe:	e117      	b.n	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1cc0:	f44f 4144 	mov.w	r1, #50176	; 0xc400
    1cc4:	f2c4 0101 	movt	r1, #16385	; 0x4001
    1cc8:	4288      	cmp	r0, r1
    1cca:	f000 8111 	beq.w	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1cce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1cd2:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1cd6:	4290      	cmp	r0, r2
    1cd8:	f040 810d 	bne.w	1ef6 <sysclk_get_peripheral_bus_hz+0x2f2>
    1cdc:	e108      	b.n	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1cde:	f04f 0300 	mov.w	r3, #0
    1ce2:	f2c4 0304 	movt	r3, #16388	; 0x4004
    1ce6:	4298      	cmp	r0, r3
    1ce8:	f000 8102 	beq.w	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1cec:	f04f 0100 	mov.w	r1, #0
    1cf0:	f2c4 0104 	movt	r1, #16388	; 0x4004
    1cf4:	4288      	cmp	r0, r1
    1cf6:	d823      	bhi.n	1d40 <sysclk_get_peripheral_bus_hz+0x13c>
    1cf8:	f04f 0200 	mov.w	r2, #0
    1cfc:	f2c4 0203 	movt	r2, #16387	; 0x4003
    1d00:	4290      	cmp	r0, r2
    1d02:	f000 80f5 	beq.w	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1d06:	f04f 0300 	mov.w	r3, #0
    1d0a:	f2c4 0303 	movt	r3, #16387	; 0x4003
    1d0e:	4298      	cmp	r0, r3
    1d10:	d807      	bhi.n	1d22 <sysclk_get_peripheral_bus_hz+0x11e>
    1d12:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    1d16:	f2c4 0102 	movt	r1, #16386	; 0x4002
    1d1a:	4288      	cmp	r0, r1
    1d1c:	f040 80eb 	bne.w	1ef6 <sysclk_get_peripheral_bus_hz+0x2f2>
    1d20:	e0e6      	b.n	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1d22:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1d26:	f2c4 0203 	movt	r2, #16387	; 0x4003
    1d2a:	4290      	cmp	r0, r2
    1d2c:	f000 80e0 	beq.w	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1d30:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    1d34:	f2c4 0303 	movt	r3, #16387	; 0x4003
    1d38:	4298      	cmp	r0, r3
    1d3a:	f040 80dc 	bne.w	1ef6 <sysclk_get_peripheral_bus_hz+0x2f2>
    1d3e:	e0d7      	b.n	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1d40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1d44:	f2c4 0106 	movt	r1, #16390	; 0x4006
    1d48:	4288      	cmp	r0, r1
    1d4a:	f000 80d1 	beq.w	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1d4e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1d52:	f2c4 0206 	movt	r2, #16390	; 0x4006
    1d56:	4290      	cmp	r0, r2
    1d58:	d80e      	bhi.n	1d78 <sysclk_get_peripheral_bus_hz+0x174>
    1d5a:	f04f 0300 	mov.w	r3, #0
    1d5e:	f2c4 0306 	movt	r3, #16390	; 0x4006
    1d62:	4298      	cmp	r0, r3
    1d64:	f000 80c4 	beq.w	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1d68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    1d6c:	f2c4 0106 	movt	r1, #16390	; 0x4006
    1d70:	4288      	cmp	r0, r1
    1d72:	f040 80c0 	bne.w	1ef6 <sysclk_get_peripheral_bus_hz+0x2f2>
    1d76:	e0bb      	b.n	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1d78:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    1d7c:	f2c4 0206 	movt	r2, #16390	; 0x4006
    1d80:	4290      	cmp	r0, r2
    1d82:	f000 80b5 	beq.w	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1d86:	f04f 0300 	mov.w	r3, #0
    1d8a:	f2c4 0307 	movt	r3, #16391	; 0x4007
    1d8e:	4298      	cmp	r0, r3
    1d90:	f040 80b1 	bne.w	1ef6 <sysclk_get_peripheral_bus_hz+0x2f2>
    1d94:	e0ac      	b.n	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1d96:	f04f 0100 	mov.w	r1, #0
    1d9a:	f2c4 010e 	movt	r1, #16398	; 0x400e
    1d9e:	4288      	cmp	r0, r1
    1da0:	f000 80a6 	beq.w	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1da4:	f04f 0200 	mov.w	r2, #0
    1da8:	f2c4 020e 	movt	r2, #16398	; 0x400e
    1dac:	4290      	cmp	r0, r2
    1dae:	d84e      	bhi.n	1e4e <sysclk_get_peripheral_bus_hz+0x24a>
    1db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1db4:	f2c4 030a 	movt	r3, #16394	; 0x400a
    1db8:	4298      	cmp	r0, r3
    1dba:	f000 8099 	beq.w	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1dbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    1dc2:	f2c4 010a 	movt	r1, #16394	; 0x400a
    1dc6:	4288      	cmp	r0, r1
    1dc8:	d821      	bhi.n	1e0e <sysclk_get_peripheral_bus_hz+0x20a>
    1dca:	f04f 0200 	mov.w	r2, #0
    1dce:	f2c4 0208 	movt	r2, #16392	; 0x4008
    1dd2:	4290      	cmp	r0, r2
    1dd4:	f000 808c 	beq.w	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1dd8:	f04f 0300 	mov.w	r3, #0
    1ddc:	f2c4 0308 	movt	r3, #16392	; 0x4008
    1de0:	4298      	cmp	r0, r3
    1de2:	d807      	bhi.n	1df4 <sysclk_get_peripheral_bus_hz+0x1f0>
    1de4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    1de8:	f2c4 0107 	movt	r1, #16391	; 0x4007
    1dec:	4288      	cmp	r0, r1
    1dee:	f040 8082 	bne.w	1ef6 <sysclk_get_peripheral_bus_hz+0x2f2>
    1df2:	e07d      	b.n	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1df4:	f04f 0200 	mov.w	r2, #0
    1df8:	f2c4 020a 	movt	r2, #16394	; 0x400a
    1dfc:	4290      	cmp	r0, r2
    1dfe:	d077      	beq.n	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1e00:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1e04:	f2c4 030a 	movt	r3, #16394	; 0x400a
    1e08:	4298      	cmp	r0, r3
    1e0a:	d174      	bne.n	1ef6 <sysclk_get_peripheral_bus_hz+0x2f2>
    1e0c:	e070      	b.n	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1e0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    1e12:	f2c4 010a 	movt	r1, #16394	; 0x400a
    1e16:	4288      	cmp	r0, r1
    1e18:	d06a      	beq.n	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1e1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1e1e:	f2c4 020a 	movt	r2, #16394	; 0x400a
    1e22:	4290      	cmp	r0, r2
    1e24:	d806      	bhi.n	1e34 <sysclk_get_peripheral_bus_hz+0x230>
    1e26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    1e2a:	f2c4 030a 	movt	r3, #16394	; 0x400a
    1e2e:	4298      	cmp	r0, r3
    1e30:	d161      	bne.n	1ef6 <sysclk_get_peripheral_bus_hz+0x2f2>
    1e32:	e05d      	b.n	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1e34:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    1e38:	f2c4 010a 	movt	r1, #16394	; 0x400a
    1e3c:	4288      	cmp	r0, r1
    1e3e:	d057      	beq.n	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1e40:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
    1e44:	f2c4 020a 	movt	r2, #16394	; 0x400a
    1e48:	4290      	cmp	r0, r2
    1e4a:	d154      	bne.n	1ef6 <sysclk_get_peripheral_bus_hz+0x2f2>
    1e4c:	e050      	b.n	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1e4e:	f04f 0300 	mov.w	r3, #0
    1e52:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1e56:	4298      	cmp	r0, r3
    1e58:	d04a      	beq.n	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1e5a:	f04f 0100 	mov.w	r1, #0
    1e5e:	f2c4 010f 	movt	r1, #16399	; 0x400f
    1e62:	4288      	cmp	r0, r1
    1e64:	d81f      	bhi.n	1ea6 <sysclk_get_peripheral_bus_hz+0x2a2>
    1e66:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1e6a:	f2c4 020e 	movt	r2, #16398	; 0x400e
    1e6e:	4290      	cmp	r0, r2
    1e70:	d03e      	beq.n	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1e72:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1e76:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1e7a:	4298      	cmp	r0, r3
    1e7c:	d806      	bhi.n	1e8c <sysclk_get_peripheral_bus_hz+0x288>
    1e7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    1e82:	f2c4 010e 	movt	r1, #16398	; 0x400e
    1e86:	4288      	cmp	r0, r1
    1e88:	d135      	bne.n	1ef6 <sysclk_get_peripheral_bus_hz+0x2f2>
    1e8a:	e031      	b.n	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1e8c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    1e90:	f2c4 020e 	movt	r2, #16398	; 0x400e
    1e94:	4290      	cmp	r0, r2
    1e96:	d02b      	beq.n	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1e9c:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1ea0:	4298      	cmp	r0, r3
    1ea2:	d128      	bne.n	1ef6 <sysclk_get_peripheral_bus_hz+0x2f2>
    1ea4:	e024      	b.n	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1ea6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    1eaa:	f2c4 010f 	movt	r1, #16399	; 0x400f
    1eae:	4288      	cmp	r0, r1
    1eb0:	d01e      	beq.n	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1eb2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    1eb6:	f2c4 020f 	movt	r2, #16399	; 0x400f
    1eba:	4290      	cmp	r0, r2
    1ebc:	d80c      	bhi.n	1ed8 <sysclk_get_peripheral_bus_hz+0x2d4>
    1ebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ec2:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1ec6:	4298      	cmp	r0, r3
    1ec8:	d012      	beq.n	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1eca:	f44f 6100 	mov.w	r1, #2048	; 0x800
    1ece:	f2c4 010f 	movt	r1, #16399	; 0x400f
    1ed2:	4288      	cmp	r0, r1
    1ed4:	d10f      	bne.n	1ef6 <sysclk_get_peripheral_bus_hz+0x2f2>
    1ed6:	e00b      	b.n	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1ed8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1edc:	f2c4 020f 	movt	r2, #16399	; 0x400f
    1ee0:	4290      	cmp	r0, r2
    1ee2:	d005      	beq.n	1ef0 <sysclk_get_peripheral_bus_hz+0x2ec>
    1ee4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    1ee8:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1eec:	4298      	cmp	r0, r3
    1eee:	d102      	bne.n	1ef6 <sysclk_get_peripheral_bus_hz+0x2f2>
	case PARC_ADDR:
	case CATB_ADDR:
	case TWIM2_ADDR:
	case TWIM3_ADDR:
	case LCDCA_ADDR:
		return sysclk_get_pba_hz();
    1ef0:	f04f 7037 	mov.w	r0, #47972352	; 0x2dc0000
    1ef4:	4770      	bx	lr
	case PICOUART_ADDR:
		return sysclk_get_pbd_hz();

	default:
		Assert(false);
		return 0;
    1ef6:	f04f 0000 	mov.w	r0, #0
	}
}
    1efa:	4770      	bx	lr

00001efc <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
    1efc:	b508      	push	{r3, lr}
	switch ((uintptr_t)module) {
    1efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1f02:	f2c4 0307 	movt	r3, #16391	; 0x4007
    1f06:	4298      	cmp	r0, r3
    1f08:	f000 827f 	beq.w	240a <sysclk_enable_peripheral_clock+0x50e>
    1f0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1f10:	f2c4 0107 	movt	r1, #16391	; 0x4007
    1f14:	4288      	cmp	r0, r1
    1f16:	f200 80bb 	bhi.w	2090 <sysclk_enable_peripheral_clock+0x194>
    1f1a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1f1e:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1f22:	4290      	cmp	r0, r2
    1f24:	f000 81f2 	beq.w	230c <sysclk_enable_peripheral_clock+0x410>
    1f28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1f2c:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1f30:	4298      	cmp	r0, r3
    1f32:	d851      	bhi.n	1fd8 <sysclk_enable_peripheral_clock+0xdc>
    1f34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1f38:	f2c4 0101 	movt	r1, #16385	; 0x4001
    1f3c:	4288      	cmp	r0, r1
    1f3e:	f000 81b0 	beq.w	22a2 <sysclk_enable_peripheral_clock+0x3a6>
    1f42:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1f46:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1f4a:	4290      	cmp	r0, r2
    1f4c:	d820      	bhi.n	1f90 <sysclk_enable_peripheral_clock+0x94>
    1f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1f52:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1f56:	4298      	cmp	r0, r3
    1f58:	f000 8171 	beq.w	223e <sysclk_enable_peripheral_clock+0x342>
    1f5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1f60:	f2c4 0100 	movt	r1, #16384	; 0x4000
    1f64:	4288      	cmp	r0, r1
    1f66:	d804      	bhi.n	1f72 <sysclk_enable_peripheral_clock+0x76>
    1f68:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    1f6c:	f040 8334 	bne.w	25d8 <sysclk_enable_peripheral_clock+0x6dc>
    1f70:	e15d      	b.n	222e <sysclk_enable_peripheral_clock+0x332>
    1f72:	f04f 0300 	mov.w	r3, #0
    1f76:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f7a:	4298      	cmp	r0, r3
    1f7c:	f000 8167 	beq.w	224e <sysclk_enable_peripheral_clock+0x352>
    1f80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    1f84:	f2c4 0101 	movt	r1, #16385	; 0x4001
    1f88:	4288      	cmp	r0, r1
    1f8a:	f040 8325 	bne.w	25d8 <sysclk_enable_peripheral_clock+0x6dc>
    1f8e:	e173      	b.n	2278 <sysclk_enable_peripheral_clock+0x37c>
    1f90:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	4298      	cmp	r0, r3
    1f9a:	f000 8192 	beq.w	22c2 <sysclk_enable_peripheral_clock+0x3c6>
    1f9e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    1fa2:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1fa6:	4290      	cmp	r0, r2
    1fa8:	d807      	bhi.n	1fba <sysclk_enable_peripheral_clock+0xbe>
    1faa:	f44f 4104 	mov.w	r1, #33792	; 0x8400
    1fae:	f2c4 0101 	movt	r1, #16385	; 0x4001
    1fb2:	4288      	cmp	r0, r1
    1fb4:	f040 8310 	bne.w	25d8 <sysclk_enable_peripheral_clock+0x6dc>
    1fb8:	e17b      	b.n	22b2 <sysclk_enable_peripheral_clock+0x3b6>
    1fba:	f44f 4244 	mov.w	r2, #50176	; 0xc400
    1fbe:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1fc2:	4290      	cmp	r0, r2
    1fc4:	f000 8185 	beq.w	22d2 <sysclk_enable_peripheral_clock+0x3d6>
    1fc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    1fcc:	f2c4 0102 	movt	r1, #16386	; 0x4002
    1fd0:	4288      	cmp	r0, r1
    1fd2:	f040 8301 	bne.w	25d8 <sysclk_enable_peripheral_clock+0x6dc>
    1fd6:	e184      	b.n	22e2 <sysclk_enable_peripheral_clock+0x3e6>
    1fd8:	f04f 0200 	mov.w	r2, #0
    1fdc:	f2c4 0204 	movt	r2, #16388	; 0x4004
    1fe0:	4290      	cmp	r0, r2
    1fe2:	f000 81e2 	beq.w	23aa <sysclk_enable_peripheral_clock+0x4ae>
    1fe6:	f04f 0100 	mov.w	r1, #0
    1fea:	f2c4 0104 	movt	r1, #16388	; 0x4004
    1fee:	4288      	cmp	r0, r1
    1ff0:	d823      	bhi.n	203a <sysclk_enable_peripheral_clock+0x13e>
    1ff2:	f04f 0300 	mov.w	r3, #0
    1ff6:	f2c4 0303 	movt	r3, #16387	; 0x4003
    1ffa:	4298      	cmp	r0, r3
    1ffc:	f000 81b0 	beq.w	2360 <sysclk_enable_peripheral_clock+0x464>
    2000:	f04f 0200 	mov.w	r2, #0
    2004:	f2c4 0203 	movt	r2, #16387	; 0x4003
    2008:	4290      	cmp	r0, r2
    200a:	d807      	bhi.n	201c <sysclk_enable_peripheral_clock+0x120>
    200c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    2010:	f2c4 0102 	movt	r1, #16386	; 0x4002
    2014:	4288      	cmp	r0, r1
    2016:	f040 82df 	bne.w	25d8 <sysclk_enable_peripheral_clock+0x6dc>
    201a:	e18c      	b.n	2336 <sysclk_enable_peripheral_clock+0x43a>
    201c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2020:	f2c4 0203 	movt	r2, #16387	; 0x4003
    2024:	4290      	cmp	r0, r2
    2026:	f000 81b0 	beq.w	238a <sysclk_enable_peripheral_clock+0x48e>
    202a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    202e:	f2c4 0103 	movt	r1, #16387	; 0x4003
    2032:	4288      	cmp	r0, r1
    2034:	f040 82d0 	bne.w	25d8 <sysclk_enable_peripheral_clock+0x6dc>
    2038:	e1af      	b.n	239a <sysclk_enable_peripheral_clock+0x49e>
    203a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    203e:	f2c4 0306 	movt	r3, #16390	; 0x4006
    2042:	4298      	cmp	r0, r3
    2044:	f000 81c9 	beq.w	23da <sysclk_enable_peripheral_clock+0x4de>
    2048:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    204c:	f2c4 0106 	movt	r1, #16390	; 0x4006
    2050:	4288      	cmp	r0, r1
    2052:	d80e      	bhi.n	2072 <sysclk_enable_peripheral_clock+0x176>
    2054:	f04f 0200 	mov.w	r2, #0
    2058:	f2c4 0206 	movt	r2, #16390	; 0x4006
    205c:	4290      	cmp	r0, r2
    205e:	f000 81ac 	beq.w	23ba <sysclk_enable_peripheral_clock+0x4be>
    2062:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    2066:	f2c4 0306 	movt	r3, #16390	; 0x4006
    206a:	4298      	cmp	r0, r3
    206c:	f040 82b4 	bne.w	25d8 <sysclk_enable_peripheral_clock+0x6dc>
    2070:	e1ab      	b.n	23ca <sysclk_enable_peripheral_clock+0x4ce>
    2072:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    2076:	f2c4 0306 	movt	r3, #16390	; 0x4006
    207a:	4298      	cmp	r0, r3
    207c:	f000 81b5 	beq.w	23ea <sysclk_enable_peripheral_clock+0x4ee>
    2080:	f04f 0100 	mov.w	r1, #0
    2084:	f2c4 0107 	movt	r1, #16391	; 0x4007
    2088:	4288      	cmp	r0, r1
    208a:	f040 82a5 	bne.w	25d8 <sysclk_enable_peripheral_clock+0x6dc>
    208e:	e1b4      	b.n	23fa <sysclk_enable_peripheral_clock+0x4fe>
    2090:	f04f 0100 	mov.w	r1, #0
    2094:	f2c4 010e 	movt	r1, #16398	; 0x400e
    2098:	4288      	cmp	r0, r1
    209a:	f000 8232 	beq.w	2502 <sysclk_enable_peripheral_clock+0x606>
    209e:	f04f 0300 	mov.w	r3, #0
    20a2:	f2c4 030e 	movt	r3, #16398	; 0x400e
    20a6:	4298      	cmp	r0, r3
    20a8:	d85b      	bhi.n	2162 <sysclk_enable_peripheral_clock+0x266>
    20aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    20ae:	f2c4 020a 	movt	r2, #16394	; 0x400a
    20b2:	4290      	cmp	r0, r2
    20b4:	f000 81e2 	beq.w	247c <sysclk_enable_peripheral_clock+0x580>
    20b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    20bc:	f2c4 010a 	movt	r1, #16394	; 0x400a
    20c0:	4288      	cmp	r0, r1
    20c2:	d823      	bhi.n	210c <sysclk_enable_peripheral_clock+0x210>
    20c4:	f04f 0300 	mov.w	r3, #0
    20c8:	f2c4 0308 	movt	r3, #16392	; 0x4008
    20cc:	4298      	cmp	r0, r3
    20ce:	f000 81ac 	beq.w	242a <sysclk_enable_peripheral_clock+0x52e>
    20d2:	f04f 0200 	mov.w	r2, #0
    20d6:	f2c4 0208 	movt	r2, #16392	; 0x4008
    20da:	4290      	cmp	r0, r2
    20dc:	d807      	bhi.n	20ee <sysclk_enable_peripheral_clock+0x1f2>
    20de:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    20e2:	f2c4 0107 	movt	r1, #16391	; 0x4007
    20e6:	4288      	cmp	r0, r1
    20e8:	f040 8276 	bne.w	25d8 <sysclk_enable_peripheral_clock+0x6dc>
    20ec:	e195      	b.n	241a <sysclk_enable_peripheral_clock+0x51e>
    20ee:	f04f 0200 	mov.w	r2, #0
    20f2:	f2c4 020a 	movt	r2, #16394	; 0x400a
    20f6:	4290      	cmp	r0, r2
    20f8:	f000 819f 	beq.w	243a <sysclk_enable_peripheral_clock+0x53e>
    20fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
    2100:	f2c4 010a 	movt	r1, #16394	; 0x400a
    2104:	4288      	cmp	r0, r1
    2106:	f040 8267 	bne.w	25d8 <sysclk_enable_peripheral_clock+0x6dc>
    210a:	e1a6      	b.n	245a <sysclk_enable_peripheral_clock+0x55e>
    210c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    2110:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2114:	4298      	cmp	r0, r3
    2116:	f000 81db 	beq.w	24d0 <sysclk_enable_peripheral_clock+0x5d4>
    211a:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    211e:	f2c4 010a 	movt	r1, #16394	; 0x400a
    2122:	4288      	cmp	r0, r1
    2124:	d80e      	bhi.n	2144 <sysclk_enable_peripheral_clock+0x248>
    2126:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    212a:	f2c4 020a 	movt	r2, #16394	; 0x400a
    212e:	4290      	cmp	r0, r2
    2130:	f000 81ac 	beq.w	248c <sysclk_enable_peripheral_clock+0x590>
    2134:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    2138:	f2c4 030a 	movt	r3, #16394	; 0x400a
    213c:	4298      	cmp	r0, r3
    213e:	f040 824b 	bne.w	25d8 <sysclk_enable_peripheral_clock+0x6dc>
    2142:	e1b4      	b.n	24ae <sysclk_enable_peripheral_clock+0x5b2>
    2144:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
    2148:	f2c4 010a 	movt	r1, #16394	; 0x400a
    214c:	4288      	cmp	r0, r1
    214e:	f000 81d0 	beq.w	24f2 <sysclk_enable_peripheral_clock+0x5f6>
    2152:	f04f 0300 	mov.w	r3, #0
    2156:	f2c4 030b 	movt	r3, #16395	; 0x400b
    215a:	4298      	cmp	r0, r3
    215c:	f040 823c 	bne.w	25d8 <sysclk_enable_peripheral_clock+0x6dc>
    2160:	e05b      	b.n	221a <sysclk_enable_peripheral_clock+0x31e>
    2162:	f04f 0300 	mov.w	r3, #0
    2166:	f2c4 030f 	movt	r3, #16399	; 0x400f
    216a:	4298      	cmp	r0, r3
    216c:	f000 81fa 	beq.w	2564 <sysclk_enable_peripheral_clock+0x668>
    2170:	f04f 0200 	mov.w	r2, #0
    2174:	f2c4 020f 	movt	r2, #16399	; 0x400f
    2178:	4290      	cmp	r0, r2
    217a:	d823      	bhi.n	21c4 <sysclk_enable_peripheral_clock+0x2c8>
    217c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2180:	f2c4 010e 	movt	r1, #16398	; 0x400e
    2184:	4288      	cmp	r0, r1
    2186:	f000 81d0 	beq.w	252a <sysclk_enable_peripheral_clock+0x62e>
    218a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    218e:	f2c4 030e 	movt	r3, #16398	; 0x400e
    2192:	4298      	cmp	r0, r3
    2194:	d807      	bhi.n	21a6 <sysclk_enable_peripheral_clock+0x2aa>
    2196:	f44f 6280 	mov.w	r2, #1024	; 0x400
    219a:	f2c4 020e 	movt	r2, #16398	; 0x400e
    219e:	4290      	cmp	r0, r2
    21a0:	f040 821a 	bne.w	25d8 <sysclk_enable_peripheral_clock+0x6dc>
    21a4:	e1b7      	b.n	2516 <sysclk_enable_peripheral_clock+0x61a>
    21a6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    21aa:	f2c4 010e 	movt	r1, #16398	; 0x400e
    21ae:	4288      	cmp	r0, r1
    21b0:	f000 81c5 	beq.w	253e <sysclk_enable_peripheral_clock+0x642>
    21b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    21b8:	f2c4 020e 	movt	r2, #16398	; 0x400e
    21bc:	4290      	cmp	r0, r2
    21be:	f040 820b 	bne.w	25d8 <sysclk_enable_peripheral_clock+0x6dc>
    21c2:	e1c6      	b.n	2552 <sysclk_enable_peripheral_clock+0x656>
    21c4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    21c8:	f2c4 010f 	movt	r1, #16399	; 0x400f
    21cc:	4288      	cmp	r0, r1
    21ce:	f000 81e7 	beq.w	25a0 <sysclk_enable_peripheral_clock+0x6a4>
    21d2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    21d6:	f2c4 020f 	movt	r2, #16399	; 0x400f
    21da:	4290      	cmp	r0, r2
    21dc:	d80e      	bhi.n	21fc <sysclk_enable_peripheral_clock+0x300>
    21de:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21e2:	f2c4 030f 	movt	r3, #16399	; 0x400f
    21e6:	4298      	cmp	r0, r3
    21e8:	f000 81c6 	beq.w	2578 <sysclk_enable_peripheral_clock+0x67c>
    21ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
    21f0:	f2c4 010f 	movt	r1, #16399	; 0x400f
    21f4:	4288      	cmp	r0, r1
    21f6:	f040 81ef 	bne.w	25d8 <sysclk_enable_peripheral_clock+0x6dc>
    21fa:	e1c7      	b.n	258c <sysclk_enable_peripheral_clock+0x690>
    21fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    2200:	f2c4 010f 	movt	r1, #16399	; 0x400f
    2204:	4288      	cmp	r0, r1
    2206:	f000 81d5 	beq.w	25b4 <sysclk_enable_peripheral_clock+0x6b8>
    220a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
    220e:	f2c4 020f 	movt	r2, #16399	; 0x400f
    2212:	4290      	cmp	r0, r2
    2214:	f040 81e0 	bne.w	25d8 <sysclk_enable_peripheral_clock+0x6dc>
    2218:	e1d6      	b.n	25c8 <sysclk_enable_peripheral_clock+0x6cc>
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    221a:	f04f 0001 	mov.w	r0, #1
    221e:	f04f 0109 	mov.w	r1, #9
    2222:	f641 12b1 	movw	r2, #6577	; 0x19b1
    2226:	f2c0 0200 	movt	r2, #0
    222a:	4790      	blx	r2
    222c:	bd08      	pop	{r3, pc}
	case AESA_ADDR:
		sysclk_enable_hsb_module(SYSCLK_AESA_HSB);
		break;

	case IISC_ADDR:
		sysclk_enable_pba_module(SYSCLK_IISC);
    222e:	f04f 0000 	mov.w	r0, #0
    2232:	f641 2285 	movw	r2, #6789	; 0x1a85
    2236:	f2c0 0200 	movt	r2, #0
    223a:	4790      	blx	r2
		break;
    223c:	bd08      	pop	{r3, pc}

	case SPI_ADDR:
		sysclk_enable_pba_module(SYSCLK_SPI);
    223e:	f04f 0001 	mov.w	r0, #1
    2242:	f641 2185 	movw	r1, #6789	; 0x1a85
    2246:	f2c0 0100 	movt	r1, #0
    224a:	4788      	blx	r1
		break;
    224c:	bd08      	pop	{r3, pc}

	case TC0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TC0);
    224e:	f04f 0002 	mov.w	r0, #2
    2252:	f641 2385 	movw	r3, #6789	; 0x1a85
    2256:	f2c0 0300 	movt	r3, #0
    225a:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    225c:	f04f 0000 	mov.w	r0, #0
    2260:	f2c4 000e 	movt	r0, #16398	; 0x400e
    2264:	6c01      	ldr	r1, [r0, #64]	; 0x40
	temp_mask |= mask;
    2266:	f041 0355 	orr.w	r3, r1, #85	; 0x55
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    226a:	f04f 0240 	mov.w	r2, #64	; 0x40
    226e:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    2272:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    2274:	6403      	str	r3, [r0, #64]	; 0x40
    2276:	bd08      	pop	{r3, pc}
			| PBA_DIVMASK_TIMER_CLOCK5
			);
		break;

	case TC1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TC1);
    2278:	f04f 0003 	mov.w	r0, #3
    227c:	f641 2285 	movw	r2, #6789	; 0x1a85
    2280:	f2c0 0200 	movt	r2, #0
    2284:	4790      	blx	r2
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    2286:	f04f 0000 	mov.w	r0, #0
    228a:	f2c4 000e 	movt	r0, #16398	; 0x400e
    228e:	6c03      	ldr	r3, [r0, #64]	; 0x40
	temp_mask |= mask;
    2290:	f043 0155 	orr.w	r1, r3, #85	; 0x55
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    2294:	f04f 0240 	mov.w	r2, #64	; 0x40
    2298:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    229c:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    229e:	6401      	str	r1, [r0, #64]	; 0x40
    22a0:	bd08      	pop	{r3, pc}
			| PBA_DIVMASK_TIMER_CLOCK5
			);
		break;

	case TWIM0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM0);
    22a2:	f04f 0004 	mov.w	r0, #4
    22a6:	f641 2385 	movw	r3, #6789	; 0x1a85
    22aa:	f2c0 0300 	movt	r3, #0
    22ae:	4798      	blx	r3
		break;
    22b0:	bd08      	pop	{r3, pc}

	case TWIS0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIS0);
    22b2:	f04f 0005 	mov.w	r0, #5
    22b6:	f641 2385 	movw	r3, #6789	; 0x1a85
    22ba:	f2c0 0300 	movt	r3, #0
    22be:	4798      	blx	r3
		break;
    22c0:	bd08      	pop	{r3, pc}

	case TWIM1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM1);
    22c2:	f04f 0006 	mov.w	r0, #6
    22c6:	f641 2185 	movw	r1, #6789	; 0x1a85
    22ca:	f2c0 0100 	movt	r1, #0
    22ce:	4788      	blx	r1
		break;
    22d0:	bd08      	pop	{r3, pc}

	case TWIS1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIS1);
    22d2:	f04f 0007 	mov.w	r0, #7
    22d6:	f641 2285 	movw	r2, #6789	; 0x1a85
    22da:	f2c0 0200 	movt	r2, #0
    22de:	4790      	blx	r2
		break;
    22e0:	bd08      	pop	{r3, pc}

	case USART0_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART0);
    22e2:	f04f 0008 	mov.w	r0, #8
    22e6:	f641 2385 	movw	r3, #6789	; 0x1a85
    22ea:	f2c0 0300 	movt	r3, #0
    22ee:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    22f0:	f04f 0000 	mov.w	r0, #0
    22f4:	f2c4 000e 	movt	r0, #16398	; 0x400e
    22f8:	6c02      	ldr	r2, [r0, #64]	; 0x40
	temp_mask |= mask;
    22fa:	f042 0104 	orr.w	r1, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    22fe:	f04f 0340 	mov.w	r3, #64	; 0x40
    2302:	f6ca 2300 	movt	r3, #43520	; 0xaa00
    2306:	6583      	str	r3, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    2308:	6401      	str	r1, [r0, #64]	; 0x40
    230a:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART1_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART1);
    230c:	f04f 0009 	mov.w	r0, #9
    2310:	f641 2385 	movw	r3, #6789	; 0x1a85
    2314:	f2c0 0300 	movt	r3, #0
    2318:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    231a:	f04f 0000 	mov.w	r0, #0
    231e:	f2c4 000e 	movt	r0, #16398	; 0x400e
    2322:	6c01      	ldr	r1, [r0, #64]	; 0x40
	temp_mask |= mask;
    2324:	f041 0304 	orr.w	r3, r1, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    2328:	f04f 0240 	mov.w	r2, #64	; 0x40
    232c:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    2330:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    2332:	6403      	str	r3, [r0, #64]	; 0x40
    2334:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART2_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART2);
    2336:	f04f 000a 	mov.w	r0, #10
    233a:	f641 2385 	movw	r3, #6789	; 0x1a85
    233e:	f2c0 0300 	movt	r3, #0
    2342:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    2344:	f04f 0000 	mov.w	r0, #0
    2348:	f2c4 000e 	movt	r0, #16398	; 0x400e
    234c:	6c02      	ldr	r2, [r0, #64]	; 0x40
	temp_mask |= mask;
    234e:	f042 0104 	orr.w	r1, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    2352:	f04f 0340 	mov.w	r3, #64	; 0x40
    2356:	f6ca 2300 	movt	r3, #43520	; 0xaa00
    235a:	6583      	str	r3, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    235c:	6401      	str	r1, [r0, #64]	; 0x40
    235e:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART3_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART3);
    2360:	f04f 000b 	mov.w	r0, #11
    2364:	f641 2185 	movw	r1, #6789	; 0x1a85
    2368:	f2c0 0100 	movt	r1, #0
    236c:	4788      	blx	r1
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    236e:	f04f 0000 	mov.w	r0, #0
    2372:	f2c4 000e 	movt	r0, #16398	; 0x400e
    2376:	6c03      	ldr	r3, [r0, #64]	; 0x40
	temp_mask |= mask;
    2378:	f043 0104 	orr.w	r1, r3, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    237c:	f04f 0240 	mov.w	r2, #64	; 0x40
    2380:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    2384:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    2386:	6401      	str	r1, [r0, #64]	; 0x40
    2388:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case ADCIFE_ADDR:
		sysclk_enable_pba_module(SYSCLK_ADCIFE);
    238a:	f04f 000c 	mov.w	r0, #12
    238e:	f641 2285 	movw	r2, #6789	; 0x1a85
    2392:	f2c0 0200 	movt	r2, #0
    2396:	4790      	blx	r2
		break;
    2398:	bd08      	pop	{r3, pc}

	case DACC_ADDR:
		sysclk_enable_pba_module(SYSCLK_DACC);
    239a:	f04f 000d 	mov.w	r0, #13
    239e:	f641 2385 	movw	r3, #6789	; 0x1a85
    23a2:	f2c0 0300 	movt	r3, #0
    23a6:	4798      	blx	r3
		break;
    23a8:	bd08      	pop	{r3, pc}

	case ACIFC_ADDR:
		sysclk_enable_pba_module(SYSCLK_ACIFC);
    23aa:	f04f 000e 	mov.w	r0, #14
    23ae:	f641 2285 	movw	r2, #6789	; 0x1a85
    23b2:	f2c0 0200 	movt	r2, #0
    23b6:	4790      	blx	r2
		break;
    23b8:	bd08      	pop	{r3, pc}

	case GLOC_ADDR:
		sysclk_enable_pba_module(SYSCLK_GLOC);
    23ba:	f04f 000f 	mov.w	r0, #15
    23be:	f641 2285 	movw	r2, #6789	; 0x1a85
    23c2:	f2c0 0200 	movt	r2, #0
    23c6:	4790      	blx	r2
		break;
    23c8:	bd08      	pop	{r3, pc}

	case ABDACB_ADDR:
		sysclk_enable_pba_module(SYSCLK_ABDACB);
    23ca:	f04f 0010 	mov.w	r0, #16
    23ce:	f641 2185 	movw	r1, #6789	; 0x1a85
    23d2:	f2c0 0100 	movt	r1, #0
    23d6:	4788      	blx	r1
		break;
    23d8:	bd08      	pop	{r3, pc}

	case TRNG_ADDR:
		sysclk_enable_pba_module(SYSCLK_TRNG);
    23da:	f04f 0011 	mov.w	r0, #17
    23de:	f641 2185 	movw	r1, #6789	; 0x1a85
    23e2:	f2c0 0100 	movt	r1, #0
    23e6:	4788      	blx	r1
		break;
    23e8:	bd08      	pop	{r3, pc}

	case PARC_ADDR:
		sysclk_enable_pba_module(SYSCLK_PARC);
    23ea:	f04f 0012 	mov.w	r0, #18
    23ee:	f641 2385 	movw	r3, #6789	; 0x1a85
    23f2:	f2c0 0300 	movt	r3, #0
    23f6:	4798      	blx	r3
		break;
    23f8:	bd08      	pop	{r3, pc}

	case CATB_ADDR:
		sysclk_enable_pba_module(SYSCLK_CATB);
    23fa:	f04f 0013 	mov.w	r0, #19
    23fe:	f641 2285 	movw	r2, #6789	; 0x1a85
    2402:	f2c0 0200 	movt	r2, #0
    2406:	4790      	blx	r2
		break;
    2408:	bd08      	pop	{r3, pc}

	case TWIM2_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM2);
    240a:	f04f 0015 	mov.w	r0, #21
    240e:	f641 2185 	movw	r1, #6789	; 0x1a85
    2412:	f2c0 0100 	movt	r1, #0
    2416:	4788      	blx	r1
		break;
    2418:	bd08      	pop	{r3, pc}

	case TWIM3_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM3);
    241a:	f04f 0016 	mov.w	r0, #22
    241e:	f641 2385 	movw	r3, #6789	; 0x1a85
    2422:	f2c0 0300 	movt	r3, #0
    2426:	4798      	blx	r3
		break;
    2428:	bd08      	pop	{r3, pc}

	case LCDCA_ADDR:
		sysclk_enable_pba_module(SYSCLK_LCDCA);
    242a:	f04f 0017 	mov.w	r0, #23
    242e:	f641 2285 	movw	r2, #6789	; 0x1a85
    2432:	f2c0 0200 	movt	r2, #0
    2436:	4790      	blx	r2
		break;
    2438:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    243a:	f04f 0001 	mov.w	r0, #1
    243e:	4601      	mov	r1, r0
    2440:	f641 13b1 	movw	r3, #6577	; 0x19b1
    2444:	f2c0 0300 	movt	r3, #0
    2448:	4798      	blx	r3

	case HFLASHC_ADDR:
		sysclk_enable_hsb_module(SYSCLK_HFLASHC_DATA);
		sysclk_enable_pbb_module(SYSCLK_HFLASHC_REGS);
    244a:	f04f 0000 	mov.w	r0, #0
    244e:	f641 3145 	movw	r1, #6981	; 0x1b45
    2452:	f2c0 0100 	movt	r1, #0
    2456:	4788      	blx	r1
		break;
    2458:	bd08      	pop	{r3, pc}
    245a:	f04f 0001 	mov.w	r0, #1
    245e:	f04f 0102 	mov.w	r1, #2
    2462:	f641 13b1 	movw	r3, #6577	; 0x19b1
    2466:	f2c0 0300 	movt	r3, #0
    246a:	4798      	blx	r3

	case HCACHE_ADDR:
		sysclk_enable_hsb_module(SYSCLK_HRAMC1_DATA);
		sysclk_enable_pbb_module(SYSCLK_HRAMC1_REGS);
    246c:	f04f 0001 	mov.w	r0, #1
    2470:	f641 3245 	movw	r2, #6981	; 0x1b45
    2474:	f2c0 0200 	movt	r2, #0
    2478:	4790      	blx	r2
		break;
    247a:	bd08      	pop	{r3, pc}

	case HMATRIX_ADDR:
		sysclk_enable_pbb_module(SYSCLK_HMATRIX);
    247c:	f04f 0002 	mov.w	r0, #2
    2480:	f641 3145 	movw	r1, #6981	; 0x1b45
    2484:	f2c0 0100 	movt	r1, #0
    2488:	4788      	blx	r1
		break;
    248a:	bd08      	pop	{r3, pc}
    248c:	f04f 0001 	mov.w	r0, #1
    2490:	f04f 0100 	mov.w	r1, #0
    2494:	f641 13b1 	movw	r3, #6577	; 0x19b1
    2498:	f2c0 0300 	movt	r3, #0
    249c:	4798      	blx	r3

	case PDCA_ADDR:
		sysclk_enable_hsb_module(SYSCLK_PDCA_HSB);
		sysclk_enable_pbb_module(SYSCLK_PDCA_PB);
    249e:	f04f 0003 	mov.w	r0, #3
    24a2:	f641 3245 	movw	r2, #6981	; 0x1b45
    24a6:	f2c0 0200 	movt	r2, #0
    24aa:	4790      	blx	r2
		break;
    24ac:	bd08      	pop	{r3, pc}
    24ae:	f04f 0001 	mov.w	r0, #1
    24b2:	f04f 0104 	mov.w	r1, #4
    24b6:	f641 12b1 	movw	r2, #6577	; 0x19b1
    24ba:	f2c0 0200 	movt	r2, #0
    24be:	4790      	blx	r2

	case CRCCU_ADDR:
		sysclk_enable_hsb_module(SYSCLK_CRCCU_DATA);
		sysclk_enable_pbb_module(SYSCLK_CRCCU_REGS);
    24c0:	f04f 0004 	mov.w	r0, #4
    24c4:	f641 3145 	movw	r1, #6981	; 0x1b45
    24c8:	f2c0 0100 	movt	r1, #0
    24cc:	4788      	blx	r1
		break;
    24ce:	bd08      	pop	{r3, pc}
    24d0:	f04f 0001 	mov.w	r0, #1
    24d4:	f04f 0103 	mov.w	r1, #3
    24d8:	f641 13b1 	movw	r3, #6577	; 0x19b1
    24dc:	f2c0 0300 	movt	r3, #0
    24e0:	4798      	blx	r3

	case USBC_ADDR:
		sysclk_enable_hsb_module(SYSCLK_USBC_DATA);
		sysclk_enable_pbb_module(SYSCLK_USBC_REGS);
    24e2:	f04f 0005 	mov.w	r0, #5
    24e6:	f641 3245 	movw	r2, #6981	; 0x1b45
    24ea:	f2c0 0200 	movt	r2, #0
    24ee:	4790      	blx	r2
		break;
    24f0:	bd08      	pop	{r3, pc}

	case PEVC_ADDR:
		sysclk_enable_pbb_module(SYSCLK_PEVC);
    24f2:	f04f 0006 	mov.w	r0, #6
    24f6:	f641 3145 	movw	r1, #6981	; 0x1b45
    24fa:	f2c0 0100 	movt	r1, #0
    24fe:	4788      	blx	r1
		break;
    2500:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbc_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_PBC, module_index);
    2502:	f04f 0004 	mov.w	r0, #4
    2506:	f04f 0100 	mov.w	r1, #0
    250a:	f641 13b1 	movw	r3, #6577	; 0x19b1
    250e:	f2c0 0300 	movt	r3, #0
    2512:	4798      	blx	r3
    2514:	bd08      	pop	{r3, pc}
    2516:	f04f 0004 	mov.w	r0, #4
    251a:	f04f 0101 	mov.w	r1, #1
    251e:	f641 13b1 	movw	r3, #6577	; 0x19b1
    2522:	f2c0 0300 	movt	r3, #0
    2526:	4798      	blx	r3
    2528:	bd08      	pop	{r3, pc}
    252a:	f04f 0004 	mov.w	r0, #4
    252e:	f04f 0102 	mov.w	r1, #2
    2532:	f641 13b1 	movw	r3, #6577	; 0x19b1
    2536:	f2c0 0300 	movt	r3, #0
    253a:	4798      	blx	r3
    253c:	bd08      	pop	{r3, pc}
    253e:	f04f 0004 	mov.w	r0, #4
    2542:	f04f 0103 	mov.w	r1, #3
    2546:	f641 12b1 	movw	r2, #6577	; 0x19b1
    254a:	f2c0 0200 	movt	r2, #0
    254e:	4790      	blx	r2
    2550:	bd08      	pop	{r3, pc}
    2552:	f04f 0004 	mov.w	r0, #4
    2556:	4601      	mov	r1, r0
    2558:	f641 13b1 	movw	r3, #6577	; 0x19b1
    255c:	f2c0 0300 	movt	r3, #0
    2560:	4798      	blx	r3
    2562:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbd_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_PBD, module_index);
    2564:	f04f 0005 	mov.w	r0, #5
    2568:	f04f 0100 	mov.w	r1, #0
    256c:	f641 12b1 	movw	r2, #6577	; 0x19b1
    2570:	f2c0 0200 	movt	r2, #0
    2574:	4790      	blx	r2
    2576:	bd08      	pop	{r3, pc}
    2578:	f04f 0005 	mov.w	r0, #5
    257c:	f04f 0101 	mov.w	r1, #1
    2580:	f641 13b1 	movw	r3, #6577	; 0x19b1
    2584:	f2c0 0300 	movt	r3, #0
    2588:	4798      	blx	r3
    258a:	bd08      	pop	{r3, pc}
    258c:	f04f 0005 	mov.w	r0, #5
    2590:	f04f 0102 	mov.w	r1, #2
    2594:	f641 12b1 	movw	r2, #6577	; 0x19b1
    2598:	f2c0 0200 	movt	r2, #0
    259c:	4790      	blx	r2
    259e:	bd08      	pop	{r3, pc}
    25a0:	f04f 0005 	mov.w	r0, #5
    25a4:	f04f 0103 	mov.w	r1, #3
    25a8:	f641 13b1 	movw	r3, #6577	; 0x19b1
    25ac:	f2c0 0300 	movt	r3, #0
    25b0:	4798      	blx	r3
    25b2:	bd08      	pop	{r3, pc}
    25b4:	f04f 0005 	mov.w	r0, #5
    25b8:	f04f 0104 	mov.w	r1, #4
    25bc:	f641 12b1 	movw	r2, #6577	; 0x19b1
    25c0:	f2c0 0200 	movt	r2, #0
    25c4:	4790      	blx	r2
    25c6:	bd08      	pop	{r3, pc}
    25c8:	f04f 0005 	mov.w	r0, #5
    25cc:	4601      	mov	r1, r0
    25ce:	f641 13b1 	movw	r3, #6577	; 0x19b1
    25d2:	f2c0 0300 	movt	r3, #0
    25d6:	4798      	blx	r3
    25d8:	bd08      	pop	{r3, pc}
    25da:	bf00      	nop

000025dc <sysclk_disable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be disabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
    25dc:	b508      	push	{r3, lr}
	switch ((uintptr_t)module) {
    25de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    25e2:	f2c4 0307 	movt	r3, #16391	; 0x4007
    25e6:	4298      	cmp	r0, r3
    25e8:	f000 8231 	beq.w	2a4e <sysclk_disable_peripheral_clock+0x472>
    25ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    25f0:	f2c4 0107 	movt	r1, #16391	; 0x4007
    25f4:	4288      	cmp	r0, r1
    25f6:	f200 80bb 	bhi.w	2770 <sysclk_disable_peripheral_clock+0x194>
    25fa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    25fe:	f2c4 0202 	movt	r2, #16386	; 0x4002
    2602:	4290      	cmp	r0, r2
    2604:	f000 81cb 	beq.w	299e <sysclk_disable_peripheral_clock+0x3c2>
    2608:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    260c:	f2c4 0302 	movt	r3, #16386	; 0x4002
    2610:	4298      	cmp	r0, r3
    2612:	d851      	bhi.n	26b8 <sysclk_disable_peripheral_clock+0xdc>
    2614:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2618:	f2c4 0101 	movt	r1, #16385	; 0x4001
    261c:	4288      	cmp	r0, r1
    261e:	f000 8196 	beq.w	294e <sysclk_disable_peripheral_clock+0x372>
    2622:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2626:	f2c4 0201 	movt	r2, #16385	; 0x4001
    262a:	4290      	cmp	r0, r2
    262c:	d820      	bhi.n	2670 <sysclk_disable_peripheral_clock+0x94>
    262e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2632:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2636:	4298      	cmp	r0, r3
    2638:	f000 8171 	beq.w	291e <sysclk_disable_peripheral_clock+0x342>
    263c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2640:	f2c4 0100 	movt	r1, #16384	; 0x4000
    2644:	4288      	cmp	r0, r1
    2646:	d804      	bhi.n	2652 <sysclk_disable_peripheral_clock+0x76>
    2648:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    264c:	f040 82f3 	bne.w	2c36 <sysclk_disable_peripheral_clock+0x65a>
    2650:	e15d      	b.n	290e <sysclk_disable_peripheral_clock+0x332>
    2652:	f04f 0300 	mov.w	r3, #0
    2656:	f2c4 0301 	movt	r3, #16385	; 0x4001
    265a:	4298      	cmp	r0, r3
    265c:	f000 8167 	beq.w	292e <sysclk_disable_peripheral_clock+0x352>
    2660:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    2664:	f2c4 0101 	movt	r1, #16385	; 0x4001
    2668:	4288      	cmp	r0, r1
    266a:	f040 82e4 	bne.w	2c36 <sysclk_disable_peripheral_clock+0x65a>
    266e:	e166      	b.n	293e <sysclk_disable_peripheral_clock+0x362>
    2670:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    2674:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2678:	4290      	cmp	r0, r2
    267a:	f000 8178 	beq.w	296e <sysclk_disable_peripheral_clock+0x392>
    267e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    2682:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2686:	4298      	cmp	r0, r3
    2688:	d807      	bhi.n	269a <sysclk_disable_peripheral_clock+0xbe>
    268a:	f44f 4104 	mov.w	r1, #33792	; 0x8400
    268e:	f2c4 0101 	movt	r1, #16385	; 0x4001
    2692:	4288      	cmp	r0, r1
    2694:	f040 82cf 	bne.w	2c36 <sysclk_disable_peripheral_clock+0x65a>
    2698:	e161      	b.n	295e <sysclk_disable_peripheral_clock+0x382>
    269a:	f44f 4344 	mov.w	r3, #50176	; 0xc400
    269e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    26a2:	4298      	cmp	r0, r3
    26a4:	f000 816b 	beq.w	297e <sysclk_disable_peripheral_clock+0x3a2>
    26a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    26ac:	f2c4 0102 	movt	r1, #16386	; 0x4002
    26b0:	4288      	cmp	r0, r1
    26b2:	f040 82c0 	bne.w	2c36 <sysclk_disable_peripheral_clock+0x65a>
    26b6:	e16a      	b.n	298e <sysclk_disable_peripheral_clock+0x3b2>
    26b8:	f04f 0300 	mov.w	r3, #0
    26bc:	f2c4 0304 	movt	r3, #16388	; 0x4004
    26c0:	4298      	cmp	r0, r3
    26c2:	f000 8194 	beq.w	29ee <sysclk_disable_peripheral_clock+0x412>
    26c6:	f04f 0100 	mov.w	r1, #0
    26ca:	f2c4 0104 	movt	r1, #16388	; 0x4004
    26ce:	4288      	cmp	r0, r1
    26d0:	d823      	bhi.n	271a <sysclk_disable_peripheral_clock+0x13e>
    26d2:	f04f 0200 	mov.w	r2, #0
    26d6:	f2c4 0203 	movt	r2, #16387	; 0x4003
    26da:	4290      	cmp	r0, r2
    26dc:	f000 816f 	beq.w	29be <sysclk_disable_peripheral_clock+0x3e2>
    26e0:	f04f 0300 	mov.w	r3, #0
    26e4:	f2c4 0303 	movt	r3, #16387	; 0x4003
    26e8:	4298      	cmp	r0, r3
    26ea:	d807      	bhi.n	26fc <sysclk_disable_peripheral_clock+0x120>
    26ec:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    26f0:	f2c4 0102 	movt	r1, #16386	; 0x4002
    26f4:	4288      	cmp	r0, r1
    26f6:	f040 829e 	bne.w	2c36 <sysclk_disable_peripheral_clock+0x65a>
    26fa:	e158      	b.n	29ae <sysclk_disable_peripheral_clock+0x3d2>
    26fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2700:	f2c4 0303 	movt	r3, #16387	; 0x4003
    2704:	4298      	cmp	r0, r3
    2706:	f000 8162 	beq.w	29ce <sysclk_disable_peripheral_clock+0x3f2>
    270a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    270e:	f2c4 0103 	movt	r1, #16387	; 0x4003
    2712:	4288      	cmp	r0, r1
    2714:	f040 828f 	bne.w	2c36 <sysclk_disable_peripheral_clock+0x65a>
    2718:	e161      	b.n	29de <sysclk_disable_peripheral_clock+0x402>
    271a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    271e:	f2c4 0206 	movt	r2, #16390	; 0x4006
    2722:	4290      	cmp	r0, r2
    2724:	f000 817b 	beq.w	2a1e <sysclk_disable_peripheral_clock+0x442>
    2728:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    272c:	f2c4 0306 	movt	r3, #16390	; 0x4006
    2730:	4298      	cmp	r0, r3
    2732:	d80e      	bhi.n	2752 <sysclk_disable_peripheral_clock+0x176>
    2734:	f04f 0100 	mov.w	r1, #0
    2738:	f2c4 0106 	movt	r1, #16390	; 0x4006
    273c:	4288      	cmp	r0, r1
    273e:	f000 815e 	beq.w	29fe <sysclk_disable_peripheral_clock+0x422>
    2742:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2746:	f2c4 0206 	movt	r2, #16390	; 0x4006
    274a:	4290      	cmp	r0, r2
    274c:	f040 8273 	bne.w	2c36 <sysclk_disable_peripheral_clock+0x65a>
    2750:	e15d      	b.n	2a0e <sysclk_disable_peripheral_clock+0x432>
    2752:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    2756:	f2c4 0206 	movt	r2, #16390	; 0x4006
    275a:	4290      	cmp	r0, r2
    275c:	f000 8167 	beq.w	2a2e <sysclk_disable_peripheral_clock+0x452>
    2760:	f04f 0300 	mov.w	r3, #0
    2764:	f2c4 0307 	movt	r3, #16391	; 0x4007
    2768:	4298      	cmp	r0, r3
    276a:	f040 8264 	bne.w	2c36 <sysclk_disable_peripheral_clock+0x65a>
    276e:	e166      	b.n	2a3e <sysclk_disable_peripheral_clock+0x462>
    2770:	f04f 0300 	mov.w	r3, #0
    2774:	f2c4 030e 	movt	r3, #16398	; 0x400e
    2778:	4298      	cmp	r0, r3
    277a:	f000 81dc 	beq.w	2b36 <sysclk_disable_peripheral_clock+0x55a>
    277e:	f04f 0100 	mov.w	r1, #0
    2782:	f2c4 010e 	movt	r1, #16398	; 0x400e
    2786:	4288      	cmp	r0, r1
    2788:	d85b      	bhi.n	2842 <sysclk_disable_peripheral_clock+0x266>
    278a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    278e:	f2c4 020a 	movt	r2, #16394	; 0x400a
    2792:	4290      	cmp	r0, r2
    2794:	f000 818c 	beq.w	2ab0 <sysclk_disable_peripheral_clock+0x4d4>
    2798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    279c:	f2c4 030a 	movt	r3, #16394	; 0x400a
    27a0:	4298      	cmp	r0, r3
    27a2:	d823      	bhi.n	27ec <sysclk_disable_peripheral_clock+0x210>
    27a4:	f04f 0100 	mov.w	r1, #0
    27a8:	f2c4 0108 	movt	r1, #16392	; 0x4008
    27ac:	4288      	cmp	r0, r1
    27ae:	f000 815e 	beq.w	2a6e <sysclk_disable_peripheral_clock+0x492>
    27b2:	f04f 0200 	mov.w	r2, #0
    27b6:	f2c4 0208 	movt	r2, #16392	; 0x4008
    27ba:	4290      	cmp	r0, r2
    27bc:	d807      	bhi.n	27ce <sysclk_disable_peripheral_clock+0x1f2>
    27be:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    27c2:	f2c4 0307 	movt	r3, #16391	; 0x4007
    27c6:	4298      	cmp	r0, r3
    27c8:	f040 8235 	bne.w	2c36 <sysclk_disable_peripheral_clock+0x65a>
    27cc:	e147      	b.n	2a5e <sysclk_disable_peripheral_clock+0x482>
    27ce:	f04f 0200 	mov.w	r2, #0
    27d2:	f2c4 020a 	movt	r2, #16394	; 0x400a
    27d6:	4290      	cmp	r0, r2
    27d8:	f000 8151 	beq.w	2a7e <sysclk_disable_peripheral_clock+0x4a2>
    27dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    27e0:	f2c4 030a 	movt	r3, #16394	; 0x400a
    27e4:	4298      	cmp	r0, r3
    27e6:	f040 8226 	bne.w	2c36 <sysclk_disable_peripheral_clock+0x65a>
    27ea:	e150      	b.n	2a8e <sysclk_disable_peripheral_clock+0x4b2>
    27ec:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    27f0:	f2c4 010a 	movt	r1, #16394	; 0x400a
    27f4:	4288      	cmp	r0, r1
    27f6:	f000 8185 	beq.w	2b04 <sysclk_disable_peripheral_clock+0x528>
    27fa:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    27fe:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2802:	4298      	cmp	r0, r3
    2804:	d80e      	bhi.n	2824 <sysclk_disable_peripheral_clock+0x248>
    2806:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    280a:	f2c4 020a 	movt	r2, #16394	; 0x400a
    280e:	4290      	cmp	r0, r2
    2810:	f000 8156 	beq.w	2ac0 <sysclk_disable_peripheral_clock+0x4e4>
    2814:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    2818:	f2c4 010a 	movt	r1, #16394	; 0x400a
    281c:	4288      	cmp	r0, r1
    281e:	f040 820a 	bne.w	2c36 <sysclk_disable_peripheral_clock+0x65a>
    2822:	e15e      	b.n	2ae2 <sysclk_disable_peripheral_clock+0x506>
    2824:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
    2828:	f2c4 020a 	movt	r2, #16394	; 0x400a
    282c:	4290      	cmp	r0, r2
    282e:	f000 817a 	beq.w	2b26 <sysclk_disable_peripheral_clock+0x54a>
    2832:	f04f 0300 	mov.w	r3, #0
    2836:	f2c4 030b 	movt	r3, #16395	; 0x400b
    283a:	4298      	cmp	r0, r3
    283c:	f040 81fb 	bne.w	2c36 <sysclk_disable_peripheral_clock+0x65a>
    2840:	e05b      	b.n	28fa <sysclk_disable_peripheral_clock+0x31e>
    2842:	f04f 0300 	mov.w	r3, #0
    2846:	f2c4 030f 	movt	r3, #16399	; 0x400f
    284a:	4298      	cmp	r0, r3
    284c:	f000 81a4 	beq.w	2b98 <sysclk_disable_peripheral_clock+0x5bc>
    2850:	f04f 0200 	mov.w	r2, #0
    2854:	f2c4 020f 	movt	r2, #16399	; 0x400f
    2858:	4290      	cmp	r0, r2
    285a:	d823      	bhi.n	28a4 <sysclk_disable_peripheral_clock+0x2c8>
    285c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2860:	f2c4 010e 	movt	r1, #16398	; 0x400e
    2864:	4288      	cmp	r0, r1
    2866:	f000 817a 	beq.w	2b5e <sysclk_disable_peripheral_clock+0x582>
    286a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    286e:	f2c4 030e 	movt	r3, #16398	; 0x400e
    2872:	4298      	cmp	r0, r3
    2874:	d807      	bhi.n	2886 <sysclk_disable_peripheral_clock+0x2aa>
    2876:	f44f 6280 	mov.w	r2, #1024	; 0x400
    287a:	f2c4 020e 	movt	r2, #16398	; 0x400e
    287e:	4290      	cmp	r0, r2
    2880:	f040 81d9 	bne.w	2c36 <sysclk_disable_peripheral_clock+0x65a>
    2884:	e161      	b.n	2b4a <sysclk_disable_peripheral_clock+0x56e>
    2886:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    288a:	f2c4 010e 	movt	r1, #16398	; 0x400e
    288e:	4288      	cmp	r0, r1
    2890:	f000 816f 	beq.w	2b72 <sysclk_disable_peripheral_clock+0x596>
    2894:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    2898:	f2c4 020e 	movt	r2, #16398	; 0x400e
    289c:	4290      	cmp	r0, r2
    289e:	f040 81ca 	bne.w	2c36 <sysclk_disable_peripheral_clock+0x65a>
    28a2:	e170      	b.n	2b86 <sysclk_disable_peripheral_clock+0x5aa>
    28a4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    28a8:	f2c4 010f 	movt	r1, #16399	; 0x400f
    28ac:	4288      	cmp	r0, r1
    28ae:	f000 8191 	beq.w	2bd4 <sysclk_disable_peripheral_clock+0x5f8>
    28b2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    28b6:	f2c4 020f 	movt	r2, #16399	; 0x400f
    28ba:	4290      	cmp	r0, r2
    28bc:	d80e      	bhi.n	28dc <sysclk_disable_peripheral_clock+0x300>
    28be:	f44f 6380 	mov.w	r3, #1024	; 0x400
    28c2:	f2c4 030f 	movt	r3, #16399	; 0x400f
    28c6:	4298      	cmp	r0, r3
    28c8:	f000 8170 	beq.w	2bac <sysclk_disable_peripheral_clock+0x5d0>
    28cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    28d0:	f2c4 010f 	movt	r1, #16399	; 0x400f
    28d4:	4288      	cmp	r0, r1
    28d6:	f040 81ae 	bne.w	2c36 <sysclk_disable_peripheral_clock+0x65a>
    28da:	e171      	b.n	2bc0 <sysclk_disable_peripheral_clock+0x5e4>
    28dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    28e0:	f2c4 010f 	movt	r1, #16399	; 0x400f
    28e4:	4288      	cmp	r0, r1
    28e6:	f000 817f 	beq.w	2be8 <sysclk_disable_peripheral_clock+0x60c>
    28ea:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
    28ee:	f2c4 020f 	movt	r2, #16399	; 0x400f
    28f2:	4290      	cmp	r0, r2
    28f4:	f040 819f 	bne.w	2c36 <sysclk_disable_peripheral_clock+0x65a>
    28f8:	e180      	b.n	2bfc <sysclk_disable_peripheral_clock+0x620>
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
    28fa:	f04f 0001 	mov.w	r0, #1
    28fe:	f04f 0109 	mov.w	r1, #9
    2902:	f641 2219 	movw	r2, #6681	; 0x1a19
    2906:	f2c0 0200 	movt	r2, #0
    290a:	4790      	blx	r2
    290c:	e17e      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>
	case AESA_ADDR:
		sysclk_disable_hsb_module(SYSCLK_AESA_HSB);
		break;

	case IISC_ADDR:
		sysclk_disable_pba_module(SYSCLK_IISC);
    290e:	f04f 0000 	mov.w	r0, #0
    2912:	f641 22e5 	movw	r2, #6885	; 0x1ae5
    2916:	f2c0 0200 	movt	r2, #0
    291a:	4790      	blx	r2
		break;
    291c:	e176      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>

	case SPI_ADDR:
		sysclk_disable_pba_module(SYSCLK_SPI);
    291e:	f04f 0001 	mov.w	r0, #1
    2922:	f641 21e5 	movw	r1, #6885	; 0x1ae5
    2926:	f2c0 0100 	movt	r1, #0
    292a:	4788      	blx	r1
		break;
    292c:	e16e      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>

	case TC0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TC0);
    292e:	f04f 0002 	mov.w	r0, #2
    2932:	f641 23e5 	movw	r3, #6885	; 0x1ae5
    2936:	f2c0 0300 	movt	r3, #0
    293a:	4798      	blx	r3
		break;
    293c:	e166      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>

	case TC1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TC1);
    293e:	f04f 0003 	mov.w	r0, #3
    2942:	f641 22e5 	movw	r2, #6885	; 0x1ae5
    2946:	f2c0 0200 	movt	r2, #0
    294a:	4790      	blx	r2
		break;
    294c:	e15e      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>

	case TWIM0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM0);
    294e:	f04f 0004 	mov.w	r0, #4
    2952:	f641 22e5 	movw	r2, #6885	; 0x1ae5
    2956:	f2c0 0200 	movt	r2, #0
    295a:	4790      	blx	r2
		break;
    295c:	e156      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>

	case TWIS0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIS0);
    295e:	f04f 0005 	mov.w	r0, #5
    2962:	f641 22e5 	movw	r2, #6885	; 0x1ae5
    2966:	f2c0 0200 	movt	r2, #0
    296a:	4790      	blx	r2
		break;
    296c:	e14e      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>

	case TWIM1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM1);
    296e:	f04f 0006 	mov.w	r0, #6
    2972:	f641 21e5 	movw	r1, #6885	; 0x1ae5
    2976:	f2c0 0100 	movt	r1, #0
    297a:	4788      	blx	r1
		break;
    297c:	e146      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>

	case TWIS1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIS1);
    297e:	f04f 0007 	mov.w	r0, #7
    2982:	f641 23e5 	movw	r3, #6885	; 0x1ae5
    2986:	f2c0 0300 	movt	r3, #0
    298a:	4798      	blx	r3
		break;
    298c:	e13e      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>

	case USART0_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART0);
    298e:	f04f 0008 	mov.w	r0, #8
    2992:	f641 22e5 	movw	r2, #6885	; 0x1ae5
    2996:	f2c0 0200 	movt	r2, #0
    299a:	4790      	blx	r2
		break;
    299c:	e136      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>

	case USART1_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART1);
    299e:	f04f 0009 	mov.w	r0, #9
    29a2:	f641 22e5 	movw	r2, #6885	; 0x1ae5
    29a6:	f2c0 0200 	movt	r2, #0
    29aa:	4790      	blx	r2
		break;
    29ac:	e12e      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>

	case USART2_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART2);
    29ae:	f04f 000a 	mov.w	r0, #10
    29b2:	f641 22e5 	movw	r2, #6885	; 0x1ae5
    29b6:	f2c0 0200 	movt	r2, #0
    29ba:	4790      	blx	r2
		break;
    29bc:	e126      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>

	case USART3_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART3);
    29be:	f04f 000b 	mov.w	r0, #11
    29c2:	f641 21e5 	movw	r1, #6885	; 0x1ae5
    29c6:	f2c0 0100 	movt	r1, #0
    29ca:	4788      	blx	r1
		break;
    29cc:	e11e      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>

	case ADCIFE_ADDR:
		sysclk_disable_pba_module(SYSCLK_ADCIFE);
    29ce:	f04f 000c 	mov.w	r0, #12
    29d2:	f641 23e5 	movw	r3, #6885	; 0x1ae5
    29d6:	f2c0 0300 	movt	r3, #0
    29da:	4798      	blx	r3
		break;
    29dc:	e116      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>

	case DACC_ADDR:
		sysclk_disable_pba_module(SYSCLK_DACC);
    29de:	f04f 000d 	mov.w	r0, #13
    29e2:	f641 22e5 	movw	r2, #6885	; 0x1ae5
    29e6:	f2c0 0200 	movt	r2, #0
    29ea:	4790      	blx	r2
		break;
    29ec:	e10e      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>

	case ACIFC_ADDR:
		sysclk_disable_pba_module(SYSCLK_ACIFC);
    29ee:	f04f 000e 	mov.w	r0, #14
    29f2:	f641 21e5 	movw	r1, #6885	; 0x1ae5
    29f6:	f2c0 0100 	movt	r1, #0
    29fa:	4788      	blx	r1
		break;
    29fc:	e106      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>

	case GLOC_ADDR:
		sysclk_disable_pba_module(SYSCLK_GLOC);
    29fe:	f04f 000f 	mov.w	r0, #15
    2a02:	f641 21e5 	movw	r1, #6885	; 0x1ae5
    2a06:	f2c0 0100 	movt	r1, #0
    2a0a:	4788      	blx	r1
		break;
    2a0c:	e0fe      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>

	case ABDACB_ADDR:
		sysclk_disable_pba_module(SYSCLK_ABDACB);
    2a0e:	f04f 0010 	mov.w	r0, #16
    2a12:	f641 23e5 	movw	r3, #6885	; 0x1ae5
    2a16:	f2c0 0300 	movt	r3, #0
    2a1a:	4798      	blx	r3
		break;
    2a1c:	e0f6      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>

	case TRNG_ADDR:
		sysclk_disable_pba_module(SYSCLK_TRNG);
    2a1e:	f04f 0011 	mov.w	r0, #17
    2a22:	f641 23e5 	movw	r3, #6885	; 0x1ae5
    2a26:	f2c0 0300 	movt	r3, #0
    2a2a:	4798      	blx	r3
		break;
    2a2c:	e0ee      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>

	case PARC_ADDR:
		sysclk_disable_pba_module(SYSCLK_PARC);
    2a2e:	f04f 0012 	mov.w	r0, #18
    2a32:	f641 22e5 	movw	r2, #6885	; 0x1ae5
    2a36:	f2c0 0200 	movt	r2, #0
    2a3a:	4790      	blx	r2
		break;
    2a3c:	e0e6      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>

	case CATB_ADDR:
		sysclk_disable_pba_module(SYSCLK_CATB);
    2a3e:	f04f 0013 	mov.w	r0, #19
    2a42:	f641 21e5 	movw	r1, #6885	; 0x1ae5
    2a46:	f2c0 0100 	movt	r1, #0
    2a4a:	4788      	blx	r1
		break;
    2a4c:	e0de      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>

	case TWIM2_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM2);
    2a4e:	f04f 0015 	mov.w	r0, #21
    2a52:	f641 21e5 	movw	r1, #6885	; 0x1ae5
    2a56:	f2c0 0100 	movt	r1, #0
    2a5a:	4788      	blx	r1
		break;
    2a5c:	e0d6      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>

	case TWIM3_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM3);
    2a5e:	f04f 0016 	mov.w	r0, #22
    2a62:	f641 21e5 	movw	r1, #6885	; 0x1ae5
    2a66:	f2c0 0100 	movt	r1, #0
    2a6a:	4788      	blx	r1
		break;
    2a6c:	e0ce      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>

	case LCDCA_ADDR:
		sysclk_disable_pba_module(SYSCLK_LCDCA);
    2a6e:	f04f 0017 	mov.w	r0, #23
    2a72:	f641 22e5 	movw	r2, #6885	; 0x1ae5
    2a76:	f2c0 0200 	movt	r2, #0
    2a7a:	4790      	blx	r2
		break;
    2a7c:	e0c6      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>

	case HFLASHC_ADDR:
		sysclk_disable_pbb_module(SYSCLK_HFLASHC_REGS);
    2a7e:	f04f 0000 	mov.w	r0, #0
    2a82:	f641 33a5 	movw	r3, #7077	; 0x1ba5
    2a86:	f2c0 0300 	movt	r3, #0
    2a8a:	4798      	blx	r3
		break;
    2a8c:	e0be      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>
    2a8e:	f04f 0001 	mov.w	r0, #1
    2a92:	f04f 0102 	mov.w	r1, #2
    2a96:	f641 2219 	movw	r2, #6681	; 0x1a19
    2a9a:	f2c0 0200 	movt	r2, #0
    2a9e:	4790      	blx	r2

	case HCACHE_ADDR:
		sysclk_disable_hsb_module(SYSCLK_HRAMC1_DATA);
		sysclk_disable_pbb_module(SYSCLK_HRAMC1_REGS);
    2aa0:	f04f 0001 	mov.w	r0, #1
    2aa4:	f641 31a5 	movw	r1, #7077	; 0x1ba5
    2aa8:	f2c0 0100 	movt	r1, #0
    2aac:	4788      	blx	r1
		break;
    2aae:	e0ad      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>

	case HMATRIX_ADDR:
		sysclk_disable_pbb_module(SYSCLK_HMATRIX);
    2ab0:	f04f 0002 	mov.w	r0, #2
    2ab4:	f641 31a5 	movw	r1, #7077	; 0x1ba5
    2ab8:	f2c0 0100 	movt	r1, #0
    2abc:	4788      	blx	r1
		break;
    2abe:	e0a5      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>
    2ac0:	f04f 0001 	mov.w	r0, #1
    2ac4:	f04f 0100 	mov.w	r1, #0
    2ac8:	f641 2319 	movw	r3, #6681	; 0x1a19
    2acc:	f2c0 0300 	movt	r3, #0
    2ad0:	4798      	blx	r3

	case PDCA_ADDR:
		sysclk_disable_hsb_module(SYSCLK_PDCA_HSB);
		sysclk_disable_pbb_module(SYSCLK_PDCA_PB);
    2ad2:	f04f 0003 	mov.w	r0, #3
    2ad6:	f641 31a5 	movw	r1, #7077	; 0x1ba5
    2ada:	f2c0 0100 	movt	r1, #0
    2ade:	4788      	blx	r1
		break;
    2ae0:	e094      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>
    2ae2:	f04f 0001 	mov.w	r0, #1
    2ae6:	f04f 0104 	mov.w	r1, #4
    2aea:	f641 2319 	movw	r3, #6681	; 0x1a19
    2aee:	f2c0 0300 	movt	r3, #0
    2af2:	4798      	blx	r3

	case CRCCU_ADDR:
		sysclk_disable_hsb_module(SYSCLK_CRCCU_DATA);
		sysclk_disable_pbb_module(SYSCLK_CRCCU_REGS);
    2af4:	f04f 0004 	mov.w	r0, #4
    2af8:	f641 32a5 	movw	r2, #7077	; 0x1ba5
    2afc:	f2c0 0200 	movt	r2, #0
    2b00:	4790      	blx	r2
		break;
    2b02:	e083      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>
    2b04:	f04f 0001 	mov.w	r0, #1
    2b08:	f04f 0103 	mov.w	r1, #3
    2b0c:	f641 2319 	movw	r3, #6681	; 0x1a19
    2b10:	f2c0 0300 	movt	r3, #0
    2b14:	4798      	blx	r3

	case USBC_ADDR:
		sysclk_disable_hsb_module(SYSCLK_USBC_DATA);
		sysclk_disable_pbb_module(SYSCLK_USBC_REGS);
    2b16:	f04f 0005 	mov.w	r0, #5
    2b1a:	f641 32a5 	movw	r2, #7077	; 0x1ba5
    2b1e:	f2c0 0200 	movt	r2, #0
    2b22:	4790      	blx	r2
		break;
    2b24:	e072      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>

	case PEVC_ADDR:
		sysclk_disable_pbb_module(SYSCLK_PEVC);
    2b26:	f04f 0006 	mov.w	r0, #6
    2b2a:	f641 31a5 	movw	r1, #7077	; 0x1ba5
    2b2e:	f2c0 0100 	movt	r1, #0
    2b32:	4788      	blx	r1
		break;
    2b34:	e06a      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>
 * \brief Disable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_disable_pbc_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_PBC, module_index);
    2b36:	f04f 0004 	mov.w	r0, #4
    2b3a:	f04f 0100 	mov.w	r1, #0
    2b3e:	f641 2319 	movw	r3, #6681	; 0x1a19
    2b42:	f2c0 0300 	movt	r3, #0
    2b46:	4798      	blx	r3
    2b48:	e060      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>
    2b4a:	f04f 0004 	mov.w	r0, #4
    2b4e:	f04f 0101 	mov.w	r1, #1
    2b52:	f641 2319 	movw	r3, #6681	; 0x1a19
    2b56:	f2c0 0300 	movt	r3, #0
    2b5a:	4798      	blx	r3
    2b5c:	e056      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>
    2b5e:	f04f 0004 	mov.w	r0, #4
    2b62:	f04f 0102 	mov.w	r1, #2
    2b66:	f641 2319 	movw	r3, #6681	; 0x1a19
    2b6a:	f2c0 0300 	movt	r3, #0
    2b6e:	4798      	blx	r3
    2b70:	e04c      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>
    2b72:	f04f 0004 	mov.w	r0, #4
    2b76:	f04f 0103 	mov.w	r1, #3
    2b7a:	f641 2219 	movw	r2, #6681	; 0x1a19
    2b7e:	f2c0 0200 	movt	r2, #0
    2b82:	4790      	blx	r2
    2b84:	e042      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>
    2b86:	f04f 0004 	mov.w	r0, #4
    2b8a:	4601      	mov	r1, r0
    2b8c:	f641 2319 	movw	r3, #6681	; 0x1a19
    2b90:	f2c0 0300 	movt	r3, #0
    2b94:	4798      	blx	r3
    2b96:	e039      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>
 * \brief Disable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_disable_pbd_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_PBD, module_index);
    2b98:	f04f 0005 	mov.w	r0, #5
    2b9c:	f04f 0100 	mov.w	r1, #0
    2ba0:	f641 2219 	movw	r2, #6681	; 0x1a19
    2ba4:	f2c0 0200 	movt	r2, #0
    2ba8:	4790      	blx	r2
    2baa:	e02f      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>
    2bac:	f04f 0005 	mov.w	r0, #5
    2bb0:	f04f 0101 	mov.w	r1, #1
    2bb4:	f641 2319 	movw	r3, #6681	; 0x1a19
    2bb8:	f2c0 0300 	movt	r3, #0
    2bbc:	4798      	blx	r3
    2bbe:	e025      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>
    2bc0:	f04f 0005 	mov.w	r0, #5
    2bc4:	f04f 0102 	mov.w	r1, #2
    2bc8:	f641 2219 	movw	r2, #6681	; 0x1a19
    2bcc:	f2c0 0200 	movt	r2, #0
    2bd0:	4790      	blx	r2
    2bd2:	e01b      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>
    2bd4:	f04f 0005 	mov.w	r0, #5
    2bd8:	f04f 0103 	mov.w	r1, #3
    2bdc:	f641 2319 	movw	r3, #6681	; 0x1a19
    2be0:	f2c0 0300 	movt	r3, #0
    2be4:	4798      	blx	r3
    2be6:	e011      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>
    2be8:	f04f 0005 	mov.w	r0, #5
    2bec:	f04f 0104 	mov.w	r1, #4
    2bf0:	f641 2219 	movw	r2, #6681	; 0x1a19
    2bf4:	f2c0 0200 	movt	r2, #0
    2bf8:	4790      	blx	r2
    2bfa:	e007      	b.n	2c0c <sysclk_disable_peripheral_clock+0x630>
    2bfc:	f04f 0005 	mov.w	r0, #5
    2c00:	4601      	mov	r1, r0
    2c02:	f641 2319 	movw	r3, #6681	; 0x1a19
    2c06:	f2c0 0300 	movt	r3, #0
    2c0a:	4798      	blx	r3
	}

	// Disable PBA divided clock if possible.
#define PBADIV_CLKSRC_MASK (SYSCLK_TC0 | SYSCLK_TC1 \
		| SYSCLK_USART0 | SYSCLK_USART1 | SYSCLK_USART2 | SYSCLK_USART3)
	if ((PM->PM_PBAMASK & PBADIV_CLKSRC_MASK) == 0) {
    2c0c:	f04f 0000 	mov.w	r0, #0
    2c10:	f2c4 000e 	movt	r0, #16398	; 0x400e
    2c14:	6a82      	ldr	r2, [r0, #40]	; 0x28
    2c16:	f012 0f0b 	tst.w	r2, #11
    2c1a:	d10c      	bne.n	2c36 <sysclk_disable_peripheral_clock+0x65a>
 */
static inline void sysclk_disable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    2c1c:	f04f 0300 	mov.w	r3, #0
    2c20:	f2c4 030e 	movt	r3, #16398	; 0x400e
    2c24:	6c19      	ldr	r1, [r3, #64]	; 0x40
	temp_mask &= ~mask;
    2c26:	f021 007f 	bic.w	r0, r1, #127	; 0x7f
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    2c2a:	f04f 0240 	mov.w	r2, #64	; 0x40
    2c2e:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    2c32:	659a      	str	r2, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    2c34:	6418      	str	r0, [r3, #64]	; 0x40
    2c36:	bd08      	pop	{r3, pc}

00002c38 <sysclk_set_source>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2c38:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2c3c:	b672      	cpsid	i
    2c3e:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    2c42:	f240 0344 	movw	r3, #68	; 0x44
    2c46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c4a:	f04f 0100 	mov.w	r1, #0
    2c4e:	7019      	strb	r1, [r3, #0]
{
	irqflags_t flags;
	Assert(src <= SYSCLK_SRC_RC1M);

	flags = cpu_irq_save();
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    2c50:	460b      	mov	r3, r1
    2c52:	f2c4 030e 	movt	r3, #16398	; 0x400e
    2c56:	f04f 412a 	mov.w	r1, #2852126720	; 0xaa000000
    2c5a:	6599      	str	r1, [r3, #88]	; 0x58
		| PM_UNLOCK_ADDR((uint32_t)&PM->PM_MCCTRL - (uint32_t)PM);
	PM->PM_MCCTRL = src;
    2c5c:	6018      	str	r0, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2c5e:	b94a      	cbnz	r2, 2c74 <sysclk_set_source+0x3c>
		cpu_irq_enable();
    2c60:	f240 0044 	movw	r0, #68	; 0x44
    2c64:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2c68:	f04f 0201 	mov.w	r2, #1
    2c6c:	7002      	strb	r2, [r0, #0]
    2c6e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    2c72:	b662      	cpsie	i
    2c74:	4770      	bx	lr
    2c76:	bf00      	nop

00002c78 <sysclk_init>:
   genclk_disable(7);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
    2c78:	b538      	push	{r3, r4, r5, lr}
	uint32_t ps_value = 0;
	bool is_fwu_enabled = false;

#if CONFIG_HCACHE_ENABLE == 1
	/* Enable HCACHE */
	sysclk_enable_peripheral_clock(HCACHE);
    2c7a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    2c7e:	f2c4 040a 	movt	r4, #16394	; 0x400a
    2c82:	4620      	mov	r0, r4
    2c84:	f641 63fd 	movw	r3, #7933	; 0x1efd
    2c88:	f2c0 0300 	movt	r3, #0
    2c8c:	4798      	blx	r3
	HCACHE->HCACHE_CTRL = HCACHE_CTRL_CEN_YES;
    2c8e:	f04f 0001 	mov.w	r0, #1
    2c92:	60a0      	str	r0, [r4, #8]
	while (!(HCACHE->HCACHE_SR & HCACHE_SR_CSTS_EN));
    2c94:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2c98:	f2c4 020a 	movt	r2, #16394	; 0x400a
    2c9c:	68d1      	ldr	r1, [r2, #12]
    2c9e:	f011 0f01 	tst.w	r1, #1
    2ca2:	d0fb      	beq.n	2c9c <sysclk_init+0x24>
		sysclk_set_source(SYSCLK_SRC_OSC0);
	}
#endif
#ifdef CONFIG_DFLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_DFLL) {
		dfll_enable_config_defaults(0);
    2ca4:	f04f 0000 	mov.w	r0, #0
    2ca8:	f641 059d 	movw	r5, #6301	; 0x189d
    2cac:	f2c0 0500 	movt	r5, #0
    2cb0:	47a8      	blx	r5
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz(), ps_value, is_fwu_enabled);
    2cb2:	f04f 7037 	mov.w	r0, #47972352	; 0x2dc0000
    2cb6:	f04f 0100 	mov.w	r1, #0
    2cba:	460a      	mov	r2, r1
    2cbc:	f243 0449 	movw	r4, #12361	; 0x3049
    2cc0:	f2c0 0400 	movt	r4, #0
    2cc4:	47a0      	blx	r4
		sysclk_set_source(SYSCLK_SRC_DFLL);
    2cc6:	f04f 0003 	mov.w	r0, #3
    2cca:	f642 4339 	movw	r3, #11321	; 0x2c39
    2cce:	f2c0 0300 	movt	r3, #0
    2cd2:	4798      	blx	r3
	if (!no_halt) {
		bpm_power_scaling_cpu(bpm, ps_value);
		return true;
	}

	return bpm_power_scaling_cpu_failsafe(bpm, ps_value, 240000);
    2cd4:	f04f 0000 	mov.w	r0, #0
    2cd8:	f2c4 000f 	movt	r0, #16399	; 0x400f
    2cdc:	f04f 0100 	mov.w	r1, #0
    2ce0:	f64a 1280 	movw	r2, #43392	; 0xa980
    2ce4:	f2c0 0203 	movt	r2, #3
    2ce8:	f642 6521 	movw	r5, #11809	; 0x2e21
    2cec:	f2c0 0500 	movt	r5, #0
    2cf0:	47a8      	blx	r5
		Assert(false);
	}

	/* Automatically switch to low power mode */
	bpm_configure_power_scaling(BPM, ps_value, BPM_PSCM_CPU_NOT_HALT);
	while ((bpm_get_status(BPM) & BPM_SR_PSOK) == 0);
    2cf2:	f04f 0400 	mov.w	r4, #0
    2cf6:	f2c4 040f 	movt	r4, #16399	; 0x400f
    2cfa:	f642 6599 	movw	r5, #11929	; 0x2e99
    2cfe:	f2c0 0500 	movt	r5, #0
    2d02:	4620      	mov	r0, r4
    2d04:	47a8      	blx	r5
    2d06:	f010 0f01 	tst.w	r0, #1
    2d0a:	d0fa      	beq.n	2d02 <sysclk_init+0x8a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2d0c:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2d10:	b672      	cpsid	i
    2d12:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    2d16:	f240 0244 	movw	r2, #68	; 0x44
    2d1a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2d1e:	f04f 0100 	mov.w	r1, #0
    2d22:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2d24:	b928      	cbnz	r0, 2d32 <sysclk_init+0xba>
		cpu_irq_enable();
    2d26:	f04f 0001 	mov.w	r0, #1
    2d2a:	7010      	strb	r0, [r2, #0]
    2d2c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    2d30:	b662      	cpsie	i
    2d32:	bd38      	pop	{r3, r4, r5, pc}

00002d34 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_disable_pin(pin);\
	} while (0)

void board_init(void)
{
    2d34:	b500      	push	{lr}
    2d36:	b087      	sub	sp, #28
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	struct wdt_dev_inst wdt_inst;
	struct wdt_config   wdt_cfg;

	wdt_get_config_defaults(&wdt_cfg);
    2d38:	4668      	mov	r0, sp
    2d3a:	f243 1375 	movw	r3, #12661	; 0x3175
    2d3e:	f2c0 0300 	movt	r3, #0
    2d42:	4798      	blx	r3
	wdt_init(&wdt_inst, WDT, &wdt_cfg);
    2d44:	a804      	add	r0, sp, #16
    2d46:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    2d4a:	f2c4 010f 	movt	r1, #16399	; 0x400f
    2d4e:	466a      	mov	r2, sp
    2d50:	f243 1391 	movw	r3, #12689	; 0x3191
    2d54:	f2c0 0300 	movt	r3, #0
    2d58:	4798      	blx	r3
	wdt_disable(&wdt_inst);
    2d5a:	a804      	add	r0, sp, #16
    2d5c:	f243 215d 	movw	r1, #12893	; 0x325d
    2d60:	f2c0 0100 	movt	r1, #0
    2d64:	4788      	blx	r1
	return 1U << (pin & 0x1F);
}

__always_inline static void arch_ioport_init(void)
{
	sysclk_enable_peripheral_clock(GPIO);
    2d66:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    2d6a:	f2c4 000e 	movt	r0, #16398	; 0x400e
    2d6e:	f641 62fd 	movw	r2, #7933	; 0x1efd
    2d72:	f2c0 0200 	movt	r2, #0
    2d76:	4790      	blx	r2

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    2d78:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
    2d7c:	f2c4 000e 	movt	r0, #16398	; 0x400e
    2d80:	f04f 0380 	mov.w	r3, #128	; 0x80
    2d84:	6443      	str	r3, [r0, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    2d86:	f8c0 3168 	str.w	r3, [r0, #360]	; 0x168

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    2d8a:	6543      	str	r3, [r0, #84]	; 0x54
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    2d8c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    2d90:	6481      	str	r1, [r0, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    2d92:	f8c0 1164 	str.w	r1, [r0, #356]	; 0x164
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
    2d96:	6741      	str	r1, [r0, #116]	; 0x74

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    2d98:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    2d9c:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    2da0:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    2da4:	6181      	str	r1, [r0, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    2da6:	6281      	str	r1, [r0, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    2da8:	6381      	str	r1, [r0, #56]	; 0x38
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    2daa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    2dae:	6782      	str	r2, [r0, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    2db0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    2db4:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    2db8:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    2dbc:	6182      	str	r2, [r0, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    2dbe:	6282      	str	r2, [r0, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    2dc0:	6382      	str	r2, [r0, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    2dc2:	6082      	str	r2, [r0, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    2dc4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    2dc8:	6783      	str	r3, [r0, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    2dca:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    2dce:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    2dd2:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    2dd6:	6183      	str	r3, [r0, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    2dd8:	6283      	str	r3, [r0, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    2dda:	6383      	str	r3, [r0, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    2ddc:	6083      	str	r3, [r0, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    2dde:	f44f 5090 	mov.w	r0, #4608	; 0x1200
    2de2:	f2c4 000e 	movt	r0, #16398	; 0x400e
    2de6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    2dea:	6781      	str	r1, [r0, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    2dec:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    2df0:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    2df4:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    2df8:	6181      	str	r1, [r0, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
    2dfa:	6241      	str	r1, [r0, #36]	; 0x24

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    2dfc:	6381      	str	r1, [r0, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    2dfe:	6081      	str	r1, [r0, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    2e00:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2e04:	6782      	str	r2, [r0, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    2e06:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    2e0a:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    2e0e:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    2e12:	6182      	str	r2, [r0, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
    2e14:	6242      	str	r2, [r0, #36]	; 0x24

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    2e16:	6382      	str	r2, [r0, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    2e18:	6082      	str	r2, [r0, #8]
	ioport_set_pin_peripheral_mode(PIN_PA15D_PARC_PCDATA6, MUX_PA15D_PARC_PCDATA6);
	ioport_set_pin_peripheral_mode(PIN_PA16D_PARC_PCDATA7, MUX_PA16D_PARC_PCDATA7);
	ioport_set_pin_peripheral_mode(PIN_PA18D_PARC_PCEN1, MUX_PA18D_PARC_PCEN1);
	ioport_set_pin_peripheral_mode(PIN_PA19D_PARC_PCEN2, MUX_PA19D_PARC_PCEN2);
#endif
}
    2e1a:	b007      	add	sp, #28
    2e1c:	bd00      	pop	{pc}
    2e1e:	bf00      	nop

00002e20 <bpm_power_scaling_cpu_failsafe>:
}


bool bpm_power_scaling_cpu_failsafe(Bpm *bpm, uint32_t ps_value,
	uint32_t timeout)
{
    2e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t pmcon = 0;

	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;
    2e24:	69c4      	ldr	r4, [r0, #28]

	/* Clear last PS Value & Write new one */
	pmcon &= ~BPM_PMCON_PS_Msk;
    2e26:	f024 0503 	bic.w	r5, r4, #3
	pmcon |= BPM_PMCON_PS(ps_value);
    2e2a:	f045 030c 	orr.w	r3, r5, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2e2e:	f3ef 8610 	mrs	r6, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2e32:	b672      	cpsid	i
    2e34:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    2e38:	f04f 0500 	mov.w	r5, #0
    2e3c:	f240 0744 	movw	r7, #68	; 0x44
    2e40:	f2c2 0700 	movt	r7, #8192	; 0x2000
    2e44:	703d      	strb	r5, [r7, #0]
	uint32_t ctrl, load, val;
	/* Avoid interrupt while flash halt */
	flags = cpu_irq_save();

	/* Save SysTick */
	val = SysTick->VAL;
    2e46:	f24e 0410 	movw	r4, #57360	; 0xe010
    2e4a:	f2ce 0400 	movt	r4, #57344	; 0xe000
    2e4e:	f8d4 8008 	ldr.w	r8, [r4, #8]
	ctrl = SysTick->CTRL;
    2e52:	6827      	ldr	r7, [r4, #0]
	load = SysTick->LOAD;
    2e54:	f8d4 9004 	ldr.w	r9, [r4, #4]
	/* Setup SysTick & start counting */
	SysTick->LOAD = timeout;
    2e58:	6062      	str	r2, [r4, #4]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    2e5a:	f04f 0205 	mov.w	r2, #5
    2e5e:	6022      	str	r2, [r4, #0]
	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;

	/* Clear last PS Value & Write new one */
	pmcon &= ~BPM_PMCON_PS_Msk;
	pmcon |= BPM_PMCON_PS(ps_value);
    2e60:	f001 0103 	and.w	r1, r1, #3
	load = SysTick->LOAD;
	/* Setup SysTick & start counting */
	SysTick->LOAD = timeout;
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;

	b_psok = bpm_ps_no_halt_exec(bpm, pmcon);
    2e64:	4319      	orrs	r1, r3
    2e66:	f240 030d 	movw	r3, #13
    2e6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e6e:	4798      	blx	r3

	/* Restore SysTick */
	SysTick->CTRL = 0;
    2e70:	6025      	str	r5, [r4, #0]
	SysTick->LOAD = load;
    2e72:	f8c4 9004 	str.w	r9, [r4, #4]
	SysTick->VAL = val;
    2e76:	f8c4 8008 	str.w	r8, [r4, #8]
	SysTick->CTRL = ctrl;
    2e7a:	6027      	str	r7, [r4, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2e7c:	b94e      	cbnz	r6, 2e92 <bpm_power_scaling_cpu_failsafe+0x72>
		cpu_irq_enable();
    2e7e:	f240 0144 	movw	r1, #68	; 0x44
    2e82:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2e86:	f04f 0201 	mov.w	r2, #1
    2e8a:	700a      	strb	r2, [r1, #0]
    2e8c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    2e90:	b662      	cpsie	i

	cpu_irq_restore(flags);
	return b_psok;
}
    2e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2e96:	bf00      	nop

00002e98 <bpm_get_status>:
	bpm->BPM_ICR = sources;
}

uint32_t bpm_get_status(Bpm *bpm)
{
	return bpm->BPM_SR;
    2e98:	6940      	ldr	r0, [r0, #20]
}
    2e9a:	4770      	bx	lr

00002e9c <bpm_sleep>:
{
	return bpm->BPM_VERSION;
}

void bpm_sleep(Bpm *bpm, uint32_t sleep_mode)
{
    2e9c:	b410      	push	{r4}
	uint32_t pmcon;

	/* Read PMCON register */
	pmcon = bpm->BPM_PMCON;
    2e9e:	69c3      	ldr	r3, [r0, #28]
	pmcon &= ~BPM_PMCON_BKUP;
	pmcon &= ~BPM_PMCON_RET;
	pmcon &= ~BPM_PMCON_SLEEP_Msk;
    2ea0:	f423 544c 	bic.w	r4, r3, #13056	; 0x3300

	/* Unlock PMCON register */
	BPM_UNLOCK(PMCON);
    2ea4:	f04f 0300 	mov.w	r3, #0
    2ea8:	f2c4 030f 	movt	r3, #16399	; 0x400f
    2eac:	f04f 021c 	mov.w	r2, #28
    2eb0:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    2eb4:	619a      	str	r2, [r3, #24]

	if (sleep_mode == BPM_SM_SLEEP_0) {
    2eb6:	2901      	cmp	r1, #1
    2eb8:	d109      	bne.n	2ece <bpm_sleep+0x32>
		pmcon |= BPM_PMCON_SLEEP(0);
		bpm->BPM_PMCON = pmcon;
    2eba:	61c4      	str	r4, [r0, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    2ebc:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2ec0:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2ec4:	6918      	ldr	r0, [r3, #16]
    2ec6:	f020 0104 	bic.w	r1, r0, #4
    2eca:	6119      	str	r1, [r3, #16]
    2ecc:	e050      	b.n	2f70 <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_SLEEP_1) {
    2ece:	2902      	cmp	r1, #2
    2ed0:	d10b      	bne.n	2eea <bpm_sleep+0x4e>
		pmcon |= BPM_PMCON_SLEEP(1);
    2ed2:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
		bpm->BPM_PMCON = pmcon;
    2ed6:	61c4      	str	r4, [r0, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    2ed8:	f44f 406d 	mov.w	r0, #60672	; 0xed00
    2edc:	f2ce 0000 	movt	r0, #57344	; 0xe000
    2ee0:	6901      	ldr	r1, [r0, #16]
    2ee2:	f021 0204 	bic.w	r2, r1, #4
    2ee6:	6102      	str	r2, [r0, #16]
    2ee8:	e042      	b.n	2f70 <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_SLEEP_2) {
    2eea:	2903      	cmp	r1, #3
    2eec:	d10b      	bne.n	2f06 <bpm_sleep+0x6a>
		pmcon |= BPM_PMCON_SLEEP(2);
    2eee:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
		bpm->BPM_PMCON = pmcon;
    2ef2:	61c4      	str	r4, [r0, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    2ef4:	f44f 416d 	mov.w	r1, #60672	; 0xed00
    2ef8:	f2ce 0100 	movt	r1, #57344	; 0xe000
    2efc:	690a      	ldr	r2, [r1, #16]
    2efe:	f022 0304 	bic.w	r3, r2, #4
    2f02:	610b      	str	r3, [r1, #16]
    2f04:	e034      	b.n	2f70 <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_SLEEP_3) {
    2f06:	2904      	cmp	r1, #4
    2f08:	d10b      	bne.n	2f22 <bpm_sleep+0x86>
		pmcon |= BPM_PMCON_SLEEP(3);
    2f0a:	f444 5440 	orr.w	r4, r4, #12288	; 0x3000
		bpm->BPM_PMCON = pmcon;
    2f0e:	61c4      	str	r4, [r0, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    2f10:	f44f 416d 	mov.w	r1, #60672	; 0xed00
    2f14:	f2ce 0100 	movt	r1, #57344	; 0xe000
    2f18:	690b      	ldr	r3, [r1, #16]
    2f1a:	f023 0004 	bic.w	r0, r3, #4
    2f1e:	6108      	str	r0, [r1, #16]
    2f20:	e026      	b.n	2f70 <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_WAIT) {
    2f22:	2905      	cmp	r1, #5
    2f24:	d109      	bne.n	2f3a <bpm_sleep+0x9e>
		bpm->BPM_PMCON = pmcon;
    2f26:	61c4      	str	r4, [r0, #28]
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    2f28:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2f2c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2f30:	6918      	ldr	r0, [r3, #16]
    2f32:	f040 0204 	orr.w	r2, r0, #4
    2f36:	611a      	str	r2, [r3, #16]
    2f38:	e01a      	b.n	2f70 <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_RET) {
    2f3a:	2906      	cmp	r1, #6
    2f3c:	d10b      	bne.n	2f56 <bpm_sleep+0xba>
		pmcon |= BPM_PMCON_RET;
    2f3e:	f444 7400 	orr.w	r4, r4, #512	; 0x200
		bpm->BPM_PMCON = pmcon;
    2f42:	61c4      	str	r4, [r0, #28]
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    2f44:	f44f 406d 	mov.w	r0, #60672	; 0xed00
    2f48:	f2ce 0000 	movt	r0, #57344	; 0xe000
    2f4c:	6902      	ldr	r2, [r0, #16]
    2f4e:	f042 0104 	orr.w	r1, r2, #4
    2f52:	6101      	str	r1, [r0, #16]
    2f54:	e00c      	b.n	2f70 <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_BACKUP) { 
    2f56:	2907      	cmp	r1, #7
    2f58:	d11e      	bne.n	2f98 <bpm_sleep+0xfc>
		pmcon |= BPM_PMCON_BKUP;
    2f5a:	f444 7480 	orr.w	r4, r4, #256	; 0x100
		bpm->BPM_PMCON = pmcon;
    2f5e:	61c4      	str	r4, [r0, #28]
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    2f60:	f44f 406d 	mov.w	r0, #60672	; 0xed00
    2f64:	f2ce 0000 	movt	r0, #57344	; 0xe000
    2f68:	6901      	ldr	r1, [r0, #16]
    2f6a:	f041 0304 	orr.w	r3, r1, #4
    2f6e:	6103      	str	r3, [r0, #16]
	} else {
		return;
	}

	/* Wait until vreg is ok. */
	while(!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_VREGOK));
    2f70:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2f74:	f2c4 020f 	movt	r2, #16399	; 0x400f
    2f78:	6953      	ldr	r3, [r2, #20]
    2f7a:	f413 6f80 	tst.w	r3, #1024	; 0x400
    2f7e:	d0fb      	beq.n	2f78 <bpm_sleep+0xdc>
	asm volatile ("wfi");
    2f80:	bf30      	wfi
	/* ensure sleep request propagation to flash. */
	asm volatile ("nop");
    2f82:	bf00      	nop
	 * masked since we are in the critical section thanks to the previous
	 * set_pri_mask(1). Thus, we need to leave the critical section.
	 * Please note that we should probably use something like
	 * cpu_leave_critical(), using set_pri_mask(0)
	 */
	cpu_irq_enable();
    2f84:	f240 0044 	movw	r0, #68	; 0x44
    2f88:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2f8c:	f04f 0101 	mov.w	r1, #1
    2f90:	7001      	strb	r1, [r0, #0]
    2f92:	f3bf 8f5f 	dmb	sy
    2f96:	b662      	cpsie	i
}
    2f98:	bc10      	pop	{r4}
    2f9a:	4770      	bx	lr

00002f9c <flashcalw_set_wait_state>:
 * \param wait_state The number of wait states of flash read accesses: \c 0 to
 *                   \c 1.
 */
void flashcalw_set_wait_state(uint32_t wait_state)
{
	HFLASHC->FLASHCALW_FCR = (HFLASHC->FLASHCALW_FCR & ~FLASHCALW_FCR_FWS)
    2f9c:	f04f 0300 	mov.w	r3, #0
    2fa0:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2fa4:	6819      	ldr	r1, [r3, #0]
    2fa6:	f021 0240 	bic.w	r2, r1, #64	; 0x40
			| (wait_state ? FLASHCALW_FCR_FWS_1 :
    2faa:	2800      	cmp	r0, #0
    2fac:	bf14      	ite	ne
    2fae:	2040      	movne	r0, #64	; 0x40
    2fb0:	2000      	moveq	r0, #0
    2fb2:	4310      	orrs	r0, r2
 * \param wait_state The number of wait states of flash read accesses: \c 0 to
 *                   \c 1.
 */
void flashcalw_set_wait_state(uint32_t wait_state)
{
	HFLASHC->FLASHCALW_FCR = (HFLASHC->FLASHCALW_FCR & ~FLASHCALW_FCR_FWS)
    2fb4:	f04f 0300 	mov.w	r3, #0
    2fb8:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2fbc:	6018      	str	r0, [r3, #0]
    2fbe:	4770      	bx	lr

00002fc0 <flashcalw_is_ready>:
 *
 * \return Whether the FLASHCALW is ready to run a new command.
 */
bool flashcalw_is_ready(void)
{
	return ((HFLASHC->FLASHCALW_FSR & FLASHCALW_FSR_FRDY) != 0);
    2fc0:	f04f 0300 	mov.w	r3, #0
    2fc4:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2fc8:	6898      	ldr	r0, [r3, #8]
}
    2fca:	f000 0001 	and.w	r0, r0, #1
    2fce:	4770      	bx	lr

00002fd0 <flashcalw_default_wait_until_ready>:
/*! \brief Waits actively until the FLASHCALW is ready to run a new command.
 *
 * This is the default function assigned to \ref flashcalw_wait_until_ready.
 */
void flashcalw_default_wait_until_ready(void)
{
    2fd0:	b510      	push	{r4, lr}
	while (!flashcalw_is_ready()) {
    2fd2:	f642 74c1 	movw	r4, #12225	; 0x2fc1
    2fd6:	f2c0 0400 	movt	r4, #0
    2fda:	47a0      	blx	r4
    2fdc:	2800      	cmp	r0, #0
    2fde:	d0fc      	beq.n	2fda <flashcalw_default_wait_until_ready+0xa>
	}
}
    2fe0:	bd10      	pop	{r4, pc}
    2fe2:	bf00      	nop

00002fe4 <flashcalw_issue_command>:
 *
 * \note The FLASHCALW error status returned by \ref flashcalw_is_lock_error and
 *       \ref flashcalw_is_programming_error is updated.
 */
void flashcalw_issue_command(uint32_t command, int page_number)
{
    2fe4:	b538      	push	{r3, r4, r5, lr}
    2fe6:	4605      	mov	r5, r0
    2fe8:	460c      	mov	r4, r1
	uint32_t tempo;

	flashcalw_wait_until_ready();
    2fea:	f240 0348 	movw	r3, #72	; 0x48
    2fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ff2:	6818      	ldr	r0, [r3, #0]
    2ff4:	4780      	blx	r0
	tempo = HFLASHC->FLASHCALW_FCMD;
    2ff6:	f04f 0100 	mov.w	r1, #0
    2ffa:	f2c4 010a 	movt	r1, #16394	; 0x400a
    2ffe:	684a      	ldr	r2, [r1, #4]
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
	if (page_number >= 0) {
    3000:	2c00      	cmp	r4, #0
    3002:	db07      	blt.n	3014 <flashcalw_issue_command+0x30>
		tempo = (FLASHCALW_FCMD_KEY_KEY
				| FLASHCALW_FCMD_PAGEN(page_number) | command);
    3004:	f045 4525 	orr.w	r5, r5, #2768240640	; 0xa5000000
    3008:	ea4f 2404 	mov.w	r4, r4, lsl #8
    300c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	flashcalw_wait_until_ready();
	tempo = HFLASHC->FLASHCALW_FCMD;
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
	if (page_number >= 0) {
		tempo = (FLASHCALW_FCMD_KEY_KEY
    3010:	4325      	orrs	r5, r4
    3012:	e004      	b.n	301e <flashcalw_issue_command+0x3a>
	uint32_t tempo;

	flashcalw_wait_until_ready();
	tempo = HFLASHC->FLASHCALW_FCMD;
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
    3014:	f022 033f 	bic.w	r3, r2, #63	; 0x3f
	if (page_number >= 0) {
		tempo = (FLASHCALW_FCMD_KEY_KEY
				| FLASHCALW_FCMD_PAGEN(page_number) | command);
	} else {
		tempo |= (FLASHCALW_FCMD_KEY_KEY | command);
    3018:	f043 4025 	orr.w	r0, r3, #2768240640	; 0xa5000000
    301c:	4305      	orrs	r5, r0
	}

	HFLASHC->FLASHCALW_FCMD = tempo;
    301e:	f04f 0100 	mov.w	r1, #0
    3022:	f2c4 010a 	movt	r1, #16394	; 0x400a
    3026:	604d      	str	r5, [r1, #4]
 *          the driver's API which instead presents \ref flashcalw_is_lock_error
 *          and \ref flashcalw_is_programming_error.
 */
static uint32_t flashcalw_get_error_status(void)
{
	return HFLASHC->FLASHCALW_FSR &
    3028:	688a      	ldr	r2, [r1, #8]
    302a:	f002 000c 	and.w	r0, r2, #12
	} else {
		tempo |= (FLASHCALW_FCMD_KEY_KEY | command);
	}

	HFLASHC->FLASHCALW_FCMD = tempo;
	flashcalw_error_status = flashcalw_get_error_status();
    302e:	f640 13d4 	movw	r3, #2516	; 0x9d4
    3032:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3036:	6018      	str	r0, [r3, #0]
	flashcalw_wait_until_ready();
    3038:	f240 0148 	movw	r1, #72	; 0x48
    303c:	f2c2 0100 	movt	r1, #8192	; 0x2000
    3040:	680a      	ldr	r2, [r1, #0]
    3042:	4790      	blx	r2
    3044:	bd38      	pop	{r3, r4, r5, pc}
    3046:	bf00      	nop

00003048 <flashcalw_set_flash_waitstate_and_readmode>:
 * \param ps_value Power Scaling mode value (0, 1)
 * \param is_fwu_enabled (boolean), Is fast wakeup mode enabled or not
 */
void flashcalw_set_flash_waitstate_and_readmode(uint32_t cpu_f_hz,
		uint32_t ps_value, bool is_fwu_enabled)
{
    3048:	b508      	push	{r3, lr}
	}

	/* Enable the high-speed read mode. */
	flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSEN, -1);
#else
	if (ps_value == 0) {
    304a:	2900      	cmp	r1, #0
    304c:	d156      	bne.n	30fc <flashcalw_set_flash_waitstate_and_readmode+0xb4>
		if (cpu_f_hz > FLASH_FREQ_PS0_FWS_0_MAX_FREQ) {
    304e:	f64a 0380 	movw	r3, #43136	; 0xa880
    3052:	f2c0 1312 	movt	r3, #274	; 0x112
    3056:	4298      	cmp	r0, r3
    3058:	d927      	bls.n	30aa <flashcalw_set_flash_waitstate_and_readmode+0x62>
			// > 18MHz
			if (cpu_f_hz <= FLASH_FREQ_PS0_FWS_1_MAX_FREQ) {
    305a:	f44f 43a2 	mov.w	r3, #20736	; 0x5100
    305e:	f2c0 2325 	movt	r3, #549	; 0x225
    3062:	4298      	cmp	r0, r3
    3064:	d810      	bhi.n	3088 <flashcalw_set_flash_waitstate_and_readmode+0x40>
				// <= 36MHz
				/* Set a wait-state, disable the high-speed read
				 * mode. */
				flashcalw_set_wait_state(1);
    3066:	f04f 0001 	mov.w	r0, #1
    306a:	f642 739d 	movw	r3, #12189	; 0x2f9d
    306e:	f2c0 0300 	movt	r3, #0
    3072:	4798      	blx	r3
				flashcalw_issue_command(
    3074:	f04f 0011 	mov.w	r0, #17
    3078:	f04f 31ff 	mov.w	r1, #4294967295
    307c:	f642 72e5 	movw	r2, #12261	; 0x2fe5
    3080:	f2c0 0200 	movt	r2, #0
    3084:	4790      	blx	r2
    3086:	bd08      	pop	{r3, pc}
						FLASHCALW_FCMD_CMD_HSDIS, -1);
			} else {
				// > 36 MHz
				/* Set a wait-state, enable the high-speed read
				mode. */
				flashcalw_set_wait_state(1);
    3088:	f04f 0001 	mov.w	r0, #1
    308c:	f642 719d 	movw	r1, #12189	; 0x2f9d
    3090:	f2c0 0100 	movt	r1, #0
    3094:	4788      	blx	r1
				flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSEN,
    3096:	f04f 0010 	mov.w	r0, #16
    309a:	f04f 31ff 	mov.w	r1, #4294967295
    309e:	f642 72e5 	movw	r2, #12261	; 0x2fe5
    30a2:	f2c0 0200 	movt	r2, #0
    30a6:	4790      	blx	r2
    30a8:	bd08      	pop	{r3, pc}
						-1);
			}
		} else { // <= 18MHz
			if((is_fwu_enabled == true) &&
    30aa:	b1b2      	cbz	r2, 30da <flashcalw_set_flash_waitstate_and_readmode+0x92>
    30ac:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
    30b0:	f2c0 01b7 	movt	r1, #183	; 0xb7
    30b4:	4288      	cmp	r0, r1
    30b6:	d810      	bhi.n	30da <flashcalw_set_flash_waitstate_and_readmode+0x92>
				(cpu_f_hz <= FLASH_FREQ_PS1_FWS_1_FWU_MAX_FREQ))
			{
				// <= 12MHz
				/* Set a wait-state, disable the high-speed read
				mode. */
				flashcalw_set_wait_state(1);
    30b8:	f04f 0001 	mov.w	r0, #1
    30bc:	f642 719d 	movw	r1, #12189	; 0x2f9d
    30c0:	f2c0 0100 	movt	r1, #0
    30c4:	4788      	blx	r1
				flashcalw_issue_command(
    30c6:	f04f 0011 	mov.w	r0, #17
    30ca:	f04f 31ff 	mov.w	r1, #4294967295
    30ce:	f642 72e5 	movw	r2, #12261	; 0x2fe5
    30d2:	f2c0 0200 	movt	r2, #0
    30d6:	4790      	blx	r2
    30d8:	bd08      	pop	{r3, pc}
						FLASHCALW_FCMD_CMD_HSDIS, -1);
			} else {
				/* No wait-state, disable the high-speed read
				mode */
				flashcalw_set_wait_state(0);
    30da:	f04f 0000 	mov.w	r0, #0
    30de:	f642 729d 	movw	r2, #12189	; 0x2f9d
    30e2:	f2c0 0200 	movt	r2, #0
    30e6:	4790      	blx	r2
				flashcalw_issue_command(
    30e8:	f04f 0011 	mov.w	r0, #17
    30ec:	f04f 31ff 	mov.w	r1, #4294967295
    30f0:	f642 73e5 	movw	r3, #12261	; 0x2fe5
    30f4:	f2c0 0300 	movt	r3, #0
    30f8:	4798      	blx	r3
    30fa:	bd08      	pop	{r3, pc}
					FLASHCALW_FCMD_CMD_HSDIS, -1);
			}
		}
	} else { /* ps_value == 1 */
		if (cpu_f_hz > FLASH_FREQ_PS0_FWS_0_MAX_FREQ) { /* > 8MHz */
    30fc:	f64a 0380 	movw	r3, #43136	; 0xa880
    3100:	f2c0 1312 	movt	r3, #274	; 0x112
    3104:	4298      	cmp	r0, r3
			/* Set a wait-state. */
			flashcalw_set_wait_state(1);
    3106:	bf8c      	ite	hi
    3108:	2001      	movhi	r0, #1
		} else {
			/* No wait-state. */
			flashcalw_set_wait_state(0);
    310a:	2000      	movls	r0, #0
    310c:	f642 719d 	movw	r1, #12189	; 0x2f9d
    3110:	f2c0 0100 	movt	r1, #0
    3114:	4788      	blx	r1
		}

		/* Disable the high-speed read mode. */
		flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSDIS, -1);
    3116:	f04f 0011 	mov.w	r0, #17
    311a:	f04f 31ff 	mov.w	r1, #4294967295
    311e:	f642 72e5 	movw	r2, #12261	; 0x2fe5
    3122:	f2c0 0200 	movt	r2, #0
    3126:	4790      	blx	r2
    3128:	bd08      	pop	{r3, pc}
    312a:	bf00      	nop

0000312c <wdt_set_ctrl>:
 *        to the WatchDog Timer key.
 *
 * \param ctrl  Value to set the WatchDog Timer Control register to.
 */
static void wdt_set_ctrl(uint32_t ctrl)
{
    312c:	b082      	sub	sp, #8
	volatile uint32_t dly;

	/* Calculate delay for internal synchronization, see 44.1.2 WDT errata */
	if ((WDT->WDT_CTRL & WDT_CTRL_CSSEL) == WDT_CLK_SRC_RCSYS) {
    312e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    3132:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3136:	6819      	ldr	r1, [r3, #0]
    3138:	f411 3f00 	tst.w	r1, #131072	; 0x20000
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RCSYS_NOMINAL_HZ);
    313c:	bf0c      	ite	eq
    313e:	f240 3143 	movweq	r1, #835	; 0x343
	} else { /* WDT_CLK_SRC_32K */
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RC32K_NOMINAL_HZ);
    3142:	f44f 6137 	movne.w	r1, #2928	; 0xb70
    3146:	9101      	str	r1, [sp, #4]
	}
	dly >>= 3; /* ~8 cycles for one while loop */
    3148:	9a01      	ldr	r2, [sp, #4]
    314a:	ea4f 03d2 	mov.w	r3, r2, lsr #3
    314e:	9301      	str	r3, [sp, #4]
	while(dly--);
    3150:	9901      	ldr	r1, [sp, #4]
    3152:	f101 32ff 	add.w	r2, r1, #4294967295
    3156:	9201      	str	r2, [sp, #4]
    3158:	2900      	cmp	r1, #0
    315a:	d1f9      	bne.n	3150 <wdt_set_ctrl+0x24>
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_FIRST_KEY);
    315c:	f040 41aa 	orr.w	r1, r0, #1426063360	; 0x55000000
    3160:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    3164:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3168:	6019      	str	r1, [r3, #0]
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_SECOND_KEY);
    316a:	f040 402a 	orr.w	r0, r0, #2852126720	; 0xaa000000
    316e:	6018      	str	r0, [r3, #0]
}
    3170:	b002      	add	sp, #8
    3172:	4770      	bx	lr

00003174 <wdt_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(cfg);

	/* Default configuration values */
	cfg->clk_src = WDT_CLK_SRC_RCSYS;
    3174:	f04f 0300 	mov.w	r3, #0
    3178:	6003      	str	r3, [r0, #0]
	cfg->wdt_mode = WDT_MODE_BASIC;
    317a:	6043      	str	r3, [r0, #4]
	cfg->timeout_period = WDT_PERIOD_131072_CLK;
    317c:	f04f 0210 	mov.w	r2, #16
    3180:	7202      	strb	r2, [r0, #8]
	cfg->window_period = WDT_PERIOD_NONE;
    3182:	7243      	strb	r3, [r0, #9]
	cfg->disable_flash_cali = true;
    3184:	f04f 0101 	mov.w	r1, #1
    3188:	7281      	strb	r1, [r0, #10]
	cfg->disable_wdt_after_reset = true;
    318a:	72c1      	strb	r1, [r0, #11]
	cfg->always_on = false;
    318c:	7303      	strb	r3, [r0, #12]
    318e:	4770      	bx	lr

00003190 <wdt_init>:
 */
bool wdt_init(
		struct wdt_dev_inst *const dev_inst,
		Wdt *const wdt,
		struct wdt_config *const cfg)
{
    3190:	b538      	push	{r3, r4, r5, lr}
    3192:	460c      	mov	r4, r1
    3194:	4615      	mov	r5, r2
	/* Sanity check arguments */
	Assert(dev_inst);
	Assert(wdt);
	Assert(cfg);

	dev_inst->hw_dev = wdt;
    3196:	6001      	str	r1, [r0, #0]
	dev_inst->wdt_cfg = cfg;
    3198:	6042      	str	r2, [r0, #4]

	/* Enable APB clock for WDT */
	sysclk_enable_peripheral_clock(wdt);
    319a:	4608      	mov	r0, r1
    319c:	f641 63fd 	movw	r3, #7933	; 0x1efd
    31a0:	f2c0 0300 	movt	r3, #0
    31a4:	4798      	blx	r3

	/* Check SFV bit: if SFV bit is set, Control Register is locked */
	if (wdt->WDT_CTRL & WDT_CTRL_SFV) {
    31a6:	6820      	ldr	r0, [r4, #0]
    31a8:	f010 0f08 	tst.w	r0, #8
    31ac:	d152      	bne.n	3254 <wdt_init+0xc4>
		return false;
	}

	/* Disable the WDT */
	if (wdt->WDT_CTRL & WDT_CTRL_EN) {
    31ae:	6821      	ldr	r1, [r4, #0]
    31b0:	f011 0f01 	tst.w	r1, #1
    31b4:	d00b      	beq.n	31ce <wdt_init+0x3e>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    31b6:	6822      	ldr	r2, [r4, #0]
    31b8:	f022 0001 	bic.w	r0, r2, #1
    31bc:	f243 132d 	movw	r3, #12589	; 0x312d
    31c0:	f2c0 0300 	movt	r3, #0
    31c4:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    31c6:	6820      	ldr	r0, [r4, #0]
    31c8:	f010 0f01 	tst.w	r0, #1
    31cc:	d1fb      	bne.n	31c6 <wdt_init+0x36>
		}
	}
	/* Disable the WDT clock */
	if (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    31ce:	6821      	ldr	r1, [r4, #0]
    31d0:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    31d4:	d00b      	beq.n	31ee <wdt_init+0x5e>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_CEN);
    31d6:	6822      	ldr	r2, [r4, #0]
    31d8:	f422 3080 	bic.w	r0, r2, #65536	; 0x10000
    31dc:	f243 132d 	movw	r3, #12589	; 0x312d
    31e0:	f2c0 0300 	movt	r3, #0
    31e4:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    31e6:	6820      	ldr	r0, [r4, #0]
    31e8:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    31ec:	d1fb      	bne.n	31e6 <wdt_init+0x56>
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
    31ee:	6869      	ldr	r1, [r5, #4]
    31f0:	682a      	ldr	r2, [r5, #0]
    31f2:	ea41 0302 	orr.w	r3, r1, r2
			cfg->wdt_mode |
			WDT_CTRL_PSEL(cfg->timeout_period) |
    31f6:	7a28      	ldrb	r0, [r5, #8]
    31f8:	ea4f 2100 	mov.w	r1, r0, lsl #8
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
			cfg->wdt_mode |
    31fc:	f401 52f8 	and.w	r2, r1, #7936	; 0x1f00
    3200:	ea43 0002 	orr.w	r0, r3, r2
			WDT_CTRL_PSEL(cfg->timeout_period) |
			WDT_CTRL_TBAN(cfg->window_period) |
    3204:	7a6b      	ldrb	r3, [r5, #9]
    3206:	ea4f 4183 	mov.w	r1, r3, lsl #18
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
			cfg->wdt_mode |
			WDT_CTRL_PSEL(cfg->timeout_period) |
    320a:	f401 02f8 	and.w	r2, r1, #8126464	; 0x7c0000
    320e:	4310      	orrs	r0, r2
			WDT_CTRL_TBAN(cfg->window_period) |
    3210:	7aab      	ldrb	r3, [r5, #10]
    3212:	2b00      	cmp	r3, #0
    3214:	bf14      	ite	ne
    3216:	2180      	movne	r1, #128	; 0x80
    3218:	2100      	moveq	r1, #0
    321a:	4308      	orrs	r0, r1
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
    321c:	7aed      	ldrb	r5, [r5, #11]
    321e:	2d00      	cmp	r5, #0
    3220:	bf14      	ite	ne
    3222:	2202      	movne	r2, #2
    3224:	2200      	moveq	r2, #0
    3226:	4310      	orrs	r0, r2
    3228:	f243 152d 	movw	r5, #12589	; 0x312d
    322c:	f2c0 0500 	movt	r5, #0
    3230:	47a8      	blx	r5
			WDT_CTRL_PSEL(cfg->timeout_period) |
			WDT_CTRL_TBAN(cfg->window_period) |
			(cfg->disable_flash_cali ? WDT_CTRL_FCD : 0) |
			(cfg->disable_wdt_after_reset ? WDT_CTRL_DAR : 0)
	);
	wdt_set_ctrl(wdt->WDT_CTRL | WDT_CTRL_CEN);
    3232:	6820      	ldr	r0, [r4, #0]
    3234:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
    3238:	47a8      	blx	r5
	while (!(wdt->WDT_CTRL & WDT_CTRL_CEN)) {
    323a:	6823      	ldr	r3, [r4, #0]
    323c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3240:	d0fb      	beq.n	323a <wdt_init+0xaa>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    3242:	4620      	mov	r0, r4
    3244:	f242 51dd 	movw	r1, #9693	; 0x25dd
    3248:	f2c0 0100 	movt	r1, #0
    324c:	4788      	blx	r1

	return true;
    324e:	f04f 0001 	mov.w	r0, #1
    3252:	bd38      	pop	{r3, r4, r5, pc}
	/* Enable APB clock for WDT */
	sysclk_enable_peripheral_clock(wdt);

	/* Check SFV bit: if SFV bit is set, Control Register is locked */
	if (wdt->WDT_CTRL & WDT_CTRL_SFV) {
		return false;
    3254:	f04f 0000 	mov.w	r0, #0

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);

	return true;
}
    3258:	bd38      	pop	{r3, r4, r5, pc}
    325a:	bf00      	nop

0000325c <wdt_disable>:
 * \brief Disable the WDT module.
 *
 * \param dev_inst    Device structure pointer.
 */
void wdt_disable(struct wdt_dev_inst *const dev_inst)
{
    325c:	b510      	push	{r4, lr}
	Wdt *wdt = dev_inst->hw_dev;
    325e:	6804      	ldr	r4, [r0, #0]

	/* Disable the WDT */
	wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    3260:	6820      	ldr	r0, [r4, #0]
    3262:	f020 0001 	bic.w	r0, r0, #1
    3266:	f243 132d 	movw	r3, #12589	; 0x312d
    326a:	f2c0 0300 	movt	r3, #0
    326e:	4798      	blx	r3
	while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    3270:	6821      	ldr	r1, [r4, #0]
    3272:	f011 0f01 	tst.w	r1, #1
    3276:	d1fb      	bne.n	3270 <wdt_disable+0x14>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    3278:	4620      	mov	r0, r4
    327a:	f242 52dd 	movw	r2, #9693	; 0x25dd
    327e:	f2c0 0200 	movt	r2, #0
    3282:	4790      	blx	r2
    3284:	bd10      	pop	{r4, pc}
    3286:	bf00      	nop

00003288 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3288:	e7fe      	b.n	3288 <Dummy_Handler>
    328a:	bf00      	nop

0000328c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    328c:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
    328e:	f240 0300 	movw	r3, #0
    3292:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3296:	f645 6258 	movw	r2, #24152	; 0x5e58
    329a:	f2c0 0200 	movt	r2, #0
    329e:	429a      	cmp	r2, r3
    32a0:	d003      	beq.n	32aa <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
    32a2:	4839      	ldr	r0, [pc, #228]	; (3388 <Reset_Handler+0xfc>)
    32a4:	4939      	ldr	r1, [pc, #228]	; (338c <Reset_Handler+0x100>)
    32a6:	4281      	cmp	r1, r0
    32a8:	d304      	bcc.n	32b4 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    32aa:	4b39      	ldr	r3, [pc, #228]	; (3390 <Reset_Handler+0x104>)
    32ac:	4a39      	ldr	r2, [pc, #228]	; (3394 <Reset_Handler+0x108>)
    32ae:	429a      	cmp	r2, r3
    32b0:	d325      	bcc.n	32fe <Reset_Handler+0x72>
    32b2:	e042      	b.n	333a <Reset_Handler+0xae>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
    32b4:	4d38      	ldr	r5, [pc, #224]	; (3398 <Reset_Handler+0x10c>)
    32b6:	4c39      	ldr	r4, [pc, #228]	; (339c <Reset_Handler+0x110>)
    32b8:	1b63      	subs	r3, r4, r5
    32ba:	f023 0503 	bic.w	r5, r3, #3
    32be:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
    32c2:	f240 0200 	movw	r2, #0
    32c6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    32ca:	f645 6158 	movw	r1, #24152	; 0x5e58
    32ce:	f2c0 0100 	movt	r1, #0
    32d2:	f105 0004 	add.w	r0, r5, #4
    32d6:	f3c5 0480 	ubfx	r4, r5, #2, #1
    32da:	585d      	ldr	r5, [r3, r1]
    32dc:	509d      	str	r5, [r3, r2]
    32de:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    32e2:	4283      	cmp	r3, r0
    32e4:	d146      	bne.n	3374 <Reset_Handler+0xe8>
    32e6:	e7e0      	b.n	32aa <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
    32e8:	585d      	ldr	r5, [r3, r1]
    32ea:	509d      	str	r5, [r3, r2]
    32ec:	f103 0304 	add.w	r3, r3, #4
    32f0:	585c      	ldr	r4, [r3, r1]
    32f2:	509c      	str	r4, [r3, r2]
    32f4:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    32f8:	4283      	cmp	r3, r0
    32fa:	d1f5      	bne.n	32e8 <Reset_Handler+0x5c>
    32fc:	e7d5      	b.n	32aa <Reset_Handler+0x1e>
    32fe:	4d28      	ldr	r5, [pc, #160]	; (33a0 <Reset_Handler+0x114>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
    3300:	4928      	ldr	r1, [pc, #160]	; (33a4 <Reset_Handler+0x118>)
    3302:	1b48      	subs	r0, r1, r5
    3304:	f020 0403 	bic.w	r4, r0, #3
    3308:	f640 1310 	movw	r3, #2320	; 0x910
    330c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3310:	18e2      	adds	r2, r4, r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
    3312:	f04f 0100 	mov.w	r1, #0
    3316:	1b50      	subs	r0, r2, r5
    3318:	f1a0 0004 	sub.w	r0, r0, #4
    331c:	f3c0 0480 	ubfx	r4, r0, #2, #1
    3320:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    3324:	4295      	cmp	r5, r2
    3326:	d11e      	bne.n	3366 <Reset_Handler+0xda>
    3328:	e007      	b.n	333a <Reset_Handler+0xae>
    332a:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
    332e:	6069      	str	r1, [r5, #4]
    3330:	f105 0508 	add.w	r5, r5, #8
    3334:	6059      	str	r1, [r3, #4]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    3336:	4295      	cmp	r5, r2
    3338:	d1f7      	bne.n	332a <Reset_Handler+0x9e>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) &_sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    333a:	f240 0500 	movw	r5, #0
    333e:	f2c0 0500 	movt	r5, #0
    3342:	f025 027f 	bic.w	r2, r5, #127	; 0x7f
    3346:	f44f 416d 	mov.w	r1, #60672	; 0xed00
    334a:	f2ce 0100 	movt	r1, #57344	; 0xe000
    334e:	608a      	str	r2, [r1, #8]

	/* Initialize the C library */
	__libc_init_array();
    3350:	f243 40c5 	movw	r0, #13509	; 0x34c5
    3354:	f2c0 0000 	movt	r0, #0
    3358:	4780      	blx	r0

	/* Branch to main function */
	main();
    335a:	f241 54e1 	movw	r4, #5601	; 0x15e1
    335e:	f2c0 0400 	movt	r4, #0
    3362:	47a0      	blx	r4
    3364:	e7fe      	b.n	3364 <Reset_Handler+0xd8>
    3366:	2c00      	cmp	r4, #0
    3368:	d0df      	beq.n	332a <Reset_Handler+0x9e>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
    336a:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    336e:	4295      	cmp	r5, r2
    3370:	d1db      	bne.n	332a <Reset_Handler+0x9e>
    3372:	e7e2      	b.n	333a <Reset_Handler+0xae>
    3374:	2c00      	cmp	r4, #0
    3376:	d0b7      	beq.n	32e8 <Reset_Handler+0x5c>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
    3378:	585c      	ldr	r4, [r3, r1]
    337a:	509c      	str	r4, [r3, r2]
    337c:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    3380:	4283      	cmp	r3, r0
    3382:	d1b1      	bne.n	32e8 <Reset_Handler+0x5c>
    3384:	e791      	b.n	32aa <Reset_Handler+0x1e>
    3386:	bf00      	nop
    3388:	20000910 	.word	0x20000910
    338c:	20000000 	.word	0x20000000
    3390:	20000aa8 	.word	0x20000aa8
    3394:	20000910 	.word	0x20000910
    3398:	20000004 	.word	0x20000004
    339c:	20000913 	.word	0x20000913
    33a0:	2000090c 	.word	0x2000090c
    33a4:	20000aa3 	.word	0x20000aa3

000033a8 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    33a8:	f640 13d8 	movw	r3, #2520	; 0x9d8
    33ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33b0:	6819      	ldr	r1, [r3, #0]
    33b2:	b941      	cbnz	r1, 33c6 <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
    33b4:	f640 13d8 	movw	r3, #2520	; 0x9d8
    33b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33bc:	f641 22a8 	movw	r2, #6824	; 0x1aa8
    33c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    33c4:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    33c6:	f640 11d8 	movw	r1, #2520	; 0x9d8
    33ca:	f2c2 0100 	movt	r1, #8192	; 0x2000
    33ce:	680b      	ldr	r3, [r1, #0]

	heap += incr;
    33d0:	1818      	adds	r0, r3, r0
    33d2:	6008      	str	r0, [r1, #0]

	return (caddr_t) prev_heap;
}
    33d4:	4618      	mov	r0, r3
    33d6:	4770      	bx	lr

000033d8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    33d8:	f04f 30ff 	mov.w	r0, #4294967295
    33dc:	4770      	bx	lr
    33de:	bf00      	nop

000033e0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    33e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    33e4:	604b      	str	r3, [r1, #4]

	return 0;
}
    33e6:	f04f 0000 	mov.w	r0, #0
    33ea:	4770      	bx	lr

000033ec <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    33ec:	f04f 0001 	mov.w	r0, #1
    33f0:	4770      	bx	lr
    33f2:	bf00      	nop

000033f4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    33f4:	f04f 0000 	mov.w	r0, #0
    33f8:	4770      	bx	lr
    33fa:	bf00      	nop

000033fc <__register_exitproc>:
    33fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3400:	4698      	mov	r8, r3
    3402:	4b23      	ldr	r3, [pc, #140]	; (3490 <__register_exitproc+0x94>)
    3404:	681c      	ldr	r4, [r3, #0]
    3406:	4606      	mov	r6, r0
    3408:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    340c:	460f      	mov	r7, r1
    340e:	4691      	mov	r9, r2
    3410:	b918      	cbnz	r0, 341a <__register_exitproc+0x1e>
    3412:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
    3416:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    341a:	6841      	ldr	r1, [r0, #4]
    341c:	291f      	cmp	r1, #31
    341e:	dd16      	ble.n	344e <__register_exitproc+0x52>
    3420:	481c      	ldr	r0, [pc, #112]	; (3494 <__register_exitproc+0x98>)
    3422:	b918      	cbnz	r0, 342c <__register_exitproc+0x30>
    3424:	f04f 30ff 	mov.w	r0, #4294967295
    3428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    342c:	f44f 70c8 	mov.w	r0, #400	; 0x190
    3430:	f001 fb84 	bl	4b3c <malloc>
    3434:	2800      	cmp	r0, #0
    3436:	d0f5      	beq.n	3424 <__register_exitproc+0x28>
    3438:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    343c:	2500      	movs	r5, #0
    343e:	6045      	str	r5, [r0, #4]
    3440:	6002      	str	r2, [r0, #0]
    3442:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    3446:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
    344a:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
    344e:	b1b6      	cbz	r6, 347e <__register_exitproc+0x82>
    3450:	6844      	ldr	r4, [r0, #4]
    3452:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    3456:	2201      	movs	r2, #1
    3458:	eb00 0384 	add.w	r3, r0, r4, lsl #2
    345c:	fa02 f204 	lsl.w	r2, r2, r4
    3460:	4311      	orrs	r1, r2
    3462:	2e02      	cmp	r6, #2
    3464:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
    3468:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    346c:	461c      	mov	r4, r3
    346e:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
    3472:	d104      	bne.n	347e <__register_exitproc+0x82>
    3474:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
    3478:	431a      	orrs	r2, r3
    347a:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
    347e:	6841      	ldr	r1, [r0, #4]
    3480:	1c8b      	adds	r3, r1, #2
    3482:	1c4a      	adds	r2, r1, #1
    3484:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    3488:	6042      	str	r2, [r0, #4]
    348a:	2000      	movs	r0, #0
    348c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3490:	00005dd8 	.word	0x00005dd8
    3494:	00004b3d 	.word	0x00004b3d

00003498 <__libc_fini_array>:
    3498:	b570      	push	{r4, r5, r6, lr}
    349a:	4b08      	ldr	r3, [pc, #32]	; (34bc <__libc_fini_array+0x24>)
    349c:	4c08      	ldr	r4, [pc, #32]	; (34c0 <__libc_fini_array+0x28>)
    349e:	1ae0      	subs	r0, r4, r3
    34a0:	1084      	asrs	r4, r0, #2
    34a2:	eb03 0684 	add.w	r6, r3, r4, lsl #2
    34a6:	2500      	movs	r5, #0
    34a8:	3d04      	subs	r5, #4
    34aa:	b11c      	cbz	r4, 34b4 <__libc_fini_array+0x1c>
    34ac:	5972      	ldr	r2, [r6, r5]
    34ae:	4790      	blx	r2
    34b0:	3c01      	subs	r4, #1
    34b2:	e7f9      	b.n	34a8 <__libc_fini_array+0x10>
    34b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    34b8:	f002 bcc2 	b.w	5e40 <_fini>
    34bc:	00005e4c 	.word	0x00005e4c
    34c0:	00005e50 	.word	0x00005e50

000034c4 <__libc_init_array>:
    34c4:	b538      	push	{r3, r4, r5, lr}
    34c6:	4d0e      	ldr	r5, [pc, #56]	; (3500 <__libc_init_array+0x3c>)
    34c8:	4b0e      	ldr	r3, [pc, #56]	; (3504 <__libc_init_array+0x40>)
    34ca:	1ae8      	subs	r0, r5, r3
    34cc:	1085      	asrs	r5, r0, #2
    34ce:	2400      	movs	r4, #0
    34d0:	42ac      	cmp	r4, r5
    34d2:	d005      	beq.n	34e0 <__libc_init_array+0x1c>
    34d4:	490b      	ldr	r1, [pc, #44]	; (3504 <__libc_init_array+0x40>)
    34d6:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
    34da:	4790      	blx	r2
    34dc:	3401      	adds	r4, #1
    34de:	e7f7      	b.n	34d0 <__libc_init_array+0xc>
    34e0:	f002 fca4 	bl	5e2c <_init>
    34e4:	4908      	ldr	r1, [pc, #32]	; (3508 <__libc_init_array+0x44>)
    34e6:	4a09      	ldr	r2, [pc, #36]	; (350c <__libc_init_array+0x48>)
    34e8:	1a54      	subs	r4, r2, r1
    34ea:	10a5      	asrs	r5, r4, #2
    34ec:	2400      	movs	r4, #0
    34ee:	42ac      	cmp	r4, r5
    34f0:	d005      	beq.n	34fe <__libc_init_array+0x3a>
    34f2:	4b05      	ldr	r3, [pc, #20]	; (3508 <__libc_init_array+0x44>)
    34f4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    34f8:	4780      	blx	r0
    34fa:	3401      	adds	r4, #1
    34fc:	e7f7      	b.n	34ee <__libc_init_array+0x2a>
    34fe:	bd38      	pop	{r3, r4, r5, pc}
    3500:	00005e38 	.word	0x00005e38
    3504:	00005e38 	.word	0x00005e38
    3508:	00005e38 	.word	0x00005e38
    350c:	00005e40 	.word	0x00005e40

00003510 <iprintf>:
    3510:	b40f      	push	{r0, r1, r2, r3}
    3512:	b507      	push	{r0, r1, r2, lr}
    3514:	4906      	ldr	r1, [pc, #24]	; (3530 <iprintf+0x20>)
    3516:	ab04      	add	r3, sp, #16
    3518:	6808      	ldr	r0, [r1, #0]
    351a:	f853 2b04 	ldr.w	r2, [r3], #4
    351e:	6881      	ldr	r1, [r0, #8]
    3520:	9301      	str	r3, [sp, #4]
    3522:	f000 f911 	bl	3748 <_vfiprintf_r>
    3526:	e8bd 400e 	ldmia.w	sp!, {r1, r2, r3, lr}
    352a:	b004      	add	sp, #16
    352c:	4770      	bx	lr
    352e:	bf00      	nop
    3530:	20000050 	.word	0x20000050

00003534 <_iprintf_r>:
    3534:	b40e      	push	{r1, r2, r3}
    3536:	b503      	push	{r0, r1, lr}
    3538:	ab03      	add	r3, sp, #12
    353a:	6881      	ldr	r1, [r0, #8]
    353c:	f853 2b04 	ldr.w	r2, [r3], #4
    3540:	9301      	str	r3, [sp, #4]
    3542:	f000 f901 	bl	3748 <_vfiprintf_r>
    3546:	e8bd 400c 	ldmia.w	sp!, {r2, r3, lr}
    354a:	b003      	add	sp, #12
    354c:	4770      	bx	lr
    354e:	bf00      	nop

00003550 <memset>:
    3550:	1882      	adds	r2, r0, r2
    3552:	4603      	mov	r3, r0
    3554:	4293      	cmp	r3, r2
    3556:	d002      	beq.n	355e <memset+0xe>
    3558:	f803 1b01 	strb.w	r1, [r3], #1
    355c:	e7fa      	b.n	3554 <memset+0x4>
    355e:	4770      	bx	lr

00003560 <_puts_r>:
    3560:	b530      	push	{r4, r5, lr}
    3562:	4605      	mov	r5, r0
    3564:	b089      	sub	sp, #36	; 0x24
    3566:	4608      	mov	r0, r1
    3568:	460c      	mov	r4, r1
    356a:	f000 f8b1 	bl	36d0 <strlen>
    356e:	2101      	movs	r1, #1
    3570:	1843      	adds	r3, r0, r1
    3572:	9107      	str	r1, [sp, #28]
    3574:	4911      	ldr	r1, [pc, #68]	; (35bc <_puts_r+0x5c>)
    3576:	9303      	str	r3, [sp, #12]
    3578:	680b      	ldr	r3, [r1, #0]
    357a:	4a11      	ldr	r2, [pc, #68]	; (35c0 <_puts_r+0x60>)
    357c:	9005      	str	r0, [sp, #20]
    357e:	a804      	add	r0, sp, #16
    3580:	9001      	str	r0, [sp, #4]
    3582:	6898      	ldr	r0, [r3, #8]
    3584:	9206      	str	r2, [sp, #24]
    3586:	2202      	movs	r2, #2
    3588:	9202      	str	r2, [sp, #8]
    358a:	8982      	ldrh	r2, [r0, #12]
    358c:	9404      	str	r4, [sp, #16]
    358e:	f402 5100 	and.w	r1, r2, #8192	; 0x2000
    3592:	b20b      	sxth	r3, r1
    3594:	b933      	cbnz	r3, 35a4 <_puts_r+0x44>
    3596:	6e41      	ldr	r1, [r0, #100]	; 0x64
    3598:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    359c:	f421 5300 	bic.w	r3, r1, #8192	; 0x2000
    35a0:	8182      	strh	r2, [r0, #12]
    35a2:	6643      	str	r3, [r0, #100]	; 0x64
    35a4:	4628      	mov	r0, r5
    35a6:	68a9      	ldr	r1, [r5, #8]
    35a8:	aa01      	add	r2, sp, #4
    35aa:	f001 f879 	bl	46a0 <__sfvwrite_r>
    35ae:	2800      	cmp	r0, #0
    35b0:	bf0c      	ite	eq
    35b2:	200a      	moveq	r0, #10
    35b4:	f04f 30ff 	movne.w	r0, #4294967295
    35b8:	b009      	add	sp, #36	; 0x24
    35ba:	bd30      	pop	{r4, r5, pc}
    35bc:	20000050 	.word	0x20000050
    35c0:	00005dde 	.word	0x00005dde

000035c4 <puts>:
    35c4:	4b02      	ldr	r3, [pc, #8]	; (35d0 <puts+0xc>)
    35c6:	4601      	mov	r1, r0
    35c8:	6818      	ldr	r0, [r3, #0]
    35ca:	f7ff bfc9 	b.w	3560 <_puts_r>
    35ce:	bf00      	nop
    35d0:	20000050 	.word	0x20000050

000035d4 <setbuf>:
    35d4:	2900      	cmp	r1, #0
    35d6:	bf0c      	ite	eq
    35d8:	2202      	moveq	r2, #2
    35da:	2200      	movne	r2, #0
    35dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    35e0:	f000 b800 	b.w	35e4 <setvbuf>

000035e4 <setvbuf>:
    35e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    35e8:	461d      	mov	r5, r3
    35ea:	4b37      	ldr	r3, [pc, #220]	; (36c8 <setvbuf+0xe4>)
    35ec:	4604      	mov	r4, r0
    35ee:	6818      	ldr	r0, [r3, #0]
    35f0:	460e      	mov	r6, r1
    35f2:	4617      	mov	r7, r2
    35f4:	4698      	mov	r8, r3
    35f6:	b118      	cbz	r0, 3600 <setvbuf+0x1c>
    35f8:	6b82      	ldr	r2, [r0, #56]	; 0x38
    35fa:	b90a      	cbnz	r2, 3600 <setvbuf+0x1c>
    35fc:	f000 fe5c 	bl	42b8 <__sinit>
    3600:	2f02      	cmp	r7, #2
    3602:	d85d      	bhi.n	36c0 <setvbuf+0xdc>
    3604:	2d00      	cmp	r5, #0
    3606:	db5b      	blt.n	36c0 <setvbuf+0xdc>
    3608:	4621      	mov	r1, r4
    360a:	f8d8 0000 	ldr.w	r0, [r8]
    360e:	f000 fd5f 	bl	40d0 <_fflush_r>
    3612:	89a1      	ldrh	r1, [r4, #12]
    3614:	f001 0380 	and.w	r3, r1, #128	; 0x80
    3618:	2000      	movs	r0, #0
    361a:	b21a      	sxth	r2, r3
    361c:	6060      	str	r0, [r4, #4]
    361e:	61a0      	str	r0, [r4, #24]
    3620:	b122      	cbz	r2, 362c <setvbuf+0x48>
    3622:	4829      	ldr	r0, [pc, #164]	; (36c8 <setvbuf+0xe4>)
    3624:	6921      	ldr	r1, [r4, #16]
    3626:	6800      	ldr	r0, [r0, #0]
    3628:	f000 ff84 	bl	4534 <_free_r>
    362c:	89a1      	ldrh	r1, [r4, #12]
    362e:	2f02      	cmp	r7, #2
    3630:	f021 0383 	bic.w	r3, r1, #131	; 0x83
    3634:	81a3      	strh	r3, [r4, #12]
    3636:	d012      	beq.n	365e <setvbuf+0x7a>
    3638:	bb36      	cbnz	r6, 3688 <setvbuf+0xa4>
    363a:	2d00      	cmp	r5, #0
    363c:	bf08      	it	eq
    363e:	f44f 6580 	moveq.w	r5, #1024	; 0x400
    3642:	4628      	mov	r0, r5
    3644:	f001 fa7a 	bl	4b3c <malloc>
    3648:	4606      	mov	r6, r0
    364a:	b9c8      	cbnz	r0, 3680 <setvbuf+0x9c>
    364c:	f44f 6080 	mov.w	r0, #1024	; 0x400
    3650:	f001 fa74 	bl	4b3c <malloc>
    3654:	4606      	mov	r6, r0
    3656:	b988      	cbnz	r0, 367c <setvbuf+0x98>
    3658:	f04f 30ff 	mov.w	r0, #4294967295
    365c:	e000      	b.n	3660 <setvbuf+0x7c>
    365e:	2000      	movs	r0, #0
    3660:	89a1      	ldrh	r1, [r4, #12]
    3662:	f041 0302 	orr.w	r3, r1, #2
    3666:	81a3      	strh	r3, [r4, #12]
    3668:	f104 0143 	add.w	r1, r4, #67	; 0x43
    366c:	2200      	movs	r2, #0
    366e:	2301      	movs	r3, #1
    3670:	60a2      	str	r2, [r4, #8]
    3672:	6021      	str	r1, [r4, #0]
    3674:	6121      	str	r1, [r4, #16]
    3676:	6163      	str	r3, [r4, #20]
    3678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    367c:	f44f 6580 	mov.w	r5, #1024	; 0x400
    3680:	89a2      	ldrh	r2, [r4, #12]
    3682:	f042 0080 	orr.w	r0, r2, #128	; 0x80
    3686:	81a0      	strh	r0, [r4, #12]
    3688:	2f01      	cmp	r7, #1
    368a:	d105      	bne.n	3698 <setvbuf+0xb4>
    368c:	89a1      	ldrh	r1, [r4, #12]
    368e:	426a      	negs	r2, r5
    3690:	f041 0301 	orr.w	r3, r1, #1
    3694:	81a3      	strh	r3, [r4, #12]
    3696:	61a2      	str	r2, [r4, #24]
    3698:	480b      	ldr	r0, [pc, #44]	; (36c8 <setvbuf+0xe4>)
    369a:	89a2      	ldrh	r2, [r4, #12]
    369c:	6801      	ldr	r1, [r0, #0]
    369e:	4b0b      	ldr	r3, [pc, #44]	; (36cc <setvbuf+0xe8>)
    36a0:	f002 0008 	and.w	r0, r2, #8
    36a4:	b200      	sxth	r0, r0
    36a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    36a8:	6026      	str	r6, [r4, #0]
    36aa:	6126      	str	r6, [r4, #16]
    36ac:	6165      	str	r5, [r4, #20]
    36ae:	b148      	cbz	r0, 36c4 <setvbuf+0xe0>
    36b0:	f012 0f03 	tst.w	r2, #3
    36b4:	bf18      	it	ne
    36b6:	2500      	movne	r5, #0
    36b8:	60a5      	str	r5, [r4, #8]
    36ba:	2000      	movs	r0, #0
    36bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    36c0:	f04f 30ff 	mov.w	r0, #4294967295
    36c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    36c8:	20000050 	.word	0x20000050
    36cc:	0000422d 	.word	0x0000422d

000036d0 <strlen>:
    36d0:	4603      	mov	r3, r0
    36d2:	f813 2b01 	ldrb.w	r2, [r3], #1
    36d6:	2a00      	cmp	r2, #0
    36d8:	d1fb      	bne.n	36d2 <strlen+0x2>
    36da:	1a18      	subs	r0, r3, r0
    36dc:	3801      	subs	r0, #1
    36de:	4770      	bx	lr

000036e0 <__sprint_r>:
    36e0:	6893      	ldr	r3, [r2, #8]
    36e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    36e6:	4681      	mov	r9, r0
    36e8:	460f      	mov	r7, r1
    36ea:	4614      	mov	r4, r2
    36ec:	b91b      	cbnz	r3, 36f6 <__sprint_r+0x16>
    36ee:	6053      	str	r3, [r2, #4]
    36f0:	4618      	mov	r0, r3
    36f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    36f6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    36f8:	049b      	lsls	r3, r3, #18
    36fa:	d51e      	bpl.n	373a <__sprint_r+0x5a>
    36fc:	6815      	ldr	r5, [r2, #0]
    36fe:	68a0      	ldr	r0, [r4, #8]
    3700:	3508      	adds	r5, #8
    3702:	b1c8      	cbz	r0, 3738 <__sprint_r+0x58>
    3704:	f855 1c04 	ldr.w	r1, [r5, #-4]
    3708:	f855 ac08 	ldr.w	sl, [r5, #-8]
    370c:	ea4f 0891 	mov.w	r8, r1, lsr #2
    3710:	2600      	movs	r6, #0
    3712:	4546      	cmp	r6, r8
    3714:	da09      	bge.n	372a <__sprint_r+0x4a>
    3716:	4648      	mov	r0, r9
    3718:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
    371c:	463a      	mov	r2, r7
    371e:	f000 fe47 	bl	43b0 <_fputwc_r>
    3722:	1c43      	adds	r3, r0, #1
    3724:	d00b      	beq.n	373e <__sprint_r+0x5e>
    3726:	3601      	adds	r6, #1
    3728:	e7f3      	b.n	3712 <__sprint_r+0x32>
    372a:	68a2      	ldr	r2, [r4, #8]
    372c:	ea4f 0888 	mov.w	r8, r8, lsl #2
    3730:	ebc8 0302 	rsb	r3, r8, r2
    3734:	60a3      	str	r3, [r4, #8]
    3736:	e7e2      	b.n	36fe <__sprint_r+0x1e>
    3738:	e001      	b.n	373e <__sprint_r+0x5e>
    373a:	f000 ffb1 	bl	46a0 <__sfvwrite_r>
    373e:	2100      	movs	r1, #0
    3740:	60a1      	str	r1, [r4, #8]
    3742:	6061      	str	r1, [r4, #4]
    3744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00003748 <_vfiprintf_r>:
    3748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    374c:	4689      	mov	r9, r1
    374e:	b0a9      	sub	sp, #164	; 0xa4
    3750:	4614      	mov	r4, r2
    3752:	461d      	mov	r5, r3
    3754:	461e      	mov	r6, r3
    3756:	4682      	mov	sl, r0
    3758:	b118      	cbz	r0, 3762 <_vfiprintf_r+0x1a>
    375a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    375c:	b90b      	cbnz	r3, 3762 <_vfiprintf_r+0x1a>
    375e:	f000 fdab 	bl	42b8 <__sinit>
    3762:	f8b9 000c 	ldrh.w	r0, [r9, #12]
    3766:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
    376a:	b211      	sxth	r1, r2
    376c:	b949      	cbnz	r1, 3782 <_vfiprintf_r+0x3a>
    376e:	f440 5300 	orr.w	r3, r0, #8192	; 0x2000
    3772:	f8d9 0064 	ldr.w	r0, [r9, #100]	; 0x64
    3776:	f8a9 300c 	strh.w	r3, [r9, #12]
    377a:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
    377e:	f8c9 2064 	str.w	r2, [r9, #100]	; 0x64
    3782:	f8b9 100c 	ldrh.w	r1, [r9, #12]
    3786:	f001 0308 	and.w	r3, r1, #8
    378a:	b218      	sxth	r0, r3
    378c:	b148      	cbz	r0, 37a2 <_vfiprintf_r+0x5a>
    378e:	f8d9 2010 	ldr.w	r2, [r9, #16]
    3792:	b132      	cbz	r2, 37a2 <_vfiprintf_r+0x5a>
    3794:	f8b9 100c 	ldrh.w	r1, [r9, #12]
    3798:	f001 031a 	and.w	r3, r1, #26
    379c:	2b0a      	cmp	r3, #10
    379e:	d116      	bne.n	37ce <_vfiprintf_r+0x86>
    37a0:	e009      	b.n	37b6 <_vfiprintf_r+0x6e>
    37a2:	4650      	mov	r0, sl
    37a4:	4649      	mov	r1, r9
    37a6:	f000 fc27 	bl	3ff8 <__swsetup_r>
    37aa:	2800      	cmp	r0, #0
    37ac:	d0f2      	beq.n	3794 <_vfiprintf_r+0x4c>
    37ae:	f04f 32ff 	mov.w	r2, #4294967295
    37b2:	9203      	str	r2, [sp, #12]
    37b4:	e3d5      	b.n	3f62 <_vfiprintf_r+0x81a>
    37b6:	f9b9 000e 	ldrsh.w	r0, [r9, #14]
    37ba:	2800      	cmp	r0, #0
    37bc:	db07      	blt.n	37ce <_vfiprintf_r+0x86>
    37be:	4650      	mov	r0, sl
    37c0:	4649      	mov	r1, r9
    37c2:	4622      	mov	r2, r4
    37c4:	462b      	mov	r3, r5
    37c6:	f000 fbd0 	bl	3f6a <__sbprintf>
    37ca:	9003      	str	r0, [sp, #12]
    37cc:	e3c9      	b.n	3f62 <_vfiprintf_r+0x81a>
    37ce:	2200      	movs	r2, #0
    37d0:	ad18      	add	r5, sp, #96	; 0x60
    37d2:	950b      	str	r5, [sp, #44]	; 0x2c
    37d4:	920d      	str	r2, [sp, #52]	; 0x34
    37d6:	920c      	str	r2, [sp, #48]	; 0x30
    37d8:	9401      	str	r4, [sp, #4]
    37da:	9205      	str	r2, [sp, #20]
    37dc:	9203      	str	r2, [sp, #12]
    37de:	46a8      	mov	r8, r5
    37e0:	9901      	ldr	r1, [sp, #4]
    37e2:	460c      	mov	r4, r1
    37e4:	f811 3b01 	ldrb.w	r3, [r1], #1
    37e8:	b10b      	cbz	r3, 37ee <_vfiprintf_r+0xa6>
    37ea:	2b25      	cmp	r3, #37	; 0x25
    37ec:	d1f9      	bne.n	37e2 <_vfiprintf_r+0x9a>
    37ee:	9a01      	ldr	r2, [sp, #4]
    37f0:	1aa5      	subs	r5, r4, r2
    37f2:	d019      	beq.n	3828 <_vfiprintf_r+0xe0>
    37f4:	990c      	ldr	r1, [sp, #48]	; 0x30
    37f6:	980d      	ldr	r0, [sp, #52]	; 0x34
    37f8:	1c4b      	adds	r3, r1, #1
    37fa:	e888 0024 	stmia.w	r8, {r2, r5}
    37fe:	2b07      	cmp	r3, #7
    3800:	eb00 0205 	add.w	r2, r0, r5
    3804:	920d      	str	r2, [sp, #52]	; 0x34
    3806:	f108 0808 	add.w	r8, r8, #8
    380a:	930c      	str	r3, [sp, #48]	; 0x30
    380c:	dd09      	ble.n	3822 <_vfiprintf_r+0xda>
    380e:	4650      	mov	r0, sl
    3810:	4649      	mov	r1, r9
    3812:	aa0b      	add	r2, sp, #44	; 0x2c
    3814:	f7ff ff64 	bl	36e0 <__sprint_r>
    3818:	2800      	cmp	r0, #0
    381a:	f040 839a 	bne.w	3f52 <_vfiprintf_r+0x80a>
    381e:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    3822:	9803      	ldr	r0, [sp, #12]
    3824:	1942      	adds	r2, r0, r5
    3826:	9203      	str	r2, [sp, #12]
    3828:	7821      	ldrb	r1, [r4, #0]
    382a:	2900      	cmp	r1, #0
    382c:	f000 838a 	beq.w	3f44 <_vfiprintf_r+0x7fc>
    3830:	2200      	movs	r2, #0
    3832:	3401      	adds	r4, #1
    3834:	9401      	str	r4, [sp, #4]
    3836:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    383a:	f04f 3cff 	mov.w	ip, #4294967295
    383e:	9204      	str	r2, [sp, #16]
    3840:	4617      	mov	r7, r2
    3842:	9801      	ldr	r0, [sp, #4]
    3844:	f810 3b01 	ldrb.w	r3, [r0], #1
    3848:	9001      	str	r0, [sp, #4]
    384a:	2b63      	cmp	r3, #99	; 0x63
    384c:	f000 80b3 	beq.w	39b6 <_vfiprintf_r+0x26e>
    3850:	dc33      	bgt.n	38ba <_vfiprintf_r+0x172>
    3852:	2b39      	cmp	r3, #57	; 0x39
    3854:	dc1a      	bgt.n	388c <_vfiprintf_r+0x144>
    3856:	2b31      	cmp	r3, #49	; 0x31
    3858:	f280 8091 	bge.w	397e <_vfiprintf_r+0x236>
    385c:	2b2b      	cmp	r3, #43	; 0x2b
    385e:	d101      	bne.n	3864 <_vfiprintf_r+0x11c>
    3860:	461a      	mov	r2, r3
    3862:	e7ee      	b.n	3842 <_vfiprintf_r+0xfa>
    3864:	dc0a      	bgt.n	387c <_vfiprintf_r+0x134>
    3866:	2b23      	cmp	r3, #35	; 0x23
    3868:	d055      	beq.n	3916 <_vfiprintf_r+0x1ce>
    386a:	2b2a      	cmp	r3, #42	; 0x2a
    386c:	d056      	beq.n	391c <_vfiprintf_r+0x1d4>
    386e:	2b20      	cmp	r3, #32
    3870:	f040 81f7 	bne.w	3c62 <_vfiprintf_r+0x51a>
    3874:	2a00      	cmp	r2, #0
    3876:	bf08      	it	eq
    3878:	2220      	moveq	r2, #32
    387a:	e7e2      	b.n	3842 <_vfiprintf_r+0xfa>
    387c:	2b2e      	cmp	r3, #46	; 0x2e
    387e:	d058      	beq.n	3932 <_vfiprintf_r+0x1ea>
    3880:	2b30      	cmp	r3, #48	; 0x30
    3882:	d079      	beq.n	3978 <_vfiprintf_r+0x230>
    3884:	2b2d      	cmp	r3, #45	; 0x2d
    3886:	f040 81ec 	bne.w	3c62 <_vfiprintf_r+0x51a>
    388a:	e04f      	b.n	392c <_vfiprintf_r+0x1e4>
    388c:	2b4f      	cmp	r3, #79	; 0x4f
    388e:	f000 80de 	beq.w	3a4e <_vfiprintf_r+0x306>
    3892:	dc07      	bgt.n	38a4 <_vfiprintf_r+0x15c>
    3894:	2b44      	cmp	r3, #68	; 0x44
    3896:	f040 81e4 	bne.w	3c62 <_vfiprintf_r+0x51a>
    389a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    389e:	f047 0710 	orr.w	r7, r7, #16
    38a2:	e090      	b.n	39c6 <_vfiprintf_r+0x27e>
    38a4:	2b55      	cmp	r3, #85	; 0x55
    38a6:	f000 811f 	beq.w	3ae8 <_vfiprintf_r+0x3a0>
    38aa:	2b58      	cmp	r3, #88	; 0x58
    38ac:	f040 81d9 	bne.w	3c62 <_vfiprintf_r+0x51a>
    38b0:	4daf      	ldr	r5, [pc, #700]	; (3b70 <_vfiprintf_r+0x428>)
    38b2:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    38b6:	9505      	str	r5, [sp, #20]
    38b8:	e131      	b.n	3b1e <_vfiprintf_r+0x3d6>
    38ba:	2b6f      	cmp	r3, #111	; 0x6f
    38bc:	f000 80c9 	beq.w	3a52 <_vfiprintf_r+0x30a>
    38c0:	dc10      	bgt.n	38e4 <_vfiprintf_r+0x19c>
    38c2:	2b69      	cmp	r3, #105	; 0x69
    38c4:	d024      	beq.n	3910 <_vfiprintf_r+0x1c8>
    38c6:	dc07      	bgt.n	38d8 <_vfiprintf_r+0x190>
    38c8:	2b64      	cmp	r3, #100	; 0x64
    38ca:	d021      	beq.n	3910 <_vfiprintf_r+0x1c8>
    38cc:	2b68      	cmp	r3, #104	; 0x68
    38ce:	f040 81c8 	bne.w	3c62 <_vfiprintf_r+0x51a>
    38d2:	f047 0740 	orr.w	r7, r7, #64	; 0x40
    38d6:	e7b4      	b.n	3842 <_vfiprintf_r+0xfa>
    38d8:	2b6c      	cmp	r3, #108	; 0x6c
    38da:	d05f      	beq.n	399c <_vfiprintf_r+0x254>
    38dc:	2b6e      	cmp	r3, #110	; 0x6e
    38de:	f040 81c0 	bne.w	3c62 <_vfiprintf_r+0x51a>
    38e2:	e096      	b.n	3a12 <_vfiprintf_r+0x2ca>
    38e4:	2b73      	cmp	r3, #115	; 0x73
    38e6:	f000 80df 	beq.w	3aa8 <_vfiprintf_r+0x360>
    38ea:	dc06      	bgt.n	38fa <_vfiprintf_r+0x1b2>
    38ec:	2b70      	cmp	r3, #112	; 0x70
    38ee:	f000 80cd 	beq.w	3a8c <_vfiprintf_r+0x344>
    38f2:	2b71      	cmp	r3, #113	; 0x71
    38f4:	f040 81b5 	bne.w	3c62 <_vfiprintf_r+0x51a>
    38f8:	e05a      	b.n	39b0 <_vfiprintf_r+0x268>
    38fa:	2b75      	cmp	r3, #117	; 0x75
    38fc:	f000 80f6 	beq.w	3aec <_vfiprintf_r+0x3a4>
    3900:	2b78      	cmp	r3, #120	; 0x78
    3902:	f040 81ae 	bne.w	3c62 <_vfiprintf_r+0x51a>
    3906:	4d9b      	ldr	r5, [pc, #620]	; (3b74 <_vfiprintf_r+0x42c>)
    3908:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    390c:	9505      	str	r5, [sp, #20]
    390e:	e106      	b.n	3b1e <_vfiprintf_r+0x3d6>
    3910:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3914:	e057      	b.n	39c6 <_vfiprintf_r+0x27e>
    3916:	f047 0701 	orr.w	r7, r7, #1
    391a:	e792      	b.n	3842 <_vfiprintf_r+0xfa>
    391c:	1d33      	adds	r3, r6, #4
    391e:	6836      	ldr	r6, [r6, #0]
    3920:	2e00      	cmp	r6, #0
    3922:	9604      	str	r6, [sp, #16]
    3924:	da15      	bge.n	3952 <_vfiprintf_r+0x20a>
    3926:	4270      	negs	r0, r6
    3928:	9004      	str	r0, [sp, #16]
    392a:	461e      	mov	r6, r3
    392c:	f047 0704 	orr.w	r7, r7, #4
    3930:	e787      	b.n	3842 <_vfiprintf_r+0xfa>
    3932:	9901      	ldr	r1, [sp, #4]
    3934:	f811 3b01 	ldrb.w	r3, [r1], #1
    3938:	2b2a      	cmp	r3, #42	; 0x2a
    393a:	9101      	str	r1, [sp, #4]
    393c:	d10b      	bne.n	3956 <_vfiprintf_r+0x20e>
    393e:	f8d6 c000 	ldr.w	ip, [r6]
    3942:	1d33      	adds	r3, r6, #4
    3944:	f1bc 0f00 	cmp.w	ip, #0
    3948:	da03      	bge.n	3952 <_vfiprintf_r+0x20a>
    394a:	461e      	mov	r6, r3
    394c:	f04f 3cff 	mov.w	ip, #4294967295
    3950:	e777      	b.n	3842 <_vfiprintf_r+0xfa>
    3952:	461e      	mov	r6, r3
    3954:	e775      	b.n	3842 <_vfiprintf_r+0xfa>
    3956:	f04f 0c00 	mov.w	ip, #0
    395a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    395e:	2809      	cmp	r0, #9
    3960:	d807      	bhi.n	3972 <_vfiprintf_r+0x22a>
    3962:	9901      	ldr	r1, [sp, #4]
    3964:	230a      	movs	r3, #10
    3966:	fb03 0c0c 	mla	ip, r3, ip, r0
    396a:	f811 3b01 	ldrb.w	r3, [r1], #1
    396e:	9101      	str	r1, [sp, #4]
    3970:	e7f3      	b.n	395a <_vfiprintf_r+0x212>
    3972:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
    3976:	e768      	b.n	384a <_vfiprintf_r+0x102>
    3978:	f047 0780 	orr.w	r7, r7, #128	; 0x80
    397c:	e761      	b.n	3842 <_vfiprintf_r+0xfa>
    397e:	9801      	ldr	r0, [sp, #4]
    3980:	2100      	movs	r1, #0
    3982:	3b30      	subs	r3, #48	; 0x30
    3984:	240a      	movs	r4, #10
    3986:	fb04 3101 	mla	r1, r4, r1, r3
    398a:	f810 3b01 	ldrb.w	r3, [r0], #1
    398e:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
    3992:	2c09      	cmp	r4, #9
    3994:	9001      	str	r0, [sp, #4]
    3996:	d9f4      	bls.n	3982 <_vfiprintf_r+0x23a>
    3998:	9104      	str	r1, [sp, #16]
    399a:	e756      	b.n	384a <_vfiprintf_r+0x102>
    399c:	9901      	ldr	r1, [sp, #4]
    399e:	780b      	ldrb	r3, [r1, #0]
    39a0:	2b6c      	cmp	r3, #108	; 0x6c
    39a2:	d102      	bne.n	39aa <_vfiprintf_r+0x262>
    39a4:	1c48      	adds	r0, r1, #1
    39a6:	9001      	str	r0, [sp, #4]
    39a8:	e002      	b.n	39b0 <_vfiprintf_r+0x268>
    39aa:	f047 0710 	orr.w	r7, r7, #16
    39ae:	e748      	b.n	3842 <_vfiprintf_r+0xfa>
    39b0:	f047 0720 	orr.w	r7, r7, #32
    39b4:	e745      	b.n	3842 <_vfiprintf_r+0xfa>
    39b6:	6832      	ldr	r2, [r6, #0]
    39b8:	2500      	movs	r5, #0
    39ba:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    39be:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
    39c2:	3604      	adds	r6, #4
    39c4:	e157      	b.n	3c76 <_vfiprintf_r+0x52e>
    39c6:	06ba      	lsls	r2, r7, #26
    39c8:	d507      	bpl.n	39da <_vfiprintf_r+0x292>
    39ca:	3607      	adds	r6, #7
    39cc:	f026 0507 	bic.w	r5, r6, #7
    39d0:	f105 0608 	add.w	r6, r5, #8
    39d4:	e9d5 4500 	ldrd	r4, r5, [r5]
    39d8:	e00f      	b.n	39fa <_vfiprintf_r+0x2b2>
    39da:	f017 0f10 	tst.w	r7, #16
    39de:	f106 0104 	add.w	r1, r6, #4
    39e2:	d001      	beq.n	39e8 <_vfiprintf_r+0x2a0>
    39e4:	6832      	ldr	r2, [r6, #0]
    39e6:	e005      	b.n	39f4 <_vfiprintf_r+0x2ac>
    39e8:	f017 0f40 	tst.w	r7, #64	; 0x40
    39ec:	6832      	ldr	r2, [r6, #0]
    39ee:	d001      	beq.n	39f4 <_vfiprintf_r+0x2ac>
    39f0:	b214      	sxth	r4, r2
    39f2:	e000      	b.n	39f6 <_vfiprintf_r+0x2ae>
    39f4:	4614      	mov	r4, r2
    39f6:	17e5      	asrs	r5, r4, #31
    39f8:	460e      	mov	r6, r1
    39fa:	2c00      	cmp	r4, #0
    39fc:	f175 0200 	sbcs.w	r2, r5, #0
    3a00:	f280 80ba 	bge.w	3b78 <_vfiprintf_r+0x430>
    3a04:	232d      	movs	r3, #45	; 0x2d
    3a06:	4264      	negs	r4, r4
    3a08:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    3a0c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    3a10:	e0b2      	b.n	3b78 <_vfiprintf_r+0x430>
    3a12:	f017 0f20 	tst.w	r7, #32
    3a16:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3a1a:	f106 0204 	add.w	r2, r6, #4
    3a1e:	d005      	beq.n	3a2c <_vfiprintf_r+0x2e4>
    3a20:	9c03      	ldr	r4, [sp, #12]
    3a22:	6835      	ldr	r5, [r6, #0]
    3a24:	17e0      	asrs	r0, r4, #31
    3a26:	602c      	str	r4, [r5, #0]
    3a28:	6068      	str	r0, [r5, #4]
    3a2a:	e004      	b.n	3a36 <_vfiprintf_r+0x2ee>
    3a2c:	06fb      	lsls	r3, r7, #27
    3a2e:	d504      	bpl.n	3a3a <_vfiprintf_r+0x2f2>
    3a30:	6833      	ldr	r3, [r6, #0]
    3a32:	9903      	ldr	r1, [sp, #12]
    3a34:	6019      	str	r1, [r3, #0]
    3a36:	4616      	mov	r6, r2
    3a38:	e6d2      	b.n	37e0 <_vfiprintf_r+0x98>
    3a3a:	6830      	ldr	r0, [r6, #0]
    3a3c:	9c03      	ldr	r4, [sp, #12]
    3a3e:	f017 0f40 	tst.w	r7, #64	; 0x40
    3a42:	f106 0604 	add.w	r6, r6, #4
    3a46:	bf14      	ite	ne
    3a48:	8004      	strhne	r4, [r0, #0]
    3a4a:	6004      	streq	r4, [r0, #0]
    3a4c:	e6c8      	b.n	37e0 <_vfiprintf_r+0x98>
    3a4e:	f047 0710 	orr.w	r7, r7, #16
    3a52:	f017 0020 	ands.w	r0, r7, #32
    3a56:	d008      	beq.n	3a6a <_vfiprintf_r+0x322>
    3a58:	1df3      	adds	r3, r6, #7
    3a5a:	f023 0507 	bic.w	r5, r3, #7
    3a5e:	f105 0608 	add.w	r6, r5, #8
    3a62:	e9d5 4500 	ldrd	r4, r5, [r5]
    3a66:	2000      	movs	r0, #0
    3a68:	e07d      	b.n	3b66 <_vfiprintf_r+0x41e>
    3a6a:	f017 0110 	ands.w	r1, r7, #16
    3a6e:	f106 0204 	add.w	r2, r6, #4
    3a72:	d106      	bne.n	3a82 <_vfiprintf_r+0x33a>
    3a74:	f017 0040 	ands.w	r0, r7, #64	; 0x40
    3a78:	d003      	beq.n	3a82 <_vfiprintf_r+0x33a>
    3a7a:	8834      	ldrh	r4, [r6, #0]
    3a7c:	2500      	movs	r5, #0
    3a7e:	4616      	mov	r6, r2
    3a80:	e7f1      	b.n	3a66 <_vfiprintf_r+0x31e>
    3a82:	6836      	ldr	r6, [r6, #0]
    3a84:	2500      	movs	r5, #0
    3a86:	4634      	mov	r4, r6
    3a88:	4616      	mov	r6, r2
    3a8a:	e06c      	b.n	3b66 <_vfiprintf_r+0x41e>
    3a8c:	4b39      	ldr	r3, [pc, #228]	; (3b74 <_vfiprintf_r+0x42c>)
    3a8e:	6834      	ldr	r4, [r6, #0]
    3a90:	9305      	str	r3, [sp, #20]
    3a92:	2130      	movs	r1, #48	; 0x30
    3a94:	2278      	movs	r2, #120	; 0x78
    3a96:	2500      	movs	r5, #0
    3a98:	f047 0702 	orr.w	r7, r7, #2
    3a9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    3aa0:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
    3aa4:	3604      	adds	r6, #4
    3aa6:	e05d      	b.n	3b64 <_vfiprintf_r+0x41c>
    3aa8:	4631      	mov	r1, r6
    3aaa:	2500      	movs	r5, #0
    3aac:	f8d1 b000 	ldr.w	fp, [r1]
    3ab0:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
    3ab4:	3604      	adds	r6, #4
    3ab6:	45ac      	cmp	ip, r5
    3ab8:	4658      	mov	r0, fp
    3aba:	db11      	blt.n	3ae0 <_vfiprintf_r+0x398>
    3abc:	4662      	mov	r2, ip
    3abe:	4629      	mov	r1, r5
    3ac0:	f8cd c000 	str.w	ip, [sp]
    3ac4:	f001 fa4c 	bl	4f60 <memchr>
    3ac8:	f8dd c000 	ldr.w	ip, [sp]
    3acc:	2800      	cmp	r0, #0
    3ace:	f000 80d6 	beq.w	3c7e <_vfiprintf_r+0x536>
    3ad2:	ebcb 0400 	rsb	r4, fp, r0
    3ad6:	4564      	cmp	r4, ip
    3ad8:	f340 80d3 	ble.w	3c82 <_vfiprintf_r+0x53a>
    3adc:	4664      	mov	r4, ip
    3ade:	e0d0      	b.n	3c82 <_vfiprintf_r+0x53a>
    3ae0:	f7ff fdf6 	bl	36d0 <strlen>
    3ae4:	4604      	mov	r4, r0
    3ae6:	e0cc      	b.n	3c82 <_vfiprintf_r+0x53a>
    3ae8:	f047 0710 	orr.w	r7, r7, #16
    3aec:	06bd      	lsls	r5, r7, #26
    3aee:	d507      	bpl.n	3b00 <_vfiprintf_r+0x3b8>
    3af0:	1df0      	adds	r0, r6, #7
    3af2:	f020 0407 	bic.w	r4, r0, #7
    3af6:	f104 0608 	add.w	r6, r4, #8
    3afa:	e9d4 4500 	ldrd	r4, r5, [r4]
    3afe:	e00c      	b.n	3b1a <_vfiprintf_r+0x3d2>
    3b00:	f017 0f10 	tst.w	r7, #16
    3b04:	f106 0304 	add.w	r3, r6, #4
    3b08:	d103      	bne.n	3b12 <_vfiprintf_r+0x3ca>
    3b0a:	067c      	lsls	r4, r7, #25
    3b0c:	d501      	bpl.n	3b12 <_vfiprintf_r+0x3ca>
    3b0e:	8834      	ldrh	r4, [r6, #0]
    3b10:	e001      	b.n	3b16 <_vfiprintf_r+0x3ce>
    3b12:	6835      	ldr	r5, [r6, #0]
    3b14:	462c      	mov	r4, r5
    3b16:	2500      	movs	r5, #0
    3b18:	461e      	mov	r6, r3
    3b1a:	2001      	movs	r0, #1
    3b1c:	e023      	b.n	3b66 <_vfiprintf_r+0x41e>
    3b1e:	06b8      	lsls	r0, r7, #26
    3b20:	d507      	bpl.n	3b32 <_vfiprintf_r+0x3ea>
    3b22:	1df4      	adds	r4, r6, #7
    3b24:	f024 0107 	bic.w	r1, r4, #7
    3b28:	f101 0608 	add.w	r6, r1, #8
    3b2c:	e9d1 4500 	ldrd	r4, r5, [r1]
    3b30:	e00c      	b.n	3b4c <_vfiprintf_r+0x404>
    3b32:	f017 0f10 	tst.w	r7, #16
    3b36:	f106 0004 	add.w	r0, r6, #4
    3b3a:	d103      	bne.n	3b44 <_vfiprintf_r+0x3fc>
    3b3c:	0679      	lsls	r1, r7, #25
    3b3e:	d501      	bpl.n	3b44 <_vfiprintf_r+0x3fc>
    3b40:	8834      	ldrh	r4, [r6, #0]
    3b42:	e001      	b.n	3b48 <_vfiprintf_r+0x400>
    3b44:	6836      	ldr	r6, [r6, #0]
    3b46:	4634      	mov	r4, r6
    3b48:	2500      	movs	r5, #0
    3b4a:	4606      	mov	r6, r0
    3b4c:	07fa      	lsls	r2, r7, #31
    3b4e:	d509      	bpl.n	3b64 <_vfiprintf_r+0x41c>
    3b50:	ea54 0205 	orrs.w	r2, r4, r5
    3b54:	d006      	beq.n	3b64 <_vfiprintf_r+0x41c>
    3b56:	2230      	movs	r2, #48	; 0x30
    3b58:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
    3b5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    3b60:	f047 0702 	orr.w	r7, r7, #2
    3b64:	2002      	movs	r0, #2
    3b66:	2100      	movs	r1, #0
    3b68:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    3b6c:	e005      	b.n	3b7a <_vfiprintf_r+0x432>
    3b6e:	bf00      	nop
    3b70:	00005e00 	.word	0x00005e00
    3b74:	00005e11 	.word	0x00005e11
    3b78:	2001      	movs	r0, #1
    3b7a:	f1bc 0f00 	cmp.w	ip, #0
    3b7e:	bfa8      	it	ge
    3b80:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
    3b84:	ea54 0105 	orrs.w	r1, r4, r5
    3b88:	d102      	bne.n	3b90 <_vfiprintf_r+0x448>
    3b8a:	f1bc 0f00 	cmp.w	ip, #0
    3b8e:	d058      	beq.n	3c42 <_vfiprintf_r+0x4fa>
    3b90:	2801      	cmp	r0, #1
    3b92:	d01d      	beq.n	3bd0 <_vfiprintf_r+0x488>
    3b94:	2802      	cmp	r0, #2
    3b96:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
    3b9a:	d041      	beq.n	3c20 <_vfiprintf_r+0x4d8>
    3b9c:	f004 0207 	and.w	r2, r4, #7
    3ba0:	08e4      	lsrs	r4, r4, #3
    3ba2:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
    3ba6:	08e9      	lsrs	r1, r5, #3
    3ba8:	4604      	mov	r4, r0
    3baa:	460d      	mov	r5, r1
    3bac:	3230      	adds	r2, #48	; 0x30
    3bae:	ea54 0105 	orrs.w	r1, r4, r5
    3bb2:	469b      	mov	fp, r3
    3bb4:	701a      	strb	r2, [r3, #0]
    3bb6:	f103 33ff 	add.w	r3, r3, #4294967295
    3bba:	d1ef      	bne.n	3b9c <_vfiprintf_r+0x454>
    3bbc:	07f8      	lsls	r0, r7, #31
    3bbe:	465d      	mov	r5, fp
    3bc0:	d54a      	bpl.n	3c58 <_vfiprintf_r+0x510>
    3bc2:	2a30      	cmp	r2, #48	; 0x30
    3bc4:	d048      	beq.n	3c58 <_vfiprintf_r+0x510>
    3bc6:	2230      	movs	r2, #48	; 0x30
    3bc8:	469b      	mov	fp, r3
    3bca:	f805 2c01 	strb.w	r2, [r5, #-1]
    3bce:	e043      	b.n	3c58 <_vfiprintf_r+0x510>
    3bd0:	2d00      	cmp	r5, #0
    3bd2:	bf08      	it	eq
    3bd4:	2c0a      	cmpeq	r4, #10
    3bd6:	d203      	bcs.n	3be0 <_vfiprintf_r+0x498>
    3bd8:	3430      	adds	r4, #48	; 0x30
    3bda:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
    3bde:	e036      	b.n	3c4e <_vfiprintf_r+0x506>
    3be0:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
    3be4:	9302      	str	r3, [sp, #8]
    3be6:	4620      	mov	r0, r4
    3be8:	4629      	mov	r1, r5
    3bea:	220a      	movs	r2, #10
    3bec:	2300      	movs	r3, #0
    3bee:	f8cd c000 	str.w	ip, [sp]
    3bf2:	f001 fd1b 	bl	562c <__aeabi_uldivmod>
    3bf6:	9802      	ldr	r0, [sp, #8]
    3bf8:	f8dd b008 	ldr.w	fp, [sp, #8]
    3bfc:	3230      	adds	r2, #48	; 0x30
    3bfe:	f800 2901 	strb.w	r2, [r0], #-1
    3c02:	4629      	mov	r1, r5
    3c04:	9002      	str	r0, [sp, #8]
    3c06:	220a      	movs	r2, #10
    3c08:	4620      	mov	r0, r4
    3c0a:	2300      	movs	r3, #0
    3c0c:	f001 fd0e 	bl	562c <__aeabi_uldivmod>
    3c10:	4604      	mov	r4, r0
    3c12:	460d      	mov	r5, r1
    3c14:	ea54 0105 	orrs.w	r1, r4, r5
    3c18:	f8dd c000 	ldr.w	ip, [sp]
    3c1c:	d1e3      	bne.n	3be6 <_vfiprintf_r+0x49e>
    3c1e:	e01b      	b.n	3c58 <_vfiprintf_r+0x510>
    3c20:	f004 000f 	and.w	r0, r4, #15
    3c24:	9905      	ldr	r1, [sp, #20]
    3c26:	0924      	lsrs	r4, r4, #4
    3c28:	5c0a      	ldrb	r2, [r1, r0]
    3c2a:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
    3c2e:	0929      	lsrs	r1, r5, #4
    3c30:	4604      	mov	r4, r0
    3c32:	460d      	mov	r5, r1
    3c34:	469b      	mov	fp, r3
    3c36:	f803 2901 	strb.w	r2, [r3], #-1
    3c3a:	ea54 0205 	orrs.w	r2, r4, r5
    3c3e:	d1ef      	bne.n	3c20 <_vfiprintf_r+0x4d8>
    3c40:	e00a      	b.n	3c58 <_vfiprintf_r+0x510>
    3c42:	b938      	cbnz	r0, 3c54 <_vfiprintf_r+0x50c>
    3c44:	07f9      	lsls	r1, r7, #31
    3c46:	d505      	bpl.n	3c54 <_vfiprintf_r+0x50c>
    3c48:	2030      	movs	r0, #48	; 0x30
    3c4a:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
    3c4e:	f10d 0b5f 	add.w	fp, sp, #95	; 0x5f
    3c52:	e001      	b.n	3c58 <_vfiprintf_r+0x510>
    3c54:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
    3c58:	ad18      	add	r5, sp, #96	; 0x60
    3c5a:	ebcb 0405 	rsb	r4, fp, r5
    3c5e:	4665      	mov	r5, ip
    3c60:	e00f      	b.n	3c82 <_vfiprintf_r+0x53a>
    3c62:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3c66:	2b00      	cmp	r3, #0
    3c68:	f000 816c 	beq.w	3f44 <_vfiprintf_r+0x7fc>
    3c6c:	2500      	movs	r5, #0
    3c6e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    3c72:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
    3c76:	2401      	movs	r4, #1
    3c78:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
    3c7c:	e001      	b.n	3c82 <_vfiprintf_r+0x53a>
    3c7e:	4664      	mov	r4, ip
    3c80:	4605      	mov	r5, r0
    3c82:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3c86:	42ac      	cmp	r4, r5
    3c88:	bfac      	ite	ge
    3c8a:	4621      	movge	r1, r4
    3c8c:	4629      	movlt	r1, r5
    3c8e:	9102      	str	r1, [sp, #8]
    3c90:	b113      	cbz	r3, 3c98 <_vfiprintf_r+0x550>
    3c92:	9802      	ldr	r0, [sp, #8]
    3c94:	1c42      	adds	r2, r0, #1
    3c96:	9202      	str	r2, [sp, #8]
    3c98:	f017 0102 	ands.w	r1, r7, #2
    3c9c:	9106      	str	r1, [sp, #24]
    3c9e:	d002      	beq.n	3ca6 <_vfiprintf_r+0x55e>
    3ca0:	9b02      	ldr	r3, [sp, #8]
    3ca2:	1c98      	adds	r0, r3, #2
    3ca4:	9002      	str	r0, [sp, #8]
    3ca6:	f017 0284 	ands.w	r2, r7, #132	; 0x84
    3caa:	9207      	str	r2, [sp, #28]
    3cac:	d13a      	bne.n	3d24 <_vfiprintf_r+0x5dc>
    3cae:	9904      	ldr	r1, [sp, #16]
    3cb0:	9b02      	ldr	r3, [sp, #8]
    3cb2:	1acb      	subs	r3, r1, r3
    3cb4:	2b00      	cmp	r3, #0
    3cb6:	dd35      	ble.n	3d24 <_vfiprintf_r+0x5dc>
    3cb8:	48a0      	ldr	r0, [pc, #640]	; (3f3c <_vfiprintf_r+0x7f4>)
    3cba:	2b10      	cmp	r3, #16
    3cbc:	f8c8 0000 	str.w	r0, [r8]
    3cc0:	dd1a      	ble.n	3cf8 <_vfiprintf_r+0x5b0>
    3cc2:	990c      	ldr	r1, [sp, #48]	; 0x30
    3cc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3cc6:	2010      	movs	r0, #16
    3cc8:	f8c8 0004 	str.w	r0, [r8, #4]
    3ccc:	1c48      	adds	r0, r1, #1
    3cce:	3210      	adds	r2, #16
    3cd0:	2807      	cmp	r0, #7
    3cd2:	920d      	str	r2, [sp, #52]	; 0x34
    3cd4:	f108 0808 	add.w	r8, r8, #8
    3cd8:	900c      	str	r0, [sp, #48]	; 0x30
    3cda:	dd0b      	ble.n	3cf4 <_vfiprintf_r+0x5ac>
    3cdc:	4650      	mov	r0, sl
    3cde:	4649      	mov	r1, r9
    3ce0:	aa0b      	add	r2, sp, #44	; 0x2c
    3ce2:	9300      	str	r3, [sp, #0]
    3ce4:	f7ff fcfc 	bl	36e0 <__sprint_r>
    3ce8:	9b00      	ldr	r3, [sp, #0]
    3cea:	2800      	cmp	r0, #0
    3cec:	f040 8131 	bne.w	3f52 <_vfiprintf_r+0x80a>
    3cf0:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    3cf4:	3b10      	subs	r3, #16
    3cf6:	e7df      	b.n	3cb8 <_vfiprintf_r+0x570>
    3cf8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3cfa:	f8c8 3004 	str.w	r3, [r8, #4]
    3cfe:	18d1      	adds	r1, r2, r3
    3d00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3d02:	910d      	str	r1, [sp, #52]	; 0x34
    3d04:	1c58      	adds	r0, r3, #1
    3d06:	2807      	cmp	r0, #7
    3d08:	f108 0808 	add.w	r8, r8, #8
    3d0c:	900c      	str	r0, [sp, #48]	; 0x30
    3d0e:	dd09      	ble.n	3d24 <_vfiprintf_r+0x5dc>
    3d10:	4650      	mov	r0, sl
    3d12:	4649      	mov	r1, r9
    3d14:	aa0b      	add	r2, sp, #44	; 0x2c
    3d16:	f7ff fce3 	bl	36e0 <__sprint_r>
    3d1a:	2800      	cmp	r0, #0
    3d1c:	f040 8119 	bne.w	3f52 <_vfiprintf_r+0x80a>
    3d20:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    3d24:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    3d28:	b1d2      	cbz	r2, 3d60 <_vfiprintf_r+0x618>
    3d2a:	f10d 0127 	add.w	r1, sp, #39	; 0x27
    3d2e:	f8c8 1000 	str.w	r1, [r8]
    3d32:	990c      	ldr	r1, [sp, #48]	; 0x30
    3d34:	980d      	ldr	r0, [sp, #52]	; 0x34
    3d36:	2301      	movs	r3, #1
    3d38:	f8c8 3004 	str.w	r3, [r8, #4]
    3d3c:	1c4b      	adds	r3, r1, #1
    3d3e:	1c42      	adds	r2, r0, #1
    3d40:	2b07      	cmp	r3, #7
    3d42:	920d      	str	r2, [sp, #52]	; 0x34
    3d44:	f108 0808 	add.w	r8, r8, #8
    3d48:	930c      	str	r3, [sp, #48]	; 0x30
    3d4a:	dd09      	ble.n	3d60 <_vfiprintf_r+0x618>
    3d4c:	4650      	mov	r0, sl
    3d4e:	4649      	mov	r1, r9
    3d50:	aa0b      	add	r2, sp, #44	; 0x2c
    3d52:	f7ff fcc5 	bl	36e0 <__sprint_r>
    3d56:	2800      	cmp	r0, #0
    3d58:	f040 80fb 	bne.w	3f52 <_vfiprintf_r+0x80a>
    3d5c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    3d60:	9806      	ldr	r0, [sp, #24]
    3d62:	b1c8      	cbz	r0, 3d98 <_vfiprintf_r+0x650>
    3d64:	aa0a      	add	r2, sp, #40	; 0x28
    3d66:	f8c8 2000 	str.w	r2, [r8]
    3d6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3d6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3d6e:	2102      	movs	r1, #2
    3d70:	f8c8 1004 	str.w	r1, [r8, #4]
    3d74:	1c51      	adds	r1, r2, #1
    3d76:	1c98      	adds	r0, r3, #2
    3d78:	2907      	cmp	r1, #7
    3d7a:	900d      	str	r0, [sp, #52]	; 0x34
    3d7c:	f108 0808 	add.w	r8, r8, #8
    3d80:	910c      	str	r1, [sp, #48]	; 0x30
    3d82:	dd09      	ble.n	3d98 <_vfiprintf_r+0x650>
    3d84:	4650      	mov	r0, sl
    3d86:	4649      	mov	r1, r9
    3d88:	aa0b      	add	r2, sp, #44	; 0x2c
    3d8a:	f7ff fca9 	bl	36e0 <__sprint_r>
    3d8e:	2800      	cmp	r0, #0
    3d90:	f040 80df 	bne.w	3f52 <_vfiprintf_r+0x80a>
    3d94:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    3d98:	9b07      	ldr	r3, [sp, #28]
    3d9a:	2b80      	cmp	r3, #128	; 0x80
    3d9c:	d13a      	bne.n	3e14 <_vfiprintf_r+0x6cc>
    3d9e:	9804      	ldr	r0, [sp, #16]
    3da0:	9a02      	ldr	r2, [sp, #8]
    3da2:	1a83      	subs	r3, r0, r2
    3da4:	2b00      	cmp	r3, #0
    3da6:	dd35      	ble.n	3e14 <_vfiprintf_r+0x6cc>
    3da8:	4965      	ldr	r1, [pc, #404]	; (3f40 <_vfiprintf_r+0x7f8>)
    3daa:	2b10      	cmp	r3, #16
    3dac:	f8c8 1000 	str.w	r1, [r8]
    3db0:	dd1a      	ble.n	3de8 <_vfiprintf_r+0x6a0>
    3db2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3db4:	980d      	ldr	r0, [sp, #52]	; 0x34
    3db6:	2110      	movs	r1, #16
    3db8:	f8c8 1004 	str.w	r1, [r8, #4]
    3dbc:	1c51      	adds	r1, r2, #1
    3dbe:	3010      	adds	r0, #16
    3dc0:	2907      	cmp	r1, #7
    3dc2:	900d      	str	r0, [sp, #52]	; 0x34
    3dc4:	f108 0808 	add.w	r8, r8, #8
    3dc8:	910c      	str	r1, [sp, #48]	; 0x30
    3dca:	dd0b      	ble.n	3de4 <_vfiprintf_r+0x69c>
    3dcc:	4650      	mov	r0, sl
    3dce:	4649      	mov	r1, r9
    3dd0:	aa0b      	add	r2, sp, #44	; 0x2c
    3dd2:	9300      	str	r3, [sp, #0]
    3dd4:	f7ff fc84 	bl	36e0 <__sprint_r>
    3dd8:	9b00      	ldr	r3, [sp, #0]
    3dda:	2800      	cmp	r0, #0
    3ddc:	f040 80b9 	bne.w	3f52 <_vfiprintf_r+0x80a>
    3de0:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    3de4:	3b10      	subs	r3, #16
    3de6:	e7df      	b.n	3da8 <_vfiprintf_r+0x660>
    3de8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3dea:	980d      	ldr	r0, [sp, #52]	; 0x34
    3dec:	f8c8 3004 	str.w	r3, [r8, #4]
    3df0:	1c51      	adds	r1, r2, #1
    3df2:	18c3      	adds	r3, r0, r3
    3df4:	2907      	cmp	r1, #7
    3df6:	930d      	str	r3, [sp, #52]	; 0x34
    3df8:	f108 0808 	add.w	r8, r8, #8
    3dfc:	910c      	str	r1, [sp, #48]	; 0x30
    3dfe:	dd09      	ble.n	3e14 <_vfiprintf_r+0x6cc>
    3e00:	4650      	mov	r0, sl
    3e02:	4649      	mov	r1, r9
    3e04:	aa0b      	add	r2, sp, #44	; 0x2c
    3e06:	f7ff fc6b 	bl	36e0 <__sprint_r>
    3e0a:	2800      	cmp	r0, #0
    3e0c:	f040 80a1 	bne.w	3f52 <_vfiprintf_r+0x80a>
    3e10:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    3e14:	1b2d      	subs	r5, r5, r4
    3e16:	2d00      	cmp	r5, #0
    3e18:	dd32      	ble.n	3e80 <_vfiprintf_r+0x738>
    3e1a:	4849      	ldr	r0, [pc, #292]	; (3f40 <_vfiprintf_r+0x7f8>)
    3e1c:	2d10      	cmp	r5, #16
    3e1e:	f8c8 0000 	str.w	r0, [r8]
    3e22:	dd18      	ble.n	3e56 <_vfiprintf_r+0x70e>
    3e24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3e26:	980d      	ldr	r0, [sp, #52]	; 0x34
    3e28:	1c53      	adds	r3, r2, #1
    3e2a:	2110      	movs	r1, #16
    3e2c:	3010      	adds	r0, #16
    3e2e:	2b07      	cmp	r3, #7
    3e30:	f8c8 1004 	str.w	r1, [r8, #4]
    3e34:	900d      	str	r0, [sp, #52]	; 0x34
    3e36:	f108 0808 	add.w	r8, r8, #8
    3e3a:	930c      	str	r3, [sp, #48]	; 0x30
    3e3c:	dd09      	ble.n	3e52 <_vfiprintf_r+0x70a>
    3e3e:	4650      	mov	r0, sl
    3e40:	4649      	mov	r1, r9
    3e42:	aa0b      	add	r2, sp, #44	; 0x2c
    3e44:	f7ff fc4c 	bl	36e0 <__sprint_r>
    3e48:	2800      	cmp	r0, #0
    3e4a:	f040 8082 	bne.w	3f52 <_vfiprintf_r+0x80a>
    3e4e:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    3e52:	3d10      	subs	r5, #16
    3e54:	e7e1      	b.n	3e1a <_vfiprintf_r+0x6d2>
    3e56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3e58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3e5a:	f8c8 5004 	str.w	r5, [r8, #4]
    3e5e:	1c51      	adds	r1, r2, #1
    3e60:	195d      	adds	r5, r3, r5
    3e62:	2907      	cmp	r1, #7
    3e64:	950d      	str	r5, [sp, #52]	; 0x34
    3e66:	f108 0808 	add.w	r8, r8, #8
    3e6a:	910c      	str	r1, [sp, #48]	; 0x30
    3e6c:	dd08      	ble.n	3e80 <_vfiprintf_r+0x738>
    3e6e:	4650      	mov	r0, sl
    3e70:	4649      	mov	r1, r9
    3e72:	aa0b      	add	r2, sp, #44	; 0x2c
    3e74:	f7ff fc34 	bl	36e0 <__sprint_r>
    3e78:	2800      	cmp	r0, #0
    3e7a:	d16a      	bne.n	3f52 <_vfiprintf_r+0x80a>
    3e7c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    3e80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3e82:	980d      	ldr	r0, [sp, #52]	; 0x34
    3e84:	f8c8 4004 	str.w	r4, [r8, #4]
    3e88:	1c51      	adds	r1, r2, #1
    3e8a:	1904      	adds	r4, r0, r4
    3e8c:	2907      	cmp	r1, #7
    3e8e:	f8c8 b000 	str.w	fp, [r8]
    3e92:	940d      	str	r4, [sp, #52]	; 0x34
    3e94:	f108 0308 	add.w	r3, r8, #8
    3e98:	910c      	str	r1, [sp, #48]	; 0x30
    3e9a:	dd07      	ble.n	3eac <_vfiprintf_r+0x764>
    3e9c:	4650      	mov	r0, sl
    3e9e:	4649      	mov	r1, r9
    3ea0:	aa0b      	add	r2, sp, #44	; 0x2c
    3ea2:	f7ff fc1d 	bl	36e0 <__sprint_r>
    3ea6:	2800      	cmp	r0, #0
    3ea8:	d153      	bne.n	3f52 <_vfiprintf_r+0x80a>
    3eaa:	ab18      	add	r3, sp, #96	; 0x60
    3eac:	077a      	lsls	r2, r7, #29
    3eae:	d40b      	bmi.n	3ec8 <_vfiprintf_r+0x780>
    3eb0:	9b03      	ldr	r3, [sp, #12]
    3eb2:	9a02      	ldr	r2, [sp, #8]
    3eb4:	9904      	ldr	r1, [sp, #16]
    3eb6:	980d      	ldr	r0, [sp, #52]	; 0x34
    3eb8:	428a      	cmp	r2, r1
    3eba:	bfac      	ite	ge
    3ebc:	189b      	addge	r3, r3, r2
    3ebe:	185b      	addlt	r3, r3, r1
    3ec0:	9303      	str	r3, [sp, #12]
    3ec2:	2800      	cmp	r0, #0
    3ec4:	d035      	beq.n	3f32 <_vfiprintf_r+0x7ea>
    3ec6:	e02e      	b.n	3f26 <_vfiprintf_r+0x7de>
    3ec8:	9c04      	ldr	r4, [sp, #16]
    3eca:	9802      	ldr	r0, [sp, #8]
    3ecc:	1a24      	subs	r4, r4, r0
    3ece:	2c00      	cmp	r4, #0
    3ed0:	ddee      	ble.n	3eb0 <_vfiprintf_r+0x768>
    3ed2:	4a1a      	ldr	r2, [pc, #104]	; (3f3c <_vfiprintf_r+0x7f4>)
    3ed4:	2c10      	cmp	r4, #16
    3ed6:	601a      	str	r2, [r3, #0]
    3ed8:	dd14      	ble.n	3f04 <_vfiprintf_r+0x7bc>
    3eda:	980c      	ldr	r0, [sp, #48]	; 0x30
    3edc:	990d      	ldr	r1, [sp, #52]	; 0x34
    3ede:	2210      	movs	r2, #16
    3ee0:	605a      	str	r2, [r3, #4]
    3ee2:	1c42      	adds	r2, r0, #1
    3ee4:	3110      	adds	r1, #16
    3ee6:	3308      	adds	r3, #8
    3ee8:	2a07      	cmp	r2, #7
    3eea:	910d      	str	r1, [sp, #52]	; 0x34
    3eec:	920c      	str	r2, [sp, #48]	; 0x30
    3eee:	dd07      	ble.n	3f00 <_vfiprintf_r+0x7b8>
    3ef0:	4650      	mov	r0, sl
    3ef2:	4649      	mov	r1, r9
    3ef4:	aa0b      	add	r2, sp, #44	; 0x2c
    3ef6:	f7ff fbf3 	bl	36e0 <__sprint_r>
    3efa:	2800      	cmp	r0, #0
    3efc:	d129      	bne.n	3f52 <_vfiprintf_r+0x80a>
    3efe:	ab18      	add	r3, sp, #96	; 0x60
    3f00:	3c10      	subs	r4, #16
    3f02:	e7e6      	b.n	3ed2 <_vfiprintf_r+0x78a>
    3f04:	990c      	ldr	r1, [sp, #48]	; 0x30
    3f06:	605c      	str	r4, [r3, #4]
    3f08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3f0a:	1c48      	adds	r0, r1, #1
    3f0c:	191c      	adds	r4, r3, r4
    3f0e:	2807      	cmp	r0, #7
    3f10:	940d      	str	r4, [sp, #52]	; 0x34
    3f12:	900c      	str	r0, [sp, #48]	; 0x30
    3f14:	ddcc      	ble.n	3eb0 <_vfiprintf_r+0x768>
    3f16:	4650      	mov	r0, sl
    3f18:	4649      	mov	r1, r9
    3f1a:	aa0b      	add	r2, sp, #44	; 0x2c
    3f1c:	f7ff fbe0 	bl	36e0 <__sprint_r>
    3f20:	2800      	cmp	r0, #0
    3f22:	d0c5      	beq.n	3eb0 <_vfiprintf_r+0x768>
    3f24:	e015      	b.n	3f52 <_vfiprintf_r+0x80a>
    3f26:	4650      	mov	r0, sl
    3f28:	4649      	mov	r1, r9
    3f2a:	aa0b      	add	r2, sp, #44	; 0x2c
    3f2c:	f7ff fbd8 	bl	36e0 <__sprint_r>
    3f30:	b978      	cbnz	r0, 3f52 <_vfiprintf_r+0x80a>
    3f32:	2500      	movs	r5, #0
    3f34:	950c      	str	r5, [sp, #48]	; 0x30
    3f36:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    3f3a:	e451      	b.n	37e0 <_vfiprintf_r+0x98>
    3f3c:	00005de0 	.word	0x00005de0
    3f40:	00005df0 	.word	0x00005df0
    3f44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3f46:	b122      	cbz	r2, 3f52 <_vfiprintf_r+0x80a>
    3f48:	4650      	mov	r0, sl
    3f4a:	4649      	mov	r1, r9
    3f4c:	aa0b      	add	r2, sp, #44	; 0x2c
    3f4e:	f7ff fbc7 	bl	36e0 <__sprint_r>
    3f52:	f8b9 100c 	ldrh.w	r1, [r9, #12]
    3f56:	f001 0040 	and.w	r0, r1, #64	; 0x40
    3f5a:	b203      	sxth	r3, r0
    3f5c:	2b00      	cmp	r3, #0
    3f5e:	f47f ac26 	bne.w	37ae <_vfiprintf_r+0x66>
    3f62:	9803      	ldr	r0, [sp, #12]
    3f64:	b029      	add	sp, #164	; 0xa4
    3f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003f6a <__sbprintf>:
    3f6a:	b570      	push	{r4, r5, r6, lr}
    3f6c:	460c      	mov	r4, r1
    3f6e:	8989      	ldrh	r1, [r1, #12]
    3f70:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
    3f74:	f021 0502 	bic.w	r5, r1, #2
    3f78:	6e61      	ldr	r1, [r4, #100]	; 0x64
    3f7a:	f8ad 500c 	strh.w	r5, [sp, #12]
    3f7e:	9119      	str	r1, [sp, #100]	; 0x64
    3f80:	89e5      	ldrh	r5, [r4, #14]
    3f82:	69e1      	ldr	r1, [r4, #28]
    3f84:	f8ad 500e 	strh.w	r5, [sp, #14]
    3f88:	9107      	str	r1, [sp, #28]
    3f8a:	6a65      	ldr	r5, [r4, #36]	; 0x24
    3f8c:	a91a      	add	r1, sp, #104	; 0x68
    3f8e:	9100      	str	r1, [sp, #0]
    3f90:	9104      	str	r1, [sp, #16]
    3f92:	2100      	movs	r1, #0
    3f94:	9509      	str	r5, [sp, #36]	; 0x24
    3f96:	9106      	str	r1, [sp, #24]
    3f98:	f44f 6580 	mov.w	r5, #1024	; 0x400
    3f9c:	4669      	mov	r1, sp
    3f9e:	9502      	str	r5, [sp, #8]
    3fa0:	9505      	str	r5, [sp, #20]
    3fa2:	4606      	mov	r6, r0
    3fa4:	f7ff fbd0 	bl	3748 <_vfiprintf_r>
    3fa8:	1e05      	subs	r5, r0, #0
    3faa:	db07      	blt.n	3fbc <__sbprintf+0x52>
    3fac:	4630      	mov	r0, r6
    3fae:	4669      	mov	r1, sp
    3fb0:	f000 f88e 	bl	40d0 <_fflush_r>
    3fb4:	2800      	cmp	r0, #0
    3fb6:	bf18      	it	ne
    3fb8:	f04f 35ff 	movne.w	r5, #4294967295
    3fbc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    3fc0:	f003 0040 	and.w	r0, r3, #64	; 0x40
    3fc4:	b202      	sxth	r2, r0
    3fc6:	b11a      	cbz	r2, 3fd0 <__sbprintf+0x66>
    3fc8:	89a1      	ldrh	r1, [r4, #12]
    3fca:	f041 0340 	orr.w	r3, r1, #64	; 0x40
    3fce:	81a3      	strh	r3, [r4, #12]
    3fd0:	4628      	mov	r0, r5
    3fd2:	b01a      	add	sp, #104	; 0x68
    3fd4:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
    3fd8:	bd70      	pop	{r4, r5, r6, pc}

00003fda <vfiprintf>:
    3fda:	b530      	push	{r4, r5, lr}
    3fdc:	4613      	mov	r3, r2
    3fde:	4a05      	ldr	r2, [pc, #20]	; (3ff4 <vfiprintf+0x1a>)
    3fe0:	4605      	mov	r5, r0
    3fe2:	460c      	mov	r4, r1
    3fe4:	6810      	ldr	r0, [r2, #0]
    3fe6:	4629      	mov	r1, r5
    3fe8:	4622      	mov	r2, r4
    3fea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    3fee:	f7ff bbab 	b.w	3748 <_vfiprintf_r>
    3ff2:	bf00      	nop
    3ff4:	20000050 	.word	0x20000050

00003ff8 <__swsetup_r>:
    3ff8:	b538      	push	{r3, r4, r5, lr}
    3ffa:	4b2c      	ldr	r3, [pc, #176]	; (40ac <__swsetup_r+0xb4>)
    3ffc:	4605      	mov	r5, r0
    3ffe:	6818      	ldr	r0, [r3, #0]
    4000:	460c      	mov	r4, r1
    4002:	b118      	cbz	r0, 400c <__swsetup_r+0x14>
    4004:	6b82      	ldr	r2, [r0, #56]	; 0x38
    4006:	b90a      	cbnz	r2, 400c <__swsetup_r+0x14>
    4008:	f000 f956 	bl	42b8 <__sinit>
    400c:	89a0      	ldrh	r0, [r4, #12]
    400e:	f000 0108 	and.w	r1, r0, #8
    4012:	b20b      	sxth	r3, r1
    4014:	bb0b      	cbnz	r3, 405a <__swsetup_r+0x62>
    4016:	f000 0210 	and.w	r2, r0, #16
    401a:	b211      	sxth	r1, r2
    401c:	b911      	cbnz	r1, 4024 <__swsetup_r+0x2c>
    401e:	f04f 30ff 	mov.w	r0, #4294967295
    4022:	bd38      	pop	{r3, r4, r5, pc}
    4024:	f000 0004 	and.w	r0, r0, #4
    4028:	b203      	sxth	r3, r0
    402a:	b193      	cbz	r3, 4052 <__swsetup_r+0x5a>
    402c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    402e:	b141      	cbz	r1, 4042 <__swsetup_r+0x4a>
    4030:	f104 0240 	add.w	r2, r4, #64	; 0x40
    4034:	4291      	cmp	r1, r2
    4036:	d002      	beq.n	403e <__swsetup_r+0x46>
    4038:	4628      	mov	r0, r5
    403a:	f000 fa7b 	bl	4534 <_free_r>
    403e:	2100      	movs	r1, #0
    4040:	6321      	str	r1, [r4, #48]	; 0x30
    4042:	89a0      	ldrh	r0, [r4, #12]
    4044:	6921      	ldr	r1, [r4, #16]
    4046:	f020 0324 	bic.w	r3, r0, #36	; 0x24
    404a:	2200      	movs	r2, #0
    404c:	81a3      	strh	r3, [r4, #12]
    404e:	6062      	str	r2, [r4, #4]
    4050:	6021      	str	r1, [r4, #0]
    4052:	89a0      	ldrh	r0, [r4, #12]
    4054:	f040 0308 	orr.w	r3, r0, #8
    4058:	81a3      	strh	r3, [r4, #12]
    405a:	6922      	ldr	r2, [r4, #16]
    405c:	b94a      	cbnz	r2, 4072 <__swsetup_r+0x7a>
    405e:	89a1      	ldrh	r1, [r4, #12]
    4060:	f401 7020 	and.w	r0, r1, #640	; 0x280
    4064:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    4068:	d003      	beq.n	4072 <__swsetup_r+0x7a>
    406a:	4628      	mov	r0, r5
    406c:	4621      	mov	r1, r4
    406e:	f000 fcf9 	bl	4a64 <__smakebuf_r>
    4072:	89a3      	ldrh	r3, [r4, #12]
    4074:	f013 0201 	ands.w	r2, r3, #1
    4078:	d005      	beq.n	4086 <__swsetup_r+0x8e>
    407a:	6961      	ldr	r1, [r4, #20]
    407c:	2200      	movs	r2, #0
    407e:	4248      	negs	r0, r1
    4080:	60a2      	str	r2, [r4, #8]
    4082:	61a0      	str	r0, [r4, #24]
    4084:	e007      	b.n	4096 <__swsetup_r+0x9e>
    4086:	f003 0102 	and.w	r1, r3, #2
    408a:	b208      	sxth	r0, r1
    408c:	b908      	cbnz	r0, 4092 <__swsetup_r+0x9a>
    408e:	6963      	ldr	r3, [r4, #20]
    4090:	e000      	b.n	4094 <__swsetup_r+0x9c>
    4092:	4613      	mov	r3, r2
    4094:	60a3      	str	r3, [r4, #8]
    4096:	6923      	ldr	r3, [r4, #16]
    4098:	b933      	cbnz	r3, 40a8 <__swsetup_r+0xb0>
    409a:	89a2      	ldrh	r2, [r4, #12]
    409c:	f002 0180 	and.w	r1, r2, #128	; 0x80
    40a0:	b208      	sxth	r0, r1
    40a2:	2800      	cmp	r0, #0
    40a4:	d1bb      	bne.n	401e <__swsetup_r+0x26>
    40a6:	bd38      	pop	{r3, r4, r5, pc}
    40a8:	2000      	movs	r0, #0
    40aa:	bd38      	pop	{r3, r4, r5, pc}
    40ac:	20000050 	.word	0x20000050

000040b0 <register_fini>:
    40b0:	4b02      	ldr	r3, [pc, #8]	; (40bc <register_fini+0xc>)
    40b2:	b113      	cbz	r3, 40ba <register_fini+0xa>
    40b4:	4802      	ldr	r0, [pc, #8]	; (40c0 <register_fini+0x10>)
    40b6:	f000 b805 	b.w	40c4 <atexit>
    40ba:	4770      	bx	lr
    40bc:	00000000 	.word	0x00000000
    40c0:	00003499 	.word	0x00003499

000040c4 <atexit>:
    40c4:	4601      	mov	r1, r0
    40c6:	2000      	movs	r0, #0
    40c8:	4602      	mov	r2, r0
    40ca:	4603      	mov	r3, r0
    40cc:	f7ff b996 	b.w	33fc <__register_exitproc>

000040d0 <_fflush_r>:
    40d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    40d4:	460c      	mov	r4, r1
    40d6:	4605      	mov	r5, r0
    40d8:	b118      	cbz	r0, 40e2 <_fflush_r+0x12>
    40da:	6b83      	ldr	r3, [r0, #56]	; 0x38
    40dc:	b90b      	cbnz	r3, 40e2 <_fflush_r+0x12>
    40de:	f000 f8eb 	bl	42b8 <__sinit>
    40e2:	89a2      	ldrh	r2, [r4, #12]
    40e4:	b332      	cbz	r2, 4134 <_fflush_r+0x64>
    40e6:	f002 0008 	and.w	r0, r2, #8
    40ea:	b201      	sxth	r1, r0
    40ec:	2900      	cmp	r1, #0
    40ee:	d162      	bne.n	41b6 <_fflush_r+0xe6>
    40f0:	6861      	ldr	r1, [r4, #4]
    40f2:	f442 6000 	orr.w	r0, r2, #2048	; 0x800
    40f6:	2900      	cmp	r1, #0
    40f8:	81a0      	strh	r0, [r4, #12]
    40fa:	dc02      	bgt.n	4102 <_fflush_r+0x32>
    40fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    40fe:	2b00      	cmp	r3, #0
    4100:	dd18      	ble.n	4134 <_fflush_r+0x64>
    4102:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4104:	b1b6      	cbz	r6, 4134 <_fflush_r+0x64>
    4106:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    410a:	2000      	movs	r0, #0
    410c:	b212      	sxth	r2, r2
    410e:	682f      	ldr	r7, [r5, #0]
    4110:	6028      	str	r0, [r5, #0]
    4112:	b10a      	cbz	r2, 4118 <_fflush_r+0x48>
    4114:	6d22      	ldr	r2, [r4, #80]	; 0x50
    4116:	e010      	b.n	413a <_fflush_r+0x6a>
    4118:	2301      	movs	r3, #1
    411a:	4628      	mov	r0, r5
    411c:	69e1      	ldr	r1, [r4, #28]
    411e:	47b0      	blx	r6
    4120:	4602      	mov	r2, r0
    4122:	3001      	adds	r0, #1
    4124:	d109      	bne.n	413a <_fflush_r+0x6a>
    4126:	6829      	ldr	r1, [r5, #0]
    4128:	b139      	cbz	r1, 413a <_fflush_r+0x6a>
    412a:	291d      	cmp	r1, #29
    412c:	d001      	beq.n	4132 <_fflush_r+0x62>
    412e:	2916      	cmp	r1, #22
    4130:	d14f      	bne.n	41d2 <_fflush_r+0x102>
    4132:	602f      	str	r7, [r5, #0]
    4134:	2000      	movs	r0, #0
    4136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    413a:	89a6      	ldrh	r6, [r4, #12]
    413c:	f006 0104 	and.w	r1, r6, #4
    4140:	b20b      	sxth	r3, r1
    4142:	b12b      	cbz	r3, 4150 <_fflush_r+0x80>
    4144:	6860      	ldr	r0, [r4, #4]
    4146:	6b26      	ldr	r6, [r4, #48]	; 0x30
    4148:	1a12      	subs	r2, r2, r0
    414a:	b10e      	cbz	r6, 4150 <_fflush_r+0x80>
    414c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    414e:	1a52      	subs	r2, r2, r1
    4150:	69e1      	ldr	r1, [r4, #28]
    4152:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4154:	2300      	movs	r3, #0
    4156:	4628      	mov	r0, r5
    4158:	47b0      	blx	r6
    415a:	1c41      	adds	r1, r0, #1
    415c:	d105      	bne.n	416a <_fflush_r+0x9a>
    415e:	682a      	ldr	r2, [r5, #0]
    4160:	b11a      	cbz	r2, 416a <_fflush_r+0x9a>
    4162:	2a1d      	cmp	r2, #29
    4164:	d001      	beq.n	416a <_fflush_r+0x9a>
    4166:	2a16      	cmp	r2, #22
    4168:	d11f      	bne.n	41aa <_fflush_r+0xda>
    416a:	89a3      	ldrh	r3, [r4, #12]
    416c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
    4170:	2100      	movs	r1, #0
    4172:	81a2      	strh	r2, [r4, #12]
    4174:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4178:	6922      	ldr	r2, [r4, #16]
    417a:	6061      	str	r1, [r4, #4]
    417c:	b219      	sxth	r1, r3
    417e:	6022      	str	r2, [r4, #0]
    4180:	b121      	cbz	r1, 418c <_fflush_r+0xbc>
    4182:	1c42      	adds	r2, r0, #1
    4184:	d101      	bne.n	418a <_fflush_r+0xba>
    4186:	682a      	ldr	r2, [r5, #0]
    4188:	b902      	cbnz	r2, 418c <_fflush_r+0xbc>
    418a:	6520      	str	r0, [r4, #80]	; 0x50
    418c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    418e:	602f      	str	r7, [r5, #0]
    4190:	2900      	cmp	r1, #0
    4192:	d0cf      	beq.n	4134 <_fflush_r+0x64>
    4194:	f104 0040 	add.w	r0, r4, #64	; 0x40
    4198:	4281      	cmp	r1, r0
    419a:	d002      	beq.n	41a2 <_fflush_r+0xd2>
    419c:	4628      	mov	r0, r5
    419e:	f000 f9c9 	bl	4534 <_free_r>
    41a2:	2000      	movs	r0, #0
    41a4:	6320      	str	r0, [r4, #48]	; 0x30
    41a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    41aa:	89a3      	ldrh	r3, [r4, #12]
    41ac:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    41b0:	81a1      	strh	r1, [r4, #12]
    41b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    41b6:	6926      	ldr	r6, [r4, #16]
    41b8:	2e00      	cmp	r6, #0
    41ba:	d0bb      	beq.n	4134 <_fflush_r+0x64>
    41bc:	0792      	lsls	r2, r2, #30
    41be:	6823      	ldr	r3, [r4, #0]
    41c0:	bf08      	it	eq
    41c2:	6962      	ldreq	r2, [r4, #20]
    41c4:	6026      	str	r6, [r4, #0]
    41c6:	bf18      	it	ne
    41c8:	2200      	movne	r2, #0
    41ca:	ebc6 0803 	rsb	r8, r6, r3
    41ce:	60a2      	str	r2, [r4, #8]
    41d0:	e012      	b.n	41f8 <_fflush_r+0x128>
    41d2:	89a3      	ldrh	r3, [r4, #12]
    41d4:	f043 0040 	orr.w	r0, r3, #64	; 0x40
    41d8:	81a0      	strh	r0, [r4, #12]
    41da:	f04f 30ff 	mov.w	r0, #4294967295
    41de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    41e2:	6a67      	ldr	r7, [r4, #36]	; 0x24
    41e4:	69e1      	ldr	r1, [r4, #28]
    41e6:	4628      	mov	r0, r5
    41e8:	4632      	mov	r2, r6
    41ea:	4643      	mov	r3, r8
    41ec:	47b8      	blx	r7
    41ee:	2800      	cmp	r0, #0
    41f0:	ddef      	ble.n	41d2 <_fflush_r+0x102>
    41f2:	1836      	adds	r6, r6, r0
    41f4:	ebc0 0808 	rsb	r8, r0, r8
    41f8:	f1b8 0f00 	cmp.w	r8, #0
    41fc:	dcf1      	bgt.n	41e2 <_fflush_r+0x112>
    41fe:	e799      	b.n	4134 <_fflush_r+0x64>

00004200 <fflush>:
    4200:	4601      	mov	r1, r0
    4202:	b920      	cbnz	r0, 420e <fflush+0xe>
    4204:	4804      	ldr	r0, [pc, #16]	; (4218 <fflush+0x18>)
    4206:	4905      	ldr	r1, [pc, #20]	; (421c <fflush+0x1c>)
    4208:	6800      	ldr	r0, [r0, #0]
    420a:	f000 bbc5 	b.w	4998 <_fwalk_reent>
    420e:	4b04      	ldr	r3, [pc, #16]	; (4220 <fflush+0x20>)
    4210:	6818      	ldr	r0, [r3, #0]
    4212:	f7ff bf5d 	b.w	40d0 <_fflush_r>
    4216:	bf00      	nop
    4218:	00005dd8 	.word	0x00005dd8
    421c:	000040d1 	.word	0x000040d1
    4220:	20000050 	.word	0x20000050

00004224 <__fp_lock>:
    4224:	2000      	movs	r0, #0
    4226:	4770      	bx	lr

00004228 <__fp_unlock>:
    4228:	2000      	movs	r0, #0
    422a:	4770      	bx	lr

0000422c <_cleanup_r>:
    422c:	4901      	ldr	r1, [pc, #4]	; (4234 <_cleanup_r+0x8>)
    422e:	f000 bb92 	b.w	4956 <_fwalk>
    4232:	bf00      	nop
    4234:	00005591 	.word	0x00005591

00004238 <std.isra.0>:
    4238:	2300      	movs	r3, #0
    423a:	b510      	push	{r4, lr}
    423c:	4604      	mov	r4, r0
    423e:	6003      	str	r3, [r0, #0]
    4240:	6043      	str	r3, [r0, #4]
    4242:	6083      	str	r3, [r0, #8]
    4244:	8181      	strh	r1, [r0, #12]
    4246:	6643      	str	r3, [r0, #100]	; 0x64
    4248:	81c2      	strh	r2, [r0, #14]
    424a:	6103      	str	r3, [r0, #16]
    424c:	6143      	str	r3, [r0, #20]
    424e:	6183      	str	r3, [r0, #24]
    4250:	4619      	mov	r1, r3
    4252:	2208      	movs	r2, #8
    4254:	f100 005c 	add.w	r0, r0, #92	; 0x5c
    4258:	f7ff f97a 	bl	3550 <memset>
    425c:	4804      	ldr	r0, [pc, #16]	; (4270 <std.isra.0+0x38>)
    425e:	4905      	ldr	r1, [pc, #20]	; (4274 <std.isra.0+0x3c>)
    4260:	4a05      	ldr	r2, [pc, #20]	; (4278 <std.isra.0+0x40>)
    4262:	4b06      	ldr	r3, [pc, #24]	; (427c <std.isra.0+0x44>)
    4264:	61e4      	str	r4, [r4, #28]
    4266:	6220      	str	r0, [r4, #32]
    4268:	6261      	str	r1, [r4, #36]	; 0x24
    426a:	62a2      	str	r2, [r4, #40]	; 0x28
    426c:	62e3      	str	r3, [r4, #44]	; 0x2c
    426e:	bd10      	pop	{r4, pc}
    4270:	000052c5 	.word	0x000052c5
    4274:	000052eb 	.word	0x000052eb
    4278:	00005327 	.word	0x00005327
    427c:	0000534b 	.word	0x0000534b

00004280 <__sfmoreglue>:
    4280:	b570      	push	{r4, r5, r6, lr}
    4282:	2568      	movs	r5, #104	; 0x68
    4284:	434d      	muls	r5, r1
    4286:	460e      	mov	r6, r1
    4288:	f105 010c 	add.w	r1, r5, #12
    428c:	f000 fc66 	bl	4b5c <_malloc_r>
    4290:	4604      	mov	r4, r0
    4292:	b140      	cbz	r0, 42a6 <__sfmoreglue+0x26>
    4294:	f100 000c 	add.w	r0, r0, #12
    4298:	2100      	movs	r1, #0
    429a:	e884 0042 	stmia.w	r4, {r1, r6}
    429e:	60a0      	str	r0, [r4, #8]
    42a0:	462a      	mov	r2, r5
    42a2:	f7ff f955 	bl	3550 <memset>
    42a6:	4620      	mov	r0, r4
    42a8:	bd70      	pop	{r4, r5, r6, pc}

000042aa <_cleanup>:
    42aa:	4b02      	ldr	r3, [pc, #8]	; (42b4 <_cleanup+0xa>)
    42ac:	6818      	ldr	r0, [r3, #0]
    42ae:	f7ff bfbd 	b.w	422c <_cleanup_r>
    42b2:	bf00      	nop
    42b4:	00005dd8 	.word	0x00005dd8

000042b8 <__sinit>:
    42b8:	b538      	push	{r3, r4, r5, lr}
    42ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
    42bc:	4604      	mov	r4, r0
    42be:	b9eb      	cbnz	r3, 42fc <__sinit+0x44>
    42c0:	4a0f      	ldr	r2, [pc, #60]	; (4300 <__sinit+0x48>)
    42c2:	f8c0 32e0 	str.w	r3, [r0, #736]	; 0x2e0
    42c6:	2501      	movs	r5, #1
    42c8:	63c2      	str	r2, [r0, #60]	; 0x3c
    42ca:	6385      	str	r5, [r0, #56]	; 0x38
    42cc:	f504 713b 	add.w	r1, r4, #748	; 0x2ec
    42d0:	2003      	movs	r0, #3
    42d2:	461a      	mov	r2, r3
    42d4:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
    42d8:	f8c4 12e8 	str.w	r1, [r4, #744]	; 0x2e8
    42dc:	6860      	ldr	r0, [r4, #4]
    42de:	2104      	movs	r1, #4
    42e0:	f7ff ffaa 	bl	4238 <std.isra.0>
    42e4:	68a0      	ldr	r0, [r4, #8]
    42e6:	2109      	movs	r1, #9
    42e8:	462a      	mov	r2, r5
    42ea:	f7ff ffa5 	bl	4238 <std.isra.0>
    42ee:	68e0      	ldr	r0, [r4, #12]
    42f0:	2112      	movs	r1, #18
    42f2:	2202      	movs	r2, #2
    42f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    42f8:	f7ff bf9e 	b.w	4238 <std.isra.0>
    42fc:	bd38      	pop	{r3, r4, r5, pc}
    42fe:	bf00      	nop
    4300:	0000422d 	.word	0x0000422d

00004304 <__sfp>:
    4304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4306:	4b1d      	ldr	r3, [pc, #116]	; (437c <__sfp+0x78>)
    4308:	681e      	ldr	r6, [r3, #0]
    430a:	4607      	mov	r7, r0
    430c:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    430e:	b910      	cbnz	r0, 4316 <__sfp+0x12>
    4310:	4630      	mov	r0, r6
    4312:	f7ff ffd1 	bl	42b8 <__sinit>
    4316:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
    431a:	68b4      	ldr	r4, [r6, #8]
    431c:	6871      	ldr	r1, [r6, #4]
    431e:	3901      	subs	r1, #1
    4320:	d404      	bmi.n	432c <__sfp+0x28>
    4322:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    4326:	b185      	cbz	r5, 434a <__sfp+0x46>
    4328:	3468      	adds	r4, #104	; 0x68
    432a:	e7f8      	b.n	431e <__sfp+0x1a>
    432c:	6832      	ldr	r2, [r6, #0]
    432e:	b10a      	cbz	r2, 4334 <__sfp+0x30>
    4330:	6836      	ldr	r6, [r6, #0]
    4332:	e7f2      	b.n	431a <__sfp+0x16>
    4334:	4638      	mov	r0, r7
    4336:	2104      	movs	r1, #4
    4338:	f7ff ffa2 	bl	4280 <__sfmoreglue>
    433c:	6030      	str	r0, [r6, #0]
    433e:	2800      	cmp	r0, #0
    4340:	d1f6      	bne.n	4330 <__sfp+0x2c>
    4342:	240c      	movs	r4, #12
    4344:	603c      	str	r4, [r7, #0]
    4346:	4604      	mov	r4, r0
    4348:	e015      	b.n	4376 <__sfp+0x72>
    434a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    434e:	2001      	movs	r0, #1
    4350:	81a0      	strh	r0, [r4, #12]
    4352:	81e3      	strh	r3, [r4, #14]
    4354:	6665      	str	r5, [r4, #100]	; 0x64
    4356:	6025      	str	r5, [r4, #0]
    4358:	60a5      	str	r5, [r4, #8]
    435a:	6065      	str	r5, [r4, #4]
    435c:	6125      	str	r5, [r4, #16]
    435e:	6165      	str	r5, [r4, #20]
    4360:	61a5      	str	r5, [r4, #24]
    4362:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    4366:	4629      	mov	r1, r5
    4368:	2208      	movs	r2, #8
    436a:	f7ff f8f1 	bl	3550 <memset>
    436e:	6325      	str	r5, [r4, #48]	; 0x30
    4370:	6365      	str	r5, [r4, #52]	; 0x34
    4372:	6465      	str	r5, [r4, #68]	; 0x44
    4374:	64a5      	str	r5, [r4, #72]	; 0x48
    4376:	4620      	mov	r0, r4
    4378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    437a:	bf00      	nop
    437c:	00005dd8 	.word	0x00005dd8

00004380 <__sfp_lock_acquire>:
    4380:	4770      	bx	lr

00004382 <__sfp_lock_release>:
    4382:	4770      	bx	lr

00004384 <__sinit_lock_acquire>:
    4384:	4770      	bx	lr

00004386 <__sinit_lock_release>:
    4386:	4770      	bx	lr

00004388 <__fp_lock_all>:
    4388:	4b02      	ldr	r3, [pc, #8]	; (4394 <__fp_lock_all+0xc>)
    438a:	4903      	ldr	r1, [pc, #12]	; (4398 <__fp_lock_all+0x10>)
    438c:	6818      	ldr	r0, [r3, #0]
    438e:	f000 bae2 	b.w	4956 <_fwalk>
    4392:	bf00      	nop
    4394:	20000050 	.word	0x20000050
    4398:	00004225 	.word	0x00004225

0000439c <__fp_unlock_all>:
    439c:	4b02      	ldr	r3, [pc, #8]	; (43a8 <__fp_unlock_all+0xc>)
    439e:	4903      	ldr	r1, [pc, #12]	; (43ac <__fp_unlock_all+0x10>)
    43a0:	6818      	ldr	r0, [r3, #0]
    43a2:	f000 bad8 	b.w	4956 <_fwalk>
    43a6:	bf00      	nop
    43a8:	20000050 	.word	0x20000050
    43ac:	00004229 	.word	0x00004229

000043b0 <_fputwc_r>:
    43b0:	8993      	ldrh	r3, [r2, #12]
    43b2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    43b6:	4614      	mov	r4, r2
    43b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
    43bc:	4680      	mov	r8, r0
    43be:	b210      	sxth	r0, r2
    43c0:	460e      	mov	r6, r1
    43c2:	b930      	cbnz	r0, 43d2 <_fputwc_r+0x22>
    43c4:	6e67      	ldr	r7, [r4, #100]	; 0x64
    43c6:	f443 5100 	orr.w	r1, r3, #8192	; 0x2000
    43ca:	f447 5300 	orr.w	r3, r7, #8192	; 0x2000
    43ce:	81a1      	strh	r1, [r4, #12]
    43d0:	6663      	str	r3, [r4, #100]	; 0x64
    43d2:	f000 fb29 	bl	4a28 <__locale_mb_cur_max>
    43d6:	2801      	cmp	r0, #1
    43d8:	d106      	bne.n	43e8 <_fputwc_r+0x38>
    43da:	b12e      	cbz	r6, 43e8 <_fputwc_r+0x38>
    43dc:	2eff      	cmp	r6, #255	; 0xff
    43de:	d803      	bhi.n	43e8 <_fputwc_r+0x38>
    43e0:	f88d 6004 	strb.w	r6, [sp, #4]
    43e4:	4607      	mov	r7, r0
    43e6:	e00f      	b.n	4408 <_fputwc_r+0x58>
    43e8:	4632      	mov	r2, r6
    43ea:	4640      	mov	r0, r8
    43ec:	a901      	add	r1, sp, #4
    43ee:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    43f2:	f001 f813 	bl	541c <_wcrtomb_r>
    43f6:	1c42      	adds	r2, r0, #1
    43f8:	4607      	mov	r7, r0
    43fa:	d105      	bne.n	4408 <_fputwc_r+0x58>
    43fc:	89a2      	ldrh	r2, [r4, #12]
    43fe:	f042 0040 	orr.w	r0, r2, #64	; 0x40
    4402:	81a0      	strh	r0, [r4, #12]
    4404:	4638      	mov	r0, r7
    4406:	e031      	b.n	446c <_fputwc_r+0xbc>
    4408:	2500      	movs	r5, #0
    440a:	42bd      	cmp	r5, r7
    440c:	d02a      	beq.n	4464 <_fputwc_r+0xb4>
    440e:	68a1      	ldr	r1, [r4, #8]
    4410:	1e4a      	subs	r2, r1, #1
    4412:	2a00      	cmp	r2, #0
    4414:	60a2      	str	r2, [r4, #8]
    4416:	ab01      	add	r3, sp, #4
    4418:	da1a      	bge.n	4450 <_fputwc_r+0xa0>
    441a:	69a0      	ldr	r0, [r4, #24]
    441c:	4282      	cmp	r2, r0
    441e:	db0c      	blt.n	443a <_fputwc_r+0x8a>
    4420:	6821      	ldr	r1, [r4, #0]
    4422:	5d5a      	ldrb	r2, [r3, r5]
    4424:	700a      	strb	r2, [r1, #0]
    4426:	6823      	ldr	r3, [r4, #0]
    4428:	7819      	ldrb	r1, [r3, #0]
    442a:	290a      	cmp	r1, #10
    442c:	d003      	beq.n	4436 <_fputwc_r+0x86>
    442e:	3301      	adds	r3, #1
    4430:	2200      	movs	r2, #0
    4432:	6023      	str	r3, [r4, #0]
    4434:	e013      	b.n	445e <_fputwc_r+0xae>
    4436:	4640      	mov	r0, r8
    4438:	e001      	b.n	443e <_fputwc_r+0x8e>
    443a:	5d59      	ldrb	r1, [r3, r5]
    443c:	4640      	mov	r0, r8
    443e:	4622      	mov	r2, r4
    4440:	f000 ff92 	bl	5368 <__swbuf_r>
    4444:	f1b0 31ff 	subs.w	r1, r0, #4294967295
    4448:	4248      	negs	r0, r1
    444a:	eb50 0201 	adcs.w	r2, r0, r1
    444e:	e006      	b.n	445e <_fputwc_r+0xae>
    4450:	6820      	ldr	r0, [r4, #0]
    4452:	5d59      	ldrb	r1, [r3, r5]
    4454:	7001      	strb	r1, [r0, #0]
    4456:	6822      	ldr	r2, [r4, #0]
    4458:	1c53      	adds	r3, r2, #1
    445a:	6023      	str	r3, [r4, #0]
    445c:	e000      	b.n	4460 <_fputwc_r+0xb0>
    445e:	b91a      	cbnz	r2, 4468 <_fputwc_r+0xb8>
    4460:	3501      	adds	r5, #1
    4462:	e7d2      	b.n	440a <_fputwc_r+0x5a>
    4464:	4630      	mov	r0, r6
    4466:	e001      	b.n	446c <_fputwc_r+0xbc>
    4468:	f04f 30ff 	mov.w	r0, #4294967295
    446c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

00004470 <fputwc>:
    4470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4472:	4c08      	ldr	r4, [pc, #32]	; (4494 <fputwc+0x24>)
    4474:	4607      	mov	r7, r0
    4476:	6820      	ldr	r0, [r4, #0]
    4478:	460e      	mov	r6, r1
    447a:	b118      	cbz	r0, 4484 <fputwc+0x14>
    447c:	6b85      	ldr	r5, [r0, #56]	; 0x38
    447e:	b90d      	cbnz	r5, 4484 <fputwc+0x14>
    4480:	f7ff ff1a 	bl	42b8 <__sinit>
    4484:	6820      	ldr	r0, [r4, #0]
    4486:	4639      	mov	r1, r7
    4488:	4632      	mov	r2, r6
    448a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    448e:	f7ff bf8f 	b.w	43b0 <_fputwc_r>
    4492:	bf00      	nop
    4494:	20000050 	.word	0x20000050

00004498 <_malloc_trim_r>:
    4498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    449a:	4d23      	ldr	r5, [pc, #140]	; (4528 <_malloc_trim_r+0x90>)
    449c:	460e      	mov	r6, r1
    449e:	4604      	mov	r4, r0
    44a0:	f000 fd8f 	bl	4fc2 <__malloc_lock>
    44a4:	68ab      	ldr	r3, [r5, #8]
    44a6:	685f      	ldr	r7, [r3, #4]
    44a8:	f027 0703 	bic.w	r7, r7, #3
    44ac:	f607 70ef 	addw	r0, r7, #4079	; 0xfef
    44b0:	1b81      	subs	r1, r0, r6
    44b2:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
    44b6:	f022 060f 	bic.w	r6, r2, #15
    44ba:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
    44be:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
    44c2:	da04      	bge.n	44ce <_malloc_trim_r+0x36>
    44c4:	4620      	mov	r0, r4
    44c6:	f000 fd7d 	bl	4fc4 <__malloc_unlock>
    44ca:	2000      	movs	r0, #0
    44cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    44ce:	2100      	movs	r1, #0
    44d0:	4620      	mov	r0, r4
    44d2:	f000 fee7 	bl	52a4 <_sbrk_r>
    44d6:	68ab      	ldr	r3, [r5, #8]
    44d8:	19d9      	adds	r1, r3, r7
    44da:	4288      	cmp	r0, r1
    44dc:	d1f2      	bne.n	44c4 <_malloc_trim_r+0x2c>
    44de:	4271      	negs	r1, r6
    44e0:	4620      	mov	r0, r4
    44e2:	f000 fedf 	bl	52a4 <_sbrk_r>
    44e6:	3001      	adds	r0, #1
    44e8:	d110      	bne.n	450c <_malloc_trim_r+0x74>
    44ea:	2100      	movs	r1, #0
    44ec:	4620      	mov	r0, r4
    44ee:	f000 fed9 	bl	52a4 <_sbrk_r>
    44f2:	68ab      	ldr	r3, [r5, #8]
    44f4:	1ac2      	subs	r2, r0, r3
    44f6:	2a0f      	cmp	r2, #15
    44f8:	dde4      	ble.n	44c4 <_malloc_trim_r+0x2c>
    44fa:	490c      	ldr	r1, [pc, #48]	; (452c <_malloc_trim_r+0x94>)
    44fc:	6809      	ldr	r1, [r1, #0]
    44fe:	1a40      	subs	r0, r0, r1
    4500:	490b      	ldr	r1, [pc, #44]	; (4530 <_malloc_trim_r+0x98>)
    4502:	f042 0201 	orr.w	r2, r2, #1
    4506:	6008      	str	r0, [r1, #0]
    4508:	605a      	str	r2, [r3, #4]
    450a:	e7db      	b.n	44c4 <_malloc_trim_r+0x2c>
    450c:	4b08      	ldr	r3, [pc, #32]	; (4530 <_malloc_trim_r+0x98>)
    450e:	68a8      	ldr	r0, [r5, #8]
    4510:	681a      	ldr	r2, [r3, #0]
    4512:	1bbf      	subs	r7, r7, r6
    4514:	f047 0701 	orr.w	r7, r7, #1
    4518:	6047      	str	r7, [r0, #4]
    451a:	1b96      	subs	r6, r2, r6
    451c:	4620      	mov	r0, r4
    451e:	601e      	str	r6, [r3, #0]
    4520:	f000 fd50 	bl	4fc4 <__malloc_unlock>
    4524:	2001      	movs	r0, #1
    4526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4528:	200004fc 	.word	0x200004fc
    452c:	20000904 	.word	0x20000904
    4530:	200009e0 	.word	0x200009e0

00004534 <_free_r>:
    4534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4536:	4606      	mov	r6, r0
    4538:	460d      	mov	r5, r1
    453a:	2900      	cmp	r1, #0
    453c:	f000 80a6 	beq.w	468c <_free_r+0x158>
    4540:	f000 fd3f 	bl	4fc2 <__malloc_lock>
    4544:	f855 cc04 	ldr.w	ip, [r5, #-4]
    4548:	4f51      	ldr	r7, [pc, #324]	; (4690 <_free_r+0x15c>)
    454a:	f1a5 0308 	sub.w	r3, r5, #8
    454e:	f02c 0201 	bic.w	r2, ip, #1
    4552:	189c      	adds	r4, r3, r2
    4554:	68b9      	ldr	r1, [r7, #8]
    4556:	6860      	ldr	r0, [r4, #4]
    4558:	428c      	cmp	r4, r1
    455a:	f020 0003 	bic.w	r0, r0, #3
    455e:	f00c 0101 	and.w	r1, ip, #1
    4562:	d11c      	bne.n	459e <_free_r+0x6a>
    4564:	1882      	adds	r2, r0, r2
    4566:	b939      	cbnz	r1, 4578 <_free_r+0x44>
    4568:	f855 1c08 	ldr.w	r1, [r5, #-8]
    456c:	1a5b      	subs	r3, r3, r1
    456e:	1852      	adds	r2, r2, r1
    4570:	6898      	ldr	r0, [r3, #8]
    4572:	68d9      	ldr	r1, [r3, #12]
    4574:	60c1      	str	r1, [r0, #12]
    4576:	6088      	str	r0, [r1, #8]
    4578:	4845      	ldr	r0, [pc, #276]	; (4690 <_free_r+0x15c>)
    457a:	f042 0101 	orr.w	r1, r2, #1
    457e:	6059      	str	r1, [r3, #4]
    4580:	6083      	str	r3, [r0, #8]
    4582:	4b44      	ldr	r3, [pc, #272]	; (4694 <_free_r+0x160>)
    4584:	6819      	ldr	r1, [r3, #0]
    4586:	428a      	cmp	r2, r1
    4588:	d304      	bcc.n	4594 <_free_r+0x60>
    458a:	4a43      	ldr	r2, [pc, #268]	; (4698 <_free_r+0x164>)
    458c:	4630      	mov	r0, r6
    458e:	6811      	ldr	r1, [r2, #0]
    4590:	f7ff ff82 	bl	4498 <_malloc_trim_r>
    4594:	4630      	mov	r0, r6
    4596:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    459a:	f000 bd13 	b.w	4fc4 <__malloc_unlock>
    459e:	6060      	str	r0, [r4, #4]
    45a0:	b959      	cbnz	r1, 45ba <_free_r+0x86>
    45a2:	f855 5c08 	ldr.w	r5, [r5, #-8]
    45a6:	1b5b      	subs	r3, r3, r5
    45a8:	1952      	adds	r2, r2, r5
    45aa:	689d      	ldr	r5, [r3, #8]
    45ac:	3708      	adds	r7, #8
    45ae:	42bd      	cmp	r5, r7
    45b0:	d005      	beq.n	45be <_free_r+0x8a>
    45b2:	68df      	ldr	r7, [r3, #12]
    45b4:	60ef      	str	r7, [r5, #12]
    45b6:	60bd      	str	r5, [r7, #8]
    45b8:	e002      	b.n	45c0 <_free_r+0x8c>
    45ba:	2100      	movs	r1, #0
    45bc:	e000      	b.n	45c0 <_free_r+0x8c>
    45be:	2101      	movs	r1, #1
    45c0:	1825      	adds	r5, r4, r0
    45c2:	686d      	ldr	r5, [r5, #4]
    45c4:	f015 0f01 	tst.w	r5, #1
    45c8:	d10f      	bne.n	45ea <_free_r+0xb6>
    45ca:	1812      	adds	r2, r2, r0
    45cc:	b949      	cbnz	r1, 45e2 <_free_r+0xae>
    45ce:	68a0      	ldr	r0, [r4, #8]
    45d0:	4d32      	ldr	r5, [pc, #200]	; (469c <_free_r+0x168>)
    45d2:	42a8      	cmp	r0, r5
    45d4:	d105      	bne.n	45e2 <_free_r+0xae>
    45d6:	60eb      	str	r3, [r5, #12]
    45d8:	60ab      	str	r3, [r5, #8]
    45da:	60d8      	str	r0, [r3, #12]
    45dc:	6098      	str	r0, [r3, #8]
    45de:	2101      	movs	r1, #1
    45e0:	e003      	b.n	45ea <_free_r+0xb6>
    45e2:	68e0      	ldr	r0, [r4, #12]
    45e4:	68a4      	ldr	r4, [r4, #8]
    45e6:	60e0      	str	r0, [r4, #12]
    45e8:	6084      	str	r4, [r0, #8]
    45ea:	f042 0001 	orr.w	r0, r2, #1
    45ee:	6058      	str	r0, [r3, #4]
    45f0:	509a      	str	r2, [r3, r2]
    45f2:	2900      	cmp	r1, #0
    45f4:	d1ce      	bne.n	4594 <_free_r+0x60>
    45f6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    45fa:	d20c      	bcs.n	4616 <_free_r+0xe2>
    45fc:	4924      	ldr	r1, [pc, #144]	; (4690 <_free_r+0x15c>)
    45fe:	08d2      	lsrs	r2, r2, #3
    4600:	1090      	asrs	r0, r2, #2
    4602:	2401      	movs	r4, #1
    4604:	fa04 f400 	lsl.w	r4, r4, r0
    4608:	6848      	ldr	r0, [r1, #4]
    460a:	4320      	orrs	r0, r4
    460c:	6048      	str	r0, [r1, #4]
    460e:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    4612:	6881      	ldr	r1, [r0, #8]
    4614:	e035      	b.n	4682 <_free_r+0x14e>
    4616:	0a54      	lsrs	r4, r2, #9
    4618:	2c04      	cmp	r4, #4
    461a:	d802      	bhi.n	4622 <_free_r+0xee>
    461c:	0994      	lsrs	r4, r2, #6
    461e:	3438      	adds	r4, #56	; 0x38
    4620:	e016      	b.n	4650 <_free_r+0x11c>
    4622:	2c14      	cmp	r4, #20
    4624:	d801      	bhi.n	462a <_free_r+0xf6>
    4626:	345b      	adds	r4, #91	; 0x5b
    4628:	e012      	b.n	4650 <_free_r+0x11c>
    462a:	2c54      	cmp	r4, #84	; 0x54
    462c:	d802      	bhi.n	4634 <_free_r+0x100>
    462e:	0b14      	lsrs	r4, r2, #12
    4630:	346e      	adds	r4, #110	; 0x6e
    4632:	e00d      	b.n	4650 <_free_r+0x11c>
    4634:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
    4638:	d802      	bhi.n	4640 <_free_r+0x10c>
    463a:	0bd4      	lsrs	r4, r2, #15
    463c:	3477      	adds	r4, #119	; 0x77
    463e:	e007      	b.n	4650 <_free_r+0x11c>
    4640:	f240 5554 	movw	r5, #1364	; 0x554
    4644:	42ac      	cmp	r4, r5
    4646:	d802      	bhi.n	464e <_free_r+0x11a>
    4648:	0c94      	lsrs	r4, r2, #18
    464a:	347c      	adds	r4, #124	; 0x7c
    464c:	e000      	b.n	4650 <_free_r+0x11c>
    464e:	247e      	movs	r4, #126	; 0x7e
    4650:	4d0f      	ldr	r5, [pc, #60]	; (4690 <_free_r+0x15c>)
    4652:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    4656:	6881      	ldr	r1, [r0, #8]
    4658:	4281      	cmp	r1, r0
    465a:	d10c      	bne.n	4676 <_free_r+0x142>
    465c:	6868      	ldr	r0, [r5, #4]
    465e:	2201      	movs	r2, #1
    4660:	10a4      	asrs	r4, r4, #2
    4662:	fa02 f404 	lsl.w	r4, r2, r4
    4666:	ea44 0200 	orr.w	r2, r4, r0
    466a:	606a      	str	r2, [r5, #4]
    466c:	4608      	mov	r0, r1
    466e:	e008      	b.n	4682 <_free_r+0x14e>
    4670:	6889      	ldr	r1, [r1, #8]
    4672:	4281      	cmp	r1, r0
    4674:	d004      	beq.n	4680 <_free_r+0x14c>
    4676:	684c      	ldr	r4, [r1, #4]
    4678:	f024 0403 	bic.w	r4, r4, #3
    467c:	42a2      	cmp	r2, r4
    467e:	d3f7      	bcc.n	4670 <_free_r+0x13c>
    4680:	68c8      	ldr	r0, [r1, #12]
    4682:	60d8      	str	r0, [r3, #12]
    4684:	6099      	str	r1, [r3, #8]
    4686:	6083      	str	r3, [r0, #8]
    4688:	60cb      	str	r3, [r1, #12]
    468a:	e783      	b.n	4594 <_free_r+0x60>
    468c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    468e:	bf00      	nop
    4690:	200004fc 	.word	0x200004fc
    4694:	20000908 	.word	0x20000908
    4698:	200009dc 	.word	0x200009dc
    469c:	20000504 	.word	0x20000504

000046a0 <__sfvwrite_r>:
    46a0:	6893      	ldr	r3, [r2, #8]
    46a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    46a6:	4606      	mov	r6, r0
    46a8:	460c      	mov	r4, r1
    46aa:	4691      	mov	r9, r2
    46ac:	b90b      	cbnz	r3, 46b2 <__sfvwrite_r+0x12>
    46ae:	2000      	movs	r0, #0
    46b0:	e14f      	b.n	4952 <__sfvwrite_r+0x2b2>
    46b2:	8988      	ldrh	r0, [r1, #12]
    46b4:	f000 0108 	and.w	r1, r0, #8
    46b8:	b20a      	sxth	r2, r1
    46ba:	b10a      	cbz	r2, 46c0 <__sfvwrite_r+0x20>
    46bc:	6923      	ldr	r3, [r4, #16]
    46be:	b95b      	cbnz	r3, 46d8 <__sfvwrite_r+0x38>
    46c0:	4630      	mov	r0, r6
    46c2:	4621      	mov	r1, r4
    46c4:	f7ff fc98 	bl	3ff8 <__swsetup_r>
    46c8:	b130      	cbz	r0, 46d8 <__sfvwrite_r+0x38>
    46ca:	89a1      	ldrh	r1, [r4, #12]
    46cc:	2209      	movs	r2, #9
    46ce:	f041 0040 	orr.w	r0, r1, #64	; 0x40
    46d2:	81a0      	strh	r0, [r4, #12]
    46d4:	6032      	str	r2, [r6, #0]
    46d6:	e13a      	b.n	494e <__sfvwrite_r+0x2ae>
    46d8:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
    46dc:	f8d9 8000 	ldr.w	r8, [r9]
    46e0:	f00a 0c02 	and.w	ip, sl, #2
    46e4:	fa0f f58c 	sxth.w	r5, ip
    46e8:	b315      	cbz	r5, 4730 <__sfvwrite_r+0x90>
    46ea:	f04f 0a00 	mov.w	sl, #0
    46ee:	4657      	mov	r7, sl
    46f0:	b937      	cbnz	r7, 4700 <__sfvwrite_r+0x60>
    46f2:	f8d8 a000 	ldr.w	sl, [r8]
    46f6:	f8d8 7004 	ldr.w	r7, [r8, #4]
    46fa:	f108 0808 	add.w	r8, r8, #8
    46fe:	e7f7      	b.n	46f0 <__sfvwrite_r+0x50>
    4700:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    4704:	bf34      	ite	cc
    4706:	463b      	movcc	r3, r7
    4708:	f44f 6380 	movcs.w	r3, #1024	; 0x400
    470c:	4630      	mov	r0, r6
    470e:	69e1      	ldr	r1, [r4, #28]
    4710:	6a65      	ldr	r5, [r4, #36]	; 0x24
    4712:	4652      	mov	r2, sl
    4714:	47a8      	blx	r5
    4716:	2800      	cmp	r0, #0
    4718:	f340 8115 	ble.w	4946 <__sfvwrite_r+0x2a6>
    471c:	f8d9 1008 	ldr.w	r1, [r9, #8]
    4720:	4482      	add	sl, r0
    4722:	1a3f      	subs	r7, r7, r0
    4724:	1a08      	subs	r0, r1, r0
    4726:	f8c9 0008 	str.w	r0, [r9, #8]
    472a:	2800      	cmp	r0, #0
    472c:	d1e0      	bne.n	46f0 <__sfvwrite_r+0x50>
    472e:	e7be      	b.n	46ae <__sfvwrite_r+0xe>
    4730:	f01a 0a01 	ands.w	sl, sl, #1
    4734:	d004      	beq.n	4740 <__sfvwrite_r+0xa0>
    4736:	46ab      	mov	fp, r5
    4738:	9501      	str	r5, [sp, #4]
    473a:	462f      	mov	r7, r5
    473c:	46aa      	mov	sl, r5
    473e:	e0c7      	b.n	48d0 <__sfvwrite_r+0x230>
    4740:	4655      	mov	r5, sl
    4742:	b935      	cbnz	r5, 4752 <__sfvwrite_r+0xb2>
    4744:	f8d8 a000 	ldr.w	sl, [r8]
    4748:	f8d8 5004 	ldr.w	r5, [r8, #4]
    474c:	f108 0808 	add.w	r8, r8, #8
    4750:	e7f7      	b.n	4742 <__sfvwrite_r+0xa2>
    4752:	89a2      	ldrh	r2, [r4, #12]
    4754:	f8d4 b008 	ldr.w	fp, [r4, #8]
    4758:	f402 7000 	and.w	r0, r2, #512	; 0x200
    475c:	b203      	sxth	r3, r0
    475e:	2b00      	cmp	r3, #0
    4760:	d052      	beq.n	4808 <__sfvwrite_r+0x168>
    4762:	455d      	cmp	r5, fp
    4764:	d340      	bcc.n	47e8 <__sfvwrite_r+0x148>
    4766:	f412 6f90 	tst.w	r2, #1152	; 0x480
    476a:	d03b      	beq.n	47e4 <__sfvwrite_r+0x144>
    476c:	6921      	ldr	r1, [r4, #16]
    476e:	6827      	ldr	r7, [r4, #0]
    4770:	6963      	ldr	r3, [r4, #20]
    4772:	f04f 0b03 	mov.w	fp, #3
    4776:	fb0b f303 	mul.w	r3, fp, r3
    477a:	2002      	movs	r0, #2
    477c:	1a7f      	subs	r7, r7, r1
    477e:	fb93 fcf0 	sdiv	ip, r3, r0
    4782:	1c7b      	adds	r3, r7, #1
    4784:	1958      	adds	r0, r3, r5
    4786:	f402 6280 	and.w	r2, r2, #1024	; 0x400
    478a:	4584      	cmp	ip, r0
    478c:	bf28      	it	cs
    478e:	4660      	movcs	r0, ip
    4790:	b213      	sxth	r3, r2
    4792:	9001      	str	r0, [sp, #4]
    4794:	4630      	mov	r0, r6
    4796:	b17b      	cbz	r3, 47b8 <__sfvwrite_r+0x118>
    4798:	9901      	ldr	r1, [sp, #4]
    479a:	f000 f9df 	bl	4b5c <_malloc_r>
    479e:	4683      	mov	fp, r0
    47a0:	b198      	cbz	r0, 47ca <__sfvwrite_r+0x12a>
    47a2:	6921      	ldr	r1, [r4, #16]
    47a4:	463a      	mov	r2, r7
    47a6:	f000 fbe9 	bl	4f7c <memcpy>
    47aa:	89a1      	ldrh	r1, [r4, #12]
    47ac:	f421 6090 	bic.w	r0, r1, #1152	; 0x480
    47b0:	f040 0280 	orr.w	r2, r0, #128	; 0x80
    47b4:	81a2      	strh	r2, [r4, #12]
    47b6:	e00b      	b.n	47d0 <__sfvwrite_r+0x130>
    47b8:	9a01      	ldr	r2, [sp, #4]
    47ba:	f000 fc05 	bl	4fc8 <_realloc_r>
    47be:	4683      	mov	fp, r0
    47c0:	b930      	cbnz	r0, 47d0 <__sfvwrite_r+0x130>
    47c2:	4630      	mov	r0, r6
    47c4:	6921      	ldr	r1, [r4, #16]
    47c6:	f7ff feb5 	bl	4534 <_free_r>
    47ca:	230c      	movs	r3, #12
    47cc:	6033      	str	r3, [r6, #0]
    47ce:	e0ba      	b.n	4946 <__sfvwrite_r+0x2a6>
    47d0:	9901      	ldr	r1, [sp, #4]
    47d2:	f8c4 b010 	str.w	fp, [r4, #16]
    47d6:	eb0b 0307 	add.w	r3, fp, r7
    47da:	1bcf      	subs	r7, r1, r7
    47dc:	6023      	str	r3, [r4, #0]
    47de:	6161      	str	r1, [r4, #20]
    47e0:	46ab      	mov	fp, r5
    47e2:	60a7      	str	r7, [r4, #8]
    47e4:	455d      	cmp	r5, fp
    47e6:	d200      	bcs.n	47ea <__sfvwrite_r+0x14a>
    47e8:	46ab      	mov	fp, r5
    47ea:	465a      	mov	r2, fp
    47ec:	4651      	mov	r1, sl
    47ee:	6820      	ldr	r0, [r4, #0]
    47f0:	f000 fbcd 	bl	4f8e <memmove>
    47f4:	68a0      	ldr	r0, [r4, #8]
    47f6:	6823      	ldr	r3, [r4, #0]
    47f8:	ebcb 0200 	rsb	r2, fp, r0
    47fc:	eb03 010b 	add.w	r1, r3, fp
    4800:	60a2      	str	r2, [r4, #8]
    4802:	6021      	str	r1, [r4, #0]
    4804:	46ab      	mov	fp, r5
    4806:	e02a      	b.n	485e <__sfvwrite_r+0x1be>
    4808:	6820      	ldr	r0, [r4, #0]
    480a:	6921      	ldr	r1, [r4, #16]
    480c:	4288      	cmp	r0, r1
    480e:	d90f      	bls.n	4830 <__sfvwrite_r+0x190>
    4810:	455d      	cmp	r5, fp
    4812:	d90d      	bls.n	4830 <__sfvwrite_r+0x190>
    4814:	4651      	mov	r1, sl
    4816:	465a      	mov	r2, fp
    4818:	f000 fbb9 	bl	4f8e <memmove>
    481c:	6822      	ldr	r2, [r4, #0]
    481e:	eb02 000b 	add.w	r0, r2, fp
    4822:	6020      	str	r0, [r4, #0]
    4824:	4621      	mov	r1, r4
    4826:	4630      	mov	r0, r6
    4828:	f7ff fc52 	bl	40d0 <_fflush_r>
    482c:	b1b8      	cbz	r0, 485e <__sfvwrite_r+0x1be>
    482e:	e08a      	b.n	4946 <__sfvwrite_r+0x2a6>
    4830:	6963      	ldr	r3, [r4, #20]
    4832:	429d      	cmp	r5, r3
    4834:	d308      	bcc.n	4848 <__sfvwrite_r+0x1a8>
    4836:	6a67      	ldr	r7, [r4, #36]	; 0x24
    4838:	69e1      	ldr	r1, [r4, #28]
    483a:	4630      	mov	r0, r6
    483c:	4652      	mov	r2, sl
    483e:	47b8      	blx	r7
    4840:	f1b0 0b00 	subs.w	fp, r0, #0
    4844:	dc0b      	bgt.n	485e <__sfvwrite_r+0x1be>
    4846:	e07e      	b.n	4946 <__sfvwrite_r+0x2a6>
    4848:	4651      	mov	r1, sl
    484a:	462a      	mov	r2, r5
    484c:	f000 fb9f 	bl	4f8e <memmove>
    4850:	68a2      	ldr	r2, [r4, #8]
    4852:	6823      	ldr	r3, [r4, #0]
    4854:	1b50      	subs	r0, r2, r5
    4856:	1959      	adds	r1, r3, r5
    4858:	46ab      	mov	fp, r5
    485a:	60a0      	str	r0, [r4, #8]
    485c:	6021      	str	r1, [r4, #0]
    485e:	f8d9 0008 	ldr.w	r0, [r9, #8]
    4862:	ebcb 0200 	rsb	r2, fp, r0
    4866:	44da      	add	sl, fp
    4868:	ebcb 0505 	rsb	r5, fp, r5
    486c:	f8c9 2008 	str.w	r2, [r9, #8]
    4870:	2a00      	cmp	r2, #0
    4872:	f47f af66 	bne.w	4742 <__sfvwrite_r+0xa2>
    4876:	e71a      	b.n	46ae <__sfvwrite_r+0xe>
    4878:	9801      	ldr	r0, [sp, #4]
    487a:	2800      	cmp	r0, #0
    487c:	d032      	beq.n	48e4 <__sfvwrite_r+0x244>
    487e:	6820      	ldr	r0, [r4, #0]
    4880:	6921      	ldr	r1, [r4, #16]
    4882:	68a5      	ldr	r5, [r4, #8]
    4884:	f8d4 e014 	ldr.w	lr, [r4, #20]
    4888:	45d3      	cmp	fp, sl
    488a:	bf34      	ite	cc
    488c:	465b      	movcc	r3, fp
    488e:	4653      	movcs	r3, sl
    4890:	4288      	cmp	r0, r1
    4892:	d937      	bls.n	4904 <__sfvwrite_r+0x264>
    4894:	4475      	add	r5, lr
    4896:	42ab      	cmp	r3, r5
    4898:	dd34      	ble.n	4904 <__sfvwrite_r+0x264>
    489a:	4639      	mov	r1, r7
    489c:	462a      	mov	r2, r5
    489e:	f000 fb76 	bl	4f8e <memmove>
    48a2:	6820      	ldr	r0, [r4, #0]
    48a4:	1943      	adds	r3, r0, r5
    48a6:	6023      	str	r3, [r4, #0]
    48a8:	4630      	mov	r0, r6
    48aa:	4621      	mov	r1, r4
    48ac:	f7ff fc10 	bl	40d0 <_fflush_r>
    48b0:	2800      	cmp	r0, #0
    48b2:	d148      	bne.n	4946 <__sfvwrite_r+0x2a6>
    48b4:	ebbb 0b05 	subs.w	fp, fp, r5
    48b8:	d03d      	beq.n	4936 <__sfvwrite_r+0x296>
    48ba:	f8d9 2008 	ldr.w	r2, [r9, #8]
    48be:	197f      	adds	r7, r7, r5
    48c0:	ebc5 0a0a 	rsb	sl, r5, sl
    48c4:	1b55      	subs	r5, r2, r5
    48c6:	f8c9 5008 	str.w	r5, [r9, #8]
    48ca:	2d00      	cmp	r5, #0
    48cc:	f43f aeef 	beq.w	46ae <__sfvwrite_r+0xe>
    48d0:	f1ba 0f00 	cmp.w	sl, #0
    48d4:	d1d0      	bne.n	4878 <__sfvwrite_r+0x1d8>
    48d6:	2100      	movs	r1, #0
    48d8:	e898 0480 	ldmia.w	r8, {r7, sl}
    48dc:	9101      	str	r1, [sp, #4]
    48de:	f108 0808 	add.w	r8, r8, #8
    48e2:	e7f5      	b.n	48d0 <__sfvwrite_r+0x230>
    48e4:	4638      	mov	r0, r7
    48e6:	210a      	movs	r1, #10
    48e8:	4652      	mov	r2, sl
    48ea:	f000 fb39 	bl	4f60 <memchr>
    48ee:	b120      	cbz	r0, 48fa <__sfvwrite_r+0x25a>
    48f0:	f100 0101 	add.w	r1, r0, #1
    48f4:	ebc7 0b01 	rsb	fp, r7, r1
    48f8:	e001      	b.n	48fe <__sfvwrite_r+0x25e>
    48fa:	f10a 0b01 	add.w	fp, sl, #1
    48fe:	2201      	movs	r2, #1
    4900:	9201      	str	r2, [sp, #4]
    4902:	e7bc      	b.n	487e <__sfvwrite_r+0x1de>
    4904:	4573      	cmp	r3, lr
    4906:	db08      	blt.n	491a <__sfvwrite_r+0x27a>
    4908:	6a65      	ldr	r5, [r4, #36]	; 0x24
    490a:	69e1      	ldr	r1, [r4, #28]
    490c:	4630      	mov	r0, r6
    490e:	463a      	mov	r2, r7
    4910:	4673      	mov	r3, lr
    4912:	47a8      	blx	r5
    4914:	1e05      	subs	r5, r0, #0
    4916:	dccd      	bgt.n	48b4 <__sfvwrite_r+0x214>
    4918:	e015      	b.n	4946 <__sfvwrite_r+0x2a6>
    491a:	461a      	mov	r2, r3
    491c:	4639      	mov	r1, r7
    491e:	9300      	str	r3, [sp, #0]
    4920:	f000 fb35 	bl	4f8e <memmove>
    4924:	9b00      	ldr	r3, [sp, #0]
    4926:	6825      	ldr	r5, [r4, #0]
    4928:	68a0      	ldr	r0, [r4, #8]
    492a:	18e9      	adds	r1, r5, r3
    492c:	1ac2      	subs	r2, r0, r3
    492e:	60a2      	str	r2, [r4, #8]
    4930:	6021      	str	r1, [r4, #0]
    4932:	461d      	mov	r5, r3
    4934:	e7be      	b.n	48b4 <__sfvwrite_r+0x214>
    4936:	4630      	mov	r0, r6
    4938:	4621      	mov	r1, r4
    493a:	f7ff fbc9 	bl	40d0 <_fflush_r>
    493e:	b910      	cbnz	r0, 4946 <__sfvwrite_r+0x2a6>
    4940:	f8cd b004 	str.w	fp, [sp, #4]
    4944:	e7b9      	b.n	48ba <__sfvwrite_r+0x21a>
    4946:	89a2      	ldrh	r2, [r4, #12]
    4948:	f042 0340 	orr.w	r3, r2, #64	; 0x40
    494c:	81a3      	strh	r3, [r4, #12]
    494e:	f04f 30ff 	mov.w	r0, #4294967295
    4952:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00004956 <_fwalk>:
    4956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    495a:	4604      	mov	r4, r0
    495c:	4688      	mov	r8, r1
    495e:	f7ff fd0f 	bl	4380 <__sfp_lock_acquire>
    4962:	f504 7438 	add.w	r4, r4, #736	; 0x2e0
    4966:	2600      	movs	r6, #0
    4968:	b18c      	cbz	r4, 498e <_fwalk+0x38>
    496a:	68a5      	ldr	r5, [r4, #8]
    496c:	6867      	ldr	r7, [r4, #4]
    496e:	3f01      	subs	r7, #1
    4970:	d40b      	bmi.n	498a <_fwalk+0x34>
    4972:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
    4976:	b133      	cbz	r3, 4986 <_fwalk+0x30>
    4978:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
    497c:	1c43      	adds	r3, r0, #1
    497e:	d002      	beq.n	4986 <_fwalk+0x30>
    4980:	4628      	mov	r0, r5
    4982:	47c0      	blx	r8
    4984:	4306      	orrs	r6, r0
    4986:	3568      	adds	r5, #104	; 0x68
    4988:	e7f1      	b.n	496e <_fwalk+0x18>
    498a:	6824      	ldr	r4, [r4, #0]
    498c:	e7ec      	b.n	4968 <_fwalk+0x12>
    498e:	f7ff fcf8 	bl	4382 <__sfp_lock_release>
    4992:	4630      	mov	r0, r6
    4994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004998 <_fwalk_reent>:
    4998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    499c:	4680      	mov	r8, r0
    499e:	4689      	mov	r9, r1
    49a0:	f7ff fcee 	bl	4380 <__sfp_lock_acquire>
    49a4:	f508 7438 	add.w	r4, r8, #736	; 0x2e0
    49a8:	2600      	movs	r6, #0
    49aa:	b194      	cbz	r4, 49d2 <_fwalk_reent+0x3a>
    49ac:	68a5      	ldr	r5, [r4, #8]
    49ae:	6867      	ldr	r7, [r4, #4]
    49b0:	3f01      	subs	r7, #1
    49b2:	d40c      	bmi.n	49ce <_fwalk_reent+0x36>
    49b4:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
    49b8:	b13b      	cbz	r3, 49ca <_fwalk_reent+0x32>
    49ba:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
    49be:	1c43      	adds	r3, r0, #1
    49c0:	d003      	beq.n	49ca <_fwalk_reent+0x32>
    49c2:	4640      	mov	r0, r8
    49c4:	4629      	mov	r1, r5
    49c6:	47c8      	blx	r9
    49c8:	4306      	orrs	r6, r0
    49ca:	3568      	adds	r5, #104	; 0x68
    49cc:	e7f0      	b.n	49b0 <_fwalk_reent+0x18>
    49ce:	6824      	ldr	r4, [r4, #0]
    49d0:	e7eb      	b.n	49aa <_fwalk_reent+0x12>
    49d2:	f7ff fcd6 	bl	4382 <__sfp_lock_release>
    49d6:	4630      	mov	r0, r6
    49d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000049dc <_setlocale_r>:
    49dc:	b510      	push	{r4, lr}
    49de:	4614      	mov	r4, r2
    49e0:	b90a      	cbnz	r2, 49e6 <_setlocale_r+0xa>
    49e2:	480c      	ldr	r0, [pc, #48]	; (4a14 <_setlocale_r+0x38>)
    49e4:	bd10      	pop	{r4, pc}
    49e6:	4610      	mov	r0, r2
    49e8:	490b      	ldr	r1, [pc, #44]	; (4a18 <_setlocale_r+0x3c>)
    49ea:	f000 fcb2 	bl	5352 <strcmp>
    49ee:	2800      	cmp	r0, #0
    49f0:	d0f7      	beq.n	49e2 <_setlocale_r+0x6>
    49f2:	4620      	mov	r0, r4
    49f4:	4907      	ldr	r1, [pc, #28]	; (4a14 <_setlocale_r+0x38>)
    49f6:	f000 fcac 	bl	5352 <strcmp>
    49fa:	2800      	cmp	r0, #0
    49fc:	d0f1      	beq.n	49e2 <_setlocale_r+0x6>
    49fe:	4620      	mov	r0, r4
    4a00:	4906      	ldr	r1, [pc, #24]	; (4a1c <_setlocale_r+0x40>)
    4a02:	f000 fca6 	bl	5352 <strcmp>
    4a06:	4b03      	ldr	r3, [pc, #12]	; (4a14 <_setlocale_r+0x38>)
    4a08:	2800      	cmp	r0, #0
    4a0a:	bf0c      	ite	eq
    4a0c:	4618      	moveq	r0, r3
    4a0e:	2000      	movne	r0, #0
    4a10:	bd10      	pop	{r4, pc}
    4a12:	bf00      	nop
    4a14:	00005ddc 	.word	0x00005ddc
    4a18:	00005e22 	.word	0x00005e22
    4a1c:	00005ddf 	.word	0x00005ddf

00004a20 <__locale_charset>:
    4a20:	4800      	ldr	r0, [pc, #0]	; (4a24 <__locale_charset+0x4>)
    4a22:	4770      	bx	lr
    4a24:	20000480 	.word	0x20000480

00004a28 <__locale_mb_cur_max>:
    4a28:	4b01      	ldr	r3, [pc, #4]	; (4a30 <__locale_mb_cur_max+0x8>)
    4a2a:	6a18      	ldr	r0, [r3, #32]
    4a2c:	4770      	bx	lr
    4a2e:	bf00      	nop
    4a30:	20000480 	.word	0x20000480

00004a34 <__locale_msgcharset>:
    4a34:	4800      	ldr	r0, [pc, #0]	; (4a38 <__locale_msgcharset+0x4>)
    4a36:	4770      	bx	lr
    4a38:	200004a4 	.word	0x200004a4

00004a3c <__locale_cjk_lang>:
    4a3c:	2000      	movs	r0, #0
    4a3e:	4770      	bx	lr

00004a40 <_localeconv_r>:
    4a40:	4800      	ldr	r0, [pc, #0]	; (4a44 <_localeconv_r+0x4>)
    4a42:	4770      	bx	lr
    4a44:	200004c4 	.word	0x200004c4

00004a48 <setlocale>:
    4a48:	460a      	mov	r2, r1
    4a4a:	4903      	ldr	r1, [pc, #12]	; (4a58 <setlocale+0x10>)
    4a4c:	4603      	mov	r3, r0
    4a4e:	6808      	ldr	r0, [r1, #0]
    4a50:	4619      	mov	r1, r3
    4a52:	f7ff bfc3 	b.w	49dc <_setlocale_r>
    4a56:	bf00      	nop
    4a58:	20000050 	.word	0x20000050

00004a5c <localeconv>:
    4a5c:	4800      	ldr	r0, [pc, #0]	; (4a60 <localeconv+0x4>)
    4a5e:	4770      	bx	lr
    4a60:	200004c4 	.word	0x200004c4

00004a64 <__smakebuf_r>:
    4a64:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a66:	898b      	ldrh	r3, [r1, #12]
    4a68:	460c      	mov	r4, r1
    4a6a:	f003 0102 	and.w	r1, r3, #2
    4a6e:	b20a      	sxth	r2, r1
    4a70:	b091      	sub	sp, #68	; 0x44
    4a72:	4606      	mov	r6, r0
    4a74:	2a00      	cmp	r2, #0
    4a76:	d13f      	bne.n	4af8 <__smakebuf_r+0x94>
    4a78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    4a7c:	2900      	cmp	r1, #0
    4a7e:	da0d      	bge.n	4a9c <__smakebuf_r+0x38>
    4a80:	89a7      	ldrh	r7, [r4, #12]
    4a82:	f007 0280 	and.w	r2, r7, #128	; 0x80
    4a86:	f447 6300 	orr.w	r3, r7, #2048	; 0x800
    4a8a:	b210      	sxth	r0, r2
    4a8c:	2800      	cmp	r0, #0
    4a8e:	bf0c      	ite	eq
    4a90:	f44f 6580 	moveq.w	r5, #1024	; 0x400
    4a94:	2540      	movne	r5, #64	; 0x40
    4a96:	81a3      	strh	r3, [r4, #12]
    4a98:	2700      	movs	r7, #0
    4a9a:	e020      	b.n	4ade <__smakebuf_r+0x7a>
    4a9c:	aa01      	add	r2, sp, #4
    4a9e:	f000 fd7f 	bl	55a0 <_fstat_r>
    4aa2:	2800      	cmp	r0, #0
    4aa4:	dbec      	blt.n	4a80 <__smakebuf_r+0x1c>
    4aa6:	9802      	ldr	r0, [sp, #8]
    4aa8:	f400 4570 	and.w	r5, r0, #61440	; 0xf000
    4aac:	f5b5 5300 	subs.w	r3, r5, #8192	; 0x2000
    4ab0:	425f      	negs	r7, r3
    4ab2:	415f      	adcs	r7, r3
    4ab4:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    4ab8:	d10b      	bne.n	4ad2 <__smakebuf_r+0x6e>
    4aba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    4abc:	4a1d      	ldr	r2, [pc, #116]	; (4b34 <__smakebuf_r+0xd0>)
    4abe:	4291      	cmp	r1, r2
    4ac0:	d107      	bne.n	4ad2 <__smakebuf_r+0x6e>
    4ac2:	89a3      	ldrh	r3, [r4, #12]
    4ac4:	f44f 6580 	mov.w	r5, #1024	; 0x400
    4ac8:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
    4acc:	81a1      	strh	r1, [r4, #12]
    4ace:	64e5      	str	r5, [r4, #76]	; 0x4c
    4ad0:	e005      	b.n	4ade <__smakebuf_r+0x7a>
    4ad2:	89a0      	ldrh	r0, [r4, #12]
    4ad4:	f440 6500 	orr.w	r5, r0, #2048	; 0x800
    4ad8:	81a5      	strh	r5, [r4, #12]
    4ada:	f44f 6580 	mov.w	r5, #1024	; 0x400
    4ade:	4630      	mov	r0, r6
    4ae0:	4629      	mov	r1, r5
    4ae2:	f000 f83b 	bl	4b5c <_malloc_r>
    4ae6:	b970      	cbnz	r0, 4b06 <__smakebuf_r+0xa2>
    4ae8:	89a3      	ldrh	r3, [r4, #12]
    4aea:	f403 7200 	and.w	r2, r3, #512	; 0x200
    4aee:	b210      	sxth	r0, r2
    4af0:	b9e8      	cbnz	r0, 4b2e <__smakebuf_r+0xca>
    4af2:	f043 0102 	orr.w	r1, r3, #2
    4af6:	81a1      	strh	r1, [r4, #12]
    4af8:	f104 0343 	add.w	r3, r4, #67	; 0x43
    4afc:	2201      	movs	r2, #1
    4afe:	6023      	str	r3, [r4, #0]
    4b00:	6123      	str	r3, [r4, #16]
    4b02:	6162      	str	r2, [r4, #20]
    4b04:	e013      	b.n	4b2e <__smakebuf_r+0xca>
    4b06:	89a2      	ldrh	r2, [r4, #12]
    4b08:	490b      	ldr	r1, [pc, #44]	; (4b38 <__smakebuf_r+0xd4>)
    4b0a:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    4b0e:	63f1      	str	r1, [r6, #60]	; 0x3c
    4b10:	81a3      	strh	r3, [r4, #12]
    4b12:	6020      	str	r0, [r4, #0]
    4b14:	6120      	str	r0, [r4, #16]
    4b16:	6165      	str	r5, [r4, #20]
    4b18:	b14f      	cbz	r7, 4b2e <__smakebuf_r+0xca>
    4b1a:	4630      	mov	r0, r6
    4b1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    4b20:	f000 fd50 	bl	55c4 <_isatty_r>
    4b24:	b118      	cbz	r0, 4b2e <__smakebuf_r+0xca>
    4b26:	89a0      	ldrh	r0, [r4, #12]
    4b28:	f040 0101 	orr.w	r1, r0, #1
    4b2c:	81a1      	strh	r1, [r4, #12]
    4b2e:	b011      	add	sp, #68	; 0x44
    4b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b32:	bf00      	nop
    4b34:	00005327 	.word	0x00005327
    4b38:	0000422d 	.word	0x0000422d

00004b3c <malloc>:
    4b3c:	4b02      	ldr	r3, [pc, #8]	; (4b48 <malloc+0xc>)
    4b3e:	4601      	mov	r1, r0
    4b40:	6818      	ldr	r0, [r3, #0]
    4b42:	f000 b80b 	b.w	4b5c <_malloc_r>
    4b46:	bf00      	nop
    4b48:	20000050 	.word	0x20000050

00004b4c <free>:
    4b4c:	4b02      	ldr	r3, [pc, #8]	; (4b58 <free+0xc>)
    4b4e:	4601      	mov	r1, r0
    4b50:	6818      	ldr	r0, [r3, #0]
    4b52:	f7ff bcef 	b.w	4534 <_free_r>
    4b56:	bf00      	nop
    4b58:	20000050 	.word	0x20000050

00004b5c <_malloc_r>:
    4b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4b60:	f101 040b 	add.w	r4, r1, #11
    4b64:	2c16      	cmp	r4, #22
    4b66:	4606      	mov	r6, r0
    4b68:	d903      	bls.n	4b72 <_malloc_r+0x16>
    4b6a:	f034 0407 	bics.w	r4, r4, #7
    4b6e:	d501      	bpl.n	4b74 <_malloc_r+0x18>
    4b70:	e002      	b.n	4b78 <_malloc_r+0x1c>
    4b72:	2410      	movs	r4, #16
    4b74:	428c      	cmp	r4, r1
    4b76:	d202      	bcs.n	4b7e <_malloc_r+0x22>
    4b78:	250c      	movs	r5, #12
    4b7a:	6035      	str	r5, [r6, #0]
    4b7c:	e1d9      	b.n	4f32 <_malloc_r+0x3d6>
    4b7e:	4630      	mov	r0, r6
    4b80:	f000 fa1f 	bl	4fc2 <__malloc_lock>
    4b84:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
    4b88:	d214      	bcs.n	4bb4 <_malloc_r+0x58>
    4b8a:	4da0      	ldr	r5, [pc, #640]	; (4e0c <_malloc_r+0x2b0>)
    4b8c:	08e1      	lsrs	r1, r4, #3
    4b8e:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
    4b92:	68c5      	ldr	r5, [r0, #12]
    4b94:	4285      	cmp	r5, r0
    4b96:	d105      	bne.n	4ba4 <_malloc_r+0x48>
    4b98:	f105 0308 	add.w	r3, r5, #8
    4b9c:	696d      	ldr	r5, [r5, #20]
    4b9e:	1c8a      	adds	r2, r1, #2
    4ba0:	429d      	cmp	r5, r3
    4ba2:	d044      	beq.n	4c2e <_malloc_r+0xd2>
    4ba4:	68e8      	ldr	r0, [r5, #12]
    4ba6:	68a9      	ldr	r1, [r5, #8]
    4ba8:	686a      	ldr	r2, [r5, #4]
    4baa:	60c8      	str	r0, [r1, #12]
    4bac:	f022 0303 	bic.w	r3, r2, #3
    4bb0:	6081      	str	r1, [r0, #8]
    4bb2:	e059      	b.n	4c68 <_malloc_r+0x10c>
    4bb4:	0a62      	lsrs	r2, r4, #9
    4bb6:	d101      	bne.n	4bbc <_malloc_r+0x60>
    4bb8:	08e2      	lsrs	r2, r4, #3
    4bba:	e01b      	b.n	4bf4 <_malloc_r+0x98>
    4bbc:	2a04      	cmp	r2, #4
    4bbe:	d802      	bhi.n	4bc6 <_malloc_r+0x6a>
    4bc0:	09a2      	lsrs	r2, r4, #6
    4bc2:	3238      	adds	r2, #56	; 0x38
    4bc4:	e016      	b.n	4bf4 <_malloc_r+0x98>
    4bc6:	2a14      	cmp	r2, #20
    4bc8:	d801      	bhi.n	4bce <_malloc_r+0x72>
    4bca:	325b      	adds	r2, #91	; 0x5b
    4bcc:	e012      	b.n	4bf4 <_malloc_r+0x98>
    4bce:	2a54      	cmp	r2, #84	; 0x54
    4bd0:	d802      	bhi.n	4bd8 <_malloc_r+0x7c>
    4bd2:	0b22      	lsrs	r2, r4, #12
    4bd4:	326e      	adds	r2, #110	; 0x6e
    4bd6:	e00d      	b.n	4bf4 <_malloc_r+0x98>
    4bd8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    4bdc:	d802      	bhi.n	4be4 <_malloc_r+0x88>
    4bde:	0be2      	lsrs	r2, r4, #15
    4be0:	3277      	adds	r2, #119	; 0x77
    4be2:	e007      	b.n	4bf4 <_malloc_r+0x98>
    4be4:	f240 5354 	movw	r3, #1364	; 0x554
    4be8:	429a      	cmp	r2, r3
    4bea:	d802      	bhi.n	4bf2 <_malloc_r+0x96>
    4bec:	0ca2      	lsrs	r2, r4, #18
    4bee:	327c      	adds	r2, #124	; 0x7c
    4bf0:	e000      	b.n	4bf4 <_malloc_r+0x98>
    4bf2:	227e      	movs	r2, #126	; 0x7e
    4bf4:	4885      	ldr	r0, [pc, #532]	; (4e0c <_malloc_r+0x2b0>)
    4bf6:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
    4bfa:	68dd      	ldr	r5, [r3, #12]
    4bfc:	429d      	cmp	r5, r3
    4bfe:	d015      	beq.n	4c2c <_malloc_r+0xd0>
    4c00:	6869      	ldr	r1, [r5, #4]
    4c02:	f021 0103 	bic.w	r1, r1, #3
    4c06:	1b08      	subs	r0, r1, r4
    4c08:	280f      	cmp	r0, #15
    4c0a:	dd01      	ble.n	4c10 <_malloc_r+0xb4>
    4c0c:	3a01      	subs	r2, #1
    4c0e:	e00d      	b.n	4c2c <_malloc_r+0xd0>
    4c10:	2800      	cmp	r0, #0
    4c12:	db09      	blt.n	4c28 <_malloc_r+0xcc>
    4c14:	68eb      	ldr	r3, [r5, #12]
    4c16:	68aa      	ldr	r2, [r5, #8]
    4c18:	60d3      	str	r3, [r2, #12]
    4c1a:	609a      	str	r2, [r3, #8]
    4c1c:	186b      	adds	r3, r5, r1
    4c1e:	685a      	ldr	r2, [r3, #4]
    4c20:	f042 0001 	orr.w	r0, r2, #1
    4c24:	6058      	str	r0, [r3, #4]
    4c26:	e190      	b.n	4f4a <_malloc_r+0x3ee>
    4c28:	68ed      	ldr	r5, [r5, #12]
    4c2a:	e7e7      	b.n	4bfc <_malloc_r+0xa0>
    4c2c:	3201      	adds	r2, #1
    4c2e:	4977      	ldr	r1, [pc, #476]	; (4e0c <_malloc_r+0x2b0>)
    4c30:	690d      	ldr	r5, [r1, #16]
    4c32:	f101 0708 	add.w	r7, r1, #8
    4c36:	42bd      	cmp	r5, r7
    4c38:	d068      	beq.n	4d0c <_malloc_r+0x1b0>
    4c3a:	6868      	ldr	r0, [r5, #4]
    4c3c:	f020 0303 	bic.w	r3, r0, #3
    4c40:	1b18      	subs	r0, r3, r4
    4c42:	280f      	cmp	r0, #15
    4c44:	dd0c      	ble.n	4c60 <_malloc_r+0x104>
    4c46:	192b      	adds	r3, r5, r4
    4c48:	614b      	str	r3, [r1, #20]
    4c4a:	610b      	str	r3, [r1, #16]
    4c4c:	f044 0401 	orr.w	r4, r4, #1
    4c50:	f040 0101 	orr.w	r1, r0, #1
    4c54:	606c      	str	r4, [r5, #4]
    4c56:	60df      	str	r7, [r3, #12]
    4c58:	609f      	str	r7, [r3, #8]
    4c5a:	6059      	str	r1, [r3, #4]
    4c5c:	5018      	str	r0, [r3, r0]
    4c5e:	e174      	b.n	4f4a <_malloc_r+0x3ee>
    4c60:	2800      	cmp	r0, #0
    4c62:	614f      	str	r7, [r1, #20]
    4c64:	610f      	str	r7, [r1, #16]
    4c66:	db01      	blt.n	4c6c <_malloc_r+0x110>
    4c68:	18eb      	adds	r3, r5, r3
    4c6a:	e7d8      	b.n	4c1e <_malloc_r+0xc2>
    4c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4c70:	d20f      	bcs.n	4c92 <_malloc_r+0x136>
    4c72:	08db      	lsrs	r3, r3, #3
    4c74:	1098      	asrs	r0, r3, #2
    4c76:	2701      	movs	r7, #1
    4c78:	fa07 f700 	lsl.w	r7, r7, r0
    4c7c:	6848      	ldr	r0, [r1, #4]
    4c7e:	4307      	orrs	r7, r0
    4c80:	604f      	str	r7, [r1, #4]
    4c82:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    4c86:	60e9      	str	r1, [r5, #12]
    4c88:	688b      	ldr	r3, [r1, #8]
    4c8a:	60ab      	str	r3, [r5, #8]
    4c8c:	60dd      	str	r5, [r3, #12]
    4c8e:	608d      	str	r5, [r1, #8]
    4c90:	e03c      	b.n	4d0c <_malloc_r+0x1b0>
    4c92:	0a58      	lsrs	r0, r3, #9
    4c94:	2804      	cmp	r0, #4
    4c96:	d802      	bhi.n	4c9e <_malloc_r+0x142>
    4c98:	0998      	lsrs	r0, r3, #6
    4c9a:	3038      	adds	r0, #56	; 0x38
    4c9c:	e016      	b.n	4ccc <_malloc_r+0x170>
    4c9e:	2814      	cmp	r0, #20
    4ca0:	d801      	bhi.n	4ca6 <_malloc_r+0x14a>
    4ca2:	305b      	adds	r0, #91	; 0x5b
    4ca4:	e012      	b.n	4ccc <_malloc_r+0x170>
    4ca6:	2854      	cmp	r0, #84	; 0x54
    4ca8:	d802      	bhi.n	4cb0 <_malloc_r+0x154>
    4caa:	0b18      	lsrs	r0, r3, #12
    4cac:	306e      	adds	r0, #110	; 0x6e
    4cae:	e00d      	b.n	4ccc <_malloc_r+0x170>
    4cb0:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
    4cb4:	d802      	bhi.n	4cbc <_malloc_r+0x160>
    4cb6:	0bd8      	lsrs	r0, r3, #15
    4cb8:	3077      	adds	r0, #119	; 0x77
    4cba:	e007      	b.n	4ccc <_malloc_r+0x170>
    4cbc:	f240 5754 	movw	r7, #1364	; 0x554
    4cc0:	42b8      	cmp	r0, r7
    4cc2:	d802      	bhi.n	4cca <_malloc_r+0x16e>
    4cc4:	0c98      	lsrs	r0, r3, #18
    4cc6:	307c      	adds	r0, #124	; 0x7c
    4cc8:	e000      	b.n	4ccc <_malloc_r+0x170>
    4cca:	207e      	movs	r0, #126	; 0x7e
    4ccc:	f8df e13c 	ldr.w	lr, [pc, #316]	; 4e0c <_malloc_r+0x2b0>
    4cd0:	eb0e 07c0 	add.w	r7, lr, r0, lsl #3
    4cd4:	68b9      	ldr	r1, [r7, #8]
    4cd6:	42b9      	cmp	r1, r7
    4cd8:	d10e      	bne.n	4cf8 <_malloc_r+0x19c>
    4cda:	1087      	asrs	r7, r0, #2
    4cdc:	2301      	movs	r3, #1
    4cde:	fa03 f007 	lsl.w	r0, r3, r7
    4ce2:	f8de 7004 	ldr.w	r7, [lr, #4]
    4ce6:	ea40 0307 	orr.w	r3, r0, r7
    4cea:	f8ce 3004 	str.w	r3, [lr, #4]
    4cee:	4608      	mov	r0, r1
    4cf0:	e008      	b.n	4d04 <_malloc_r+0x1a8>
    4cf2:	6889      	ldr	r1, [r1, #8]
    4cf4:	42b9      	cmp	r1, r7
    4cf6:	d004      	beq.n	4d02 <_malloc_r+0x1a6>
    4cf8:	6848      	ldr	r0, [r1, #4]
    4cfa:	f020 0003 	bic.w	r0, r0, #3
    4cfe:	4283      	cmp	r3, r0
    4d00:	d3f7      	bcc.n	4cf2 <_malloc_r+0x196>
    4d02:	68c8      	ldr	r0, [r1, #12]
    4d04:	60e8      	str	r0, [r5, #12]
    4d06:	60a9      	str	r1, [r5, #8]
    4d08:	60cd      	str	r5, [r1, #12]
    4d0a:	6085      	str	r5, [r0, #8]
    4d0c:	4f3f      	ldr	r7, [pc, #252]	; (4e0c <_malloc_r+0x2b0>)
    4d0e:	1095      	asrs	r5, r2, #2
    4d10:	2001      	movs	r0, #1
    4d12:	6879      	ldr	r1, [r7, #4]
    4d14:	fa00 f305 	lsl.w	r3, r0, r5
    4d18:	428b      	cmp	r3, r1
    4d1a:	d85d      	bhi.n	4dd8 <_malloc_r+0x27c>
    4d1c:	420b      	tst	r3, r1
    4d1e:	d105      	bne.n	4d2c <_malloc_r+0x1d0>
    4d20:	f022 0203 	bic.w	r2, r2, #3
    4d24:	005b      	lsls	r3, r3, #1
    4d26:	3204      	adds	r2, #4
    4d28:	420b      	tst	r3, r1
    4d2a:	d0fb      	beq.n	4d24 <_malloc_r+0x1c8>
    4d2c:	4d37      	ldr	r5, [pc, #220]	; (4e0c <_malloc_r+0x2b0>)
    4d2e:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
    4d32:	4677      	mov	r7, lr
    4d34:	4610      	mov	r0, r2
    4d36:	68fd      	ldr	r5, [r7, #12]
    4d38:	42bd      	cmp	r5, r7
    4d3a:	d02d      	beq.n	4d98 <_malloc_r+0x23c>
    4d3c:	6869      	ldr	r1, [r5, #4]
    4d3e:	f021 0c03 	bic.w	ip, r1, #3
    4d42:	ebc4 010c 	rsb	r1, r4, ip
    4d46:	290f      	cmp	r1, #15
    4d48:	dd13      	ble.n	4d72 <_malloc_r+0x216>
    4d4a:	192b      	adds	r3, r5, r4
    4d4c:	f044 0401 	orr.w	r4, r4, #1
    4d50:	68ea      	ldr	r2, [r5, #12]
    4d52:	606c      	str	r4, [r5, #4]
    4d54:	f855 0f08 	ldr.w	r0, [r5, #8]!
    4d58:	5059      	str	r1, [r3, r1]
    4d5a:	60c2      	str	r2, [r0, #12]
    4d5c:	6090      	str	r0, [r2, #8]
    4d5e:	4a2b      	ldr	r2, [pc, #172]	; (4e0c <_malloc_r+0x2b0>)
    4d60:	f041 0001 	orr.w	r0, r1, #1
    4d64:	6153      	str	r3, [r2, #20]
    4d66:	6113      	str	r3, [r2, #16]
    4d68:	3208      	adds	r2, #8
    4d6a:	60da      	str	r2, [r3, #12]
    4d6c:	609a      	str	r2, [r3, #8]
    4d6e:	6058      	str	r0, [r3, #4]
    4d70:	e00c      	b.n	4d8c <_malloc_r+0x230>
    4d72:	2900      	cmp	r1, #0
    4d74:	db0e      	blt.n	4d94 <_malloc_r+0x238>
    4d76:	eb05 000c 	add.w	r0, r5, ip
    4d7a:	68e9      	ldr	r1, [r5, #12]
    4d7c:	6842      	ldr	r2, [r0, #4]
    4d7e:	f042 0301 	orr.w	r3, r2, #1
    4d82:	6043      	str	r3, [r0, #4]
    4d84:	f855 0f08 	ldr.w	r0, [r5, #8]!
    4d88:	60c1      	str	r1, [r0, #12]
    4d8a:	6088      	str	r0, [r1, #8]
    4d8c:	4630      	mov	r0, r6
    4d8e:	f000 f919 	bl	4fc4 <__malloc_unlock>
    4d92:	e0de      	b.n	4f52 <_malloc_r+0x3f6>
    4d94:	68ed      	ldr	r5, [r5, #12]
    4d96:	e7cf      	b.n	4d38 <_malloc_r+0x1dc>
    4d98:	3001      	adds	r0, #1
    4d9a:	0781      	lsls	r1, r0, #30
    4d9c:	f105 0708 	add.w	r7, r5, #8
    4da0:	d1c9      	bne.n	4d36 <_malloc_r+0x1da>
    4da2:	4671      	mov	r1, lr
    4da4:	0795      	lsls	r5, r2, #30
    4da6:	d105      	bne.n	4db4 <_malloc_r+0x258>
    4da8:	4a18      	ldr	r2, [pc, #96]	; (4e0c <_malloc_r+0x2b0>)
    4daa:	6855      	ldr	r5, [r2, #4]
    4dac:	ea25 0503 	bic.w	r5, r5, r3
    4db0:	6055      	str	r5, [r2, #4]
    4db2:	e005      	b.n	4dc0 <_malloc_r+0x264>
    4db4:	f1a1 0708 	sub.w	r7, r1, #8
    4db8:	6809      	ldr	r1, [r1, #0]
    4dba:	3a01      	subs	r2, #1
    4dbc:	42b9      	cmp	r1, r7
    4dbe:	d0f1      	beq.n	4da4 <_malloc_r+0x248>
    4dc0:	4f12      	ldr	r7, [pc, #72]	; (4e0c <_malloc_r+0x2b0>)
    4dc2:	687f      	ldr	r7, [r7, #4]
    4dc4:	005b      	lsls	r3, r3, #1
    4dc6:	42bb      	cmp	r3, r7
    4dc8:	d806      	bhi.n	4dd8 <_malloc_r+0x27c>
    4dca:	b12b      	cbz	r3, 4dd8 <_malloc_r+0x27c>
    4dcc:	4602      	mov	r2, r0
    4dce:	423b      	tst	r3, r7
    4dd0:	d1ac      	bne.n	4d2c <_malloc_r+0x1d0>
    4dd2:	3204      	adds	r2, #4
    4dd4:	005b      	lsls	r3, r3, #1
    4dd6:	e7fa      	b.n	4dce <_malloc_r+0x272>
    4dd8:	4b0c      	ldr	r3, [pc, #48]	; (4e0c <_malloc_r+0x2b0>)
    4dda:	689f      	ldr	r7, [r3, #8]
    4ddc:	6878      	ldr	r0, [r7, #4]
    4dde:	f020 0903 	bic.w	r9, r0, #3
    4de2:	45a1      	cmp	r9, r4
    4de4:	4619      	mov	r1, r3
    4de6:	d304      	bcc.n	4df2 <_malloc_r+0x296>
    4de8:	ebc4 0009 	rsb	r0, r4, r9
    4dec:	280f      	cmp	r0, #15
    4dee:	f300 80a2 	bgt.w	4f36 <_malloc_r+0x3da>
    4df2:	4a07      	ldr	r2, [pc, #28]	; (4e10 <_malloc_r+0x2b4>)
    4df4:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
    4df8:	6815      	ldr	r5, [r2, #0]
    4dfa:	3301      	adds	r3, #1
    4dfc:	eb07 0a09 	add.w	sl, r7, r9
    4e00:	eb04 0805 	add.w	r8, r4, r5
    4e04:	d106      	bne.n	4e14 <_malloc_r+0x2b8>
    4e06:	f108 0810 	add.w	r8, r8, #16
    4e0a:	e00b      	b.n	4e24 <_malloc_r+0x2c8>
    4e0c:	200004fc 	.word	0x200004fc
    4e10:	200009dc 	.word	0x200009dc
    4e14:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
    4e18:	f100 010f 	add.w	r1, r0, #15
    4e1c:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
    4e20:	f022 080f 	bic.w	r8, r2, #15
    4e24:	4630      	mov	r0, r6
    4e26:	4641      	mov	r1, r8
    4e28:	f000 fa3c 	bl	52a4 <_sbrk_r>
    4e2c:	1c42      	adds	r2, r0, #1
    4e2e:	4605      	mov	r5, r0
    4e30:	d071      	beq.n	4f16 <_malloc_r+0x3ba>
    4e32:	4550      	cmp	r0, sl
    4e34:	d202      	bcs.n	4e3c <_malloc_r+0x2e0>
    4e36:	4b48      	ldr	r3, [pc, #288]	; (4f58 <_malloc_r+0x3fc>)
    4e38:	429f      	cmp	r7, r3
    4e3a:	d16c      	bne.n	4f16 <_malloc_r+0x3ba>
    4e3c:	4847      	ldr	r0, [pc, #284]	; (4f5c <_malloc_r+0x400>)
    4e3e:	4a46      	ldr	r2, [pc, #280]	; (4f58 <_malloc_r+0x3fc>)
    4e40:	6841      	ldr	r1, [r0, #4]
    4e42:	4555      	cmp	r5, sl
    4e44:	eb08 0301 	add.w	r3, r8, r1
    4e48:	6043      	str	r3, [r0, #4]
    4e4a:	d107      	bne.n	4e5c <_malloc_r+0x300>
    4e4c:	0529      	lsls	r1, r5, #20
    4e4e:	d105      	bne.n	4e5c <_malloc_r+0x300>
    4e50:	6895      	ldr	r5, [r2, #8]
    4e52:	44c8      	add	r8, r9
    4e54:	f048 0001 	orr.w	r0, r8, #1
    4e58:	6068      	str	r0, [r5, #4]
    4e5a:	e051      	b.n	4f00 <_malloc_r+0x3a4>
    4e5c:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
    4e60:	1c42      	adds	r2, r0, #1
    4e62:	d103      	bne.n	4e6c <_malloc_r+0x310>
    4e64:	4a3c      	ldr	r2, [pc, #240]	; (4f58 <_malloc_r+0x3fc>)
    4e66:	f8c2 5408 	str.w	r5, [r2, #1032]	; 0x408
    4e6a:	e005      	b.n	4e78 <_malloc_r+0x31c>
    4e6c:	ebca 0a05 	rsb	sl, sl, r5
    4e70:	eb03 010a 	add.w	r1, r3, sl
    4e74:	4b39      	ldr	r3, [pc, #228]	; (4f5c <_malloc_r+0x400>)
    4e76:	6059      	str	r1, [r3, #4]
    4e78:	f015 0007 	ands.w	r0, r5, #7
    4e7c:	bf1c      	itt	ne
    4e7e:	f1c0 0008 	rsbne	r0, r0, #8
    4e82:	182d      	addne	r5, r5, r0
    4e84:	eb05 0c08 	add.w	ip, r5, r8
    4e88:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
    4e8c:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
    4e90:	eba1 581e 	sub.w	r8, r1, lr, lsr #20
    4e94:	4641      	mov	r1, r8
    4e96:	4630      	mov	r0, r6
    4e98:	f000 fa04 	bl	52a4 <_sbrk_r>
    4e9c:	4a2f      	ldr	r2, [pc, #188]	; (4f5c <_malloc_r+0x400>)
    4e9e:	1c43      	adds	r3, r0, #1
    4ea0:	6853      	ldr	r3, [r2, #4]
    4ea2:	bf08      	it	eq
    4ea4:	f04f 0800 	moveq.w	r8, #0
    4ea8:	eb08 0103 	add.w	r1, r8, r3
    4eac:	bf08      	it	eq
    4eae:	4628      	moveq	r0, r5
    4eb0:	6051      	str	r1, [r2, #4]
    4eb2:	1b40      	subs	r0, r0, r5
    4eb4:	4a28      	ldr	r2, [pc, #160]	; (4f58 <_malloc_r+0x3fc>)
    4eb6:	eb00 0308 	add.w	r3, r0, r8
    4eba:	f043 0101 	orr.w	r1, r3, #1
    4ebe:	4297      	cmp	r7, r2
    4ec0:	6095      	str	r5, [r2, #8]
    4ec2:	6069      	str	r1, [r5, #4]
    4ec4:	d01c      	beq.n	4f00 <_malloc_r+0x3a4>
    4ec6:	f1b9 0f0f 	cmp.w	r9, #15
    4eca:	d802      	bhi.n	4ed2 <_malloc_r+0x376>
    4ecc:	2201      	movs	r2, #1
    4ece:	606a      	str	r2, [r5, #4]
    4ed0:	e021      	b.n	4f16 <_malloc_r+0x3ba>
    4ed2:	687d      	ldr	r5, [r7, #4]
    4ed4:	f1a9 090c 	sub.w	r9, r9, #12
    4ed8:	f029 0907 	bic.w	r9, r9, #7
    4edc:	eb07 0309 	add.w	r3, r7, r9
    4ee0:	f005 0201 	and.w	r2, r5, #1
    4ee4:	2105      	movs	r1, #5
    4ee6:	ea49 0002 	orr.w	r0, r9, r2
    4eea:	f1b9 0f0f 	cmp.w	r9, #15
    4eee:	6078      	str	r0, [r7, #4]
    4ef0:	6059      	str	r1, [r3, #4]
    4ef2:	6099      	str	r1, [r3, #8]
    4ef4:	d904      	bls.n	4f00 <_malloc_r+0x3a4>
    4ef6:	4630      	mov	r0, r6
    4ef8:	f107 0108 	add.w	r1, r7, #8
    4efc:	f7ff fb1a 	bl	4534 <_free_r>
    4f00:	4a16      	ldr	r2, [pc, #88]	; (4f5c <_malloc_r+0x400>)
    4f02:	6853      	ldr	r3, [r2, #4]
    4f04:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    4f06:	6b15      	ldr	r5, [r2, #48]	; 0x30
    4f08:	428b      	cmp	r3, r1
    4f0a:	bf88      	it	hi
    4f0c:	62d3      	strhi	r3, [r2, #44]	; 0x2c
    4f0e:	42ab      	cmp	r3, r5
    4f10:	bf84      	itt	hi
    4f12:	4d12      	ldrhi	r5, [pc, #72]	; (4f5c <_malloc_r+0x400>)
    4f14:	632b      	strhi	r3, [r5, #48]	; 0x30
    4f16:	4810      	ldr	r0, [pc, #64]	; (4f58 <_malloc_r+0x3fc>)
    4f18:	6882      	ldr	r2, [r0, #8]
    4f1a:	6853      	ldr	r3, [r2, #4]
    4f1c:	f023 0103 	bic.w	r1, r3, #3
    4f20:	42a1      	cmp	r1, r4
    4f22:	ebc4 0001 	rsb	r0, r4, r1
    4f26:	d301      	bcc.n	4f2c <_malloc_r+0x3d0>
    4f28:	280f      	cmp	r0, #15
    4f2a:	dc04      	bgt.n	4f36 <_malloc_r+0x3da>
    4f2c:	4630      	mov	r0, r6
    4f2e:	f000 f849 	bl	4fc4 <__malloc_unlock>
    4f32:	2500      	movs	r5, #0
    4f34:	e00d      	b.n	4f52 <_malloc_r+0x3f6>
    4f36:	4a08      	ldr	r2, [pc, #32]	; (4f58 <_malloc_r+0x3fc>)
    4f38:	6895      	ldr	r5, [r2, #8]
    4f3a:	f044 0301 	orr.w	r3, r4, #1
    4f3e:	192c      	adds	r4, r5, r4
    4f40:	f040 0101 	orr.w	r1, r0, #1
    4f44:	606b      	str	r3, [r5, #4]
    4f46:	6094      	str	r4, [r2, #8]
    4f48:	6061      	str	r1, [r4, #4]
    4f4a:	4630      	mov	r0, r6
    4f4c:	f000 f83a 	bl	4fc4 <__malloc_unlock>
    4f50:	3508      	adds	r5, #8
    4f52:	4628      	mov	r0, r5
    4f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4f58:	200004fc 	.word	0x200004fc
    4f5c:	200009dc 	.word	0x200009dc

00004f60 <memchr>:
    4f60:	b510      	push	{r4, lr}
    4f62:	b2c9      	uxtb	r1, r1
    4f64:	4603      	mov	r3, r0
    4f66:	1882      	adds	r2, r0, r2
    4f68:	4293      	cmp	r3, r2
    4f6a:	4618      	mov	r0, r3
    4f6c:	d004      	beq.n	4f78 <memchr+0x18>
    4f6e:	7804      	ldrb	r4, [r0, #0]
    4f70:	3301      	adds	r3, #1
    4f72:	428c      	cmp	r4, r1
    4f74:	d1f8      	bne.n	4f68 <memchr+0x8>
    4f76:	e000      	b.n	4f7a <memchr+0x1a>
    4f78:	2000      	movs	r0, #0
    4f7a:	bd10      	pop	{r4, pc}

00004f7c <memcpy>:
    4f7c:	b510      	push	{r4, lr}
    4f7e:	2300      	movs	r3, #0
    4f80:	4293      	cmp	r3, r2
    4f82:	d003      	beq.n	4f8c <memcpy+0x10>
    4f84:	5ccc      	ldrb	r4, [r1, r3]
    4f86:	54c4      	strb	r4, [r0, r3]
    4f88:	3301      	adds	r3, #1
    4f8a:	e7f9      	b.n	4f80 <memcpy+0x4>
    4f8c:	bd10      	pop	{r4, pc}

00004f8e <memmove>:
    4f8e:	4281      	cmp	r1, r0
    4f90:	b570      	push	{r4, r5, r6, lr}
    4f92:	d20e      	bcs.n	4fb2 <memmove+0x24>
    4f94:	188c      	adds	r4, r1, r2
    4f96:	42a0      	cmp	r0, r4
    4f98:	d20b      	bcs.n	4fb2 <memmove+0x24>
    4f9a:	1885      	adds	r5, r0, r2
    4f9c:	4613      	mov	r3, r2
    4f9e:	f113 33ff 	adds.w	r3, r3, #4294967295
    4fa2:	d305      	bcc.n	4fb0 <memmove+0x22>
    4fa4:	4251      	negs	r1, r2
    4fa6:	1866      	adds	r6, r4, r1
    4fa8:	1869      	adds	r1, r5, r1
    4faa:	5cf6      	ldrb	r6, [r6, r3]
    4fac:	54ce      	strb	r6, [r1, r3]
    4fae:	e7f6      	b.n	4f9e <memmove+0x10>
    4fb0:	bd70      	pop	{r4, r5, r6, pc}
    4fb2:	2300      	movs	r3, #0
    4fb4:	4293      	cmp	r3, r2
    4fb6:	d003      	beq.n	4fc0 <memmove+0x32>
    4fb8:	5ccc      	ldrb	r4, [r1, r3]
    4fba:	54c4      	strb	r4, [r0, r3]
    4fbc:	3301      	adds	r3, #1
    4fbe:	e7f9      	b.n	4fb4 <memmove+0x26>
    4fc0:	bd70      	pop	{r4, r5, r6, pc}

00004fc2 <__malloc_lock>:
    4fc2:	4770      	bx	lr

00004fc4 <__malloc_unlock>:
    4fc4:	4770      	bx	lr
	...

00004fc8 <_realloc_r>:
    4fc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4fcc:	4681      	mov	r9, r0
    4fce:	4616      	mov	r6, r2
    4fd0:	460c      	mov	r4, r1
    4fd2:	b921      	cbnz	r1, 4fde <_realloc_r+0x16>
    4fd4:	4611      	mov	r1, r2
    4fd6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4fda:	f7ff bdbf 	b.w	4b5c <_malloc_r>
    4fde:	f7ff fff0 	bl	4fc2 <__malloc_lock>
    4fe2:	f106 070b 	add.w	r7, r6, #11
    4fe6:	f854 5c04 	ldr.w	r5, [r4, #-4]
    4fea:	2f16      	cmp	r7, #22
    4fec:	f1a4 0b08 	sub.w	fp, r4, #8
    4ff0:	f025 0803 	bic.w	r8, r5, #3
    4ff4:	d903      	bls.n	4ffe <_realloc_r+0x36>
    4ff6:	f037 0707 	bics.w	r7, r7, #7
    4ffa:	d501      	bpl.n	5000 <_realloc_r+0x38>
    4ffc:	e002      	b.n	5004 <_realloc_r+0x3c>
    4ffe:	2710      	movs	r7, #16
    5000:	42b7      	cmp	r7, r6
    5002:	d204      	bcs.n	500e <_realloc_r+0x46>
    5004:	200c      	movs	r0, #12
    5006:	f8c9 0000 	str.w	r0, [r9]
    500a:	2600      	movs	r6, #0
    500c:	e145      	b.n	529a <_realloc_r+0x2d2>
    500e:	45b8      	cmp	r8, r7
    5010:	f280 811a 	bge.w	5248 <_realloc_r+0x280>
    5014:	4aa2      	ldr	r2, [pc, #648]	; (52a0 <_realloc_r+0x2d8>)
    5016:	6891      	ldr	r1, [r2, #8]
    5018:	eb0b 0308 	add.w	r3, fp, r8
    501c:	428b      	cmp	r3, r1
    501e:	d006      	beq.n	502e <_realloc_r+0x66>
    5020:	6858      	ldr	r0, [r3, #4]
    5022:	f020 0201 	bic.w	r2, r0, #1
    5026:	1898      	adds	r0, r3, r2
    5028:	6842      	ldr	r2, [r0, #4]
    502a:	07d0      	lsls	r0, r2, #31
    502c:	d426      	bmi.n	507c <_realloc_r+0xb4>
    502e:	685a      	ldr	r2, [r3, #4]
    5030:	428b      	cmp	r3, r1
    5032:	f022 0003 	bic.w	r0, r2, #3
    5036:	eb00 0a08 	add.w	sl, r0, r8
    503a:	d118      	bne.n	506e <_realloc_r+0xa6>
    503c:	f107 0210 	add.w	r2, r7, #16
    5040:	4592      	cmp	sl, r2
    5042:	db1d      	blt.n	5080 <_realloc_r+0xb8>
    5044:	eb0b 0507 	add.w	r5, fp, r7
    5048:	ebc7 0a0a 	rsb	sl, r7, sl
    504c:	f04a 0101 	orr.w	r1, sl, #1
    5050:	6069      	str	r1, [r5, #4]
    5052:	f854 2c04 	ldr.w	r2, [r4, #-4]
    5056:	4e92      	ldr	r6, [pc, #584]	; (52a0 <_realloc_r+0x2d8>)
    5058:	f002 0301 	and.w	r3, r2, #1
    505c:	431f      	orrs	r7, r3
    505e:	60b5      	str	r5, [r6, #8]
    5060:	f844 7c04 	str.w	r7, [r4, #-4]
    5064:	4648      	mov	r0, r9
    5066:	f7ff ffad 	bl	4fc4 <__malloc_unlock>
    506a:	4626      	mov	r6, r4
    506c:	e115      	b.n	529a <_realloc_r+0x2d2>
    506e:	45ba      	cmp	sl, r7
    5070:	db06      	blt.n	5080 <_realloc_r+0xb8>
    5072:	68dd      	ldr	r5, [r3, #12]
    5074:	689e      	ldr	r6, [r3, #8]
    5076:	60f5      	str	r5, [r6, #12]
    5078:	60ae      	str	r6, [r5, #8]
    507a:	e0e6      	b.n	524a <_realloc_r+0x282>
    507c:	2000      	movs	r0, #0
    507e:	4603      	mov	r3, r0
    5080:	07ea      	lsls	r2, r5, #31
    5082:	f100 8091 	bmi.w	51a8 <_realloc_r+0x1e0>
    5086:	f854 5c08 	ldr.w	r5, [r4, #-8]
    508a:	ebc5 050b 	rsb	r5, r5, fp
    508e:	686a      	ldr	r2, [r5, #4]
    5090:	f022 0203 	bic.w	r2, r2, #3
    5094:	2b00      	cmp	r3, #0
    5096:	d051      	beq.n	513c <_realloc_r+0x174>
    5098:	eb02 0a08 	add.w	sl, r2, r8
    509c:	428b      	cmp	r3, r1
    509e:	4482      	add	sl, r0
    50a0:	d145      	bne.n	512e <_realloc_r+0x166>
    50a2:	f107 0310 	add.w	r3, r7, #16
    50a6:	459a      	cmp	sl, r3
    50a8:	db48      	blt.n	513c <_realloc_r+0x174>
    50aa:	462e      	mov	r6, r5
    50ac:	68e9      	ldr	r1, [r5, #12]
    50ae:	f856 3f08 	ldr.w	r3, [r6, #8]!
    50b2:	f1a8 0204 	sub.w	r2, r8, #4
    50b6:	2a24      	cmp	r2, #36	; 0x24
    50b8:	60d9      	str	r1, [r3, #12]
    50ba:	608b      	str	r3, [r1, #8]
    50bc:	d825      	bhi.n	510a <_realloc_r+0x142>
    50be:	2a13      	cmp	r2, #19
    50c0:	d91b      	bls.n	50fa <_realloc_r+0x132>
    50c2:	6821      	ldr	r1, [r4, #0]
    50c4:	60a9      	str	r1, [r5, #8]
    50c6:	6863      	ldr	r3, [r4, #4]
    50c8:	2a1b      	cmp	r2, #27
    50ca:	60eb      	str	r3, [r5, #12]
    50cc:	d803      	bhi.n	50d6 <_realloc_r+0x10e>
    50ce:	f105 0010 	add.w	r0, r5, #16
    50d2:	3408      	adds	r4, #8
    50d4:	e012      	b.n	50fc <_realloc_r+0x134>
    50d6:	68a0      	ldr	r0, [r4, #8]
    50d8:	6128      	str	r0, [r5, #16]
    50da:	68e1      	ldr	r1, [r4, #12]
    50dc:	2a24      	cmp	r2, #36	; 0x24
    50de:	6169      	str	r1, [r5, #20]
    50e0:	d003      	beq.n	50ea <_realloc_r+0x122>
    50e2:	f105 0018 	add.w	r0, r5, #24
    50e6:	3410      	adds	r4, #16
    50e8:	e008      	b.n	50fc <_realloc_r+0x134>
    50ea:	6922      	ldr	r2, [r4, #16]
    50ec:	61aa      	str	r2, [r5, #24]
    50ee:	6963      	ldr	r3, [r4, #20]
    50f0:	f105 0020 	add.w	r0, r5, #32
    50f4:	61eb      	str	r3, [r5, #28]
    50f6:	3418      	adds	r4, #24
    50f8:	e000      	b.n	50fc <_realloc_r+0x134>
    50fa:	4630      	mov	r0, r6
    50fc:	6821      	ldr	r1, [r4, #0]
    50fe:	6001      	str	r1, [r0, #0]
    5100:	6862      	ldr	r2, [r4, #4]
    5102:	6042      	str	r2, [r0, #4]
    5104:	68a3      	ldr	r3, [r4, #8]
    5106:	6083      	str	r3, [r0, #8]
    5108:	e003      	b.n	5112 <_realloc_r+0x14a>
    510a:	4630      	mov	r0, r6
    510c:	4621      	mov	r1, r4
    510e:	f7ff ff3e 	bl	4f8e <memmove>
    5112:	19e8      	adds	r0, r5, r7
    5114:	ebc7 0a0a 	rsb	sl, r7, sl
    5118:	f04a 0201 	orr.w	r2, sl, #1
    511c:	6042      	str	r2, [r0, #4]
    511e:	686b      	ldr	r3, [r5, #4]
    5120:	495f      	ldr	r1, [pc, #380]	; (52a0 <_realloc_r+0x2d8>)
    5122:	6088      	str	r0, [r1, #8]
    5124:	f003 0001 	and.w	r0, r3, #1
    5128:	4307      	orrs	r7, r0
    512a:	606f      	str	r7, [r5, #4]
    512c:	e088      	b.n	5240 <_realloc_r+0x278>
    512e:	45ba      	cmp	sl, r7
    5130:	db04      	blt.n	513c <_realloc_r+0x174>
    5132:	68d9      	ldr	r1, [r3, #12]
    5134:	6898      	ldr	r0, [r3, #8]
    5136:	60c1      	str	r1, [r0, #12]
    5138:	6088      	str	r0, [r1, #8]
    513a:	e003      	b.n	5144 <_realloc_r+0x17c>
    513c:	eb02 0a08 	add.w	sl, r2, r8
    5140:	45ba      	cmp	sl, r7
    5142:	db31      	blt.n	51a8 <_realloc_r+0x1e0>
    5144:	4628      	mov	r0, r5
    5146:	68eb      	ldr	r3, [r5, #12]
    5148:	f850 1f08 	ldr.w	r1, [r0, #8]!
    514c:	f1a8 0204 	sub.w	r2, r8, #4
    5150:	2a24      	cmp	r2, #36	; 0x24
    5152:	60cb      	str	r3, [r1, #12]
    5154:	6099      	str	r1, [r3, #8]
    5156:	d823      	bhi.n	51a0 <_realloc_r+0x1d8>
    5158:	2a13      	cmp	r2, #19
    515a:	d91a      	bls.n	5192 <_realloc_r+0x1ca>
    515c:	6820      	ldr	r0, [r4, #0]
    515e:	60a8      	str	r0, [r5, #8]
    5160:	6866      	ldr	r6, [r4, #4]
    5162:	2a1b      	cmp	r2, #27
    5164:	60ee      	str	r6, [r5, #12]
    5166:	d803      	bhi.n	5170 <_realloc_r+0x1a8>
    5168:	f105 0010 	add.w	r0, r5, #16
    516c:	3408      	adds	r4, #8
    516e:	e010      	b.n	5192 <_realloc_r+0x1ca>
    5170:	68a3      	ldr	r3, [r4, #8]
    5172:	612b      	str	r3, [r5, #16]
    5174:	68e1      	ldr	r1, [r4, #12]
    5176:	2a24      	cmp	r2, #36	; 0x24
    5178:	6169      	str	r1, [r5, #20]
    517a:	d003      	beq.n	5184 <_realloc_r+0x1bc>
    517c:	f105 0018 	add.w	r0, r5, #24
    5180:	3410      	adds	r4, #16
    5182:	e006      	b.n	5192 <_realloc_r+0x1ca>
    5184:	6922      	ldr	r2, [r4, #16]
    5186:	61aa      	str	r2, [r5, #24]
    5188:	6960      	ldr	r0, [r4, #20]
    518a:	3418      	adds	r4, #24
    518c:	61e8      	str	r0, [r5, #28]
    518e:	f105 0020 	add.w	r0, r5, #32
    5192:	6826      	ldr	r6, [r4, #0]
    5194:	6006      	str	r6, [r0, #0]
    5196:	6863      	ldr	r3, [r4, #4]
    5198:	6043      	str	r3, [r0, #4]
    519a:	68a1      	ldr	r1, [r4, #8]
    519c:	6081      	str	r1, [r0, #8]
    519e:	e055      	b.n	524c <_realloc_r+0x284>
    51a0:	4621      	mov	r1, r4
    51a2:	f7ff fef4 	bl	4f8e <memmove>
    51a6:	e051      	b.n	524c <_realloc_r+0x284>
    51a8:	4631      	mov	r1, r6
    51aa:	4648      	mov	r0, r9
    51ac:	f7ff fcd6 	bl	4b5c <_malloc_r>
    51b0:	4606      	mov	r6, r0
    51b2:	2800      	cmp	r0, #0
    51b4:	d044      	beq.n	5240 <_realloc_r+0x278>
    51b6:	f854 1c04 	ldr.w	r1, [r4, #-4]
    51ba:	f021 0301 	bic.w	r3, r1, #1
    51be:	f1a0 0208 	sub.w	r2, r0, #8
    51c2:	eb0b 0103 	add.w	r1, fp, r3
    51c6:	428a      	cmp	r2, r1
    51c8:	d106      	bne.n	51d8 <_realloc_r+0x210>
    51ca:	f850 6c04 	ldr.w	r6, [r0, #-4]
    51ce:	f026 0503 	bic.w	r5, r6, #3
    51d2:	eb05 0a08 	add.w	sl, r5, r8
    51d6:	e038      	b.n	524a <_realloc_r+0x282>
    51d8:	f1a8 0204 	sub.w	r2, r8, #4
    51dc:	2a24      	cmp	r2, #36	; 0x24
    51de:	d828      	bhi.n	5232 <_realloc_r+0x26a>
    51e0:	2a13      	cmp	r2, #19
    51e2:	d91e      	bls.n	5222 <_realloc_r+0x25a>
    51e4:	6823      	ldr	r3, [r4, #0]
    51e6:	6003      	str	r3, [r0, #0]
    51e8:	6861      	ldr	r1, [r4, #4]
    51ea:	2a1b      	cmp	r2, #27
    51ec:	6041      	str	r1, [r0, #4]
    51ee:	d804      	bhi.n	51fa <_realloc_r+0x232>
    51f0:	f100 0008 	add.w	r0, r0, #8
    51f4:	f104 0208 	add.w	r2, r4, #8
    51f8:	e014      	b.n	5224 <_realloc_r+0x25c>
    51fa:	68a0      	ldr	r0, [r4, #8]
    51fc:	60b0      	str	r0, [r6, #8]
    51fe:	68e3      	ldr	r3, [r4, #12]
    5200:	2a24      	cmp	r2, #36	; 0x24
    5202:	60f3      	str	r3, [r6, #12]
    5204:	d004      	beq.n	5210 <_realloc_r+0x248>
    5206:	f106 0010 	add.w	r0, r6, #16
    520a:	f104 0210 	add.w	r2, r4, #16
    520e:	e009      	b.n	5224 <_realloc_r+0x25c>
    5210:	6922      	ldr	r2, [r4, #16]
    5212:	6132      	str	r2, [r6, #16]
    5214:	6961      	ldr	r1, [r4, #20]
    5216:	f106 0018 	add.w	r0, r6, #24
    521a:	6171      	str	r1, [r6, #20]
    521c:	f104 0218 	add.w	r2, r4, #24
    5220:	e000      	b.n	5224 <_realloc_r+0x25c>
    5222:	4622      	mov	r2, r4
    5224:	6813      	ldr	r3, [r2, #0]
    5226:	6003      	str	r3, [r0, #0]
    5228:	6851      	ldr	r1, [r2, #4]
    522a:	6041      	str	r1, [r0, #4]
    522c:	6892      	ldr	r2, [r2, #8]
    522e:	6082      	str	r2, [r0, #8]
    5230:	e002      	b.n	5238 <_realloc_r+0x270>
    5232:	4621      	mov	r1, r4
    5234:	f7ff feab 	bl	4f8e <memmove>
    5238:	4648      	mov	r0, r9
    523a:	4621      	mov	r1, r4
    523c:	f7ff f97a 	bl	4534 <_free_r>
    5240:	4648      	mov	r0, r9
    5242:	f7ff febf 	bl	4fc4 <__malloc_unlock>
    5246:	e028      	b.n	529a <_realloc_r+0x2d2>
    5248:	46c2      	mov	sl, r8
    524a:	465d      	mov	r5, fp
    524c:	ebc7 000a 	rsb	r0, r7, sl
    5250:	280f      	cmp	r0, #15
    5252:	686a      	ldr	r2, [r5, #4]
    5254:	d911      	bls.n	527a <_realloc_r+0x2b2>
    5256:	19e9      	adds	r1, r5, r7
    5258:	f002 0601 	and.w	r6, r2, #1
    525c:	4337      	orrs	r7, r6
    525e:	f040 0301 	orr.w	r3, r0, #1
    5262:	1808      	adds	r0, r1, r0
    5264:	606f      	str	r7, [r5, #4]
    5266:	604b      	str	r3, [r1, #4]
    5268:	6842      	ldr	r2, [r0, #4]
    526a:	f042 0601 	orr.w	r6, r2, #1
    526e:	6046      	str	r6, [r0, #4]
    5270:	3108      	adds	r1, #8
    5272:	4648      	mov	r0, r9
    5274:	f7ff f95e 	bl	4534 <_free_r>
    5278:	e00a      	b.n	5290 <_realloc_r+0x2c8>
    527a:	f002 0601 	and.w	r6, r2, #1
    527e:	eb05 010a 	add.w	r1, r5, sl
    5282:	ea4a 0306 	orr.w	r3, sl, r6
    5286:	606b      	str	r3, [r5, #4]
    5288:	6848      	ldr	r0, [r1, #4]
    528a:	f040 0201 	orr.w	r2, r0, #1
    528e:	604a      	str	r2, [r1, #4]
    5290:	4648      	mov	r0, r9
    5292:	f7ff fe97 	bl	4fc4 <__malloc_unlock>
    5296:	f105 0608 	add.w	r6, r5, #8
    529a:	4630      	mov	r0, r6
    529c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    52a0:	200004fc 	.word	0x200004fc

000052a4 <_sbrk_r>:
    52a4:	b538      	push	{r3, r4, r5, lr}
    52a6:	4c06      	ldr	r4, [pc, #24]	; (52c0 <_sbrk_r+0x1c>)
    52a8:	2300      	movs	r3, #0
    52aa:	4605      	mov	r5, r0
    52ac:	4608      	mov	r0, r1
    52ae:	6023      	str	r3, [r4, #0]
    52b0:	f7fe f87a 	bl	33a8 <_sbrk>
    52b4:	1c43      	adds	r3, r0, #1
    52b6:	d102      	bne.n	52be <_sbrk_r+0x1a>
    52b8:	6821      	ldr	r1, [r4, #0]
    52ba:	b101      	cbz	r1, 52be <_sbrk_r+0x1a>
    52bc:	6029      	str	r1, [r5, #0]
    52be:	bd38      	pop	{r3, r4, r5, pc}
    52c0:	20000aa4 	.word	0x20000aa4

000052c4 <__sread>:
    52c4:	b510      	push	{r4, lr}
    52c6:	460c      	mov	r4, r1
    52c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    52cc:	f000 f99c 	bl	5608 <_read_r>
    52d0:	2800      	cmp	r0, #0
    52d2:	db03      	blt.n	52dc <__sread+0x18>
    52d4:	6d22      	ldr	r2, [r4, #80]	; 0x50
    52d6:	1813      	adds	r3, r2, r0
    52d8:	6523      	str	r3, [r4, #80]	; 0x50
    52da:	bd10      	pop	{r4, pc}
    52dc:	89a3      	ldrh	r3, [r4, #12]
    52de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
    52e2:	81a1      	strh	r1, [r4, #12]
    52e4:	bd10      	pop	{r4, pc}

000052e6 <__seofread>:
    52e6:	2000      	movs	r0, #0
    52e8:	4770      	bx	lr

000052ea <__swrite>:
    52ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    52ee:	461d      	mov	r5, r3
    52f0:	898b      	ldrh	r3, [r1, #12]
    52f2:	460c      	mov	r4, r1
    52f4:	f403 7180 	and.w	r1, r3, #256	; 0x100
    52f8:	4616      	mov	r6, r2
    52fa:	b20a      	sxth	r2, r1
    52fc:	4607      	mov	r7, r0
    52fe:	b12a      	cbz	r2, 530c <__swrite+0x22>
    5300:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    5304:	2200      	movs	r2, #0
    5306:	2302      	movs	r3, #2
    5308:	f000 f96c 	bl	55e4 <_lseek_r>
    530c:	89a0      	ldrh	r0, [r4, #12]
    530e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    5312:	f420 5380 	bic.w	r3, r0, #4096	; 0x1000
    5316:	81a3      	strh	r3, [r4, #12]
    5318:	4638      	mov	r0, r7
    531a:	4632      	mov	r2, r6
    531c:	462b      	mov	r3, r5
    531e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5322:	f000 b8d1 	b.w	54c8 <_write_r>

00005326 <__sseek>:
    5326:	b510      	push	{r4, lr}
    5328:	460c      	mov	r4, r1
    532a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    532e:	f000 f959 	bl	55e4 <_lseek_r>
    5332:	1c43      	adds	r3, r0, #1
    5334:	89a3      	ldrh	r3, [r4, #12]
    5336:	d103      	bne.n	5340 <__sseek+0x1a>
    5338:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    533c:	81a2      	strh	r2, [r4, #12]
    533e:	bd10      	pop	{r4, pc}
    5340:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
    5344:	81a1      	strh	r1, [r4, #12]
    5346:	6520      	str	r0, [r4, #80]	; 0x50
    5348:	bd10      	pop	{r4, pc}

0000534a <__sclose>:
    534a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    534e:	f000 b8cd 	b.w	54ec <_close_r>

00005352 <strcmp>:
    5352:	f810 2b01 	ldrb.w	r2, [r0], #1
    5356:	f811 3b01 	ldrb.w	r3, [r1], #1
    535a:	2a01      	cmp	r2, #1
    535c:	bf28      	it	cs
    535e:	429a      	cmpcs	r2, r3
    5360:	d0f7      	beq.n	5352 <strcmp>
    5362:	eba2 0003 	sub.w	r0, r2, r3
    5366:	4770      	bx	lr

00005368 <__swbuf_r>:
    5368:	b570      	push	{r4, r5, r6, lr}
    536a:	460d      	mov	r5, r1
    536c:	4614      	mov	r4, r2
    536e:	4606      	mov	r6, r0
    5370:	b118      	cbz	r0, 537a <__swbuf_r+0x12>
    5372:	6b83      	ldr	r3, [r0, #56]	; 0x38
    5374:	b90b      	cbnz	r3, 537a <__swbuf_r+0x12>
    5376:	f7fe ff9f 	bl	42b8 <__sinit>
    537a:	89a1      	ldrh	r1, [r4, #12]
    537c:	69a0      	ldr	r0, [r4, #24]
    537e:	f001 0208 	and.w	r2, r1, #8
    5382:	b213      	sxth	r3, r2
    5384:	60a0      	str	r0, [r4, #8]
    5386:	b10b      	cbz	r3, 538c <__swbuf_r+0x24>
    5388:	6920      	ldr	r0, [r4, #16]
    538a:	b958      	cbnz	r0, 53a4 <__swbuf_r+0x3c>
    538c:	4630      	mov	r0, r6
    538e:	4621      	mov	r1, r4
    5390:	f7fe fe32 	bl	3ff8 <__swsetup_r>
    5394:	b130      	cbz	r0, 53a4 <__swbuf_r+0x3c>
    5396:	89a5      	ldrh	r5, [r4, #12]
    5398:	2009      	movs	r0, #9
    539a:	f045 0140 	orr.w	r1, r5, #64	; 0x40
    539e:	81a1      	strh	r1, [r4, #12]
    53a0:	6030      	str	r0, [r6, #0]
    53a2:	e017      	b.n	53d4 <__swbuf_r+0x6c>
    53a4:	89a1      	ldrh	r1, [r4, #12]
    53a6:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
    53aa:	b213      	sxth	r3, r2
    53ac:	b2ed      	uxtb	r5, r5
    53ae:	b933      	cbnz	r3, 53be <__swbuf_r+0x56>
    53b0:	f441 5000 	orr.w	r0, r1, #8192	; 0x2000
    53b4:	6e61      	ldr	r1, [r4, #100]	; 0x64
    53b6:	81a0      	strh	r0, [r4, #12]
    53b8:	f421 5200 	bic.w	r2, r1, #8192	; 0x2000
    53bc:	6662      	str	r2, [r4, #100]	; 0x64
    53be:	6820      	ldr	r0, [r4, #0]
    53c0:	6923      	ldr	r3, [r4, #16]
    53c2:	6961      	ldr	r1, [r4, #20]
    53c4:	1ac0      	subs	r0, r0, r3
    53c6:	4288      	cmp	r0, r1
    53c8:	db07      	blt.n	53da <__swbuf_r+0x72>
    53ca:	4630      	mov	r0, r6
    53cc:	4621      	mov	r1, r4
    53ce:	f7fe fe7f 	bl	40d0 <_fflush_r>
    53d2:	b110      	cbz	r0, 53da <__swbuf_r+0x72>
    53d4:	f04f 35ff 	mov.w	r5, #4294967295
    53d8:	e015      	b.n	5406 <__swbuf_r+0x9e>
    53da:	68a2      	ldr	r2, [r4, #8]
    53dc:	6821      	ldr	r1, [r4, #0]
    53de:	1e53      	subs	r3, r2, #1
    53e0:	60a3      	str	r3, [r4, #8]
    53e2:	f801 5b01 	strb.w	r5, [r1], #1
    53e6:	6962      	ldr	r2, [r4, #20]
    53e8:	6021      	str	r1, [r4, #0]
    53ea:	3001      	adds	r0, #1
    53ec:	4290      	cmp	r0, r2
    53ee:	d004      	beq.n	53fa <__swbuf_r+0x92>
    53f0:	89a3      	ldrh	r3, [r4, #12]
    53f2:	07db      	lsls	r3, r3, #31
    53f4:	d507      	bpl.n	5406 <__swbuf_r+0x9e>
    53f6:	2d0a      	cmp	r5, #10
    53f8:	d105      	bne.n	5406 <__swbuf_r+0x9e>
    53fa:	4630      	mov	r0, r6
    53fc:	4621      	mov	r1, r4
    53fe:	f7fe fe67 	bl	40d0 <_fflush_r>
    5402:	2800      	cmp	r0, #0
    5404:	d1e6      	bne.n	53d4 <__swbuf_r+0x6c>
    5406:	4628      	mov	r0, r5
    5408:	bd70      	pop	{r4, r5, r6, pc}

0000540a <__swbuf>:
    540a:	460a      	mov	r2, r1
    540c:	4902      	ldr	r1, [pc, #8]	; (5418 <__swbuf+0xe>)
    540e:	4603      	mov	r3, r0
    5410:	6808      	ldr	r0, [r1, #0]
    5412:	4619      	mov	r1, r3
    5414:	f7ff bfa8 	b.w	5368 <__swbuf_r>
    5418:	20000050 	.word	0x20000050

0000541c <_wcrtomb_r>:
    541c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5420:	461d      	mov	r5, r3
    5422:	4b10      	ldr	r3, [pc, #64]	; (5464 <_wcrtomb_r+0x48>)
    5424:	b086      	sub	sp, #24
    5426:	4604      	mov	r4, r0
    5428:	4690      	mov	r8, r2
    542a:	460e      	mov	r6, r1
    542c:	681f      	ldr	r7, [r3, #0]
    542e:	b939      	cbnz	r1, 5440 <_wcrtomb_r+0x24>
    5430:	f7ff faf6 	bl	4a20 <__locale_charset>
    5434:	9500      	str	r5, [sp, #0]
    5436:	4603      	mov	r3, r0
    5438:	a903      	add	r1, sp, #12
    543a:	4620      	mov	r0, r4
    543c:	4632      	mov	r2, r6
    543e:	e006      	b.n	544e <_wcrtomb_r+0x32>
    5440:	f7ff faee 	bl	4a20 <__locale_charset>
    5444:	9500      	str	r5, [sp, #0]
    5446:	4603      	mov	r3, r0
    5448:	4631      	mov	r1, r6
    544a:	4620      	mov	r0, r4
    544c:	4642      	mov	r2, r8
    544e:	47b8      	blx	r7
    5450:	1c43      	adds	r3, r0, #1
    5452:	d103      	bne.n	545c <_wcrtomb_r+0x40>
    5454:	2100      	movs	r1, #0
    5456:	228a      	movs	r2, #138	; 0x8a
    5458:	6029      	str	r1, [r5, #0]
    545a:	6022      	str	r2, [r4, #0]
    545c:	b006      	add	sp, #24
    545e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5462:	bf00      	nop
    5464:	2000090c 	.word	0x2000090c

00005468 <wcrtomb>:
    5468:	b530      	push	{r4, r5, lr}
    546a:	4613      	mov	r3, r2
    546c:	4a04      	ldr	r2, [pc, #16]	; (5480 <wcrtomb+0x18>)
    546e:	4605      	mov	r5, r0
    5470:	460c      	mov	r4, r1
    5472:	6810      	ldr	r0, [r2, #0]
    5474:	4629      	mov	r1, r5
    5476:	4622      	mov	r2, r4
    5478:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    547c:	f7ff bfce 	b.w	541c <_wcrtomb_r>
    5480:	20000050 	.word	0x20000050

00005484 <__ascii_wctomb>:
    5484:	b149      	cbz	r1, 549a <__ascii_wctomb+0x16>
    5486:	2aff      	cmp	r2, #255	; 0xff
    5488:	d904      	bls.n	5494 <__ascii_wctomb+0x10>
    548a:	238a      	movs	r3, #138	; 0x8a
    548c:	6003      	str	r3, [r0, #0]
    548e:	f04f 30ff 	mov.w	r0, #4294967295
    5492:	4770      	bx	lr
    5494:	700a      	strb	r2, [r1, #0]
    5496:	2001      	movs	r0, #1
    5498:	4770      	bx	lr
    549a:	4608      	mov	r0, r1
    549c:	4770      	bx	lr

0000549e <_wctomb_r>:
    549e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    54a2:	4698      	mov	r8, r3
    54a4:	4b07      	ldr	r3, [pc, #28]	; (54c4 <_wctomb_r+0x26>)
    54a6:	4605      	mov	r5, r0
    54a8:	460f      	mov	r7, r1
    54aa:	4616      	mov	r6, r2
    54ac:	681c      	ldr	r4, [r3, #0]
    54ae:	f7ff fab7 	bl	4a20 <__locale_charset>
    54b2:	f8cd 8000 	str.w	r8, [sp]
    54b6:	4603      	mov	r3, r0
    54b8:	4639      	mov	r1, r7
    54ba:	4628      	mov	r0, r5
    54bc:	4632      	mov	r2, r6
    54be:	47a0      	blx	r4
    54c0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    54c4:	2000090c 	.word	0x2000090c

000054c8 <_write_r>:
    54c8:	b538      	push	{r3, r4, r5, lr}
    54ca:	4c07      	ldr	r4, [pc, #28]	; (54e8 <_write_r+0x20>)
    54cc:	4605      	mov	r5, r0
    54ce:	2000      	movs	r0, #0
    54d0:	6020      	str	r0, [r4, #0]
    54d2:	4608      	mov	r0, r1
    54d4:	4611      	mov	r1, r2
    54d6:	461a      	mov	r2, r3
    54d8:	f7fb f9c0 	bl	85c <_write>
    54dc:	1c43      	adds	r3, r0, #1
    54de:	d102      	bne.n	54e6 <_write_r+0x1e>
    54e0:	6823      	ldr	r3, [r4, #0]
    54e2:	b103      	cbz	r3, 54e6 <_write_r+0x1e>
    54e4:	602b      	str	r3, [r5, #0]
    54e6:	bd38      	pop	{r3, r4, r5, pc}
    54e8:	20000aa4 	.word	0x20000aa4

000054ec <_close_r>:
    54ec:	b538      	push	{r3, r4, r5, lr}
    54ee:	4c06      	ldr	r4, [pc, #24]	; (5508 <_close_r+0x1c>)
    54f0:	2300      	movs	r3, #0
    54f2:	4605      	mov	r5, r0
    54f4:	4608      	mov	r0, r1
    54f6:	6023      	str	r3, [r4, #0]
    54f8:	f7fd ff6e 	bl	33d8 <_close>
    54fc:	1c43      	adds	r3, r0, #1
    54fe:	d102      	bne.n	5506 <_close_r+0x1a>
    5500:	6821      	ldr	r1, [r4, #0]
    5502:	b101      	cbz	r1, 5506 <_close_r+0x1a>
    5504:	6029      	str	r1, [r5, #0]
    5506:	bd38      	pop	{r3, r4, r5, pc}
    5508:	20000aa4 	.word	0x20000aa4

0000550c <_fclose_r>:
    550c:	b570      	push	{r4, r5, r6, lr}
    550e:	4605      	mov	r5, r0
    5510:	460c      	mov	r4, r1
    5512:	2900      	cmp	r1, #0
    5514:	d039      	beq.n	558a <_fclose_r+0x7e>
    5516:	f7fe ff33 	bl	4380 <__sfp_lock_acquire>
    551a:	b125      	cbz	r5, 5526 <_fclose_r+0x1a>
    551c:	6bab      	ldr	r3, [r5, #56]	; 0x38
    551e:	b913      	cbnz	r3, 5526 <_fclose_r+0x1a>
    5520:	4628      	mov	r0, r5
    5522:	f7fe fec9 	bl	42b8 <__sinit>
    5526:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
    552a:	b35e      	cbz	r6, 5584 <_fclose_r+0x78>
    552c:	4628      	mov	r0, r5
    552e:	4621      	mov	r1, r4
    5530:	f7fe fdce 	bl	40d0 <_fflush_r>
    5534:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5536:	4606      	mov	r6, r0
    5538:	b13a      	cbz	r2, 554a <_fclose_r+0x3e>
    553a:	4628      	mov	r0, r5
    553c:	69e1      	ldr	r1, [r4, #28]
    553e:	4790      	blx	r2
    5540:	ea36 0620 	bics.w	r6, r6, r0, asr #32
    5544:	bf28      	it	cs
    5546:	f04f 36ff 	movcs.w	r6, #4294967295
    554a:	89a0      	ldrh	r0, [r4, #12]
    554c:	f000 0180 	and.w	r1, r0, #128	; 0x80
    5550:	b20b      	sxth	r3, r1
    5552:	b11b      	cbz	r3, 555c <_fclose_r+0x50>
    5554:	4628      	mov	r0, r5
    5556:	6921      	ldr	r1, [r4, #16]
    5558:	f7fe ffec 	bl	4534 <_free_r>
    555c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    555e:	b141      	cbz	r1, 5572 <_fclose_r+0x66>
    5560:	f104 0240 	add.w	r2, r4, #64	; 0x40
    5564:	4291      	cmp	r1, r2
    5566:	d002      	beq.n	556e <_fclose_r+0x62>
    5568:	4628      	mov	r0, r5
    556a:	f7fe ffe3 	bl	4534 <_free_r>
    556e:	2000      	movs	r0, #0
    5570:	6320      	str	r0, [r4, #48]	; 0x30
    5572:	6c61      	ldr	r1, [r4, #68]	; 0x44
    5574:	b121      	cbz	r1, 5580 <_fclose_r+0x74>
    5576:	4628      	mov	r0, r5
    5578:	f7fe ffdc 	bl	4534 <_free_r>
    557c:	2100      	movs	r1, #0
    557e:	6461      	str	r1, [r4, #68]	; 0x44
    5580:	2300      	movs	r3, #0
    5582:	81a3      	strh	r3, [r4, #12]
    5584:	f7fe fefd 	bl	4382 <__sfp_lock_release>
    5588:	e000      	b.n	558c <_fclose_r+0x80>
    558a:	460e      	mov	r6, r1
    558c:	4630      	mov	r0, r6
    558e:	bd70      	pop	{r4, r5, r6, pc}

00005590 <fclose>:
    5590:	4b02      	ldr	r3, [pc, #8]	; (559c <fclose+0xc>)
    5592:	4601      	mov	r1, r0
    5594:	6818      	ldr	r0, [r3, #0]
    5596:	f7ff bfb9 	b.w	550c <_fclose_r>
    559a:	bf00      	nop
    559c:	20000050 	.word	0x20000050

000055a0 <_fstat_r>:
    55a0:	b538      	push	{r3, r4, r5, lr}
    55a2:	4c07      	ldr	r4, [pc, #28]	; (55c0 <_fstat_r+0x20>)
    55a4:	2300      	movs	r3, #0
    55a6:	4605      	mov	r5, r0
    55a8:	4608      	mov	r0, r1
    55aa:	4611      	mov	r1, r2
    55ac:	6023      	str	r3, [r4, #0]
    55ae:	f7fd ff17 	bl	33e0 <_fstat>
    55b2:	1c43      	adds	r3, r0, #1
    55b4:	d102      	bne.n	55bc <_fstat_r+0x1c>
    55b6:	6821      	ldr	r1, [r4, #0]
    55b8:	b101      	cbz	r1, 55bc <_fstat_r+0x1c>
    55ba:	6029      	str	r1, [r5, #0]
    55bc:	bd38      	pop	{r3, r4, r5, pc}
    55be:	bf00      	nop
    55c0:	20000aa4 	.word	0x20000aa4

000055c4 <_isatty_r>:
    55c4:	b538      	push	{r3, r4, r5, lr}
    55c6:	4c06      	ldr	r4, [pc, #24]	; (55e0 <_isatty_r+0x1c>)
    55c8:	2300      	movs	r3, #0
    55ca:	4605      	mov	r5, r0
    55cc:	4608      	mov	r0, r1
    55ce:	6023      	str	r3, [r4, #0]
    55d0:	f7fd ff0c 	bl	33ec <_isatty>
    55d4:	1c43      	adds	r3, r0, #1
    55d6:	d102      	bne.n	55de <_isatty_r+0x1a>
    55d8:	6821      	ldr	r1, [r4, #0]
    55da:	b101      	cbz	r1, 55de <_isatty_r+0x1a>
    55dc:	6029      	str	r1, [r5, #0]
    55de:	bd38      	pop	{r3, r4, r5, pc}
    55e0:	20000aa4 	.word	0x20000aa4

000055e4 <_lseek_r>:
    55e4:	b538      	push	{r3, r4, r5, lr}
    55e6:	4c07      	ldr	r4, [pc, #28]	; (5604 <_lseek_r+0x20>)
    55e8:	4605      	mov	r5, r0
    55ea:	2000      	movs	r0, #0
    55ec:	6020      	str	r0, [r4, #0]
    55ee:	4608      	mov	r0, r1
    55f0:	4611      	mov	r1, r2
    55f2:	461a      	mov	r2, r3
    55f4:	f7fd fefe 	bl	33f4 <_lseek>
    55f8:	1c43      	adds	r3, r0, #1
    55fa:	d102      	bne.n	5602 <_lseek_r+0x1e>
    55fc:	6823      	ldr	r3, [r4, #0]
    55fe:	b103      	cbz	r3, 5602 <_lseek_r+0x1e>
    5600:	602b      	str	r3, [r5, #0]
    5602:	bd38      	pop	{r3, r4, r5, pc}
    5604:	20000aa4 	.word	0x20000aa4

00005608 <_read_r>:
    5608:	b538      	push	{r3, r4, r5, lr}
    560a:	4c07      	ldr	r4, [pc, #28]	; (5628 <_read_r+0x20>)
    560c:	4605      	mov	r5, r0
    560e:	2000      	movs	r0, #0
    5610:	6020      	str	r0, [r4, #0]
    5612:	4608      	mov	r0, r1
    5614:	4611      	mov	r1, r2
    5616:	461a      	mov	r2, r3
    5618:	f7fb f8dc 	bl	7d4 <_read>
    561c:	1c43      	adds	r3, r0, #1
    561e:	d102      	bne.n	5626 <_read_r+0x1e>
    5620:	6823      	ldr	r3, [r4, #0]
    5622:	b103      	cbz	r3, 5626 <_read_r+0x1e>
    5624:	602b      	str	r3, [r5, #0]
    5626:	bd38      	pop	{r3, r4, r5, pc}
    5628:	20000aa4 	.word	0x20000aa4

0000562c <__aeabi_uldivmod>:
    562c:	b94b      	cbnz	r3, 5642 <__aeabi_uldivmod+0x16>
    562e:	b942      	cbnz	r2, 5642 <__aeabi_uldivmod+0x16>
    5630:	2900      	cmp	r1, #0
    5632:	bf08      	it	eq
    5634:	2800      	cmpeq	r0, #0
    5636:	d002      	beq.n	563e <__aeabi_uldivmod+0x12>
    5638:	f04f 31ff 	mov.w	r1, #4294967295
    563c:	4608      	mov	r0, r1
    563e:	f000 b837 	b.w	56b0 <__aeabi_idiv0>
    5642:	b082      	sub	sp, #8
    5644:	46ec      	mov	ip, sp
    5646:	e92d 5000 	stmdb	sp!, {ip, lr}
    564a:	f000 f81b 	bl	5684 <__gnu_uldivmod_helper>
    564e:	f8dd e004 	ldr.w	lr, [sp, #4]
    5652:	b002      	add	sp, #8
    5654:	bc0c      	pop	{r2, r3}
    5656:	4770      	bx	lr

00005658 <__gnu_ldivmod_helper>:
    5658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    565a:	4616      	mov	r6, r2
    565c:	4604      	mov	r4, r0
    565e:	460d      	mov	r5, r1
    5660:	461f      	mov	r7, r3
    5662:	f000 f827 	bl	56b4 <__divdi3>
    5666:	fb06 f301 	mul.w	r3, r6, r1
    566a:	fb00 3707 	mla	r7, r0, r7, r3
    566e:	fba6 2300 	umull	r2, r3, r6, r0
    5672:	18fb      	adds	r3, r7, r3
    5674:	1aa2      	subs	r2, r4, r2
    5676:	eb65 0303 	sbc.w	r3, r5, r3
    567a:	9c06      	ldr	r4, [sp, #24]
    567c:	e9c4 2300 	strd	r2, r3, [r4]
    5680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5682:	bf00      	nop

00005684 <__gnu_uldivmod_helper>:
    5684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5686:	4616      	mov	r6, r2
    5688:	4604      	mov	r4, r0
    568a:	460d      	mov	r5, r1
    568c:	461f      	mov	r7, r3
    568e:	f000 f96f 	bl	5970 <__udivdi3>
    5692:	fb00 f707 	mul.w	r7, r0, r7
    5696:	fba0 2306 	umull	r2, r3, r0, r6
    569a:	fb06 7701 	mla	r7, r6, r1, r7
    569e:	18fb      	adds	r3, r7, r3
    56a0:	1aa2      	subs	r2, r4, r2
    56a2:	eb65 0303 	sbc.w	r3, r5, r3
    56a6:	9c06      	ldr	r4, [sp, #24]
    56a8:	e9c4 2300 	strd	r2, r3, [r4]
    56ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    56ae:	bf00      	nop

000056b0 <__aeabi_idiv0>:
    56b0:	4770      	bx	lr
    56b2:	bf00      	nop

000056b4 <__divdi3>:
    56b4:	2900      	cmp	r1, #0
    56b6:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    56ba:	461d      	mov	r5, r3
    56bc:	f2c0 809d 	blt.w	57fa <__divdi3+0x146>
    56c0:	2400      	movs	r4, #0
    56c2:	2d00      	cmp	r5, #0
    56c4:	f2c0 8094 	blt.w	57f0 <__divdi3+0x13c>
    56c8:	4680      	mov	r8, r0
    56ca:	460f      	mov	r7, r1
    56cc:	4694      	mov	ip, r2
    56ce:	461e      	mov	r6, r3
    56d0:	bbe3      	cbnz	r3, 574c <__divdi3+0x98>
    56d2:	428a      	cmp	r2, r1
    56d4:	d955      	bls.n	5782 <__divdi3+0xce>
    56d6:	fab2 f782 	clz	r7, r2
    56da:	b147      	cbz	r7, 56ee <__divdi3+0x3a>
    56dc:	f1c7 0520 	rsb	r5, r7, #32
    56e0:	fa20 f605 	lsr.w	r6, r0, r5
    56e4:	fa01 f107 	lsl.w	r1, r1, r7
    56e8:	40ba      	lsls	r2, r7
    56ea:	4331      	orrs	r1, r6
    56ec:	40b8      	lsls	r0, r7
    56ee:	0c17      	lsrs	r7, r2, #16
    56f0:	fbb1 f6f7 	udiv	r6, r1, r7
    56f4:	0c03      	lsrs	r3, r0, #16
    56f6:	fa1f fc82 	uxth.w	ip, r2
    56fa:	fb07 1116 	mls	r1, r7, r6, r1
    56fe:	fb0c f506 	mul.w	r5, ip, r6
    5702:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    5706:	429d      	cmp	r5, r3
    5708:	d908      	bls.n	571c <__divdi3+0x68>
    570a:	1e71      	subs	r1, r6, #1
    570c:	189b      	adds	r3, r3, r2
    570e:	f080 8113 	bcs.w	5938 <__divdi3+0x284>
    5712:	429d      	cmp	r5, r3
    5714:	f240 8110 	bls.w	5938 <__divdi3+0x284>
    5718:	3e02      	subs	r6, #2
    571a:	189b      	adds	r3, r3, r2
    571c:	1b59      	subs	r1, r3, r5
    571e:	fbb1 f5f7 	udiv	r5, r1, r7
    5722:	fb07 1315 	mls	r3, r7, r5, r1
    5726:	b280      	uxth	r0, r0
    5728:	fb0c fc05 	mul.w	ip, ip, r5
    572c:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
    5730:	458c      	cmp	ip, r1
    5732:	d907      	bls.n	5744 <__divdi3+0x90>
    5734:	1e6b      	subs	r3, r5, #1
    5736:	188a      	adds	r2, r1, r2
    5738:	f080 8100 	bcs.w	593c <__divdi3+0x288>
    573c:	4594      	cmp	ip, r2
    573e:	f240 80fd 	bls.w	593c <__divdi3+0x288>
    5742:	3d02      	subs	r5, #2
    5744:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
    5748:	2500      	movs	r5, #0
    574a:	e003      	b.n	5754 <__divdi3+0xa0>
    574c:	428b      	cmp	r3, r1
    574e:	d90c      	bls.n	576a <__divdi3+0xb6>
    5750:	2500      	movs	r5, #0
    5752:	4629      	mov	r1, r5
    5754:	460a      	mov	r2, r1
    5756:	462b      	mov	r3, r5
    5758:	b114      	cbz	r4, 5760 <__divdi3+0xac>
    575a:	4252      	negs	r2, r2
    575c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    5760:	4610      	mov	r0, r2
    5762:	4619      	mov	r1, r3
    5764:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5768:	4770      	bx	lr
    576a:	fab3 f583 	clz	r5, r3
    576e:	2d00      	cmp	r5, #0
    5770:	f040 8087 	bne.w	5882 <__divdi3+0x1ce>
    5774:	428b      	cmp	r3, r1
    5776:	d301      	bcc.n	577c <__divdi3+0xc8>
    5778:	4282      	cmp	r2, r0
    577a:	d8ea      	bhi.n	5752 <__divdi3+0x9e>
    577c:	2500      	movs	r5, #0
    577e:	2101      	movs	r1, #1
    5780:	e7e8      	b.n	5754 <__divdi3+0xa0>
    5782:	b912      	cbnz	r2, 578a <__divdi3+0xd6>
    5784:	2601      	movs	r6, #1
    5786:	fbb6 f2f2 	udiv	r2, r6, r2
    578a:	fab2 f682 	clz	r6, r2
    578e:	2e00      	cmp	r6, #0
    5790:	d139      	bne.n	5806 <__divdi3+0x152>
    5792:	1a8e      	subs	r6, r1, r2
    5794:	0c13      	lsrs	r3, r2, #16
    5796:	fa1f fc82 	uxth.w	ip, r2
    579a:	2501      	movs	r5, #1
    579c:	fbb6 f7f3 	udiv	r7, r6, r3
    57a0:	fb03 6117 	mls	r1, r3, r7, r6
    57a4:	ea4f 4910 	mov.w	r9, r0, lsr #16
    57a8:	fb0c f807 	mul.w	r8, ip, r7
    57ac:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
    57b0:	45b0      	cmp	r8, r6
    57b2:	d906      	bls.n	57c2 <__divdi3+0x10e>
    57b4:	1e79      	subs	r1, r7, #1
    57b6:	18b6      	adds	r6, r6, r2
    57b8:	d202      	bcs.n	57c0 <__divdi3+0x10c>
    57ba:	45b0      	cmp	r8, r6
    57bc:	f200 80d3 	bhi.w	5966 <__divdi3+0x2b2>
    57c0:	460f      	mov	r7, r1
    57c2:	ebc8 0606 	rsb	r6, r8, r6
    57c6:	fbb6 f1f3 	udiv	r1, r6, r3
    57ca:	fb03 6311 	mls	r3, r3, r1, r6
    57ce:	b280      	uxth	r0, r0
    57d0:	fb0c fc01 	mul.w	ip, ip, r1
    57d4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    57d8:	459c      	cmp	ip, r3
    57da:	d906      	bls.n	57ea <__divdi3+0x136>
    57dc:	1e4e      	subs	r6, r1, #1
    57de:	189a      	adds	r2, r3, r2
    57e0:	d202      	bcs.n	57e8 <__divdi3+0x134>
    57e2:	4594      	cmp	ip, r2
    57e4:	f200 80c2 	bhi.w	596c <__divdi3+0x2b8>
    57e8:	4631      	mov	r1, r6
    57ea:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
    57ee:	e7b1      	b.n	5754 <__divdi3+0xa0>
    57f0:	43e4      	mvns	r4, r4
    57f2:	4252      	negs	r2, r2
    57f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    57f8:	e766      	b.n	56c8 <__divdi3+0x14>
    57fa:	4240      	negs	r0, r0
    57fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    5800:	f04f 34ff 	mov.w	r4, #4294967295
    5804:	e75d      	b.n	56c2 <__divdi3+0xe>
    5806:	40b2      	lsls	r2, r6
    5808:	f1c6 0920 	rsb	r9, r6, #32
    580c:	fa21 f709 	lsr.w	r7, r1, r9
    5810:	fa20 f509 	lsr.w	r5, r0, r9
    5814:	0c13      	lsrs	r3, r2, #16
    5816:	fa01 f106 	lsl.w	r1, r1, r6
    581a:	fbb7 f8f3 	udiv	r8, r7, r3
    581e:	ea45 0901 	orr.w	r9, r5, r1
    5822:	fa1f fc82 	uxth.w	ip, r2
    5826:	fb03 7718 	mls	r7, r3, r8, r7
    582a:	ea4f 4119 	mov.w	r1, r9, lsr #16
    582e:	fb0c f508 	mul.w	r5, ip, r8
    5832:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
    5836:	40b0      	lsls	r0, r6
    5838:	42bd      	cmp	r5, r7
    583a:	d90a      	bls.n	5852 <__divdi3+0x19e>
    583c:	18bf      	adds	r7, r7, r2
    583e:	f108 36ff 	add.w	r6, r8, #4294967295
    5842:	f080 808e 	bcs.w	5962 <__divdi3+0x2ae>
    5846:	42bd      	cmp	r5, r7
    5848:	f240 808b 	bls.w	5962 <__divdi3+0x2ae>
    584c:	f1a8 0802 	sub.w	r8, r8, #2
    5850:	18bf      	adds	r7, r7, r2
    5852:	1b79      	subs	r1, r7, r5
    5854:	fbb1 f5f3 	udiv	r5, r1, r3
    5858:	fb03 1715 	mls	r7, r3, r5, r1
    585c:	fa1f f989 	uxth.w	r9, r9
    5860:	fb0c f605 	mul.w	r6, ip, r5
    5864:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
    5868:	428e      	cmp	r6, r1
    586a:	d906      	bls.n	587a <__divdi3+0x1c6>
    586c:	1e6f      	subs	r7, r5, #1
    586e:	1889      	adds	r1, r1, r2
    5870:	d271      	bcs.n	5956 <__divdi3+0x2a2>
    5872:	428e      	cmp	r6, r1
    5874:	d96f      	bls.n	5956 <__divdi3+0x2a2>
    5876:	3d02      	subs	r5, #2
    5878:	1889      	adds	r1, r1, r2
    587a:	1b8e      	subs	r6, r1, r6
    587c:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
    5880:	e78c      	b.n	579c <__divdi3+0xe8>
    5882:	f1c5 0120 	rsb	r1, r5, #32
    5886:	fa22 f301 	lsr.w	r3, r2, r1
    588a:	fa06 f605 	lsl.w	r6, r6, r5
    588e:	431e      	orrs	r6, r3
    5890:	fa27 f201 	lsr.w	r2, r7, r1
    5894:	ea4f 4916 	mov.w	r9, r6, lsr #16
    5898:	fa07 f705 	lsl.w	r7, r7, r5
    589c:	fa20 f101 	lsr.w	r1, r0, r1
    58a0:	fbb2 f8f9 	udiv	r8, r2, r9
    58a4:	430f      	orrs	r7, r1
    58a6:	0c3b      	lsrs	r3, r7, #16
    58a8:	fa1f fa86 	uxth.w	sl, r6
    58ac:	fb09 2218 	mls	r2, r9, r8, r2
    58b0:	fb0a fb08 	mul.w	fp, sl, r8
    58b4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    58b8:	4593      	cmp	fp, r2
    58ba:	fa0c fc05 	lsl.w	ip, ip, r5
    58be:	d908      	bls.n	58d2 <__divdi3+0x21e>
    58c0:	1992      	adds	r2, r2, r6
    58c2:	f108 31ff 	add.w	r1, r8, #4294967295
    58c6:	d24a      	bcs.n	595e <__divdi3+0x2aa>
    58c8:	4593      	cmp	fp, r2
    58ca:	d948      	bls.n	595e <__divdi3+0x2aa>
    58cc:	f1a8 0802 	sub.w	r8, r8, #2
    58d0:	1992      	adds	r2, r2, r6
    58d2:	ebcb 0302 	rsb	r3, fp, r2
    58d6:	fbb3 f1f9 	udiv	r1, r3, r9
    58da:	fb09 3211 	mls	r2, r9, r1, r3
    58de:	b2bf      	uxth	r7, r7
    58e0:	fb0a fa01 	mul.w	sl, sl, r1
    58e4:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
    58e8:	459a      	cmp	sl, r3
    58ea:	d906      	bls.n	58fa <__divdi3+0x246>
    58ec:	1e4a      	subs	r2, r1, #1
    58ee:	199b      	adds	r3, r3, r6
    58f0:	d233      	bcs.n	595a <__divdi3+0x2a6>
    58f2:	459a      	cmp	sl, r3
    58f4:	d931      	bls.n	595a <__divdi3+0x2a6>
    58f6:	3902      	subs	r1, #2
    58f8:	199b      	adds	r3, r3, r6
    58fa:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
    58fe:	0c0f      	lsrs	r7, r1, #16
    5900:	fa1f f88c 	uxth.w	r8, ip
    5904:	fb08 f607 	mul.w	r6, r8, r7
    5908:	b28a      	uxth	r2, r1
    590a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
    590e:	fb08 f802 	mul.w	r8, r8, r2
    5912:	fb0c 6202 	mla	r2, ip, r2, r6
    5916:	eb02 4218 	add.w	r2, r2, r8, lsr #16
    591a:	fb0c fc07 	mul.w	ip, ip, r7
    591e:	4296      	cmp	r6, r2
    5920:	bf88      	it	hi
    5922:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
    5926:	ebca 0303 	rsb	r3, sl, r3
    592a:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
    592e:	4563      	cmp	r3, ip
    5930:	d30e      	bcc.n	5950 <__divdi3+0x29c>
    5932:	d005      	beq.n	5940 <__divdi3+0x28c>
    5934:	2500      	movs	r5, #0
    5936:	e70d      	b.n	5754 <__divdi3+0xa0>
    5938:	460e      	mov	r6, r1
    593a:	e6ef      	b.n	571c <__divdi3+0x68>
    593c:	461d      	mov	r5, r3
    593e:	e701      	b.n	5744 <__divdi3+0x90>
    5940:	fa1f f888 	uxth.w	r8, r8
    5944:	fa00 f005 	lsl.w	r0, r0, r5
    5948:	eb08 4502 	add.w	r5, r8, r2, lsl #16
    594c:	42a8      	cmp	r0, r5
    594e:	d2f1      	bcs.n	5934 <__divdi3+0x280>
    5950:	3901      	subs	r1, #1
    5952:	2500      	movs	r5, #0
    5954:	e6fe      	b.n	5754 <__divdi3+0xa0>
    5956:	463d      	mov	r5, r7
    5958:	e78f      	b.n	587a <__divdi3+0x1c6>
    595a:	4611      	mov	r1, r2
    595c:	e7cd      	b.n	58fa <__divdi3+0x246>
    595e:	4688      	mov	r8, r1
    5960:	e7b7      	b.n	58d2 <__divdi3+0x21e>
    5962:	46b0      	mov	r8, r6
    5964:	e775      	b.n	5852 <__divdi3+0x19e>
    5966:	3f02      	subs	r7, #2
    5968:	18b6      	adds	r6, r6, r2
    596a:	e72a      	b.n	57c2 <__divdi3+0x10e>
    596c:	3902      	subs	r1, #2
    596e:	e73c      	b.n	57ea <__divdi3+0x136>

00005970 <__udivdi3>:
    5970:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    5974:	4614      	mov	r4, r2
    5976:	4605      	mov	r5, r0
    5978:	460e      	mov	r6, r1
    597a:	2b00      	cmp	r3, #0
    597c:	d13d      	bne.n	59fa <__udivdi3+0x8a>
    597e:	428a      	cmp	r2, r1
    5980:	d949      	bls.n	5a16 <__udivdi3+0xa6>
    5982:	fab2 f782 	clz	r7, r2
    5986:	b147      	cbz	r7, 599a <__udivdi3+0x2a>
    5988:	f1c7 0120 	rsb	r1, r7, #32
    598c:	fa20 f201 	lsr.w	r2, r0, r1
    5990:	fa06 f607 	lsl.w	r6, r6, r7
    5994:	40bc      	lsls	r4, r7
    5996:	4316      	orrs	r6, r2
    5998:	40bd      	lsls	r5, r7
    599a:	0c22      	lsrs	r2, r4, #16
    599c:	fbb6 f0f2 	udiv	r0, r6, r2
    59a0:	0c2f      	lsrs	r7, r5, #16
    59a2:	b2a1      	uxth	r1, r4
    59a4:	fb02 6610 	mls	r6, r2, r0, r6
    59a8:	fb01 f300 	mul.w	r3, r1, r0
    59ac:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    59b0:	42b3      	cmp	r3, r6
    59b2:	d908      	bls.n	59c6 <__udivdi3+0x56>
    59b4:	1e47      	subs	r7, r0, #1
    59b6:	1936      	adds	r6, r6, r4
    59b8:	f080 80f8 	bcs.w	5bac <__udivdi3+0x23c>
    59bc:	42b3      	cmp	r3, r6
    59be:	f240 80f5 	bls.w	5bac <__udivdi3+0x23c>
    59c2:	3802      	subs	r0, #2
    59c4:	1936      	adds	r6, r6, r4
    59c6:	1af6      	subs	r6, r6, r3
    59c8:	fbb6 f3f2 	udiv	r3, r6, r2
    59cc:	fb02 6213 	mls	r2, r2, r3, r6
    59d0:	b2ad      	uxth	r5, r5
    59d2:	fb01 f103 	mul.w	r1, r1, r3
    59d6:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
    59da:	4291      	cmp	r1, r2
    59dc:	d907      	bls.n	59ee <__udivdi3+0x7e>
    59de:	1e5e      	subs	r6, r3, #1
    59e0:	1912      	adds	r2, r2, r4
    59e2:	f080 80e5 	bcs.w	5bb0 <__udivdi3+0x240>
    59e6:	4291      	cmp	r1, r2
    59e8:	f240 80e2 	bls.w	5bb0 <__udivdi3+0x240>
    59ec:	3b02      	subs	r3, #2
    59ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    59f2:	2100      	movs	r1, #0
    59f4:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    59f8:	4770      	bx	lr
    59fa:	428b      	cmp	r3, r1
    59fc:	d843      	bhi.n	5a86 <__udivdi3+0x116>
    59fe:	fab3 f483 	clz	r4, r3
    5a02:	2c00      	cmp	r4, #0
    5a04:	d142      	bne.n	5a8c <__udivdi3+0x11c>
    5a06:	428b      	cmp	r3, r1
    5a08:	d302      	bcc.n	5a10 <__udivdi3+0xa0>
    5a0a:	4282      	cmp	r2, r0
    5a0c:	f200 80df 	bhi.w	5bce <__udivdi3+0x25e>
    5a10:	2100      	movs	r1, #0
    5a12:	2001      	movs	r0, #1
    5a14:	e7ee      	b.n	59f4 <__udivdi3+0x84>
    5a16:	b912      	cbnz	r2, 5a1e <__udivdi3+0xae>
    5a18:	2701      	movs	r7, #1
    5a1a:	fbb7 f4f2 	udiv	r4, r7, r2
    5a1e:	fab4 f284 	clz	r2, r4
    5a22:	2a00      	cmp	r2, #0
    5a24:	f040 8088 	bne.w	5b38 <__udivdi3+0x1c8>
    5a28:	1b0a      	subs	r2, r1, r4
    5a2a:	0c23      	lsrs	r3, r4, #16
    5a2c:	b2a7      	uxth	r7, r4
    5a2e:	2101      	movs	r1, #1
    5a30:	fbb2 f6f3 	udiv	r6, r2, r3
    5a34:	fb03 2216 	mls	r2, r3, r6, r2
    5a38:	ea4f 4c15 	mov.w	ip, r5, lsr #16
    5a3c:	fb07 f006 	mul.w	r0, r7, r6
    5a40:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
    5a44:	4290      	cmp	r0, r2
    5a46:	d907      	bls.n	5a58 <__udivdi3+0xe8>
    5a48:	1912      	adds	r2, r2, r4
    5a4a:	f106 3cff 	add.w	ip, r6, #4294967295
    5a4e:	d202      	bcs.n	5a56 <__udivdi3+0xe6>
    5a50:	4290      	cmp	r0, r2
    5a52:	f200 80ce 	bhi.w	5bf2 <__udivdi3+0x282>
    5a56:	4666      	mov	r6, ip
    5a58:	1a12      	subs	r2, r2, r0
    5a5a:	fbb2 f0f3 	udiv	r0, r2, r3
    5a5e:	fb03 2310 	mls	r3, r3, r0, r2
    5a62:	b2ad      	uxth	r5, r5
    5a64:	fb07 f700 	mul.w	r7, r7, r0
    5a68:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
    5a6c:	429f      	cmp	r7, r3
    5a6e:	d907      	bls.n	5a80 <__udivdi3+0x110>
    5a70:	1e42      	subs	r2, r0, #1
    5a72:	191b      	adds	r3, r3, r4
    5a74:	f080 809e 	bcs.w	5bb4 <__udivdi3+0x244>
    5a78:	429f      	cmp	r7, r3
    5a7a:	f240 809b 	bls.w	5bb4 <__udivdi3+0x244>
    5a7e:	3802      	subs	r0, #2
    5a80:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    5a84:	e7b6      	b.n	59f4 <__udivdi3+0x84>
    5a86:	2100      	movs	r1, #0
    5a88:	4608      	mov	r0, r1
    5a8a:	e7b3      	b.n	59f4 <__udivdi3+0x84>
    5a8c:	f1c4 0620 	rsb	r6, r4, #32
    5a90:	fa22 f506 	lsr.w	r5, r2, r6
    5a94:	fa03 f304 	lsl.w	r3, r3, r4
    5a98:	432b      	orrs	r3, r5
    5a9a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    5a9e:	fa21 f506 	lsr.w	r5, r1, r6
    5aa2:	fa01 f104 	lsl.w	r1, r1, r4
    5aa6:	fa20 f606 	lsr.w	r6, r0, r6
    5aaa:	fbb5 f7fc 	udiv	r7, r5, ip
    5aae:	ea46 0a01 	orr.w	sl, r6, r1
    5ab2:	fa1f f883 	uxth.w	r8, r3
    5ab6:	fb0c 5517 	mls	r5, ip, r7, r5
    5aba:	ea4f 411a 	mov.w	r1, sl, lsr #16
    5abe:	fb08 f907 	mul.w	r9, r8, r7
    5ac2:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
    5ac6:	45a9      	cmp	r9, r5
    5ac8:	fa02 f204 	lsl.w	r2, r2, r4
    5acc:	d903      	bls.n	5ad6 <__udivdi3+0x166>
    5ace:	1e7e      	subs	r6, r7, #1
    5ad0:	18ed      	adds	r5, r5, r3
    5ad2:	d37f      	bcc.n	5bd4 <__udivdi3+0x264>
    5ad4:	4637      	mov	r7, r6
    5ad6:	ebc9 0105 	rsb	r1, r9, r5
    5ada:	fbb1 f6fc 	udiv	r6, r1, ip
    5ade:	fb0c 1516 	mls	r5, ip, r6, r1
    5ae2:	fa1f fa8a 	uxth.w	sl, sl
    5ae6:	fb08 f806 	mul.w	r8, r8, r6
    5aea:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
    5aee:	4588      	cmp	r8, r1
    5af0:	d903      	bls.n	5afa <__udivdi3+0x18a>
    5af2:	1e75      	subs	r5, r6, #1
    5af4:	18c9      	adds	r1, r1, r3
    5af6:	d373      	bcc.n	5be0 <__udivdi3+0x270>
    5af8:	462e      	mov	r6, r5
    5afa:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
    5afe:	0c37      	lsrs	r7, r6, #16
    5b00:	fa1f fc82 	uxth.w	ip, r2
    5b04:	fb0c f507 	mul.w	r5, ip, r7
    5b08:	0c12      	lsrs	r2, r2, #16
    5b0a:	b2b3      	uxth	r3, r6
    5b0c:	fb0c fc03 	mul.w	ip, ip, r3
    5b10:	fb02 5303 	mla	r3, r2, r3, r5
    5b14:	eb03 431c 	add.w	r3, r3, ip, lsr #16
    5b18:	fb02 f207 	mul.w	r2, r2, r7
    5b1c:	429d      	cmp	r5, r3
    5b1e:	bf88      	it	hi
    5b20:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
    5b24:	ebc8 0101 	rsb	r1, r8, r1
    5b28:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    5b2c:	4291      	cmp	r1, r2
    5b2e:	d34b      	bcc.n	5bc8 <__udivdi3+0x258>
    5b30:	d042      	beq.n	5bb8 <__udivdi3+0x248>
    5b32:	4630      	mov	r0, r6
    5b34:	2100      	movs	r1, #0
    5b36:	e75d      	b.n	59f4 <__udivdi3+0x84>
    5b38:	4094      	lsls	r4, r2
    5b3a:	f1c2 0520 	rsb	r5, r2, #32
    5b3e:	fa21 f605 	lsr.w	r6, r1, r5
    5b42:	0c23      	lsrs	r3, r4, #16
    5b44:	fa20 f705 	lsr.w	r7, r0, r5
    5b48:	fa01 f102 	lsl.w	r1, r1, r2
    5b4c:	fbb6 fcf3 	udiv	ip, r6, r3
    5b50:	4339      	orrs	r1, r7
    5b52:	0c0d      	lsrs	r5, r1, #16
    5b54:	b2a7      	uxth	r7, r4
    5b56:	fb03 661c 	mls	r6, r3, ip, r6
    5b5a:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    5b5e:	fb07 f80c 	mul.w	r8, r7, ip
    5b62:	45b0      	cmp	r8, r6
    5b64:	fa00 f502 	lsl.w	r5, r0, r2
    5b68:	d908      	bls.n	5b7c <__udivdi3+0x20c>
    5b6a:	1936      	adds	r6, r6, r4
    5b6c:	f10c 30ff 	add.w	r0, ip, #4294967295
    5b70:	d23d      	bcs.n	5bee <__udivdi3+0x27e>
    5b72:	45b0      	cmp	r8, r6
    5b74:	d93b      	bls.n	5bee <__udivdi3+0x27e>
    5b76:	f1ac 0c02 	sub.w	ip, ip, #2
    5b7a:	1936      	adds	r6, r6, r4
    5b7c:	ebc8 0206 	rsb	r2, r8, r6
    5b80:	fbb2 f0f3 	udiv	r0, r2, r3
    5b84:	fb03 2610 	mls	r6, r3, r0, r2
    5b88:	b28a      	uxth	r2, r1
    5b8a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
    5b8e:	fb07 f100 	mul.w	r1, r7, r0
    5b92:	4291      	cmp	r1, r2
    5b94:	d906      	bls.n	5ba4 <__udivdi3+0x234>
    5b96:	1e46      	subs	r6, r0, #1
    5b98:	1912      	adds	r2, r2, r4
    5b9a:	d226      	bcs.n	5bea <__udivdi3+0x27a>
    5b9c:	4291      	cmp	r1, r2
    5b9e:	d924      	bls.n	5bea <__udivdi3+0x27a>
    5ba0:	3802      	subs	r0, #2
    5ba2:	1912      	adds	r2, r2, r4
    5ba4:	1a52      	subs	r2, r2, r1
    5ba6:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
    5baa:	e741      	b.n	5a30 <__udivdi3+0xc0>
    5bac:	4638      	mov	r0, r7
    5bae:	e70a      	b.n	59c6 <__udivdi3+0x56>
    5bb0:	4633      	mov	r3, r6
    5bb2:	e71c      	b.n	59ee <__udivdi3+0x7e>
    5bb4:	4610      	mov	r0, r2
    5bb6:	e763      	b.n	5a80 <__udivdi3+0x110>
    5bb8:	fa1f fc8c 	uxth.w	ip, ip
    5bbc:	fa00 f004 	lsl.w	r0, r0, r4
    5bc0:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
    5bc4:	4298      	cmp	r0, r3
    5bc6:	d2b4      	bcs.n	5b32 <__udivdi3+0x1c2>
    5bc8:	1e70      	subs	r0, r6, #1
    5bca:	2100      	movs	r1, #0
    5bcc:	e712      	b.n	59f4 <__udivdi3+0x84>
    5bce:	4621      	mov	r1, r4
    5bd0:	4620      	mov	r0, r4
    5bd2:	e70f      	b.n	59f4 <__udivdi3+0x84>
    5bd4:	45a9      	cmp	r9, r5
    5bd6:	f67f af7d 	bls.w	5ad4 <__udivdi3+0x164>
    5bda:	3f02      	subs	r7, #2
    5bdc:	18ed      	adds	r5, r5, r3
    5bde:	e77a      	b.n	5ad6 <__udivdi3+0x166>
    5be0:	4588      	cmp	r8, r1
    5be2:	d989      	bls.n	5af8 <__udivdi3+0x188>
    5be4:	3e02      	subs	r6, #2
    5be6:	18c9      	adds	r1, r1, r3
    5be8:	e787      	b.n	5afa <__udivdi3+0x18a>
    5bea:	4630      	mov	r0, r6
    5bec:	e7da      	b.n	5ba4 <__udivdi3+0x234>
    5bee:	4684      	mov	ip, r0
    5bf0:	e7c4      	b.n	5b7c <__udivdi3+0x20c>
    5bf2:	3e02      	subs	r6, #2
    5bf4:	1912      	adds	r2, r2, r4
    5bf6:	e72f      	b.n	5a58 <__udivdi3+0xe8>

00005bf8 <default_settings>:
    5bf8:	043a d040 1412 8032 1617 0418 0219 7b1a     :.@...2........{
    5c08:	0603 000c 003e 0070 0071 1172 0073 02a2     ....>.p.q.r.s...
    5c18:	0111 207a 1c7b 287c 3c7d 557e 687f 7680     ..z {.|(}<~U.h.v
    5c28:	8081 8882 8f83 9684 a385 af86 c487 d788     ................
    5c38:	e889 e013 0000 0010 000d 2014 05a5 07ab     ........... ....
    5c48:	7524 6325 a526 789f 68a0 03a1 dfa6 dfa7     $u%c&..x.h......
    5c58:	f0a8 90a9 94aa e513 610e 4b0f 0216 271e     .........a.K...'
    5c68:	0221 9122 0729 0b33 0b35 1d37 7138 2a39     !.".).3.5.7.8q9*
    5c78:	783c 404d 204e 0c69 606b 1974 4f8d 008e     <xM@N i.k`t..O..
    5c88:	008f 0090 0091 0092 0096 809a 84b0 0cb1     ................
    5c98:	0eb2 82b3 0ab8 1443 f044 3445 5846 2847     ......C.D.E4FXG(
    5ca8:	3a48 8859 885a 445b 675c 495d 0e5e 0464     H:Y.Z.[D\g]I^.d.
    5cb8:	2065 0566 0494 0895 0a6c 556d 116e 9f6f     e f.....l.mUn.o.
    5cc8:	406a 4001 4002 e713 0215 804f 8050 0051     j@.@.@....O.P.Q.
    5cd8:	2252 5e53 8054 9e58 0841 003f 0575 e176     R"S^T.X.A.?.u.v.
    5ce8:	004c 0177 c23d 094b 60c9 3841 4056 1134     L.w.=.K..`A8V@4.
    5cf8:	023b 89a4 0096 3097 2098 3099 849a 299b     ;......0. .0...)
    5d08:	039c 4c9d 3f9e 0478 0179 f0c8 0f79 00c8     ...L.?x.y...y...
    5d18:	1079 7ec8 0a79 80c8 0b79 01c8 0c79 0fc8     y..~y...y...y...
    5d28:	0d79 20c8 0979 80c8 0279 c0c8 0379 40c8     y.. y...y...y..@
    5d38:	0579 30c8 2679 0309 0055 4056 423b 0000     y..0y&..U.V@;B..
    5d48:	6e49 6169 696c 6973 676e 4920 4332 0d0a     Inialising I2C..
    5d58:	0000 0000 6e49 6169 696c 6973 676e 4320     ....Inialising C
    5d68:	6d61 7265 0a61 000d 6553 2074 6970 206e     amera...Set pin 
    5d78:	6163 6c6c 6162 6b63 6620 6961 756c 6572     callback failure
    5d88:	0d21 000a 0d0a 430a 6d61 7265 2061 7041     !......Camera Ap
    5d98:	0a70 000d 7453 7261 2074 6353 6e61 2e2e     p...Start Scan..
    5da8:	0a2e 000d 6e49 7469 6169 696c 6573 7320     ....Initialise s
    5db8:	6375 6563 7373 0d0a 0000 0000 6e49 7469     uccess......Init
    5dc8:	6169 696c 6573 6620 6961 0a6c 000d 0000     ialise fail.....

00005dd8 <_global_impure_ptr>:
    5dd8:	0058 2000 0043 000a                         X.. C...

00005de0 <blanks.6678>:
    5de0:	2020 2020 2020 2020 2020 2020 2020 2020                     

00005df0 <zeroes.6679>:
    5df0:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
    5e00:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
    5e10:	3000 3231 3433 3635 3837 6139 6362 6564     .0123456789abcde
    5e20:	0066 4f50 4953 0058 002e 0000               f.POSIX.....

00005e2c <_init>:
    5e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5e2e:	bf00      	nop
    5e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5e32:	bc08      	pop	{r3}
    5e34:	469e      	mov	lr, r3
    5e36:	4770      	bx	lr

00005e38 <__init_array_start>:
    5e38:	000040b1 	.word	0x000040b1

00005e3c <__frame_dummy_init_array_entry>:
    5e3c:	000001f9                                ....

00005e40 <_fini>:
    5e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5e42:	bf00      	nop
    5e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5e46:	bc08      	pop	{r3}
    5e48:	469e      	mov	lr, r3
    5e4a:	4770      	bx	lr

00005e4c <__fini_array_start>:
    5e4c:	000001d1 	.word	0x000001d1

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <bpm_ps_no_halt_exec>:
 */
RAMFUNC bool bpm_ps_no_halt_exec(Bpm *bpm, uint32_t pmcon)
{
	bool b_psok = false;
	bool b_timeout = false;
	BPM_UNLOCK(PMCON);
2000000c:	f04f 0300 	mov.w	r3, #0
20000010:	f2c4 030f 	movt	r3, #16399	; 0x400f
20000014:	f04f 021c 	mov.w	r2, #28
20000018:	f6ca 2200 	movt	r2, #43520	; 0xaa00
2000001c:	619a      	str	r2, [r3, #24]
	bpm->BPM_PMCON = pmcon;
2000001e:	61c1      	str	r1, [r0, #28]
	do {
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
20000020:	f04f 0100 	mov.w	r1, #0
20000024:	f2c4 010f 	movt	r1, #16399	; 0x400f
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
20000028:	f24e 0210 	movw	r2, #57360	; 0xe010
2000002c:	f2ce 0200 	movt	r2, #57344	; 0xe000
	bool b_psok = false;
	bool b_timeout = false;
	BPM_UNLOCK(PMCON);
	bpm->BPM_PMCON = pmcon;
	do {
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
20000030:	6948      	ldr	r0, [r1, #20]
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
20000032:	6813      	ldr	r3, [r2, #0]
20000034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
	} while (!b_psok && !b_timeout);
20000038:	f010 0001 	ands.w	r0, r0, #1
2000003c:	d101      	bne.n	20000042 <bpm_ps_no_halt_exec+0x36>
2000003e:	2b00      	cmp	r3, #0
20000040:	d0f6      	beq.n	20000030 <bpm_ps_no_halt_exec+0x24>
	return b_psok;
}
20000042:	4770      	bx	lr

20000044 <g_interrupt_enabled>:
20000044:	0001 0000                                   ....

20000048 <flashcalw_wait_until_ready>:
20000048:	2fd1 0000 0000 0000                         ./......

20000050 <_impure_ptr>:
20000050:	0058 2000 0000 0000                         X.. ....

20000058 <impure_data>:
20000058:	0000 0000 0344 2000 03ac 2000 0414 2000     ....D.. ... ... 
	...
2000008c:	5ddc 0000 0000 0000 0000 0000 0000 0000     .]..............
	...
20000100:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000110:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000480 <lc_ctype_charset>:
20000480:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

200004a0 <__mb_cur_max>:
200004a0:	0001 0000                                   ....

200004a4 <lc_message_charset>:
200004a4:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

200004c4 <lconv>:
200004c4:	5e28 0000 5ddf 0000 5ddf 0000 5ddf 0000     (^...]...]...]..
200004d4:	5ddf 0000 5ddf 0000 5ddf 0000 5ddf 0000     .]...]...]...]..
200004e4:	5ddf 0000 5ddf 0000 ffff ffff ffff ffff     .]...]..........
200004f4:	ffff ffff ffff 0000                         ........

200004fc <__malloc_av_>:
	...
20000504:	04fc 2000 04fc 2000 0504 2000 0504 2000     ... ... ... ... 
20000514:	050c 2000 050c 2000 0514 2000 0514 2000     ... ... ... ... 
20000524:	051c 2000 051c 2000 0524 2000 0524 2000     ... ... $.. $.. 
20000534:	052c 2000 052c 2000 0534 2000 0534 2000     ,.. ,.. 4.. 4.. 
20000544:	053c 2000 053c 2000 0544 2000 0544 2000     <.. <.. D.. D.. 
20000554:	054c 2000 054c 2000 0554 2000 0554 2000     L.. L.. T.. T.. 
20000564:	055c 2000 055c 2000 0564 2000 0564 2000     \.. \.. d.. d.. 
20000574:	056c 2000 056c 2000 0574 2000 0574 2000     l.. l.. t.. t.. 
20000584:	057c 2000 057c 2000 0584 2000 0584 2000     |.. |.. ... ... 
20000594:	058c 2000 058c 2000 0594 2000 0594 2000     ... ... ... ... 
200005a4:	059c 2000 059c 2000 05a4 2000 05a4 2000     ... ... ... ... 
200005b4:	05ac 2000 05ac 2000 05b4 2000 05b4 2000     ... ... ... ... 
200005c4:	05bc 2000 05bc 2000 05c4 2000 05c4 2000     ... ... ... ... 
200005d4:	05cc 2000 05cc 2000 05d4 2000 05d4 2000     ... ... ... ... 
200005e4:	05dc 2000 05dc 2000 05e4 2000 05e4 2000     ... ... ... ... 
200005f4:	05ec 2000 05ec 2000 05f4 2000 05f4 2000     ... ... ... ... 
20000604:	05fc 2000 05fc 2000 0604 2000 0604 2000     ... ... ... ... 
20000614:	060c 2000 060c 2000 0614 2000 0614 2000     ... ... ... ... 
20000624:	061c 2000 061c 2000 0624 2000 0624 2000     ... ... $.. $.. 
20000634:	062c 2000 062c 2000 0634 2000 0634 2000     ,.. ,.. 4.. 4.. 
20000644:	063c 2000 063c 2000 0644 2000 0644 2000     <.. <.. D.. D.. 
20000654:	064c 2000 064c 2000 0654 2000 0654 2000     L.. L.. T.. T.. 
20000664:	065c 2000 065c 2000 0664 2000 0664 2000     \.. \.. d.. d.. 
20000674:	066c 2000 066c 2000 0674 2000 0674 2000     l.. l.. t.. t.. 
20000684:	067c 2000 067c 2000 0684 2000 0684 2000     |.. |.. ... ... 
20000694:	068c 2000 068c 2000 0694 2000 0694 2000     ... ... ... ... 
200006a4:	069c 2000 069c 2000 06a4 2000 06a4 2000     ... ... ... ... 
200006b4:	06ac 2000 06ac 2000 06b4 2000 06b4 2000     ... ... ... ... 
200006c4:	06bc 2000 06bc 2000 06c4 2000 06c4 2000     ... ... ... ... 
200006d4:	06cc 2000 06cc 2000 06d4 2000 06d4 2000     ... ... ... ... 
200006e4:	06dc 2000 06dc 2000 06e4 2000 06e4 2000     ... ... ... ... 
200006f4:	06ec 2000 06ec 2000 06f4 2000 06f4 2000     ... ... ... ... 
20000704:	06fc 2000 06fc 2000 0704 2000 0704 2000     ... ... ... ... 
20000714:	070c 2000 070c 2000 0714 2000 0714 2000     ... ... ... ... 
20000724:	071c 2000 071c 2000 0724 2000 0724 2000     ... ... $.. $.. 
20000734:	072c 2000 072c 2000 0734 2000 0734 2000     ,.. ,.. 4.. 4.. 
20000744:	073c 2000 073c 2000 0744 2000 0744 2000     <.. <.. D.. D.. 
20000754:	074c 2000 074c 2000 0754 2000 0754 2000     L.. L.. T.. T.. 
20000764:	075c 2000 075c 2000 0764 2000 0764 2000     \.. \.. d.. d.. 
20000774:	076c 2000 076c 2000 0774 2000 0774 2000     l.. l.. t.. t.. 
20000784:	077c 2000 077c 2000 0784 2000 0784 2000     |.. |.. ... ... 
20000794:	078c 2000 078c 2000 0794 2000 0794 2000     ... ... ... ... 
200007a4:	079c 2000 079c 2000 07a4 2000 07a4 2000     ... ... ... ... 
200007b4:	07ac 2000 07ac 2000 07b4 2000 07b4 2000     ... ... ... ... 
200007c4:	07bc 2000 07bc 2000 07c4 2000 07c4 2000     ... ... ... ... 
200007d4:	07cc 2000 07cc 2000 07d4 2000 07d4 2000     ... ... ... ... 
200007e4:	07dc 2000 07dc 2000 07e4 2000 07e4 2000     ... ... ... ... 
200007f4:	07ec 2000 07ec 2000 07f4 2000 07f4 2000     ... ... ... ... 
20000804:	07fc 2000 07fc 2000 0804 2000 0804 2000     ... ... ... ... 
20000814:	080c 2000 080c 2000 0814 2000 0814 2000     ... ... ... ... 
20000824:	081c 2000 081c 2000 0824 2000 0824 2000     ... ... $.. $.. 
20000834:	082c 2000 082c 2000 0834 2000 0834 2000     ,.. ,.. 4.. 4.. 
20000844:	083c 2000 083c 2000 0844 2000 0844 2000     <.. <.. D.. D.. 
20000854:	084c 2000 084c 2000 0854 2000 0854 2000     L.. L.. T.. T.. 
20000864:	085c 2000 085c 2000 0864 2000 0864 2000     \.. \.. d.. d.. 
20000874:	086c 2000 086c 2000 0874 2000 0874 2000     l.. l.. t.. t.. 
20000884:	087c 2000 087c 2000 0884 2000 0884 2000     |.. |.. ... ... 
20000894:	088c 2000 088c 2000 0894 2000 0894 2000     ... ... ... ... 
200008a4:	089c 2000 089c 2000 08a4 2000 08a4 2000     ... ... ... ... 
200008b4:	08ac 2000 08ac 2000 08b4 2000 08b4 2000     ... ... ... ... 
200008c4:	08bc 2000 08bc 2000 08c4 2000 08c4 2000     ... ... ... ... 
200008d4:	08cc 2000 08cc 2000 08d4 2000 08d4 2000     ... ... ... ... 
200008e4:	08dc 2000 08dc 2000 08e4 2000 08e4 2000     ... ... ... ... 
200008f4:	08ec 2000 08ec 2000 08f4 2000 08f4 2000     ... ... ... ... 

20000904 <__malloc_sbrk_base>:
20000904:	ffff ffff                                   ....

20000908 <__malloc_trim_threshold>:
20000908:	0000 0002                                   ....

2000090c <__wctomb>:
2000090c:	5485 0000                                   .T..
