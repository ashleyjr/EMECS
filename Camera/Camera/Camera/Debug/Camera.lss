
Camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005a10  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00005a10  00005a10  0000da10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000910  20000000  00005a18  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000164  20000910  00006328  00010910  2**2
                  ALLOC
  4 .stack        00001004  20000a74  0000648c  00010910  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00010910  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  0001093a  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002a750  00000000  00000000  000109ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00007a54  00000000  00000000  0003b0fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000010d0  00000000  00000000  00042b50  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000e10  00000000  00000000  00043c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00031468  00000000  00000000  00044a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00018ba1  00000000  00000000  00075e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000e562f  00000000  00000000  0008ea39  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002454  00000000  00000000  00174068  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000e0b9  00000000  00000000  001764bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20001a78 	.word	0x20001a78
       4:	00002e69 	.word	0x00002e69
       8:	00002e65 	.word	0x00002e65
       c:	00002e65 	.word	0x00002e65
      10:	00002e65 	.word	0x00002e65
      14:	00002e65 	.word	0x00002e65
      18:	00002e65 	.word	0x00002e65
	...
      2c:	00002e65 	.word	0x00002e65
      30:	00002e65 	.word	0x00002e65
      34:	00000000 	.word	0x00000000
      38:	00002e65 	.word	0x00002e65
      3c:	00002e65 	.word	0x00002e65
      40:	00002e65 	.word	0x00002e65
      44:	00000551 	.word	0x00000551
      48:	00000565 	.word	0x00000565
      4c:	00000579 	.word	0x00000579
      50:	0000058d 	.word	0x0000058d
      54:	000005a1 	.word	0x000005a1
      58:	000005b5 	.word	0x000005b5
      5c:	000005c9 	.word	0x000005c9
      60:	000005dd 	.word	0x000005dd
      64:	000005f1 	.word	0x000005f1
      68:	00000605 	.word	0x00000605
      6c:	00000619 	.word	0x00000619
      70:	0000062d 	.word	0x0000062d
      74:	00000641 	.word	0x00000641
      78:	00000655 	.word	0x00000655
      7c:	00000669 	.word	0x00000669
      80:	0000067d 	.word	0x0000067d
      84:	00002e65 	.word	0x00002e65
      88:	00002e65 	.word	0x00002e65
      8c:	00002e65 	.word	0x00002e65
      90:	00002e65 	.word	0x00002e65
      94:	00002e65 	.word	0x00002e65
      98:	00002e65 	.word	0x00002e65
      9c:	00002e65 	.word	0x00002e65
      a0:	00002e65 	.word	0x00002e65
      a4:	00002e65 	.word	0x00002e65
      a8:	00002e65 	.word	0x00002e65
      ac:	00002e65 	.word	0x00002e65
      b0:	00002e65 	.word	0x00002e65
      b4:	00002e65 	.word	0x00002e65
      b8:	00002e65 	.word	0x00002e65
      bc:	00002e65 	.word	0x00002e65
      c0:	00002e65 	.word	0x00002e65
      c4:	00002e65 	.word	0x00002e65
      c8:	00002e65 	.word	0x00002e65
      cc:	00002e65 	.word	0x00002e65
      d0:	00002e65 	.word	0x00002e65
      d4:	00002e65 	.word	0x00002e65
      d8:	00002e65 	.word	0x00002e65
      dc:	00002e65 	.word	0x00002e65
      e0:	00002e65 	.word	0x00002e65
      e4:	00002e65 	.word	0x00002e65
      e8:	00002e65 	.word	0x00002e65
      ec:	00002e65 	.word	0x00002e65
      f0:	00002e65 	.word	0x00002e65
      f4:	00002e65 	.word	0x00002e65
      f8:	00002e65 	.word	0x00002e65
      fc:	00002e65 	.word	0x00002e65
     100:	00002e65 	.word	0x00002e65
     104:	00002e65 	.word	0x00002e65
     108:	00002e65 	.word	0x00002e65
     10c:	00002e65 	.word	0x00002e65
     110:	00002e65 	.word	0x00002e65
     114:	00002e65 	.word	0x00002e65
     118:	00002e65 	.word	0x00002e65
     11c:	00002e65 	.word	0x00002e65
     120:	00002e65 	.word	0x00002e65
     124:	00002e65 	.word	0x00002e65
     128:	00002e65 	.word	0x00002e65
     12c:	00002e65 	.word	0x00002e65
     130:	00002e65 	.word	0x00002e65
     134:	00000e25 	.word	0x00000e25
     138:	00002e65 	.word	0x00002e65
     13c:	00000e3d 	.word	0x00000e3d
     140:	00002e65 	.word	0x00002e65
     144:	00002e65 	.word	0x00002e65
     148:	00002e65 	.word	0x00002e65
     14c:	00002e65 	.word	0x00002e65
     150:	00002e65 	.word	0x00002e65
     154:	00002e65 	.word	0x00002e65
     158:	00002e65 	.word	0x00002e65
     15c:	00002e65 	.word	0x00002e65
     160:	00002e65 	.word	0x00002e65
     164:	00002e65 	.word	0x00002e65
     168:	00002e65 	.word	0x00002e65
     16c:	00002e65 	.word	0x00002e65
     170:	00002e65 	.word	0x00002e65
     174:	00000e55 	.word	0x00000e55
     178:	00000e6d 	.word	0x00000e6d
     17c:	00002e65 	.word	0x00002e65

00000180 <deregister_tm_clones>:
     180:	b508      	push	{r3, lr}
     182:	4805      	ldr	r0, [pc, #20]	; (198 <deregister_tm_clones+0x18>)
     184:	4b05      	ldr	r3, [pc, #20]	; (19c <deregister_tm_clones+0x1c>)
     186:	1a19      	subs	r1, r3, r0
     188:	2906      	cmp	r1, #6
     18a:	d800      	bhi.n	18e <deregister_tm_clones+0xe>
     18c:	bd08      	pop	{r3, pc}
     18e:	4a04      	ldr	r2, [pc, #16]	; (1a0 <deregister_tm_clones+0x20>)
     190:	2a00      	cmp	r2, #0
     192:	d0fb      	beq.n	18c <deregister_tm_clones+0xc>
     194:	4790      	blx	r2
     196:	e7f9      	b.n	18c <deregister_tm_clones+0xc>
     198:	00005a18 	.word	0x00005a18
     19c:	00005a1b 	.word	0x00005a1b
     1a0:	00000000 	.word	0x00000000

000001a4 <register_tm_clones>:
     1a4:	b508      	push	{r3, lr}
     1a6:	4807      	ldr	r0, [pc, #28]	; (1c4 <register_tm_clones+0x20>)
     1a8:	4b07      	ldr	r3, [pc, #28]	; (1c8 <register_tm_clones+0x24>)
     1aa:	1a19      	subs	r1, r3, r0
     1ac:	108a      	asrs	r2, r1, #2
     1ae:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
     1b2:	1059      	asrs	r1, r3, #1
     1b4:	d100      	bne.n	1b8 <register_tm_clones+0x14>
     1b6:	bd08      	pop	{r3, pc}
     1b8:	4a04      	ldr	r2, [pc, #16]	; (1cc <register_tm_clones+0x28>)
     1ba:	2a00      	cmp	r2, #0
     1bc:	d0fb      	beq.n	1b6 <register_tm_clones+0x12>
     1be:	4790      	blx	r2
     1c0:	e7f9      	b.n	1b6 <register_tm_clones+0x12>
     1c2:	bf00      	nop
     1c4:	00005a18 	.word	0x00005a18
     1c8:	00005a18 	.word	0x00005a18
     1cc:	00000000 	.word	0x00000000

000001d0 <__do_global_dtors_aux>:
     1d0:	b510      	push	{r4, lr}
     1d2:	4c06      	ldr	r4, [pc, #24]	; (1ec <__do_global_dtors_aux+0x1c>)
     1d4:	7823      	ldrb	r3, [r4, #0]
     1d6:	b943      	cbnz	r3, 1ea <__do_global_dtors_aux+0x1a>
     1d8:	f7ff ffd2 	bl	180 <deregister_tm_clones>
     1dc:	4804      	ldr	r0, [pc, #16]	; (1f0 <__do_global_dtors_aux+0x20>)
     1de:	b110      	cbz	r0, 1e6 <__do_global_dtors_aux+0x16>
     1e0:	4804      	ldr	r0, [pc, #16]	; (1f4 <__do_global_dtors_aux+0x24>)
     1e2:	f3af 8000 	nop.w
     1e6:	2101      	movs	r1, #1
     1e8:	7021      	strb	r1, [r4, #0]
     1ea:	bd10      	pop	{r4, pc}
     1ec:	20000910 	.word	0x20000910
     1f0:	00000000 	.word	0x00000000
     1f4:	00005a18 	.word	0x00005a18

000001f8 <frame_dummy>:
     1f8:	b508      	push	{r3, lr}
     1fa:	4b08      	ldr	r3, [pc, #32]	; (21c <frame_dummy+0x24>)
     1fc:	b11b      	cbz	r3, 206 <frame_dummy+0xe>
     1fe:	4808      	ldr	r0, [pc, #32]	; (220 <frame_dummy+0x28>)
     200:	4908      	ldr	r1, [pc, #32]	; (224 <frame_dummy+0x2c>)
     202:	f3af 8000 	nop.w
     206:	4808      	ldr	r0, [pc, #32]	; (228 <frame_dummy+0x30>)
     208:	6801      	ldr	r1, [r0, #0]
     20a:	b111      	cbz	r1, 212 <frame_dummy+0x1a>
     20c:	4a07      	ldr	r2, [pc, #28]	; (22c <frame_dummy+0x34>)
     20e:	b102      	cbz	r2, 212 <frame_dummy+0x1a>
     210:	4790      	blx	r2
     212:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     216:	f7ff bfc5 	b.w	1a4 <register_tm_clones>
     21a:	bf00      	nop
     21c:	00000000 	.word	0x00000000
     220:	00005a18 	.word	0x00005a18
     224:	20000914 	.word	0x20000914
     228:	00005a18 	.word	0x00005a18
     22c:	00000000 	.word	0x00000000

00000230 <write_twi>:
 * \brief Write the data pattern to the target.
 *
 * \return STATUS_OK   if all bytes were written, error code otherwise.
 */
static status_code_t write_twi(unsigned char regID, unsigned char regDat)
{
     230:	b508      	push	{r3, lr}
	/* TWI chip address to communicate with */
	packet_tx.chip = OV7670_ADDR;
     232:	f640 13f8 	movw	r3, #2552	; 0x9f8
     236:	f2c2 0300 	movt	r3, #8192	; 0x2000
     23a:	f04f 0221 	mov.w	r2, #33	; 0x21
     23e:	601a      	str	r2, [r3, #0]
	/* TWI address/commands to issue to the other chip (node) */
	packet_tx.addr[0] = regID; //(VIRTUALMEM_ADDR >> 16) & 0xFF;
     240:	7118      	strb	r0, [r3, #4]
	packet_tx.addr[1] = (VIRTUALMEM_ADDR >> 8) & 0xFF;
     242:	f04f 0000 	mov.w	r0, #0
     246:	7158      	strb	r0, [r3, #5]
	/* Length of the TWI data address segment (1-3 bytes) */
	packet_tx.addr_length = 1;
     248:	f04f 0201 	mov.w	r2, #1
     24c:	71da      	strb	r2, [r3, #7]
	/* Where to find the data to be written */
	write_data[0] = regDat;
     24e:	f640 102c 	movw	r0, #2348	; 0x92c
     252:	f2c2 0000 	movt	r0, #8192	; 0x2000
     256:	7001      	strb	r1, [r0, #0]
	packet_tx.buffer = (void *) write_data;
     258:	6098      	str	r0, [r3, #8]
	/* How many bytes do we want to write */
	packet_tx.length = PATTERN_TEST_LENGTH;
     25a:	60da      	str	r2, [r3, #12]
	//printf("Writing data to TARGET\r\n");
	/* Write data to TARGET */
	return twi_master_write(EXAMPLE_TWIM, &packet_tx);
     25c:	f44f 4040 	mov.w	r0, #49152	; 0xc000
     260:	f2c4 0007 	movt	r0, #16391	; 0x4007
     264:	4619      	mov	r1, r3
     266:	f640 23d5 	movw	r3, #2773	; 0xad5
     26a:	f2c0 0300 	movt	r3, #0
     26e:	4798      	blx	r3
}
     270:	bd08      	pop	{r3, pc}
     272:	bf00      	nop

00000274 <OV7670_init>:
		return twi_master_write(EXAMPLE_TWIM, &tx);

}

unsigned char OV7670_init(void)
{
     274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     278:	b087      	sub	sp, #28
	uint8_t temp;
	status_code_t status;
	printf("Inialising I2C\n\r");
     27a:	f645 1024 	movw	r0, #22820	; 0x5924
     27e:	f2c0 0000 	movt	r0, #0
     282:	f243 05ed 	movw	r5, #12525	; 0x30ed
     286:	f2c0 0500 	movt	r5, #0
     28a:	47a8      	blx	r5
uint32_t cpu_speed = 0;

static status_code_t init_twi(void)
{
	/* Set TWIM options */
	cpu_speed = sysclk_get_peripheral_bus_hz(EXAMPLE_TWIM);
     28c:	f44f 4440 	mov.w	r4, #49152	; 0xc000
     290:	f2c4 0407 	movt	r4, #16391	; 0x4007
     294:	4620      	mov	r0, r4
     296:	f241 73e1 	movw	r3, #6113	; 0x17e1
     29a:	f2c0 0300 	movt	r3, #0
     29e:	4798      	blx	r3
     2a0:	f640 1130 	movw	r1, #2352	; 0x930
     2a4:	f2c2 0100 	movt	r1, #8192	; 0x2000
     2a8:	6008      	str	r0, [r1, #0]
	struct twim_config opts = {
     2aa:	9000      	str	r0, [sp, #0]
     2ac:	f248 60a0 	movw	r0, #34464	; 0x86a0
     2b0:	f2c0 0001 	movt	r0, #1
     2b4:	9001      	str	r0, [sp, #4]
     2b6:	f04f 0100 	mov.w	r1, #0
     2ba:	9102      	str	r1, [sp, #8]
     2bc:	f88d 100c 	strb.w	r1, [sp, #12]
     2c0:	f88d 100d 	strb.w	r1, [sp, #13]
     2c4:	f88d 100e 	strb.w	r1, [sp, #14]
     2c8:	f88d 100f 	strb.w	r1, [sp, #15]
     2cc:	f88d 1010 	strb.w	r1, [sp, #16]
     2d0:	f88d 1011 	strb.w	r1, [sp, #17]
     2d4:	f88d 1012 	strb.w	r1, [sp, #18]
     2d8:	f88d 1013 	strb.w	r1, [sp, #19]
     2dc:	f88d 1014 	strb.w	r1, [sp, #20]
     2e0:	f88d 1015 	strb.w	r1, [sp, #21]
     2e4:	f88d 1016 	strb.w	r1, [sp, #22]
     2e8:	f88d 1017 	strb.w	r1, [sp, #23]
		.hs_clock_drive_strength_low = 0,
		.hs_data_slew_limit = 0,
		.hs_data_drive_strength_low = 0,
	};
	/* Initialize the TWIM Module */
	twim_set_callback(EXAMPLE_TWIM, 0, twim_default_callback, 1);
     2ec:	4620      	mov	r0, r4
     2ee:	f240 62c9 	movw	r2, #1737	; 0x6c9
     2f2:	f2c0 0200 	movt	r2, #0
     2f6:	f04f 0301 	mov.w	r3, #1
     2fa:	f640 5625 	movw	r6, #3365	; 0xd25
     2fe:	f2c0 0600 	movt	r6, #0
     302:	47b0      	blx	r6

	return twim_set_config(EXAMPLE_TWIM, &opts);
     304:	4620      	mov	r0, r4
     306:	4669      	mov	r1, sp
     308:	f640 12b9 	movw	r2, #2489	; 0x9b9
     30c:	f2c0 0200 	movt	r2, #0
     310:	4790      	blx	r2
{
	uint8_t temp;
	status_code_t status;
	printf("Inialising I2C\n\r");
	init_twi();
	printf("Inialising Camera\n\r");
     312:	f645 1038 	movw	r0, #22840	; 0x5938
     316:	f2c0 0000 	movt	r0, #0
     31a:	47a8      	blx	r5

	status = write_twi(OV_COM7,0x80);
     31c:	f04f 0012 	mov.w	r0, #18
     320:	f04f 0180 	mov.w	r1, #128	; 0x80
     324:	f240 2331 	movw	r3, #561	; 0x231
     328:	f2c0 0300 	movt	r3, #0
     32c:	4798      	blx	r3
	if(STATUS_OK != status)
     32e:	bb58      	cbnz	r0, 388 <OV7670_init+0x114>
		return STATUS_ERR_DENIED;
	delay_ms(10);
     330:	f248 50da 	movw	r0, #34266	; 0x85da
     334:	f240 0401 	movw	r4, #1
     338:	f2c2 0400 	movt	r4, #8192	; 0x2000
     33c:	47a0      	blx	r4
     33e:	f245 74d4 	movw	r4, #22484	; 0x57d4
     342:	f2c0 0400 	movt	r4, #0
		printf("Addr: %02x \r\n", tx.chip);
		return twi_master_write(EXAMPLE_TWIM, &tx);

}

unsigned char OV7670_init(void)
     346:	f504 79a7 	add.w	r9, r4, #334	; 0x14e
		return STATUS_ERR_DENIED;
	delay_ms(10);
	
	for(temp = 0; temp < SETTINGS_LENGTH; temp++)
	{
		if( STATUS_OK != write_twi(default_settings[temp][0], default_settings[temp][1] ))
     34a:	f240 2631 	movw	r6, #561	; 0x231
     34e:	f2c0 0600 	movt	r6, #0
		{
			return STATUS_ERR_DENIED;
		}
		delay_ms(1);
     352:	f640 5863 	movw	r8, #3427	; 0xd63
     356:	f240 0701 	movw	r7, #1
     35a:	f2c2 0700 	movt	r7, #8192	; 0x2000
		return STATUS_ERR_DENIED;
	delay_ms(10);
	
	for(temp = 0; temp < SETTINGS_LENGTH; temp++)
	{
		if( STATUS_OK != write_twi(default_settings[temp][0], default_settings[temp][1] ))
     35e:	7820      	ldrb	r0, [r4, #0]
     360:	7861      	ldrb	r1, [r4, #1]
     362:	47b0      	blx	r6
     364:	b1c0      	cbz	r0, 398 <OV7670_init+0x124>
     366:	e012      	b.n	38e <OV7670_init+0x11a>
     368:	7820      	ldrb	r0, [r4, #0]
     36a:	7861      	ldrb	r1, [r4, #1]
     36c:	47b0      	blx	r6
     36e:	b970      	cbnz	r0, 38e <OV7670_init+0x11a>
		{
			return STATUS_ERR_DENIED;
		}
		delay_ms(1);
     370:	4640      	mov	r0, r8
     372:	47b8      	blx	r7
     374:	f104 0502 	add.w	r5, r4, #2
		return STATUS_ERR_DENIED;
	delay_ms(10);
	
	for(temp = 0; temp < SETTINGS_LENGTH; temp++)
	{
		if( STATUS_OK != write_twi(default_settings[temp][0], default_settings[temp][1] ))
     378:	78a0      	ldrb	r0, [r4, #2]
     37a:	7869      	ldrb	r1, [r5, #1]
     37c:	47b0      	blx	r6
     37e:	b180      	cbz	r0, 3a2 <OV7670_init+0x12e>
     380:	e005      	b.n	38e <OV7670_init+0x11a>
	// 	temp=0x80;
// 	if(STATUS_OK!=wrOV7670Reg(OV_COM7, temp)) //Reset Camera
// 	{
// 		return STATUS_ERR_DENIED;
// 	}
	return STATUS_OK;
     382:	f04f 0000 	mov.w	r0, #0
     386:	e004      	b.n	392 <OV7670_init+0x11e>
	init_twi();
	printf("Inialising Camera\n\r");

	status = write_twi(OV_COM7,0x80);
	if(STATUS_OK != status)
		return STATUS_ERR_DENIED;
     388:	f04f 001c 	mov.w	r0, #28
     38c:	e001      	b.n	392 <OV7670_init+0x11e>
	
	for(temp = 0; temp < SETTINGS_LENGTH; temp++)
	{
		if( STATUS_OK != write_twi(default_settings[temp][0], default_settings[temp][1] ))
		{
			return STATUS_ERR_DENIED;
     38e:	f04f 001c 	mov.w	r0, #28
// 	if(STATUS_OK!=wrOV7670Reg(OV_COM7, temp)) //Reset Camera
// 	{
// 		return STATUS_ERR_DENIED;
// 	}
	return STATUS_OK;
     392:	b007      	add	sp, #28
     394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	{
		if( STATUS_OK != write_twi(default_settings[temp][0], default_settings[temp][1] ))
		{
			return STATUS_ERR_DENIED;
		}
		delay_ms(1);
     398:	4640      	mov	r0, r8
     39a:	47b8      	blx	r7
     39c:	f104 0402 	add.w	r4, r4, #2
     3a0:	e7e2      	b.n	368 <OV7670_init+0xf4>
     3a2:	4640      	mov	r0, r8
     3a4:	47b8      	blx	r7
     3a6:	f105 0402 	add.w	r4, r5, #2
	status = write_twi(OV_COM7,0x80);
	if(STATUS_OK != status)
		return STATUS_ERR_DENIED;
	delay_ms(10);
	
	for(temp = 0; temp < SETTINGS_LENGTH; temp++)
     3aa:	454c      	cmp	r4, r9
     3ac:	d1dc      	bne.n	368 <OV7670_init+0xf4>
     3ae:	e7e8      	b.n	382 <OV7670_init+0x10e>

000003b0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     3b4:	460c      	mov	r4, r1
     3b6:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     3b8:	bb48      	cbnz	r0, 40e <_read+0x5e>
		return -1;
	}

	for (; len > 0; --len) {
     3ba:	2a00      	cmp	r2, #0
     3bc:	dd2b      	ble.n	416 <_read+0x66>

int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
     3be:	188f      	adds	r7, r1, r2
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
     3c0:	f640 261c 	movw	r6, #2588	; 0xa1c
     3c4:	f2c2 0600 	movt	r6, #8192	; 0x2000
     3c8:	f640 2514 	movw	r5, #2580	; 0xa14
     3cc:	f2c2 0500 	movt	r5, #8192	; 0x2000
     3d0:	ea6f 0901 	mvn.w	r9, r1
     3d4:	eb07 0009 	add.w	r0, r7, r9
     3d8:	f000 0901 	and.w	r9, r0, #1
     3dc:	6830      	ldr	r0, [r6, #0]
     3de:	682b      	ldr	r3, [r5, #0]
     3e0:	4798      	blx	r3
		ptr++;
     3e2:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     3e6:	42bc      	cmp	r4, r7
     3e8:	d119      	bne.n	41e <_read+0x6e>
     3ea:	e00d      	b.n	408 <_read+0x58>
		ptr_get(stdio_base, ptr);
     3ec:	6830      	ldr	r0, [r6, #0]
     3ee:	682b      	ldr	r3, [r5, #0]
     3f0:	4621      	mov	r1, r4
     3f2:	4798      	blx	r3
		ptr++;
     3f4:	f104 0401 	add.w	r4, r4, #1
     3f8:	4621      	mov	r1, r4
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
     3fa:	6830      	ldr	r0, [r6, #0]
     3fc:	682a      	ldr	r2, [r5, #0]
     3fe:	4790      	blx	r2
		ptr++;
     400:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     404:	42bc      	cmp	r4, r7
     406:	d1f1      	bne.n	3ec <_read+0x3c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
     408:	4640      	mov	r0, r8
     40a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
     40e:	f04f 30ff 	mov.w	r0, #4294967295
     412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	for (; len > 0; --len) {
     416:	f04f 0000 	mov.w	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
     41a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     41e:	f1b9 0f00 	cmp.w	r9, #0
     422:	d0e3      	beq.n	3ec <_read+0x3c>
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
     424:	6830      	ldr	r0, [r6, #0]
     426:	682a      	ldr	r2, [r5, #0]
     428:	4621      	mov	r1, r4
     42a:	4790      	blx	r2
		ptr++;
     42c:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     430:	42bc      	cmp	r4, r7
     432:	d1db      	bne.n	3ec <_read+0x3c>
     434:	e7e8      	b.n	408 <_read+0x58>
     436:	bf00      	nop

00000438 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
     438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     43c:	460d      	mov	r5, r1
     43e:	4690      	mov	r8, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     440:	f100 30ff 	add.w	r0, r0, #4294967295
     444:	2802      	cmp	r0, #2
     446:	d824      	bhi.n	492 <_write+0x5a>
		return -1;
	}

	for (; len != 0; --len) {
     448:	b332      	cbz	r2, 498 <_write+0x60>
		if (ptr_put(stdio_base, *ptr++) < 0) {
     44a:	f640 261c 	movw	r6, #2588	; 0xa1c
     44e:	f2c2 0600 	movt	r6, #8192	; 0x2000
     452:	f640 2718 	movw	r7, #2584	; 0xa18
     456:	f2c2 0700 	movt	r7, #8192	; 0x2000
     45a:	f04f 0400 	mov.w	r4, #0
     45e:	f102 39ff 	add.w	r9, r2, #4294967295
     462:	f009 0901 	and.w	r9, r9, #1
     466:	6830      	ldr	r0, [r6, #0]
     468:	683b      	ldr	r3, [r7, #0]
     46a:	5d09      	ldrb	r1, [r1, r4]
     46c:	4798      	blx	r3
     46e:	42a0      	cmp	r0, r4
     470:	da1a      	bge.n	4a8 <_write+0x70>
     472:	e014      	b.n	49e <_write+0x66>
     474:	6830      	ldr	r0, [r6, #0]
     476:	683b      	ldr	r3, [r7, #0]
     478:	5d29      	ldrb	r1, [r5, r4]
     47a:	4798      	blx	r3
     47c:	2800      	cmp	r0, #0
     47e:	db0e      	blt.n	49e <_write+0x66>
			return -1;
		}
		++nChars;
     480:	f104 0401 	add.w	r4, r4, #1
	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
     484:	6830      	ldr	r0, [r6, #0]
     486:	683a      	ldr	r2, [r7, #0]
     488:	5d29      	ldrb	r1, [r5, r4]
     48a:	4790      	blx	r2
     48c:	2800      	cmp	r0, #0
     48e:	da1d      	bge.n	4cc <_write+0x94>
     490:	e005      	b.n	49e <_write+0x66>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
     492:	f04f 34ff 	mov.w	r4, #4294967295
     496:	e004      	b.n	4a2 <_write+0x6a>
	}

	for (; len != 0; --len) {
     498:	f04f 0400 	mov.w	r4, #0
     49c:	e001      	b.n	4a2 <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
     49e:	f04f 34ff 	mov.w	r4, #4294967295
		}
		++nChars;
	}
	return nChars;
}
     4a2:	4620      	mov	r0, r4
     4a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
     4a8:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     4ac:	45a0      	cmp	r8, r4
     4ae:	d0f8      	beq.n	4a2 <_write+0x6a>
     4b0:	f1b9 0f00 	cmp.w	r9, #0
     4b4:	d0de      	beq.n	474 <_write+0x3c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
     4b6:	6830      	ldr	r0, [r6, #0]
     4b8:	683a      	ldr	r2, [r7, #0]
     4ba:	5d29      	ldrb	r1, [r5, r4]
     4bc:	4790      	blx	r2
     4be:	2800      	cmp	r0, #0
     4c0:	dbed      	blt.n	49e <_write+0x66>
			return -1;
		}
		++nChars;
     4c2:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     4c6:	45a0      	cmp	r8, r4
     4c8:	d1d4      	bne.n	474 <_write+0x3c>
     4ca:	e7ea      	b.n	4a2 <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
     4cc:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     4d0:	45a0      	cmp	r8, r4
     4d2:	d1cf      	bne.n	474 <_write+0x3c>
     4d4:	e7e5      	b.n	4a2 <_write+0x6a>
     4d6:	bf00      	nop

000004d8 <pdca_channel_get_handler>:
 */
volatile PdcaChannel *pdca_channel_get_handler(pdca_channel_num_t
		pdca_ch_number)
{
	if (pdca_ch_number >= PDCA_NUMBER_OF_CHANNELS)
		pdca_ch_number = 0;
     4d8:	280f      	cmp	r0, #15
     4da:	bf88      	it	hi
     4dc:	2000      	movhi	r0, #0

	/* Get the correct channel pointer */
	volatile PdcaChannel *pdca_channel =
     4de:	ea4f 1080 	mov.w	r0, r0, lsl #6
     4e2:	f100 4180 	add.w	r1, r0, #1073741824	; 0x40000000
			&(PDCA->PDCA_CHANNEL[pdca_ch_number]);

	return pdca_channel;
}
     4e6:	f501 2022 	add.w	r0, r1, #663552	; 0xa2000
     4ea:	4770      	bx	lr

000004ec <pdca_get_channel_status>:
 *
 * \return 1 if channel transfer is enabled, else 0
 */
enum pdca_channel_status
		pdca_get_channel_status(pdca_channel_num_t pdca_ch_number)
{
     4ec:	b508      	push	{r3, lr}
	/* Get the correct channel pointer */
	volatile PdcaChannel *pdca_channel =
     4ee:	f240 43d9 	movw	r3, #1241	; 0x4d9
     4f2:	f2c0 0300 	movt	r3, #0
     4f6:	4798      	blx	r3
			pdca_channel_get_handler(pdca_ch_number);
	uint32_t status = pdca_channel->PDCA_SR;
     4f8:	69c1      	ldr	r1, [r0, #28]
	uint32_t intflag = pdca_channel->PDCA_ISR;
     4fa:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	if ((status & PDCA_SR_TEN) == PDCA_SR_TEN) {
     4fc:	f011 0f01 	tst.w	r1, #1
     500:	d00c      	beq.n	51c <pdca_get_channel_status+0x30>
		if ((intflag & PDCA_ISR_TERR) == PDCA_ISR_TERR) {
     502:	f010 0f04 	tst.w	r0, #4
     506:	d10c      	bne.n	522 <pdca_get_channel_status+0x36>
			return PDCA_CH_TRANSFER_ERROR;
		} else if ((intflag & PDCA_ISR_TRC) == PDCA_ISR_TRC) {
     508:	f010 0f02 	tst.w	r0, #2
     50c:	d10c      	bne.n	528 <pdca_get_channel_status+0x3c>
			return PDCA_CH_TRANSFER_COMPLETED;
		} else if ((intflag & PDCA_ISR_RCZ) == PDCA_ISR_RCZ) {
     50e:	f000 0201 	and.w	r2, r0, #1
			return PDCA_CH_COUNTER_RELOAD_IS_ZERO;
     512:	2a00      	cmp	r2, #0
     514:	bf0c      	ite	eq
     516:	2001      	moveq	r0, #1
     518:	2002      	movne	r0, #2
     51a:	bd08      	pop	{r3, pc}
		}
		return PDCA_CH_BUSY;
	} else {
		return PDCA_CH_FREE;
     51c:	f04f 0000 	mov.w	r0, #0
     520:	bd08      	pop	{r3, pc}
	uint32_t status = pdca_channel->PDCA_SR;
	uint32_t intflag = pdca_channel->PDCA_ISR;

	if ((status & PDCA_SR_TEN) == PDCA_SR_TEN) {
		if ((intflag & PDCA_ISR_TERR) == PDCA_ISR_TERR) {
			return PDCA_CH_TRANSFER_ERROR;
     522:	f04f 0004 	mov.w	r0, #4
     526:	bd08      	pop	{r3, pc}
		} else if ((intflag & PDCA_ISR_TRC) == PDCA_ISR_TRC) {
			return PDCA_CH_TRANSFER_COMPLETED;
     528:	f04f 0003 	mov.w	r0, #3
		}
		return PDCA_CH_BUSY;
	} else {
		return PDCA_CH_FREE;
	}
}
     52c:	bd08      	pop	{r3, pc}
     52e:	bf00      	nop

00000530 <pdca_channel_interrupt>:
 * pdca_channel_set_callback() function.
 *
 * \param pdca_ch_number PDCA channel number to handle interrupt for
 */
static void pdca_channel_interrupt(const pdca_channel_num_t pdca_ch_number)
{
     530:	b510      	push	{r4, lr}
     532:	4604      	mov	r4, r0
	enum pdca_channel_status status;

	status = pdca_get_channel_status(pdca_ch_number);
     534:	f240 43ed 	movw	r3, #1261	; 0x4ed
     538:	f2c0 0300 	movt	r3, #0
     53c:	4798      	blx	r3

	if (pdca_callback_pointer[pdca_ch_number]) {
     53e:	f640 2120 	movw	r1, #2592	; 0xa20
     542:	f2c2 0100 	movt	r1, #8192	; 0x2000
     546:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
     54a:	b102      	cbz	r2, 54e <pdca_channel_interrupt+0x1e>
		pdca_callback_pointer[pdca_ch_number] (status);
     54c:	4790      	blx	r2
     54e:	bd10      	pop	{r4, pc}

00000550 <PDCA_0_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 0.
 */
void PDCA_0_Handler(void)
{
     550:	b508      	push	{r3, lr}
	pdca_channel_interrupt(0);
     552:	f04f 0000 	mov.w	r0, #0
     556:	f240 5331 	movw	r3, #1329	; 0x531
     55a:	f2c0 0300 	movt	r3, #0
     55e:	4798      	blx	r3
     560:	bd08      	pop	{r3, pc}
     562:	bf00      	nop

00000564 <PDCA_1_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 1.
 */
void PDCA_1_Handler(void)
{
     564:	b508      	push	{r3, lr}
	pdca_channel_interrupt(1);
     566:	f04f 0001 	mov.w	r0, #1
     56a:	f240 5331 	movw	r3, #1329	; 0x531
     56e:	f2c0 0300 	movt	r3, #0
     572:	4798      	blx	r3
     574:	bd08      	pop	{r3, pc}
     576:	bf00      	nop

00000578 <PDCA_2_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 2.
 */
void PDCA_2_Handler(void)
{
     578:	b508      	push	{r3, lr}
	pdca_channel_interrupt(2);
     57a:	f04f 0002 	mov.w	r0, #2
     57e:	f240 5331 	movw	r3, #1329	; 0x531
     582:	f2c0 0300 	movt	r3, #0
     586:	4798      	blx	r3
     588:	bd08      	pop	{r3, pc}
     58a:	bf00      	nop

0000058c <PDCA_3_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 3.
 */
void PDCA_3_Handler(void)
{
     58c:	b508      	push	{r3, lr}
	pdca_channel_interrupt(3);
     58e:	f04f 0003 	mov.w	r0, #3
     592:	f240 5331 	movw	r3, #1329	; 0x531
     596:	f2c0 0300 	movt	r3, #0
     59a:	4798      	blx	r3
     59c:	bd08      	pop	{r3, pc}
     59e:	bf00      	nop

000005a0 <PDCA_4_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 4.
 */
void PDCA_4_Handler(void)
{
     5a0:	b508      	push	{r3, lr}
	pdca_channel_interrupt(4);
     5a2:	f04f 0004 	mov.w	r0, #4
     5a6:	f240 5331 	movw	r3, #1329	; 0x531
     5aa:	f2c0 0300 	movt	r3, #0
     5ae:	4798      	blx	r3
     5b0:	bd08      	pop	{r3, pc}
     5b2:	bf00      	nop

000005b4 <PDCA_5_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 5.
 */
void PDCA_5_Handler(void)
{
     5b4:	b508      	push	{r3, lr}
	pdca_channel_interrupt(5);
     5b6:	f04f 0005 	mov.w	r0, #5
     5ba:	f240 5331 	movw	r3, #1329	; 0x531
     5be:	f2c0 0300 	movt	r3, #0
     5c2:	4798      	blx	r3
     5c4:	bd08      	pop	{r3, pc}
     5c6:	bf00      	nop

000005c8 <PDCA_6_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 6.
 */
void PDCA_6_Handler(void)
{
     5c8:	b508      	push	{r3, lr}
	pdca_channel_interrupt(6);
     5ca:	f04f 0006 	mov.w	r0, #6
     5ce:	f240 5331 	movw	r3, #1329	; 0x531
     5d2:	f2c0 0300 	movt	r3, #0
     5d6:	4798      	blx	r3
     5d8:	bd08      	pop	{r3, pc}
     5da:	bf00      	nop

000005dc <PDCA_7_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 7.
 */
void PDCA_7_Handler(void)
{
     5dc:	b508      	push	{r3, lr}
	pdca_channel_interrupt(7);
     5de:	f04f 0007 	mov.w	r0, #7
     5e2:	f240 5331 	movw	r3, #1329	; 0x531
     5e6:	f2c0 0300 	movt	r3, #0
     5ea:	4798      	blx	r3
     5ec:	bd08      	pop	{r3, pc}
     5ee:	bf00      	nop

000005f0 <PDCA_8_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 8.
 */
void PDCA_8_Handler(void)
{
     5f0:	b508      	push	{r3, lr}
	pdca_channel_interrupt(8);
     5f2:	f04f 0008 	mov.w	r0, #8
     5f6:	f240 5331 	movw	r3, #1329	; 0x531
     5fa:	f2c0 0300 	movt	r3, #0
     5fe:	4798      	blx	r3
     600:	bd08      	pop	{r3, pc}
     602:	bf00      	nop

00000604 <PDCA_9_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 9.
 */
void PDCA_9_Handler(void)
{
     604:	b508      	push	{r3, lr}
	pdca_channel_interrupt(9);
     606:	f04f 0009 	mov.w	r0, #9
     60a:	f240 5331 	movw	r3, #1329	; 0x531
     60e:	f2c0 0300 	movt	r3, #0
     612:	4798      	blx	r3
     614:	bd08      	pop	{r3, pc}
     616:	bf00      	nop

00000618 <PDCA_10_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 10.
 */
void PDCA_10_Handler(void)
{
     618:	b508      	push	{r3, lr}
	pdca_channel_interrupt(10);
     61a:	f04f 000a 	mov.w	r0, #10
     61e:	f240 5331 	movw	r3, #1329	; 0x531
     622:	f2c0 0300 	movt	r3, #0
     626:	4798      	blx	r3
     628:	bd08      	pop	{r3, pc}
     62a:	bf00      	nop

0000062c <PDCA_11_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 11.
 */
void PDCA_11_Handler(void)
{
     62c:	b508      	push	{r3, lr}
	pdca_channel_interrupt(11);
     62e:	f04f 000b 	mov.w	r0, #11
     632:	f240 5331 	movw	r3, #1329	; 0x531
     636:	f2c0 0300 	movt	r3, #0
     63a:	4798      	blx	r3
     63c:	bd08      	pop	{r3, pc}
     63e:	bf00      	nop

00000640 <PDCA_12_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 12.
 */
void PDCA_12_Handler(void)
{
     640:	b508      	push	{r3, lr}
	pdca_channel_interrupt(12);
     642:	f04f 000c 	mov.w	r0, #12
     646:	f240 5331 	movw	r3, #1329	; 0x531
     64a:	f2c0 0300 	movt	r3, #0
     64e:	4798      	blx	r3
     650:	bd08      	pop	{r3, pc}
     652:	bf00      	nop

00000654 <PDCA_13_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 13.
 */
void PDCA_13_Handler(void)
{
     654:	b508      	push	{r3, lr}
	pdca_channel_interrupt(13);
     656:	f04f 000d 	mov.w	r0, #13
     65a:	f240 5331 	movw	r3, #1329	; 0x531
     65e:	f2c0 0300 	movt	r3, #0
     662:	4798      	blx	r3
     664:	bd08      	pop	{r3, pc}
     666:	bf00      	nop

00000668 <PDCA_14_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 14.
 */
void PDCA_14_Handler(void)
{
     668:	b508      	push	{r3, lr}
	pdca_channel_interrupt(14);
     66a:	f04f 000e 	mov.w	r0, #14
     66e:	f240 5331 	movw	r3, #1329	; 0x531
     672:	f2c0 0300 	movt	r3, #0
     676:	4798      	blx	r3
     678:	bd08      	pop	{r3, pc}
     67a:	bf00      	nop

0000067c <PDCA_15_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 15.
 */
void PDCA_15_Handler(void)
{
     67c:	b508      	push	{r3, lr}
	pdca_channel_interrupt(15);
     67e:	f04f 000f 	mov.w	r0, #15
     682:	f240 5331 	movw	r3, #1329	; 0x531
     686:	f2c0 0300 	movt	r3, #0
     68a:	4798      	blx	r3
     68c:	bd08      	pop	{r3, pc}
     68e:	bf00      	nop

00000690 <find_twim_channel_num>:
 * \return      TWIM channel number
 */
static uint32_t find_twim_channel_num(Twim *twim)
{
#if defined(ID_TWIM3)
	if (twim == TWIM3) {
     690:	f44f 4340 	mov.w	r3, #49152	; 0xc000
     694:	f2c4 0307 	movt	r3, #16391	; 0x4007
     698:	4298      	cmp	r0, r3
     69a:	d00e      	beq.n	6ba <find_twim_channel_num+0x2a>
		return 3;
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
     69c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     6a0:	f2c4 0107 	movt	r1, #16391	; 0x4007
     6a4:	4288      	cmp	r0, r1
     6a6:	d00b      	beq.n	6c0 <find_twim_channel_num+0x30>
		return 2;
	}
#endif
#if defined(ID_TWIM1)
	if (twim == TWIM1) {
     6a8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
     6ac:	f2c4 0201 	movt	r2, #16385	; 0x4001
     6b0:	4290      	cmp	r0, r2
     6b2:	bf14      	ite	ne
     6b4:	2000      	movne	r0, #0
     6b6:	2001      	moveq	r0, #1
     6b8:	4770      	bx	lr
 */
static uint32_t find_twim_channel_num(Twim *twim)
{
#if defined(ID_TWIM3)
	if (twim == TWIM3) {
		return 3;
     6ba:	f04f 0003 	mov.w	r0, #3
     6be:	4770      	bx	lr
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
		return 2;
     6c0:	f04f 0002 	mov.w	r0, #2
		return 0;
	}
#endif

	return 0;
}
     6c4:	4770      	bx	lr
     6c6:	bf00      	nop

000006c8 <twim_default_callback>:

/**
 * \brief TWIM default callback function
 */
void twim_default_callback(Twim *twim)
{
     6c8:	b510      	push	{r4, lr}
     6ca:	4604      	mov	r4, r0
	/* Get masked status register value */
	uint32_t twim_ch = find_twim_channel_num(twim);
     6cc:	f240 6391 	movw	r3, #1681	; 0x691
     6d0:	f2c0 0300 	movt	r3, #0
     6d4:	4798      	blx	r3
	uint32_t status = twim->TWIM_SR;
     6d6:	69e1      	ldr	r1, [r4, #28]
	status &= twim_it_mask[twim_ch];
     6d8:	f640 1268 	movw	r2, #2408	; 0x968
     6dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
     6e0:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
     6e4:	4019      	ands	r1, r3
	/* this is a NACK */
	if (status & TWIM_SR_STD_MASK) {
     6e6:	f411 6fa0 	tst.w	r1, #1280	; 0x500
     6ea:	d01a      	beq.n	722 <twim_default_callback+0x5a>
		/*
		 * If we get a nak, clear the valid bit in cmdr,
		 * otherwise the command will be resent.
		 */
		transfer_status[twim_ch] = (status & TWIM_IER_ANAK) ?
     6ec:	f401 7380 	and.w	r3, r1, #256	; 0x100
     6f0:	2b00      	cmp	r3, #0
     6f2:	bf0c      	ite	eq
     6f4:	21fe      	moveq	r1, #254	; 0xfe
     6f6:	21fc      	movne	r1, #252	; 0xfc
     6f8:	f640 1254 	movw	r2, #2388	; 0x954
     6fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
     700:	5411      	strb	r1, [r2, r0]
				TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim->TWIM_CMDR &= ~TWIM_CMDR_VALID;
     702:	68e3      	ldr	r3, [r4, #12]
     704:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
     708:	60e1      	str	r1, [r4, #12]
		twim->TWIM_SCR = ~0UL;
     70a:	f04f 32ff 	mov.w	r2, #4294967295
     70e:	62e2      	str	r2, [r4, #44]	; 0x2c
		twim->TWIM_IDR = ~0UL;
     710:	6262      	str	r2, [r4, #36]	; 0x24
		twim_next[twim_ch] = false;
     712:	f640 1378 	movw	r3, #2424	; 0x978
     716:	f2c2 0300 	movt	r3, #8192	; 0x2000
     71a:	f04f 0100 	mov.w	r1, #0
     71e:	5419      	strb	r1, [r3, r0]
     720:	bd10      	pop	{r4, pc}
	}
	/* This is a RXRDY */
	else if (status & TWIM_SR_RXRDY) {
     722:	f011 0f01 	tst.w	r1, #1
     726:	d032      	beq.n	78e <twim_default_callback+0xc6>
		/* Get data from Receive Holding Register */
		*twim_rx_data[twim_ch] = twim->TWIM_RHR;
     728:	f640 1234 	movw	r2, #2356	; 0x934
     72c:	f2c2 0200 	movt	r2, #8192	; 0x2000
     730:	6961      	ldr	r1, [r4, #20]
     732:	b2c9      	uxtb	r1, r1
     734:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
     738:	f803 1b01 	strb.w	r1, [r3], #1
		twim_rx_data[twim_ch]++;
     73c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
		/* Decrease received bytes number */
		twim_rx_nb_bytes[twim_ch]--;
     740:	f640 1144 	movw	r1, #2372	; 0x944
     744:	f2c2 0100 	movt	r1, #8192	; 0x2000
     748:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
     74c:	f102 33ff 	add.w	r3, r2, #4294967295
     750:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
		/* Receive complete */
		if (twim_rx_nb_bytes[twim_ch] == 0) {
     754:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
     758:	2900      	cmp	r1, #0
     75a:	d17c      	bne.n	856 <twim_default_callback+0x18e>
			/* Finish the receive operation */
			twim->TWIM_IDR = TWIM_IDR_RXRDY;
     75c:	f04f 0201 	mov.w	r2, #1
     760:	6262      	str	r2, [r4, #36]	; 0x24
			/* Set busy to false */
			twim_next[twim_ch] = false;
     762:	f640 1378 	movw	r3, #2424	; 0x978
     766:	f2c2 0300 	movt	r3, #8192	; 0x2000
     76a:	f04f 0100 	mov.w	r1, #0
     76e:	5419      	strb	r1, [r3, r0]
#if TWIM_LOW_POWER_ENABLE
			twim->TWIM_SCR = TWIM_SCR_CCOMP;
     770:	f04f 0208 	mov.w	r2, #8
     774:	62e2      	str	r2, [r4, #44]	; 0x2c
			twim->TWIM_IER = TWIM_IER_CCOMP;
     776:	6222      	str	r2, [r4, #32]
			twim_it_mask[twim_ch] |= TWIM_IER_CCOMP;
     778:	f640 1368 	movw	r3, #2408	; 0x968
     77c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     780:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
     784:	f041 0208 	orr.w	r2, r1, #8
     788:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
     78c:	bd10      	pop	{r4, pc}
#endif
		}
	}
	/* This is a TXRDY */
	else if (status & TWIM_SR_TXRDY) {
     78e:	f011 0f02 	tst.w	r1, #2
     792:	d059      	beq.n	848 <twim_default_callback+0x180>
		/* No more bytes to transmit */
		if (twim_tx_nb_bytes[twim_ch] == 0) {
     794:	f640 118c 	movw	r1, #2444	; 0x98c
     798:	f2c2 0100 	movt	r1, #8192	; 0x2000
     79c:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
     7a0:	b9c2      	cbnz	r2, 7d4 <twim_default_callback+0x10c>
			/* Finish the receive operation */
			twim->TWIM_IDR = TWIM_IDR_TXRDY;
     7a2:	f04f 0202 	mov.w	r2, #2
     7a6:	6262      	str	r2, [r4, #36]	; 0x24
			/* Set busy to false */
			twim_next[twim_ch] = false;
     7a8:	f640 1178 	movw	r1, #2424	; 0x978
     7ac:	f2c2 0100 	movt	r1, #8192	; 0x2000
     7b0:	f04f 0300 	mov.w	r3, #0
     7b4:	540b      	strb	r3, [r1, r0]
#if TWIM_LOW_POWER_ENABLE
			twim->TWIM_SCR = TWIM_SCR_CCOMP;
     7b6:	f04f 0208 	mov.w	r2, #8
     7ba:	62e2      	str	r2, [r4, #44]	; 0x2c
			twim->TWIM_IER = TWIM_IER_CCOMP;
     7bc:	6222      	str	r2, [r4, #32]
			twim_it_mask[twim_ch] |= TWIM_IER_CCOMP;
     7be:	f640 1168 	movw	r1, #2408	; 0x968
     7c2:	f2c2 0100 	movt	r1, #8192	; 0x2000
     7c6:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
     7ca:	f043 0208 	orr.w	r2, r3, #8
     7ce:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
     7d2:	bd10      	pop	{r4, pc}
#endif
		} else {
			/* Put the byte in the Transmit Holding Register */
			twim->TWIM_THR = *twim_tx_data[twim_ch]++;
     7d4:	f640 1258 	movw	r2, #2392	; 0x958
     7d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
     7dc:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
     7e0:	f813 1b01 	ldrb.w	r1, [r3], #1
     7e4:	61a1      	str	r1, [r4, #24]
     7e6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
			/* Decrease transmitted bytes number */
			twim_tx_nb_bytes[twim_ch]--;
     7ea:	f640 138c 	movw	r3, #2444	; 0x98c
     7ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
     7f2:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
     7f6:	f102 31ff 	add.w	r1, r2, #4294967295
     7fa:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
			if (twim_tx_nb_bytes[twim_ch] == 0) {
     7fe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     802:	bb43      	cbnz	r3, 856 <twim_default_callback+0x18e>
				/* Check for next transfer */
				if (twim_next[twim_ch]) {
     804:	f640 1278 	movw	r2, #2424	; 0x978
     808:	f2c2 0200 	movt	r2, #8192	; 0x2000
     80c:	5c11      	ldrb	r1, [r2, r0]
     80e:	b311      	cbz	r1, 856 <twim_default_callback+0x18e>
					twim_next[twim_ch] = false;
     810:	f640 1378 	movw	r3, #2424	; 0x978
     814:	f2c2 0300 	movt	r3, #8192	; 0x2000
     818:	f04f 0200 	mov.w	r2, #0
     81c:	541a      	strb	r2, [r3, r0]
					twim_tx_nb_bytes[twim_ch] = twim_package[twim_ch]->length;
     81e:	f640 117c 	movw	r1, #2428	; 0x97c
     822:	f2c2 0100 	movt	r1, #8192	; 0x2000
     826:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
     82a:	68d9      	ldr	r1, [r3, #12]
     82c:	f640 128c 	movw	r2, #2444	; 0x98c
     830:	f2c2 0200 	movt	r2, #8192	; 0x2000
     834:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
					twim_tx_data[twim_ch] = twim_package[twim_ch]->buffer;
     838:	6899      	ldr	r1, [r3, #8]
     83a:	f640 1358 	movw	r3, #2392	; 0x958
     83e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     842:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
     846:	bd10      	pop	{r4, pc}
				}
			}
		}
	}
#if TWIM_LOW_POWER_ENABLE
	else if (status & TWIM_SR_CCOMP) {
     848:	f011 0f08 	tst.w	r1, #8
     84c:	d003      	beq.n	856 <twim_default_callback+0x18e>
		twim->TWIM_SCR = TWIM_SCR_CCOMP;
     84e:	f04f 0008 	mov.w	r0, #8
     852:	62e0      	str	r0, [r4, #44]	; 0x2c
		twim->TWIM_IDR = TWIM_IDR_CCOMP;
     854:	6260      	str	r0, [r4, #36]	; 0x24
     856:	bd10      	pop	{r4, pc}

00000858 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
     858:	b470      	push	{r4, r5, r6}
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);
     85a:	fbb2 f2f1 	udiv	r2, r2, r1
     85e:	ea4f 0252 	mov.w	r2, r2, lsr #1

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     862:	2aff      	cmp	r2, #255	; 0xff
     864:	d91e      	bls.n	8a4 <twim_set_speed+0x4c>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     866:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     86a:	2aff      	cmp	r2, #255	; 0xff
     86c:	d935      	bls.n	8da <twim_set_speed+0x82>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     86e:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     872:	2aff      	cmp	r2, #255	; 0xff
     874:	d934      	bls.n	8e0 <twim_set_speed+0x88>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     876:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     87a:	2aff      	cmp	r2, #255	; 0xff
     87c:	d933      	bls.n	8e6 <twim_set_speed+0x8e>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     87e:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     882:	2aff      	cmp	r2, #255	; 0xff
     884:	d932      	bls.n	8ec <twim_set_speed+0x94>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     886:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     88a:	2aff      	cmp	r2, #255	; 0xff
     88c:	d931      	bls.n	8f2 <twim_set_speed+0x9a>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     88e:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     892:	2aff      	cmp	r2, #255	; 0xff
     894:	d930      	bls.n	8f8 <twim_set_speed+0xa0>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     896:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     89a:	2aff      	cmp	r2, #255	; 0xff
     89c:	d92f      	bls.n	8fe <twim_set_speed+0xa6>
		/* divide f_prescaled value */
		f_prescaled /= 2;
	}

	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
     89e:	f04f 00f8 	mov.w	r0, #248	; 0xf8
     8a2:	e018      	b.n	8d6 <twim_set_speed+0x7e>
 */
status_code_t twim_set_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
     8a4:	f04f 0600 	mov.w	r6, #0
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
     8a8:	ea4f 0152 	mov.w	r1, r2, lsr #1
     8ac:	b2cd      	uxtb	r5, r1
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
			| TWIM_CWGR_STASTO(f_prescaled);
     8ae:	ea4f 4402 	mov.w	r4, r2, lsl #16
     8b2:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
     8b6:	432c      	orrs	r4, r5
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
     8b8:	ea4f 6303 	mov.w	r3, r3, lsl #24
     8bc:	f003 6570 	and.w	r5, r3, #251658240	; 0xf000000
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_CWGR_EXP(cwgr_exp)
     8c0:	432c      	orrs	r4, r5
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
     8c2:	1a52      	subs	r2, r2, r1
     8c4:	ea4f 6102 	mov.w	r1, r2, lsl #24
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
     8c8:	ea44 4311 	orr.w	r3, r4, r1, lsr #16
			| TWIM_CWGR_STASTO(f_prescaled);
     8cc:	ea43 7206 	orr.w	r2, r3, r6, lsl #28
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
     8d0:	6042      	str	r2, [r0, #4]
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
			| TWIM_CWGR_STASTO(f_prescaled);

	return STATUS_OK;
     8d2:	f04f 0000 	mov.w	r0, #0
     8d6:	b240      	sxtb	r0, r0
     8d8:	e014      	b.n	904 <twim_set_speed+0xac>
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
		/* increase clock divider */
		cwgr_exp++;
     8da:	f04f 0601 	mov.w	r6, #1
     8de:	e7e3      	b.n	8a8 <twim_set_speed+0x50>
     8e0:	f04f 0602 	mov.w	r6, #2
     8e4:	e7e0      	b.n	8a8 <twim_set_speed+0x50>
     8e6:	f04f 0603 	mov.w	r6, #3
     8ea:	e7dd      	b.n	8a8 <twim_set_speed+0x50>
     8ec:	f04f 0604 	mov.w	r6, #4
     8f0:	e7da      	b.n	8a8 <twim_set_speed+0x50>
     8f2:	f04f 0605 	mov.w	r6, #5
     8f6:	e7d7      	b.n	8a8 <twim_set_speed+0x50>
     8f8:	f04f 0606 	mov.w	r6, #6
     8fc:	e7d4      	b.n	8a8 <twim_set_speed+0x50>
     8fe:	f04f 0607 	mov.w	r6, #7
     902:	e7d1      	b.n	8a8 <twim_set_speed+0x50>
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
			| TWIM_CWGR_STASTO(f_prescaled);

	return STATUS_OK;
}
     904:	bc70      	pop	{r4, r5, r6}
     906:	4770      	bx	lr

00000908 <twim_set_hsmode_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_hsmode_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
     908:	b470      	push	{r4, r5, r6}
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);
     90a:	fbb2 f2f1 	udiv	r2, r2, r1
     90e:	ea4f 0252 	mov.w	r2, r2, lsr #1

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     912:	2aff      	cmp	r2, #255	; 0xff
     914:	d91e      	bls.n	954 <twim_set_hsmode_speed+0x4c>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     916:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     91a:	2aff      	cmp	r2, #255	; 0xff
     91c:	d935      	bls.n	98a <twim_set_hsmode_speed+0x82>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     91e:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     922:	2aff      	cmp	r2, #255	; 0xff
     924:	d934      	bls.n	990 <twim_set_hsmode_speed+0x88>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     926:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     92a:	2aff      	cmp	r2, #255	; 0xff
     92c:	d933      	bls.n	996 <twim_set_hsmode_speed+0x8e>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     92e:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     932:	2aff      	cmp	r2, #255	; 0xff
     934:	d932      	bls.n	99c <twim_set_hsmode_speed+0x94>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     936:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     93a:	2aff      	cmp	r2, #255	; 0xff
     93c:	d931      	bls.n	9a2 <twim_set_hsmode_speed+0x9a>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     93e:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     942:	2aff      	cmp	r2, #255	; 0xff
     944:	d930      	bls.n	9a8 <twim_set_hsmode_speed+0xa0>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     946:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     94a:	2aff      	cmp	r2, #255	; 0xff
     94c:	d92f      	bls.n	9ae <twim_set_hsmode_speed+0xa6>
		/* divide f_prescaled value */
		f_prescaled /= 2;
	}

	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
     94e:	f04f 00f8 	mov.w	r0, #248	; 0xf8
     952:	e018      	b.n	986 <twim_set_hsmode_speed+0x7e>
 */
status_code_t twim_set_hsmode_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
     954:	f04f 0600 	mov.w	r6, #0
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
     958:	ea4f 0152 	mov.w	r1, r2, lsr #1
     95c:	b2cd      	uxtb	r5, r1
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
			| TWIM_HSCWGR_STASTO(f_prescaled);
     95e:	ea4f 4402 	mov.w	r4, r2, lsl #16
     962:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
     966:	432c      	orrs	r4, r5
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
     968:	ea4f 6303 	mov.w	r3, r3, lsl #24
     96c:	f003 6570 	and.w	r5, r3, #251658240	; 0xf000000
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_HSCWGR_EXP(cwgr_exp)
     970:	432c      	orrs	r4, r5
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
     972:	1a52      	subs	r2, r2, r1
     974:	ea4f 6102 	mov.w	r1, r2, lsl #24
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
     978:	ea44 4311 	orr.w	r3, r4, r1, lsr #16
			| TWIM_HSCWGR_STASTO(f_prescaled);
     97c:	ea43 7206 	orr.w	r2, r3, r6, lsl #28
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
     980:	6382      	str	r2, [r0, #56]	; 0x38
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
			| TWIM_HSCWGR_STASTO(f_prescaled);

	return STATUS_OK;
     982:	f04f 0000 	mov.w	r0, #0
     986:	b240      	sxtb	r0, r0
     988:	e014      	b.n	9b4 <twim_set_hsmode_speed+0xac>
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
		/* increase clock divider */
		cwgr_exp++;
     98a:	f04f 0601 	mov.w	r6, #1
     98e:	e7e3      	b.n	958 <twim_set_hsmode_speed+0x50>
     990:	f04f 0602 	mov.w	r6, #2
     994:	e7e0      	b.n	958 <twim_set_hsmode_speed+0x50>
     996:	f04f 0603 	mov.w	r6, #3
     99a:	e7dd      	b.n	958 <twim_set_hsmode_speed+0x50>
     99c:	f04f 0604 	mov.w	r6, #4
     9a0:	e7da      	b.n	958 <twim_set_hsmode_speed+0x50>
     9a2:	f04f 0605 	mov.w	r6, #5
     9a6:	e7d7      	b.n	958 <twim_set_hsmode_speed+0x50>
     9a8:	f04f 0606 	mov.w	r6, #6
     9ac:	e7d4      	b.n	958 <twim_set_hsmode_speed+0x50>
     9ae:	f04f 0607 	mov.w	r6, #7
     9b2:	e7d1      	b.n	958 <twim_set_hsmode_speed+0x50>
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
			| TWIM_HSCWGR_STASTO(f_prescaled);

	return STATUS_OK;
}
     9b4:	bc70      	pop	{r4, r5, r6}
     9b6:	4770      	bx	lr

000009b8 <twim_set_config>:
 *
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_config(Twim *twim, struct twim_config *config)
{
     9b8:	b570      	push	{r4, r5, r6, lr}
     9ba:	4605      	mov	r5, r0
     9bc:	460c      	mov	r4, r1
	sysclk_enable_peripheral_clock(twim);
     9be:	f641 23d9 	movw	r3, #6873	; 0x1ad9
     9c2:	f2c0 0300 	movt	r3, #0
     9c6:	4798      	blx	r3
	/* Enable master transfer */
	twim->TWIM_CR = TWIM_CR_MEN;
     9c8:	f04f 0001 	mov.w	r0, #1
     9cc:	6028      	str	r0, [r5, #0]
	/* Reset TWI */
	twim->TWIM_CR = TWIM_CR_SWRST;
     9ce:	f04f 0180 	mov.w	r1, #128	; 0x80
     9d2:	6029      	str	r1, [r5, #0]
	/* Clear SR */
	twim->TWIM_SCR = ~0UL;
     9d4:	f04f 32ff 	mov.w	r2, #4294967295
     9d8:	62ea      	str	r2, [r5, #44]	; 0x2c

	if (config->smbus) {
     9da:	7ba3      	ldrb	r3, [r4, #14]
     9dc:	b12b      	cbz	r3, 9ea <twim_set_config+0x32>
		/* Enable SMBUS Transfer */
		twim->TWIM_CR = TWIM_CR_SMEN;
     9de:	f04f 0010 	mov.w	r0, #16
     9e2:	6028      	str	r0, [r5, #0]
		twim->TWIM_SMBTR = (uint32_t) -1;
     9e4:	f04f 31ff 	mov.w	r1, #4294967295
     9e8:	60a9      	str	r1, [r5, #8]
	}

	/* Select the speed */
	if (config->speed) {
     9ea:	6861      	ldr	r1, [r4, #4]
     9ec:	b149      	cbz	r1, a02 <twim_set_config+0x4a>
		if (twim_set_speed(twim, config->speed, config->twim_clk,
     9ee:	4628      	mov	r0, r5
     9f0:	6822      	ldr	r2, [r4, #0]
     9f2:	7b23      	ldrb	r3, [r4, #12]
     9f4:	f640 0659 	movw	r6, #2137	; 0x859
     9f8:	f2c0 0600 	movt	r6, #0
     9fc:	47b0      	blx	r6
     9fe:	2800      	cmp	r0, #0
     a00:	d15d      	bne.n	abe <twim_set_config+0x106>
				config->data_setup_cycles) != STATUS_OK) {
			return ERR_INVALID_ARG;
		}
	}
	if (config->hsmode_speed) {
     a02:	68a1      	ldr	r1, [r4, #8]
     a04:	b149      	cbz	r1, a1a <twim_set_config+0x62>
		if (twim_set_hsmode_speed(twim, config->hsmode_speed, config->twim_clk,
     a06:	4628      	mov	r0, r5
     a08:	6822      	ldr	r2, [r4, #0]
     a0a:	7b63      	ldrb	r3, [r4, #13]
     a0c:	f640 1609 	movw	r6, #2313	; 0x909
     a10:	f2c0 0600 	movt	r6, #0
     a14:	47b0      	blx	r6
     a16:	2800      	cmp	r0, #0
     a18:	d154      	bne.n	ac4 <twim_set_config+0x10c>
		}
	}

	/* Set clock and data slew rate */
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
			TWIM_SRR_FILTER(2) : TWIM_SRR_FILTER(3))
     a1a:	f244 233f 	movw	r3, #16959	; 0x423f
     a1e:	f2c0 030f 	movt	r3, #15
     a22:	6862      	ldr	r2, [r4, #4]
     a24:	429a      	cmp	r2, r3
     a26:	bf8c      	ite	hi
     a28:	f04f 5240 	movhi.w	r2, #805306368	; 0x30000000
     a2c:	f04f 5200 	movls.w	r2, #536870912	; 0x20000000
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
     a30:	7c60      	ldrb	r0, [r4, #17]
     a32:	ea4f 2100 	mov.w	r1, r0, lsl #8
     a36:	f401 7140 	and.w	r1, r1, #768	; 0x300
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
     a3a:	7ca3      	ldrb	r3, [r4, #18]
     a3c:	f003 0007 	and.w	r0, r3, #7

	/* Set clock and data slew rate */
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
			TWIM_SRR_FILTER(2) : TWIM_SRR_FILTER(3))
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
     a40:	4301      	orrs	r1, r0
     a42:	7c23      	ldrb	r3, [r4, #16]
     a44:	ea4f 4003 	mov.w	r0, r3, lsl #16
     a48:	f400 20e0 	and.w	r0, r0, #458752	; 0x70000
	}

	/* Set clock and data slew rate */
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
			TWIM_SRR_FILTER(2) : TWIM_SRR_FILTER(3))
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
     a4c:	7be3      	ldrb	r3, [r4, #15]
     a4e:	ea4f 6303 	mov.w	r3, r3, lsl #24
     a52:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
     a56:	4318      	orrs	r0, r3
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
     a58:	4301      	orrs	r1, r0
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
     a5a:	4311      	orrs	r1, r2
			return ERR_INVALID_ARG;
		}
	}

	/* Set clock and data slew rate */
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
     a5c:	63e9      	str	r1, [r5, #60]	; 0x3c
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
			| TWIM_HSSRR_CLSLEW(config->hs_clock_slew_limit)
			| TWIM_HSSRR_CLDRIVEL(config->hs_clock_drive_strength_low)
			| TWIM_HSSRR_CLDRIVEH(config->hs_clock_drive_strength_high)
			| TWIM_HSSRR_DASLEW(config->hs_data_slew_limit)
			| TWIM_HSSRR_DADRIVEL(config->hs_data_drive_strength_low);
     a5e:	7de2      	ldrb	r2, [r4, #23]
     a60:	f002 0307 	and.w	r3, r2, #7
     a64:	f043 5080 	orr.w	r0, r3, #268435456	; 0x10000000
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
			| TWIM_HSSRR_CLSLEW(config->hs_clock_slew_limit)
			| TWIM_HSSRR_CLDRIVEL(config->hs_clock_drive_strength_low)
     a68:	7d61      	ldrb	r1, [r4, #21]
     a6a:	ea4f 4201 	mov.w	r2, r1, lsl #16
     a6e:	f402 21e0 	and.w	r1, r2, #458752	; 0x70000
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
			| TWIM_HSSRR_CLSLEW(config->hs_clock_slew_limit)
     a72:	7ce3      	ldrb	r3, [r4, #19]
     a74:	ea4f 6203 	mov.w	r2, r3, lsl #24
     a78:	f002 7340 	and.w	r3, r2, #50331648	; 0x3000000
			| TWIM_HSSRR_CLDRIVEL(config->hs_clock_drive_strength_low)
     a7c:	ea41 0203 	orr.w	r2, r1, r3
			| TWIM_HSSRR_CLDRIVEH(config->hs_clock_drive_strength_high)
     a80:	7d21      	ldrb	r1, [r4, #20]
     a82:	ea4f 5301 	mov.w	r3, r1, lsl #20
     a86:	f403 1140 	and.w	r1, r3, #3145728	; 0x300000
     a8a:	430a      	orrs	r2, r1
			| TWIM_HSSRR_DASLEW(config->hs_data_slew_limit)
     a8c:	7da3      	ldrb	r3, [r4, #22]
     a8e:	ea4f 2103 	mov.w	r1, r3, lsl #8
     a92:	f401 7340 	and.w	r3, r1, #768	; 0x300
     a96:	431a      	orrs	r2, r3
			| TWIM_HSSRR_DADRIVEL(config->hs_data_drive_strength_low);
     a98:	4310      	orrs	r0, r2
			TWIM_SRR_FILTER(2) : TWIM_SRR_FILTER(3))
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
     a9a:	6428      	str	r0, [r5, #64]	; 0x40
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
     a9c:	f640 210c 	movw	r1, #2572	; 0xa0c
     aa0:	f2c2 0100 	movt	r1, #8192	; 0x2000
     aa4:	f04f 0300 	mov.w	r3, #0
     aa8:	700b      	strb	r3, [r1, #0]
     aaa:	704b      	strb	r3, [r1, #1]
     aac:	708b      	strb	r3, [r1, #2]
     aae:	70cb      	strb	r3, [r1, #3]
     ab0:	710b      	strb	r3, [r1, #4]
     ab2:	714b      	strb	r3, [r1, #5]
     ab4:	718b      	strb	r3, [r1, #6]
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
     ab6:	f04f 0201 	mov.w	r2, #1
     aba:	71ca      	strb	r2, [r1, #7]

#if TWIM_LOW_POWER_ENABLE
	sleepmgr_init();
#endif

	return STATUS_OK;
     abc:	e004      	b.n	ac8 <twim_set_config+0x110>

	/* Select the speed */
	if (config->speed) {
		if (twim_set_speed(twim, config->speed, config->twim_clk,
				config->data_setup_cycles) != STATUS_OK) {
			return ERR_INVALID_ARG;
     abe:	f04f 03f8 	mov.w	r3, #248	; 0xf8
     ac2:	e001      	b.n	ac8 <twim_set_config+0x110>
		}
	}
	if (config->hsmode_speed) {
		if (twim_set_hsmode_speed(twim, config->hsmode_speed, config->twim_clk,
				config->hsmode_data_setup_cycles) != STATUS_OK) {
			return ERR_INVALID_ARG;
     ac4:	f04f 03f8 	mov.w	r3, #248	; 0xf8
#if TWIM_LOW_POWER_ENABLE
	sleepmgr_init();
#endif

	return STATUS_OK;
}
     ac8:	b258      	sxtb	r0, r3
     aca:	bd70      	pop	{r4, r5, r6, pc}

00000acc <twim_enable_interrupt>:
 * \param interrupt_source  The TWI interrupt to be enabled
 */
void twim_enable_interrupt(Twim *twim, uint32_t interrupt_source)
{
	/* Set the interrupt flags */
	twim->TWIM_IER = interrupt_source;
     acc:	6201      	str	r1, [r0, #32]
     ace:	4770      	bx	lr

00000ad0 <twim_get_status>:
 *
 * \param twim   Base address of the TWIM
 */
uint32_t twim_get_status(Twim *twim)
{
	return twim->TWIM_SR;
     ad0:	69c0      	ldr	r0, [r0, #28]
}
     ad2:	4770      	bx	lr

00000ad4 <twi_master_write>:
 *
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twi_master_write(Twim *twim, struct twim_package *package)
{
     ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     ad8:	4606      	mov	r6, r0
     ada:	460c      	mov	r4, r1
	uint32_t twim_ch = find_twim_channel_num(twim);
     adc:	f240 6391 	movw	r3, #1681	; 0x691
     ae0:	f2c0 0300 	movt	r3, #0
     ae4:	4798      	blx	r3
     ae6:	4605      	mov	r5, r0

	/* Reset the TWIM module to clear the THR register */
	twim->TWIM_CR = TWIM_CR_MEN;
     ae8:	f04f 0001 	mov.w	r0, #1
     aec:	6030      	str	r0, [r6, #0]
	twim->TWIM_CR = TWIM_CR_SWRST;
     aee:	f04f 0180 	mov.w	r1, #128	; 0x80
     af2:	6031      	str	r1, [r6, #0]
	twim->TWIM_CR = TWIM_CR_MDIS;
     af4:	f04f 0202 	mov.w	r2, #2
     af8:	6032      	str	r2, [r6, #0]
	/* Clear the interrupt flags */
	twim->TWIM_IDR = ~0UL;
     afa:	f04f 37ff 	mov.w	r7, #4294967295
     afe:	6277      	str	r7, [r6, #36]	; 0x24
	/* Clear the status flags */
	twim->TWIM_SCR = ~0UL;
     b00:	62f7      	str	r7, [r6, #44]	; 0x2c
	/* Initialize bus transfer status */
	transfer_status[twim_ch] = TWI_SUCCESS;
     b02:	f04f 0300 	mov.w	r3, #0
     b06:	f640 1054 	movw	r0, #2388	; 0x954
     b0a:	f2c2 0000 	movt	r0, #8192	; 0x2000
     b0e:	5543      	strb	r3, [r0, r5]
	/* Mask NACK and TXRDY interrupts */
	twim_it_mask[twim_ch] = TWIM_IER_STD_MASK | TWIM_IER_TXRDY;
     b10:	f640 1268 	movw	r2, #2408	; 0x968
     b14:	f2c2 0200 	movt	r2, #8192	; 0x2000
     b18:	f240 5102 	movw	r1, #1282	; 0x502
     b1c:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
	/* Set next transfer to false */
	twim_next[twim_ch] = false;
     b20:	f640 1778 	movw	r7, #2424	; 0x978
     b24:	f2c2 0700 	movt	r7, #8192	; 0x2000
     b28:	557b      	strb	r3, [r7, r5]

	/* Check if internal address access is performed */
	if (package->addr_length) {
     b2a:	79e3      	ldrb	r3, [r4, #7]
     b2c:	b1db      	cbz	r3, b66 <twi_master_write+0x92>
		/* Selection of first valid byte of the address */
		twim_tx_data[twim_ch] = package->addr;
     b2e:	f104 0004 	add.w	r0, r4, #4
     b32:	f640 1258 	movw	r2, #2392	; 0x958
     b36:	f2c2 0200 	movt	r2, #8192	; 0x2000
     b3a:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
		/* Set the number of bytes to transmit */
		twim_tx_nb_bytes[twim_ch] = package->addr_length;
     b3e:	f640 118c 	movw	r1, #2444	; 0x98c
     b42:	f2c2 0100 	movt	r1, #8192	; 0x2000
     b46:	f841 3025 	str.w	r3, [r1, r5, lsl #2]
		/* Set next transfer to true */
		twim_next[twim_ch] = true;
     b4a:	f640 1378 	movw	r3, #2424	; 0x978
     b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     b52:	f04f 0701 	mov.w	r7, #1
     b56:	555f      	strb	r7, [r3, r5]
		/* Set the number of bytes & address for next transfer */
		twim_package[twim_ch] = package;
     b58:	f640 107c 	movw	r0, #2428	; 0x97c
     b5c:	f2c2 0000 	movt	r0, #8192	; 0x2000
     b60:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
     b64:	e00d      	b.n	b82 <twi_master_write+0xae>
	} else {
		/* Get a pointer to applicative data */
		twim_tx_data[twim_ch] = package->buffer;
     b66:	68a0      	ldr	r0, [r4, #8]
     b68:	f640 1258 	movw	r2, #2392	; 0x958
     b6c:	f2c2 0200 	movt	r2, #8192	; 0x2000
     b70:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
		/* Get a copy of nb bytes to write */
		twim_tx_nb_bytes[twim_ch] = package->length;
     b74:	68e1      	ldr	r1, [r4, #12]
     b76:	f640 178c 	movw	r7, #2444	; 0x98c
     b7a:	f2c2 0700 	movt	r7, #8192	; 0x2000
     b7e:	f847 1025 	str.w	r1, [r7, r5, lsl #2]
	}

	/* Initiate the transfer to send the data */
	twim->TWIM_CMDR = (package->high_speed ? (TWIM_CMDR_HS |
			TWIM_CMDR_HSMCODE(package->high_speed_code)) : 0)
			| TWIM_CMDR_SADR(package->chip)
     b82:	7c62      	ldrb	r2, [r4, #17]
     b84:	b13a      	cbz	r2, b96 <twi_master_write+0xc2>
		twim_tx_nb_bytes[twim_ch] = package->length;
	}

	/* Initiate the transfer to send the data */
	twim->TWIM_CMDR = (package->high_speed ? (TWIM_CMDR_HS |
			TWIM_CMDR_HSMCODE(package->high_speed_code)) : 0)
     b86:	7ca3      	ldrb	r3, [r4, #18]
     b88:	ea4f 7703 	mov.w	r7, r3, lsl #28
     b8c:	f007 40e0 	and.w	r0, r7, #1879048192	; 0x70000000
			| TWIM_CMDR_SADR(package->chip)
     b90:	f040 6180 	orr.w	r1, r0, #67108864	; 0x4000000
     b94:	e001      	b.n	b9a <twi_master_write+0xc6>
     b96:	f04f 0100 	mov.w	r1, #0
     b9a:	6822      	ldr	r2, [r4, #0]
     b9c:	f240 73fe 	movw	r3, #2046	; 0x7fe
     ba0:	ea03 0742 	and.w	r7, r3, r2, lsl #1
			| TWIM_CMDR_NBYTES(package->length + package->addr_length)
     ba4:	79e0      	ldrb	r0, [r4, #7]
     ba6:	68e2      	ldr	r2, [r4, #12]
     ba8:	1883      	adds	r3, r0, r2
     baa:	ea4f 4003 	mov.w	r0, r3, lsl #16
     bae:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
			| TWIM_CMDR_VALID
			| TWIM_CMDR_START
			| TWIM_CMDR_STOP
			| (package->ten_bit ? TWIM_CMDR_TENBIT : 0);
     bb2:	7c24      	ldrb	r4, [r4, #16]
     bb4:	2c00      	cmp	r4, #0
     bb6:	bf14      	ite	ne
     bb8:	f44f 6200 	movne.w	r2, #2048	; 0x800
     bbc:	2200      	moveq	r2, #0
	}

	/* Initiate the transfer to send the data */
	twim->TWIM_CMDR = (package->high_speed ? (TWIM_CMDR_HS |
			TWIM_CMDR_HSMCODE(package->high_speed_code)) : 0)
			| TWIM_CMDR_SADR(package->chip)
     bbe:	f447 4760 	orr.w	r7, r7, #57344	; 0xe000
			| TWIM_CMDR_NBYTES(package->length + package->addr_length)
     bc2:	4307      	orrs	r7, r0
			| TWIM_CMDR_VALID
			| TWIM_CMDR_START
			| TWIM_CMDR_STOP
			| (package->ten_bit ? TWIM_CMDR_TENBIT : 0);
     bc4:	430f      	orrs	r7, r1
     bc6:	4317      	orrs	r7, r2
		/* Get a copy of nb bytes to write */
		twim_tx_nb_bytes[twim_ch] = package->length;
	}

	/* Initiate the transfer to send the data */
	twim->TWIM_CMDR = (package->high_speed ? (TWIM_CMDR_HS |
     bc8:	60f7      	str	r7, [r6, #12]
			| TWIM_CMDR_START
			| TWIM_CMDR_STOP
			| (package->ten_bit ? TWIM_CMDR_TENBIT : 0);

	/* Update IMR through IER */
	twim->TWIM_IER = twim_it_mask[twim_ch];
     bca:	f640 1168 	movw	r1, #2408	; 0x968
     bce:	f2c2 0100 	movt	r1, #8192	; 0x2000
     bd2:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
     bd6:	6233      	str	r3, [r6, #32]
	/* Enable master transfer */
	twim->TWIM_CR = TWIM_CR_MEN;
     bd8:	f04f 0001 	mov.w	r0, #1
     bdc:	6030      	str	r0, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     bde:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     be2:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     be4:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     be8:	f240 0244 	movw	r2, #68	; 0x44
     bec:	f2c2 0200 	movt	r2, #8192	; 0x2000
     bf0:	f04f 0700 	mov.w	r7, #0
     bf4:	7017      	strb	r7, [r2, #0]
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     bf6:	f640 230c 	movw	r3, #2572	; 0xa0c
     bfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
     bfe:	7899      	ldrb	r1, [r3, #2]
     c00:	f101 0101 	add.w	r1, r1, #1
     c04:	7099      	strb	r1, [r3, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     c06:	2c00      	cmp	r4, #0
     c08:	d138      	bne.n	c7c <twi_master_write+0x1a8>
		cpu_irq_enable();
     c0a:	f240 0044 	movw	r0, #68	; 0x44
     c0e:	f2c2 0000 	movt	r0, #8192	; 0x2000
     c12:	f04f 0401 	mov.w	r4, #1
     c16:	7004      	strb	r4, [r0, #0]
     c18:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     c1c:	b662      	cpsie	i
     c1e:	e02d      	b.n	c7c <twi_master_write+0x1a8>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     c20:	b672      	cpsid	i
     c22:	f3bf 8f5f 	dmb	sy
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
     c26:	f04f 0300 	mov.w	r3, #0
     c2a:	7023      	strb	r3, [r4, #0]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
     c2c:	f640 210c 	movw	r1, #2572	; 0xa0c
     c30:	f2c2 0100 	movt	r1, #8192	; 0x2000
     c34:	7808      	ldrb	r0, [r1, #0]
     c36:	b968      	cbnz	r0, c54 <twi_master_write+0x180>
     c38:	f640 230c 	movw	r3, #2572	; 0xa0c
     c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
     c40:	f04f 0100 	mov.w	r1, #0
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
     c44:	f101 0101 	add.w	r1, r1, #1
     c48:	b2c9      	uxtb	r1, r1

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
     c4a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
     c4e:	2a00      	cmp	r2, #0
     c50:	d0f8      	beq.n	c44 <twi_master_write+0x170>
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
     c52:	b931      	cbnz	r1, c62 <twi_master_write+0x18e>
		cpu_irq_enable();
     c54:	f04f 0101 	mov.w	r1, #1
     c58:	7021      	strb	r1, [r4, #0]
     c5a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     c5e:	b662      	cpsie	i
     c60:	e01c      	b.n	c9c <twi_master_write+0x1c8>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     c62:	b672      	cpsid	i
     c64:	f3bf 8f5f 	dmb	sy

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
     c68:	f04f 0000 	mov.w	r0, #0
     c6c:	7020      	strb	r0, [r4, #0]

	/* Enter the sleep mode. */
	bpm_sleep(BPM, sleep_mode);
     c6e:	4648      	mov	r0, r9
     c70:	f642 2379 	movw	r3, #10873	; 0x2a79
     c74:	f2c0 0300 	movt	r3, #0
     c78:	4798      	blx	r3
     c7a:	e00f      	b.n	c9c <twi_master_write+0x1c8>
	/* Send data */
#if TWIM_LOW_POWER_ENABLE
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_1);
	while (!(transfer_status[twim_ch])
     c7c:	f640 1754 	movw	r7, #2388	; 0x954
     c80:	f2c2 0700 	movt	r7, #8192	; 0x2000
			&& !(twim_get_status(twim) & TWIM_SR_IDLE)) {
     c84:	f640 28d1 	movw	r8, #2769	; 0xad1
     c88:	f2c0 0800 	movt	r8, #0
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
     c8c:	f240 0444 	movw	r4, #68	; 0x44
     c90:	f2c2 0400 	movt	r4, #8192	; 0x2000
     c94:	f04f 0900 	mov.w	r9, #0
     c98:	f2c4 090f 	movt	r9, #16399	; 0x400f
	/* Enable master transfer */
	twim->TWIM_CR = TWIM_CR_MEN;
	/* Send data */
#if TWIM_LOW_POWER_ENABLE
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_1);
	while (!(transfer_status[twim_ch])
     c9c:	5d7a      	ldrb	r2, [r7, r5]
     c9e:	b922      	cbnz	r2, caa <twi_master_write+0x1d6>
			&& !(twim_get_status(twim) & TWIM_SR_IDLE)) {
     ca0:	4630      	mov	r0, r6
     ca2:	47c0      	blx	r8
     ca4:	f010 0f10 	tst.w	r0, #16
     ca8:	d0ba      	beq.n	c20 <twi_master_write+0x14c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     caa:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     cae:	b672      	cpsid	i
     cb0:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     cb4:	f240 0344 	movw	r3, #68	; 0x44
     cb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cbc:	f04f 0100 	mov.w	r1, #0
     cc0:	7019      	strb	r1, [r3, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
     cc2:	f640 220c 	movw	r2, #2572	; 0xa0c
     cc6:	f2c2 0200 	movt	r2, #8192	; 0x2000
     cca:	7893      	ldrb	r3, [r2, #2]
     ccc:	f103 31ff 	add.w	r1, r3, #4294967295
     cd0:	7091      	strb	r1, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     cd2:	b948      	cbnz	r0, ce8 <twi_master_write+0x214>
		cpu_irq_enable();
     cd4:	f240 0044 	movw	r0, #68	; 0x44
     cd8:	f2c2 0000 	movt	r0, #8192	; 0x2000
     cdc:	f04f 0201 	mov.w	r2, #1
     ce0:	7002      	strb	r2, [r0, #0]
     ce2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     ce6:	b662      	cpsie	i
			&& !(twim_get_status(twim) & TWIM_SR_IDLE)) {
	}
#endif

	/* Disable master transfer */
	twim->TWIM_CR = TWIM_CR_MDIS;
     ce8:	f04f 0302 	mov.w	r3, #2
     cec:	6033      	str	r3, [r6, #0]
	/* Check for nack */
	if (transfer_status[twim_ch] == TWI_RECEIVE_NACK
     cee:	f640 1154 	movw	r1, #2388	; 0x954
     cf2:	f2c2 0100 	movt	r1, #8192	; 0x2000
     cf6:	5d48      	ldrb	r0, [r1, r5]
     cf8:	b242      	sxtb	r2, r0
     cfa:	f112 0f04 	cmn.w	r2, #4
     cfe:	d00b      	beq.n	d18 <twi_master_write+0x244>
			|| transfer_status[twim_ch] == TWI_ARBITRATION_LOST) {
     d00:	f640 1354 	movw	r3, #2388	; 0x954
     d04:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d08:	5d59      	ldrb	r1, [r3, r5]
     d0a:	b248      	sxtb	r0, r1
		return ERR_IO_ERROR;
     d0c:	f110 0f02 	cmn.w	r0, #2
     d10:	bf0c      	ite	eq
     d12:	22ff      	moveq	r2, #255	; 0xff
     d14:	2200      	movne	r2, #0
     d16:	e001      	b.n	d1c <twi_master_write+0x248>
     d18:	f04f 02ff 	mov.w	r2, #255	; 0xff
	}
	return STATUS_OK;
}
     d1c:	b250      	sxtb	r0, r2
     d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     d22:	bf00      	nop

00000d24 <twim_set_callback>:
 * \param callback   Callback function pointer
 * \param irq_level  Interrupt level
 */
void twim_set_callback(Twim *twim, uint32_t interrupt_source,
	twim_callback_t callback, uint8_t irq_level)
{
     d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     d28:	4604      	mov	r4, r0
     d2a:	460e      	mov	r6, r1
     d2c:	4690      	mov	r8, r2
     d2e:	461f      	mov	r7, r3
	uint32_t twim_ch = find_twim_channel_num(twim);
     d30:	f240 6391 	movw	r3, #1681	; 0x691
     d34:	f2c0 0300 	movt	r3, #0
     d38:	4798      	blx	r3
	uint32_t irq_line = 0;

#if defined(ID_TWIM3)
	if (twim == TWIM3) {
     d3a:	f44f 4540 	mov.w	r5, #49152	; 0xc000
     d3e:	f2c4 0507 	movt	r5, #16391	; 0x4007
     d42:	42ac      	cmp	r4, r5
     d44:	d00e      	beq.n	d64 <twim_set_callback+0x40>
		irq_line = TWIM3_IRQn;
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
     d46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     d4a:	f2c4 0107 	movt	r1, #16391	; 0x4007
     d4e:	428c      	cmp	r4, r1
     d50:	d011      	beq.n	d76 <twim_set_callback+0x52>
		irq_line = TWIM2_IRQn;
	}
#endif
#if defined(ID_TWIM1)
	if (twim == TWIM1) {
     d52:	f44f 4240 	mov.w	r2, #49152	; 0xc000
     d56:	f2c4 0201 	movt	r2, #16385	; 0x4001
     d5a:	4294      	cmp	r4, r2
     d5c:	d04f      	beq.n	dfe <twim_set_callback+0xda>
 */
void twim_set_callback(Twim *twim, uint32_t interrupt_source,
	twim_callback_t callback, uint8_t irq_level)
{
	uint32_t twim_ch = find_twim_channel_num(twim);
	uint32_t irq_line = 0;
     d5e:	f04f 0500 	mov.w	r5, #0
     d62:	e001      	b.n	d68 <twim_set_callback+0x44>

#if defined(ID_TWIM3)
	if (twim == TWIM3) {
		irq_line = TWIM3_IRQn;
     d64:	f04f 054e 	mov.w	r5, #78	; 0x4e
	if (twim == TWIM1) {
		irq_line = TWIM1_IRQn;
	}
#endif
#if defined(ID_TWIM0)
	if (twim == TWIM0) {
     d68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     d6c:	f2c4 0101 	movt	r1, #16385	; 0x4001
     d70:	428c      	cmp	r4, r1
     d72:	d102      	bne.n	d7a <twim_set_callback+0x56>
     d74:	e030      	b.n	dd8 <twim_set_callback+0xb4>
		irq_line = TWIM3_IRQn;
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
		irq_line = TWIM2_IRQn;
     d76:	f04f 054d 	mov.w	r5, #77	; 0x4d
#if defined(ID_TWIM0)
	if (twim == TWIM0) {
		irq_line = TWIM0_IRQn;
	}
#endif
	twim_callback_pointer[twim_ch] = callback;
     d7a:	f640 2360 	movw	r3, #2656	; 0xa60
     d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d82:	f843 8020 	str.w	r8, [r3, r0, lsl #2]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     d86:	462a      	mov	r2, r5
     d88:	ea4f 1055 	mov.w	r0, r5, lsr #5
     d8c:	f005 051f 	and.w	r5, r5, #31
     d90:	f04f 0101 	mov.w	r1, #1
     d94:	fa01 f505 	lsl.w	r5, r1, r5
     d98:	f44f 4361 	mov.w	r3, #57600	; 0xe100
     d9c:	f2ce 0300 	movt	r3, #57344	; 0xe000
     da0:	f100 0160 	add.w	r1, r0, #96	; 0x60
     da4:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
     da8:	ea4f 1707 	mov.w	r7, r7, lsl #4
     dac:	b2ff      	uxtb	r7, r7
     dae:	f102 4360 	add.w	r3, r2, #3758096384	; 0xe0000000
     db2:	f503 4161 	add.w	r1, r3, #57600	; 0xe100
     db6:	f881 7300 	strb.w	r7, [r1, #768]	; 0x300
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
     dba:	f44f 4261 	mov.w	r2, #57600	; 0xe100
     dbe:	f2ce 0200 	movt	r2, #57344	; 0xe000
     dc2:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
	NVIC_ClearPendingIRQ((IRQn_Type)irq_line);
	NVIC_SetPriority((IRQn_Type)irq_line, irq_level);
	NVIC_EnableIRQ((IRQn_Type)irq_line);
	twim_enable_interrupt(twim, interrupt_source);
     dc6:	4620      	mov	r0, r4
     dc8:	4631      	mov	r1, r6
     dca:	f640 23cd 	movw	r3, #2765	; 0xacd
     dce:	f2c0 0300 	movt	r3, #0
     dd2:	4798      	blx	r3
     dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#if defined(ID_TWIM0)
	if (twim == TWIM0) {
		irq_line = TWIM0_IRQn;
	}
#endif
	twim_callback_pointer[twim_ch] = callback;
     dd8:	f640 2260 	movw	r2, #2656	; 0xa60
     ddc:	f2c2 0200 	movt	r2, #8192	; 0x2000
     de0:	f842 8020 	str.w	r8, [r2, r0, lsl #2]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     de4:	f44f 4061 	mov.w	r0, #57600	; 0xe100
     de8:	f2ce 0000 	movt	r0, #57344	; 0xe000
     dec:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
     df0:	f8c0 5184 	str.w	r5, [r0, #388]	; 0x184
     df4:	f04f 0001 	mov.w	r0, #1
     df8:	f04f 023d 	mov.w	r2, #61	; 0x3d
     dfc:	e7d4      	b.n	da8 <twim_set_callback+0x84>
     dfe:	f640 2360 	movw	r3, #2656	; 0xa60
     e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
     e06:	f843 8020 	str.w	r8, [r3, r0, lsl #2]
     e0a:	f44f 4061 	mov.w	r0, #57600	; 0xe100
     e0e:	f2ce 0000 	movt	r0, #57344	; 0xe000
     e12:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
     e16:	f8c0 5184 	str.w	r5, [r0, #388]	; 0x184
     e1a:	f04f 0001 	mov.w	r0, #1
     e1e:	f04f 023f 	mov.w	r2, #63	; 0x3f
     e22:	e7c1      	b.n	da8 <twim_set_callback+0x84>

00000e24 <TWIM0_Handler>:
	twim_enable_interrupt(twim, interrupt_source);
}

#if defined(ID_TWIM0)
void TWIM0_Handler(void)
{
     e24:	b508      	push	{r3, lr}
	twim_callback_pointer[0](TWIM0);
     e26:	f640 2360 	movw	r3, #2656	; 0xa60
     e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     e2e:	6819      	ldr	r1, [r3, #0]
     e30:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     e34:	f2c4 0001 	movt	r0, #16385	; 0x4001
     e38:	4788      	blx	r1
     e3a:	bd08      	pop	{r3, pc}

00000e3c <TWIM1_Handler>:
}
#endif

#if defined(ID_TWIM1)
void TWIM1_Handler(void)
{
     e3c:	b508      	push	{r3, lr}
	twim_callback_pointer[1](TWIM1);
     e3e:	f640 2360 	movw	r3, #2656	; 0xa60
     e42:	f2c2 0300 	movt	r3, #8192	; 0x2000
     e46:	6859      	ldr	r1, [r3, #4]
     e48:	f44f 4040 	mov.w	r0, #49152	; 0xc000
     e4c:	f2c4 0001 	movt	r0, #16385	; 0x4001
     e50:	4788      	blx	r1
     e52:	bd08      	pop	{r3, pc}

00000e54 <TWIM2_Handler>:
}
#endif

#if defined(ID_TWIM2)
void TWIM2_Handler(void)
{
     e54:	b508      	push	{r3, lr}
	twim_callback_pointer[2](TWIM2);
     e56:	f640 2360 	movw	r3, #2656	; 0xa60
     e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     e5e:	6899      	ldr	r1, [r3, #8]
     e60:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     e64:	f2c4 0007 	movt	r0, #16391	; 0x4007
     e68:	4788      	blx	r1
     e6a:	bd08      	pop	{r3, pc}

00000e6c <TWIM3_Handler>:
}
#endif

#if defined(ID_TWIM3)
void TWIM3_Handler(void)
{
     e6c:	b508      	push	{r3, lr}
	twim_callback_pointer[3](TWIM3);
     e6e:	f640 2360 	movw	r3, #2656	; 0xa60
     e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
     e76:	68d9      	ldr	r1, [r3, #12]
     e78:	f44f 4040 	mov.w	r0, #49152	; 0xc000
     e7c:	f2c4 0007 	movt	r0, #16391	; 0x4007
     e80:	4788      	blx	r1
     e82:	bd08      	pop	{r3, pc}

00000e84 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
     e84:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
     e86:	ea4f 1301 	mov.w	r3, r1, lsl #4
     e8a:	4293      	cmp	r3, r2
     e8c:	d910      	bls.n	eb0 <usart_set_async_baudrate+0x2c>
     e8e:	e020      	b.n	ed2 <usart_set_async_baudrate+0x4e>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
     e90:	6841      	ldr	r1, [r0, #4]
     e92:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
     e96:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
     e98:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
     e9c:	6202      	str	r2, [r0, #32]

	return 0;
     e9e:	f04f 0000 	mov.w	r0, #0
     ea2:	e029      	b.n	ef8 <usart_set_async_baudrate+0x74>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
     ea4:	f04f 0001 	mov.w	r0, #1
     ea8:	e026      	b.n	ef8 <usart_set_async_baudrate+0x74>
     eaa:	f04f 0001 	mov.w	r0, #1
     eae:	e023      	b.n	ef8 <usart_set_async_baudrate+0x74>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
     eb0:	ea4f 04c2 	mov.w	r4, r2, lsl #3
     eb4:	eb04 0253 	add.w	r2, r4, r3, lsr #1
     eb8:	fbb2 f3f3 	udiv	r3, r2, r3
	cd = cd_fp >> 3;
     ebc:	ea4f 02d3 	mov.w	r2, r3, lsr #3
	fp = cd_fp & 0x07;
     ec0:	f003 0307 	and.w	r3, r3, #7
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
     ec4:	f102 34ff 	add.w	r4, r2, #4294967295
     ec8:	f64f 71fe 	movw	r1, #65534	; 0xfffe
     ecc:	428c      	cmp	r4, r1
     ece:	d9e3      	bls.n	e98 <usart_set_async_baudrate+0x14>
     ed0:	e7e8      	b.n	ea4 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
     ed2:	ea4f 01c1 	mov.w	r1, r1, lsl #3
     ed6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     eda:	eb02 0451 	add.w	r4, r2, r1, lsr #1
     ede:	fbb4 f3f1 	udiv	r3, r4, r1
	cd = cd_fp >> 3;
     ee2:	ea4f 02d3 	mov.w	r2, r3, lsr #3
	fp = cd_fp & 0x07;
     ee6:	f003 0307 	and.w	r3, r3, #7
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
     eea:	f102 34ff 	add.w	r4, r2, #4294967295
     eee:	f64f 71fe 	movw	r1, #65534	; 0xfffe
     ef2:	428c      	cmp	r4, r1
     ef4:	d9cc      	bls.n	e90 <usart_set_async_baudrate+0xc>
     ef6:	e7d8      	b.n	eaa <usart_set_async_baudrate+0x26>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
     ef8:	bc10      	pop	{r4}
     efa:	4770      	bx	lr

00000efc <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
     efc:	f04f 0340 	mov.w	r3, #64	; 0x40
     f00:	6003      	str	r3, [r0, #0]
     f02:	4770      	bx	lr

00000f04 <usart_reset_tx>:
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
     f04:	f04f 0388 	mov.w	r3, #136	; 0x88
     f08:	6003      	str	r3, [r0, #0]
     f0a:	4770      	bx	lr

00000f0c <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
     f0c:	f04f 0310 	mov.w	r3, #16
     f10:	6003      	str	r3, [r0, #0]
     f12:	4770      	bx	lr

00000f14 <usart_reset_rx>:
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
     f14:	f04f 0324 	mov.w	r3, #36	; 0x24
     f18:	6003      	str	r3, [r0, #0]
     f1a:	4770      	bx	lr

00000f1c <usart_reset_status>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
     f1c:	f44f 7380 	mov.w	r3, #256	; 0x100
     f20:	6003      	str	r3, [r0, #0]
     f22:	4770      	bx	lr

00000f24 <usart_drive_DTR_pin_high>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_DTRDIS;
     f24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
     f28:	6003      	str	r3, [r0, #0]
     f2a:	4770      	bx	lr

00000f2c <usart_drive_RTS_pin_high>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
     f2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
     f30:	6003      	str	r3, [r0, #0]
     f32:	4770      	bx	lr

00000f34 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
     f34:	6943      	ldr	r3, [r0, #20]
     f36:	f013 0f02 	tst.w	r3, #2
     f3a:	d007      	beq.n	f4c <usart_write+0x18>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
     f3c:	ea4f 51c1 	mov.w	r1, r1, lsl #23
     f40:	ea4f 52d1 	mov.w	r2, r1, lsr #23
     f44:	61c2      	str	r2, [r0, #28]
	return 0;
     f46:	f04f 0000 	mov.w	r0, #0
     f4a:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
     f4c:	f04f 0001 	mov.w	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
     f50:	4770      	bx	lr
     f52:	bf00      	nop

00000f54 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
     f54:	6943      	ldr	r3, [r0, #20]
     f56:	f013 0f01 	tst.w	r3, #1
     f5a:	d008      	beq.n	f6e <usart_read+0x1a>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
     f5c:	6980      	ldr	r0, [r0, #24]
     f5e:	ea4f 52c0 	mov.w	r2, r0, lsl #23
     f62:	ea4f 53d2 	mov.w	r3, r2, lsr #23
     f66:	600b      	str	r3, [r1, #0]

	return 0;
     f68:	f04f 0000 	mov.w	r0, #0
     f6c:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
     f6e:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
     f72:	4770      	bx	lr

00000f74 <usart_disable_writeprotect>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
     f74:	f44f 4382 	mov.w	r3, #16640	; 0x4100
     f78:	f2c5 5353 	movt	r3, #21843	; 0x5553
     f7c:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
     f80:	4770      	bx	lr
     f82:	bf00      	nop

00000f84 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
     f84:	b510      	push	{r4, lr}
     f86:	4604      	mov	r4, r0
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
     f88:	f640 7375 	movw	r3, #3957	; 0xf75
     f8c:	f2c0 0300 	movt	r3, #0
     f90:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
     f92:	f04f 0000 	mov.w	r0, #0
     f96:	6060      	str	r0, [r4, #4]
	p_usart->US_RTOR = 0;
     f98:	6260      	str	r0, [r4, #36]	; 0x24
	p_usart->US_TTGR = 0;
     f9a:	62a0      	str	r0, [r4, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
     f9c:	4620      	mov	r0, r4
     f9e:	f640 7105 	movw	r1, #3845	; 0xf05
     fa2:	f2c0 0100 	movt	r1, #0
     fa6:	4788      	blx	r1
	usart_reset_rx(p_usart);
     fa8:	4620      	mov	r0, r4
     faa:	f640 7215 	movw	r2, #3861	; 0xf15
     fae:	f2c0 0200 	movt	r2, #0
     fb2:	4790      	blx	r2
	/* Reset status bits. */
	usart_reset_status(p_usart);
     fb4:	4620      	mov	r0, r4
     fb6:	f640 731d 	movw	r3, #3869	; 0xf1d
     fba:	f2c0 0300 	movt	r3, #0
     fbe:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
     fc0:	4620      	mov	r0, r4
     fc2:	f640 712d 	movw	r1, #3885	; 0xf2d
     fc6:	f2c0 0100 	movt	r1, #0
     fca:	4788      	blx	r1
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
     fcc:	4620      	mov	r0, r4
     fce:	f640 7225 	movw	r2, #3877	; 0xf25
     fd2:	f2c0 0200 	movt	r2, #0
     fd6:	4790      	blx	r2
     fd8:	bd10      	pop	{r4, pc}
     fda:	bf00      	nop

00000fdc <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
     fdc:	b570      	push	{r4, r5, r6, lr}
     fde:	4605      	mov	r5, r0
     fe0:	460c      	mov	r4, r1
     fe2:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
     fe4:	f640 7385 	movw	r3, #3973	; 0xf85
     fe8:	f2c0 0300 	movt	r3, #0
     fec:	4798      	blx	r3

	ul_reg_val = 0;
     fee:	f640 109c 	movw	r0, #2460	; 0x99c
     ff2:	f2c2 0000 	movt	r0, #8192	; 0x2000
     ff6:	f04f 0100 	mov.w	r1, #0
     ffa:	6001      	str	r1, [r0, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
     ffc:	b1cc      	cbz	r4, 1032 <__stack_size__+0x32>
     ffe:	4628      	mov	r0, r5
    1000:	6821      	ldr	r1, [r4, #0]
    1002:	4632      	mov	r2, r6
    1004:	f640 6385 	movw	r3, #3717	; 0xe85
    1008:	f2c0 0300 	movt	r3, #0
    100c:	4798      	blx	r3
    100e:	b998      	cbnz	r0, 1038 <__stack_size__+0x38>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
    1010:	68a2      	ldr	r2, [r4, #8]
    1012:	6861      	ldr	r1, [r4, #4]
    1014:	ea42 0301 	orr.w	r3, r2, r1
    1018:	6922      	ldr	r2, [r4, #16]
    101a:	4313      	orrs	r3, r2
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
    101c:	68e1      	ldr	r1, [r4, #12]
    101e:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
    1020:	f640 129c 	movw	r2, #2460	; 0x99c
    1024:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1028:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
    102a:	6869      	ldr	r1, [r5, #4]
    102c:	430b      	orrs	r3, r1
    102e:	606b      	str	r3, [r5, #4]

	return 0;
    1030:	bd70      	pop	{r4, r5, r6, pc}

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
    1032:	f04f 0001 	mov.w	r0, #1
    1036:	bd70      	pop	{r4, r5, r6, pc}
    1038:	f04f 0001 	mov.w	r0, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
    103c:	bd70      	pop	{r4, r5, r6, pc}
    103e:	bf00      	nop

00001040 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
    1040:	b5f0      	push	{r4, r5, r6, r7, lr}
    1042:	b083      	sub	sp, #12
    1044:	4604      	mov	r4, r0
    1046:	460d      	mov	r5, r1
	uint32_t val = 0;
    1048:	f04f 0300 	mov.w	r3, #0
    104c:	9301      	str	r3, [sp, #4]
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
    104e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1052:	f2c4 0002 	movt	r0, #16386	; 0x4002
    1056:	4284      	cmp	r4, r0
    1058:	d10f      	bne.n	107a <usart_serial_getchar+0x3a>
		while (usart_read(p_usart, &val));
    105a:	f44f 4680 	mov.w	r6, #16384	; 0x4000
    105e:	f2c4 0602 	movt	r6, #16386	; 0x4002
    1062:	f640 7755 	movw	r7, #3925	; 0xf55
    1066:	f2c0 0700 	movt	r7, #0
    106a:	4630      	mov	r0, r6
    106c:	a901      	add	r1, sp, #4
    106e:	47b8      	blx	r7
    1070:	2800      	cmp	r0, #0
    1072:	d1fa      	bne.n	106a <usart_serial_getchar+0x2a>
		*data = (uint8_t)(val & 0xFF);
    1074:	9901      	ldr	r1, [sp, #4]
    1076:	7029      	strb	r1, [r5, #0]
    1078:	e02b      	b.n	10d2 <usart_serial_getchar+0x92>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
    107a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    107e:	f2c4 0102 	movt	r1, #16386	; 0x4002
    1082:	428c      	cmp	r4, r1
    1084:	d10f      	bne.n	10a6 <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
    1086:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    108a:	f2c4 0402 	movt	r4, #16386	; 0x4002
    108e:	f640 7655 	movw	r6, #3925	; 0xf55
    1092:	f2c0 0600 	movt	r6, #0
    1096:	4620      	mov	r0, r4
    1098:	a901      	add	r1, sp, #4
    109a:	47b0      	blx	r6
    109c:	2800      	cmp	r0, #0
    109e:	d1fa      	bne.n	1096 <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
    10a0:	9801      	ldr	r0, [sp, #4]
    10a2:	7028      	strb	r0, [r5, #0]
    10a4:	e02a      	b.n	10fc <usart_serial_getchar+0xbc>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
    10a6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    10aa:	f2c4 0202 	movt	r2, #16386	; 0x4002
    10ae:	4294      	cmp	r4, r2
    10b0:	d10f      	bne.n	10d2 <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
    10b2:	f44f 4440 	mov.w	r4, #49152	; 0xc000
    10b6:	f2c4 0402 	movt	r4, #16386	; 0x4002
    10ba:	f640 7655 	movw	r6, #3925	; 0xf55
    10be:	f2c0 0600 	movt	r6, #0
    10c2:	4620      	mov	r0, r4
    10c4:	a901      	add	r1, sp, #4
    10c6:	47b0      	blx	r6
    10c8:	2800      	cmp	r0, #0
    10ca:	d1fa      	bne.n	10c2 <usart_serial_getchar+0x82>
		*data = (uint8_t)(val & 0xFF);
    10cc:	9b01      	ldr	r3, [sp, #4]
    10ce:	702b      	strb	r3, [r5, #0]
    10d0:	e014      	b.n	10fc <usart_serial_getchar+0xbc>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
    10d2:	f04f 0200 	mov.w	r2, #0
    10d6:	f2c4 0203 	movt	r2, #16387	; 0x4003
    10da:	4294      	cmp	r4, r2
    10dc:	d10e      	bne.n	10fc <usart_serial_getchar+0xbc>
		while (usart_read(p_usart, &val));
    10de:	f04f 0400 	mov.w	r4, #0
    10e2:	f2c4 0403 	movt	r4, #16387	; 0x4003
    10e6:	f640 7655 	movw	r6, #3925	; 0xf55
    10ea:	f2c0 0600 	movt	r6, #0
    10ee:	4620      	mov	r0, r4
    10f0:	a901      	add	r1, sp, #4
    10f2:	47b0      	blx	r6
    10f4:	2800      	cmp	r0, #0
    10f6:	d1fa      	bne.n	10ee <usart_serial_getchar+0xae>
		*data = (uint8_t)(val & 0xFF);
    10f8:	9b01      	ldr	r3, [sp, #4]
    10fa:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
    10fc:	b003      	add	sp, #12
    10fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001100 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
    1100:	b570      	push	{r4, r5, r6, lr}
    1102:	460c      	mov	r4, r1
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
    1104:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    1108:	f2c4 0302 	movt	r3, #16386	; 0x4002
    110c:	4298      	cmp	r0, r3
    110e:	d10f      	bne.n	1130 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
    1110:	f44f 4580 	mov.w	r5, #16384	; 0x4000
    1114:	f2c4 0502 	movt	r5, #16386	; 0x4002
    1118:	f640 7635 	movw	r6, #3893	; 0xf35
    111c:	f2c0 0600 	movt	r6, #0
    1120:	4628      	mov	r0, r5
    1122:	4621      	mov	r1, r4
    1124:	47b0      	blx	r6
    1126:	2800      	cmp	r0, #0
    1128:	d1fa      	bne.n	1120 <usart_serial_putchar+0x20>
		return 1;
    112a:	f04f 0001 	mov.w	r0, #1
    112e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
    1130:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1134:	f2c4 0102 	movt	r1, #16386	; 0x4002
    1138:	4288      	cmp	r0, r1
    113a:	d10f      	bne.n	115c <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
    113c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    1140:	f2c4 0502 	movt	r5, #16386	; 0x4002
    1144:	f640 7635 	movw	r6, #3893	; 0xf35
    1148:	f2c0 0600 	movt	r6, #0
    114c:	4628      	mov	r0, r5
    114e:	4621      	mov	r1, r4
    1150:	47b0      	blx	r6
    1152:	2800      	cmp	r0, #0
    1154:	d1fa      	bne.n	114c <usart_serial_putchar+0x4c>
		return 1;
    1156:	f04f 0001 	mov.w	r0, #1
    115a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
    115c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    1160:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1164:	4290      	cmp	r0, r2
    1166:	d10f      	bne.n	1188 <usart_serial_putchar+0x88>
		while (usart_write(p_usart, c)!=0);
    1168:	f44f 4540 	mov.w	r5, #49152	; 0xc000
    116c:	f2c4 0502 	movt	r5, #16386	; 0x4002
    1170:	f640 7635 	movw	r6, #3893	; 0xf35
    1174:	f2c0 0600 	movt	r6, #0
    1178:	4628      	mov	r0, r5
    117a:	4621      	mov	r1, r4
    117c:	47b0      	blx	r6
    117e:	2800      	cmp	r0, #0
    1180:	d1fa      	bne.n	1178 <usart_serial_putchar+0x78>
		return 1;
    1182:	f04f 0001 	mov.w	r0, #1
    1186:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
    1188:	f04f 0300 	mov.w	r3, #0
    118c:	f2c4 0303 	movt	r3, #16387	; 0x4003
    1190:	4298      	cmp	r0, r3
    1192:	d10f      	bne.n	11b4 <usart_serial_putchar+0xb4>
		while (usart_write(p_usart, c)!=0);
    1194:	f04f 0500 	mov.w	r5, #0
    1198:	f2c4 0503 	movt	r5, #16387	; 0x4003
    119c:	f640 7635 	movw	r6, #3893	; 0xf35
    11a0:	f2c0 0600 	movt	r6, #0
    11a4:	4628      	mov	r0, r5
    11a6:	4621      	mov	r1, r4
    11a8:	47b0      	blx	r6
    11aa:	2800      	cmp	r0, #0
    11ac:	d1fa      	bne.n	11a4 <usart_serial_putchar+0xa4>
		return 1;
    11ae:	f04f 0001 	mov.w	r0, #1
    11b2:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
    11b4:	f04f 0000 	mov.w	r0, #0
}
    11b8:	bd70      	pop	{r4, r5, r6, pc}
    11ba:	bf00      	nop

000011bc <main>:
 * \brief Application entry point for usart_serial example.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
    11bc:	b570      	push	{r4, r5, r6, lr}
    11be:	b086      	sub	sp, #24
	status_code_t status;
	uint8_t addr;
	/* Initialize the SAM system. */
	sysclk_init();
    11c0:	f642 0355 	movw	r3, #10325	; 0x2855
    11c4:	f2c0 0300 	movt	r3, #0
    11c8:	4798      	blx	r3
	board_init();
    11ca:	f642 1011 	movw	r0, #10513	; 0x2911
    11ce:	f2c0 0000 	movt	r0, #0
    11d2:	4780      	blx	r0
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    11d4:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    11d8:	f2c4 0402 	movt	r4, #16386	; 0x4002
    11dc:	f640 211c 	movw	r1, #2588	; 0xa1c
    11e0:	f2c2 0100 	movt	r1, #8192	; 0x2000
    11e4:	600c      	str	r4, [r1, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    11e6:	f640 2518 	movw	r5, #2584	; 0xa18
    11ea:	f2c2 0500 	movt	r5, #8192	; 0x2000
    11ee:	f241 1201 	movw	r2, #4353	; 0x1101
    11f2:	f2c0 0200 	movt	r2, #0
    11f6:	602a      	str	r2, [r5, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    11f8:	f640 2614 	movw	r6, #2580	; 0xa14
    11fc:	f2c2 0600 	movt	r6, #8192	; 0x2000
    1200:	f241 0341 	movw	r3, #4161	; 0x1041
    1204:	f2c0 0300 	movt	r3, #0
    1208:	6033      	str	r3, [r6, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
    120a:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
    120e:	9000      	str	r0, [sp, #0]
	usart_settings.char_length = opt->charlength;
    1210:	f04f 01c0 	mov.w	r1, #192	; 0xc0
    1214:	9101      	str	r1, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
    1216:	f44f 6500 	mov.w	r5, #2048	; 0x800
    121a:	9502      	str	r5, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
    121c:	f04f 0500 	mov.w	r5, #0
    1220:	9503      	str	r5, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
    1222:	9504      	str	r5, [sp, #16]
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_hz());
#endif
#if (SAM4L)
		sysclk_enable_peripheral_clock(p_usart);
    1224:	4620      	mov	r0, r4
    1226:	f641 22d9 	movw	r2, #6873	; 0x1ad9
    122a:	f2c0 0200 	movt	r2, #0
    122e:	4790      	blx	r2
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
    1230:	4620      	mov	r0, r4
    1232:	f241 76e1 	movw	r6, #6113	; 0x17e1
    1236:	f2c0 0600 	movt	r6, #0
    123a:	47b0      	blx	r6
    123c:	4602      	mov	r2, r0
    123e:	4620      	mov	r0, r4
    1240:	4669      	mov	r1, sp
    1242:	f640 73dd 	movw	r3, #4061	; 0xfdd
    1246:	f2c0 0300 	movt	r3, #0
    124a:	4798      	blx	r3
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
    124c:	4620      	mov	r0, r4
    124e:	f640 61fd 	movw	r1, #3837	; 0xefd
    1252:	f2c0 0100 	movt	r1, #0
    1256:	4788      	blx	r1
		usart_enable_rx(p_usart);
    1258:	4620      	mov	r0, r4
    125a:	f640 740d 	movw	r4, #3853	; 0xf0d
    125e:	f2c0 0400 	movt	r4, #0
    1262:	47a0      	blx	r4
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    1264:	f240 0650 	movw	r6, #80	; 0x50
    1268:	f2c2 0600 	movt	r6, #8192	; 0x2000
    126c:	6830      	ldr	r0, [r6, #0]
    126e:	6880      	ldr	r0, [r0, #8]
    1270:	4629      	mov	r1, r5
    1272:	f243 14b1 	movw	r4, #12721	; 0x31b1
    1276:	f2c0 0400 	movt	r4, #0
    127a:	47a0      	blx	r4
	setbuf(stdin, NULL);
    127c:	6832      	ldr	r2, [r6, #0]
    127e:	6850      	ldr	r0, [r2, #4]
    1280:	4629      	mov	r1, r5
    1282:	47a0      	blx	r4
	//init_twi();
	/* Configure UART for debug message output. */
	configure_console();

	/* Output example information. */
	puts("\n\r\nCamera App\n\r");
    1284:	f645 104c 	movw	r0, #22860	; 0x594c
    1288:	f2c0 0000 	movt	r0, #0
    128c:	f243 15a1 	movw	r5, #12705	; 0x31a1
    1290:	f2c0 0500 	movt	r5, #0
    1294:	47a8      	blx	r5

	puts("Start Scan...\n\r");
    1296:	f645 105c 	movw	r0, #22876	; 0x595c
    129a:	f2c0 0000 	movt	r0, #0
    129e:	47a8      	blx	r5
	

	if (STATUS_OK == OV7670_init())
    12a0:	f240 2375 	movw	r3, #629	; 0x275
    12a4:	f2c0 0300 	movt	r3, #0
    12a8:	4798      	blx	r3
    12aa:	b948      	cbnz	r0, 12c0 <main+0x104>
	{
		printf("Initialise success\n\r");
    12ac:	f645 106c 	movw	r0, #22892	; 0x596c
    12b0:	f2c0 0000 	movt	r0, #0
    12b4:	f243 06ed 	movw	r6, #12525	; 0x30ed
    12b8:	f2c0 0600 	movt	r6, #0
    12bc:	47b0      	blx	r6
    12be:	e008      	b.n	12d2 <main+0x116>
	}
	else
	{
		printf("Initialise fail\n\r");
    12c0:	f645 1084 	movw	r0, #22916	; 0x5984
    12c4:	f2c0 0000 	movt	r0, #0
    12c8:	f243 01ed 	movw	r1, #12525	; 0x30ed
    12cc:	f2c0 0100 	movt	r1, #0
    12d0:	4788      	blx	r1
    12d2:	e7fe      	b.n	12d2 <main+0x116>

000012d4 <dfll_enable_closed_loop>:
	/* Finally, stop the reference clock */
	genclk_disable(0);
}

void dfll_enable_closed_loop(const struct dfll_config *cfg, uint32_t dfll_id)
{
    12d4:	b410      	push	{r4}
}

static inline void genclk_enable(const struct genclk_config *cfg,
		uint32_t id)
{
	 SCIF->SCIF_GCCTRL[id].SCIF_GCCTRL = cfg->ctrl | SCIF_GCCTRL_CEN;
    12d6:	6803      	ldr	r3, [r0, #0]
    12d8:	f043 0201 	orr.w	r2, r3, #1
    12dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
    12e0:	f2c4 030e 	movt	r3, #16398	; 0x400e
    12e4:	675a      	str	r2, [r3, #116]	; 0x74
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    12e6:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    12ea:	b672      	cpsid	i
    12ec:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    12f0:	f240 0244 	movw	r2, #68	; 0x44
    12f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    12f8:	f04f 0400 	mov.w	r4, #0
    12fc:	7014      	strb	r4, [r2, #0]
	 * Enable the DFLL first, but don't wait for the DFLL0RDY bit
	 * because if the DFLL has been disabled before, the DFLL0RDY
	 * bit stays cleared until it is re-enabled.
	 */
	flags = cpu_irq_save();
	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAUL)
    12fe:	f04f 0228 	mov.w	r2, #40	; 0x28
    1302:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    1306:	619a      	str	r2, [r3, #24]
		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_DFLL0CONF - (uint32_t)SCIF);
	SCIF->SCIF_DFLL0CONF = SCIF_DFLL0CONF_EN;
    1308:	f04f 0201 	mov.w	r2, #1
    130c:	629a      	str	r2, [r3, #40]	; 0x28
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    130e:	b939      	cbnz	r1, 1320 <dfll_enable_closed_loop+0x4c>
		cpu_irq_enable();
    1310:	f240 0344 	movw	r3, #68	; 0x44
    1314:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1318:	701a      	strb	r2, [r3, #0]
    131a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    131e:	b662      	cpsie	i

	/*
	 * Then, configure the DFLL, taking care to wait for the
	 * DFLL0RDY bit before every step.
	 */
	dfll_write_reg(DFLL0STEP, cfg->step);
    1320:	f44f 6100 	mov.w	r1, #2048	; 0x800
    1324:	f2c4 010e 	movt	r1, #16398	; 0x400e
    1328:	694a      	ldr	r2, [r1, #20]
    132a:	f012 0f08 	tst.w	r2, #8
    132e:	d0fb      	beq.n	1328 <dfll_enable_closed_loop+0x54>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1330:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1334:	b672      	cpsid	i
    1336:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    133a:	f240 0344 	movw	r3, #68	; 0x44
    133e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1342:	f04f 0200 	mov.w	r2, #0
    1346:	701a      	strb	r2, [r3, #0]
    1348:	f44f 6300 	mov.w	r3, #2048	; 0x800
    134c:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1350:	f04f 0234 	mov.w	r2, #52	; 0x34
    1354:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    1358:	619a      	str	r2, [r3, #24]
    135a:	68c2      	ldr	r2, [r0, #12]
    135c:	635a      	str	r2, [r3, #52]	; 0x34
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    135e:	b949      	cbnz	r1, 1374 <dfll_enable_closed_loop+0xa0>
		cpu_irq_enable();
    1360:	f240 0144 	movw	r1, #68	; 0x44
    1364:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1368:	f04f 0301 	mov.w	r3, #1
    136c:	700b      	strb	r3, [r1, #0]
    136e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1372:	b662      	cpsie	i
	dfll_write_reg(DFLL0MUL, cfg->mul);
    1374:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1378:	f2c4 020e 	movt	r2, #16398	; 0x400e
    137c:	6951      	ldr	r1, [r2, #20]
    137e:	f011 0f08 	tst.w	r1, #8
    1382:	d0fb      	beq.n	137c <dfll_enable_closed_loop+0xa8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1384:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1388:	b672      	cpsid	i
    138a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    138e:	f240 0344 	movw	r3, #68	; 0x44
    1392:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1396:	f04f 0200 	mov.w	r2, #0
    139a:	701a      	strb	r2, [r3, #0]
    139c:	f44f 6300 	mov.w	r3, #2048	; 0x800
    13a0:	f2c4 030e 	movt	r3, #16398	; 0x400e
    13a4:	f04f 0230 	mov.w	r2, #48	; 0x30
    13a8:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    13ac:	619a      	str	r2, [r3, #24]
    13ae:	6882      	ldr	r2, [r0, #8]
    13b0:	631a      	str	r2, [r3, #48]	; 0x30
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    13b2:	b949      	cbnz	r1, 13c8 <dfll_enable_closed_loop+0xf4>
		cpu_irq_enable();
    13b4:	f240 0144 	movw	r1, #68	; 0x44
    13b8:	f2c2 0100 	movt	r1, #8192	; 0x2000
    13bc:	f04f 0301 	mov.w	r3, #1
    13c0:	700b      	strb	r3, [r1, #0]
    13c2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    13c6:	b662      	cpsie	i
	dfll_write_reg(DFLL0SSG, cfg->ssg);
    13c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    13cc:	f2c4 020e 	movt	r2, #16398	; 0x400e
    13d0:	6951      	ldr	r1, [r2, #20]
    13d2:	f011 0f08 	tst.w	r1, #8
    13d6:	d0fb      	beq.n	13d0 <dfll_enable_closed_loop+0xfc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    13d8:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    13dc:	b672      	cpsid	i
    13de:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    13e2:	f240 0344 	movw	r3, #68	; 0x44
    13e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    13ea:	f04f 0200 	mov.w	r2, #0
    13ee:	701a      	strb	r2, [r3, #0]
    13f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
    13f4:	f2c4 030e 	movt	r3, #16398	; 0x400e
    13f8:	f04f 0238 	mov.w	r2, #56	; 0x38
    13fc:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    1400:	619a      	str	r2, [r3, #24]
    1402:	6902      	ldr	r2, [r0, #16]
    1404:	639a      	str	r2, [r3, #56]	; 0x38
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1406:	b949      	cbnz	r1, 141c <dfll_enable_closed_loop+0x148>
		cpu_irq_enable();
    1408:	f240 0144 	movw	r1, #68	; 0x44
    140c:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1410:	f04f 0301 	mov.w	r3, #1
    1414:	700b      	strb	r3, [r1, #0]
    1416:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    141a:	b662      	cpsie	i
	dfll_write_reg(DFLL0CONF, cfg->conf | SCIF_DFLL0CONF_EN);
    141c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1420:	f2c4 020e 	movt	r2, #16398	; 0x400e
    1424:	6951      	ldr	r1, [r2, #20]
    1426:	f011 0f08 	tst.w	r1, #8
    142a:	d0fb      	beq.n	1424 <dfll_enable_closed_loop+0x150>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    142c:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1430:	b672      	cpsid	i
    1432:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1436:	f240 0344 	movw	r3, #68	; 0x44
    143a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    143e:	f04f 0200 	mov.w	r2, #0
    1442:	701a      	strb	r2, [r3, #0]
    1444:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1448:	f2c4 030e 	movt	r3, #16398	; 0x400e
    144c:	f04f 0228 	mov.w	r2, #40	; 0x28
    1450:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    1454:	619a      	str	r2, [r3, #24]
    1456:	6840      	ldr	r0, [r0, #4]
    1458:	f040 0201 	orr.w	r2, r0, #1
    145c:	629a      	str	r2, [r3, #40]	; 0x28
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    145e:	b949      	cbnz	r1, 1474 <dfll_enable_closed_loop+0x1a0>
		cpu_irq_enable();
    1460:	f240 0144 	movw	r1, #68	; 0x44
    1464:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1468:	f04f 0301 	mov.w	r3, #1
    146c:	700b      	strb	r3, [r1, #0]
    146e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1472:	b662      	cpsie	i
}
    1474:	bc10      	pop	{r4}
    1476:	4770      	bx	lr

00001478 <dfll_enable_config_defaults>:
	/* Finally, stop the reference clock */
	genclk_disable(0);
}

void dfll_enable_config_defaults(uint32_t dfll_id)
{
    1478:	b500      	push	{lr}
    147a:	b089      	sub	sp, #36	; 0x24
#ifdef CONFIG_DFLL0_SOURCE
	struct dfll_config dfllcfg;
#endif
	static bool open_loop_done = false;

	if(SCIF->SCIF_DFLL0CONF & SCIF_DFLL0CONF_MODE) {
    147c:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1480:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1484:	6a99      	ldr	r1, [r3, #40]	; 0x28
    1486:	f011 0f02 	tst.w	r1, #2
    148a:	d007      	beq.n	149c <dfll_enable_config_defaults+0x24>
}

static inline bool dfll_is_fine_locked(uint32_t dfll_id)
{
	UNUSED(dfll_id);
	return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_DFLL0LOCKF);
    148c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1490:	f2c4 020e 	movt	r2, #16398	; 0x400e
    1494:	6953      	ldr	r3, [r2, #20]
		// Closed-loop mode
		if (dfll_is_fine_locked(dfll_id)) {
    1496:	f013 0f04 	tst.w	r3, #4
    149a:	d14e      	bne.n	153a <dfll_enable_config_defaults+0xc2>
	}
	if (open_loop_done == true) {
		return;
	}

	switch (dfll_id) {
    149c:	2800      	cmp	r0, #0
    149e:	d14c      	bne.n	153a <dfll_enable_config_defaults+0xc2>
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_OSC32RDY);
    14a0:	f44f 6080 	mov.w	r0, #1024	; 0x400
    14a4:	f2c4 000f 	movt	r0, #16399	; 0x400f
    14a8:	6941      	ldr	r1, [r0, #20]
		/* Nothing to do */
		break;

#ifdef BOARD_OSC32_HZ
	case GENCLK_SRC_OSC32K:
		if (!osc_is_ready(OSC_ID_OSC32)) {
    14aa:	f011 0f01 	tst.w	r1, #1
    14ae:	d10c      	bne.n	14ca <dfll_enable_config_defaults+0x52>
		break;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		osc_priv_enable_osc32();
    14b0:	f241 5241 	movw	r2, #5441	; 0x1541
    14b4:	f2c0 0200 	movt	r2, #0
    14b8:	4790      	blx	r2
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_OSC32RDY);
    14ba:	f44f 6080 	mov.w	r0, #1024	; 0x400
    14be:	f2c4 000f 	movt	r0, #16399	; 0x400f
    14c2:	6943      	ldr	r3, [r0, #20]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    14c4:	f013 0f01 	tst.w	r3, #1
    14c8:	d0fb      	beq.n	14c2 <dfll_enable_config_defaults+0x4a>
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
	cfg->ctrl = (cfg->ctrl & ~SCIF_GCCTRL_OSCSEL_Msk)
    14ca:	f44f 7180 	mov.w	r1, #256	; 0x100
    14ce:	9101      	str	r1, [sp, #4]
	genclk_config_defaults(&cfg->ref_cfg, 0);
	genclk_config_set_source(&cfg->ref_cfg, refclk);
	genclk_config_set_divider(&cfg->ref_cfg, divide);

	// Do a sync before reading a dfll conf register
	SCIF->SCIF_DFLL0SYNC = SCIF_DFLL0SYNC_SYNC;
    14d0:	f44f 6000 	mov.w	r0, #2048	; 0x800
    14d4:	f2c4 000e 	movt	r0, #16398	; 0x400e
    14d8:	f04f 0201 	mov.w	r2, #1
    14dc:	6402      	str	r2, [r0, #64]	; 0x40
	while (!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_DFLL0RDY));
    14de:	f44f 6100 	mov.w	r1, #2048	; 0x800
    14e2:	f2c4 010e 	movt	r1, #16398	; 0x400e
    14e6:	694b      	ldr	r3, [r1, #20]
    14e8:	f013 0f08 	tst.w	r3, #8
    14ec:	d0fb      	beq.n	14e6 <dfll_enable_config_defaults+0x6e>
	cfg->conf = SCIF->SCIF_DFLL0CONF;
    14ee:	f44f 6000 	mov.w	r0, #2048	; 0x800
    14f2:	f2c4 000e 	movt	r0, #16398	; 0x400e
    14f6:	6a81      	ldr	r1, [r0, #40]	; 0x28
{
	if (freq < DFLL_MAX_RANGE3){
		cfg->freq_range = DFLL_RANGE3;
	}
	else if (freq < DFLL_MAX_RANGE2){
		cfg->freq_range = DFLL_RANGE2;
    14f8:	f04f 0202 	mov.w	r2, #2
    14fc:	f88d 201c 	strb.w	r2, [sp, #28]
		cfg->freq_range = DFLL_RANGE1;
	}
	else {
		cfg->freq_range = DFLL_RANGE0;
	}
	cfg->conf &= ~SCIF_DFLL0CONF_RANGE_Msk;
    1500:	f421 3340 	bic.w	r3, r1, #196608	; 0x30000
	cfg->conf |=SCIF_DFLL0CONF_RANGE(cfg->freq_range);
    1504:	f043 1002 	orr.w	r0, r3, #131074	; 0x20002
    1508:	9002      	str	r0, [sp, #8]
	// Select Closed Loop Mode
	cfg->conf |= SCIF_DFLL0CONF_MODE;
	// Write DFLL Frequency Range
	dfll_priv_set_frequency_range(cfg, CONFIG_DFLL0_FREQ);

	cfg->mul = mul;
    150a:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
    150e:	9103      	str	r1, [sp, #12]
	cfg->val = 0;
    1510:	f04f 0100 	mov.w	r1, #0
    1514:	9106      	str	r1, [sp, #24]
};

static inline void dfll_config_set_max_step(struct dfll_config *cfg,
		uint16_t coarse, uint16_t fine)
{
	cfg->step = (SCIF_DFLL0STEP_CSTEP(coarse)
    1516:	f04f 1204 	mov.w	r2, #262148	; 0x40004
    151a:	9204      	str	r2, [sp, #16]
	/*
	 * Initial step length of 4. If this is set too high, the DFLL
	 * may fail to lock.
	 */
	dfll_config_set_max_step(cfg, 4, 4);
	cfg->ssg = 0;
    151c:	9105      	str	r1, [sp, #20]
		dfll_config_init_closed_loop_mode(&dfllcfg,
			CONFIG_DFLL0_SOURCE,
			CONFIG_DFLL0_DIV,
			CONFIG_DFLL0_MUL);

		dfll_enable_closed_loop(&dfllcfg, dfll_id);
    151e:	a801      	add	r0, sp, #4
    1520:	f241 23d5 	movw	r3, #4821	; 0x12d5
    1524:	f2c0 0300 	movt	r3, #0
    1528:	4798      	blx	r3
}

static inline bool dfll_is_fine_locked(uint32_t dfll_id)
{
	UNUSED(dfll_id);
	return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_DFLL0LOCKF);
    152a:	f44f 6000 	mov.w	r0, #2048	; 0x800
    152e:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1532:	6941      	ldr	r1, [r0, #20]
		while (!dfll_is_fine_locked(dfll_id));
    1534:	f011 0f04 	tst.w	r1, #4
    1538:	d0fb      	beq.n	1532 <dfll_enable_config_defaults+0xba>

	default:
		Assert(false);
		break;
	}
}
    153a:	b009      	add	sp, #36	; 0x24
    153c:	bd00      	pop	{pc}
    153e:	bf00      	nop

00001540 <osc_priv_enable_osc32>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1540:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1544:	b672      	cpsid	i
    1546:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    154a:	f240 0344 	movw	r3, #68	; 0x44
    154e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1552:	f04f 0200 	mov.w	r2, #0
    1556:	701a      	strb	r2, [r3, #0]
void osc_priv_enable_osc32(void)
{
	irqflags_t flags;

	flags = cpu_irq_save();
	BSCIF->BSCIF_UNLOCK = BSCIF_UNLOCK_KEY(0xAAu)
    1558:	f44f 6080 	mov.w	r0, #1024	; 0x400
    155c:	f2c4 000f 	movt	r0, #16399	; 0x400f
    1560:	f04f 0320 	mov.w	r3, #32
    1564:	f6ca 2300 	movt	r3, #43520	; 0xaa00
    1568:	6183      	str	r3, [r0, #24]
		| BSCIF_UNLOCK_ADDR((uint32_t)&BSCIF->BSCIF_OSCCTRL32 - (uint32_t)BSCIF);
	BSCIF->BSCIF_OSCCTRL32 =
    156a:	f24a 120d 	movw	r2, #41229	; 0xa10d
    156e:	f2c0 0205 	movt	r2, #5
    1572:	6202      	str	r2, [r0, #32]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1574:	b949      	cbnz	r1, 158a <osc_priv_enable_osc32+0x4a>
		cpu_irq_enable();
    1576:	f240 0144 	movw	r1, #68	; 0x44
    157a:	f2c2 0100 	movt	r1, #8192	; 0x2000
    157e:	f04f 0001 	mov.w	r0, #1
    1582:	7008      	strb	r0, [r1, #0]
    1584:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1588:	b662      	cpsie	i
    158a:	4770      	bx	lr

0000158c <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(uint32_t bus_id, uint32_t module_index)
{
    158c:	b430      	push	{r4, r5}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    158e:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1592:	b672      	cpsid	i
    1594:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1598:	f240 0344 	movw	r3, #68	; 0x44
    159c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    15a0:	f04f 0200 	mov.w	r2, #0
    15a4:	701a      	strb	r2, [r3, #0]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
    15a6:	f04f 0320 	mov.w	r3, #32
    15aa:	f2c4 030e 	movt	r3, #16398	; 0x400e
    15ae:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
	mask |= 1U << module_index;
    15b2:	f04f 0501 	mov.w	r5, #1
    15b6:	fa05 f101 	lsl.w	r1, r5, r1
    15ba:	4311      	orrs	r1, r2
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
    15bc:	f100 0208 	add.w	r2, r0, #8
    15c0:	ea4f 6502 	mov.w	r5, r2, lsl #24
    15c4:	ea4f 5295 	mov.w	r2, r5, lsr #22
	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
	mask |= 1U << module_index;
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    15c8:	f042 452a 	orr.w	r5, r2, #2852126720	; 0xaa000000
    15cc:	f04f 0200 	mov.w	r2, #0
    15d0:	f2c4 020e 	movt	r2, #16398	; 0x400e
    15d4:	6595      	str	r5, [r2, #88]	; 0x58
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
	*(&PM->PM_CPUMASK + bus_id) = mask;
    15d6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    15da:	b94c      	cbnz	r4, 15f0 <sysclk_priv_enable_module+0x64>
		cpu_irq_enable();
    15dc:	f240 0044 	movw	r0, #68	; 0x44
    15e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    15e4:	f04f 0301 	mov.w	r3, #1
    15e8:	7003      	strb	r3, [r0, #0]
    15ea:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    15ee:	b662      	cpsie	i

	cpu_irq_restore(flags);
}
    15f0:	bc30      	pop	{r4, r5}
    15f2:	4770      	bx	lr

000015f4 <sysclk_priv_disable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be disabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_disable_module(uint32_t bus_id, uint32_t module_index)
{
    15f4:	b430      	push	{r4, r5}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    15f6:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    15fa:	b672      	cpsid	i
    15fc:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1600:	f240 0344 	movw	r3, #68	; 0x44
    1604:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1608:	f04f 0200 	mov.w	r2, #0
    160c:	701a      	strb	r2, [r3, #0]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Disable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
    160e:	f04f 0320 	mov.w	r3, #32
    1612:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1616:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
	mask &= ~(1U << module_index);
    161a:	f04f 0501 	mov.w	r5, #1
    161e:	fa05 f101 	lsl.w	r1, r5, r1
    1622:	ea22 0101 	bic.w	r1, r2, r1
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
    1626:	f100 0208 	add.w	r2, r0, #8
    162a:	ea4f 6502 	mov.w	r5, r2, lsl #24
    162e:	ea4f 5295 	mov.w	r2, r5, lsr #22
	flags = cpu_irq_save();

	/* Disable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
	mask &= ~(1U << module_index);
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    1632:	f042 452a 	orr.w	r5, r2, #2852126720	; 0xaa000000
    1636:	f04f 0200 	mov.w	r2, #0
    163a:	f2c4 020e 	movt	r2, #16398	; 0x400e
    163e:	6595      	str	r5, [r2, #88]	; 0x58
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
	*(&PM->PM_CPUMASK + bus_id) = mask;
    1640:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1644:	b94c      	cbnz	r4, 165a <sysclk_priv_disable_module+0x66>
		cpu_irq_enable();
    1646:	f240 0044 	movw	r0, #68	; 0x44
    164a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    164e:	f04f 0301 	mov.w	r3, #1
    1652:	7003      	strb	r3, [r0, #0]
    1654:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1658:	b662      	cpsie	i

	cpu_irq_restore(flags);
}
    165a:	bc30      	pop	{r4, r5}
    165c:	4770      	bx	lr
    165e:	bf00      	nop

00001660 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_enable_pba_module(uint32_t module_index)
{
    1660:	b538      	push	{r3, r4, r5, lr}
    1662:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1664:	f3ef 8510 	mrs	r5, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1668:	b672      	cpsid	i
    166a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    166e:	f240 0344 	movw	r3, #68	; 0x44
    1672:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1676:	f04f 0200 	mov.w	r2, #0
    167a:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (PM->PM_PBAMASK == 0) {
    167c:	4610      	mov	r0, r2
    167e:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1682:	6a81      	ldr	r1, [r0, #40]	; 0x28
    1684:	b941      	cbnz	r1, 1698 <sysclk_enable_pba_module+0x38>
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    1686:	f04f 0001 	mov.w	r0, #1
    168a:	f04f 0105 	mov.w	r1, #5
    168e:	f241 538d 	movw	r3, #5517	; 0x158d
    1692:	f2c0 0300 	movt	r3, #0
    1696:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1698:	b94d      	cbnz	r5, 16ae <sysclk_enable_pba_module+0x4e>
		cpu_irq_enable();
    169a:	f240 0044 	movw	r0, #68	; 0x44
    169e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    16a2:	f04f 0201 	mov.w	r2, #1
    16a6:	7002      	strb	r2, [r0, #0]
    16a8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    16ac:	b662      	cpsie	i
	}

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBA, module_index);
    16ae:	f04f 0002 	mov.w	r0, #2
    16b2:	4621      	mov	r1, r4
    16b4:	f241 538d 	movw	r3, #5517	; 0x158d
    16b8:	f2c0 0300 	movt	r3, #0
    16bc:	4798      	blx	r3
    16be:	bd38      	pop	{r3, r4, r5, pc}

000016c0 <sysclk_disable_pba_module>:
/**
 * \brief Disable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_disable_pba_module(uint32_t module_index)
{
    16c0:	b510      	push	{r4, lr}
    16c2:	4601      	mov	r1, r0
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBA, module_index);
    16c4:	f04f 0002 	mov.w	r0, #2
    16c8:	f241 53f5 	movw	r3, #5621	; 0x15f5
    16cc:	f2c0 0300 	movt	r3, #0
    16d0:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    16d2:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    16d6:	b672      	cpsid	i
    16d8:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    16dc:	f240 0044 	movw	r0, #68	; 0x44
    16e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    16e4:	f04f 0200 	mov.w	r2, #0
    16e8:	7002      	strb	r2, [r0, #0]

	/* Disable the bridge if possible */
	flags = cpu_irq_save();

	if (PM->PM_PBAMASK == 0) {
    16ea:	4611      	mov	r1, r2
    16ec:	f2c4 010e 	movt	r1, #16398	; 0x400e
    16f0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    16f2:	b943      	cbnz	r3, 1706 <sysclk_disable_pba_module+0x46>
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
    16f4:	f04f 0001 	mov.w	r0, #1
    16f8:	f04f 0105 	mov.w	r1, #5
    16fc:	f241 52f5 	movw	r2, #5621	; 0x15f5
    1700:	f2c0 0200 	movt	r2, #0
    1704:	4790      	blx	r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1706:	b94c      	cbnz	r4, 171c <sysclk_disable_pba_module+0x5c>
		cpu_irq_enable();
    1708:	f240 0044 	movw	r0, #68	; 0x44
    170c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1710:	f04f 0101 	mov.w	r1, #1
    1714:	7001      	strb	r1, [r0, #0]
    1716:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    171a:	b662      	cpsie	i
    171c:	bd10      	pop	{r4, pc}
    171e:	bf00      	nop

00001720 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(uint32_t module_index)
{
    1720:	b538      	push	{r3, r4, r5, lr}
    1722:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1724:	f3ef 8510 	mrs	r5, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1728:	b672      	cpsid	i
    172a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    172e:	f240 0344 	movw	r3, #68	; 0x44
    1732:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1736:	f04f 0200 	mov.w	r2, #0
    173a:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (PM->PM_PBBMASK == 0) {
    173c:	4610      	mov	r0, r2
    173e:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1742:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    1744:	b941      	cbnz	r1, 1758 <sysclk_enable_pbb_module+0x38>
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    1746:	f04f 0001 	mov.w	r0, #1
    174a:	f04f 0106 	mov.w	r1, #6
    174e:	f241 538d 	movw	r3, #5517	; 0x158d
    1752:	f2c0 0300 	movt	r3, #0
    1756:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1758:	b94d      	cbnz	r5, 176e <sysclk_enable_pbb_module+0x4e>
		cpu_irq_enable();
    175a:	f240 0044 	movw	r0, #68	; 0x44
    175e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1762:	f04f 0201 	mov.w	r2, #1
    1766:	7002      	strb	r2, [r0, #0]
    1768:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    176c:	b662      	cpsie	i
	}

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBB, module_index);
    176e:	f04f 0003 	mov.w	r0, #3
    1772:	4621      	mov	r1, r4
    1774:	f241 538d 	movw	r3, #5517	; 0x158d
    1778:	f2c0 0300 	movt	r3, #0
    177c:	4798      	blx	r3
    177e:	bd38      	pop	{r3, r4, r5, pc}

00001780 <sysclk_disable_pbb_module>:
/**
 * \brief Disable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_disable_pbb_module(uint32_t module_index)
{
    1780:	b510      	push	{r4, lr}
    1782:	4601      	mov	r1, r0
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBB, module_index);
    1784:	f04f 0003 	mov.w	r0, #3
    1788:	f241 53f5 	movw	r3, #5621	; 0x15f5
    178c:	f2c0 0300 	movt	r3, #0
    1790:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1792:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1796:	b672      	cpsid	i
    1798:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    179c:	f240 0044 	movw	r0, #68	; 0x44
    17a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    17a4:	f04f 0200 	mov.w	r2, #0
    17a8:	7002      	strb	r2, [r0, #0]

	/* Disable the bridge if possible */
	flags = cpu_irq_save();

	if (PM->PM_PBBMASK == 0) {
    17aa:	4611      	mov	r1, r2
    17ac:	f2c4 010e 	movt	r1, #16398	; 0x400e
    17b0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    17b2:	b943      	cbnz	r3, 17c6 <sysclk_disable_pbb_module+0x46>
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
    17b4:	f04f 0001 	mov.w	r0, #1
    17b8:	f04f 0106 	mov.w	r1, #6
    17bc:	f241 52f5 	movw	r2, #5621	; 0x15f5
    17c0:	f2c0 0200 	movt	r2, #0
    17c4:	4790      	blx	r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    17c6:	b94c      	cbnz	r4, 17dc <sysclk_disable_pbb_module+0x5c>
		cpu_irq_enable();
    17c8:	f240 0044 	movw	r0, #68	; 0x44
    17cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    17d0:	f04f 0101 	mov.w	r1, #1
    17d4:	7001      	strb	r1, [r0, #0]
    17d6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    17da:	b662      	cpsie	i
    17dc:	bd10      	pop	{r4, pc}
    17de:	bf00      	nop

000017e0 <sysclk_get_peripheral_bus_hz>:
 * \return Frequency of the bus attached to the specified peripheral, in Hz.
 */
uint32_t sysclk_get_peripheral_bus_hz(const volatile void *module)
{
	/* Fallthroughs intended for modules sharing the same peripheral bus. */
	switch ((uintptr_t)module) {
    17e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    17e4:	f2c4 0307 	movt	r3, #16391	; 0x4007
    17e8:	4298      	cmp	r0, r3
    17ea:	f000 816f 	beq.w	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    17ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    17f2:	f2c4 0107 	movt	r1, #16391	; 0x4007
    17f6:	4288      	cmp	r0, r1
    17f8:	f200 80bb 	bhi.w	1972 <sysclk_get_peripheral_bus_hz+0x192>
    17fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1800:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1804:	4290      	cmp	r0, r2
    1806:	f000 8161 	beq.w	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    180a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    180e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1812:	4298      	cmp	r0, r3
    1814:	d851      	bhi.n	18ba <sysclk_get_peripheral_bus_hz+0xda>
    1816:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    181a:	f2c4 0101 	movt	r1, #16385	; 0x4001
    181e:	4288      	cmp	r0, r1
    1820:	f000 8154 	beq.w	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    1824:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1828:	f2c4 0201 	movt	r2, #16385	; 0x4001
    182c:	4290      	cmp	r0, r2
    182e:	d820      	bhi.n	1872 <sysclk_get_peripheral_bus_hz+0x92>
    1830:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1834:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1838:	4298      	cmp	r0, r3
    183a:	f000 8147 	beq.w	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    183e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1842:	f2c4 0100 	movt	r1, #16384	; 0x4000
    1846:	4288      	cmp	r0, r1
    1848:	d804      	bhi.n	1854 <sysclk_get_peripheral_bus_hz+0x74>
    184a:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    184e:	f040 8140 	bne.w	1ad2 <sysclk_get_peripheral_bus_hz+0x2f2>
    1852:	e13b      	b.n	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    1854:	f04f 0200 	mov.w	r2, #0
    1858:	f2c4 0201 	movt	r2, #16385	; 0x4001
    185c:	4290      	cmp	r0, r2
    185e:	f000 8135 	beq.w	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    1862:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    1866:	f2c4 0301 	movt	r3, #16385	; 0x4001
    186a:	4298      	cmp	r0, r3
    186c:	f040 8131 	bne.w	1ad2 <sysclk_get_peripheral_bus_hz+0x2f2>
    1870:	e12c      	b.n	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    1872:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    1876:	f2c4 0101 	movt	r1, #16385	; 0x4001
    187a:	4288      	cmp	r0, r1
    187c:	f000 8126 	beq.w	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    1880:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    1884:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1888:	4290      	cmp	r0, r2
    188a:	d807      	bhi.n	189c <sysclk_get_peripheral_bus_hz+0xbc>
    188c:	f44f 4304 	mov.w	r3, #33792	; 0x8400
    1890:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1894:	4298      	cmp	r0, r3
    1896:	f040 811c 	bne.w	1ad2 <sysclk_get_peripheral_bus_hz+0x2f2>
    189a:	e117      	b.n	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    189c:	f44f 4144 	mov.w	r1, #50176	; 0xc400
    18a0:	f2c4 0101 	movt	r1, #16385	; 0x4001
    18a4:	4288      	cmp	r0, r1
    18a6:	f000 8111 	beq.w	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    18aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    18ae:	f2c4 0202 	movt	r2, #16386	; 0x4002
    18b2:	4290      	cmp	r0, r2
    18b4:	f040 810d 	bne.w	1ad2 <sysclk_get_peripheral_bus_hz+0x2f2>
    18b8:	e108      	b.n	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    18ba:	f04f 0300 	mov.w	r3, #0
    18be:	f2c4 0304 	movt	r3, #16388	; 0x4004
    18c2:	4298      	cmp	r0, r3
    18c4:	f000 8102 	beq.w	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    18c8:	f04f 0100 	mov.w	r1, #0
    18cc:	f2c4 0104 	movt	r1, #16388	; 0x4004
    18d0:	4288      	cmp	r0, r1
    18d2:	d823      	bhi.n	191c <sysclk_get_peripheral_bus_hz+0x13c>
    18d4:	f04f 0200 	mov.w	r2, #0
    18d8:	f2c4 0203 	movt	r2, #16387	; 0x4003
    18dc:	4290      	cmp	r0, r2
    18de:	f000 80f5 	beq.w	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    18e2:	f04f 0300 	mov.w	r3, #0
    18e6:	f2c4 0303 	movt	r3, #16387	; 0x4003
    18ea:	4298      	cmp	r0, r3
    18ec:	d807      	bhi.n	18fe <sysclk_get_peripheral_bus_hz+0x11e>
    18ee:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    18f2:	f2c4 0102 	movt	r1, #16386	; 0x4002
    18f6:	4288      	cmp	r0, r1
    18f8:	f040 80eb 	bne.w	1ad2 <sysclk_get_peripheral_bus_hz+0x2f2>
    18fc:	e0e6      	b.n	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    18fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1902:	f2c4 0203 	movt	r2, #16387	; 0x4003
    1906:	4290      	cmp	r0, r2
    1908:	f000 80e0 	beq.w	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    190c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    1910:	f2c4 0303 	movt	r3, #16387	; 0x4003
    1914:	4298      	cmp	r0, r3
    1916:	f040 80dc 	bne.w	1ad2 <sysclk_get_peripheral_bus_hz+0x2f2>
    191a:	e0d7      	b.n	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    191c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1920:	f2c4 0106 	movt	r1, #16390	; 0x4006
    1924:	4288      	cmp	r0, r1
    1926:	f000 80d1 	beq.w	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    192a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    192e:	f2c4 0206 	movt	r2, #16390	; 0x4006
    1932:	4290      	cmp	r0, r2
    1934:	d80e      	bhi.n	1954 <sysclk_get_peripheral_bus_hz+0x174>
    1936:	f04f 0300 	mov.w	r3, #0
    193a:	f2c4 0306 	movt	r3, #16390	; 0x4006
    193e:	4298      	cmp	r0, r3
    1940:	f000 80c4 	beq.w	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    1944:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    1948:	f2c4 0106 	movt	r1, #16390	; 0x4006
    194c:	4288      	cmp	r0, r1
    194e:	f040 80c0 	bne.w	1ad2 <sysclk_get_peripheral_bus_hz+0x2f2>
    1952:	e0bb      	b.n	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    1954:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    1958:	f2c4 0206 	movt	r2, #16390	; 0x4006
    195c:	4290      	cmp	r0, r2
    195e:	f000 80b5 	beq.w	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    1962:	f04f 0300 	mov.w	r3, #0
    1966:	f2c4 0307 	movt	r3, #16391	; 0x4007
    196a:	4298      	cmp	r0, r3
    196c:	f040 80b1 	bne.w	1ad2 <sysclk_get_peripheral_bus_hz+0x2f2>
    1970:	e0ac      	b.n	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    1972:	f04f 0100 	mov.w	r1, #0
    1976:	f2c4 010e 	movt	r1, #16398	; 0x400e
    197a:	4288      	cmp	r0, r1
    197c:	f000 80a6 	beq.w	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    1980:	f04f 0200 	mov.w	r2, #0
    1984:	f2c4 020e 	movt	r2, #16398	; 0x400e
    1988:	4290      	cmp	r0, r2
    198a:	d84e      	bhi.n	1a2a <sysclk_get_peripheral_bus_hz+0x24a>
    198c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1990:	f2c4 030a 	movt	r3, #16394	; 0x400a
    1994:	4298      	cmp	r0, r3
    1996:	f000 8099 	beq.w	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    199a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    199e:	f2c4 010a 	movt	r1, #16394	; 0x400a
    19a2:	4288      	cmp	r0, r1
    19a4:	d821      	bhi.n	19ea <sysclk_get_peripheral_bus_hz+0x20a>
    19a6:	f04f 0200 	mov.w	r2, #0
    19aa:	f2c4 0208 	movt	r2, #16392	; 0x4008
    19ae:	4290      	cmp	r0, r2
    19b0:	f000 808c 	beq.w	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    19b4:	f04f 0300 	mov.w	r3, #0
    19b8:	f2c4 0308 	movt	r3, #16392	; 0x4008
    19bc:	4298      	cmp	r0, r3
    19be:	d807      	bhi.n	19d0 <sysclk_get_peripheral_bus_hz+0x1f0>
    19c0:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    19c4:	f2c4 0107 	movt	r1, #16391	; 0x4007
    19c8:	4288      	cmp	r0, r1
    19ca:	f040 8082 	bne.w	1ad2 <sysclk_get_peripheral_bus_hz+0x2f2>
    19ce:	e07d      	b.n	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    19d0:	f04f 0200 	mov.w	r2, #0
    19d4:	f2c4 020a 	movt	r2, #16394	; 0x400a
    19d8:	4290      	cmp	r0, r2
    19da:	d077      	beq.n	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    19dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    19e0:	f2c4 030a 	movt	r3, #16394	; 0x400a
    19e4:	4298      	cmp	r0, r3
    19e6:	d174      	bne.n	1ad2 <sysclk_get_peripheral_bus_hz+0x2f2>
    19e8:	e070      	b.n	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    19ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    19ee:	f2c4 010a 	movt	r1, #16394	; 0x400a
    19f2:	4288      	cmp	r0, r1
    19f4:	d06a      	beq.n	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    19f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    19fa:	f2c4 020a 	movt	r2, #16394	; 0x400a
    19fe:	4290      	cmp	r0, r2
    1a00:	d806      	bhi.n	1a10 <sysclk_get_peripheral_bus_hz+0x230>
    1a02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    1a06:	f2c4 030a 	movt	r3, #16394	; 0x400a
    1a0a:	4298      	cmp	r0, r3
    1a0c:	d161      	bne.n	1ad2 <sysclk_get_peripheral_bus_hz+0x2f2>
    1a0e:	e05d      	b.n	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    1a10:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    1a14:	f2c4 010a 	movt	r1, #16394	; 0x400a
    1a18:	4288      	cmp	r0, r1
    1a1a:	d057      	beq.n	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    1a1c:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
    1a20:	f2c4 020a 	movt	r2, #16394	; 0x400a
    1a24:	4290      	cmp	r0, r2
    1a26:	d154      	bne.n	1ad2 <sysclk_get_peripheral_bus_hz+0x2f2>
    1a28:	e050      	b.n	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    1a2a:	f04f 0300 	mov.w	r3, #0
    1a2e:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1a32:	4298      	cmp	r0, r3
    1a34:	d04a      	beq.n	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    1a36:	f04f 0100 	mov.w	r1, #0
    1a3a:	f2c4 010f 	movt	r1, #16399	; 0x400f
    1a3e:	4288      	cmp	r0, r1
    1a40:	d81f      	bhi.n	1a82 <sysclk_get_peripheral_bus_hz+0x2a2>
    1a42:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1a46:	f2c4 020e 	movt	r2, #16398	; 0x400e
    1a4a:	4290      	cmp	r0, r2
    1a4c:	d03e      	beq.n	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    1a4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1a52:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1a56:	4298      	cmp	r0, r3
    1a58:	d806      	bhi.n	1a68 <sysclk_get_peripheral_bus_hz+0x288>
    1a5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    1a5e:	f2c4 010e 	movt	r1, #16398	; 0x400e
    1a62:	4288      	cmp	r0, r1
    1a64:	d135      	bne.n	1ad2 <sysclk_get_peripheral_bus_hz+0x2f2>
    1a66:	e031      	b.n	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    1a68:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    1a6c:	f2c4 020e 	movt	r2, #16398	; 0x400e
    1a70:	4290      	cmp	r0, r2
    1a72:	d02b      	beq.n	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    1a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1a78:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1a7c:	4298      	cmp	r0, r3
    1a7e:	d128      	bne.n	1ad2 <sysclk_get_peripheral_bus_hz+0x2f2>
    1a80:	e024      	b.n	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    1a82:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    1a86:	f2c4 010f 	movt	r1, #16399	; 0x400f
    1a8a:	4288      	cmp	r0, r1
    1a8c:	d01e      	beq.n	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    1a8e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    1a92:	f2c4 020f 	movt	r2, #16399	; 0x400f
    1a96:	4290      	cmp	r0, r2
    1a98:	d80c      	bhi.n	1ab4 <sysclk_get_peripheral_bus_hz+0x2d4>
    1a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1a9e:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1aa2:	4298      	cmp	r0, r3
    1aa4:	d012      	beq.n	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    1aa6:	f44f 6100 	mov.w	r1, #2048	; 0x800
    1aaa:	f2c4 010f 	movt	r1, #16399	; 0x400f
    1aae:	4288      	cmp	r0, r1
    1ab0:	d10f      	bne.n	1ad2 <sysclk_get_peripheral_bus_hz+0x2f2>
    1ab2:	e00b      	b.n	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    1ab4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1ab8:	f2c4 020f 	movt	r2, #16399	; 0x400f
    1abc:	4290      	cmp	r0, r2
    1abe:	d005      	beq.n	1acc <sysclk_get_peripheral_bus_hz+0x2ec>
    1ac0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    1ac4:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1ac8:	4298      	cmp	r0, r3
    1aca:	d102      	bne.n	1ad2 <sysclk_get_peripheral_bus_hz+0x2f2>
	case PARC_ADDR:
	case CATB_ADDR:
	case TWIM2_ADDR:
	case TWIM3_ADDR:
	case LCDCA_ADDR:
		return sysclk_get_pba_hz();
    1acc:	f04f 7037 	mov.w	r0, #47972352	; 0x2dc0000
    1ad0:	4770      	bx	lr
	case PICOUART_ADDR:
		return sysclk_get_pbd_hz();

	default:
		Assert(false);
		return 0;
    1ad2:	f04f 0000 	mov.w	r0, #0
	}
}
    1ad6:	4770      	bx	lr

00001ad8 <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
    1ad8:	b508      	push	{r3, lr}
	switch ((uintptr_t)module) {
    1ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1ade:	f2c4 0307 	movt	r3, #16391	; 0x4007
    1ae2:	4298      	cmp	r0, r3
    1ae4:	f000 827f 	beq.w	1fe6 <sysclk_enable_peripheral_clock+0x50e>
    1ae8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1aec:	f2c4 0107 	movt	r1, #16391	; 0x4007
    1af0:	4288      	cmp	r0, r1
    1af2:	f200 80bb 	bhi.w	1c6c <sysclk_enable_peripheral_clock+0x194>
    1af6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1afa:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1afe:	4290      	cmp	r0, r2
    1b00:	f000 81f2 	beq.w	1ee8 <sysclk_enable_peripheral_clock+0x410>
    1b04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1b08:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1b0c:	4298      	cmp	r0, r3
    1b0e:	d851      	bhi.n	1bb4 <sysclk_enable_peripheral_clock+0xdc>
    1b10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1b14:	f2c4 0101 	movt	r1, #16385	; 0x4001
    1b18:	4288      	cmp	r0, r1
    1b1a:	f000 81b0 	beq.w	1e7e <sysclk_enable_peripheral_clock+0x3a6>
    1b1e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1b22:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1b26:	4290      	cmp	r0, r2
    1b28:	d820      	bhi.n	1b6c <sysclk_enable_peripheral_clock+0x94>
    1b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1b2e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1b32:	4298      	cmp	r0, r3
    1b34:	f000 8171 	beq.w	1e1a <sysclk_enable_peripheral_clock+0x342>
    1b38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1b3c:	f2c4 0100 	movt	r1, #16384	; 0x4000
    1b40:	4288      	cmp	r0, r1
    1b42:	d804      	bhi.n	1b4e <sysclk_enable_peripheral_clock+0x76>
    1b44:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    1b48:	f040 8334 	bne.w	21b4 <sysclk_enable_peripheral_clock+0x6dc>
    1b4c:	e15d      	b.n	1e0a <sysclk_enable_peripheral_clock+0x332>
    1b4e:	f04f 0300 	mov.w	r3, #0
    1b52:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1b56:	4298      	cmp	r0, r3
    1b58:	f000 8167 	beq.w	1e2a <sysclk_enable_peripheral_clock+0x352>
    1b5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    1b60:	f2c4 0101 	movt	r1, #16385	; 0x4001
    1b64:	4288      	cmp	r0, r1
    1b66:	f040 8325 	bne.w	21b4 <sysclk_enable_peripheral_clock+0x6dc>
    1b6a:	e173      	b.n	1e54 <sysclk_enable_peripheral_clock+0x37c>
    1b6c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    1b70:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1b74:	4298      	cmp	r0, r3
    1b76:	f000 8192 	beq.w	1e9e <sysclk_enable_peripheral_clock+0x3c6>
    1b7a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    1b7e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1b82:	4290      	cmp	r0, r2
    1b84:	d807      	bhi.n	1b96 <sysclk_enable_peripheral_clock+0xbe>
    1b86:	f44f 4104 	mov.w	r1, #33792	; 0x8400
    1b8a:	f2c4 0101 	movt	r1, #16385	; 0x4001
    1b8e:	4288      	cmp	r0, r1
    1b90:	f040 8310 	bne.w	21b4 <sysclk_enable_peripheral_clock+0x6dc>
    1b94:	e17b      	b.n	1e8e <sysclk_enable_peripheral_clock+0x3b6>
    1b96:	f44f 4244 	mov.w	r2, #50176	; 0xc400
    1b9a:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1b9e:	4290      	cmp	r0, r2
    1ba0:	f000 8185 	beq.w	1eae <sysclk_enable_peripheral_clock+0x3d6>
    1ba4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    1ba8:	f2c4 0102 	movt	r1, #16386	; 0x4002
    1bac:	4288      	cmp	r0, r1
    1bae:	f040 8301 	bne.w	21b4 <sysclk_enable_peripheral_clock+0x6dc>
    1bb2:	e184      	b.n	1ebe <sysclk_enable_peripheral_clock+0x3e6>
    1bb4:	f04f 0200 	mov.w	r2, #0
    1bb8:	f2c4 0204 	movt	r2, #16388	; 0x4004
    1bbc:	4290      	cmp	r0, r2
    1bbe:	f000 81e2 	beq.w	1f86 <sysclk_enable_peripheral_clock+0x4ae>
    1bc2:	f04f 0100 	mov.w	r1, #0
    1bc6:	f2c4 0104 	movt	r1, #16388	; 0x4004
    1bca:	4288      	cmp	r0, r1
    1bcc:	d823      	bhi.n	1c16 <sysclk_enable_peripheral_clock+0x13e>
    1bce:	f04f 0300 	mov.w	r3, #0
    1bd2:	f2c4 0303 	movt	r3, #16387	; 0x4003
    1bd6:	4298      	cmp	r0, r3
    1bd8:	f000 81b0 	beq.w	1f3c <sysclk_enable_peripheral_clock+0x464>
    1bdc:	f04f 0200 	mov.w	r2, #0
    1be0:	f2c4 0203 	movt	r2, #16387	; 0x4003
    1be4:	4290      	cmp	r0, r2
    1be6:	d807      	bhi.n	1bf8 <sysclk_enable_peripheral_clock+0x120>
    1be8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    1bec:	f2c4 0102 	movt	r1, #16386	; 0x4002
    1bf0:	4288      	cmp	r0, r1
    1bf2:	f040 82df 	bne.w	21b4 <sysclk_enable_peripheral_clock+0x6dc>
    1bf6:	e18c      	b.n	1f12 <sysclk_enable_peripheral_clock+0x43a>
    1bf8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1bfc:	f2c4 0203 	movt	r2, #16387	; 0x4003
    1c00:	4290      	cmp	r0, r2
    1c02:	f000 81b0 	beq.w	1f66 <sysclk_enable_peripheral_clock+0x48e>
    1c06:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    1c0a:	f2c4 0103 	movt	r1, #16387	; 0x4003
    1c0e:	4288      	cmp	r0, r1
    1c10:	f040 82d0 	bne.w	21b4 <sysclk_enable_peripheral_clock+0x6dc>
    1c14:	e1af      	b.n	1f76 <sysclk_enable_peripheral_clock+0x49e>
    1c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1c1a:	f2c4 0306 	movt	r3, #16390	; 0x4006
    1c1e:	4298      	cmp	r0, r3
    1c20:	f000 81c9 	beq.w	1fb6 <sysclk_enable_peripheral_clock+0x4de>
    1c24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1c28:	f2c4 0106 	movt	r1, #16390	; 0x4006
    1c2c:	4288      	cmp	r0, r1
    1c2e:	d80e      	bhi.n	1c4e <sysclk_enable_peripheral_clock+0x176>
    1c30:	f04f 0200 	mov.w	r2, #0
    1c34:	f2c4 0206 	movt	r2, #16390	; 0x4006
    1c38:	4290      	cmp	r0, r2
    1c3a:	f000 81ac 	beq.w	1f96 <sysclk_enable_peripheral_clock+0x4be>
    1c3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    1c42:	f2c4 0306 	movt	r3, #16390	; 0x4006
    1c46:	4298      	cmp	r0, r3
    1c48:	f040 82b4 	bne.w	21b4 <sysclk_enable_peripheral_clock+0x6dc>
    1c4c:	e1ab      	b.n	1fa6 <sysclk_enable_peripheral_clock+0x4ce>
    1c4e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    1c52:	f2c4 0306 	movt	r3, #16390	; 0x4006
    1c56:	4298      	cmp	r0, r3
    1c58:	f000 81b5 	beq.w	1fc6 <sysclk_enable_peripheral_clock+0x4ee>
    1c5c:	f04f 0100 	mov.w	r1, #0
    1c60:	f2c4 0107 	movt	r1, #16391	; 0x4007
    1c64:	4288      	cmp	r0, r1
    1c66:	f040 82a5 	bne.w	21b4 <sysclk_enable_peripheral_clock+0x6dc>
    1c6a:	e1b4      	b.n	1fd6 <sysclk_enable_peripheral_clock+0x4fe>
    1c6c:	f04f 0100 	mov.w	r1, #0
    1c70:	f2c4 010e 	movt	r1, #16398	; 0x400e
    1c74:	4288      	cmp	r0, r1
    1c76:	f000 8232 	beq.w	20de <sysclk_enable_peripheral_clock+0x606>
    1c7a:	f04f 0300 	mov.w	r3, #0
    1c7e:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1c82:	4298      	cmp	r0, r3
    1c84:	d85b      	bhi.n	1d3e <sysclk_enable_peripheral_clock+0x266>
    1c86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1c8a:	f2c4 020a 	movt	r2, #16394	; 0x400a
    1c8e:	4290      	cmp	r0, r2
    1c90:	f000 81e2 	beq.w	2058 <sysclk_enable_peripheral_clock+0x580>
    1c94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    1c98:	f2c4 010a 	movt	r1, #16394	; 0x400a
    1c9c:	4288      	cmp	r0, r1
    1c9e:	d823      	bhi.n	1ce8 <sysclk_enable_peripheral_clock+0x210>
    1ca0:	f04f 0300 	mov.w	r3, #0
    1ca4:	f2c4 0308 	movt	r3, #16392	; 0x4008
    1ca8:	4298      	cmp	r0, r3
    1caa:	f000 81ac 	beq.w	2006 <sysclk_enable_peripheral_clock+0x52e>
    1cae:	f04f 0200 	mov.w	r2, #0
    1cb2:	f2c4 0208 	movt	r2, #16392	; 0x4008
    1cb6:	4290      	cmp	r0, r2
    1cb8:	d807      	bhi.n	1cca <sysclk_enable_peripheral_clock+0x1f2>
    1cba:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    1cbe:	f2c4 0107 	movt	r1, #16391	; 0x4007
    1cc2:	4288      	cmp	r0, r1
    1cc4:	f040 8276 	bne.w	21b4 <sysclk_enable_peripheral_clock+0x6dc>
    1cc8:	e195      	b.n	1ff6 <sysclk_enable_peripheral_clock+0x51e>
    1cca:	f04f 0200 	mov.w	r2, #0
    1cce:	f2c4 020a 	movt	r2, #16394	; 0x400a
    1cd2:	4290      	cmp	r0, r2
    1cd4:	f000 819f 	beq.w	2016 <sysclk_enable_peripheral_clock+0x53e>
    1cd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    1cdc:	f2c4 010a 	movt	r1, #16394	; 0x400a
    1ce0:	4288      	cmp	r0, r1
    1ce2:	f040 8267 	bne.w	21b4 <sysclk_enable_peripheral_clock+0x6dc>
    1ce6:	e1a6      	b.n	2036 <sysclk_enable_peripheral_clock+0x55e>
    1ce8:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1cec:	f2c4 030a 	movt	r3, #16394	; 0x400a
    1cf0:	4298      	cmp	r0, r3
    1cf2:	f000 81db 	beq.w	20ac <sysclk_enable_peripheral_clock+0x5d4>
    1cf6:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    1cfa:	f2c4 010a 	movt	r1, #16394	; 0x400a
    1cfe:	4288      	cmp	r0, r1
    1d00:	d80e      	bhi.n	1d20 <sysclk_enable_peripheral_clock+0x248>
    1d02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    1d06:	f2c4 020a 	movt	r2, #16394	; 0x400a
    1d0a:	4290      	cmp	r0, r2
    1d0c:	f000 81ac 	beq.w	2068 <sysclk_enable_peripheral_clock+0x590>
    1d10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    1d14:	f2c4 030a 	movt	r3, #16394	; 0x400a
    1d18:	4298      	cmp	r0, r3
    1d1a:	f040 824b 	bne.w	21b4 <sysclk_enable_peripheral_clock+0x6dc>
    1d1e:	e1b4      	b.n	208a <sysclk_enable_peripheral_clock+0x5b2>
    1d20:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
    1d24:	f2c4 010a 	movt	r1, #16394	; 0x400a
    1d28:	4288      	cmp	r0, r1
    1d2a:	f000 81d0 	beq.w	20ce <sysclk_enable_peripheral_clock+0x5f6>
    1d2e:	f04f 0300 	mov.w	r3, #0
    1d32:	f2c4 030b 	movt	r3, #16395	; 0x400b
    1d36:	4298      	cmp	r0, r3
    1d38:	f040 823c 	bne.w	21b4 <sysclk_enable_peripheral_clock+0x6dc>
    1d3c:	e05b      	b.n	1df6 <sysclk_enable_peripheral_clock+0x31e>
    1d3e:	f04f 0300 	mov.w	r3, #0
    1d42:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1d46:	4298      	cmp	r0, r3
    1d48:	f000 81fa 	beq.w	2140 <sysclk_enable_peripheral_clock+0x668>
    1d4c:	f04f 0200 	mov.w	r2, #0
    1d50:	f2c4 020f 	movt	r2, #16399	; 0x400f
    1d54:	4290      	cmp	r0, r2
    1d56:	d823      	bhi.n	1da0 <sysclk_enable_peripheral_clock+0x2c8>
    1d58:	f44f 6100 	mov.w	r1, #2048	; 0x800
    1d5c:	f2c4 010e 	movt	r1, #16398	; 0x400e
    1d60:	4288      	cmp	r0, r1
    1d62:	f000 81d0 	beq.w	2106 <sysclk_enable_peripheral_clock+0x62e>
    1d66:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1d6a:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1d6e:	4298      	cmp	r0, r3
    1d70:	d807      	bhi.n	1d82 <sysclk_enable_peripheral_clock+0x2aa>
    1d72:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1d76:	f2c4 020e 	movt	r2, #16398	; 0x400e
    1d7a:	4290      	cmp	r0, r2
    1d7c:	f040 821a 	bne.w	21b4 <sysclk_enable_peripheral_clock+0x6dc>
    1d80:	e1b7      	b.n	20f2 <sysclk_enable_peripheral_clock+0x61a>
    1d82:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    1d86:	f2c4 010e 	movt	r1, #16398	; 0x400e
    1d8a:	4288      	cmp	r0, r1
    1d8c:	f000 81c5 	beq.w	211a <sysclk_enable_peripheral_clock+0x642>
    1d90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1d94:	f2c4 020e 	movt	r2, #16398	; 0x400e
    1d98:	4290      	cmp	r0, r2
    1d9a:	f040 820b 	bne.w	21b4 <sysclk_enable_peripheral_clock+0x6dc>
    1d9e:	e1c6      	b.n	212e <sysclk_enable_peripheral_clock+0x656>
    1da0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    1da4:	f2c4 010f 	movt	r1, #16399	; 0x400f
    1da8:	4288      	cmp	r0, r1
    1daa:	f000 81e7 	beq.w	217c <sysclk_enable_peripheral_clock+0x6a4>
    1dae:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    1db2:	f2c4 020f 	movt	r2, #16399	; 0x400f
    1db6:	4290      	cmp	r0, r2
    1db8:	d80e      	bhi.n	1dd8 <sysclk_enable_peripheral_clock+0x300>
    1dba:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1dbe:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1dc2:	4298      	cmp	r0, r3
    1dc4:	f000 81c6 	beq.w	2154 <sysclk_enable_peripheral_clock+0x67c>
    1dc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    1dcc:	f2c4 010f 	movt	r1, #16399	; 0x400f
    1dd0:	4288      	cmp	r0, r1
    1dd2:	f040 81ef 	bne.w	21b4 <sysclk_enable_peripheral_clock+0x6dc>
    1dd6:	e1c7      	b.n	2168 <sysclk_enable_peripheral_clock+0x690>
    1dd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    1ddc:	f2c4 010f 	movt	r1, #16399	; 0x400f
    1de0:	4288      	cmp	r0, r1
    1de2:	f000 81d5 	beq.w	2190 <sysclk_enable_peripheral_clock+0x6b8>
    1de6:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
    1dea:	f2c4 020f 	movt	r2, #16399	; 0x400f
    1dee:	4290      	cmp	r0, r2
    1df0:	f040 81e0 	bne.w	21b4 <sysclk_enable_peripheral_clock+0x6dc>
    1df4:	e1d6      	b.n	21a4 <sysclk_enable_peripheral_clock+0x6cc>
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    1df6:	f04f 0001 	mov.w	r0, #1
    1dfa:	f04f 0109 	mov.w	r1, #9
    1dfe:	f241 528d 	movw	r2, #5517	; 0x158d
    1e02:	f2c0 0200 	movt	r2, #0
    1e06:	4790      	blx	r2
    1e08:	bd08      	pop	{r3, pc}
	case AESA_ADDR:
		sysclk_enable_hsb_module(SYSCLK_AESA_HSB);
		break;

	case IISC_ADDR:
		sysclk_enable_pba_module(SYSCLK_IISC);
    1e0a:	f04f 0000 	mov.w	r0, #0
    1e0e:	f241 6261 	movw	r2, #5729	; 0x1661
    1e12:	f2c0 0200 	movt	r2, #0
    1e16:	4790      	blx	r2
		break;
    1e18:	bd08      	pop	{r3, pc}

	case SPI_ADDR:
		sysclk_enable_pba_module(SYSCLK_SPI);
    1e1a:	f04f 0001 	mov.w	r0, #1
    1e1e:	f241 6161 	movw	r1, #5729	; 0x1661
    1e22:	f2c0 0100 	movt	r1, #0
    1e26:	4788      	blx	r1
		break;
    1e28:	bd08      	pop	{r3, pc}

	case TC0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TC0);
    1e2a:	f04f 0002 	mov.w	r0, #2
    1e2e:	f241 6361 	movw	r3, #5729	; 0x1661
    1e32:	f2c0 0300 	movt	r3, #0
    1e36:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    1e38:	f04f 0000 	mov.w	r0, #0
    1e3c:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1e40:	6c01      	ldr	r1, [r0, #64]	; 0x40
	temp_mask |= mask;
    1e42:	f041 0355 	orr.w	r3, r1, #85	; 0x55
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    1e46:	f04f 0240 	mov.w	r2, #64	; 0x40
    1e4a:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    1e4e:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    1e50:	6403      	str	r3, [r0, #64]	; 0x40
    1e52:	bd08      	pop	{r3, pc}
			| PBA_DIVMASK_TIMER_CLOCK5
			);
		break;

	case TC1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TC1);
    1e54:	f04f 0003 	mov.w	r0, #3
    1e58:	f241 6261 	movw	r2, #5729	; 0x1661
    1e5c:	f2c0 0200 	movt	r2, #0
    1e60:	4790      	blx	r2
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    1e62:	f04f 0000 	mov.w	r0, #0
    1e66:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1e6a:	6c03      	ldr	r3, [r0, #64]	; 0x40
	temp_mask |= mask;
    1e6c:	f043 0155 	orr.w	r1, r3, #85	; 0x55
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    1e70:	f04f 0240 	mov.w	r2, #64	; 0x40
    1e74:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    1e78:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    1e7a:	6401      	str	r1, [r0, #64]	; 0x40
    1e7c:	bd08      	pop	{r3, pc}
			| PBA_DIVMASK_TIMER_CLOCK5
			);
		break;

	case TWIM0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM0);
    1e7e:	f04f 0004 	mov.w	r0, #4
    1e82:	f241 6361 	movw	r3, #5729	; 0x1661
    1e86:	f2c0 0300 	movt	r3, #0
    1e8a:	4798      	blx	r3
		break;
    1e8c:	bd08      	pop	{r3, pc}

	case TWIS0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIS0);
    1e8e:	f04f 0005 	mov.w	r0, #5
    1e92:	f241 6361 	movw	r3, #5729	; 0x1661
    1e96:	f2c0 0300 	movt	r3, #0
    1e9a:	4798      	blx	r3
		break;
    1e9c:	bd08      	pop	{r3, pc}

	case TWIM1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM1);
    1e9e:	f04f 0006 	mov.w	r0, #6
    1ea2:	f241 6161 	movw	r1, #5729	; 0x1661
    1ea6:	f2c0 0100 	movt	r1, #0
    1eaa:	4788      	blx	r1
		break;
    1eac:	bd08      	pop	{r3, pc}

	case TWIS1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIS1);
    1eae:	f04f 0007 	mov.w	r0, #7
    1eb2:	f241 6261 	movw	r2, #5729	; 0x1661
    1eb6:	f2c0 0200 	movt	r2, #0
    1eba:	4790      	blx	r2
		break;
    1ebc:	bd08      	pop	{r3, pc}

	case USART0_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART0);
    1ebe:	f04f 0008 	mov.w	r0, #8
    1ec2:	f241 6361 	movw	r3, #5729	; 0x1661
    1ec6:	f2c0 0300 	movt	r3, #0
    1eca:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    1ecc:	f04f 0000 	mov.w	r0, #0
    1ed0:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1ed4:	6c02      	ldr	r2, [r0, #64]	; 0x40
	temp_mask |= mask;
    1ed6:	f042 0104 	orr.w	r1, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    1eda:	f04f 0340 	mov.w	r3, #64	; 0x40
    1ede:	f6ca 2300 	movt	r3, #43520	; 0xaa00
    1ee2:	6583      	str	r3, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    1ee4:	6401      	str	r1, [r0, #64]	; 0x40
    1ee6:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART1_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART1);
    1ee8:	f04f 0009 	mov.w	r0, #9
    1eec:	f241 6361 	movw	r3, #5729	; 0x1661
    1ef0:	f2c0 0300 	movt	r3, #0
    1ef4:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    1ef6:	f04f 0000 	mov.w	r0, #0
    1efa:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1efe:	6c01      	ldr	r1, [r0, #64]	; 0x40
	temp_mask |= mask;
    1f00:	f041 0304 	orr.w	r3, r1, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    1f04:	f04f 0240 	mov.w	r2, #64	; 0x40
    1f08:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    1f0c:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    1f0e:	6403      	str	r3, [r0, #64]	; 0x40
    1f10:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART2_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART2);
    1f12:	f04f 000a 	mov.w	r0, #10
    1f16:	f241 6361 	movw	r3, #5729	; 0x1661
    1f1a:	f2c0 0300 	movt	r3, #0
    1f1e:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    1f20:	f04f 0000 	mov.w	r0, #0
    1f24:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1f28:	6c02      	ldr	r2, [r0, #64]	; 0x40
	temp_mask |= mask;
    1f2a:	f042 0104 	orr.w	r1, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    1f2e:	f04f 0340 	mov.w	r3, #64	; 0x40
    1f32:	f6ca 2300 	movt	r3, #43520	; 0xaa00
    1f36:	6583      	str	r3, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    1f38:	6401      	str	r1, [r0, #64]	; 0x40
    1f3a:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART3_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART3);
    1f3c:	f04f 000b 	mov.w	r0, #11
    1f40:	f241 6161 	movw	r1, #5729	; 0x1661
    1f44:	f2c0 0100 	movt	r1, #0
    1f48:	4788      	blx	r1
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    1f4a:	f04f 0000 	mov.w	r0, #0
    1f4e:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1f52:	6c03      	ldr	r3, [r0, #64]	; 0x40
	temp_mask |= mask;
    1f54:	f043 0104 	orr.w	r1, r3, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    1f58:	f04f 0240 	mov.w	r2, #64	; 0x40
    1f5c:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    1f60:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    1f62:	6401      	str	r1, [r0, #64]	; 0x40
    1f64:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case ADCIFE_ADDR:
		sysclk_enable_pba_module(SYSCLK_ADCIFE);
    1f66:	f04f 000c 	mov.w	r0, #12
    1f6a:	f241 6261 	movw	r2, #5729	; 0x1661
    1f6e:	f2c0 0200 	movt	r2, #0
    1f72:	4790      	blx	r2
		break;
    1f74:	bd08      	pop	{r3, pc}

	case DACC_ADDR:
		sysclk_enable_pba_module(SYSCLK_DACC);
    1f76:	f04f 000d 	mov.w	r0, #13
    1f7a:	f241 6361 	movw	r3, #5729	; 0x1661
    1f7e:	f2c0 0300 	movt	r3, #0
    1f82:	4798      	blx	r3
		break;
    1f84:	bd08      	pop	{r3, pc}

	case ACIFC_ADDR:
		sysclk_enable_pba_module(SYSCLK_ACIFC);
    1f86:	f04f 000e 	mov.w	r0, #14
    1f8a:	f241 6261 	movw	r2, #5729	; 0x1661
    1f8e:	f2c0 0200 	movt	r2, #0
    1f92:	4790      	blx	r2
		break;
    1f94:	bd08      	pop	{r3, pc}

	case GLOC_ADDR:
		sysclk_enable_pba_module(SYSCLK_GLOC);
    1f96:	f04f 000f 	mov.w	r0, #15
    1f9a:	f241 6261 	movw	r2, #5729	; 0x1661
    1f9e:	f2c0 0200 	movt	r2, #0
    1fa2:	4790      	blx	r2
		break;
    1fa4:	bd08      	pop	{r3, pc}

	case ABDACB_ADDR:
		sysclk_enable_pba_module(SYSCLK_ABDACB);
    1fa6:	f04f 0010 	mov.w	r0, #16
    1faa:	f241 6161 	movw	r1, #5729	; 0x1661
    1fae:	f2c0 0100 	movt	r1, #0
    1fb2:	4788      	blx	r1
		break;
    1fb4:	bd08      	pop	{r3, pc}

	case TRNG_ADDR:
		sysclk_enable_pba_module(SYSCLK_TRNG);
    1fb6:	f04f 0011 	mov.w	r0, #17
    1fba:	f241 6161 	movw	r1, #5729	; 0x1661
    1fbe:	f2c0 0100 	movt	r1, #0
    1fc2:	4788      	blx	r1
		break;
    1fc4:	bd08      	pop	{r3, pc}

	case PARC_ADDR:
		sysclk_enable_pba_module(SYSCLK_PARC);
    1fc6:	f04f 0012 	mov.w	r0, #18
    1fca:	f241 6361 	movw	r3, #5729	; 0x1661
    1fce:	f2c0 0300 	movt	r3, #0
    1fd2:	4798      	blx	r3
		break;
    1fd4:	bd08      	pop	{r3, pc}

	case CATB_ADDR:
		sysclk_enable_pba_module(SYSCLK_CATB);
    1fd6:	f04f 0013 	mov.w	r0, #19
    1fda:	f241 6261 	movw	r2, #5729	; 0x1661
    1fde:	f2c0 0200 	movt	r2, #0
    1fe2:	4790      	blx	r2
		break;
    1fe4:	bd08      	pop	{r3, pc}

	case TWIM2_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM2);
    1fe6:	f04f 0015 	mov.w	r0, #21
    1fea:	f241 6161 	movw	r1, #5729	; 0x1661
    1fee:	f2c0 0100 	movt	r1, #0
    1ff2:	4788      	blx	r1
		break;
    1ff4:	bd08      	pop	{r3, pc}

	case TWIM3_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM3);
    1ff6:	f04f 0016 	mov.w	r0, #22
    1ffa:	f241 6361 	movw	r3, #5729	; 0x1661
    1ffe:	f2c0 0300 	movt	r3, #0
    2002:	4798      	blx	r3
		break;
    2004:	bd08      	pop	{r3, pc}

	case LCDCA_ADDR:
		sysclk_enable_pba_module(SYSCLK_LCDCA);
    2006:	f04f 0017 	mov.w	r0, #23
    200a:	f241 6261 	movw	r2, #5729	; 0x1661
    200e:	f2c0 0200 	movt	r2, #0
    2012:	4790      	blx	r2
		break;
    2014:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    2016:	f04f 0001 	mov.w	r0, #1
    201a:	4601      	mov	r1, r0
    201c:	f241 538d 	movw	r3, #5517	; 0x158d
    2020:	f2c0 0300 	movt	r3, #0
    2024:	4798      	blx	r3

	case HFLASHC_ADDR:
		sysclk_enable_hsb_module(SYSCLK_HFLASHC_DATA);
		sysclk_enable_pbb_module(SYSCLK_HFLASHC_REGS);
    2026:	f04f 0000 	mov.w	r0, #0
    202a:	f241 7121 	movw	r1, #5921	; 0x1721
    202e:	f2c0 0100 	movt	r1, #0
    2032:	4788      	blx	r1
		break;
    2034:	bd08      	pop	{r3, pc}
    2036:	f04f 0001 	mov.w	r0, #1
    203a:	f04f 0102 	mov.w	r1, #2
    203e:	f241 538d 	movw	r3, #5517	; 0x158d
    2042:	f2c0 0300 	movt	r3, #0
    2046:	4798      	blx	r3

	case HCACHE_ADDR:
		sysclk_enable_hsb_module(SYSCLK_HRAMC1_DATA);
		sysclk_enable_pbb_module(SYSCLK_HRAMC1_REGS);
    2048:	f04f 0001 	mov.w	r0, #1
    204c:	f241 7221 	movw	r2, #5921	; 0x1721
    2050:	f2c0 0200 	movt	r2, #0
    2054:	4790      	blx	r2
		break;
    2056:	bd08      	pop	{r3, pc}

	case HMATRIX_ADDR:
		sysclk_enable_pbb_module(SYSCLK_HMATRIX);
    2058:	f04f 0002 	mov.w	r0, #2
    205c:	f241 7121 	movw	r1, #5921	; 0x1721
    2060:	f2c0 0100 	movt	r1, #0
    2064:	4788      	blx	r1
		break;
    2066:	bd08      	pop	{r3, pc}
    2068:	f04f 0001 	mov.w	r0, #1
    206c:	f04f 0100 	mov.w	r1, #0
    2070:	f241 538d 	movw	r3, #5517	; 0x158d
    2074:	f2c0 0300 	movt	r3, #0
    2078:	4798      	blx	r3

	case PDCA_ADDR:
		sysclk_enable_hsb_module(SYSCLK_PDCA_HSB);
		sysclk_enable_pbb_module(SYSCLK_PDCA_PB);
    207a:	f04f 0003 	mov.w	r0, #3
    207e:	f241 7221 	movw	r2, #5921	; 0x1721
    2082:	f2c0 0200 	movt	r2, #0
    2086:	4790      	blx	r2
		break;
    2088:	bd08      	pop	{r3, pc}
    208a:	f04f 0001 	mov.w	r0, #1
    208e:	f04f 0104 	mov.w	r1, #4
    2092:	f241 528d 	movw	r2, #5517	; 0x158d
    2096:	f2c0 0200 	movt	r2, #0
    209a:	4790      	blx	r2

	case CRCCU_ADDR:
		sysclk_enable_hsb_module(SYSCLK_CRCCU_DATA);
		sysclk_enable_pbb_module(SYSCLK_CRCCU_REGS);
    209c:	f04f 0004 	mov.w	r0, #4
    20a0:	f241 7121 	movw	r1, #5921	; 0x1721
    20a4:	f2c0 0100 	movt	r1, #0
    20a8:	4788      	blx	r1
		break;
    20aa:	bd08      	pop	{r3, pc}
    20ac:	f04f 0001 	mov.w	r0, #1
    20b0:	f04f 0103 	mov.w	r1, #3
    20b4:	f241 538d 	movw	r3, #5517	; 0x158d
    20b8:	f2c0 0300 	movt	r3, #0
    20bc:	4798      	blx	r3

	case USBC_ADDR:
		sysclk_enable_hsb_module(SYSCLK_USBC_DATA);
		sysclk_enable_pbb_module(SYSCLK_USBC_REGS);
    20be:	f04f 0005 	mov.w	r0, #5
    20c2:	f241 7221 	movw	r2, #5921	; 0x1721
    20c6:	f2c0 0200 	movt	r2, #0
    20ca:	4790      	blx	r2
		break;
    20cc:	bd08      	pop	{r3, pc}

	case PEVC_ADDR:
		sysclk_enable_pbb_module(SYSCLK_PEVC);
    20ce:	f04f 0006 	mov.w	r0, #6
    20d2:	f241 7121 	movw	r1, #5921	; 0x1721
    20d6:	f2c0 0100 	movt	r1, #0
    20da:	4788      	blx	r1
		break;
    20dc:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbc_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_PBC, module_index);
    20de:	f04f 0004 	mov.w	r0, #4
    20e2:	f04f 0100 	mov.w	r1, #0
    20e6:	f241 538d 	movw	r3, #5517	; 0x158d
    20ea:	f2c0 0300 	movt	r3, #0
    20ee:	4798      	blx	r3
    20f0:	bd08      	pop	{r3, pc}
    20f2:	f04f 0004 	mov.w	r0, #4
    20f6:	f04f 0101 	mov.w	r1, #1
    20fa:	f241 538d 	movw	r3, #5517	; 0x158d
    20fe:	f2c0 0300 	movt	r3, #0
    2102:	4798      	blx	r3
    2104:	bd08      	pop	{r3, pc}
    2106:	f04f 0004 	mov.w	r0, #4
    210a:	f04f 0102 	mov.w	r1, #2
    210e:	f241 538d 	movw	r3, #5517	; 0x158d
    2112:	f2c0 0300 	movt	r3, #0
    2116:	4798      	blx	r3
    2118:	bd08      	pop	{r3, pc}
    211a:	f04f 0004 	mov.w	r0, #4
    211e:	f04f 0103 	mov.w	r1, #3
    2122:	f241 528d 	movw	r2, #5517	; 0x158d
    2126:	f2c0 0200 	movt	r2, #0
    212a:	4790      	blx	r2
    212c:	bd08      	pop	{r3, pc}
    212e:	f04f 0004 	mov.w	r0, #4
    2132:	4601      	mov	r1, r0
    2134:	f241 538d 	movw	r3, #5517	; 0x158d
    2138:	f2c0 0300 	movt	r3, #0
    213c:	4798      	blx	r3
    213e:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbd_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_PBD, module_index);
    2140:	f04f 0005 	mov.w	r0, #5
    2144:	f04f 0100 	mov.w	r1, #0
    2148:	f241 528d 	movw	r2, #5517	; 0x158d
    214c:	f2c0 0200 	movt	r2, #0
    2150:	4790      	blx	r2
    2152:	bd08      	pop	{r3, pc}
    2154:	f04f 0005 	mov.w	r0, #5
    2158:	f04f 0101 	mov.w	r1, #1
    215c:	f241 538d 	movw	r3, #5517	; 0x158d
    2160:	f2c0 0300 	movt	r3, #0
    2164:	4798      	blx	r3
    2166:	bd08      	pop	{r3, pc}
    2168:	f04f 0005 	mov.w	r0, #5
    216c:	f04f 0102 	mov.w	r1, #2
    2170:	f241 528d 	movw	r2, #5517	; 0x158d
    2174:	f2c0 0200 	movt	r2, #0
    2178:	4790      	blx	r2
    217a:	bd08      	pop	{r3, pc}
    217c:	f04f 0005 	mov.w	r0, #5
    2180:	f04f 0103 	mov.w	r1, #3
    2184:	f241 538d 	movw	r3, #5517	; 0x158d
    2188:	f2c0 0300 	movt	r3, #0
    218c:	4798      	blx	r3
    218e:	bd08      	pop	{r3, pc}
    2190:	f04f 0005 	mov.w	r0, #5
    2194:	f04f 0104 	mov.w	r1, #4
    2198:	f241 528d 	movw	r2, #5517	; 0x158d
    219c:	f2c0 0200 	movt	r2, #0
    21a0:	4790      	blx	r2
    21a2:	bd08      	pop	{r3, pc}
    21a4:	f04f 0005 	mov.w	r0, #5
    21a8:	4601      	mov	r1, r0
    21aa:	f241 538d 	movw	r3, #5517	; 0x158d
    21ae:	f2c0 0300 	movt	r3, #0
    21b2:	4798      	blx	r3
    21b4:	bd08      	pop	{r3, pc}
    21b6:	bf00      	nop

000021b8 <sysclk_disable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be disabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
    21b8:	b508      	push	{r3, lr}
	switch ((uintptr_t)module) {
    21ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    21be:	f2c4 0307 	movt	r3, #16391	; 0x4007
    21c2:	4298      	cmp	r0, r3
    21c4:	f000 8231 	beq.w	262a <sysclk_disable_peripheral_clock+0x472>
    21c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    21cc:	f2c4 0107 	movt	r1, #16391	; 0x4007
    21d0:	4288      	cmp	r0, r1
    21d2:	f200 80bb 	bhi.w	234c <sysclk_disable_peripheral_clock+0x194>
    21d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    21da:	f2c4 0202 	movt	r2, #16386	; 0x4002
    21de:	4290      	cmp	r0, r2
    21e0:	f000 81cb 	beq.w	257a <sysclk_disable_peripheral_clock+0x3c2>
    21e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    21e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
    21ec:	4298      	cmp	r0, r3
    21ee:	d851      	bhi.n	2294 <sysclk_disable_peripheral_clock+0xdc>
    21f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    21f4:	f2c4 0101 	movt	r1, #16385	; 0x4001
    21f8:	4288      	cmp	r0, r1
    21fa:	f000 8196 	beq.w	252a <sysclk_disable_peripheral_clock+0x372>
    21fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2202:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2206:	4290      	cmp	r0, r2
    2208:	d820      	bhi.n	224c <sysclk_disable_peripheral_clock+0x94>
    220a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    220e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2212:	4298      	cmp	r0, r3
    2214:	f000 8171 	beq.w	24fa <sysclk_disable_peripheral_clock+0x342>
    2218:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    221c:	f2c4 0100 	movt	r1, #16384	; 0x4000
    2220:	4288      	cmp	r0, r1
    2222:	d804      	bhi.n	222e <sysclk_disable_peripheral_clock+0x76>
    2224:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    2228:	f040 82f3 	bne.w	2812 <sysclk_disable_peripheral_clock+0x65a>
    222c:	e15d      	b.n	24ea <sysclk_disable_peripheral_clock+0x332>
    222e:	f04f 0300 	mov.w	r3, #0
    2232:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2236:	4298      	cmp	r0, r3
    2238:	f000 8167 	beq.w	250a <sysclk_disable_peripheral_clock+0x352>
    223c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    2240:	f2c4 0101 	movt	r1, #16385	; 0x4001
    2244:	4288      	cmp	r0, r1
    2246:	f040 82e4 	bne.w	2812 <sysclk_disable_peripheral_clock+0x65a>
    224a:	e166      	b.n	251a <sysclk_disable_peripheral_clock+0x362>
    224c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    2250:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2254:	4290      	cmp	r0, r2
    2256:	f000 8178 	beq.w	254a <sysclk_disable_peripheral_clock+0x392>
    225a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    225e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2262:	4298      	cmp	r0, r3
    2264:	d807      	bhi.n	2276 <sysclk_disable_peripheral_clock+0xbe>
    2266:	f44f 4104 	mov.w	r1, #33792	; 0x8400
    226a:	f2c4 0101 	movt	r1, #16385	; 0x4001
    226e:	4288      	cmp	r0, r1
    2270:	f040 82cf 	bne.w	2812 <sysclk_disable_peripheral_clock+0x65a>
    2274:	e161      	b.n	253a <sysclk_disable_peripheral_clock+0x382>
    2276:	f44f 4344 	mov.w	r3, #50176	; 0xc400
    227a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    227e:	4298      	cmp	r0, r3
    2280:	f000 816b 	beq.w	255a <sysclk_disable_peripheral_clock+0x3a2>
    2284:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    2288:	f2c4 0102 	movt	r1, #16386	; 0x4002
    228c:	4288      	cmp	r0, r1
    228e:	f040 82c0 	bne.w	2812 <sysclk_disable_peripheral_clock+0x65a>
    2292:	e16a      	b.n	256a <sysclk_disable_peripheral_clock+0x3b2>
    2294:	f04f 0300 	mov.w	r3, #0
    2298:	f2c4 0304 	movt	r3, #16388	; 0x4004
    229c:	4298      	cmp	r0, r3
    229e:	f000 8194 	beq.w	25ca <sysclk_disable_peripheral_clock+0x412>
    22a2:	f04f 0100 	mov.w	r1, #0
    22a6:	f2c4 0104 	movt	r1, #16388	; 0x4004
    22aa:	4288      	cmp	r0, r1
    22ac:	d823      	bhi.n	22f6 <sysclk_disable_peripheral_clock+0x13e>
    22ae:	f04f 0200 	mov.w	r2, #0
    22b2:	f2c4 0203 	movt	r2, #16387	; 0x4003
    22b6:	4290      	cmp	r0, r2
    22b8:	f000 816f 	beq.w	259a <sysclk_disable_peripheral_clock+0x3e2>
    22bc:	f04f 0300 	mov.w	r3, #0
    22c0:	f2c4 0303 	movt	r3, #16387	; 0x4003
    22c4:	4298      	cmp	r0, r3
    22c6:	d807      	bhi.n	22d8 <sysclk_disable_peripheral_clock+0x120>
    22c8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    22cc:	f2c4 0102 	movt	r1, #16386	; 0x4002
    22d0:	4288      	cmp	r0, r1
    22d2:	f040 829e 	bne.w	2812 <sysclk_disable_peripheral_clock+0x65a>
    22d6:	e158      	b.n	258a <sysclk_disable_peripheral_clock+0x3d2>
    22d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    22dc:	f2c4 0303 	movt	r3, #16387	; 0x4003
    22e0:	4298      	cmp	r0, r3
    22e2:	f000 8162 	beq.w	25aa <sysclk_disable_peripheral_clock+0x3f2>
    22e6:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    22ea:	f2c4 0103 	movt	r1, #16387	; 0x4003
    22ee:	4288      	cmp	r0, r1
    22f0:	f040 828f 	bne.w	2812 <sysclk_disable_peripheral_clock+0x65a>
    22f4:	e161      	b.n	25ba <sysclk_disable_peripheral_clock+0x402>
    22f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    22fa:	f2c4 0206 	movt	r2, #16390	; 0x4006
    22fe:	4290      	cmp	r0, r2
    2300:	f000 817b 	beq.w	25fa <sysclk_disable_peripheral_clock+0x442>
    2304:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2308:	f2c4 0306 	movt	r3, #16390	; 0x4006
    230c:	4298      	cmp	r0, r3
    230e:	d80e      	bhi.n	232e <sysclk_disable_peripheral_clock+0x176>
    2310:	f04f 0100 	mov.w	r1, #0
    2314:	f2c4 0106 	movt	r1, #16390	; 0x4006
    2318:	4288      	cmp	r0, r1
    231a:	f000 815e 	beq.w	25da <sysclk_disable_peripheral_clock+0x422>
    231e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2322:	f2c4 0206 	movt	r2, #16390	; 0x4006
    2326:	4290      	cmp	r0, r2
    2328:	f040 8273 	bne.w	2812 <sysclk_disable_peripheral_clock+0x65a>
    232c:	e15d      	b.n	25ea <sysclk_disable_peripheral_clock+0x432>
    232e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    2332:	f2c4 0206 	movt	r2, #16390	; 0x4006
    2336:	4290      	cmp	r0, r2
    2338:	f000 8167 	beq.w	260a <sysclk_disable_peripheral_clock+0x452>
    233c:	f04f 0300 	mov.w	r3, #0
    2340:	f2c4 0307 	movt	r3, #16391	; 0x4007
    2344:	4298      	cmp	r0, r3
    2346:	f040 8264 	bne.w	2812 <sysclk_disable_peripheral_clock+0x65a>
    234a:	e166      	b.n	261a <sysclk_disable_peripheral_clock+0x462>
    234c:	f04f 0300 	mov.w	r3, #0
    2350:	f2c4 030e 	movt	r3, #16398	; 0x400e
    2354:	4298      	cmp	r0, r3
    2356:	f000 81dc 	beq.w	2712 <sysclk_disable_peripheral_clock+0x55a>
    235a:	f04f 0100 	mov.w	r1, #0
    235e:	f2c4 010e 	movt	r1, #16398	; 0x400e
    2362:	4288      	cmp	r0, r1
    2364:	d85b      	bhi.n	241e <sysclk_disable_peripheral_clock+0x266>
    2366:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    236a:	f2c4 020a 	movt	r2, #16394	; 0x400a
    236e:	4290      	cmp	r0, r2
    2370:	f000 818c 	beq.w	268c <sysclk_disable_peripheral_clock+0x4d4>
    2374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    2378:	f2c4 030a 	movt	r3, #16394	; 0x400a
    237c:	4298      	cmp	r0, r3
    237e:	d823      	bhi.n	23c8 <sysclk_disable_peripheral_clock+0x210>
    2380:	f04f 0100 	mov.w	r1, #0
    2384:	f2c4 0108 	movt	r1, #16392	; 0x4008
    2388:	4288      	cmp	r0, r1
    238a:	f000 815e 	beq.w	264a <sysclk_disable_peripheral_clock+0x492>
    238e:	f04f 0200 	mov.w	r2, #0
    2392:	f2c4 0208 	movt	r2, #16392	; 0x4008
    2396:	4290      	cmp	r0, r2
    2398:	d807      	bhi.n	23aa <sysclk_disable_peripheral_clock+0x1f2>
    239a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    239e:	f2c4 0307 	movt	r3, #16391	; 0x4007
    23a2:	4298      	cmp	r0, r3
    23a4:	f040 8235 	bne.w	2812 <sysclk_disable_peripheral_clock+0x65a>
    23a8:	e147      	b.n	263a <sysclk_disable_peripheral_clock+0x482>
    23aa:	f04f 0200 	mov.w	r2, #0
    23ae:	f2c4 020a 	movt	r2, #16394	; 0x400a
    23b2:	4290      	cmp	r0, r2
    23b4:	f000 8151 	beq.w	265a <sysclk_disable_peripheral_clock+0x4a2>
    23b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    23bc:	f2c4 030a 	movt	r3, #16394	; 0x400a
    23c0:	4298      	cmp	r0, r3
    23c2:	f040 8226 	bne.w	2812 <sysclk_disable_peripheral_clock+0x65a>
    23c6:	e150      	b.n	266a <sysclk_disable_peripheral_clock+0x4b2>
    23c8:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    23cc:	f2c4 010a 	movt	r1, #16394	; 0x400a
    23d0:	4288      	cmp	r0, r1
    23d2:	f000 8185 	beq.w	26e0 <sysclk_disable_peripheral_clock+0x528>
    23d6:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    23da:	f2c4 030a 	movt	r3, #16394	; 0x400a
    23de:	4298      	cmp	r0, r3
    23e0:	d80e      	bhi.n	2400 <sysclk_disable_peripheral_clock+0x248>
    23e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    23e6:	f2c4 020a 	movt	r2, #16394	; 0x400a
    23ea:	4290      	cmp	r0, r2
    23ec:	f000 8156 	beq.w	269c <sysclk_disable_peripheral_clock+0x4e4>
    23f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    23f4:	f2c4 010a 	movt	r1, #16394	; 0x400a
    23f8:	4288      	cmp	r0, r1
    23fa:	f040 820a 	bne.w	2812 <sysclk_disable_peripheral_clock+0x65a>
    23fe:	e15e      	b.n	26be <sysclk_disable_peripheral_clock+0x506>
    2400:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
    2404:	f2c4 020a 	movt	r2, #16394	; 0x400a
    2408:	4290      	cmp	r0, r2
    240a:	f000 817a 	beq.w	2702 <sysclk_disable_peripheral_clock+0x54a>
    240e:	f04f 0300 	mov.w	r3, #0
    2412:	f2c4 030b 	movt	r3, #16395	; 0x400b
    2416:	4298      	cmp	r0, r3
    2418:	f040 81fb 	bne.w	2812 <sysclk_disable_peripheral_clock+0x65a>
    241c:	e05b      	b.n	24d6 <sysclk_disable_peripheral_clock+0x31e>
    241e:	f04f 0300 	mov.w	r3, #0
    2422:	f2c4 030f 	movt	r3, #16399	; 0x400f
    2426:	4298      	cmp	r0, r3
    2428:	f000 81a4 	beq.w	2774 <sysclk_disable_peripheral_clock+0x5bc>
    242c:	f04f 0200 	mov.w	r2, #0
    2430:	f2c4 020f 	movt	r2, #16399	; 0x400f
    2434:	4290      	cmp	r0, r2
    2436:	d823      	bhi.n	2480 <sysclk_disable_peripheral_clock+0x2c8>
    2438:	f44f 6100 	mov.w	r1, #2048	; 0x800
    243c:	f2c4 010e 	movt	r1, #16398	; 0x400e
    2440:	4288      	cmp	r0, r1
    2442:	f000 817a 	beq.w	273a <sysclk_disable_peripheral_clock+0x582>
    2446:	f44f 6300 	mov.w	r3, #2048	; 0x800
    244a:	f2c4 030e 	movt	r3, #16398	; 0x400e
    244e:	4298      	cmp	r0, r3
    2450:	d807      	bhi.n	2462 <sysclk_disable_peripheral_clock+0x2aa>
    2452:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2456:	f2c4 020e 	movt	r2, #16398	; 0x400e
    245a:	4290      	cmp	r0, r2
    245c:	f040 81d9 	bne.w	2812 <sysclk_disable_peripheral_clock+0x65a>
    2460:	e161      	b.n	2726 <sysclk_disable_peripheral_clock+0x56e>
    2462:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    2466:	f2c4 010e 	movt	r1, #16398	; 0x400e
    246a:	4288      	cmp	r0, r1
    246c:	f000 816f 	beq.w	274e <sysclk_disable_peripheral_clock+0x596>
    2470:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    2474:	f2c4 020e 	movt	r2, #16398	; 0x400e
    2478:	4290      	cmp	r0, r2
    247a:	f040 81ca 	bne.w	2812 <sysclk_disable_peripheral_clock+0x65a>
    247e:	e170      	b.n	2762 <sysclk_disable_peripheral_clock+0x5aa>
    2480:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    2484:	f2c4 010f 	movt	r1, #16399	; 0x400f
    2488:	4288      	cmp	r0, r1
    248a:	f000 8191 	beq.w	27b0 <sysclk_disable_peripheral_clock+0x5f8>
    248e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    2492:	f2c4 020f 	movt	r2, #16399	; 0x400f
    2496:	4290      	cmp	r0, r2
    2498:	d80e      	bhi.n	24b8 <sysclk_disable_peripheral_clock+0x300>
    249a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    249e:	f2c4 030f 	movt	r3, #16399	; 0x400f
    24a2:	4298      	cmp	r0, r3
    24a4:	f000 8170 	beq.w	2788 <sysclk_disable_peripheral_clock+0x5d0>
    24a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    24ac:	f2c4 010f 	movt	r1, #16399	; 0x400f
    24b0:	4288      	cmp	r0, r1
    24b2:	f040 81ae 	bne.w	2812 <sysclk_disable_peripheral_clock+0x65a>
    24b6:	e171      	b.n	279c <sysclk_disable_peripheral_clock+0x5e4>
    24b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    24bc:	f2c4 010f 	movt	r1, #16399	; 0x400f
    24c0:	4288      	cmp	r0, r1
    24c2:	f000 817f 	beq.w	27c4 <sysclk_disable_peripheral_clock+0x60c>
    24c6:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
    24ca:	f2c4 020f 	movt	r2, #16399	; 0x400f
    24ce:	4290      	cmp	r0, r2
    24d0:	f040 819f 	bne.w	2812 <sysclk_disable_peripheral_clock+0x65a>
    24d4:	e180      	b.n	27d8 <sysclk_disable_peripheral_clock+0x620>
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
    24d6:	f04f 0001 	mov.w	r0, #1
    24da:	f04f 0109 	mov.w	r1, #9
    24de:	f241 52f5 	movw	r2, #5621	; 0x15f5
    24e2:	f2c0 0200 	movt	r2, #0
    24e6:	4790      	blx	r2
    24e8:	e17e      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>
	case AESA_ADDR:
		sysclk_disable_hsb_module(SYSCLK_AESA_HSB);
		break;

	case IISC_ADDR:
		sysclk_disable_pba_module(SYSCLK_IISC);
    24ea:	f04f 0000 	mov.w	r0, #0
    24ee:	f241 62c1 	movw	r2, #5825	; 0x16c1
    24f2:	f2c0 0200 	movt	r2, #0
    24f6:	4790      	blx	r2
		break;
    24f8:	e176      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>

	case SPI_ADDR:
		sysclk_disable_pba_module(SYSCLK_SPI);
    24fa:	f04f 0001 	mov.w	r0, #1
    24fe:	f241 61c1 	movw	r1, #5825	; 0x16c1
    2502:	f2c0 0100 	movt	r1, #0
    2506:	4788      	blx	r1
		break;
    2508:	e16e      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>

	case TC0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TC0);
    250a:	f04f 0002 	mov.w	r0, #2
    250e:	f241 63c1 	movw	r3, #5825	; 0x16c1
    2512:	f2c0 0300 	movt	r3, #0
    2516:	4798      	blx	r3
		break;
    2518:	e166      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>

	case TC1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TC1);
    251a:	f04f 0003 	mov.w	r0, #3
    251e:	f241 62c1 	movw	r2, #5825	; 0x16c1
    2522:	f2c0 0200 	movt	r2, #0
    2526:	4790      	blx	r2
		break;
    2528:	e15e      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>

	case TWIM0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM0);
    252a:	f04f 0004 	mov.w	r0, #4
    252e:	f241 62c1 	movw	r2, #5825	; 0x16c1
    2532:	f2c0 0200 	movt	r2, #0
    2536:	4790      	blx	r2
		break;
    2538:	e156      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>

	case TWIS0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIS0);
    253a:	f04f 0005 	mov.w	r0, #5
    253e:	f241 62c1 	movw	r2, #5825	; 0x16c1
    2542:	f2c0 0200 	movt	r2, #0
    2546:	4790      	blx	r2
		break;
    2548:	e14e      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>

	case TWIM1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM1);
    254a:	f04f 0006 	mov.w	r0, #6
    254e:	f241 61c1 	movw	r1, #5825	; 0x16c1
    2552:	f2c0 0100 	movt	r1, #0
    2556:	4788      	blx	r1
		break;
    2558:	e146      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>

	case TWIS1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIS1);
    255a:	f04f 0007 	mov.w	r0, #7
    255e:	f241 63c1 	movw	r3, #5825	; 0x16c1
    2562:	f2c0 0300 	movt	r3, #0
    2566:	4798      	blx	r3
		break;
    2568:	e13e      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>

	case USART0_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART0);
    256a:	f04f 0008 	mov.w	r0, #8
    256e:	f241 62c1 	movw	r2, #5825	; 0x16c1
    2572:	f2c0 0200 	movt	r2, #0
    2576:	4790      	blx	r2
		break;
    2578:	e136      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>

	case USART1_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART1);
    257a:	f04f 0009 	mov.w	r0, #9
    257e:	f241 62c1 	movw	r2, #5825	; 0x16c1
    2582:	f2c0 0200 	movt	r2, #0
    2586:	4790      	blx	r2
		break;
    2588:	e12e      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>

	case USART2_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART2);
    258a:	f04f 000a 	mov.w	r0, #10
    258e:	f241 62c1 	movw	r2, #5825	; 0x16c1
    2592:	f2c0 0200 	movt	r2, #0
    2596:	4790      	blx	r2
		break;
    2598:	e126      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>

	case USART3_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART3);
    259a:	f04f 000b 	mov.w	r0, #11
    259e:	f241 61c1 	movw	r1, #5825	; 0x16c1
    25a2:	f2c0 0100 	movt	r1, #0
    25a6:	4788      	blx	r1
		break;
    25a8:	e11e      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>

	case ADCIFE_ADDR:
		sysclk_disable_pba_module(SYSCLK_ADCIFE);
    25aa:	f04f 000c 	mov.w	r0, #12
    25ae:	f241 63c1 	movw	r3, #5825	; 0x16c1
    25b2:	f2c0 0300 	movt	r3, #0
    25b6:	4798      	blx	r3
		break;
    25b8:	e116      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>

	case DACC_ADDR:
		sysclk_disable_pba_module(SYSCLK_DACC);
    25ba:	f04f 000d 	mov.w	r0, #13
    25be:	f241 62c1 	movw	r2, #5825	; 0x16c1
    25c2:	f2c0 0200 	movt	r2, #0
    25c6:	4790      	blx	r2
		break;
    25c8:	e10e      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>

	case ACIFC_ADDR:
		sysclk_disable_pba_module(SYSCLK_ACIFC);
    25ca:	f04f 000e 	mov.w	r0, #14
    25ce:	f241 61c1 	movw	r1, #5825	; 0x16c1
    25d2:	f2c0 0100 	movt	r1, #0
    25d6:	4788      	blx	r1
		break;
    25d8:	e106      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>

	case GLOC_ADDR:
		sysclk_disable_pba_module(SYSCLK_GLOC);
    25da:	f04f 000f 	mov.w	r0, #15
    25de:	f241 61c1 	movw	r1, #5825	; 0x16c1
    25e2:	f2c0 0100 	movt	r1, #0
    25e6:	4788      	blx	r1
		break;
    25e8:	e0fe      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>

	case ABDACB_ADDR:
		sysclk_disable_pba_module(SYSCLK_ABDACB);
    25ea:	f04f 0010 	mov.w	r0, #16
    25ee:	f241 63c1 	movw	r3, #5825	; 0x16c1
    25f2:	f2c0 0300 	movt	r3, #0
    25f6:	4798      	blx	r3
		break;
    25f8:	e0f6      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>

	case TRNG_ADDR:
		sysclk_disable_pba_module(SYSCLK_TRNG);
    25fa:	f04f 0011 	mov.w	r0, #17
    25fe:	f241 63c1 	movw	r3, #5825	; 0x16c1
    2602:	f2c0 0300 	movt	r3, #0
    2606:	4798      	blx	r3
		break;
    2608:	e0ee      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>

	case PARC_ADDR:
		sysclk_disable_pba_module(SYSCLK_PARC);
    260a:	f04f 0012 	mov.w	r0, #18
    260e:	f241 62c1 	movw	r2, #5825	; 0x16c1
    2612:	f2c0 0200 	movt	r2, #0
    2616:	4790      	blx	r2
		break;
    2618:	e0e6      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>

	case CATB_ADDR:
		sysclk_disable_pba_module(SYSCLK_CATB);
    261a:	f04f 0013 	mov.w	r0, #19
    261e:	f241 61c1 	movw	r1, #5825	; 0x16c1
    2622:	f2c0 0100 	movt	r1, #0
    2626:	4788      	blx	r1
		break;
    2628:	e0de      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>

	case TWIM2_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM2);
    262a:	f04f 0015 	mov.w	r0, #21
    262e:	f241 61c1 	movw	r1, #5825	; 0x16c1
    2632:	f2c0 0100 	movt	r1, #0
    2636:	4788      	blx	r1
		break;
    2638:	e0d6      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>

	case TWIM3_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM3);
    263a:	f04f 0016 	mov.w	r0, #22
    263e:	f241 61c1 	movw	r1, #5825	; 0x16c1
    2642:	f2c0 0100 	movt	r1, #0
    2646:	4788      	blx	r1
		break;
    2648:	e0ce      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>

	case LCDCA_ADDR:
		sysclk_disable_pba_module(SYSCLK_LCDCA);
    264a:	f04f 0017 	mov.w	r0, #23
    264e:	f241 62c1 	movw	r2, #5825	; 0x16c1
    2652:	f2c0 0200 	movt	r2, #0
    2656:	4790      	blx	r2
		break;
    2658:	e0c6      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>

	case HFLASHC_ADDR:
		sysclk_disable_pbb_module(SYSCLK_HFLASHC_REGS);
    265a:	f04f 0000 	mov.w	r0, #0
    265e:	f241 7381 	movw	r3, #6017	; 0x1781
    2662:	f2c0 0300 	movt	r3, #0
    2666:	4798      	blx	r3
		break;
    2668:	e0be      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>
    266a:	f04f 0001 	mov.w	r0, #1
    266e:	f04f 0102 	mov.w	r1, #2
    2672:	f241 52f5 	movw	r2, #5621	; 0x15f5
    2676:	f2c0 0200 	movt	r2, #0
    267a:	4790      	blx	r2

	case HCACHE_ADDR:
		sysclk_disable_hsb_module(SYSCLK_HRAMC1_DATA);
		sysclk_disable_pbb_module(SYSCLK_HRAMC1_REGS);
    267c:	f04f 0001 	mov.w	r0, #1
    2680:	f241 7181 	movw	r1, #6017	; 0x1781
    2684:	f2c0 0100 	movt	r1, #0
    2688:	4788      	blx	r1
		break;
    268a:	e0ad      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>

	case HMATRIX_ADDR:
		sysclk_disable_pbb_module(SYSCLK_HMATRIX);
    268c:	f04f 0002 	mov.w	r0, #2
    2690:	f241 7181 	movw	r1, #6017	; 0x1781
    2694:	f2c0 0100 	movt	r1, #0
    2698:	4788      	blx	r1
		break;
    269a:	e0a5      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>
    269c:	f04f 0001 	mov.w	r0, #1
    26a0:	f04f 0100 	mov.w	r1, #0
    26a4:	f241 53f5 	movw	r3, #5621	; 0x15f5
    26a8:	f2c0 0300 	movt	r3, #0
    26ac:	4798      	blx	r3

	case PDCA_ADDR:
		sysclk_disable_hsb_module(SYSCLK_PDCA_HSB);
		sysclk_disable_pbb_module(SYSCLK_PDCA_PB);
    26ae:	f04f 0003 	mov.w	r0, #3
    26b2:	f241 7181 	movw	r1, #6017	; 0x1781
    26b6:	f2c0 0100 	movt	r1, #0
    26ba:	4788      	blx	r1
		break;
    26bc:	e094      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>
    26be:	f04f 0001 	mov.w	r0, #1
    26c2:	f04f 0104 	mov.w	r1, #4
    26c6:	f241 53f5 	movw	r3, #5621	; 0x15f5
    26ca:	f2c0 0300 	movt	r3, #0
    26ce:	4798      	blx	r3

	case CRCCU_ADDR:
		sysclk_disable_hsb_module(SYSCLK_CRCCU_DATA);
		sysclk_disable_pbb_module(SYSCLK_CRCCU_REGS);
    26d0:	f04f 0004 	mov.w	r0, #4
    26d4:	f241 7281 	movw	r2, #6017	; 0x1781
    26d8:	f2c0 0200 	movt	r2, #0
    26dc:	4790      	blx	r2
		break;
    26de:	e083      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>
    26e0:	f04f 0001 	mov.w	r0, #1
    26e4:	f04f 0103 	mov.w	r1, #3
    26e8:	f241 53f5 	movw	r3, #5621	; 0x15f5
    26ec:	f2c0 0300 	movt	r3, #0
    26f0:	4798      	blx	r3

	case USBC_ADDR:
		sysclk_disable_hsb_module(SYSCLK_USBC_DATA);
		sysclk_disable_pbb_module(SYSCLK_USBC_REGS);
    26f2:	f04f 0005 	mov.w	r0, #5
    26f6:	f241 7281 	movw	r2, #6017	; 0x1781
    26fa:	f2c0 0200 	movt	r2, #0
    26fe:	4790      	blx	r2
		break;
    2700:	e072      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>

	case PEVC_ADDR:
		sysclk_disable_pbb_module(SYSCLK_PEVC);
    2702:	f04f 0006 	mov.w	r0, #6
    2706:	f241 7181 	movw	r1, #6017	; 0x1781
    270a:	f2c0 0100 	movt	r1, #0
    270e:	4788      	blx	r1
		break;
    2710:	e06a      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>
 * \brief Disable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_disable_pbc_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_PBC, module_index);
    2712:	f04f 0004 	mov.w	r0, #4
    2716:	f04f 0100 	mov.w	r1, #0
    271a:	f241 53f5 	movw	r3, #5621	; 0x15f5
    271e:	f2c0 0300 	movt	r3, #0
    2722:	4798      	blx	r3
    2724:	e060      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>
    2726:	f04f 0004 	mov.w	r0, #4
    272a:	f04f 0101 	mov.w	r1, #1
    272e:	f241 53f5 	movw	r3, #5621	; 0x15f5
    2732:	f2c0 0300 	movt	r3, #0
    2736:	4798      	blx	r3
    2738:	e056      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>
    273a:	f04f 0004 	mov.w	r0, #4
    273e:	f04f 0102 	mov.w	r1, #2
    2742:	f241 53f5 	movw	r3, #5621	; 0x15f5
    2746:	f2c0 0300 	movt	r3, #0
    274a:	4798      	blx	r3
    274c:	e04c      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>
    274e:	f04f 0004 	mov.w	r0, #4
    2752:	f04f 0103 	mov.w	r1, #3
    2756:	f241 52f5 	movw	r2, #5621	; 0x15f5
    275a:	f2c0 0200 	movt	r2, #0
    275e:	4790      	blx	r2
    2760:	e042      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>
    2762:	f04f 0004 	mov.w	r0, #4
    2766:	4601      	mov	r1, r0
    2768:	f241 53f5 	movw	r3, #5621	; 0x15f5
    276c:	f2c0 0300 	movt	r3, #0
    2770:	4798      	blx	r3
    2772:	e039      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>
 * \brief Disable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_disable_pbd_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_PBD, module_index);
    2774:	f04f 0005 	mov.w	r0, #5
    2778:	f04f 0100 	mov.w	r1, #0
    277c:	f241 52f5 	movw	r2, #5621	; 0x15f5
    2780:	f2c0 0200 	movt	r2, #0
    2784:	4790      	blx	r2
    2786:	e02f      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>
    2788:	f04f 0005 	mov.w	r0, #5
    278c:	f04f 0101 	mov.w	r1, #1
    2790:	f241 53f5 	movw	r3, #5621	; 0x15f5
    2794:	f2c0 0300 	movt	r3, #0
    2798:	4798      	blx	r3
    279a:	e025      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>
    279c:	f04f 0005 	mov.w	r0, #5
    27a0:	f04f 0102 	mov.w	r1, #2
    27a4:	f241 52f5 	movw	r2, #5621	; 0x15f5
    27a8:	f2c0 0200 	movt	r2, #0
    27ac:	4790      	blx	r2
    27ae:	e01b      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>
    27b0:	f04f 0005 	mov.w	r0, #5
    27b4:	f04f 0103 	mov.w	r1, #3
    27b8:	f241 53f5 	movw	r3, #5621	; 0x15f5
    27bc:	f2c0 0300 	movt	r3, #0
    27c0:	4798      	blx	r3
    27c2:	e011      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>
    27c4:	f04f 0005 	mov.w	r0, #5
    27c8:	f04f 0104 	mov.w	r1, #4
    27cc:	f241 52f5 	movw	r2, #5621	; 0x15f5
    27d0:	f2c0 0200 	movt	r2, #0
    27d4:	4790      	blx	r2
    27d6:	e007      	b.n	27e8 <sysclk_disable_peripheral_clock+0x630>
    27d8:	f04f 0005 	mov.w	r0, #5
    27dc:	4601      	mov	r1, r0
    27de:	f241 53f5 	movw	r3, #5621	; 0x15f5
    27e2:	f2c0 0300 	movt	r3, #0
    27e6:	4798      	blx	r3
	}

	// Disable PBA divided clock if possible.
#define PBADIV_CLKSRC_MASK (SYSCLK_TC0 | SYSCLK_TC1 \
		| SYSCLK_USART0 | SYSCLK_USART1 | SYSCLK_USART2 | SYSCLK_USART3)
	if ((PM->PM_PBAMASK & PBADIV_CLKSRC_MASK) == 0) {
    27e8:	f04f 0000 	mov.w	r0, #0
    27ec:	f2c4 000e 	movt	r0, #16398	; 0x400e
    27f0:	6a82      	ldr	r2, [r0, #40]	; 0x28
    27f2:	f012 0f0b 	tst.w	r2, #11
    27f6:	d10c      	bne.n	2812 <sysclk_disable_peripheral_clock+0x65a>
 */
static inline void sysclk_disable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    27f8:	f04f 0300 	mov.w	r3, #0
    27fc:	f2c4 030e 	movt	r3, #16398	; 0x400e
    2800:	6c19      	ldr	r1, [r3, #64]	; 0x40
	temp_mask &= ~mask;
    2802:	f021 007f 	bic.w	r0, r1, #127	; 0x7f
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    2806:	f04f 0240 	mov.w	r2, #64	; 0x40
    280a:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    280e:	659a      	str	r2, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    2810:	6418      	str	r0, [r3, #64]	; 0x40
    2812:	bd08      	pop	{r3, pc}

00002814 <sysclk_set_source>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2814:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2818:	b672      	cpsid	i
    281a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    281e:	f240 0344 	movw	r3, #68	; 0x44
    2822:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2826:	f04f 0100 	mov.w	r1, #0
    282a:	7019      	strb	r1, [r3, #0]
{
	irqflags_t flags;
	Assert(src <= SYSCLK_SRC_RC1M);

	flags = cpu_irq_save();
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    282c:	460b      	mov	r3, r1
    282e:	f2c4 030e 	movt	r3, #16398	; 0x400e
    2832:	f04f 412a 	mov.w	r1, #2852126720	; 0xaa000000
    2836:	6599      	str	r1, [r3, #88]	; 0x58
		| PM_UNLOCK_ADDR((uint32_t)&PM->PM_MCCTRL - (uint32_t)PM);
	PM->PM_MCCTRL = src;
    2838:	6018      	str	r0, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    283a:	b94a      	cbnz	r2, 2850 <sysclk_set_source+0x3c>
		cpu_irq_enable();
    283c:	f240 0044 	movw	r0, #68	; 0x44
    2840:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2844:	f04f 0201 	mov.w	r2, #1
    2848:	7002      	strb	r2, [r0, #0]
    284a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    284e:	b662      	cpsie	i
    2850:	4770      	bx	lr
    2852:	bf00      	nop

00002854 <sysclk_init>:
   genclk_disable(7);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
    2854:	b538      	push	{r3, r4, r5, lr}
	uint32_t ps_value = 0;
	bool is_fwu_enabled = false;

#if CONFIG_HCACHE_ENABLE == 1
	/* Enable HCACHE */
	sysclk_enable_peripheral_clock(HCACHE);
    2856:	f44f 6480 	mov.w	r4, #1024	; 0x400
    285a:	f2c4 040a 	movt	r4, #16394	; 0x400a
    285e:	4620      	mov	r0, r4
    2860:	f641 23d9 	movw	r3, #6873	; 0x1ad9
    2864:	f2c0 0300 	movt	r3, #0
    2868:	4798      	blx	r3
	HCACHE->HCACHE_CTRL = HCACHE_CTRL_CEN_YES;
    286a:	f04f 0001 	mov.w	r0, #1
    286e:	60a0      	str	r0, [r4, #8]
	while (!(HCACHE->HCACHE_SR & HCACHE_SR_CSTS_EN));
    2870:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2874:	f2c4 020a 	movt	r2, #16394	; 0x400a
    2878:	68d1      	ldr	r1, [r2, #12]
    287a:	f011 0f01 	tst.w	r1, #1
    287e:	d0fb      	beq.n	2878 <sysclk_init+0x24>
		sysclk_set_source(SYSCLK_SRC_OSC0);
	}
#endif
#ifdef CONFIG_DFLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_DFLL) {
		dfll_enable_config_defaults(0);
    2880:	f04f 0000 	mov.w	r0, #0
    2884:	f241 4579 	movw	r5, #5241	; 0x1479
    2888:	f2c0 0500 	movt	r5, #0
    288c:	47a8      	blx	r5
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz(), ps_value, is_fwu_enabled);
    288e:	f04f 7037 	mov.w	r0, #47972352	; 0x2dc0000
    2892:	f04f 0100 	mov.w	r1, #0
    2896:	460a      	mov	r2, r1
    2898:	f642 4425 	movw	r4, #11301	; 0x2c25
    289c:	f2c0 0400 	movt	r4, #0
    28a0:	47a0      	blx	r4
		sysclk_set_source(SYSCLK_SRC_DFLL);
    28a2:	f04f 0003 	mov.w	r0, #3
    28a6:	f642 0315 	movw	r3, #10261	; 0x2815
    28aa:	f2c0 0300 	movt	r3, #0
    28ae:	4798      	blx	r3
	if (!no_halt) {
		bpm_power_scaling_cpu(bpm, ps_value);
		return true;
	}

	return bpm_power_scaling_cpu_failsafe(bpm, ps_value, 240000);
    28b0:	f04f 0000 	mov.w	r0, #0
    28b4:	f2c4 000f 	movt	r0, #16399	; 0x400f
    28b8:	f04f 0100 	mov.w	r1, #0
    28bc:	f64a 1280 	movw	r2, #43392	; 0xa980
    28c0:	f2c0 0203 	movt	r2, #3
    28c4:	f642 15fd 	movw	r5, #10749	; 0x29fd
    28c8:	f2c0 0500 	movt	r5, #0
    28cc:	47a8      	blx	r5
		Assert(false);
	}

	/* Automatically switch to low power mode */
	bpm_configure_power_scaling(BPM, ps_value, BPM_PSCM_CPU_NOT_HALT);
	while ((bpm_get_status(BPM) & BPM_SR_PSOK) == 0);
    28ce:	f04f 0400 	mov.w	r4, #0
    28d2:	f2c4 040f 	movt	r4, #16399	; 0x400f
    28d6:	f642 2575 	movw	r5, #10869	; 0x2a75
    28da:	f2c0 0500 	movt	r5, #0
    28de:	4620      	mov	r0, r4
    28e0:	47a8      	blx	r5
    28e2:	f010 0f01 	tst.w	r0, #1
    28e6:	d0fa      	beq.n	28de <sysclk_init+0x8a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    28e8:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    28ec:	b672      	cpsid	i
    28ee:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    28f2:	f240 0244 	movw	r2, #68	; 0x44
    28f6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28fa:	f04f 0100 	mov.w	r1, #0
    28fe:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2900:	b928      	cbnz	r0, 290e <sysclk_init+0xba>
		cpu_irq_enable();
    2902:	f04f 0001 	mov.w	r0, #1
    2906:	7010      	strb	r0, [r2, #0]
    2908:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    290c:	b662      	cpsie	i
    290e:	bd38      	pop	{r3, r4, r5, pc}

00002910 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_disable_pin(pin);\
	} while (0)

void board_init(void)
{
    2910:	b500      	push	{lr}
    2912:	b087      	sub	sp, #28
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	struct wdt_dev_inst wdt_inst;
	struct wdt_config   wdt_cfg;

	wdt_get_config_defaults(&wdt_cfg);
    2914:	4668      	mov	r0, sp
    2916:	f642 5351 	movw	r3, #11601	; 0x2d51
    291a:	f2c0 0300 	movt	r3, #0
    291e:	4798      	blx	r3
	wdt_init(&wdt_inst, WDT, &wdt_cfg);
    2920:	a804      	add	r0, sp, #16
    2922:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    2926:	f2c4 010f 	movt	r1, #16399	; 0x400f
    292a:	466a      	mov	r2, sp
    292c:	f642 536d 	movw	r3, #11629	; 0x2d6d
    2930:	f2c0 0300 	movt	r3, #0
    2934:	4798      	blx	r3
	wdt_disable(&wdt_inst);
    2936:	a804      	add	r0, sp, #16
    2938:	f642 6139 	movw	r1, #11833	; 0x2e39
    293c:	f2c0 0100 	movt	r1, #0
    2940:	4788      	blx	r1
	return 1U << (pin & 0x1F);
}

__always_inline static void arch_ioport_init(void)
{
	sysclk_enable_peripheral_clock(GPIO);
    2942:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    2946:	f2c4 000e 	movt	r0, #16398	; 0x400e
    294a:	f641 22d9 	movw	r2, #6873	; 0x1ad9
    294e:	f2c0 0200 	movt	r2, #0
    2952:	4790      	blx	r2

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    2954:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
    2958:	f2c4 000e 	movt	r0, #16398	; 0x400e
    295c:	f04f 0380 	mov.w	r3, #128	; 0x80
    2960:	6443      	str	r3, [r0, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    2962:	f8c0 3168 	str.w	r3, [r0, #360]	; 0x168

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    2966:	6543      	str	r3, [r0, #84]	; 0x54
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    2968:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    296c:	6481      	str	r1, [r0, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    296e:	f8c0 1164 	str.w	r1, [r0, #356]	; 0x164
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
    2972:	6741      	str	r1, [r0, #116]	; 0x74

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    2974:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    2978:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    297c:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    2980:	6181      	str	r1, [r0, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    2982:	6281      	str	r1, [r0, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    2984:	6381      	str	r1, [r0, #56]	; 0x38
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    2986:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    298a:	6782      	str	r2, [r0, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    298c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    2990:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    2994:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    2998:	6182      	str	r2, [r0, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    299a:	6282      	str	r2, [r0, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    299c:	6382      	str	r2, [r0, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    299e:	6082      	str	r2, [r0, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    29a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    29a4:	6783      	str	r3, [r0, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    29a6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    29aa:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    29ae:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    29b2:	6183      	str	r3, [r0, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    29b4:	6283      	str	r3, [r0, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    29b6:	6383      	str	r3, [r0, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    29b8:	6083      	str	r3, [r0, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    29ba:	f44f 5090 	mov.w	r0, #4608	; 0x1200
    29be:	f2c4 000e 	movt	r0, #16398	; 0x400e
    29c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    29c6:	6781      	str	r1, [r0, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    29c8:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    29cc:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    29d0:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    29d4:	6181      	str	r1, [r0, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
    29d6:	6241      	str	r1, [r0, #36]	; 0x24

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    29d8:	6381      	str	r1, [r0, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    29da:	6081      	str	r1, [r0, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    29dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    29e0:	6782      	str	r2, [r0, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    29e2:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    29e6:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    29ea:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    29ee:	6182      	str	r2, [r0, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
    29f0:	6242      	str	r2, [r0, #36]	; 0x24

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    29f2:	6382      	str	r2, [r0, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    29f4:	6082      	str	r2, [r0, #8]
	ioport_set_pin_peripheral_mode(PIN_PA15D_PARC_PCDATA6, MUX_PA15D_PARC_PCDATA6);
	ioport_set_pin_peripheral_mode(PIN_PA16D_PARC_PCDATA7, MUX_PA16D_PARC_PCDATA7);
	ioport_set_pin_peripheral_mode(PIN_PA18D_PARC_PCEN1, MUX_PA18D_PARC_PCEN1);
	ioport_set_pin_peripheral_mode(PIN_PA19D_PARC_PCEN2, MUX_PA19D_PARC_PCEN2);
#endif
}
    29f6:	b007      	add	sp, #28
    29f8:	bd00      	pop	{pc}
    29fa:	bf00      	nop

000029fc <bpm_power_scaling_cpu_failsafe>:
}


bool bpm_power_scaling_cpu_failsafe(Bpm *bpm, uint32_t ps_value,
	uint32_t timeout)
{
    29fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t pmcon = 0;

	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;
    2a00:	69c4      	ldr	r4, [r0, #28]

	/* Clear last PS Value & Write new one */
	pmcon &= ~BPM_PMCON_PS_Msk;
    2a02:	f024 0503 	bic.w	r5, r4, #3
	pmcon |= BPM_PMCON_PS(ps_value);
    2a06:	f045 030c 	orr.w	r3, r5, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2a0a:	f3ef 8610 	mrs	r6, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2a0e:	b672      	cpsid	i
    2a10:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    2a14:	f04f 0500 	mov.w	r5, #0
    2a18:	f240 0744 	movw	r7, #68	; 0x44
    2a1c:	f2c2 0700 	movt	r7, #8192	; 0x2000
    2a20:	703d      	strb	r5, [r7, #0]
	uint32_t ctrl, load, val;
	/* Avoid interrupt while flash halt */
	flags = cpu_irq_save();

	/* Save SysTick */
	val = SysTick->VAL;
    2a22:	f24e 0410 	movw	r4, #57360	; 0xe010
    2a26:	f2ce 0400 	movt	r4, #57344	; 0xe000
    2a2a:	f8d4 8008 	ldr.w	r8, [r4, #8]
	ctrl = SysTick->CTRL;
    2a2e:	6827      	ldr	r7, [r4, #0]
	load = SysTick->LOAD;
    2a30:	f8d4 9004 	ldr.w	r9, [r4, #4]
	/* Setup SysTick & start counting */
	SysTick->LOAD = timeout;
    2a34:	6062      	str	r2, [r4, #4]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    2a36:	f04f 0205 	mov.w	r2, #5
    2a3a:	6022      	str	r2, [r4, #0]
	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;

	/* Clear last PS Value & Write new one */
	pmcon &= ~BPM_PMCON_PS_Msk;
	pmcon |= BPM_PMCON_PS(ps_value);
    2a3c:	f001 0103 	and.w	r1, r1, #3
	load = SysTick->LOAD;
	/* Setup SysTick & start counting */
	SysTick->LOAD = timeout;
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;

	b_psok = bpm_ps_no_halt_exec(bpm, pmcon);
    2a40:	4319      	orrs	r1, r3
    2a42:	f240 030d 	movw	r3, #13
    2a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a4a:	4798      	blx	r3

	/* Restore SysTick */
	SysTick->CTRL = 0;
    2a4c:	6025      	str	r5, [r4, #0]
	SysTick->LOAD = load;
    2a4e:	f8c4 9004 	str.w	r9, [r4, #4]
	SysTick->VAL = val;
    2a52:	f8c4 8008 	str.w	r8, [r4, #8]
	SysTick->CTRL = ctrl;
    2a56:	6027      	str	r7, [r4, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2a58:	b94e      	cbnz	r6, 2a6e <bpm_power_scaling_cpu_failsafe+0x72>
		cpu_irq_enable();
    2a5a:	f240 0144 	movw	r1, #68	; 0x44
    2a5e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2a62:	f04f 0201 	mov.w	r2, #1
    2a66:	700a      	strb	r2, [r1, #0]
    2a68:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    2a6c:	b662      	cpsie	i

	cpu_irq_restore(flags);
	return b_psok;
}
    2a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2a72:	bf00      	nop

00002a74 <bpm_get_status>:
	bpm->BPM_ICR = sources;
}

uint32_t bpm_get_status(Bpm *bpm)
{
	return bpm->BPM_SR;
    2a74:	6940      	ldr	r0, [r0, #20]
}
    2a76:	4770      	bx	lr

00002a78 <bpm_sleep>:
{
	return bpm->BPM_VERSION;
}

void bpm_sleep(Bpm *bpm, uint32_t sleep_mode)
{
    2a78:	b410      	push	{r4}
	uint32_t pmcon;

	/* Read PMCON register */
	pmcon = bpm->BPM_PMCON;
    2a7a:	69c3      	ldr	r3, [r0, #28]
	pmcon &= ~BPM_PMCON_BKUP;
	pmcon &= ~BPM_PMCON_RET;
	pmcon &= ~BPM_PMCON_SLEEP_Msk;
    2a7c:	f423 544c 	bic.w	r4, r3, #13056	; 0x3300

	/* Unlock PMCON register */
	BPM_UNLOCK(PMCON);
    2a80:	f04f 0300 	mov.w	r3, #0
    2a84:	f2c4 030f 	movt	r3, #16399	; 0x400f
    2a88:	f04f 021c 	mov.w	r2, #28
    2a8c:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    2a90:	619a      	str	r2, [r3, #24]

	if (sleep_mode == BPM_SM_SLEEP_0) {
    2a92:	2901      	cmp	r1, #1
    2a94:	d109      	bne.n	2aaa <bpm_sleep+0x32>
		pmcon |= BPM_PMCON_SLEEP(0);
		bpm->BPM_PMCON = pmcon;
    2a96:	61c4      	str	r4, [r0, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    2a98:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2a9c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2aa0:	6918      	ldr	r0, [r3, #16]
    2aa2:	f020 0104 	bic.w	r1, r0, #4
    2aa6:	6119      	str	r1, [r3, #16]
    2aa8:	e050      	b.n	2b4c <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_SLEEP_1) {
    2aaa:	2902      	cmp	r1, #2
    2aac:	d10b      	bne.n	2ac6 <bpm_sleep+0x4e>
		pmcon |= BPM_PMCON_SLEEP(1);
    2aae:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
		bpm->BPM_PMCON = pmcon;
    2ab2:	61c4      	str	r4, [r0, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    2ab4:	f44f 406d 	mov.w	r0, #60672	; 0xed00
    2ab8:	f2ce 0000 	movt	r0, #57344	; 0xe000
    2abc:	6901      	ldr	r1, [r0, #16]
    2abe:	f021 0204 	bic.w	r2, r1, #4
    2ac2:	6102      	str	r2, [r0, #16]
    2ac4:	e042      	b.n	2b4c <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_SLEEP_2) {
    2ac6:	2903      	cmp	r1, #3
    2ac8:	d10b      	bne.n	2ae2 <bpm_sleep+0x6a>
		pmcon |= BPM_PMCON_SLEEP(2);
    2aca:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
		bpm->BPM_PMCON = pmcon;
    2ace:	61c4      	str	r4, [r0, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    2ad0:	f44f 416d 	mov.w	r1, #60672	; 0xed00
    2ad4:	f2ce 0100 	movt	r1, #57344	; 0xe000
    2ad8:	690a      	ldr	r2, [r1, #16]
    2ada:	f022 0304 	bic.w	r3, r2, #4
    2ade:	610b      	str	r3, [r1, #16]
    2ae0:	e034      	b.n	2b4c <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_SLEEP_3) {
    2ae2:	2904      	cmp	r1, #4
    2ae4:	d10b      	bne.n	2afe <bpm_sleep+0x86>
		pmcon |= BPM_PMCON_SLEEP(3);
    2ae6:	f444 5440 	orr.w	r4, r4, #12288	; 0x3000
		bpm->BPM_PMCON = pmcon;
    2aea:	61c4      	str	r4, [r0, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    2aec:	f44f 416d 	mov.w	r1, #60672	; 0xed00
    2af0:	f2ce 0100 	movt	r1, #57344	; 0xe000
    2af4:	690b      	ldr	r3, [r1, #16]
    2af6:	f023 0004 	bic.w	r0, r3, #4
    2afa:	6108      	str	r0, [r1, #16]
    2afc:	e026      	b.n	2b4c <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_WAIT) {
    2afe:	2905      	cmp	r1, #5
    2b00:	d109      	bne.n	2b16 <bpm_sleep+0x9e>
		bpm->BPM_PMCON = pmcon;
    2b02:	61c4      	str	r4, [r0, #28]
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    2b04:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2b08:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2b0c:	6918      	ldr	r0, [r3, #16]
    2b0e:	f040 0204 	orr.w	r2, r0, #4
    2b12:	611a      	str	r2, [r3, #16]
    2b14:	e01a      	b.n	2b4c <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_RET) {
    2b16:	2906      	cmp	r1, #6
    2b18:	d10b      	bne.n	2b32 <bpm_sleep+0xba>
		pmcon |= BPM_PMCON_RET;
    2b1a:	f444 7400 	orr.w	r4, r4, #512	; 0x200
		bpm->BPM_PMCON = pmcon;
    2b1e:	61c4      	str	r4, [r0, #28]
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    2b20:	f44f 406d 	mov.w	r0, #60672	; 0xed00
    2b24:	f2ce 0000 	movt	r0, #57344	; 0xe000
    2b28:	6902      	ldr	r2, [r0, #16]
    2b2a:	f042 0104 	orr.w	r1, r2, #4
    2b2e:	6101      	str	r1, [r0, #16]
    2b30:	e00c      	b.n	2b4c <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_BACKUP) { 
    2b32:	2907      	cmp	r1, #7
    2b34:	d11e      	bne.n	2b74 <bpm_sleep+0xfc>
		pmcon |= BPM_PMCON_BKUP;
    2b36:	f444 7480 	orr.w	r4, r4, #256	; 0x100
		bpm->BPM_PMCON = pmcon;
    2b3a:	61c4      	str	r4, [r0, #28]
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    2b3c:	f44f 406d 	mov.w	r0, #60672	; 0xed00
    2b40:	f2ce 0000 	movt	r0, #57344	; 0xe000
    2b44:	6901      	ldr	r1, [r0, #16]
    2b46:	f041 0304 	orr.w	r3, r1, #4
    2b4a:	6103      	str	r3, [r0, #16]
	} else {
		return;
	}

	/* Wait until vreg is ok. */
	while(!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_VREGOK));
    2b4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2b50:	f2c4 020f 	movt	r2, #16399	; 0x400f
    2b54:	6953      	ldr	r3, [r2, #20]
    2b56:	f413 6f80 	tst.w	r3, #1024	; 0x400
    2b5a:	d0fb      	beq.n	2b54 <bpm_sleep+0xdc>
	asm volatile ("wfi");
    2b5c:	bf30      	wfi
	/* ensure sleep request propagation to flash. */
	asm volatile ("nop");
    2b5e:	bf00      	nop
	 * masked since we are in the critical section thanks to the previous
	 * set_pri_mask(1). Thus, we need to leave the critical section.
	 * Please note that we should probably use something like
	 * cpu_leave_critical(), using set_pri_mask(0)
	 */
	cpu_irq_enable();
    2b60:	f240 0044 	movw	r0, #68	; 0x44
    2b64:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2b68:	f04f 0101 	mov.w	r1, #1
    2b6c:	7001      	strb	r1, [r0, #0]
    2b6e:	f3bf 8f5f 	dmb	sy
    2b72:	b662      	cpsie	i
}
    2b74:	bc10      	pop	{r4}
    2b76:	4770      	bx	lr

00002b78 <flashcalw_set_wait_state>:
 * \param wait_state The number of wait states of flash read accesses: \c 0 to
 *                   \c 1.
 */
void flashcalw_set_wait_state(uint32_t wait_state)
{
	HFLASHC->FLASHCALW_FCR = (HFLASHC->FLASHCALW_FCR & ~FLASHCALW_FCR_FWS)
    2b78:	f04f 0300 	mov.w	r3, #0
    2b7c:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2b80:	6819      	ldr	r1, [r3, #0]
    2b82:	f021 0240 	bic.w	r2, r1, #64	; 0x40
			| (wait_state ? FLASHCALW_FCR_FWS_1 :
    2b86:	2800      	cmp	r0, #0
    2b88:	bf14      	ite	ne
    2b8a:	2040      	movne	r0, #64	; 0x40
    2b8c:	2000      	moveq	r0, #0
    2b8e:	4310      	orrs	r0, r2
 * \param wait_state The number of wait states of flash read accesses: \c 0 to
 *                   \c 1.
 */
void flashcalw_set_wait_state(uint32_t wait_state)
{
	HFLASHC->FLASHCALW_FCR = (HFLASHC->FLASHCALW_FCR & ~FLASHCALW_FCR_FWS)
    2b90:	f04f 0300 	mov.w	r3, #0
    2b94:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2b98:	6018      	str	r0, [r3, #0]
    2b9a:	4770      	bx	lr

00002b9c <flashcalw_is_ready>:
 *
 * \return Whether the FLASHCALW is ready to run a new command.
 */
bool flashcalw_is_ready(void)
{
	return ((HFLASHC->FLASHCALW_FSR & FLASHCALW_FSR_FRDY) != 0);
    2b9c:	f04f 0300 	mov.w	r3, #0
    2ba0:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2ba4:	6898      	ldr	r0, [r3, #8]
}
    2ba6:	f000 0001 	and.w	r0, r0, #1
    2baa:	4770      	bx	lr

00002bac <flashcalw_default_wait_until_ready>:
/*! \brief Waits actively until the FLASHCALW is ready to run a new command.
 *
 * This is the default function assigned to \ref flashcalw_wait_until_ready.
 */
void flashcalw_default_wait_until_ready(void)
{
    2bac:	b510      	push	{r4, lr}
	while (!flashcalw_is_ready()) {
    2bae:	f642 349d 	movw	r4, #11165	; 0x2b9d
    2bb2:	f2c0 0400 	movt	r4, #0
    2bb6:	47a0      	blx	r4
    2bb8:	2800      	cmp	r0, #0
    2bba:	d0fc      	beq.n	2bb6 <flashcalw_default_wait_until_ready+0xa>
	}
}
    2bbc:	bd10      	pop	{r4, pc}
    2bbe:	bf00      	nop

00002bc0 <flashcalw_issue_command>:
 *
 * \note The FLASHCALW error status returned by \ref flashcalw_is_lock_error and
 *       \ref flashcalw_is_programming_error is updated.
 */
void flashcalw_issue_command(uint32_t command, int page_number)
{
    2bc0:	b538      	push	{r3, r4, r5, lr}
    2bc2:	4605      	mov	r5, r0
    2bc4:	460c      	mov	r4, r1
	uint32_t tempo;

	flashcalw_wait_until_ready();
    2bc6:	f240 0348 	movw	r3, #72	; 0x48
    2bca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bce:	6818      	ldr	r0, [r3, #0]
    2bd0:	4780      	blx	r0
	tempo = HFLASHC->FLASHCALW_FCMD;
    2bd2:	f04f 0100 	mov.w	r1, #0
    2bd6:	f2c4 010a 	movt	r1, #16394	; 0x400a
    2bda:	684a      	ldr	r2, [r1, #4]
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
	if (page_number >= 0) {
    2bdc:	2c00      	cmp	r4, #0
    2bde:	db07      	blt.n	2bf0 <flashcalw_issue_command+0x30>
		tempo = (FLASHCALW_FCMD_KEY_KEY
				| FLASHCALW_FCMD_PAGEN(page_number) | command);
    2be0:	f045 4525 	orr.w	r5, r5, #2768240640	; 0xa5000000
    2be4:	ea4f 2404 	mov.w	r4, r4, lsl #8
    2be8:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	flashcalw_wait_until_ready();
	tempo = HFLASHC->FLASHCALW_FCMD;
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
	if (page_number >= 0) {
		tempo = (FLASHCALW_FCMD_KEY_KEY
    2bec:	4325      	orrs	r5, r4
    2bee:	e004      	b.n	2bfa <flashcalw_issue_command+0x3a>
	uint32_t tempo;

	flashcalw_wait_until_ready();
	tempo = HFLASHC->FLASHCALW_FCMD;
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
    2bf0:	f022 033f 	bic.w	r3, r2, #63	; 0x3f
	if (page_number >= 0) {
		tempo = (FLASHCALW_FCMD_KEY_KEY
				| FLASHCALW_FCMD_PAGEN(page_number) | command);
	} else {
		tempo |= (FLASHCALW_FCMD_KEY_KEY | command);
    2bf4:	f043 4025 	orr.w	r0, r3, #2768240640	; 0xa5000000
    2bf8:	4305      	orrs	r5, r0
	}

	HFLASHC->FLASHCALW_FCMD = tempo;
    2bfa:	f04f 0100 	mov.w	r1, #0
    2bfe:	f2c4 010a 	movt	r1, #16394	; 0x400a
    2c02:	604d      	str	r5, [r1, #4]
 *          the driver's API which instead presents \ref flashcalw_is_lock_error
 *          and \ref flashcalw_is_programming_error.
 */
static uint32_t flashcalw_get_error_status(void)
{
	return HFLASHC->FLASHCALW_FSR &
    2c04:	688a      	ldr	r2, [r1, #8]
    2c06:	f002 000c 	and.w	r0, r2, #12
	} else {
		tempo |= (FLASHCALW_FCMD_KEY_KEY | command);
	}

	HFLASHC->FLASHCALW_FCMD = tempo;
	flashcalw_error_status = flashcalw_get_error_status();
    2c0a:	f640 13a0 	movw	r3, #2464	; 0x9a0
    2c0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c12:	6018      	str	r0, [r3, #0]
	flashcalw_wait_until_ready();
    2c14:	f240 0148 	movw	r1, #72	; 0x48
    2c18:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2c1c:	680a      	ldr	r2, [r1, #0]
    2c1e:	4790      	blx	r2
    2c20:	bd38      	pop	{r3, r4, r5, pc}
    2c22:	bf00      	nop

00002c24 <flashcalw_set_flash_waitstate_and_readmode>:
 * \param ps_value Power Scaling mode value (0, 1)
 * \param is_fwu_enabled (boolean), Is fast wakeup mode enabled or not
 */
void flashcalw_set_flash_waitstate_and_readmode(uint32_t cpu_f_hz,
		uint32_t ps_value, bool is_fwu_enabled)
{
    2c24:	b508      	push	{r3, lr}
	}

	/* Enable the high-speed read mode. */
	flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSEN, -1);
#else
	if (ps_value == 0) {
    2c26:	2900      	cmp	r1, #0
    2c28:	d156      	bne.n	2cd8 <flashcalw_set_flash_waitstate_and_readmode+0xb4>
		if (cpu_f_hz > FLASH_FREQ_PS0_FWS_0_MAX_FREQ) {
    2c2a:	f64a 0380 	movw	r3, #43136	; 0xa880
    2c2e:	f2c0 1312 	movt	r3, #274	; 0x112
    2c32:	4298      	cmp	r0, r3
    2c34:	d927      	bls.n	2c86 <flashcalw_set_flash_waitstate_and_readmode+0x62>
			// > 18MHz
			if (cpu_f_hz <= FLASH_FREQ_PS0_FWS_1_MAX_FREQ) {
    2c36:	f44f 43a2 	mov.w	r3, #20736	; 0x5100
    2c3a:	f2c0 2325 	movt	r3, #549	; 0x225
    2c3e:	4298      	cmp	r0, r3
    2c40:	d810      	bhi.n	2c64 <flashcalw_set_flash_waitstate_and_readmode+0x40>
				// <= 36MHz
				/* Set a wait-state, disable the high-speed read
				 * mode. */
				flashcalw_set_wait_state(1);
    2c42:	f04f 0001 	mov.w	r0, #1
    2c46:	f642 3379 	movw	r3, #11129	; 0x2b79
    2c4a:	f2c0 0300 	movt	r3, #0
    2c4e:	4798      	blx	r3
				flashcalw_issue_command(
    2c50:	f04f 0011 	mov.w	r0, #17
    2c54:	f04f 31ff 	mov.w	r1, #4294967295
    2c58:	f642 32c1 	movw	r2, #11201	; 0x2bc1
    2c5c:	f2c0 0200 	movt	r2, #0
    2c60:	4790      	blx	r2
    2c62:	bd08      	pop	{r3, pc}
						FLASHCALW_FCMD_CMD_HSDIS, -1);
			} else {
				// > 36 MHz
				/* Set a wait-state, enable the high-speed read
				mode. */
				flashcalw_set_wait_state(1);
    2c64:	f04f 0001 	mov.w	r0, #1
    2c68:	f642 3179 	movw	r1, #11129	; 0x2b79
    2c6c:	f2c0 0100 	movt	r1, #0
    2c70:	4788      	blx	r1
				flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSEN,
    2c72:	f04f 0010 	mov.w	r0, #16
    2c76:	f04f 31ff 	mov.w	r1, #4294967295
    2c7a:	f642 32c1 	movw	r2, #11201	; 0x2bc1
    2c7e:	f2c0 0200 	movt	r2, #0
    2c82:	4790      	blx	r2
    2c84:	bd08      	pop	{r3, pc}
						-1);
			}
		} else { // <= 18MHz
			if((is_fwu_enabled == true) &&
    2c86:	b1b2      	cbz	r2, 2cb6 <flashcalw_set_flash_waitstate_and_readmode+0x92>
    2c88:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
    2c8c:	f2c0 01b7 	movt	r1, #183	; 0xb7
    2c90:	4288      	cmp	r0, r1
    2c92:	d810      	bhi.n	2cb6 <flashcalw_set_flash_waitstate_and_readmode+0x92>
				(cpu_f_hz <= FLASH_FREQ_PS1_FWS_1_FWU_MAX_FREQ))
			{
				// <= 12MHz
				/* Set a wait-state, disable the high-speed read
				mode. */
				flashcalw_set_wait_state(1);
    2c94:	f04f 0001 	mov.w	r0, #1
    2c98:	f642 3179 	movw	r1, #11129	; 0x2b79
    2c9c:	f2c0 0100 	movt	r1, #0
    2ca0:	4788      	blx	r1
				flashcalw_issue_command(
    2ca2:	f04f 0011 	mov.w	r0, #17
    2ca6:	f04f 31ff 	mov.w	r1, #4294967295
    2caa:	f642 32c1 	movw	r2, #11201	; 0x2bc1
    2cae:	f2c0 0200 	movt	r2, #0
    2cb2:	4790      	blx	r2
    2cb4:	bd08      	pop	{r3, pc}
						FLASHCALW_FCMD_CMD_HSDIS, -1);
			} else {
				/* No wait-state, disable the high-speed read
				mode */
				flashcalw_set_wait_state(0);
    2cb6:	f04f 0000 	mov.w	r0, #0
    2cba:	f642 3279 	movw	r2, #11129	; 0x2b79
    2cbe:	f2c0 0200 	movt	r2, #0
    2cc2:	4790      	blx	r2
				flashcalw_issue_command(
    2cc4:	f04f 0011 	mov.w	r0, #17
    2cc8:	f04f 31ff 	mov.w	r1, #4294967295
    2ccc:	f642 33c1 	movw	r3, #11201	; 0x2bc1
    2cd0:	f2c0 0300 	movt	r3, #0
    2cd4:	4798      	blx	r3
    2cd6:	bd08      	pop	{r3, pc}
					FLASHCALW_FCMD_CMD_HSDIS, -1);
			}
		}
	} else { /* ps_value == 1 */
		if (cpu_f_hz > FLASH_FREQ_PS0_FWS_0_MAX_FREQ) { /* > 8MHz */
    2cd8:	f64a 0380 	movw	r3, #43136	; 0xa880
    2cdc:	f2c0 1312 	movt	r3, #274	; 0x112
    2ce0:	4298      	cmp	r0, r3
			/* Set a wait-state. */
			flashcalw_set_wait_state(1);
    2ce2:	bf8c      	ite	hi
    2ce4:	2001      	movhi	r0, #1
		} else {
			/* No wait-state. */
			flashcalw_set_wait_state(0);
    2ce6:	2000      	movls	r0, #0
    2ce8:	f642 3179 	movw	r1, #11129	; 0x2b79
    2cec:	f2c0 0100 	movt	r1, #0
    2cf0:	4788      	blx	r1
		}

		/* Disable the high-speed read mode. */
		flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSDIS, -1);
    2cf2:	f04f 0011 	mov.w	r0, #17
    2cf6:	f04f 31ff 	mov.w	r1, #4294967295
    2cfa:	f642 32c1 	movw	r2, #11201	; 0x2bc1
    2cfe:	f2c0 0200 	movt	r2, #0
    2d02:	4790      	blx	r2
    2d04:	bd08      	pop	{r3, pc}
    2d06:	bf00      	nop

00002d08 <wdt_set_ctrl>:
 *        to the WatchDog Timer key.
 *
 * \param ctrl  Value to set the WatchDog Timer Control register to.
 */
static void wdt_set_ctrl(uint32_t ctrl)
{
    2d08:	b082      	sub	sp, #8
	volatile uint32_t dly;

	/* Calculate delay for internal synchronization, see 44.1.2 WDT errata */
	if ((WDT->WDT_CTRL & WDT_CTRL_CSSEL) == WDT_CLK_SRC_RCSYS) {
    2d0a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    2d0e:	f2c4 030f 	movt	r3, #16399	; 0x400f
    2d12:	6819      	ldr	r1, [r3, #0]
    2d14:	f411 3f00 	tst.w	r1, #131072	; 0x20000
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RCSYS_NOMINAL_HZ);
    2d18:	bf0c      	ite	eq
    2d1a:	f240 3143 	movweq	r1, #835	; 0x343
	} else { /* WDT_CLK_SRC_32K */
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RC32K_NOMINAL_HZ);
    2d1e:	f44f 6137 	movne.w	r1, #2928	; 0xb70
    2d22:	9101      	str	r1, [sp, #4]
	}
	dly >>= 3; /* ~8 cycles for one while loop */
    2d24:	9a01      	ldr	r2, [sp, #4]
    2d26:	ea4f 03d2 	mov.w	r3, r2, lsr #3
    2d2a:	9301      	str	r3, [sp, #4]
	while(dly--);
    2d2c:	9901      	ldr	r1, [sp, #4]
    2d2e:	f101 32ff 	add.w	r2, r1, #4294967295
    2d32:	9201      	str	r2, [sp, #4]
    2d34:	2900      	cmp	r1, #0
    2d36:	d1f9      	bne.n	2d2c <wdt_set_ctrl+0x24>
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_FIRST_KEY);
    2d38:	f040 41aa 	orr.w	r1, r0, #1426063360	; 0x55000000
    2d3c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    2d40:	f2c4 030f 	movt	r3, #16399	; 0x400f
    2d44:	6019      	str	r1, [r3, #0]
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_SECOND_KEY);
    2d46:	f040 402a 	orr.w	r0, r0, #2852126720	; 0xaa000000
    2d4a:	6018      	str	r0, [r3, #0]
}
    2d4c:	b002      	add	sp, #8
    2d4e:	4770      	bx	lr

00002d50 <wdt_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(cfg);

	/* Default configuration values */
	cfg->clk_src = WDT_CLK_SRC_RCSYS;
    2d50:	f04f 0300 	mov.w	r3, #0
    2d54:	6003      	str	r3, [r0, #0]
	cfg->wdt_mode = WDT_MODE_BASIC;
    2d56:	6043      	str	r3, [r0, #4]
	cfg->timeout_period = WDT_PERIOD_131072_CLK;
    2d58:	f04f 0210 	mov.w	r2, #16
    2d5c:	7202      	strb	r2, [r0, #8]
	cfg->window_period = WDT_PERIOD_NONE;
    2d5e:	7243      	strb	r3, [r0, #9]
	cfg->disable_flash_cali = true;
    2d60:	f04f 0101 	mov.w	r1, #1
    2d64:	7281      	strb	r1, [r0, #10]
	cfg->disable_wdt_after_reset = true;
    2d66:	72c1      	strb	r1, [r0, #11]
	cfg->always_on = false;
    2d68:	7303      	strb	r3, [r0, #12]
    2d6a:	4770      	bx	lr

00002d6c <wdt_init>:
 */
bool wdt_init(
		struct wdt_dev_inst *const dev_inst,
		Wdt *const wdt,
		struct wdt_config *const cfg)
{
    2d6c:	b538      	push	{r3, r4, r5, lr}
    2d6e:	460c      	mov	r4, r1
    2d70:	4615      	mov	r5, r2
	/* Sanity check arguments */
	Assert(dev_inst);
	Assert(wdt);
	Assert(cfg);

	dev_inst->hw_dev = wdt;
    2d72:	6001      	str	r1, [r0, #0]
	dev_inst->wdt_cfg = cfg;
    2d74:	6042      	str	r2, [r0, #4]

	/* Enable APB clock for WDT */
	sysclk_enable_peripheral_clock(wdt);
    2d76:	4608      	mov	r0, r1
    2d78:	f641 23d9 	movw	r3, #6873	; 0x1ad9
    2d7c:	f2c0 0300 	movt	r3, #0
    2d80:	4798      	blx	r3

	/* Check SFV bit: if SFV bit is set, Control Register is locked */
	if (wdt->WDT_CTRL & WDT_CTRL_SFV) {
    2d82:	6820      	ldr	r0, [r4, #0]
    2d84:	f010 0f08 	tst.w	r0, #8
    2d88:	d152      	bne.n	2e30 <wdt_init+0xc4>
		return false;
	}

	/* Disable the WDT */
	if (wdt->WDT_CTRL & WDT_CTRL_EN) {
    2d8a:	6821      	ldr	r1, [r4, #0]
    2d8c:	f011 0f01 	tst.w	r1, #1
    2d90:	d00b      	beq.n	2daa <wdt_init+0x3e>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    2d92:	6822      	ldr	r2, [r4, #0]
    2d94:	f022 0001 	bic.w	r0, r2, #1
    2d98:	f642 5309 	movw	r3, #11529	; 0x2d09
    2d9c:	f2c0 0300 	movt	r3, #0
    2da0:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    2da2:	6820      	ldr	r0, [r4, #0]
    2da4:	f010 0f01 	tst.w	r0, #1
    2da8:	d1fb      	bne.n	2da2 <wdt_init+0x36>
		}
	}
	/* Disable the WDT clock */
	if (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    2daa:	6821      	ldr	r1, [r4, #0]
    2dac:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    2db0:	d00b      	beq.n	2dca <wdt_init+0x5e>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_CEN);
    2db2:	6822      	ldr	r2, [r4, #0]
    2db4:	f422 3080 	bic.w	r0, r2, #65536	; 0x10000
    2db8:	f642 5309 	movw	r3, #11529	; 0x2d09
    2dbc:	f2c0 0300 	movt	r3, #0
    2dc0:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    2dc2:	6820      	ldr	r0, [r4, #0]
    2dc4:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2dc8:	d1fb      	bne.n	2dc2 <wdt_init+0x56>
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
    2dca:	6869      	ldr	r1, [r5, #4]
    2dcc:	682a      	ldr	r2, [r5, #0]
    2dce:	ea41 0302 	orr.w	r3, r1, r2
			cfg->wdt_mode |
			WDT_CTRL_PSEL(cfg->timeout_period) |
    2dd2:	7a28      	ldrb	r0, [r5, #8]
    2dd4:	ea4f 2100 	mov.w	r1, r0, lsl #8
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
			cfg->wdt_mode |
    2dd8:	f401 52f8 	and.w	r2, r1, #7936	; 0x1f00
    2ddc:	ea43 0002 	orr.w	r0, r3, r2
			WDT_CTRL_PSEL(cfg->timeout_period) |
			WDT_CTRL_TBAN(cfg->window_period) |
    2de0:	7a6b      	ldrb	r3, [r5, #9]
    2de2:	ea4f 4183 	mov.w	r1, r3, lsl #18
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
			cfg->wdt_mode |
			WDT_CTRL_PSEL(cfg->timeout_period) |
    2de6:	f401 02f8 	and.w	r2, r1, #8126464	; 0x7c0000
    2dea:	4310      	orrs	r0, r2
			WDT_CTRL_TBAN(cfg->window_period) |
    2dec:	7aab      	ldrb	r3, [r5, #10]
    2dee:	2b00      	cmp	r3, #0
    2df0:	bf14      	ite	ne
    2df2:	2180      	movne	r1, #128	; 0x80
    2df4:	2100      	moveq	r1, #0
    2df6:	4308      	orrs	r0, r1
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
    2df8:	7aed      	ldrb	r5, [r5, #11]
    2dfa:	2d00      	cmp	r5, #0
    2dfc:	bf14      	ite	ne
    2dfe:	2202      	movne	r2, #2
    2e00:	2200      	moveq	r2, #0
    2e02:	4310      	orrs	r0, r2
    2e04:	f642 5509 	movw	r5, #11529	; 0x2d09
    2e08:	f2c0 0500 	movt	r5, #0
    2e0c:	47a8      	blx	r5
			WDT_CTRL_PSEL(cfg->timeout_period) |
			WDT_CTRL_TBAN(cfg->window_period) |
			(cfg->disable_flash_cali ? WDT_CTRL_FCD : 0) |
			(cfg->disable_wdt_after_reset ? WDT_CTRL_DAR : 0)
	);
	wdt_set_ctrl(wdt->WDT_CTRL | WDT_CTRL_CEN);
    2e0e:	6820      	ldr	r0, [r4, #0]
    2e10:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
    2e14:	47a8      	blx	r5
	while (!(wdt->WDT_CTRL & WDT_CTRL_CEN)) {
    2e16:	6823      	ldr	r3, [r4, #0]
    2e18:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2e1c:	d0fb      	beq.n	2e16 <wdt_init+0xaa>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    2e1e:	4620      	mov	r0, r4
    2e20:	f242 11b9 	movw	r1, #8633	; 0x21b9
    2e24:	f2c0 0100 	movt	r1, #0
    2e28:	4788      	blx	r1

	return true;
    2e2a:	f04f 0001 	mov.w	r0, #1
    2e2e:	bd38      	pop	{r3, r4, r5, pc}
	/* Enable APB clock for WDT */
	sysclk_enable_peripheral_clock(wdt);

	/* Check SFV bit: if SFV bit is set, Control Register is locked */
	if (wdt->WDT_CTRL & WDT_CTRL_SFV) {
		return false;
    2e30:	f04f 0000 	mov.w	r0, #0

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);

	return true;
}
    2e34:	bd38      	pop	{r3, r4, r5, pc}
    2e36:	bf00      	nop

00002e38 <wdt_disable>:
 * \brief Disable the WDT module.
 *
 * \param dev_inst    Device structure pointer.
 */
void wdt_disable(struct wdt_dev_inst *const dev_inst)
{
    2e38:	b510      	push	{r4, lr}
	Wdt *wdt = dev_inst->hw_dev;
    2e3a:	6804      	ldr	r4, [r0, #0]

	/* Disable the WDT */
	wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    2e3c:	6820      	ldr	r0, [r4, #0]
    2e3e:	f020 0001 	bic.w	r0, r0, #1
    2e42:	f642 5309 	movw	r3, #11529	; 0x2d09
    2e46:	f2c0 0300 	movt	r3, #0
    2e4a:	4798      	blx	r3
	while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    2e4c:	6821      	ldr	r1, [r4, #0]
    2e4e:	f011 0f01 	tst.w	r1, #1
    2e52:	d1fb      	bne.n	2e4c <wdt_disable+0x14>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    2e54:	4620      	mov	r0, r4
    2e56:	f242 12b9 	movw	r2, #8633	; 0x21b9
    2e5a:	f2c0 0200 	movt	r2, #0
    2e5e:	4790      	blx	r2
    2e60:	bd10      	pop	{r4, pc}
    2e62:	bf00      	nop

00002e64 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2e64:	e7fe      	b.n	2e64 <Dummy_Handler>
    2e66:	bf00      	nop

00002e68 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    2e68:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
    2e6a:	f240 0300 	movw	r3, #0
    2e6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e72:	f645 2218 	movw	r2, #23064	; 0x5a18
    2e76:	f2c0 0200 	movt	r2, #0
    2e7a:	429a      	cmp	r2, r3
    2e7c:	d003      	beq.n	2e86 <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
    2e7e:	4839      	ldr	r0, [pc, #228]	; (2f64 <Reset_Handler+0xfc>)
    2e80:	4939      	ldr	r1, [pc, #228]	; (2f68 <Reset_Handler+0x100>)
    2e82:	4281      	cmp	r1, r0
    2e84:	d304      	bcc.n	2e90 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    2e86:	4b39      	ldr	r3, [pc, #228]	; (2f6c <Reset_Handler+0x104>)
    2e88:	4a39      	ldr	r2, [pc, #228]	; (2f70 <Reset_Handler+0x108>)
    2e8a:	429a      	cmp	r2, r3
    2e8c:	d325      	bcc.n	2eda <Reset_Handler+0x72>
    2e8e:	e042      	b.n	2f16 <Reset_Handler+0xae>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
    2e90:	4d38      	ldr	r5, [pc, #224]	; (2f74 <Reset_Handler+0x10c>)
    2e92:	4c39      	ldr	r4, [pc, #228]	; (2f78 <Reset_Handler+0x110>)
    2e94:	1b63      	subs	r3, r4, r5
    2e96:	f023 0503 	bic.w	r5, r3, #3
    2e9a:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
    2e9e:	f240 0200 	movw	r2, #0
    2ea2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2ea6:	f645 2118 	movw	r1, #23064	; 0x5a18
    2eaa:	f2c0 0100 	movt	r1, #0
    2eae:	f105 0004 	add.w	r0, r5, #4
    2eb2:	f3c5 0480 	ubfx	r4, r5, #2, #1
    2eb6:	585d      	ldr	r5, [r3, r1]
    2eb8:	509d      	str	r5, [r3, r2]
    2eba:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    2ebe:	4283      	cmp	r3, r0
    2ec0:	d146      	bne.n	2f50 <Reset_Handler+0xe8>
    2ec2:	e7e0      	b.n	2e86 <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
    2ec4:	585d      	ldr	r5, [r3, r1]
    2ec6:	509d      	str	r5, [r3, r2]
    2ec8:	f103 0304 	add.w	r3, r3, #4
    2ecc:	585c      	ldr	r4, [r3, r1]
    2ece:	509c      	str	r4, [r3, r2]
    2ed0:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    2ed4:	4283      	cmp	r3, r0
    2ed6:	d1f5      	bne.n	2ec4 <Reset_Handler+0x5c>
    2ed8:	e7d5      	b.n	2e86 <Reset_Handler+0x1e>
    2eda:	4d28      	ldr	r5, [pc, #160]	; (2f7c <Reset_Handler+0x114>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
    2edc:	4928      	ldr	r1, [pc, #160]	; (2f80 <Reset_Handler+0x118>)
    2ede:	1b48      	subs	r0, r1, r5
    2ee0:	f020 0403 	bic.w	r4, r0, #3
    2ee4:	f640 1310 	movw	r3, #2320	; 0x910
    2ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2eec:	18e2      	adds	r2, r4, r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
    2eee:	f04f 0100 	mov.w	r1, #0
    2ef2:	1b50      	subs	r0, r2, r5
    2ef4:	f1a0 0004 	sub.w	r0, r0, #4
    2ef8:	f3c0 0480 	ubfx	r4, r0, #2, #1
    2efc:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    2f00:	4295      	cmp	r5, r2
    2f02:	d11e      	bne.n	2f42 <Reset_Handler+0xda>
    2f04:	e007      	b.n	2f16 <Reset_Handler+0xae>
    2f06:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
    2f0a:	6069      	str	r1, [r5, #4]
    2f0c:	f105 0508 	add.w	r5, r5, #8
    2f10:	6059      	str	r1, [r3, #4]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    2f12:	4295      	cmp	r5, r2
    2f14:	d1f7      	bne.n	2f06 <Reset_Handler+0x9e>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) &_sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2f16:	f240 0500 	movw	r5, #0
    2f1a:	f2c0 0500 	movt	r5, #0
    2f1e:	f025 027f 	bic.w	r2, r5, #127	; 0x7f
    2f22:	f44f 416d 	mov.w	r1, #60672	; 0xed00
    2f26:	f2ce 0100 	movt	r1, #57344	; 0xe000
    2f2a:	608a      	str	r2, [r1, #8]

	/* Initialize the C library */
	__libc_init_array();
    2f2c:	f243 00a1 	movw	r0, #12449	; 0x30a1
    2f30:	f2c0 0000 	movt	r0, #0
    2f34:	4780      	blx	r0

	/* Branch to main function */
	main();
    2f36:	f241 14bd 	movw	r4, #4541	; 0x11bd
    2f3a:	f2c0 0400 	movt	r4, #0
    2f3e:	47a0      	blx	r4
    2f40:	e7fe      	b.n	2f40 <Reset_Handler+0xd8>
    2f42:	2c00      	cmp	r4, #0
    2f44:	d0df      	beq.n	2f06 <Reset_Handler+0x9e>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
    2f46:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    2f4a:	4295      	cmp	r5, r2
    2f4c:	d1db      	bne.n	2f06 <Reset_Handler+0x9e>
    2f4e:	e7e2      	b.n	2f16 <Reset_Handler+0xae>
    2f50:	2c00      	cmp	r4, #0
    2f52:	d0b7      	beq.n	2ec4 <Reset_Handler+0x5c>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
    2f54:	585c      	ldr	r4, [r3, r1]
    2f56:	509c      	str	r4, [r3, r2]
    2f58:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    2f5c:	4283      	cmp	r3, r0
    2f5e:	d1b1      	bne.n	2ec4 <Reset_Handler+0x5c>
    2f60:	e791      	b.n	2e86 <Reset_Handler+0x1e>
    2f62:	bf00      	nop
    2f64:	20000910 	.word	0x20000910
    2f68:	20000000 	.word	0x20000000
    2f6c:	20000a74 	.word	0x20000a74
    2f70:	20000910 	.word	0x20000910
    2f74:	20000004 	.word	0x20000004
    2f78:	20000913 	.word	0x20000913
    2f7c:	2000090c 	.word	0x2000090c
    2f80:	20000a6f 	.word	0x20000a6f

00002f84 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2f84:	f640 13a4 	movw	r3, #2468	; 0x9a4
    2f88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f8c:	6819      	ldr	r1, [r3, #0]
    2f8e:	b941      	cbnz	r1, 2fa2 <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
    2f90:	f640 13a4 	movw	r3, #2468	; 0x9a4
    2f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f98:	f641 2278 	movw	r2, #6776	; 0x1a78
    2f9c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2fa0:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    2fa2:	f640 11a4 	movw	r1, #2468	; 0x9a4
    2fa6:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2faa:	680b      	ldr	r3, [r1, #0]

	heap += incr;
    2fac:	1818      	adds	r0, r3, r0
    2fae:	6008      	str	r0, [r1, #0]

	return (caddr_t) prev_heap;
}
    2fb0:	4618      	mov	r0, r3
    2fb2:	4770      	bx	lr

00002fb4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    2fb4:	f04f 30ff 	mov.w	r0, #4294967295
    2fb8:	4770      	bx	lr
    2fba:	bf00      	nop

00002fbc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2fbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    2fc0:	604b      	str	r3, [r1, #4]

	return 0;
}
    2fc2:	f04f 0000 	mov.w	r0, #0
    2fc6:	4770      	bx	lr

00002fc8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2fc8:	f04f 0001 	mov.w	r0, #1
    2fcc:	4770      	bx	lr
    2fce:	bf00      	nop

00002fd0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2fd0:	f04f 0000 	mov.w	r0, #0
    2fd4:	4770      	bx	lr
    2fd6:	bf00      	nop

00002fd8 <__register_exitproc>:
    2fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2fdc:	4698      	mov	r8, r3
    2fde:	4b23      	ldr	r3, [pc, #140]	; (306c <__register_exitproc+0x94>)
    2fe0:	681c      	ldr	r4, [r3, #0]
    2fe2:	4606      	mov	r6, r0
    2fe4:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    2fe8:	460f      	mov	r7, r1
    2fea:	4691      	mov	r9, r2
    2fec:	b918      	cbnz	r0, 2ff6 <__register_exitproc+0x1e>
    2fee:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
    2ff2:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    2ff6:	6841      	ldr	r1, [r0, #4]
    2ff8:	291f      	cmp	r1, #31
    2ffa:	dd16      	ble.n	302a <__register_exitproc+0x52>
    2ffc:	481c      	ldr	r0, [pc, #112]	; (3070 <__register_exitproc+0x98>)
    2ffe:	b918      	cbnz	r0, 3008 <__register_exitproc+0x30>
    3000:	f04f 30ff 	mov.w	r0, #4294967295
    3004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3008:	f44f 70c8 	mov.w	r0, #400	; 0x190
    300c:	f001 fb84 	bl	4718 <malloc>
    3010:	2800      	cmp	r0, #0
    3012:	d0f5      	beq.n	3000 <__register_exitproc+0x28>
    3014:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    3018:	2500      	movs	r5, #0
    301a:	6045      	str	r5, [r0, #4]
    301c:	6002      	str	r2, [r0, #0]
    301e:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    3022:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
    3026:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
    302a:	b1b6      	cbz	r6, 305a <__register_exitproc+0x82>
    302c:	6844      	ldr	r4, [r0, #4]
    302e:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    3032:	2201      	movs	r2, #1
    3034:	eb00 0384 	add.w	r3, r0, r4, lsl #2
    3038:	fa02 f204 	lsl.w	r2, r2, r4
    303c:	4311      	orrs	r1, r2
    303e:	2e02      	cmp	r6, #2
    3040:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
    3044:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    3048:	461c      	mov	r4, r3
    304a:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
    304e:	d104      	bne.n	305a <__register_exitproc+0x82>
    3050:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
    3054:	431a      	orrs	r2, r3
    3056:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
    305a:	6841      	ldr	r1, [r0, #4]
    305c:	1c8b      	adds	r3, r1, #2
    305e:	1c4a      	adds	r2, r1, #1
    3060:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    3064:	6042      	str	r2, [r0, #4]
    3066:	2000      	movs	r0, #0
    3068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    306c:	00005998 	.word	0x00005998
    3070:	00004719 	.word	0x00004719

00003074 <__libc_fini_array>:
    3074:	b570      	push	{r4, r5, r6, lr}
    3076:	4b08      	ldr	r3, [pc, #32]	; (3098 <__libc_fini_array+0x24>)
    3078:	4c08      	ldr	r4, [pc, #32]	; (309c <__libc_fini_array+0x28>)
    307a:	1ae0      	subs	r0, r4, r3
    307c:	1084      	asrs	r4, r0, #2
    307e:	eb03 0684 	add.w	r6, r3, r4, lsl #2
    3082:	2500      	movs	r5, #0
    3084:	3d04      	subs	r5, #4
    3086:	b11c      	cbz	r4, 3090 <__libc_fini_array+0x1c>
    3088:	5972      	ldr	r2, [r6, r5]
    308a:	4790      	blx	r2
    308c:	3c01      	subs	r4, #1
    308e:	e7f9      	b.n	3084 <__libc_fini_array+0x10>
    3090:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3094:	f002 bcb4 	b.w	5a00 <_fini>
    3098:	00005a0c 	.word	0x00005a0c
    309c:	00005a10 	.word	0x00005a10

000030a0 <__libc_init_array>:
    30a0:	b538      	push	{r3, r4, r5, lr}
    30a2:	4d0e      	ldr	r5, [pc, #56]	; (30dc <__libc_init_array+0x3c>)
    30a4:	4b0e      	ldr	r3, [pc, #56]	; (30e0 <__libc_init_array+0x40>)
    30a6:	1ae8      	subs	r0, r5, r3
    30a8:	1085      	asrs	r5, r0, #2
    30aa:	2400      	movs	r4, #0
    30ac:	42ac      	cmp	r4, r5
    30ae:	d005      	beq.n	30bc <__libc_init_array+0x1c>
    30b0:	490b      	ldr	r1, [pc, #44]	; (30e0 <__libc_init_array+0x40>)
    30b2:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
    30b6:	4790      	blx	r2
    30b8:	3401      	adds	r4, #1
    30ba:	e7f7      	b.n	30ac <__libc_init_array+0xc>
    30bc:	f002 fc96 	bl	59ec <_init>
    30c0:	4908      	ldr	r1, [pc, #32]	; (30e4 <__libc_init_array+0x44>)
    30c2:	4a09      	ldr	r2, [pc, #36]	; (30e8 <__libc_init_array+0x48>)
    30c4:	1a54      	subs	r4, r2, r1
    30c6:	10a5      	asrs	r5, r4, #2
    30c8:	2400      	movs	r4, #0
    30ca:	42ac      	cmp	r4, r5
    30cc:	d005      	beq.n	30da <__libc_init_array+0x3a>
    30ce:	4b05      	ldr	r3, [pc, #20]	; (30e4 <__libc_init_array+0x44>)
    30d0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    30d4:	4780      	blx	r0
    30d6:	3401      	adds	r4, #1
    30d8:	e7f7      	b.n	30ca <__libc_init_array+0x2a>
    30da:	bd38      	pop	{r3, r4, r5, pc}
    30dc:	000059f8 	.word	0x000059f8
    30e0:	000059f8 	.word	0x000059f8
    30e4:	000059f8 	.word	0x000059f8
    30e8:	00005a00 	.word	0x00005a00

000030ec <iprintf>:
    30ec:	b40f      	push	{r0, r1, r2, r3}
    30ee:	b507      	push	{r0, r1, r2, lr}
    30f0:	4906      	ldr	r1, [pc, #24]	; (310c <iprintf+0x20>)
    30f2:	ab04      	add	r3, sp, #16
    30f4:	6808      	ldr	r0, [r1, #0]
    30f6:	f853 2b04 	ldr.w	r2, [r3], #4
    30fa:	6881      	ldr	r1, [r0, #8]
    30fc:	9301      	str	r3, [sp, #4]
    30fe:	f000 f911 	bl	3324 <_vfiprintf_r>
    3102:	e8bd 400e 	ldmia.w	sp!, {r1, r2, r3, lr}
    3106:	b004      	add	sp, #16
    3108:	4770      	bx	lr
    310a:	bf00      	nop
    310c:	20000050 	.word	0x20000050

00003110 <_iprintf_r>:
    3110:	b40e      	push	{r1, r2, r3}
    3112:	b503      	push	{r0, r1, lr}
    3114:	ab03      	add	r3, sp, #12
    3116:	6881      	ldr	r1, [r0, #8]
    3118:	f853 2b04 	ldr.w	r2, [r3], #4
    311c:	9301      	str	r3, [sp, #4]
    311e:	f000 f901 	bl	3324 <_vfiprintf_r>
    3122:	e8bd 400c 	ldmia.w	sp!, {r2, r3, lr}
    3126:	b003      	add	sp, #12
    3128:	4770      	bx	lr
    312a:	bf00      	nop

0000312c <memset>:
    312c:	1882      	adds	r2, r0, r2
    312e:	4603      	mov	r3, r0
    3130:	4293      	cmp	r3, r2
    3132:	d002      	beq.n	313a <memset+0xe>
    3134:	f803 1b01 	strb.w	r1, [r3], #1
    3138:	e7fa      	b.n	3130 <memset+0x4>
    313a:	4770      	bx	lr

0000313c <_puts_r>:
    313c:	b530      	push	{r4, r5, lr}
    313e:	4605      	mov	r5, r0
    3140:	b089      	sub	sp, #36	; 0x24
    3142:	4608      	mov	r0, r1
    3144:	460c      	mov	r4, r1
    3146:	f000 f8b1 	bl	32ac <strlen>
    314a:	2101      	movs	r1, #1
    314c:	1843      	adds	r3, r0, r1
    314e:	9107      	str	r1, [sp, #28]
    3150:	4911      	ldr	r1, [pc, #68]	; (3198 <_puts_r+0x5c>)
    3152:	9303      	str	r3, [sp, #12]
    3154:	680b      	ldr	r3, [r1, #0]
    3156:	4a11      	ldr	r2, [pc, #68]	; (319c <_puts_r+0x60>)
    3158:	9005      	str	r0, [sp, #20]
    315a:	a804      	add	r0, sp, #16
    315c:	9001      	str	r0, [sp, #4]
    315e:	6898      	ldr	r0, [r3, #8]
    3160:	9206      	str	r2, [sp, #24]
    3162:	2202      	movs	r2, #2
    3164:	9202      	str	r2, [sp, #8]
    3166:	8982      	ldrh	r2, [r0, #12]
    3168:	9404      	str	r4, [sp, #16]
    316a:	f402 5100 	and.w	r1, r2, #8192	; 0x2000
    316e:	b20b      	sxth	r3, r1
    3170:	b933      	cbnz	r3, 3180 <_puts_r+0x44>
    3172:	6e41      	ldr	r1, [r0, #100]	; 0x64
    3174:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    3178:	f421 5300 	bic.w	r3, r1, #8192	; 0x2000
    317c:	8182      	strh	r2, [r0, #12]
    317e:	6643      	str	r3, [r0, #100]	; 0x64
    3180:	4628      	mov	r0, r5
    3182:	68a9      	ldr	r1, [r5, #8]
    3184:	aa01      	add	r2, sp, #4
    3186:	f001 f879 	bl	427c <__sfvwrite_r>
    318a:	2800      	cmp	r0, #0
    318c:	bf0c      	ite	eq
    318e:	200a      	moveq	r0, #10
    3190:	f04f 30ff 	movne.w	r0, #4294967295
    3194:	b009      	add	sp, #36	; 0x24
    3196:	bd30      	pop	{r4, r5, pc}
    3198:	20000050 	.word	0x20000050
    319c:	0000599e 	.word	0x0000599e

000031a0 <puts>:
    31a0:	4b02      	ldr	r3, [pc, #8]	; (31ac <puts+0xc>)
    31a2:	4601      	mov	r1, r0
    31a4:	6818      	ldr	r0, [r3, #0]
    31a6:	f7ff bfc9 	b.w	313c <_puts_r>
    31aa:	bf00      	nop
    31ac:	20000050 	.word	0x20000050

000031b0 <setbuf>:
    31b0:	2900      	cmp	r1, #0
    31b2:	bf0c      	ite	eq
    31b4:	2202      	moveq	r2, #2
    31b6:	2200      	movne	r2, #0
    31b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    31bc:	f000 b800 	b.w	31c0 <setvbuf>

000031c0 <setvbuf>:
    31c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    31c4:	461d      	mov	r5, r3
    31c6:	4b37      	ldr	r3, [pc, #220]	; (32a4 <setvbuf+0xe4>)
    31c8:	4604      	mov	r4, r0
    31ca:	6818      	ldr	r0, [r3, #0]
    31cc:	460e      	mov	r6, r1
    31ce:	4617      	mov	r7, r2
    31d0:	4698      	mov	r8, r3
    31d2:	b118      	cbz	r0, 31dc <setvbuf+0x1c>
    31d4:	6b82      	ldr	r2, [r0, #56]	; 0x38
    31d6:	b90a      	cbnz	r2, 31dc <setvbuf+0x1c>
    31d8:	f000 fe5c 	bl	3e94 <__sinit>
    31dc:	2f02      	cmp	r7, #2
    31de:	d85d      	bhi.n	329c <setvbuf+0xdc>
    31e0:	2d00      	cmp	r5, #0
    31e2:	db5b      	blt.n	329c <setvbuf+0xdc>
    31e4:	4621      	mov	r1, r4
    31e6:	f8d8 0000 	ldr.w	r0, [r8]
    31ea:	f000 fd5f 	bl	3cac <_fflush_r>
    31ee:	89a1      	ldrh	r1, [r4, #12]
    31f0:	f001 0380 	and.w	r3, r1, #128	; 0x80
    31f4:	2000      	movs	r0, #0
    31f6:	b21a      	sxth	r2, r3
    31f8:	6060      	str	r0, [r4, #4]
    31fa:	61a0      	str	r0, [r4, #24]
    31fc:	b122      	cbz	r2, 3208 <setvbuf+0x48>
    31fe:	4829      	ldr	r0, [pc, #164]	; (32a4 <setvbuf+0xe4>)
    3200:	6921      	ldr	r1, [r4, #16]
    3202:	6800      	ldr	r0, [r0, #0]
    3204:	f000 ff84 	bl	4110 <_free_r>
    3208:	89a1      	ldrh	r1, [r4, #12]
    320a:	2f02      	cmp	r7, #2
    320c:	f021 0383 	bic.w	r3, r1, #131	; 0x83
    3210:	81a3      	strh	r3, [r4, #12]
    3212:	d012      	beq.n	323a <setvbuf+0x7a>
    3214:	bb36      	cbnz	r6, 3264 <setvbuf+0xa4>
    3216:	2d00      	cmp	r5, #0
    3218:	bf08      	it	eq
    321a:	f44f 6580 	moveq.w	r5, #1024	; 0x400
    321e:	4628      	mov	r0, r5
    3220:	f001 fa7a 	bl	4718 <malloc>
    3224:	4606      	mov	r6, r0
    3226:	b9c8      	cbnz	r0, 325c <setvbuf+0x9c>
    3228:	f44f 6080 	mov.w	r0, #1024	; 0x400
    322c:	f001 fa74 	bl	4718 <malloc>
    3230:	4606      	mov	r6, r0
    3232:	b988      	cbnz	r0, 3258 <setvbuf+0x98>
    3234:	f04f 30ff 	mov.w	r0, #4294967295
    3238:	e000      	b.n	323c <setvbuf+0x7c>
    323a:	2000      	movs	r0, #0
    323c:	89a1      	ldrh	r1, [r4, #12]
    323e:	f041 0302 	orr.w	r3, r1, #2
    3242:	81a3      	strh	r3, [r4, #12]
    3244:	f104 0143 	add.w	r1, r4, #67	; 0x43
    3248:	2200      	movs	r2, #0
    324a:	2301      	movs	r3, #1
    324c:	60a2      	str	r2, [r4, #8]
    324e:	6021      	str	r1, [r4, #0]
    3250:	6121      	str	r1, [r4, #16]
    3252:	6163      	str	r3, [r4, #20]
    3254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3258:	f44f 6580 	mov.w	r5, #1024	; 0x400
    325c:	89a2      	ldrh	r2, [r4, #12]
    325e:	f042 0080 	orr.w	r0, r2, #128	; 0x80
    3262:	81a0      	strh	r0, [r4, #12]
    3264:	2f01      	cmp	r7, #1
    3266:	d105      	bne.n	3274 <setvbuf+0xb4>
    3268:	89a1      	ldrh	r1, [r4, #12]
    326a:	426a      	negs	r2, r5
    326c:	f041 0301 	orr.w	r3, r1, #1
    3270:	81a3      	strh	r3, [r4, #12]
    3272:	61a2      	str	r2, [r4, #24]
    3274:	480b      	ldr	r0, [pc, #44]	; (32a4 <setvbuf+0xe4>)
    3276:	89a2      	ldrh	r2, [r4, #12]
    3278:	6801      	ldr	r1, [r0, #0]
    327a:	4b0b      	ldr	r3, [pc, #44]	; (32a8 <setvbuf+0xe8>)
    327c:	f002 0008 	and.w	r0, r2, #8
    3280:	b200      	sxth	r0, r0
    3282:	63cb      	str	r3, [r1, #60]	; 0x3c
    3284:	6026      	str	r6, [r4, #0]
    3286:	6126      	str	r6, [r4, #16]
    3288:	6165      	str	r5, [r4, #20]
    328a:	b148      	cbz	r0, 32a0 <setvbuf+0xe0>
    328c:	f012 0f03 	tst.w	r2, #3
    3290:	bf18      	it	ne
    3292:	2500      	movne	r5, #0
    3294:	60a5      	str	r5, [r4, #8]
    3296:	2000      	movs	r0, #0
    3298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    329c:	f04f 30ff 	mov.w	r0, #4294967295
    32a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    32a4:	20000050 	.word	0x20000050
    32a8:	00003e09 	.word	0x00003e09

000032ac <strlen>:
    32ac:	4603      	mov	r3, r0
    32ae:	f813 2b01 	ldrb.w	r2, [r3], #1
    32b2:	2a00      	cmp	r2, #0
    32b4:	d1fb      	bne.n	32ae <strlen+0x2>
    32b6:	1a18      	subs	r0, r3, r0
    32b8:	3801      	subs	r0, #1
    32ba:	4770      	bx	lr

000032bc <__sprint_r>:
    32bc:	6893      	ldr	r3, [r2, #8]
    32be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    32c2:	4681      	mov	r9, r0
    32c4:	460f      	mov	r7, r1
    32c6:	4614      	mov	r4, r2
    32c8:	b91b      	cbnz	r3, 32d2 <__sprint_r+0x16>
    32ca:	6053      	str	r3, [r2, #4]
    32cc:	4618      	mov	r0, r3
    32ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    32d2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    32d4:	049b      	lsls	r3, r3, #18
    32d6:	d51e      	bpl.n	3316 <__sprint_r+0x5a>
    32d8:	6815      	ldr	r5, [r2, #0]
    32da:	68a0      	ldr	r0, [r4, #8]
    32dc:	3508      	adds	r5, #8
    32de:	b1c8      	cbz	r0, 3314 <__sprint_r+0x58>
    32e0:	f855 1c04 	ldr.w	r1, [r5, #-4]
    32e4:	f855 ac08 	ldr.w	sl, [r5, #-8]
    32e8:	ea4f 0891 	mov.w	r8, r1, lsr #2
    32ec:	2600      	movs	r6, #0
    32ee:	4546      	cmp	r6, r8
    32f0:	da09      	bge.n	3306 <__sprint_r+0x4a>
    32f2:	4648      	mov	r0, r9
    32f4:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
    32f8:	463a      	mov	r2, r7
    32fa:	f000 fe47 	bl	3f8c <_fputwc_r>
    32fe:	1c43      	adds	r3, r0, #1
    3300:	d00b      	beq.n	331a <__sprint_r+0x5e>
    3302:	3601      	adds	r6, #1
    3304:	e7f3      	b.n	32ee <__sprint_r+0x32>
    3306:	68a2      	ldr	r2, [r4, #8]
    3308:	ea4f 0888 	mov.w	r8, r8, lsl #2
    330c:	ebc8 0302 	rsb	r3, r8, r2
    3310:	60a3      	str	r3, [r4, #8]
    3312:	e7e2      	b.n	32da <__sprint_r+0x1e>
    3314:	e001      	b.n	331a <__sprint_r+0x5e>
    3316:	f000 ffb1 	bl	427c <__sfvwrite_r>
    331a:	2100      	movs	r1, #0
    331c:	60a1      	str	r1, [r4, #8]
    331e:	6061      	str	r1, [r4, #4]
    3320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00003324 <_vfiprintf_r>:
    3324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3328:	4689      	mov	r9, r1
    332a:	b0a9      	sub	sp, #164	; 0xa4
    332c:	4614      	mov	r4, r2
    332e:	461d      	mov	r5, r3
    3330:	461e      	mov	r6, r3
    3332:	4682      	mov	sl, r0
    3334:	b118      	cbz	r0, 333e <_vfiprintf_r+0x1a>
    3336:	6b83      	ldr	r3, [r0, #56]	; 0x38
    3338:	b90b      	cbnz	r3, 333e <_vfiprintf_r+0x1a>
    333a:	f000 fdab 	bl	3e94 <__sinit>
    333e:	f8b9 000c 	ldrh.w	r0, [r9, #12]
    3342:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
    3346:	b211      	sxth	r1, r2
    3348:	b949      	cbnz	r1, 335e <_vfiprintf_r+0x3a>
    334a:	f440 5300 	orr.w	r3, r0, #8192	; 0x2000
    334e:	f8d9 0064 	ldr.w	r0, [r9, #100]	; 0x64
    3352:	f8a9 300c 	strh.w	r3, [r9, #12]
    3356:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
    335a:	f8c9 2064 	str.w	r2, [r9, #100]	; 0x64
    335e:	f8b9 100c 	ldrh.w	r1, [r9, #12]
    3362:	f001 0308 	and.w	r3, r1, #8
    3366:	b218      	sxth	r0, r3
    3368:	b148      	cbz	r0, 337e <_vfiprintf_r+0x5a>
    336a:	f8d9 2010 	ldr.w	r2, [r9, #16]
    336e:	b132      	cbz	r2, 337e <_vfiprintf_r+0x5a>
    3370:	f8b9 100c 	ldrh.w	r1, [r9, #12]
    3374:	f001 031a 	and.w	r3, r1, #26
    3378:	2b0a      	cmp	r3, #10
    337a:	d116      	bne.n	33aa <_vfiprintf_r+0x86>
    337c:	e009      	b.n	3392 <_vfiprintf_r+0x6e>
    337e:	4650      	mov	r0, sl
    3380:	4649      	mov	r1, r9
    3382:	f000 fc27 	bl	3bd4 <__swsetup_r>
    3386:	2800      	cmp	r0, #0
    3388:	d0f2      	beq.n	3370 <_vfiprintf_r+0x4c>
    338a:	f04f 32ff 	mov.w	r2, #4294967295
    338e:	9203      	str	r2, [sp, #12]
    3390:	e3d5      	b.n	3b3e <_vfiprintf_r+0x81a>
    3392:	f9b9 000e 	ldrsh.w	r0, [r9, #14]
    3396:	2800      	cmp	r0, #0
    3398:	db07      	blt.n	33aa <_vfiprintf_r+0x86>
    339a:	4650      	mov	r0, sl
    339c:	4649      	mov	r1, r9
    339e:	4622      	mov	r2, r4
    33a0:	462b      	mov	r3, r5
    33a2:	f000 fbd0 	bl	3b46 <__sbprintf>
    33a6:	9003      	str	r0, [sp, #12]
    33a8:	e3c9      	b.n	3b3e <_vfiprintf_r+0x81a>
    33aa:	2200      	movs	r2, #0
    33ac:	ad18      	add	r5, sp, #96	; 0x60
    33ae:	950b      	str	r5, [sp, #44]	; 0x2c
    33b0:	920d      	str	r2, [sp, #52]	; 0x34
    33b2:	920c      	str	r2, [sp, #48]	; 0x30
    33b4:	9401      	str	r4, [sp, #4]
    33b6:	9205      	str	r2, [sp, #20]
    33b8:	9203      	str	r2, [sp, #12]
    33ba:	46a8      	mov	r8, r5
    33bc:	9901      	ldr	r1, [sp, #4]
    33be:	460c      	mov	r4, r1
    33c0:	f811 3b01 	ldrb.w	r3, [r1], #1
    33c4:	b10b      	cbz	r3, 33ca <_vfiprintf_r+0xa6>
    33c6:	2b25      	cmp	r3, #37	; 0x25
    33c8:	d1f9      	bne.n	33be <_vfiprintf_r+0x9a>
    33ca:	9a01      	ldr	r2, [sp, #4]
    33cc:	1aa5      	subs	r5, r4, r2
    33ce:	d019      	beq.n	3404 <_vfiprintf_r+0xe0>
    33d0:	990c      	ldr	r1, [sp, #48]	; 0x30
    33d2:	980d      	ldr	r0, [sp, #52]	; 0x34
    33d4:	1c4b      	adds	r3, r1, #1
    33d6:	e888 0024 	stmia.w	r8, {r2, r5}
    33da:	2b07      	cmp	r3, #7
    33dc:	eb00 0205 	add.w	r2, r0, r5
    33e0:	920d      	str	r2, [sp, #52]	; 0x34
    33e2:	f108 0808 	add.w	r8, r8, #8
    33e6:	930c      	str	r3, [sp, #48]	; 0x30
    33e8:	dd09      	ble.n	33fe <_vfiprintf_r+0xda>
    33ea:	4650      	mov	r0, sl
    33ec:	4649      	mov	r1, r9
    33ee:	aa0b      	add	r2, sp, #44	; 0x2c
    33f0:	f7ff ff64 	bl	32bc <__sprint_r>
    33f4:	2800      	cmp	r0, #0
    33f6:	f040 839a 	bne.w	3b2e <_vfiprintf_r+0x80a>
    33fa:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    33fe:	9803      	ldr	r0, [sp, #12]
    3400:	1942      	adds	r2, r0, r5
    3402:	9203      	str	r2, [sp, #12]
    3404:	7821      	ldrb	r1, [r4, #0]
    3406:	2900      	cmp	r1, #0
    3408:	f000 838a 	beq.w	3b20 <_vfiprintf_r+0x7fc>
    340c:	2200      	movs	r2, #0
    340e:	3401      	adds	r4, #1
    3410:	9401      	str	r4, [sp, #4]
    3412:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3416:	f04f 3cff 	mov.w	ip, #4294967295
    341a:	9204      	str	r2, [sp, #16]
    341c:	4617      	mov	r7, r2
    341e:	9801      	ldr	r0, [sp, #4]
    3420:	f810 3b01 	ldrb.w	r3, [r0], #1
    3424:	9001      	str	r0, [sp, #4]
    3426:	2b63      	cmp	r3, #99	; 0x63
    3428:	f000 80b3 	beq.w	3592 <_vfiprintf_r+0x26e>
    342c:	dc33      	bgt.n	3496 <_vfiprintf_r+0x172>
    342e:	2b39      	cmp	r3, #57	; 0x39
    3430:	dc1a      	bgt.n	3468 <_vfiprintf_r+0x144>
    3432:	2b31      	cmp	r3, #49	; 0x31
    3434:	f280 8091 	bge.w	355a <_vfiprintf_r+0x236>
    3438:	2b2b      	cmp	r3, #43	; 0x2b
    343a:	d101      	bne.n	3440 <_vfiprintf_r+0x11c>
    343c:	461a      	mov	r2, r3
    343e:	e7ee      	b.n	341e <_vfiprintf_r+0xfa>
    3440:	dc0a      	bgt.n	3458 <_vfiprintf_r+0x134>
    3442:	2b23      	cmp	r3, #35	; 0x23
    3444:	d055      	beq.n	34f2 <_vfiprintf_r+0x1ce>
    3446:	2b2a      	cmp	r3, #42	; 0x2a
    3448:	d056      	beq.n	34f8 <_vfiprintf_r+0x1d4>
    344a:	2b20      	cmp	r3, #32
    344c:	f040 81f7 	bne.w	383e <_vfiprintf_r+0x51a>
    3450:	2a00      	cmp	r2, #0
    3452:	bf08      	it	eq
    3454:	2220      	moveq	r2, #32
    3456:	e7e2      	b.n	341e <_vfiprintf_r+0xfa>
    3458:	2b2e      	cmp	r3, #46	; 0x2e
    345a:	d058      	beq.n	350e <_vfiprintf_r+0x1ea>
    345c:	2b30      	cmp	r3, #48	; 0x30
    345e:	d079      	beq.n	3554 <_vfiprintf_r+0x230>
    3460:	2b2d      	cmp	r3, #45	; 0x2d
    3462:	f040 81ec 	bne.w	383e <_vfiprintf_r+0x51a>
    3466:	e04f      	b.n	3508 <_vfiprintf_r+0x1e4>
    3468:	2b4f      	cmp	r3, #79	; 0x4f
    346a:	f000 80de 	beq.w	362a <_vfiprintf_r+0x306>
    346e:	dc07      	bgt.n	3480 <_vfiprintf_r+0x15c>
    3470:	2b44      	cmp	r3, #68	; 0x44
    3472:	f040 81e4 	bne.w	383e <_vfiprintf_r+0x51a>
    3476:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    347a:	f047 0710 	orr.w	r7, r7, #16
    347e:	e090      	b.n	35a2 <_vfiprintf_r+0x27e>
    3480:	2b55      	cmp	r3, #85	; 0x55
    3482:	f000 811f 	beq.w	36c4 <_vfiprintf_r+0x3a0>
    3486:	2b58      	cmp	r3, #88	; 0x58
    3488:	f040 81d9 	bne.w	383e <_vfiprintf_r+0x51a>
    348c:	4daf      	ldr	r5, [pc, #700]	; (374c <_vfiprintf_r+0x428>)
    348e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3492:	9505      	str	r5, [sp, #20]
    3494:	e131      	b.n	36fa <_vfiprintf_r+0x3d6>
    3496:	2b6f      	cmp	r3, #111	; 0x6f
    3498:	f000 80c9 	beq.w	362e <_vfiprintf_r+0x30a>
    349c:	dc10      	bgt.n	34c0 <_vfiprintf_r+0x19c>
    349e:	2b69      	cmp	r3, #105	; 0x69
    34a0:	d024      	beq.n	34ec <_vfiprintf_r+0x1c8>
    34a2:	dc07      	bgt.n	34b4 <_vfiprintf_r+0x190>
    34a4:	2b64      	cmp	r3, #100	; 0x64
    34a6:	d021      	beq.n	34ec <_vfiprintf_r+0x1c8>
    34a8:	2b68      	cmp	r3, #104	; 0x68
    34aa:	f040 81c8 	bne.w	383e <_vfiprintf_r+0x51a>
    34ae:	f047 0740 	orr.w	r7, r7, #64	; 0x40
    34b2:	e7b4      	b.n	341e <_vfiprintf_r+0xfa>
    34b4:	2b6c      	cmp	r3, #108	; 0x6c
    34b6:	d05f      	beq.n	3578 <_vfiprintf_r+0x254>
    34b8:	2b6e      	cmp	r3, #110	; 0x6e
    34ba:	f040 81c0 	bne.w	383e <_vfiprintf_r+0x51a>
    34be:	e096      	b.n	35ee <_vfiprintf_r+0x2ca>
    34c0:	2b73      	cmp	r3, #115	; 0x73
    34c2:	f000 80df 	beq.w	3684 <_vfiprintf_r+0x360>
    34c6:	dc06      	bgt.n	34d6 <_vfiprintf_r+0x1b2>
    34c8:	2b70      	cmp	r3, #112	; 0x70
    34ca:	f000 80cd 	beq.w	3668 <_vfiprintf_r+0x344>
    34ce:	2b71      	cmp	r3, #113	; 0x71
    34d0:	f040 81b5 	bne.w	383e <_vfiprintf_r+0x51a>
    34d4:	e05a      	b.n	358c <_vfiprintf_r+0x268>
    34d6:	2b75      	cmp	r3, #117	; 0x75
    34d8:	f000 80f6 	beq.w	36c8 <_vfiprintf_r+0x3a4>
    34dc:	2b78      	cmp	r3, #120	; 0x78
    34de:	f040 81ae 	bne.w	383e <_vfiprintf_r+0x51a>
    34e2:	4d9b      	ldr	r5, [pc, #620]	; (3750 <_vfiprintf_r+0x42c>)
    34e4:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    34e8:	9505      	str	r5, [sp, #20]
    34ea:	e106      	b.n	36fa <_vfiprintf_r+0x3d6>
    34ec:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    34f0:	e057      	b.n	35a2 <_vfiprintf_r+0x27e>
    34f2:	f047 0701 	orr.w	r7, r7, #1
    34f6:	e792      	b.n	341e <_vfiprintf_r+0xfa>
    34f8:	1d33      	adds	r3, r6, #4
    34fa:	6836      	ldr	r6, [r6, #0]
    34fc:	2e00      	cmp	r6, #0
    34fe:	9604      	str	r6, [sp, #16]
    3500:	da15      	bge.n	352e <_vfiprintf_r+0x20a>
    3502:	4270      	negs	r0, r6
    3504:	9004      	str	r0, [sp, #16]
    3506:	461e      	mov	r6, r3
    3508:	f047 0704 	orr.w	r7, r7, #4
    350c:	e787      	b.n	341e <_vfiprintf_r+0xfa>
    350e:	9901      	ldr	r1, [sp, #4]
    3510:	f811 3b01 	ldrb.w	r3, [r1], #1
    3514:	2b2a      	cmp	r3, #42	; 0x2a
    3516:	9101      	str	r1, [sp, #4]
    3518:	d10b      	bne.n	3532 <_vfiprintf_r+0x20e>
    351a:	f8d6 c000 	ldr.w	ip, [r6]
    351e:	1d33      	adds	r3, r6, #4
    3520:	f1bc 0f00 	cmp.w	ip, #0
    3524:	da03      	bge.n	352e <_vfiprintf_r+0x20a>
    3526:	461e      	mov	r6, r3
    3528:	f04f 3cff 	mov.w	ip, #4294967295
    352c:	e777      	b.n	341e <_vfiprintf_r+0xfa>
    352e:	461e      	mov	r6, r3
    3530:	e775      	b.n	341e <_vfiprintf_r+0xfa>
    3532:	f04f 0c00 	mov.w	ip, #0
    3536:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    353a:	2809      	cmp	r0, #9
    353c:	d807      	bhi.n	354e <_vfiprintf_r+0x22a>
    353e:	9901      	ldr	r1, [sp, #4]
    3540:	230a      	movs	r3, #10
    3542:	fb03 0c0c 	mla	ip, r3, ip, r0
    3546:	f811 3b01 	ldrb.w	r3, [r1], #1
    354a:	9101      	str	r1, [sp, #4]
    354c:	e7f3      	b.n	3536 <_vfiprintf_r+0x212>
    354e:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
    3552:	e768      	b.n	3426 <_vfiprintf_r+0x102>
    3554:	f047 0780 	orr.w	r7, r7, #128	; 0x80
    3558:	e761      	b.n	341e <_vfiprintf_r+0xfa>
    355a:	9801      	ldr	r0, [sp, #4]
    355c:	2100      	movs	r1, #0
    355e:	3b30      	subs	r3, #48	; 0x30
    3560:	240a      	movs	r4, #10
    3562:	fb04 3101 	mla	r1, r4, r1, r3
    3566:	f810 3b01 	ldrb.w	r3, [r0], #1
    356a:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
    356e:	2c09      	cmp	r4, #9
    3570:	9001      	str	r0, [sp, #4]
    3572:	d9f4      	bls.n	355e <_vfiprintf_r+0x23a>
    3574:	9104      	str	r1, [sp, #16]
    3576:	e756      	b.n	3426 <_vfiprintf_r+0x102>
    3578:	9901      	ldr	r1, [sp, #4]
    357a:	780b      	ldrb	r3, [r1, #0]
    357c:	2b6c      	cmp	r3, #108	; 0x6c
    357e:	d102      	bne.n	3586 <_vfiprintf_r+0x262>
    3580:	1c48      	adds	r0, r1, #1
    3582:	9001      	str	r0, [sp, #4]
    3584:	e002      	b.n	358c <_vfiprintf_r+0x268>
    3586:	f047 0710 	orr.w	r7, r7, #16
    358a:	e748      	b.n	341e <_vfiprintf_r+0xfa>
    358c:	f047 0720 	orr.w	r7, r7, #32
    3590:	e745      	b.n	341e <_vfiprintf_r+0xfa>
    3592:	6832      	ldr	r2, [r6, #0]
    3594:	2500      	movs	r5, #0
    3596:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    359a:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
    359e:	3604      	adds	r6, #4
    35a0:	e157      	b.n	3852 <_vfiprintf_r+0x52e>
    35a2:	06ba      	lsls	r2, r7, #26
    35a4:	d507      	bpl.n	35b6 <_vfiprintf_r+0x292>
    35a6:	3607      	adds	r6, #7
    35a8:	f026 0507 	bic.w	r5, r6, #7
    35ac:	f105 0608 	add.w	r6, r5, #8
    35b0:	e9d5 4500 	ldrd	r4, r5, [r5]
    35b4:	e00f      	b.n	35d6 <_vfiprintf_r+0x2b2>
    35b6:	f017 0f10 	tst.w	r7, #16
    35ba:	f106 0104 	add.w	r1, r6, #4
    35be:	d001      	beq.n	35c4 <_vfiprintf_r+0x2a0>
    35c0:	6832      	ldr	r2, [r6, #0]
    35c2:	e005      	b.n	35d0 <_vfiprintf_r+0x2ac>
    35c4:	f017 0f40 	tst.w	r7, #64	; 0x40
    35c8:	6832      	ldr	r2, [r6, #0]
    35ca:	d001      	beq.n	35d0 <_vfiprintf_r+0x2ac>
    35cc:	b214      	sxth	r4, r2
    35ce:	e000      	b.n	35d2 <_vfiprintf_r+0x2ae>
    35d0:	4614      	mov	r4, r2
    35d2:	17e5      	asrs	r5, r4, #31
    35d4:	460e      	mov	r6, r1
    35d6:	2c00      	cmp	r4, #0
    35d8:	f175 0200 	sbcs.w	r2, r5, #0
    35dc:	f280 80ba 	bge.w	3754 <_vfiprintf_r+0x430>
    35e0:	232d      	movs	r3, #45	; 0x2d
    35e2:	4264      	negs	r4, r4
    35e4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    35e8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    35ec:	e0b2      	b.n	3754 <_vfiprintf_r+0x430>
    35ee:	f017 0f20 	tst.w	r7, #32
    35f2:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    35f6:	f106 0204 	add.w	r2, r6, #4
    35fa:	d005      	beq.n	3608 <_vfiprintf_r+0x2e4>
    35fc:	9c03      	ldr	r4, [sp, #12]
    35fe:	6835      	ldr	r5, [r6, #0]
    3600:	17e0      	asrs	r0, r4, #31
    3602:	602c      	str	r4, [r5, #0]
    3604:	6068      	str	r0, [r5, #4]
    3606:	e004      	b.n	3612 <_vfiprintf_r+0x2ee>
    3608:	06fb      	lsls	r3, r7, #27
    360a:	d504      	bpl.n	3616 <_vfiprintf_r+0x2f2>
    360c:	6833      	ldr	r3, [r6, #0]
    360e:	9903      	ldr	r1, [sp, #12]
    3610:	6019      	str	r1, [r3, #0]
    3612:	4616      	mov	r6, r2
    3614:	e6d2      	b.n	33bc <_vfiprintf_r+0x98>
    3616:	6830      	ldr	r0, [r6, #0]
    3618:	9c03      	ldr	r4, [sp, #12]
    361a:	f017 0f40 	tst.w	r7, #64	; 0x40
    361e:	f106 0604 	add.w	r6, r6, #4
    3622:	bf14      	ite	ne
    3624:	8004      	strhne	r4, [r0, #0]
    3626:	6004      	streq	r4, [r0, #0]
    3628:	e6c8      	b.n	33bc <_vfiprintf_r+0x98>
    362a:	f047 0710 	orr.w	r7, r7, #16
    362e:	f017 0020 	ands.w	r0, r7, #32
    3632:	d008      	beq.n	3646 <_vfiprintf_r+0x322>
    3634:	1df3      	adds	r3, r6, #7
    3636:	f023 0507 	bic.w	r5, r3, #7
    363a:	f105 0608 	add.w	r6, r5, #8
    363e:	e9d5 4500 	ldrd	r4, r5, [r5]
    3642:	2000      	movs	r0, #0
    3644:	e07d      	b.n	3742 <_vfiprintf_r+0x41e>
    3646:	f017 0110 	ands.w	r1, r7, #16
    364a:	f106 0204 	add.w	r2, r6, #4
    364e:	d106      	bne.n	365e <_vfiprintf_r+0x33a>
    3650:	f017 0040 	ands.w	r0, r7, #64	; 0x40
    3654:	d003      	beq.n	365e <_vfiprintf_r+0x33a>
    3656:	8834      	ldrh	r4, [r6, #0]
    3658:	2500      	movs	r5, #0
    365a:	4616      	mov	r6, r2
    365c:	e7f1      	b.n	3642 <_vfiprintf_r+0x31e>
    365e:	6836      	ldr	r6, [r6, #0]
    3660:	2500      	movs	r5, #0
    3662:	4634      	mov	r4, r6
    3664:	4616      	mov	r6, r2
    3666:	e06c      	b.n	3742 <_vfiprintf_r+0x41e>
    3668:	4b39      	ldr	r3, [pc, #228]	; (3750 <_vfiprintf_r+0x42c>)
    366a:	6834      	ldr	r4, [r6, #0]
    366c:	9305      	str	r3, [sp, #20]
    366e:	2130      	movs	r1, #48	; 0x30
    3670:	2278      	movs	r2, #120	; 0x78
    3672:	2500      	movs	r5, #0
    3674:	f047 0702 	orr.w	r7, r7, #2
    3678:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    367c:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
    3680:	3604      	adds	r6, #4
    3682:	e05d      	b.n	3740 <_vfiprintf_r+0x41c>
    3684:	4631      	mov	r1, r6
    3686:	2500      	movs	r5, #0
    3688:	f8d1 b000 	ldr.w	fp, [r1]
    368c:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
    3690:	3604      	adds	r6, #4
    3692:	45ac      	cmp	ip, r5
    3694:	4658      	mov	r0, fp
    3696:	db11      	blt.n	36bc <_vfiprintf_r+0x398>
    3698:	4662      	mov	r2, ip
    369a:	4629      	mov	r1, r5
    369c:	f8cd c000 	str.w	ip, [sp]
    36a0:	f001 fa4c 	bl	4b3c <memchr>
    36a4:	f8dd c000 	ldr.w	ip, [sp]
    36a8:	2800      	cmp	r0, #0
    36aa:	f000 80d6 	beq.w	385a <_vfiprintf_r+0x536>
    36ae:	ebcb 0400 	rsb	r4, fp, r0
    36b2:	4564      	cmp	r4, ip
    36b4:	f340 80d3 	ble.w	385e <_vfiprintf_r+0x53a>
    36b8:	4664      	mov	r4, ip
    36ba:	e0d0      	b.n	385e <_vfiprintf_r+0x53a>
    36bc:	f7ff fdf6 	bl	32ac <strlen>
    36c0:	4604      	mov	r4, r0
    36c2:	e0cc      	b.n	385e <_vfiprintf_r+0x53a>
    36c4:	f047 0710 	orr.w	r7, r7, #16
    36c8:	06bd      	lsls	r5, r7, #26
    36ca:	d507      	bpl.n	36dc <_vfiprintf_r+0x3b8>
    36cc:	1df0      	adds	r0, r6, #7
    36ce:	f020 0407 	bic.w	r4, r0, #7
    36d2:	f104 0608 	add.w	r6, r4, #8
    36d6:	e9d4 4500 	ldrd	r4, r5, [r4]
    36da:	e00c      	b.n	36f6 <_vfiprintf_r+0x3d2>
    36dc:	f017 0f10 	tst.w	r7, #16
    36e0:	f106 0304 	add.w	r3, r6, #4
    36e4:	d103      	bne.n	36ee <_vfiprintf_r+0x3ca>
    36e6:	067c      	lsls	r4, r7, #25
    36e8:	d501      	bpl.n	36ee <_vfiprintf_r+0x3ca>
    36ea:	8834      	ldrh	r4, [r6, #0]
    36ec:	e001      	b.n	36f2 <_vfiprintf_r+0x3ce>
    36ee:	6835      	ldr	r5, [r6, #0]
    36f0:	462c      	mov	r4, r5
    36f2:	2500      	movs	r5, #0
    36f4:	461e      	mov	r6, r3
    36f6:	2001      	movs	r0, #1
    36f8:	e023      	b.n	3742 <_vfiprintf_r+0x41e>
    36fa:	06b8      	lsls	r0, r7, #26
    36fc:	d507      	bpl.n	370e <_vfiprintf_r+0x3ea>
    36fe:	1df4      	adds	r4, r6, #7
    3700:	f024 0107 	bic.w	r1, r4, #7
    3704:	f101 0608 	add.w	r6, r1, #8
    3708:	e9d1 4500 	ldrd	r4, r5, [r1]
    370c:	e00c      	b.n	3728 <_vfiprintf_r+0x404>
    370e:	f017 0f10 	tst.w	r7, #16
    3712:	f106 0004 	add.w	r0, r6, #4
    3716:	d103      	bne.n	3720 <_vfiprintf_r+0x3fc>
    3718:	0679      	lsls	r1, r7, #25
    371a:	d501      	bpl.n	3720 <_vfiprintf_r+0x3fc>
    371c:	8834      	ldrh	r4, [r6, #0]
    371e:	e001      	b.n	3724 <_vfiprintf_r+0x400>
    3720:	6836      	ldr	r6, [r6, #0]
    3722:	4634      	mov	r4, r6
    3724:	2500      	movs	r5, #0
    3726:	4606      	mov	r6, r0
    3728:	07fa      	lsls	r2, r7, #31
    372a:	d509      	bpl.n	3740 <_vfiprintf_r+0x41c>
    372c:	ea54 0205 	orrs.w	r2, r4, r5
    3730:	d006      	beq.n	3740 <_vfiprintf_r+0x41c>
    3732:	2230      	movs	r2, #48	; 0x30
    3734:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
    3738:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    373c:	f047 0702 	orr.w	r7, r7, #2
    3740:	2002      	movs	r0, #2
    3742:	2100      	movs	r1, #0
    3744:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    3748:	e005      	b.n	3756 <_vfiprintf_r+0x432>
    374a:	bf00      	nop
    374c:	000059c0 	.word	0x000059c0
    3750:	000059d1 	.word	0x000059d1
    3754:	2001      	movs	r0, #1
    3756:	f1bc 0f00 	cmp.w	ip, #0
    375a:	bfa8      	it	ge
    375c:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
    3760:	ea54 0105 	orrs.w	r1, r4, r5
    3764:	d102      	bne.n	376c <_vfiprintf_r+0x448>
    3766:	f1bc 0f00 	cmp.w	ip, #0
    376a:	d058      	beq.n	381e <_vfiprintf_r+0x4fa>
    376c:	2801      	cmp	r0, #1
    376e:	d01d      	beq.n	37ac <_vfiprintf_r+0x488>
    3770:	2802      	cmp	r0, #2
    3772:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
    3776:	d041      	beq.n	37fc <_vfiprintf_r+0x4d8>
    3778:	f004 0207 	and.w	r2, r4, #7
    377c:	08e4      	lsrs	r4, r4, #3
    377e:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
    3782:	08e9      	lsrs	r1, r5, #3
    3784:	4604      	mov	r4, r0
    3786:	460d      	mov	r5, r1
    3788:	3230      	adds	r2, #48	; 0x30
    378a:	ea54 0105 	orrs.w	r1, r4, r5
    378e:	469b      	mov	fp, r3
    3790:	701a      	strb	r2, [r3, #0]
    3792:	f103 33ff 	add.w	r3, r3, #4294967295
    3796:	d1ef      	bne.n	3778 <_vfiprintf_r+0x454>
    3798:	07f8      	lsls	r0, r7, #31
    379a:	465d      	mov	r5, fp
    379c:	d54a      	bpl.n	3834 <_vfiprintf_r+0x510>
    379e:	2a30      	cmp	r2, #48	; 0x30
    37a0:	d048      	beq.n	3834 <_vfiprintf_r+0x510>
    37a2:	2230      	movs	r2, #48	; 0x30
    37a4:	469b      	mov	fp, r3
    37a6:	f805 2c01 	strb.w	r2, [r5, #-1]
    37aa:	e043      	b.n	3834 <_vfiprintf_r+0x510>
    37ac:	2d00      	cmp	r5, #0
    37ae:	bf08      	it	eq
    37b0:	2c0a      	cmpeq	r4, #10
    37b2:	d203      	bcs.n	37bc <_vfiprintf_r+0x498>
    37b4:	3430      	adds	r4, #48	; 0x30
    37b6:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
    37ba:	e036      	b.n	382a <_vfiprintf_r+0x506>
    37bc:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
    37c0:	9302      	str	r3, [sp, #8]
    37c2:	4620      	mov	r0, r4
    37c4:	4629      	mov	r1, r5
    37c6:	220a      	movs	r2, #10
    37c8:	2300      	movs	r3, #0
    37ca:	f8cd c000 	str.w	ip, [sp]
    37ce:	f001 fd1b 	bl	5208 <__aeabi_uldivmod>
    37d2:	9802      	ldr	r0, [sp, #8]
    37d4:	f8dd b008 	ldr.w	fp, [sp, #8]
    37d8:	3230      	adds	r2, #48	; 0x30
    37da:	f800 2901 	strb.w	r2, [r0], #-1
    37de:	4629      	mov	r1, r5
    37e0:	9002      	str	r0, [sp, #8]
    37e2:	220a      	movs	r2, #10
    37e4:	4620      	mov	r0, r4
    37e6:	2300      	movs	r3, #0
    37e8:	f001 fd0e 	bl	5208 <__aeabi_uldivmod>
    37ec:	4604      	mov	r4, r0
    37ee:	460d      	mov	r5, r1
    37f0:	ea54 0105 	orrs.w	r1, r4, r5
    37f4:	f8dd c000 	ldr.w	ip, [sp]
    37f8:	d1e3      	bne.n	37c2 <_vfiprintf_r+0x49e>
    37fa:	e01b      	b.n	3834 <_vfiprintf_r+0x510>
    37fc:	f004 000f 	and.w	r0, r4, #15
    3800:	9905      	ldr	r1, [sp, #20]
    3802:	0924      	lsrs	r4, r4, #4
    3804:	5c0a      	ldrb	r2, [r1, r0]
    3806:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
    380a:	0929      	lsrs	r1, r5, #4
    380c:	4604      	mov	r4, r0
    380e:	460d      	mov	r5, r1
    3810:	469b      	mov	fp, r3
    3812:	f803 2901 	strb.w	r2, [r3], #-1
    3816:	ea54 0205 	orrs.w	r2, r4, r5
    381a:	d1ef      	bne.n	37fc <_vfiprintf_r+0x4d8>
    381c:	e00a      	b.n	3834 <_vfiprintf_r+0x510>
    381e:	b938      	cbnz	r0, 3830 <_vfiprintf_r+0x50c>
    3820:	07f9      	lsls	r1, r7, #31
    3822:	d505      	bpl.n	3830 <_vfiprintf_r+0x50c>
    3824:	2030      	movs	r0, #48	; 0x30
    3826:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
    382a:	f10d 0b5f 	add.w	fp, sp, #95	; 0x5f
    382e:	e001      	b.n	3834 <_vfiprintf_r+0x510>
    3830:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
    3834:	ad18      	add	r5, sp, #96	; 0x60
    3836:	ebcb 0405 	rsb	r4, fp, r5
    383a:	4665      	mov	r5, ip
    383c:	e00f      	b.n	385e <_vfiprintf_r+0x53a>
    383e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3842:	2b00      	cmp	r3, #0
    3844:	f000 816c 	beq.w	3b20 <_vfiprintf_r+0x7fc>
    3848:	2500      	movs	r5, #0
    384a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    384e:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
    3852:	2401      	movs	r4, #1
    3854:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
    3858:	e001      	b.n	385e <_vfiprintf_r+0x53a>
    385a:	4664      	mov	r4, ip
    385c:	4605      	mov	r5, r0
    385e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3862:	42ac      	cmp	r4, r5
    3864:	bfac      	ite	ge
    3866:	4621      	movge	r1, r4
    3868:	4629      	movlt	r1, r5
    386a:	9102      	str	r1, [sp, #8]
    386c:	b113      	cbz	r3, 3874 <_vfiprintf_r+0x550>
    386e:	9802      	ldr	r0, [sp, #8]
    3870:	1c42      	adds	r2, r0, #1
    3872:	9202      	str	r2, [sp, #8]
    3874:	f017 0102 	ands.w	r1, r7, #2
    3878:	9106      	str	r1, [sp, #24]
    387a:	d002      	beq.n	3882 <_vfiprintf_r+0x55e>
    387c:	9b02      	ldr	r3, [sp, #8]
    387e:	1c98      	adds	r0, r3, #2
    3880:	9002      	str	r0, [sp, #8]
    3882:	f017 0284 	ands.w	r2, r7, #132	; 0x84
    3886:	9207      	str	r2, [sp, #28]
    3888:	d13a      	bne.n	3900 <_vfiprintf_r+0x5dc>
    388a:	9904      	ldr	r1, [sp, #16]
    388c:	9b02      	ldr	r3, [sp, #8]
    388e:	1acb      	subs	r3, r1, r3
    3890:	2b00      	cmp	r3, #0
    3892:	dd35      	ble.n	3900 <_vfiprintf_r+0x5dc>
    3894:	48a0      	ldr	r0, [pc, #640]	; (3b18 <_vfiprintf_r+0x7f4>)
    3896:	2b10      	cmp	r3, #16
    3898:	f8c8 0000 	str.w	r0, [r8]
    389c:	dd1a      	ble.n	38d4 <_vfiprintf_r+0x5b0>
    389e:	990c      	ldr	r1, [sp, #48]	; 0x30
    38a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    38a2:	2010      	movs	r0, #16
    38a4:	f8c8 0004 	str.w	r0, [r8, #4]
    38a8:	1c48      	adds	r0, r1, #1
    38aa:	3210      	adds	r2, #16
    38ac:	2807      	cmp	r0, #7
    38ae:	920d      	str	r2, [sp, #52]	; 0x34
    38b0:	f108 0808 	add.w	r8, r8, #8
    38b4:	900c      	str	r0, [sp, #48]	; 0x30
    38b6:	dd0b      	ble.n	38d0 <_vfiprintf_r+0x5ac>
    38b8:	4650      	mov	r0, sl
    38ba:	4649      	mov	r1, r9
    38bc:	aa0b      	add	r2, sp, #44	; 0x2c
    38be:	9300      	str	r3, [sp, #0]
    38c0:	f7ff fcfc 	bl	32bc <__sprint_r>
    38c4:	9b00      	ldr	r3, [sp, #0]
    38c6:	2800      	cmp	r0, #0
    38c8:	f040 8131 	bne.w	3b2e <_vfiprintf_r+0x80a>
    38cc:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    38d0:	3b10      	subs	r3, #16
    38d2:	e7df      	b.n	3894 <_vfiprintf_r+0x570>
    38d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    38d6:	f8c8 3004 	str.w	r3, [r8, #4]
    38da:	18d1      	adds	r1, r2, r3
    38dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    38de:	910d      	str	r1, [sp, #52]	; 0x34
    38e0:	1c58      	adds	r0, r3, #1
    38e2:	2807      	cmp	r0, #7
    38e4:	f108 0808 	add.w	r8, r8, #8
    38e8:	900c      	str	r0, [sp, #48]	; 0x30
    38ea:	dd09      	ble.n	3900 <_vfiprintf_r+0x5dc>
    38ec:	4650      	mov	r0, sl
    38ee:	4649      	mov	r1, r9
    38f0:	aa0b      	add	r2, sp, #44	; 0x2c
    38f2:	f7ff fce3 	bl	32bc <__sprint_r>
    38f6:	2800      	cmp	r0, #0
    38f8:	f040 8119 	bne.w	3b2e <_vfiprintf_r+0x80a>
    38fc:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    3900:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    3904:	b1d2      	cbz	r2, 393c <_vfiprintf_r+0x618>
    3906:	f10d 0127 	add.w	r1, sp, #39	; 0x27
    390a:	f8c8 1000 	str.w	r1, [r8]
    390e:	990c      	ldr	r1, [sp, #48]	; 0x30
    3910:	980d      	ldr	r0, [sp, #52]	; 0x34
    3912:	2301      	movs	r3, #1
    3914:	f8c8 3004 	str.w	r3, [r8, #4]
    3918:	1c4b      	adds	r3, r1, #1
    391a:	1c42      	adds	r2, r0, #1
    391c:	2b07      	cmp	r3, #7
    391e:	920d      	str	r2, [sp, #52]	; 0x34
    3920:	f108 0808 	add.w	r8, r8, #8
    3924:	930c      	str	r3, [sp, #48]	; 0x30
    3926:	dd09      	ble.n	393c <_vfiprintf_r+0x618>
    3928:	4650      	mov	r0, sl
    392a:	4649      	mov	r1, r9
    392c:	aa0b      	add	r2, sp, #44	; 0x2c
    392e:	f7ff fcc5 	bl	32bc <__sprint_r>
    3932:	2800      	cmp	r0, #0
    3934:	f040 80fb 	bne.w	3b2e <_vfiprintf_r+0x80a>
    3938:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    393c:	9806      	ldr	r0, [sp, #24]
    393e:	b1c8      	cbz	r0, 3974 <_vfiprintf_r+0x650>
    3940:	aa0a      	add	r2, sp, #40	; 0x28
    3942:	f8c8 2000 	str.w	r2, [r8]
    3946:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3948:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    394a:	2102      	movs	r1, #2
    394c:	f8c8 1004 	str.w	r1, [r8, #4]
    3950:	1c51      	adds	r1, r2, #1
    3952:	1c98      	adds	r0, r3, #2
    3954:	2907      	cmp	r1, #7
    3956:	900d      	str	r0, [sp, #52]	; 0x34
    3958:	f108 0808 	add.w	r8, r8, #8
    395c:	910c      	str	r1, [sp, #48]	; 0x30
    395e:	dd09      	ble.n	3974 <_vfiprintf_r+0x650>
    3960:	4650      	mov	r0, sl
    3962:	4649      	mov	r1, r9
    3964:	aa0b      	add	r2, sp, #44	; 0x2c
    3966:	f7ff fca9 	bl	32bc <__sprint_r>
    396a:	2800      	cmp	r0, #0
    396c:	f040 80df 	bne.w	3b2e <_vfiprintf_r+0x80a>
    3970:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    3974:	9b07      	ldr	r3, [sp, #28]
    3976:	2b80      	cmp	r3, #128	; 0x80
    3978:	d13a      	bne.n	39f0 <_vfiprintf_r+0x6cc>
    397a:	9804      	ldr	r0, [sp, #16]
    397c:	9a02      	ldr	r2, [sp, #8]
    397e:	1a83      	subs	r3, r0, r2
    3980:	2b00      	cmp	r3, #0
    3982:	dd35      	ble.n	39f0 <_vfiprintf_r+0x6cc>
    3984:	4965      	ldr	r1, [pc, #404]	; (3b1c <_vfiprintf_r+0x7f8>)
    3986:	2b10      	cmp	r3, #16
    3988:	f8c8 1000 	str.w	r1, [r8]
    398c:	dd1a      	ble.n	39c4 <_vfiprintf_r+0x6a0>
    398e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3990:	980d      	ldr	r0, [sp, #52]	; 0x34
    3992:	2110      	movs	r1, #16
    3994:	f8c8 1004 	str.w	r1, [r8, #4]
    3998:	1c51      	adds	r1, r2, #1
    399a:	3010      	adds	r0, #16
    399c:	2907      	cmp	r1, #7
    399e:	900d      	str	r0, [sp, #52]	; 0x34
    39a0:	f108 0808 	add.w	r8, r8, #8
    39a4:	910c      	str	r1, [sp, #48]	; 0x30
    39a6:	dd0b      	ble.n	39c0 <_vfiprintf_r+0x69c>
    39a8:	4650      	mov	r0, sl
    39aa:	4649      	mov	r1, r9
    39ac:	aa0b      	add	r2, sp, #44	; 0x2c
    39ae:	9300      	str	r3, [sp, #0]
    39b0:	f7ff fc84 	bl	32bc <__sprint_r>
    39b4:	9b00      	ldr	r3, [sp, #0]
    39b6:	2800      	cmp	r0, #0
    39b8:	f040 80b9 	bne.w	3b2e <_vfiprintf_r+0x80a>
    39bc:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    39c0:	3b10      	subs	r3, #16
    39c2:	e7df      	b.n	3984 <_vfiprintf_r+0x660>
    39c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    39c6:	980d      	ldr	r0, [sp, #52]	; 0x34
    39c8:	f8c8 3004 	str.w	r3, [r8, #4]
    39cc:	1c51      	adds	r1, r2, #1
    39ce:	18c3      	adds	r3, r0, r3
    39d0:	2907      	cmp	r1, #7
    39d2:	930d      	str	r3, [sp, #52]	; 0x34
    39d4:	f108 0808 	add.w	r8, r8, #8
    39d8:	910c      	str	r1, [sp, #48]	; 0x30
    39da:	dd09      	ble.n	39f0 <_vfiprintf_r+0x6cc>
    39dc:	4650      	mov	r0, sl
    39de:	4649      	mov	r1, r9
    39e0:	aa0b      	add	r2, sp, #44	; 0x2c
    39e2:	f7ff fc6b 	bl	32bc <__sprint_r>
    39e6:	2800      	cmp	r0, #0
    39e8:	f040 80a1 	bne.w	3b2e <_vfiprintf_r+0x80a>
    39ec:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    39f0:	1b2d      	subs	r5, r5, r4
    39f2:	2d00      	cmp	r5, #0
    39f4:	dd32      	ble.n	3a5c <_vfiprintf_r+0x738>
    39f6:	4849      	ldr	r0, [pc, #292]	; (3b1c <_vfiprintf_r+0x7f8>)
    39f8:	2d10      	cmp	r5, #16
    39fa:	f8c8 0000 	str.w	r0, [r8]
    39fe:	dd18      	ble.n	3a32 <_vfiprintf_r+0x70e>
    3a00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3a02:	980d      	ldr	r0, [sp, #52]	; 0x34
    3a04:	1c53      	adds	r3, r2, #1
    3a06:	2110      	movs	r1, #16
    3a08:	3010      	adds	r0, #16
    3a0a:	2b07      	cmp	r3, #7
    3a0c:	f8c8 1004 	str.w	r1, [r8, #4]
    3a10:	900d      	str	r0, [sp, #52]	; 0x34
    3a12:	f108 0808 	add.w	r8, r8, #8
    3a16:	930c      	str	r3, [sp, #48]	; 0x30
    3a18:	dd09      	ble.n	3a2e <_vfiprintf_r+0x70a>
    3a1a:	4650      	mov	r0, sl
    3a1c:	4649      	mov	r1, r9
    3a1e:	aa0b      	add	r2, sp, #44	; 0x2c
    3a20:	f7ff fc4c 	bl	32bc <__sprint_r>
    3a24:	2800      	cmp	r0, #0
    3a26:	f040 8082 	bne.w	3b2e <_vfiprintf_r+0x80a>
    3a2a:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    3a2e:	3d10      	subs	r5, #16
    3a30:	e7e1      	b.n	39f6 <_vfiprintf_r+0x6d2>
    3a32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3a34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3a36:	f8c8 5004 	str.w	r5, [r8, #4]
    3a3a:	1c51      	adds	r1, r2, #1
    3a3c:	195d      	adds	r5, r3, r5
    3a3e:	2907      	cmp	r1, #7
    3a40:	950d      	str	r5, [sp, #52]	; 0x34
    3a42:	f108 0808 	add.w	r8, r8, #8
    3a46:	910c      	str	r1, [sp, #48]	; 0x30
    3a48:	dd08      	ble.n	3a5c <_vfiprintf_r+0x738>
    3a4a:	4650      	mov	r0, sl
    3a4c:	4649      	mov	r1, r9
    3a4e:	aa0b      	add	r2, sp, #44	; 0x2c
    3a50:	f7ff fc34 	bl	32bc <__sprint_r>
    3a54:	2800      	cmp	r0, #0
    3a56:	d16a      	bne.n	3b2e <_vfiprintf_r+0x80a>
    3a58:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    3a5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3a5e:	980d      	ldr	r0, [sp, #52]	; 0x34
    3a60:	f8c8 4004 	str.w	r4, [r8, #4]
    3a64:	1c51      	adds	r1, r2, #1
    3a66:	1904      	adds	r4, r0, r4
    3a68:	2907      	cmp	r1, #7
    3a6a:	f8c8 b000 	str.w	fp, [r8]
    3a6e:	940d      	str	r4, [sp, #52]	; 0x34
    3a70:	f108 0308 	add.w	r3, r8, #8
    3a74:	910c      	str	r1, [sp, #48]	; 0x30
    3a76:	dd07      	ble.n	3a88 <_vfiprintf_r+0x764>
    3a78:	4650      	mov	r0, sl
    3a7a:	4649      	mov	r1, r9
    3a7c:	aa0b      	add	r2, sp, #44	; 0x2c
    3a7e:	f7ff fc1d 	bl	32bc <__sprint_r>
    3a82:	2800      	cmp	r0, #0
    3a84:	d153      	bne.n	3b2e <_vfiprintf_r+0x80a>
    3a86:	ab18      	add	r3, sp, #96	; 0x60
    3a88:	077a      	lsls	r2, r7, #29
    3a8a:	d40b      	bmi.n	3aa4 <_vfiprintf_r+0x780>
    3a8c:	9b03      	ldr	r3, [sp, #12]
    3a8e:	9a02      	ldr	r2, [sp, #8]
    3a90:	9904      	ldr	r1, [sp, #16]
    3a92:	980d      	ldr	r0, [sp, #52]	; 0x34
    3a94:	428a      	cmp	r2, r1
    3a96:	bfac      	ite	ge
    3a98:	189b      	addge	r3, r3, r2
    3a9a:	185b      	addlt	r3, r3, r1
    3a9c:	9303      	str	r3, [sp, #12]
    3a9e:	2800      	cmp	r0, #0
    3aa0:	d035      	beq.n	3b0e <_vfiprintf_r+0x7ea>
    3aa2:	e02e      	b.n	3b02 <_vfiprintf_r+0x7de>
    3aa4:	9c04      	ldr	r4, [sp, #16]
    3aa6:	9802      	ldr	r0, [sp, #8]
    3aa8:	1a24      	subs	r4, r4, r0
    3aaa:	2c00      	cmp	r4, #0
    3aac:	ddee      	ble.n	3a8c <_vfiprintf_r+0x768>
    3aae:	4a1a      	ldr	r2, [pc, #104]	; (3b18 <_vfiprintf_r+0x7f4>)
    3ab0:	2c10      	cmp	r4, #16
    3ab2:	601a      	str	r2, [r3, #0]
    3ab4:	dd14      	ble.n	3ae0 <_vfiprintf_r+0x7bc>
    3ab6:	980c      	ldr	r0, [sp, #48]	; 0x30
    3ab8:	990d      	ldr	r1, [sp, #52]	; 0x34
    3aba:	2210      	movs	r2, #16
    3abc:	605a      	str	r2, [r3, #4]
    3abe:	1c42      	adds	r2, r0, #1
    3ac0:	3110      	adds	r1, #16
    3ac2:	3308      	adds	r3, #8
    3ac4:	2a07      	cmp	r2, #7
    3ac6:	910d      	str	r1, [sp, #52]	; 0x34
    3ac8:	920c      	str	r2, [sp, #48]	; 0x30
    3aca:	dd07      	ble.n	3adc <_vfiprintf_r+0x7b8>
    3acc:	4650      	mov	r0, sl
    3ace:	4649      	mov	r1, r9
    3ad0:	aa0b      	add	r2, sp, #44	; 0x2c
    3ad2:	f7ff fbf3 	bl	32bc <__sprint_r>
    3ad6:	2800      	cmp	r0, #0
    3ad8:	d129      	bne.n	3b2e <_vfiprintf_r+0x80a>
    3ada:	ab18      	add	r3, sp, #96	; 0x60
    3adc:	3c10      	subs	r4, #16
    3ade:	e7e6      	b.n	3aae <_vfiprintf_r+0x78a>
    3ae0:	990c      	ldr	r1, [sp, #48]	; 0x30
    3ae2:	605c      	str	r4, [r3, #4]
    3ae4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3ae6:	1c48      	adds	r0, r1, #1
    3ae8:	191c      	adds	r4, r3, r4
    3aea:	2807      	cmp	r0, #7
    3aec:	940d      	str	r4, [sp, #52]	; 0x34
    3aee:	900c      	str	r0, [sp, #48]	; 0x30
    3af0:	ddcc      	ble.n	3a8c <_vfiprintf_r+0x768>
    3af2:	4650      	mov	r0, sl
    3af4:	4649      	mov	r1, r9
    3af6:	aa0b      	add	r2, sp, #44	; 0x2c
    3af8:	f7ff fbe0 	bl	32bc <__sprint_r>
    3afc:	2800      	cmp	r0, #0
    3afe:	d0c5      	beq.n	3a8c <_vfiprintf_r+0x768>
    3b00:	e015      	b.n	3b2e <_vfiprintf_r+0x80a>
    3b02:	4650      	mov	r0, sl
    3b04:	4649      	mov	r1, r9
    3b06:	aa0b      	add	r2, sp, #44	; 0x2c
    3b08:	f7ff fbd8 	bl	32bc <__sprint_r>
    3b0c:	b978      	cbnz	r0, 3b2e <_vfiprintf_r+0x80a>
    3b0e:	2500      	movs	r5, #0
    3b10:	950c      	str	r5, [sp, #48]	; 0x30
    3b12:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    3b16:	e451      	b.n	33bc <_vfiprintf_r+0x98>
    3b18:	000059a0 	.word	0x000059a0
    3b1c:	000059b0 	.word	0x000059b0
    3b20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3b22:	b122      	cbz	r2, 3b2e <_vfiprintf_r+0x80a>
    3b24:	4650      	mov	r0, sl
    3b26:	4649      	mov	r1, r9
    3b28:	aa0b      	add	r2, sp, #44	; 0x2c
    3b2a:	f7ff fbc7 	bl	32bc <__sprint_r>
    3b2e:	f8b9 100c 	ldrh.w	r1, [r9, #12]
    3b32:	f001 0040 	and.w	r0, r1, #64	; 0x40
    3b36:	b203      	sxth	r3, r0
    3b38:	2b00      	cmp	r3, #0
    3b3a:	f47f ac26 	bne.w	338a <_vfiprintf_r+0x66>
    3b3e:	9803      	ldr	r0, [sp, #12]
    3b40:	b029      	add	sp, #164	; 0xa4
    3b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003b46 <__sbprintf>:
    3b46:	b570      	push	{r4, r5, r6, lr}
    3b48:	460c      	mov	r4, r1
    3b4a:	8989      	ldrh	r1, [r1, #12]
    3b4c:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
    3b50:	f021 0502 	bic.w	r5, r1, #2
    3b54:	6e61      	ldr	r1, [r4, #100]	; 0x64
    3b56:	f8ad 500c 	strh.w	r5, [sp, #12]
    3b5a:	9119      	str	r1, [sp, #100]	; 0x64
    3b5c:	89e5      	ldrh	r5, [r4, #14]
    3b5e:	69e1      	ldr	r1, [r4, #28]
    3b60:	f8ad 500e 	strh.w	r5, [sp, #14]
    3b64:	9107      	str	r1, [sp, #28]
    3b66:	6a65      	ldr	r5, [r4, #36]	; 0x24
    3b68:	a91a      	add	r1, sp, #104	; 0x68
    3b6a:	9100      	str	r1, [sp, #0]
    3b6c:	9104      	str	r1, [sp, #16]
    3b6e:	2100      	movs	r1, #0
    3b70:	9509      	str	r5, [sp, #36]	; 0x24
    3b72:	9106      	str	r1, [sp, #24]
    3b74:	f44f 6580 	mov.w	r5, #1024	; 0x400
    3b78:	4669      	mov	r1, sp
    3b7a:	9502      	str	r5, [sp, #8]
    3b7c:	9505      	str	r5, [sp, #20]
    3b7e:	4606      	mov	r6, r0
    3b80:	f7ff fbd0 	bl	3324 <_vfiprintf_r>
    3b84:	1e05      	subs	r5, r0, #0
    3b86:	db07      	blt.n	3b98 <__sbprintf+0x52>
    3b88:	4630      	mov	r0, r6
    3b8a:	4669      	mov	r1, sp
    3b8c:	f000 f88e 	bl	3cac <_fflush_r>
    3b90:	2800      	cmp	r0, #0
    3b92:	bf18      	it	ne
    3b94:	f04f 35ff 	movne.w	r5, #4294967295
    3b98:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    3b9c:	f003 0040 	and.w	r0, r3, #64	; 0x40
    3ba0:	b202      	sxth	r2, r0
    3ba2:	b11a      	cbz	r2, 3bac <__sbprintf+0x66>
    3ba4:	89a1      	ldrh	r1, [r4, #12]
    3ba6:	f041 0340 	orr.w	r3, r1, #64	; 0x40
    3baa:	81a3      	strh	r3, [r4, #12]
    3bac:	4628      	mov	r0, r5
    3bae:	b01a      	add	sp, #104	; 0x68
    3bb0:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
    3bb4:	bd70      	pop	{r4, r5, r6, pc}

00003bb6 <vfiprintf>:
    3bb6:	b530      	push	{r4, r5, lr}
    3bb8:	4613      	mov	r3, r2
    3bba:	4a05      	ldr	r2, [pc, #20]	; (3bd0 <vfiprintf+0x1a>)
    3bbc:	4605      	mov	r5, r0
    3bbe:	460c      	mov	r4, r1
    3bc0:	6810      	ldr	r0, [r2, #0]
    3bc2:	4629      	mov	r1, r5
    3bc4:	4622      	mov	r2, r4
    3bc6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    3bca:	f7ff bbab 	b.w	3324 <_vfiprintf_r>
    3bce:	bf00      	nop
    3bd0:	20000050 	.word	0x20000050

00003bd4 <__swsetup_r>:
    3bd4:	b538      	push	{r3, r4, r5, lr}
    3bd6:	4b2c      	ldr	r3, [pc, #176]	; (3c88 <__swsetup_r+0xb4>)
    3bd8:	4605      	mov	r5, r0
    3bda:	6818      	ldr	r0, [r3, #0]
    3bdc:	460c      	mov	r4, r1
    3bde:	b118      	cbz	r0, 3be8 <__swsetup_r+0x14>
    3be0:	6b82      	ldr	r2, [r0, #56]	; 0x38
    3be2:	b90a      	cbnz	r2, 3be8 <__swsetup_r+0x14>
    3be4:	f000 f956 	bl	3e94 <__sinit>
    3be8:	89a0      	ldrh	r0, [r4, #12]
    3bea:	f000 0108 	and.w	r1, r0, #8
    3bee:	b20b      	sxth	r3, r1
    3bf0:	bb0b      	cbnz	r3, 3c36 <__swsetup_r+0x62>
    3bf2:	f000 0210 	and.w	r2, r0, #16
    3bf6:	b211      	sxth	r1, r2
    3bf8:	b911      	cbnz	r1, 3c00 <__swsetup_r+0x2c>
    3bfa:	f04f 30ff 	mov.w	r0, #4294967295
    3bfe:	bd38      	pop	{r3, r4, r5, pc}
    3c00:	f000 0004 	and.w	r0, r0, #4
    3c04:	b203      	sxth	r3, r0
    3c06:	b193      	cbz	r3, 3c2e <__swsetup_r+0x5a>
    3c08:	6b21      	ldr	r1, [r4, #48]	; 0x30
    3c0a:	b141      	cbz	r1, 3c1e <__swsetup_r+0x4a>
    3c0c:	f104 0240 	add.w	r2, r4, #64	; 0x40
    3c10:	4291      	cmp	r1, r2
    3c12:	d002      	beq.n	3c1a <__swsetup_r+0x46>
    3c14:	4628      	mov	r0, r5
    3c16:	f000 fa7b 	bl	4110 <_free_r>
    3c1a:	2100      	movs	r1, #0
    3c1c:	6321      	str	r1, [r4, #48]	; 0x30
    3c1e:	89a0      	ldrh	r0, [r4, #12]
    3c20:	6921      	ldr	r1, [r4, #16]
    3c22:	f020 0324 	bic.w	r3, r0, #36	; 0x24
    3c26:	2200      	movs	r2, #0
    3c28:	81a3      	strh	r3, [r4, #12]
    3c2a:	6062      	str	r2, [r4, #4]
    3c2c:	6021      	str	r1, [r4, #0]
    3c2e:	89a0      	ldrh	r0, [r4, #12]
    3c30:	f040 0308 	orr.w	r3, r0, #8
    3c34:	81a3      	strh	r3, [r4, #12]
    3c36:	6922      	ldr	r2, [r4, #16]
    3c38:	b94a      	cbnz	r2, 3c4e <__swsetup_r+0x7a>
    3c3a:	89a1      	ldrh	r1, [r4, #12]
    3c3c:	f401 7020 	and.w	r0, r1, #640	; 0x280
    3c40:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    3c44:	d003      	beq.n	3c4e <__swsetup_r+0x7a>
    3c46:	4628      	mov	r0, r5
    3c48:	4621      	mov	r1, r4
    3c4a:	f000 fcf9 	bl	4640 <__smakebuf_r>
    3c4e:	89a3      	ldrh	r3, [r4, #12]
    3c50:	f013 0201 	ands.w	r2, r3, #1
    3c54:	d005      	beq.n	3c62 <__swsetup_r+0x8e>
    3c56:	6961      	ldr	r1, [r4, #20]
    3c58:	2200      	movs	r2, #0
    3c5a:	4248      	negs	r0, r1
    3c5c:	60a2      	str	r2, [r4, #8]
    3c5e:	61a0      	str	r0, [r4, #24]
    3c60:	e007      	b.n	3c72 <__swsetup_r+0x9e>
    3c62:	f003 0102 	and.w	r1, r3, #2
    3c66:	b208      	sxth	r0, r1
    3c68:	b908      	cbnz	r0, 3c6e <__swsetup_r+0x9a>
    3c6a:	6963      	ldr	r3, [r4, #20]
    3c6c:	e000      	b.n	3c70 <__swsetup_r+0x9c>
    3c6e:	4613      	mov	r3, r2
    3c70:	60a3      	str	r3, [r4, #8]
    3c72:	6923      	ldr	r3, [r4, #16]
    3c74:	b933      	cbnz	r3, 3c84 <__swsetup_r+0xb0>
    3c76:	89a2      	ldrh	r2, [r4, #12]
    3c78:	f002 0180 	and.w	r1, r2, #128	; 0x80
    3c7c:	b208      	sxth	r0, r1
    3c7e:	2800      	cmp	r0, #0
    3c80:	d1bb      	bne.n	3bfa <__swsetup_r+0x26>
    3c82:	bd38      	pop	{r3, r4, r5, pc}
    3c84:	2000      	movs	r0, #0
    3c86:	bd38      	pop	{r3, r4, r5, pc}
    3c88:	20000050 	.word	0x20000050

00003c8c <register_fini>:
    3c8c:	4b02      	ldr	r3, [pc, #8]	; (3c98 <register_fini+0xc>)
    3c8e:	b113      	cbz	r3, 3c96 <register_fini+0xa>
    3c90:	4802      	ldr	r0, [pc, #8]	; (3c9c <register_fini+0x10>)
    3c92:	f000 b805 	b.w	3ca0 <atexit>
    3c96:	4770      	bx	lr
    3c98:	00000000 	.word	0x00000000
    3c9c:	00003075 	.word	0x00003075

00003ca0 <atexit>:
    3ca0:	4601      	mov	r1, r0
    3ca2:	2000      	movs	r0, #0
    3ca4:	4602      	mov	r2, r0
    3ca6:	4603      	mov	r3, r0
    3ca8:	f7ff b996 	b.w	2fd8 <__register_exitproc>

00003cac <_fflush_r>:
    3cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3cb0:	460c      	mov	r4, r1
    3cb2:	4605      	mov	r5, r0
    3cb4:	b118      	cbz	r0, 3cbe <_fflush_r+0x12>
    3cb6:	6b83      	ldr	r3, [r0, #56]	; 0x38
    3cb8:	b90b      	cbnz	r3, 3cbe <_fflush_r+0x12>
    3cba:	f000 f8eb 	bl	3e94 <__sinit>
    3cbe:	89a2      	ldrh	r2, [r4, #12]
    3cc0:	b332      	cbz	r2, 3d10 <_fflush_r+0x64>
    3cc2:	f002 0008 	and.w	r0, r2, #8
    3cc6:	b201      	sxth	r1, r0
    3cc8:	2900      	cmp	r1, #0
    3cca:	d162      	bne.n	3d92 <_fflush_r+0xe6>
    3ccc:	6861      	ldr	r1, [r4, #4]
    3cce:	f442 6000 	orr.w	r0, r2, #2048	; 0x800
    3cd2:	2900      	cmp	r1, #0
    3cd4:	81a0      	strh	r0, [r4, #12]
    3cd6:	dc02      	bgt.n	3cde <_fflush_r+0x32>
    3cd8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3cda:	2b00      	cmp	r3, #0
    3cdc:	dd18      	ble.n	3d10 <_fflush_r+0x64>
    3cde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3ce0:	b1b6      	cbz	r6, 3d10 <_fflush_r+0x64>
    3ce2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    3ce6:	2000      	movs	r0, #0
    3ce8:	b212      	sxth	r2, r2
    3cea:	682f      	ldr	r7, [r5, #0]
    3cec:	6028      	str	r0, [r5, #0]
    3cee:	b10a      	cbz	r2, 3cf4 <_fflush_r+0x48>
    3cf0:	6d22      	ldr	r2, [r4, #80]	; 0x50
    3cf2:	e010      	b.n	3d16 <_fflush_r+0x6a>
    3cf4:	2301      	movs	r3, #1
    3cf6:	4628      	mov	r0, r5
    3cf8:	69e1      	ldr	r1, [r4, #28]
    3cfa:	47b0      	blx	r6
    3cfc:	4602      	mov	r2, r0
    3cfe:	3001      	adds	r0, #1
    3d00:	d109      	bne.n	3d16 <_fflush_r+0x6a>
    3d02:	6829      	ldr	r1, [r5, #0]
    3d04:	b139      	cbz	r1, 3d16 <_fflush_r+0x6a>
    3d06:	291d      	cmp	r1, #29
    3d08:	d001      	beq.n	3d0e <_fflush_r+0x62>
    3d0a:	2916      	cmp	r1, #22
    3d0c:	d14f      	bne.n	3dae <_fflush_r+0x102>
    3d0e:	602f      	str	r7, [r5, #0]
    3d10:	2000      	movs	r0, #0
    3d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3d16:	89a6      	ldrh	r6, [r4, #12]
    3d18:	f006 0104 	and.w	r1, r6, #4
    3d1c:	b20b      	sxth	r3, r1
    3d1e:	b12b      	cbz	r3, 3d2c <_fflush_r+0x80>
    3d20:	6860      	ldr	r0, [r4, #4]
    3d22:	6b26      	ldr	r6, [r4, #48]	; 0x30
    3d24:	1a12      	subs	r2, r2, r0
    3d26:	b10e      	cbz	r6, 3d2c <_fflush_r+0x80>
    3d28:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    3d2a:	1a52      	subs	r2, r2, r1
    3d2c:	69e1      	ldr	r1, [r4, #28]
    3d2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3d30:	2300      	movs	r3, #0
    3d32:	4628      	mov	r0, r5
    3d34:	47b0      	blx	r6
    3d36:	1c41      	adds	r1, r0, #1
    3d38:	d105      	bne.n	3d46 <_fflush_r+0x9a>
    3d3a:	682a      	ldr	r2, [r5, #0]
    3d3c:	b11a      	cbz	r2, 3d46 <_fflush_r+0x9a>
    3d3e:	2a1d      	cmp	r2, #29
    3d40:	d001      	beq.n	3d46 <_fflush_r+0x9a>
    3d42:	2a16      	cmp	r2, #22
    3d44:	d11f      	bne.n	3d86 <_fflush_r+0xda>
    3d46:	89a3      	ldrh	r3, [r4, #12]
    3d48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
    3d4c:	2100      	movs	r1, #0
    3d4e:	81a2      	strh	r2, [r4, #12]
    3d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    3d54:	6922      	ldr	r2, [r4, #16]
    3d56:	6061      	str	r1, [r4, #4]
    3d58:	b219      	sxth	r1, r3
    3d5a:	6022      	str	r2, [r4, #0]
    3d5c:	b121      	cbz	r1, 3d68 <_fflush_r+0xbc>
    3d5e:	1c42      	adds	r2, r0, #1
    3d60:	d101      	bne.n	3d66 <_fflush_r+0xba>
    3d62:	682a      	ldr	r2, [r5, #0]
    3d64:	b902      	cbnz	r2, 3d68 <_fflush_r+0xbc>
    3d66:	6520      	str	r0, [r4, #80]	; 0x50
    3d68:	6b21      	ldr	r1, [r4, #48]	; 0x30
    3d6a:	602f      	str	r7, [r5, #0]
    3d6c:	2900      	cmp	r1, #0
    3d6e:	d0cf      	beq.n	3d10 <_fflush_r+0x64>
    3d70:	f104 0040 	add.w	r0, r4, #64	; 0x40
    3d74:	4281      	cmp	r1, r0
    3d76:	d002      	beq.n	3d7e <_fflush_r+0xd2>
    3d78:	4628      	mov	r0, r5
    3d7a:	f000 f9c9 	bl	4110 <_free_r>
    3d7e:	2000      	movs	r0, #0
    3d80:	6320      	str	r0, [r4, #48]	; 0x30
    3d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3d86:	89a3      	ldrh	r3, [r4, #12]
    3d88:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    3d8c:	81a1      	strh	r1, [r4, #12]
    3d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3d92:	6926      	ldr	r6, [r4, #16]
    3d94:	2e00      	cmp	r6, #0
    3d96:	d0bb      	beq.n	3d10 <_fflush_r+0x64>
    3d98:	0792      	lsls	r2, r2, #30
    3d9a:	6823      	ldr	r3, [r4, #0]
    3d9c:	bf08      	it	eq
    3d9e:	6962      	ldreq	r2, [r4, #20]
    3da0:	6026      	str	r6, [r4, #0]
    3da2:	bf18      	it	ne
    3da4:	2200      	movne	r2, #0
    3da6:	ebc6 0803 	rsb	r8, r6, r3
    3daa:	60a2      	str	r2, [r4, #8]
    3dac:	e012      	b.n	3dd4 <_fflush_r+0x128>
    3dae:	89a3      	ldrh	r3, [r4, #12]
    3db0:	f043 0040 	orr.w	r0, r3, #64	; 0x40
    3db4:	81a0      	strh	r0, [r4, #12]
    3db6:	f04f 30ff 	mov.w	r0, #4294967295
    3dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3dbe:	6a67      	ldr	r7, [r4, #36]	; 0x24
    3dc0:	69e1      	ldr	r1, [r4, #28]
    3dc2:	4628      	mov	r0, r5
    3dc4:	4632      	mov	r2, r6
    3dc6:	4643      	mov	r3, r8
    3dc8:	47b8      	blx	r7
    3dca:	2800      	cmp	r0, #0
    3dcc:	ddef      	ble.n	3dae <_fflush_r+0x102>
    3dce:	1836      	adds	r6, r6, r0
    3dd0:	ebc0 0808 	rsb	r8, r0, r8
    3dd4:	f1b8 0f00 	cmp.w	r8, #0
    3dd8:	dcf1      	bgt.n	3dbe <_fflush_r+0x112>
    3dda:	e799      	b.n	3d10 <_fflush_r+0x64>

00003ddc <fflush>:
    3ddc:	4601      	mov	r1, r0
    3dde:	b920      	cbnz	r0, 3dea <fflush+0xe>
    3de0:	4804      	ldr	r0, [pc, #16]	; (3df4 <fflush+0x18>)
    3de2:	4905      	ldr	r1, [pc, #20]	; (3df8 <fflush+0x1c>)
    3de4:	6800      	ldr	r0, [r0, #0]
    3de6:	f000 bbc5 	b.w	4574 <_fwalk_reent>
    3dea:	4b04      	ldr	r3, [pc, #16]	; (3dfc <fflush+0x20>)
    3dec:	6818      	ldr	r0, [r3, #0]
    3dee:	f7ff bf5d 	b.w	3cac <_fflush_r>
    3df2:	bf00      	nop
    3df4:	00005998 	.word	0x00005998
    3df8:	00003cad 	.word	0x00003cad
    3dfc:	20000050 	.word	0x20000050

00003e00 <__fp_lock>:
    3e00:	2000      	movs	r0, #0
    3e02:	4770      	bx	lr

00003e04 <__fp_unlock>:
    3e04:	2000      	movs	r0, #0
    3e06:	4770      	bx	lr

00003e08 <_cleanup_r>:
    3e08:	4901      	ldr	r1, [pc, #4]	; (3e10 <_cleanup_r+0x8>)
    3e0a:	f000 bb92 	b.w	4532 <_fwalk>
    3e0e:	bf00      	nop
    3e10:	0000516d 	.word	0x0000516d

00003e14 <std.isra.0>:
    3e14:	2300      	movs	r3, #0
    3e16:	b510      	push	{r4, lr}
    3e18:	4604      	mov	r4, r0
    3e1a:	6003      	str	r3, [r0, #0]
    3e1c:	6043      	str	r3, [r0, #4]
    3e1e:	6083      	str	r3, [r0, #8]
    3e20:	8181      	strh	r1, [r0, #12]
    3e22:	6643      	str	r3, [r0, #100]	; 0x64
    3e24:	81c2      	strh	r2, [r0, #14]
    3e26:	6103      	str	r3, [r0, #16]
    3e28:	6143      	str	r3, [r0, #20]
    3e2a:	6183      	str	r3, [r0, #24]
    3e2c:	4619      	mov	r1, r3
    3e2e:	2208      	movs	r2, #8
    3e30:	f100 005c 	add.w	r0, r0, #92	; 0x5c
    3e34:	f7ff f97a 	bl	312c <memset>
    3e38:	4804      	ldr	r0, [pc, #16]	; (3e4c <std.isra.0+0x38>)
    3e3a:	4905      	ldr	r1, [pc, #20]	; (3e50 <std.isra.0+0x3c>)
    3e3c:	4a05      	ldr	r2, [pc, #20]	; (3e54 <std.isra.0+0x40>)
    3e3e:	4b06      	ldr	r3, [pc, #24]	; (3e58 <std.isra.0+0x44>)
    3e40:	61e4      	str	r4, [r4, #28]
    3e42:	6220      	str	r0, [r4, #32]
    3e44:	6261      	str	r1, [r4, #36]	; 0x24
    3e46:	62a2      	str	r2, [r4, #40]	; 0x28
    3e48:	62e3      	str	r3, [r4, #44]	; 0x2c
    3e4a:	bd10      	pop	{r4, pc}
    3e4c:	00004ea1 	.word	0x00004ea1
    3e50:	00004ec7 	.word	0x00004ec7
    3e54:	00004f03 	.word	0x00004f03
    3e58:	00004f27 	.word	0x00004f27

00003e5c <__sfmoreglue>:
    3e5c:	b570      	push	{r4, r5, r6, lr}
    3e5e:	2568      	movs	r5, #104	; 0x68
    3e60:	434d      	muls	r5, r1
    3e62:	460e      	mov	r6, r1
    3e64:	f105 010c 	add.w	r1, r5, #12
    3e68:	f000 fc66 	bl	4738 <_malloc_r>
    3e6c:	4604      	mov	r4, r0
    3e6e:	b140      	cbz	r0, 3e82 <__sfmoreglue+0x26>
    3e70:	f100 000c 	add.w	r0, r0, #12
    3e74:	2100      	movs	r1, #0
    3e76:	e884 0042 	stmia.w	r4, {r1, r6}
    3e7a:	60a0      	str	r0, [r4, #8]
    3e7c:	462a      	mov	r2, r5
    3e7e:	f7ff f955 	bl	312c <memset>
    3e82:	4620      	mov	r0, r4
    3e84:	bd70      	pop	{r4, r5, r6, pc}

00003e86 <_cleanup>:
    3e86:	4b02      	ldr	r3, [pc, #8]	; (3e90 <_cleanup+0xa>)
    3e88:	6818      	ldr	r0, [r3, #0]
    3e8a:	f7ff bfbd 	b.w	3e08 <_cleanup_r>
    3e8e:	bf00      	nop
    3e90:	00005998 	.word	0x00005998

00003e94 <__sinit>:
    3e94:	b538      	push	{r3, r4, r5, lr}
    3e96:	6b83      	ldr	r3, [r0, #56]	; 0x38
    3e98:	4604      	mov	r4, r0
    3e9a:	b9eb      	cbnz	r3, 3ed8 <__sinit+0x44>
    3e9c:	4a0f      	ldr	r2, [pc, #60]	; (3edc <__sinit+0x48>)
    3e9e:	f8c0 32e0 	str.w	r3, [r0, #736]	; 0x2e0
    3ea2:	2501      	movs	r5, #1
    3ea4:	63c2      	str	r2, [r0, #60]	; 0x3c
    3ea6:	6385      	str	r5, [r0, #56]	; 0x38
    3ea8:	f504 713b 	add.w	r1, r4, #748	; 0x2ec
    3eac:	2003      	movs	r0, #3
    3eae:	461a      	mov	r2, r3
    3eb0:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
    3eb4:	f8c4 12e8 	str.w	r1, [r4, #744]	; 0x2e8
    3eb8:	6860      	ldr	r0, [r4, #4]
    3eba:	2104      	movs	r1, #4
    3ebc:	f7ff ffaa 	bl	3e14 <std.isra.0>
    3ec0:	68a0      	ldr	r0, [r4, #8]
    3ec2:	2109      	movs	r1, #9
    3ec4:	462a      	mov	r2, r5
    3ec6:	f7ff ffa5 	bl	3e14 <std.isra.0>
    3eca:	68e0      	ldr	r0, [r4, #12]
    3ecc:	2112      	movs	r1, #18
    3ece:	2202      	movs	r2, #2
    3ed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3ed4:	f7ff bf9e 	b.w	3e14 <std.isra.0>
    3ed8:	bd38      	pop	{r3, r4, r5, pc}
    3eda:	bf00      	nop
    3edc:	00003e09 	.word	0x00003e09

00003ee0 <__sfp>:
    3ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ee2:	4b1d      	ldr	r3, [pc, #116]	; (3f58 <__sfp+0x78>)
    3ee4:	681e      	ldr	r6, [r3, #0]
    3ee6:	4607      	mov	r7, r0
    3ee8:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    3eea:	b910      	cbnz	r0, 3ef2 <__sfp+0x12>
    3eec:	4630      	mov	r0, r6
    3eee:	f7ff ffd1 	bl	3e94 <__sinit>
    3ef2:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
    3ef6:	68b4      	ldr	r4, [r6, #8]
    3ef8:	6871      	ldr	r1, [r6, #4]
    3efa:	3901      	subs	r1, #1
    3efc:	d404      	bmi.n	3f08 <__sfp+0x28>
    3efe:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    3f02:	b185      	cbz	r5, 3f26 <__sfp+0x46>
    3f04:	3468      	adds	r4, #104	; 0x68
    3f06:	e7f8      	b.n	3efa <__sfp+0x1a>
    3f08:	6832      	ldr	r2, [r6, #0]
    3f0a:	b10a      	cbz	r2, 3f10 <__sfp+0x30>
    3f0c:	6836      	ldr	r6, [r6, #0]
    3f0e:	e7f2      	b.n	3ef6 <__sfp+0x16>
    3f10:	4638      	mov	r0, r7
    3f12:	2104      	movs	r1, #4
    3f14:	f7ff ffa2 	bl	3e5c <__sfmoreglue>
    3f18:	6030      	str	r0, [r6, #0]
    3f1a:	2800      	cmp	r0, #0
    3f1c:	d1f6      	bne.n	3f0c <__sfp+0x2c>
    3f1e:	240c      	movs	r4, #12
    3f20:	603c      	str	r4, [r7, #0]
    3f22:	4604      	mov	r4, r0
    3f24:	e015      	b.n	3f52 <__sfp+0x72>
    3f26:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3f2a:	2001      	movs	r0, #1
    3f2c:	81a0      	strh	r0, [r4, #12]
    3f2e:	81e3      	strh	r3, [r4, #14]
    3f30:	6665      	str	r5, [r4, #100]	; 0x64
    3f32:	6025      	str	r5, [r4, #0]
    3f34:	60a5      	str	r5, [r4, #8]
    3f36:	6065      	str	r5, [r4, #4]
    3f38:	6125      	str	r5, [r4, #16]
    3f3a:	6165      	str	r5, [r4, #20]
    3f3c:	61a5      	str	r5, [r4, #24]
    3f3e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    3f42:	4629      	mov	r1, r5
    3f44:	2208      	movs	r2, #8
    3f46:	f7ff f8f1 	bl	312c <memset>
    3f4a:	6325      	str	r5, [r4, #48]	; 0x30
    3f4c:	6365      	str	r5, [r4, #52]	; 0x34
    3f4e:	6465      	str	r5, [r4, #68]	; 0x44
    3f50:	64a5      	str	r5, [r4, #72]	; 0x48
    3f52:	4620      	mov	r0, r4
    3f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f56:	bf00      	nop
    3f58:	00005998 	.word	0x00005998

00003f5c <__sfp_lock_acquire>:
    3f5c:	4770      	bx	lr

00003f5e <__sfp_lock_release>:
    3f5e:	4770      	bx	lr

00003f60 <__sinit_lock_acquire>:
    3f60:	4770      	bx	lr

00003f62 <__sinit_lock_release>:
    3f62:	4770      	bx	lr

00003f64 <__fp_lock_all>:
    3f64:	4b02      	ldr	r3, [pc, #8]	; (3f70 <__fp_lock_all+0xc>)
    3f66:	4903      	ldr	r1, [pc, #12]	; (3f74 <__fp_lock_all+0x10>)
    3f68:	6818      	ldr	r0, [r3, #0]
    3f6a:	f000 bae2 	b.w	4532 <_fwalk>
    3f6e:	bf00      	nop
    3f70:	20000050 	.word	0x20000050
    3f74:	00003e01 	.word	0x00003e01

00003f78 <__fp_unlock_all>:
    3f78:	4b02      	ldr	r3, [pc, #8]	; (3f84 <__fp_unlock_all+0xc>)
    3f7a:	4903      	ldr	r1, [pc, #12]	; (3f88 <__fp_unlock_all+0x10>)
    3f7c:	6818      	ldr	r0, [r3, #0]
    3f7e:	f000 bad8 	b.w	4532 <_fwalk>
    3f82:	bf00      	nop
    3f84:	20000050 	.word	0x20000050
    3f88:	00003e05 	.word	0x00003e05

00003f8c <_fputwc_r>:
    3f8c:	8993      	ldrh	r3, [r2, #12]
    3f8e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3f92:	4614      	mov	r4, r2
    3f94:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
    3f98:	4680      	mov	r8, r0
    3f9a:	b210      	sxth	r0, r2
    3f9c:	460e      	mov	r6, r1
    3f9e:	b930      	cbnz	r0, 3fae <_fputwc_r+0x22>
    3fa0:	6e67      	ldr	r7, [r4, #100]	; 0x64
    3fa2:	f443 5100 	orr.w	r1, r3, #8192	; 0x2000
    3fa6:	f447 5300 	orr.w	r3, r7, #8192	; 0x2000
    3faa:	81a1      	strh	r1, [r4, #12]
    3fac:	6663      	str	r3, [r4, #100]	; 0x64
    3fae:	f000 fb29 	bl	4604 <__locale_mb_cur_max>
    3fb2:	2801      	cmp	r0, #1
    3fb4:	d106      	bne.n	3fc4 <_fputwc_r+0x38>
    3fb6:	b12e      	cbz	r6, 3fc4 <_fputwc_r+0x38>
    3fb8:	2eff      	cmp	r6, #255	; 0xff
    3fba:	d803      	bhi.n	3fc4 <_fputwc_r+0x38>
    3fbc:	f88d 6004 	strb.w	r6, [sp, #4]
    3fc0:	4607      	mov	r7, r0
    3fc2:	e00f      	b.n	3fe4 <_fputwc_r+0x58>
    3fc4:	4632      	mov	r2, r6
    3fc6:	4640      	mov	r0, r8
    3fc8:	a901      	add	r1, sp, #4
    3fca:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    3fce:	f001 f813 	bl	4ff8 <_wcrtomb_r>
    3fd2:	1c42      	adds	r2, r0, #1
    3fd4:	4607      	mov	r7, r0
    3fd6:	d105      	bne.n	3fe4 <_fputwc_r+0x58>
    3fd8:	89a2      	ldrh	r2, [r4, #12]
    3fda:	f042 0040 	orr.w	r0, r2, #64	; 0x40
    3fde:	81a0      	strh	r0, [r4, #12]
    3fe0:	4638      	mov	r0, r7
    3fe2:	e031      	b.n	4048 <_fputwc_r+0xbc>
    3fe4:	2500      	movs	r5, #0
    3fe6:	42bd      	cmp	r5, r7
    3fe8:	d02a      	beq.n	4040 <_fputwc_r+0xb4>
    3fea:	68a1      	ldr	r1, [r4, #8]
    3fec:	1e4a      	subs	r2, r1, #1
    3fee:	2a00      	cmp	r2, #0
    3ff0:	60a2      	str	r2, [r4, #8]
    3ff2:	ab01      	add	r3, sp, #4
    3ff4:	da1a      	bge.n	402c <_fputwc_r+0xa0>
    3ff6:	69a0      	ldr	r0, [r4, #24]
    3ff8:	4282      	cmp	r2, r0
    3ffa:	db0c      	blt.n	4016 <_fputwc_r+0x8a>
    3ffc:	6821      	ldr	r1, [r4, #0]
    3ffe:	5d5a      	ldrb	r2, [r3, r5]
    4000:	700a      	strb	r2, [r1, #0]
    4002:	6823      	ldr	r3, [r4, #0]
    4004:	7819      	ldrb	r1, [r3, #0]
    4006:	290a      	cmp	r1, #10
    4008:	d003      	beq.n	4012 <_fputwc_r+0x86>
    400a:	3301      	adds	r3, #1
    400c:	2200      	movs	r2, #0
    400e:	6023      	str	r3, [r4, #0]
    4010:	e013      	b.n	403a <_fputwc_r+0xae>
    4012:	4640      	mov	r0, r8
    4014:	e001      	b.n	401a <_fputwc_r+0x8e>
    4016:	5d59      	ldrb	r1, [r3, r5]
    4018:	4640      	mov	r0, r8
    401a:	4622      	mov	r2, r4
    401c:	f000 ff92 	bl	4f44 <__swbuf_r>
    4020:	f1b0 31ff 	subs.w	r1, r0, #4294967295
    4024:	4248      	negs	r0, r1
    4026:	eb50 0201 	adcs.w	r2, r0, r1
    402a:	e006      	b.n	403a <_fputwc_r+0xae>
    402c:	6820      	ldr	r0, [r4, #0]
    402e:	5d59      	ldrb	r1, [r3, r5]
    4030:	7001      	strb	r1, [r0, #0]
    4032:	6822      	ldr	r2, [r4, #0]
    4034:	1c53      	adds	r3, r2, #1
    4036:	6023      	str	r3, [r4, #0]
    4038:	e000      	b.n	403c <_fputwc_r+0xb0>
    403a:	b91a      	cbnz	r2, 4044 <_fputwc_r+0xb8>
    403c:	3501      	adds	r5, #1
    403e:	e7d2      	b.n	3fe6 <_fputwc_r+0x5a>
    4040:	4630      	mov	r0, r6
    4042:	e001      	b.n	4048 <_fputwc_r+0xbc>
    4044:	f04f 30ff 	mov.w	r0, #4294967295
    4048:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

0000404c <fputwc>:
    404c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    404e:	4c08      	ldr	r4, [pc, #32]	; (4070 <fputwc+0x24>)
    4050:	4607      	mov	r7, r0
    4052:	6820      	ldr	r0, [r4, #0]
    4054:	460e      	mov	r6, r1
    4056:	b118      	cbz	r0, 4060 <fputwc+0x14>
    4058:	6b85      	ldr	r5, [r0, #56]	; 0x38
    405a:	b90d      	cbnz	r5, 4060 <fputwc+0x14>
    405c:	f7ff ff1a 	bl	3e94 <__sinit>
    4060:	6820      	ldr	r0, [r4, #0]
    4062:	4639      	mov	r1, r7
    4064:	4632      	mov	r2, r6
    4066:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    406a:	f7ff bf8f 	b.w	3f8c <_fputwc_r>
    406e:	bf00      	nop
    4070:	20000050 	.word	0x20000050

00004074 <_malloc_trim_r>:
    4074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4076:	4d23      	ldr	r5, [pc, #140]	; (4104 <_malloc_trim_r+0x90>)
    4078:	460e      	mov	r6, r1
    407a:	4604      	mov	r4, r0
    407c:	f000 fd8f 	bl	4b9e <__malloc_lock>
    4080:	68ab      	ldr	r3, [r5, #8]
    4082:	685f      	ldr	r7, [r3, #4]
    4084:	f027 0703 	bic.w	r7, r7, #3
    4088:	f607 70ef 	addw	r0, r7, #4079	; 0xfef
    408c:	1b81      	subs	r1, r0, r6
    408e:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
    4092:	f022 060f 	bic.w	r6, r2, #15
    4096:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
    409a:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
    409e:	da04      	bge.n	40aa <_malloc_trim_r+0x36>
    40a0:	4620      	mov	r0, r4
    40a2:	f000 fd7d 	bl	4ba0 <__malloc_unlock>
    40a6:	2000      	movs	r0, #0
    40a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40aa:	2100      	movs	r1, #0
    40ac:	4620      	mov	r0, r4
    40ae:	f000 fee7 	bl	4e80 <_sbrk_r>
    40b2:	68ab      	ldr	r3, [r5, #8]
    40b4:	19d9      	adds	r1, r3, r7
    40b6:	4288      	cmp	r0, r1
    40b8:	d1f2      	bne.n	40a0 <_malloc_trim_r+0x2c>
    40ba:	4271      	negs	r1, r6
    40bc:	4620      	mov	r0, r4
    40be:	f000 fedf 	bl	4e80 <_sbrk_r>
    40c2:	3001      	adds	r0, #1
    40c4:	d110      	bne.n	40e8 <_malloc_trim_r+0x74>
    40c6:	2100      	movs	r1, #0
    40c8:	4620      	mov	r0, r4
    40ca:	f000 fed9 	bl	4e80 <_sbrk_r>
    40ce:	68ab      	ldr	r3, [r5, #8]
    40d0:	1ac2      	subs	r2, r0, r3
    40d2:	2a0f      	cmp	r2, #15
    40d4:	dde4      	ble.n	40a0 <_malloc_trim_r+0x2c>
    40d6:	490c      	ldr	r1, [pc, #48]	; (4108 <_malloc_trim_r+0x94>)
    40d8:	6809      	ldr	r1, [r1, #0]
    40da:	1a40      	subs	r0, r0, r1
    40dc:	490b      	ldr	r1, [pc, #44]	; (410c <_malloc_trim_r+0x98>)
    40de:	f042 0201 	orr.w	r2, r2, #1
    40e2:	6008      	str	r0, [r1, #0]
    40e4:	605a      	str	r2, [r3, #4]
    40e6:	e7db      	b.n	40a0 <_malloc_trim_r+0x2c>
    40e8:	4b08      	ldr	r3, [pc, #32]	; (410c <_malloc_trim_r+0x98>)
    40ea:	68a8      	ldr	r0, [r5, #8]
    40ec:	681a      	ldr	r2, [r3, #0]
    40ee:	1bbf      	subs	r7, r7, r6
    40f0:	f047 0701 	orr.w	r7, r7, #1
    40f4:	6047      	str	r7, [r0, #4]
    40f6:	1b96      	subs	r6, r2, r6
    40f8:	4620      	mov	r0, r4
    40fa:	601e      	str	r6, [r3, #0]
    40fc:	f000 fd50 	bl	4ba0 <__malloc_unlock>
    4100:	2001      	movs	r0, #1
    4102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4104:	200004fc 	.word	0x200004fc
    4108:	20000904 	.word	0x20000904
    410c:	200009ac 	.word	0x200009ac

00004110 <_free_r>:
    4110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4112:	4606      	mov	r6, r0
    4114:	460d      	mov	r5, r1
    4116:	2900      	cmp	r1, #0
    4118:	f000 80a6 	beq.w	4268 <_free_r+0x158>
    411c:	f000 fd3f 	bl	4b9e <__malloc_lock>
    4120:	f855 cc04 	ldr.w	ip, [r5, #-4]
    4124:	4f51      	ldr	r7, [pc, #324]	; (426c <_free_r+0x15c>)
    4126:	f1a5 0308 	sub.w	r3, r5, #8
    412a:	f02c 0201 	bic.w	r2, ip, #1
    412e:	189c      	adds	r4, r3, r2
    4130:	68b9      	ldr	r1, [r7, #8]
    4132:	6860      	ldr	r0, [r4, #4]
    4134:	428c      	cmp	r4, r1
    4136:	f020 0003 	bic.w	r0, r0, #3
    413a:	f00c 0101 	and.w	r1, ip, #1
    413e:	d11c      	bne.n	417a <_free_r+0x6a>
    4140:	1882      	adds	r2, r0, r2
    4142:	b939      	cbnz	r1, 4154 <_free_r+0x44>
    4144:	f855 1c08 	ldr.w	r1, [r5, #-8]
    4148:	1a5b      	subs	r3, r3, r1
    414a:	1852      	adds	r2, r2, r1
    414c:	6898      	ldr	r0, [r3, #8]
    414e:	68d9      	ldr	r1, [r3, #12]
    4150:	60c1      	str	r1, [r0, #12]
    4152:	6088      	str	r0, [r1, #8]
    4154:	4845      	ldr	r0, [pc, #276]	; (426c <_free_r+0x15c>)
    4156:	f042 0101 	orr.w	r1, r2, #1
    415a:	6059      	str	r1, [r3, #4]
    415c:	6083      	str	r3, [r0, #8]
    415e:	4b44      	ldr	r3, [pc, #272]	; (4270 <_free_r+0x160>)
    4160:	6819      	ldr	r1, [r3, #0]
    4162:	428a      	cmp	r2, r1
    4164:	d304      	bcc.n	4170 <_free_r+0x60>
    4166:	4a43      	ldr	r2, [pc, #268]	; (4274 <_free_r+0x164>)
    4168:	4630      	mov	r0, r6
    416a:	6811      	ldr	r1, [r2, #0]
    416c:	f7ff ff82 	bl	4074 <_malloc_trim_r>
    4170:	4630      	mov	r0, r6
    4172:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4176:	f000 bd13 	b.w	4ba0 <__malloc_unlock>
    417a:	6060      	str	r0, [r4, #4]
    417c:	b959      	cbnz	r1, 4196 <_free_r+0x86>
    417e:	f855 5c08 	ldr.w	r5, [r5, #-8]
    4182:	1b5b      	subs	r3, r3, r5
    4184:	1952      	adds	r2, r2, r5
    4186:	689d      	ldr	r5, [r3, #8]
    4188:	3708      	adds	r7, #8
    418a:	42bd      	cmp	r5, r7
    418c:	d005      	beq.n	419a <_free_r+0x8a>
    418e:	68df      	ldr	r7, [r3, #12]
    4190:	60ef      	str	r7, [r5, #12]
    4192:	60bd      	str	r5, [r7, #8]
    4194:	e002      	b.n	419c <_free_r+0x8c>
    4196:	2100      	movs	r1, #0
    4198:	e000      	b.n	419c <_free_r+0x8c>
    419a:	2101      	movs	r1, #1
    419c:	1825      	adds	r5, r4, r0
    419e:	686d      	ldr	r5, [r5, #4]
    41a0:	f015 0f01 	tst.w	r5, #1
    41a4:	d10f      	bne.n	41c6 <_free_r+0xb6>
    41a6:	1812      	adds	r2, r2, r0
    41a8:	b949      	cbnz	r1, 41be <_free_r+0xae>
    41aa:	68a0      	ldr	r0, [r4, #8]
    41ac:	4d32      	ldr	r5, [pc, #200]	; (4278 <_free_r+0x168>)
    41ae:	42a8      	cmp	r0, r5
    41b0:	d105      	bne.n	41be <_free_r+0xae>
    41b2:	60eb      	str	r3, [r5, #12]
    41b4:	60ab      	str	r3, [r5, #8]
    41b6:	60d8      	str	r0, [r3, #12]
    41b8:	6098      	str	r0, [r3, #8]
    41ba:	2101      	movs	r1, #1
    41bc:	e003      	b.n	41c6 <_free_r+0xb6>
    41be:	68e0      	ldr	r0, [r4, #12]
    41c0:	68a4      	ldr	r4, [r4, #8]
    41c2:	60e0      	str	r0, [r4, #12]
    41c4:	6084      	str	r4, [r0, #8]
    41c6:	f042 0001 	orr.w	r0, r2, #1
    41ca:	6058      	str	r0, [r3, #4]
    41cc:	509a      	str	r2, [r3, r2]
    41ce:	2900      	cmp	r1, #0
    41d0:	d1ce      	bne.n	4170 <_free_r+0x60>
    41d2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    41d6:	d20c      	bcs.n	41f2 <_free_r+0xe2>
    41d8:	4924      	ldr	r1, [pc, #144]	; (426c <_free_r+0x15c>)
    41da:	08d2      	lsrs	r2, r2, #3
    41dc:	1090      	asrs	r0, r2, #2
    41de:	2401      	movs	r4, #1
    41e0:	fa04 f400 	lsl.w	r4, r4, r0
    41e4:	6848      	ldr	r0, [r1, #4]
    41e6:	4320      	orrs	r0, r4
    41e8:	6048      	str	r0, [r1, #4]
    41ea:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    41ee:	6881      	ldr	r1, [r0, #8]
    41f0:	e035      	b.n	425e <_free_r+0x14e>
    41f2:	0a54      	lsrs	r4, r2, #9
    41f4:	2c04      	cmp	r4, #4
    41f6:	d802      	bhi.n	41fe <_free_r+0xee>
    41f8:	0994      	lsrs	r4, r2, #6
    41fa:	3438      	adds	r4, #56	; 0x38
    41fc:	e016      	b.n	422c <_free_r+0x11c>
    41fe:	2c14      	cmp	r4, #20
    4200:	d801      	bhi.n	4206 <_free_r+0xf6>
    4202:	345b      	adds	r4, #91	; 0x5b
    4204:	e012      	b.n	422c <_free_r+0x11c>
    4206:	2c54      	cmp	r4, #84	; 0x54
    4208:	d802      	bhi.n	4210 <_free_r+0x100>
    420a:	0b14      	lsrs	r4, r2, #12
    420c:	346e      	adds	r4, #110	; 0x6e
    420e:	e00d      	b.n	422c <_free_r+0x11c>
    4210:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
    4214:	d802      	bhi.n	421c <_free_r+0x10c>
    4216:	0bd4      	lsrs	r4, r2, #15
    4218:	3477      	adds	r4, #119	; 0x77
    421a:	e007      	b.n	422c <_free_r+0x11c>
    421c:	f240 5554 	movw	r5, #1364	; 0x554
    4220:	42ac      	cmp	r4, r5
    4222:	d802      	bhi.n	422a <_free_r+0x11a>
    4224:	0c94      	lsrs	r4, r2, #18
    4226:	347c      	adds	r4, #124	; 0x7c
    4228:	e000      	b.n	422c <_free_r+0x11c>
    422a:	247e      	movs	r4, #126	; 0x7e
    422c:	4d0f      	ldr	r5, [pc, #60]	; (426c <_free_r+0x15c>)
    422e:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    4232:	6881      	ldr	r1, [r0, #8]
    4234:	4281      	cmp	r1, r0
    4236:	d10c      	bne.n	4252 <_free_r+0x142>
    4238:	6868      	ldr	r0, [r5, #4]
    423a:	2201      	movs	r2, #1
    423c:	10a4      	asrs	r4, r4, #2
    423e:	fa02 f404 	lsl.w	r4, r2, r4
    4242:	ea44 0200 	orr.w	r2, r4, r0
    4246:	606a      	str	r2, [r5, #4]
    4248:	4608      	mov	r0, r1
    424a:	e008      	b.n	425e <_free_r+0x14e>
    424c:	6889      	ldr	r1, [r1, #8]
    424e:	4281      	cmp	r1, r0
    4250:	d004      	beq.n	425c <_free_r+0x14c>
    4252:	684c      	ldr	r4, [r1, #4]
    4254:	f024 0403 	bic.w	r4, r4, #3
    4258:	42a2      	cmp	r2, r4
    425a:	d3f7      	bcc.n	424c <_free_r+0x13c>
    425c:	68c8      	ldr	r0, [r1, #12]
    425e:	60d8      	str	r0, [r3, #12]
    4260:	6099      	str	r1, [r3, #8]
    4262:	6083      	str	r3, [r0, #8]
    4264:	60cb      	str	r3, [r1, #12]
    4266:	e783      	b.n	4170 <_free_r+0x60>
    4268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    426a:	bf00      	nop
    426c:	200004fc 	.word	0x200004fc
    4270:	20000908 	.word	0x20000908
    4274:	200009a8 	.word	0x200009a8
    4278:	20000504 	.word	0x20000504

0000427c <__sfvwrite_r>:
    427c:	6893      	ldr	r3, [r2, #8]
    427e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4282:	4606      	mov	r6, r0
    4284:	460c      	mov	r4, r1
    4286:	4691      	mov	r9, r2
    4288:	b90b      	cbnz	r3, 428e <__sfvwrite_r+0x12>
    428a:	2000      	movs	r0, #0
    428c:	e14f      	b.n	452e <__sfvwrite_r+0x2b2>
    428e:	8988      	ldrh	r0, [r1, #12]
    4290:	f000 0108 	and.w	r1, r0, #8
    4294:	b20a      	sxth	r2, r1
    4296:	b10a      	cbz	r2, 429c <__sfvwrite_r+0x20>
    4298:	6923      	ldr	r3, [r4, #16]
    429a:	b95b      	cbnz	r3, 42b4 <__sfvwrite_r+0x38>
    429c:	4630      	mov	r0, r6
    429e:	4621      	mov	r1, r4
    42a0:	f7ff fc98 	bl	3bd4 <__swsetup_r>
    42a4:	b130      	cbz	r0, 42b4 <__sfvwrite_r+0x38>
    42a6:	89a1      	ldrh	r1, [r4, #12]
    42a8:	2209      	movs	r2, #9
    42aa:	f041 0040 	orr.w	r0, r1, #64	; 0x40
    42ae:	81a0      	strh	r0, [r4, #12]
    42b0:	6032      	str	r2, [r6, #0]
    42b2:	e13a      	b.n	452a <__sfvwrite_r+0x2ae>
    42b4:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
    42b8:	f8d9 8000 	ldr.w	r8, [r9]
    42bc:	f00a 0c02 	and.w	ip, sl, #2
    42c0:	fa0f f58c 	sxth.w	r5, ip
    42c4:	b315      	cbz	r5, 430c <__sfvwrite_r+0x90>
    42c6:	f04f 0a00 	mov.w	sl, #0
    42ca:	4657      	mov	r7, sl
    42cc:	b937      	cbnz	r7, 42dc <__sfvwrite_r+0x60>
    42ce:	f8d8 a000 	ldr.w	sl, [r8]
    42d2:	f8d8 7004 	ldr.w	r7, [r8, #4]
    42d6:	f108 0808 	add.w	r8, r8, #8
    42da:	e7f7      	b.n	42cc <__sfvwrite_r+0x50>
    42dc:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    42e0:	bf34      	ite	cc
    42e2:	463b      	movcc	r3, r7
    42e4:	f44f 6380 	movcs.w	r3, #1024	; 0x400
    42e8:	4630      	mov	r0, r6
    42ea:	69e1      	ldr	r1, [r4, #28]
    42ec:	6a65      	ldr	r5, [r4, #36]	; 0x24
    42ee:	4652      	mov	r2, sl
    42f0:	47a8      	blx	r5
    42f2:	2800      	cmp	r0, #0
    42f4:	f340 8115 	ble.w	4522 <__sfvwrite_r+0x2a6>
    42f8:	f8d9 1008 	ldr.w	r1, [r9, #8]
    42fc:	4482      	add	sl, r0
    42fe:	1a3f      	subs	r7, r7, r0
    4300:	1a08      	subs	r0, r1, r0
    4302:	f8c9 0008 	str.w	r0, [r9, #8]
    4306:	2800      	cmp	r0, #0
    4308:	d1e0      	bne.n	42cc <__sfvwrite_r+0x50>
    430a:	e7be      	b.n	428a <__sfvwrite_r+0xe>
    430c:	f01a 0a01 	ands.w	sl, sl, #1
    4310:	d004      	beq.n	431c <__sfvwrite_r+0xa0>
    4312:	46ab      	mov	fp, r5
    4314:	9501      	str	r5, [sp, #4]
    4316:	462f      	mov	r7, r5
    4318:	46aa      	mov	sl, r5
    431a:	e0c7      	b.n	44ac <__sfvwrite_r+0x230>
    431c:	4655      	mov	r5, sl
    431e:	b935      	cbnz	r5, 432e <__sfvwrite_r+0xb2>
    4320:	f8d8 a000 	ldr.w	sl, [r8]
    4324:	f8d8 5004 	ldr.w	r5, [r8, #4]
    4328:	f108 0808 	add.w	r8, r8, #8
    432c:	e7f7      	b.n	431e <__sfvwrite_r+0xa2>
    432e:	89a2      	ldrh	r2, [r4, #12]
    4330:	f8d4 b008 	ldr.w	fp, [r4, #8]
    4334:	f402 7000 	and.w	r0, r2, #512	; 0x200
    4338:	b203      	sxth	r3, r0
    433a:	2b00      	cmp	r3, #0
    433c:	d052      	beq.n	43e4 <__sfvwrite_r+0x168>
    433e:	455d      	cmp	r5, fp
    4340:	d340      	bcc.n	43c4 <__sfvwrite_r+0x148>
    4342:	f412 6f90 	tst.w	r2, #1152	; 0x480
    4346:	d03b      	beq.n	43c0 <__sfvwrite_r+0x144>
    4348:	6921      	ldr	r1, [r4, #16]
    434a:	6827      	ldr	r7, [r4, #0]
    434c:	6963      	ldr	r3, [r4, #20]
    434e:	f04f 0b03 	mov.w	fp, #3
    4352:	fb0b f303 	mul.w	r3, fp, r3
    4356:	2002      	movs	r0, #2
    4358:	1a7f      	subs	r7, r7, r1
    435a:	fb93 fcf0 	sdiv	ip, r3, r0
    435e:	1c7b      	adds	r3, r7, #1
    4360:	1958      	adds	r0, r3, r5
    4362:	f402 6280 	and.w	r2, r2, #1024	; 0x400
    4366:	4584      	cmp	ip, r0
    4368:	bf28      	it	cs
    436a:	4660      	movcs	r0, ip
    436c:	b213      	sxth	r3, r2
    436e:	9001      	str	r0, [sp, #4]
    4370:	4630      	mov	r0, r6
    4372:	b17b      	cbz	r3, 4394 <__sfvwrite_r+0x118>
    4374:	9901      	ldr	r1, [sp, #4]
    4376:	f000 f9df 	bl	4738 <_malloc_r>
    437a:	4683      	mov	fp, r0
    437c:	b198      	cbz	r0, 43a6 <__sfvwrite_r+0x12a>
    437e:	6921      	ldr	r1, [r4, #16]
    4380:	463a      	mov	r2, r7
    4382:	f000 fbe9 	bl	4b58 <memcpy>
    4386:	89a1      	ldrh	r1, [r4, #12]
    4388:	f421 6090 	bic.w	r0, r1, #1152	; 0x480
    438c:	f040 0280 	orr.w	r2, r0, #128	; 0x80
    4390:	81a2      	strh	r2, [r4, #12]
    4392:	e00b      	b.n	43ac <__sfvwrite_r+0x130>
    4394:	9a01      	ldr	r2, [sp, #4]
    4396:	f000 fc05 	bl	4ba4 <_realloc_r>
    439a:	4683      	mov	fp, r0
    439c:	b930      	cbnz	r0, 43ac <__sfvwrite_r+0x130>
    439e:	4630      	mov	r0, r6
    43a0:	6921      	ldr	r1, [r4, #16]
    43a2:	f7ff feb5 	bl	4110 <_free_r>
    43a6:	230c      	movs	r3, #12
    43a8:	6033      	str	r3, [r6, #0]
    43aa:	e0ba      	b.n	4522 <__sfvwrite_r+0x2a6>
    43ac:	9901      	ldr	r1, [sp, #4]
    43ae:	f8c4 b010 	str.w	fp, [r4, #16]
    43b2:	eb0b 0307 	add.w	r3, fp, r7
    43b6:	1bcf      	subs	r7, r1, r7
    43b8:	6023      	str	r3, [r4, #0]
    43ba:	6161      	str	r1, [r4, #20]
    43bc:	46ab      	mov	fp, r5
    43be:	60a7      	str	r7, [r4, #8]
    43c0:	455d      	cmp	r5, fp
    43c2:	d200      	bcs.n	43c6 <__sfvwrite_r+0x14a>
    43c4:	46ab      	mov	fp, r5
    43c6:	465a      	mov	r2, fp
    43c8:	4651      	mov	r1, sl
    43ca:	6820      	ldr	r0, [r4, #0]
    43cc:	f000 fbcd 	bl	4b6a <memmove>
    43d0:	68a0      	ldr	r0, [r4, #8]
    43d2:	6823      	ldr	r3, [r4, #0]
    43d4:	ebcb 0200 	rsb	r2, fp, r0
    43d8:	eb03 010b 	add.w	r1, r3, fp
    43dc:	60a2      	str	r2, [r4, #8]
    43de:	6021      	str	r1, [r4, #0]
    43e0:	46ab      	mov	fp, r5
    43e2:	e02a      	b.n	443a <__sfvwrite_r+0x1be>
    43e4:	6820      	ldr	r0, [r4, #0]
    43e6:	6921      	ldr	r1, [r4, #16]
    43e8:	4288      	cmp	r0, r1
    43ea:	d90f      	bls.n	440c <__sfvwrite_r+0x190>
    43ec:	455d      	cmp	r5, fp
    43ee:	d90d      	bls.n	440c <__sfvwrite_r+0x190>
    43f0:	4651      	mov	r1, sl
    43f2:	465a      	mov	r2, fp
    43f4:	f000 fbb9 	bl	4b6a <memmove>
    43f8:	6822      	ldr	r2, [r4, #0]
    43fa:	eb02 000b 	add.w	r0, r2, fp
    43fe:	6020      	str	r0, [r4, #0]
    4400:	4621      	mov	r1, r4
    4402:	4630      	mov	r0, r6
    4404:	f7ff fc52 	bl	3cac <_fflush_r>
    4408:	b1b8      	cbz	r0, 443a <__sfvwrite_r+0x1be>
    440a:	e08a      	b.n	4522 <__sfvwrite_r+0x2a6>
    440c:	6963      	ldr	r3, [r4, #20]
    440e:	429d      	cmp	r5, r3
    4410:	d308      	bcc.n	4424 <__sfvwrite_r+0x1a8>
    4412:	6a67      	ldr	r7, [r4, #36]	; 0x24
    4414:	69e1      	ldr	r1, [r4, #28]
    4416:	4630      	mov	r0, r6
    4418:	4652      	mov	r2, sl
    441a:	47b8      	blx	r7
    441c:	f1b0 0b00 	subs.w	fp, r0, #0
    4420:	dc0b      	bgt.n	443a <__sfvwrite_r+0x1be>
    4422:	e07e      	b.n	4522 <__sfvwrite_r+0x2a6>
    4424:	4651      	mov	r1, sl
    4426:	462a      	mov	r2, r5
    4428:	f000 fb9f 	bl	4b6a <memmove>
    442c:	68a2      	ldr	r2, [r4, #8]
    442e:	6823      	ldr	r3, [r4, #0]
    4430:	1b50      	subs	r0, r2, r5
    4432:	1959      	adds	r1, r3, r5
    4434:	46ab      	mov	fp, r5
    4436:	60a0      	str	r0, [r4, #8]
    4438:	6021      	str	r1, [r4, #0]
    443a:	f8d9 0008 	ldr.w	r0, [r9, #8]
    443e:	ebcb 0200 	rsb	r2, fp, r0
    4442:	44da      	add	sl, fp
    4444:	ebcb 0505 	rsb	r5, fp, r5
    4448:	f8c9 2008 	str.w	r2, [r9, #8]
    444c:	2a00      	cmp	r2, #0
    444e:	f47f af66 	bne.w	431e <__sfvwrite_r+0xa2>
    4452:	e71a      	b.n	428a <__sfvwrite_r+0xe>
    4454:	9801      	ldr	r0, [sp, #4]
    4456:	2800      	cmp	r0, #0
    4458:	d032      	beq.n	44c0 <__sfvwrite_r+0x244>
    445a:	6820      	ldr	r0, [r4, #0]
    445c:	6921      	ldr	r1, [r4, #16]
    445e:	68a5      	ldr	r5, [r4, #8]
    4460:	f8d4 e014 	ldr.w	lr, [r4, #20]
    4464:	45d3      	cmp	fp, sl
    4466:	bf34      	ite	cc
    4468:	465b      	movcc	r3, fp
    446a:	4653      	movcs	r3, sl
    446c:	4288      	cmp	r0, r1
    446e:	d937      	bls.n	44e0 <__sfvwrite_r+0x264>
    4470:	4475      	add	r5, lr
    4472:	42ab      	cmp	r3, r5
    4474:	dd34      	ble.n	44e0 <__sfvwrite_r+0x264>
    4476:	4639      	mov	r1, r7
    4478:	462a      	mov	r2, r5
    447a:	f000 fb76 	bl	4b6a <memmove>
    447e:	6820      	ldr	r0, [r4, #0]
    4480:	1943      	adds	r3, r0, r5
    4482:	6023      	str	r3, [r4, #0]
    4484:	4630      	mov	r0, r6
    4486:	4621      	mov	r1, r4
    4488:	f7ff fc10 	bl	3cac <_fflush_r>
    448c:	2800      	cmp	r0, #0
    448e:	d148      	bne.n	4522 <__sfvwrite_r+0x2a6>
    4490:	ebbb 0b05 	subs.w	fp, fp, r5
    4494:	d03d      	beq.n	4512 <__sfvwrite_r+0x296>
    4496:	f8d9 2008 	ldr.w	r2, [r9, #8]
    449a:	197f      	adds	r7, r7, r5
    449c:	ebc5 0a0a 	rsb	sl, r5, sl
    44a0:	1b55      	subs	r5, r2, r5
    44a2:	f8c9 5008 	str.w	r5, [r9, #8]
    44a6:	2d00      	cmp	r5, #0
    44a8:	f43f aeef 	beq.w	428a <__sfvwrite_r+0xe>
    44ac:	f1ba 0f00 	cmp.w	sl, #0
    44b0:	d1d0      	bne.n	4454 <__sfvwrite_r+0x1d8>
    44b2:	2100      	movs	r1, #0
    44b4:	e898 0480 	ldmia.w	r8, {r7, sl}
    44b8:	9101      	str	r1, [sp, #4]
    44ba:	f108 0808 	add.w	r8, r8, #8
    44be:	e7f5      	b.n	44ac <__sfvwrite_r+0x230>
    44c0:	4638      	mov	r0, r7
    44c2:	210a      	movs	r1, #10
    44c4:	4652      	mov	r2, sl
    44c6:	f000 fb39 	bl	4b3c <memchr>
    44ca:	b120      	cbz	r0, 44d6 <__sfvwrite_r+0x25a>
    44cc:	f100 0101 	add.w	r1, r0, #1
    44d0:	ebc7 0b01 	rsb	fp, r7, r1
    44d4:	e001      	b.n	44da <__sfvwrite_r+0x25e>
    44d6:	f10a 0b01 	add.w	fp, sl, #1
    44da:	2201      	movs	r2, #1
    44dc:	9201      	str	r2, [sp, #4]
    44de:	e7bc      	b.n	445a <__sfvwrite_r+0x1de>
    44e0:	4573      	cmp	r3, lr
    44e2:	db08      	blt.n	44f6 <__sfvwrite_r+0x27a>
    44e4:	6a65      	ldr	r5, [r4, #36]	; 0x24
    44e6:	69e1      	ldr	r1, [r4, #28]
    44e8:	4630      	mov	r0, r6
    44ea:	463a      	mov	r2, r7
    44ec:	4673      	mov	r3, lr
    44ee:	47a8      	blx	r5
    44f0:	1e05      	subs	r5, r0, #0
    44f2:	dccd      	bgt.n	4490 <__sfvwrite_r+0x214>
    44f4:	e015      	b.n	4522 <__sfvwrite_r+0x2a6>
    44f6:	461a      	mov	r2, r3
    44f8:	4639      	mov	r1, r7
    44fa:	9300      	str	r3, [sp, #0]
    44fc:	f000 fb35 	bl	4b6a <memmove>
    4500:	9b00      	ldr	r3, [sp, #0]
    4502:	6825      	ldr	r5, [r4, #0]
    4504:	68a0      	ldr	r0, [r4, #8]
    4506:	18e9      	adds	r1, r5, r3
    4508:	1ac2      	subs	r2, r0, r3
    450a:	60a2      	str	r2, [r4, #8]
    450c:	6021      	str	r1, [r4, #0]
    450e:	461d      	mov	r5, r3
    4510:	e7be      	b.n	4490 <__sfvwrite_r+0x214>
    4512:	4630      	mov	r0, r6
    4514:	4621      	mov	r1, r4
    4516:	f7ff fbc9 	bl	3cac <_fflush_r>
    451a:	b910      	cbnz	r0, 4522 <__sfvwrite_r+0x2a6>
    451c:	f8cd b004 	str.w	fp, [sp, #4]
    4520:	e7b9      	b.n	4496 <__sfvwrite_r+0x21a>
    4522:	89a2      	ldrh	r2, [r4, #12]
    4524:	f042 0340 	orr.w	r3, r2, #64	; 0x40
    4528:	81a3      	strh	r3, [r4, #12]
    452a:	f04f 30ff 	mov.w	r0, #4294967295
    452e:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00004532 <_fwalk>:
    4532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4536:	4604      	mov	r4, r0
    4538:	4688      	mov	r8, r1
    453a:	f7ff fd0f 	bl	3f5c <__sfp_lock_acquire>
    453e:	f504 7438 	add.w	r4, r4, #736	; 0x2e0
    4542:	2600      	movs	r6, #0
    4544:	b18c      	cbz	r4, 456a <_fwalk+0x38>
    4546:	68a5      	ldr	r5, [r4, #8]
    4548:	6867      	ldr	r7, [r4, #4]
    454a:	3f01      	subs	r7, #1
    454c:	d40b      	bmi.n	4566 <_fwalk+0x34>
    454e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
    4552:	b133      	cbz	r3, 4562 <_fwalk+0x30>
    4554:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
    4558:	1c43      	adds	r3, r0, #1
    455a:	d002      	beq.n	4562 <_fwalk+0x30>
    455c:	4628      	mov	r0, r5
    455e:	47c0      	blx	r8
    4560:	4306      	orrs	r6, r0
    4562:	3568      	adds	r5, #104	; 0x68
    4564:	e7f1      	b.n	454a <_fwalk+0x18>
    4566:	6824      	ldr	r4, [r4, #0]
    4568:	e7ec      	b.n	4544 <_fwalk+0x12>
    456a:	f7ff fcf8 	bl	3f5e <__sfp_lock_release>
    456e:	4630      	mov	r0, r6
    4570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004574 <_fwalk_reent>:
    4574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4578:	4680      	mov	r8, r0
    457a:	4689      	mov	r9, r1
    457c:	f7ff fcee 	bl	3f5c <__sfp_lock_acquire>
    4580:	f508 7438 	add.w	r4, r8, #736	; 0x2e0
    4584:	2600      	movs	r6, #0
    4586:	b194      	cbz	r4, 45ae <_fwalk_reent+0x3a>
    4588:	68a5      	ldr	r5, [r4, #8]
    458a:	6867      	ldr	r7, [r4, #4]
    458c:	3f01      	subs	r7, #1
    458e:	d40c      	bmi.n	45aa <_fwalk_reent+0x36>
    4590:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
    4594:	b13b      	cbz	r3, 45a6 <_fwalk_reent+0x32>
    4596:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
    459a:	1c43      	adds	r3, r0, #1
    459c:	d003      	beq.n	45a6 <_fwalk_reent+0x32>
    459e:	4640      	mov	r0, r8
    45a0:	4629      	mov	r1, r5
    45a2:	47c8      	blx	r9
    45a4:	4306      	orrs	r6, r0
    45a6:	3568      	adds	r5, #104	; 0x68
    45a8:	e7f0      	b.n	458c <_fwalk_reent+0x18>
    45aa:	6824      	ldr	r4, [r4, #0]
    45ac:	e7eb      	b.n	4586 <_fwalk_reent+0x12>
    45ae:	f7ff fcd6 	bl	3f5e <__sfp_lock_release>
    45b2:	4630      	mov	r0, r6
    45b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000045b8 <_setlocale_r>:
    45b8:	b510      	push	{r4, lr}
    45ba:	4614      	mov	r4, r2
    45bc:	b90a      	cbnz	r2, 45c2 <_setlocale_r+0xa>
    45be:	480c      	ldr	r0, [pc, #48]	; (45f0 <_setlocale_r+0x38>)
    45c0:	bd10      	pop	{r4, pc}
    45c2:	4610      	mov	r0, r2
    45c4:	490b      	ldr	r1, [pc, #44]	; (45f4 <_setlocale_r+0x3c>)
    45c6:	f000 fcb2 	bl	4f2e <strcmp>
    45ca:	2800      	cmp	r0, #0
    45cc:	d0f7      	beq.n	45be <_setlocale_r+0x6>
    45ce:	4620      	mov	r0, r4
    45d0:	4907      	ldr	r1, [pc, #28]	; (45f0 <_setlocale_r+0x38>)
    45d2:	f000 fcac 	bl	4f2e <strcmp>
    45d6:	2800      	cmp	r0, #0
    45d8:	d0f1      	beq.n	45be <_setlocale_r+0x6>
    45da:	4620      	mov	r0, r4
    45dc:	4906      	ldr	r1, [pc, #24]	; (45f8 <_setlocale_r+0x40>)
    45de:	f000 fca6 	bl	4f2e <strcmp>
    45e2:	4b03      	ldr	r3, [pc, #12]	; (45f0 <_setlocale_r+0x38>)
    45e4:	2800      	cmp	r0, #0
    45e6:	bf0c      	ite	eq
    45e8:	4618      	moveq	r0, r3
    45ea:	2000      	movne	r0, #0
    45ec:	bd10      	pop	{r4, pc}
    45ee:	bf00      	nop
    45f0:	0000599c 	.word	0x0000599c
    45f4:	000059e2 	.word	0x000059e2
    45f8:	0000599f 	.word	0x0000599f

000045fc <__locale_charset>:
    45fc:	4800      	ldr	r0, [pc, #0]	; (4600 <__locale_charset+0x4>)
    45fe:	4770      	bx	lr
    4600:	20000480 	.word	0x20000480

00004604 <__locale_mb_cur_max>:
    4604:	4b01      	ldr	r3, [pc, #4]	; (460c <__locale_mb_cur_max+0x8>)
    4606:	6a18      	ldr	r0, [r3, #32]
    4608:	4770      	bx	lr
    460a:	bf00      	nop
    460c:	20000480 	.word	0x20000480

00004610 <__locale_msgcharset>:
    4610:	4800      	ldr	r0, [pc, #0]	; (4614 <__locale_msgcharset+0x4>)
    4612:	4770      	bx	lr
    4614:	200004a4 	.word	0x200004a4

00004618 <__locale_cjk_lang>:
    4618:	2000      	movs	r0, #0
    461a:	4770      	bx	lr

0000461c <_localeconv_r>:
    461c:	4800      	ldr	r0, [pc, #0]	; (4620 <_localeconv_r+0x4>)
    461e:	4770      	bx	lr
    4620:	200004c4 	.word	0x200004c4

00004624 <setlocale>:
    4624:	460a      	mov	r2, r1
    4626:	4903      	ldr	r1, [pc, #12]	; (4634 <setlocale+0x10>)
    4628:	4603      	mov	r3, r0
    462a:	6808      	ldr	r0, [r1, #0]
    462c:	4619      	mov	r1, r3
    462e:	f7ff bfc3 	b.w	45b8 <_setlocale_r>
    4632:	bf00      	nop
    4634:	20000050 	.word	0x20000050

00004638 <localeconv>:
    4638:	4800      	ldr	r0, [pc, #0]	; (463c <localeconv+0x4>)
    463a:	4770      	bx	lr
    463c:	200004c4 	.word	0x200004c4

00004640 <__smakebuf_r>:
    4640:	b5f0      	push	{r4, r5, r6, r7, lr}
    4642:	898b      	ldrh	r3, [r1, #12]
    4644:	460c      	mov	r4, r1
    4646:	f003 0102 	and.w	r1, r3, #2
    464a:	b20a      	sxth	r2, r1
    464c:	b091      	sub	sp, #68	; 0x44
    464e:	4606      	mov	r6, r0
    4650:	2a00      	cmp	r2, #0
    4652:	d13f      	bne.n	46d4 <__smakebuf_r+0x94>
    4654:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    4658:	2900      	cmp	r1, #0
    465a:	da0d      	bge.n	4678 <__smakebuf_r+0x38>
    465c:	89a7      	ldrh	r7, [r4, #12]
    465e:	f007 0280 	and.w	r2, r7, #128	; 0x80
    4662:	f447 6300 	orr.w	r3, r7, #2048	; 0x800
    4666:	b210      	sxth	r0, r2
    4668:	2800      	cmp	r0, #0
    466a:	bf0c      	ite	eq
    466c:	f44f 6580 	moveq.w	r5, #1024	; 0x400
    4670:	2540      	movne	r5, #64	; 0x40
    4672:	81a3      	strh	r3, [r4, #12]
    4674:	2700      	movs	r7, #0
    4676:	e020      	b.n	46ba <__smakebuf_r+0x7a>
    4678:	aa01      	add	r2, sp, #4
    467a:	f000 fd7f 	bl	517c <_fstat_r>
    467e:	2800      	cmp	r0, #0
    4680:	dbec      	blt.n	465c <__smakebuf_r+0x1c>
    4682:	9802      	ldr	r0, [sp, #8]
    4684:	f400 4570 	and.w	r5, r0, #61440	; 0xf000
    4688:	f5b5 5300 	subs.w	r3, r5, #8192	; 0x2000
    468c:	425f      	negs	r7, r3
    468e:	415f      	adcs	r7, r3
    4690:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    4694:	d10b      	bne.n	46ae <__smakebuf_r+0x6e>
    4696:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    4698:	4a1d      	ldr	r2, [pc, #116]	; (4710 <__smakebuf_r+0xd0>)
    469a:	4291      	cmp	r1, r2
    469c:	d107      	bne.n	46ae <__smakebuf_r+0x6e>
    469e:	89a3      	ldrh	r3, [r4, #12]
    46a0:	f44f 6580 	mov.w	r5, #1024	; 0x400
    46a4:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
    46a8:	81a1      	strh	r1, [r4, #12]
    46aa:	64e5      	str	r5, [r4, #76]	; 0x4c
    46ac:	e005      	b.n	46ba <__smakebuf_r+0x7a>
    46ae:	89a0      	ldrh	r0, [r4, #12]
    46b0:	f440 6500 	orr.w	r5, r0, #2048	; 0x800
    46b4:	81a5      	strh	r5, [r4, #12]
    46b6:	f44f 6580 	mov.w	r5, #1024	; 0x400
    46ba:	4630      	mov	r0, r6
    46bc:	4629      	mov	r1, r5
    46be:	f000 f83b 	bl	4738 <_malloc_r>
    46c2:	b970      	cbnz	r0, 46e2 <__smakebuf_r+0xa2>
    46c4:	89a3      	ldrh	r3, [r4, #12]
    46c6:	f403 7200 	and.w	r2, r3, #512	; 0x200
    46ca:	b210      	sxth	r0, r2
    46cc:	b9e8      	cbnz	r0, 470a <__smakebuf_r+0xca>
    46ce:	f043 0102 	orr.w	r1, r3, #2
    46d2:	81a1      	strh	r1, [r4, #12]
    46d4:	f104 0343 	add.w	r3, r4, #67	; 0x43
    46d8:	2201      	movs	r2, #1
    46da:	6023      	str	r3, [r4, #0]
    46dc:	6123      	str	r3, [r4, #16]
    46de:	6162      	str	r2, [r4, #20]
    46e0:	e013      	b.n	470a <__smakebuf_r+0xca>
    46e2:	89a2      	ldrh	r2, [r4, #12]
    46e4:	490b      	ldr	r1, [pc, #44]	; (4714 <__smakebuf_r+0xd4>)
    46e6:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    46ea:	63f1      	str	r1, [r6, #60]	; 0x3c
    46ec:	81a3      	strh	r3, [r4, #12]
    46ee:	6020      	str	r0, [r4, #0]
    46f0:	6120      	str	r0, [r4, #16]
    46f2:	6165      	str	r5, [r4, #20]
    46f4:	b14f      	cbz	r7, 470a <__smakebuf_r+0xca>
    46f6:	4630      	mov	r0, r6
    46f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    46fc:	f000 fd50 	bl	51a0 <_isatty_r>
    4700:	b118      	cbz	r0, 470a <__smakebuf_r+0xca>
    4702:	89a0      	ldrh	r0, [r4, #12]
    4704:	f040 0101 	orr.w	r1, r0, #1
    4708:	81a1      	strh	r1, [r4, #12]
    470a:	b011      	add	sp, #68	; 0x44
    470c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    470e:	bf00      	nop
    4710:	00004f03 	.word	0x00004f03
    4714:	00003e09 	.word	0x00003e09

00004718 <malloc>:
    4718:	4b02      	ldr	r3, [pc, #8]	; (4724 <malloc+0xc>)
    471a:	4601      	mov	r1, r0
    471c:	6818      	ldr	r0, [r3, #0]
    471e:	f000 b80b 	b.w	4738 <_malloc_r>
    4722:	bf00      	nop
    4724:	20000050 	.word	0x20000050

00004728 <free>:
    4728:	4b02      	ldr	r3, [pc, #8]	; (4734 <free+0xc>)
    472a:	4601      	mov	r1, r0
    472c:	6818      	ldr	r0, [r3, #0]
    472e:	f7ff bcef 	b.w	4110 <_free_r>
    4732:	bf00      	nop
    4734:	20000050 	.word	0x20000050

00004738 <_malloc_r>:
    4738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    473c:	f101 040b 	add.w	r4, r1, #11
    4740:	2c16      	cmp	r4, #22
    4742:	4606      	mov	r6, r0
    4744:	d903      	bls.n	474e <_malloc_r+0x16>
    4746:	f034 0407 	bics.w	r4, r4, #7
    474a:	d501      	bpl.n	4750 <_malloc_r+0x18>
    474c:	e002      	b.n	4754 <_malloc_r+0x1c>
    474e:	2410      	movs	r4, #16
    4750:	428c      	cmp	r4, r1
    4752:	d202      	bcs.n	475a <_malloc_r+0x22>
    4754:	250c      	movs	r5, #12
    4756:	6035      	str	r5, [r6, #0]
    4758:	e1d9      	b.n	4b0e <_malloc_r+0x3d6>
    475a:	4630      	mov	r0, r6
    475c:	f000 fa1f 	bl	4b9e <__malloc_lock>
    4760:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
    4764:	d214      	bcs.n	4790 <_malloc_r+0x58>
    4766:	4da0      	ldr	r5, [pc, #640]	; (49e8 <_malloc_r+0x2b0>)
    4768:	08e1      	lsrs	r1, r4, #3
    476a:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
    476e:	68c5      	ldr	r5, [r0, #12]
    4770:	4285      	cmp	r5, r0
    4772:	d105      	bne.n	4780 <_malloc_r+0x48>
    4774:	f105 0308 	add.w	r3, r5, #8
    4778:	696d      	ldr	r5, [r5, #20]
    477a:	1c8a      	adds	r2, r1, #2
    477c:	429d      	cmp	r5, r3
    477e:	d044      	beq.n	480a <_malloc_r+0xd2>
    4780:	68e8      	ldr	r0, [r5, #12]
    4782:	68a9      	ldr	r1, [r5, #8]
    4784:	686a      	ldr	r2, [r5, #4]
    4786:	60c8      	str	r0, [r1, #12]
    4788:	f022 0303 	bic.w	r3, r2, #3
    478c:	6081      	str	r1, [r0, #8]
    478e:	e059      	b.n	4844 <_malloc_r+0x10c>
    4790:	0a62      	lsrs	r2, r4, #9
    4792:	d101      	bne.n	4798 <_malloc_r+0x60>
    4794:	08e2      	lsrs	r2, r4, #3
    4796:	e01b      	b.n	47d0 <_malloc_r+0x98>
    4798:	2a04      	cmp	r2, #4
    479a:	d802      	bhi.n	47a2 <_malloc_r+0x6a>
    479c:	09a2      	lsrs	r2, r4, #6
    479e:	3238      	adds	r2, #56	; 0x38
    47a0:	e016      	b.n	47d0 <_malloc_r+0x98>
    47a2:	2a14      	cmp	r2, #20
    47a4:	d801      	bhi.n	47aa <_malloc_r+0x72>
    47a6:	325b      	adds	r2, #91	; 0x5b
    47a8:	e012      	b.n	47d0 <_malloc_r+0x98>
    47aa:	2a54      	cmp	r2, #84	; 0x54
    47ac:	d802      	bhi.n	47b4 <_malloc_r+0x7c>
    47ae:	0b22      	lsrs	r2, r4, #12
    47b0:	326e      	adds	r2, #110	; 0x6e
    47b2:	e00d      	b.n	47d0 <_malloc_r+0x98>
    47b4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    47b8:	d802      	bhi.n	47c0 <_malloc_r+0x88>
    47ba:	0be2      	lsrs	r2, r4, #15
    47bc:	3277      	adds	r2, #119	; 0x77
    47be:	e007      	b.n	47d0 <_malloc_r+0x98>
    47c0:	f240 5354 	movw	r3, #1364	; 0x554
    47c4:	429a      	cmp	r2, r3
    47c6:	d802      	bhi.n	47ce <_malloc_r+0x96>
    47c8:	0ca2      	lsrs	r2, r4, #18
    47ca:	327c      	adds	r2, #124	; 0x7c
    47cc:	e000      	b.n	47d0 <_malloc_r+0x98>
    47ce:	227e      	movs	r2, #126	; 0x7e
    47d0:	4885      	ldr	r0, [pc, #532]	; (49e8 <_malloc_r+0x2b0>)
    47d2:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
    47d6:	68dd      	ldr	r5, [r3, #12]
    47d8:	429d      	cmp	r5, r3
    47da:	d015      	beq.n	4808 <_malloc_r+0xd0>
    47dc:	6869      	ldr	r1, [r5, #4]
    47de:	f021 0103 	bic.w	r1, r1, #3
    47e2:	1b08      	subs	r0, r1, r4
    47e4:	280f      	cmp	r0, #15
    47e6:	dd01      	ble.n	47ec <_malloc_r+0xb4>
    47e8:	3a01      	subs	r2, #1
    47ea:	e00d      	b.n	4808 <_malloc_r+0xd0>
    47ec:	2800      	cmp	r0, #0
    47ee:	db09      	blt.n	4804 <_malloc_r+0xcc>
    47f0:	68eb      	ldr	r3, [r5, #12]
    47f2:	68aa      	ldr	r2, [r5, #8]
    47f4:	60d3      	str	r3, [r2, #12]
    47f6:	609a      	str	r2, [r3, #8]
    47f8:	186b      	adds	r3, r5, r1
    47fa:	685a      	ldr	r2, [r3, #4]
    47fc:	f042 0001 	orr.w	r0, r2, #1
    4800:	6058      	str	r0, [r3, #4]
    4802:	e190      	b.n	4b26 <_malloc_r+0x3ee>
    4804:	68ed      	ldr	r5, [r5, #12]
    4806:	e7e7      	b.n	47d8 <_malloc_r+0xa0>
    4808:	3201      	adds	r2, #1
    480a:	4977      	ldr	r1, [pc, #476]	; (49e8 <_malloc_r+0x2b0>)
    480c:	690d      	ldr	r5, [r1, #16]
    480e:	f101 0708 	add.w	r7, r1, #8
    4812:	42bd      	cmp	r5, r7
    4814:	d068      	beq.n	48e8 <_malloc_r+0x1b0>
    4816:	6868      	ldr	r0, [r5, #4]
    4818:	f020 0303 	bic.w	r3, r0, #3
    481c:	1b18      	subs	r0, r3, r4
    481e:	280f      	cmp	r0, #15
    4820:	dd0c      	ble.n	483c <_malloc_r+0x104>
    4822:	192b      	adds	r3, r5, r4
    4824:	614b      	str	r3, [r1, #20]
    4826:	610b      	str	r3, [r1, #16]
    4828:	f044 0401 	orr.w	r4, r4, #1
    482c:	f040 0101 	orr.w	r1, r0, #1
    4830:	606c      	str	r4, [r5, #4]
    4832:	60df      	str	r7, [r3, #12]
    4834:	609f      	str	r7, [r3, #8]
    4836:	6059      	str	r1, [r3, #4]
    4838:	5018      	str	r0, [r3, r0]
    483a:	e174      	b.n	4b26 <_malloc_r+0x3ee>
    483c:	2800      	cmp	r0, #0
    483e:	614f      	str	r7, [r1, #20]
    4840:	610f      	str	r7, [r1, #16]
    4842:	db01      	blt.n	4848 <_malloc_r+0x110>
    4844:	18eb      	adds	r3, r5, r3
    4846:	e7d8      	b.n	47fa <_malloc_r+0xc2>
    4848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    484c:	d20f      	bcs.n	486e <_malloc_r+0x136>
    484e:	08db      	lsrs	r3, r3, #3
    4850:	1098      	asrs	r0, r3, #2
    4852:	2701      	movs	r7, #1
    4854:	fa07 f700 	lsl.w	r7, r7, r0
    4858:	6848      	ldr	r0, [r1, #4]
    485a:	4307      	orrs	r7, r0
    485c:	604f      	str	r7, [r1, #4]
    485e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    4862:	60e9      	str	r1, [r5, #12]
    4864:	688b      	ldr	r3, [r1, #8]
    4866:	60ab      	str	r3, [r5, #8]
    4868:	60dd      	str	r5, [r3, #12]
    486a:	608d      	str	r5, [r1, #8]
    486c:	e03c      	b.n	48e8 <_malloc_r+0x1b0>
    486e:	0a58      	lsrs	r0, r3, #9
    4870:	2804      	cmp	r0, #4
    4872:	d802      	bhi.n	487a <_malloc_r+0x142>
    4874:	0998      	lsrs	r0, r3, #6
    4876:	3038      	adds	r0, #56	; 0x38
    4878:	e016      	b.n	48a8 <_malloc_r+0x170>
    487a:	2814      	cmp	r0, #20
    487c:	d801      	bhi.n	4882 <_malloc_r+0x14a>
    487e:	305b      	adds	r0, #91	; 0x5b
    4880:	e012      	b.n	48a8 <_malloc_r+0x170>
    4882:	2854      	cmp	r0, #84	; 0x54
    4884:	d802      	bhi.n	488c <_malloc_r+0x154>
    4886:	0b18      	lsrs	r0, r3, #12
    4888:	306e      	adds	r0, #110	; 0x6e
    488a:	e00d      	b.n	48a8 <_malloc_r+0x170>
    488c:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
    4890:	d802      	bhi.n	4898 <_malloc_r+0x160>
    4892:	0bd8      	lsrs	r0, r3, #15
    4894:	3077      	adds	r0, #119	; 0x77
    4896:	e007      	b.n	48a8 <_malloc_r+0x170>
    4898:	f240 5754 	movw	r7, #1364	; 0x554
    489c:	42b8      	cmp	r0, r7
    489e:	d802      	bhi.n	48a6 <_malloc_r+0x16e>
    48a0:	0c98      	lsrs	r0, r3, #18
    48a2:	307c      	adds	r0, #124	; 0x7c
    48a4:	e000      	b.n	48a8 <_malloc_r+0x170>
    48a6:	207e      	movs	r0, #126	; 0x7e
    48a8:	f8df e13c 	ldr.w	lr, [pc, #316]	; 49e8 <_malloc_r+0x2b0>
    48ac:	eb0e 07c0 	add.w	r7, lr, r0, lsl #3
    48b0:	68b9      	ldr	r1, [r7, #8]
    48b2:	42b9      	cmp	r1, r7
    48b4:	d10e      	bne.n	48d4 <_malloc_r+0x19c>
    48b6:	1087      	asrs	r7, r0, #2
    48b8:	2301      	movs	r3, #1
    48ba:	fa03 f007 	lsl.w	r0, r3, r7
    48be:	f8de 7004 	ldr.w	r7, [lr, #4]
    48c2:	ea40 0307 	orr.w	r3, r0, r7
    48c6:	f8ce 3004 	str.w	r3, [lr, #4]
    48ca:	4608      	mov	r0, r1
    48cc:	e008      	b.n	48e0 <_malloc_r+0x1a8>
    48ce:	6889      	ldr	r1, [r1, #8]
    48d0:	42b9      	cmp	r1, r7
    48d2:	d004      	beq.n	48de <_malloc_r+0x1a6>
    48d4:	6848      	ldr	r0, [r1, #4]
    48d6:	f020 0003 	bic.w	r0, r0, #3
    48da:	4283      	cmp	r3, r0
    48dc:	d3f7      	bcc.n	48ce <_malloc_r+0x196>
    48de:	68c8      	ldr	r0, [r1, #12]
    48e0:	60e8      	str	r0, [r5, #12]
    48e2:	60a9      	str	r1, [r5, #8]
    48e4:	60cd      	str	r5, [r1, #12]
    48e6:	6085      	str	r5, [r0, #8]
    48e8:	4f3f      	ldr	r7, [pc, #252]	; (49e8 <_malloc_r+0x2b0>)
    48ea:	1095      	asrs	r5, r2, #2
    48ec:	2001      	movs	r0, #1
    48ee:	6879      	ldr	r1, [r7, #4]
    48f0:	fa00 f305 	lsl.w	r3, r0, r5
    48f4:	428b      	cmp	r3, r1
    48f6:	d85d      	bhi.n	49b4 <_malloc_r+0x27c>
    48f8:	420b      	tst	r3, r1
    48fa:	d105      	bne.n	4908 <_malloc_r+0x1d0>
    48fc:	f022 0203 	bic.w	r2, r2, #3
    4900:	005b      	lsls	r3, r3, #1
    4902:	3204      	adds	r2, #4
    4904:	420b      	tst	r3, r1
    4906:	d0fb      	beq.n	4900 <_malloc_r+0x1c8>
    4908:	4d37      	ldr	r5, [pc, #220]	; (49e8 <_malloc_r+0x2b0>)
    490a:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
    490e:	4677      	mov	r7, lr
    4910:	4610      	mov	r0, r2
    4912:	68fd      	ldr	r5, [r7, #12]
    4914:	42bd      	cmp	r5, r7
    4916:	d02d      	beq.n	4974 <_malloc_r+0x23c>
    4918:	6869      	ldr	r1, [r5, #4]
    491a:	f021 0c03 	bic.w	ip, r1, #3
    491e:	ebc4 010c 	rsb	r1, r4, ip
    4922:	290f      	cmp	r1, #15
    4924:	dd13      	ble.n	494e <_malloc_r+0x216>
    4926:	192b      	adds	r3, r5, r4
    4928:	f044 0401 	orr.w	r4, r4, #1
    492c:	68ea      	ldr	r2, [r5, #12]
    492e:	606c      	str	r4, [r5, #4]
    4930:	f855 0f08 	ldr.w	r0, [r5, #8]!
    4934:	5059      	str	r1, [r3, r1]
    4936:	60c2      	str	r2, [r0, #12]
    4938:	6090      	str	r0, [r2, #8]
    493a:	4a2b      	ldr	r2, [pc, #172]	; (49e8 <_malloc_r+0x2b0>)
    493c:	f041 0001 	orr.w	r0, r1, #1
    4940:	6153      	str	r3, [r2, #20]
    4942:	6113      	str	r3, [r2, #16]
    4944:	3208      	adds	r2, #8
    4946:	60da      	str	r2, [r3, #12]
    4948:	609a      	str	r2, [r3, #8]
    494a:	6058      	str	r0, [r3, #4]
    494c:	e00c      	b.n	4968 <_malloc_r+0x230>
    494e:	2900      	cmp	r1, #0
    4950:	db0e      	blt.n	4970 <_malloc_r+0x238>
    4952:	eb05 000c 	add.w	r0, r5, ip
    4956:	68e9      	ldr	r1, [r5, #12]
    4958:	6842      	ldr	r2, [r0, #4]
    495a:	f042 0301 	orr.w	r3, r2, #1
    495e:	6043      	str	r3, [r0, #4]
    4960:	f855 0f08 	ldr.w	r0, [r5, #8]!
    4964:	60c1      	str	r1, [r0, #12]
    4966:	6088      	str	r0, [r1, #8]
    4968:	4630      	mov	r0, r6
    496a:	f000 f919 	bl	4ba0 <__malloc_unlock>
    496e:	e0de      	b.n	4b2e <_malloc_r+0x3f6>
    4970:	68ed      	ldr	r5, [r5, #12]
    4972:	e7cf      	b.n	4914 <_malloc_r+0x1dc>
    4974:	3001      	adds	r0, #1
    4976:	0781      	lsls	r1, r0, #30
    4978:	f105 0708 	add.w	r7, r5, #8
    497c:	d1c9      	bne.n	4912 <_malloc_r+0x1da>
    497e:	4671      	mov	r1, lr
    4980:	0795      	lsls	r5, r2, #30
    4982:	d105      	bne.n	4990 <_malloc_r+0x258>
    4984:	4a18      	ldr	r2, [pc, #96]	; (49e8 <_malloc_r+0x2b0>)
    4986:	6855      	ldr	r5, [r2, #4]
    4988:	ea25 0503 	bic.w	r5, r5, r3
    498c:	6055      	str	r5, [r2, #4]
    498e:	e005      	b.n	499c <_malloc_r+0x264>
    4990:	f1a1 0708 	sub.w	r7, r1, #8
    4994:	6809      	ldr	r1, [r1, #0]
    4996:	3a01      	subs	r2, #1
    4998:	42b9      	cmp	r1, r7
    499a:	d0f1      	beq.n	4980 <_malloc_r+0x248>
    499c:	4f12      	ldr	r7, [pc, #72]	; (49e8 <_malloc_r+0x2b0>)
    499e:	687f      	ldr	r7, [r7, #4]
    49a0:	005b      	lsls	r3, r3, #1
    49a2:	42bb      	cmp	r3, r7
    49a4:	d806      	bhi.n	49b4 <_malloc_r+0x27c>
    49a6:	b12b      	cbz	r3, 49b4 <_malloc_r+0x27c>
    49a8:	4602      	mov	r2, r0
    49aa:	423b      	tst	r3, r7
    49ac:	d1ac      	bne.n	4908 <_malloc_r+0x1d0>
    49ae:	3204      	adds	r2, #4
    49b0:	005b      	lsls	r3, r3, #1
    49b2:	e7fa      	b.n	49aa <_malloc_r+0x272>
    49b4:	4b0c      	ldr	r3, [pc, #48]	; (49e8 <_malloc_r+0x2b0>)
    49b6:	689f      	ldr	r7, [r3, #8]
    49b8:	6878      	ldr	r0, [r7, #4]
    49ba:	f020 0903 	bic.w	r9, r0, #3
    49be:	45a1      	cmp	r9, r4
    49c0:	4619      	mov	r1, r3
    49c2:	d304      	bcc.n	49ce <_malloc_r+0x296>
    49c4:	ebc4 0009 	rsb	r0, r4, r9
    49c8:	280f      	cmp	r0, #15
    49ca:	f300 80a2 	bgt.w	4b12 <_malloc_r+0x3da>
    49ce:	4a07      	ldr	r2, [pc, #28]	; (49ec <_malloc_r+0x2b4>)
    49d0:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
    49d4:	6815      	ldr	r5, [r2, #0]
    49d6:	3301      	adds	r3, #1
    49d8:	eb07 0a09 	add.w	sl, r7, r9
    49dc:	eb04 0805 	add.w	r8, r4, r5
    49e0:	d106      	bne.n	49f0 <_malloc_r+0x2b8>
    49e2:	f108 0810 	add.w	r8, r8, #16
    49e6:	e00b      	b.n	4a00 <_malloc_r+0x2c8>
    49e8:	200004fc 	.word	0x200004fc
    49ec:	200009a8 	.word	0x200009a8
    49f0:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
    49f4:	f100 010f 	add.w	r1, r0, #15
    49f8:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
    49fc:	f022 080f 	bic.w	r8, r2, #15
    4a00:	4630      	mov	r0, r6
    4a02:	4641      	mov	r1, r8
    4a04:	f000 fa3c 	bl	4e80 <_sbrk_r>
    4a08:	1c42      	adds	r2, r0, #1
    4a0a:	4605      	mov	r5, r0
    4a0c:	d071      	beq.n	4af2 <_malloc_r+0x3ba>
    4a0e:	4550      	cmp	r0, sl
    4a10:	d202      	bcs.n	4a18 <_malloc_r+0x2e0>
    4a12:	4b48      	ldr	r3, [pc, #288]	; (4b34 <_malloc_r+0x3fc>)
    4a14:	429f      	cmp	r7, r3
    4a16:	d16c      	bne.n	4af2 <_malloc_r+0x3ba>
    4a18:	4847      	ldr	r0, [pc, #284]	; (4b38 <_malloc_r+0x400>)
    4a1a:	4a46      	ldr	r2, [pc, #280]	; (4b34 <_malloc_r+0x3fc>)
    4a1c:	6841      	ldr	r1, [r0, #4]
    4a1e:	4555      	cmp	r5, sl
    4a20:	eb08 0301 	add.w	r3, r8, r1
    4a24:	6043      	str	r3, [r0, #4]
    4a26:	d107      	bne.n	4a38 <_malloc_r+0x300>
    4a28:	0529      	lsls	r1, r5, #20
    4a2a:	d105      	bne.n	4a38 <_malloc_r+0x300>
    4a2c:	6895      	ldr	r5, [r2, #8]
    4a2e:	44c8      	add	r8, r9
    4a30:	f048 0001 	orr.w	r0, r8, #1
    4a34:	6068      	str	r0, [r5, #4]
    4a36:	e051      	b.n	4adc <_malloc_r+0x3a4>
    4a38:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
    4a3c:	1c42      	adds	r2, r0, #1
    4a3e:	d103      	bne.n	4a48 <_malloc_r+0x310>
    4a40:	4a3c      	ldr	r2, [pc, #240]	; (4b34 <_malloc_r+0x3fc>)
    4a42:	f8c2 5408 	str.w	r5, [r2, #1032]	; 0x408
    4a46:	e005      	b.n	4a54 <_malloc_r+0x31c>
    4a48:	ebca 0a05 	rsb	sl, sl, r5
    4a4c:	eb03 010a 	add.w	r1, r3, sl
    4a50:	4b39      	ldr	r3, [pc, #228]	; (4b38 <_malloc_r+0x400>)
    4a52:	6059      	str	r1, [r3, #4]
    4a54:	f015 0007 	ands.w	r0, r5, #7
    4a58:	bf1c      	itt	ne
    4a5a:	f1c0 0008 	rsbne	r0, r0, #8
    4a5e:	182d      	addne	r5, r5, r0
    4a60:	eb05 0c08 	add.w	ip, r5, r8
    4a64:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
    4a68:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
    4a6c:	eba1 581e 	sub.w	r8, r1, lr, lsr #20
    4a70:	4641      	mov	r1, r8
    4a72:	4630      	mov	r0, r6
    4a74:	f000 fa04 	bl	4e80 <_sbrk_r>
    4a78:	4a2f      	ldr	r2, [pc, #188]	; (4b38 <_malloc_r+0x400>)
    4a7a:	1c43      	adds	r3, r0, #1
    4a7c:	6853      	ldr	r3, [r2, #4]
    4a7e:	bf08      	it	eq
    4a80:	f04f 0800 	moveq.w	r8, #0
    4a84:	eb08 0103 	add.w	r1, r8, r3
    4a88:	bf08      	it	eq
    4a8a:	4628      	moveq	r0, r5
    4a8c:	6051      	str	r1, [r2, #4]
    4a8e:	1b40      	subs	r0, r0, r5
    4a90:	4a28      	ldr	r2, [pc, #160]	; (4b34 <_malloc_r+0x3fc>)
    4a92:	eb00 0308 	add.w	r3, r0, r8
    4a96:	f043 0101 	orr.w	r1, r3, #1
    4a9a:	4297      	cmp	r7, r2
    4a9c:	6095      	str	r5, [r2, #8]
    4a9e:	6069      	str	r1, [r5, #4]
    4aa0:	d01c      	beq.n	4adc <_malloc_r+0x3a4>
    4aa2:	f1b9 0f0f 	cmp.w	r9, #15
    4aa6:	d802      	bhi.n	4aae <_malloc_r+0x376>
    4aa8:	2201      	movs	r2, #1
    4aaa:	606a      	str	r2, [r5, #4]
    4aac:	e021      	b.n	4af2 <_malloc_r+0x3ba>
    4aae:	687d      	ldr	r5, [r7, #4]
    4ab0:	f1a9 090c 	sub.w	r9, r9, #12
    4ab4:	f029 0907 	bic.w	r9, r9, #7
    4ab8:	eb07 0309 	add.w	r3, r7, r9
    4abc:	f005 0201 	and.w	r2, r5, #1
    4ac0:	2105      	movs	r1, #5
    4ac2:	ea49 0002 	orr.w	r0, r9, r2
    4ac6:	f1b9 0f0f 	cmp.w	r9, #15
    4aca:	6078      	str	r0, [r7, #4]
    4acc:	6059      	str	r1, [r3, #4]
    4ace:	6099      	str	r1, [r3, #8]
    4ad0:	d904      	bls.n	4adc <_malloc_r+0x3a4>
    4ad2:	4630      	mov	r0, r6
    4ad4:	f107 0108 	add.w	r1, r7, #8
    4ad8:	f7ff fb1a 	bl	4110 <_free_r>
    4adc:	4a16      	ldr	r2, [pc, #88]	; (4b38 <_malloc_r+0x400>)
    4ade:	6853      	ldr	r3, [r2, #4]
    4ae0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    4ae2:	6b15      	ldr	r5, [r2, #48]	; 0x30
    4ae4:	428b      	cmp	r3, r1
    4ae6:	bf88      	it	hi
    4ae8:	62d3      	strhi	r3, [r2, #44]	; 0x2c
    4aea:	42ab      	cmp	r3, r5
    4aec:	bf84      	itt	hi
    4aee:	4d12      	ldrhi	r5, [pc, #72]	; (4b38 <_malloc_r+0x400>)
    4af0:	632b      	strhi	r3, [r5, #48]	; 0x30
    4af2:	4810      	ldr	r0, [pc, #64]	; (4b34 <_malloc_r+0x3fc>)
    4af4:	6882      	ldr	r2, [r0, #8]
    4af6:	6853      	ldr	r3, [r2, #4]
    4af8:	f023 0103 	bic.w	r1, r3, #3
    4afc:	42a1      	cmp	r1, r4
    4afe:	ebc4 0001 	rsb	r0, r4, r1
    4b02:	d301      	bcc.n	4b08 <_malloc_r+0x3d0>
    4b04:	280f      	cmp	r0, #15
    4b06:	dc04      	bgt.n	4b12 <_malloc_r+0x3da>
    4b08:	4630      	mov	r0, r6
    4b0a:	f000 f849 	bl	4ba0 <__malloc_unlock>
    4b0e:	2500      	movs	r5, #0
    4b10:	e00d      	b.n	4b2e <_malloc_r+0x3f6>
    4b12:	4a08      	ldr	r2, [pc, #32]	; (4b34 <_malloc_r+0x3fc>)
    4b14:	6895      	ldr	r5, [r2, #8]
    4b16:	f044 0301 	orr.w	r3, r4, #1
    4b1a:	192c      	adds	r4, r5, r4
    4b1c:	f040 0101 	orr.w	r1, r0, #1
    4b20:	606b      	str	r3, [r5, #4]
    4b22:	6094      	str	r4, [r2, #8]
    4b24:	6061      	str	r1, [r4, #4]
    4b26:	4630      	mov	r0, r6
    4b28:	f000 f83a 	bl	4ba0 <__malloc_unlock>
    4b2c:	3508      	adds	r5, #8
    4b2e:	4628      	mov	r0, r5
    4b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4b34:	200004fc 	.word	0x200004fc
    4b38:	200009a8 	.word	0x200009a8

00004b3c <memchr>:
    4b3c:	b510      	push	{r4, lr}
    4b3e:	b2c9      	uxtb	r1, r1
    4b40:	4603      	mov	r3, r0
    4b42:	1882      	adds	r2, r0, r2
    4b44:	4293      	cmp	r3, r2
    4b46:	4618      	mov	r0, r3
    4b48:	d004      	beq.n	4b54 <memchr+0x18>
    4b4a:	7804      	ldrb	r4, [r0, #0]
    4b4c:	3301      	adds	r3, #1
    4b4e:	428c      	cmp	r4, r1
    4b50:	d1f8      	bne.n	4b44 <memchr+0x8>
    4b52:	e000      	b.n	4b56 <memchr+0x1a>
    4b54:	2000      	movs	r0, #0
    4b56:	bd10      	pop	{r4, pc}

00004b58 <memcpy>:
    4b58:	b510      	push	{r4, lr}
    4b5a:	2300      	movs	r3, #0
    4b5c:	4293      	cmp	r3, r2
    4b5e:	d003      	beq.n	4b68 <memcpy+0x10>
    4b60:	5ccc      	ldrb	r4, [r1, r3]
    4b62:	54c4      	strb	r4, [r0, r3]
    4b64:	3301      	adds	r3, #1
    4b66:	e7f9      	b.n	4b5c <memcpy+0x4>
    4b68:	bd10      	pop	{r4, pc}

00004b6a <memmove>:
    4b6a:	4281      	cmp	r1, r0
    4b6c:	b570      	push	{r4, r5, r6, lr}
    4b6e:	d20e      	bcs.n	4b8e <memmove+0x24>
    4b70:	188c      	adds	r4, r1, r2
    4b72:	42a0      	cmp	r0, r4
    4b74:	d20b      	bcs.n	4b8e <memmove+0x24>
    4b76:	1885      	adds	r5, r0, r2
    4b78:	4613      	mov	r3, r2
    4b7a:	f113 33ff 	adds.w	r3, r3, #4294967295
    4b7e:	d305      	bcc.n	4b8c <memmove+0x22>
    4b80:	4251      	negs	r1, r2
    4b82:	1866      	adds	r6, r4, r1
    4b84:	1869      	adds	r1, r5, r1
    4b86:	5cf6      	ldrb	r6, [r6, r3]
    4b88:	54ce      	strb	r6, [r1, r3]
    4b8a:	e7f6      	b.n	4b7a <memmove+0x10>
    4b8c:	bd70      	pop	{r4, r5, r6, pc}
    4b8e:	2300      	movs	r3, #0
    4b90:	4293      	cmp	r3, r2
    4b92:	d003      	beq.n	4b9c <memmove+0x32>
    4b94:	5ccc      	ldrb	r4, [r1, r3]
    4b96:	54c4      	strb	r4, [r0, r3]
    4b98:	3301      	adds	r3, #1
    4b9a:	e7f9      	b.n	4b90 <memmove+0x26>
    4b9c:	bd70      	pop	{r4, r5, r6, pc}

00004b9e <__malloc_lock>:
    4b9e:	4770      	bx	lr

00004ba0 <__malloc_unlock>:
    4ba0:	4770      	bx	lr
	...

00004ba4 <_realloc_r>:
    4ba4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ba8:	4681      	mov	r9, r0
    4baa:	4616      	mov	r6, r2
    4bac:	460c      	mov	r4, r1
    4bae:	b921      	cbnz	r1, 4bba <_realloc_r+0x16>
    4bb0:	4611      	mov	r1, r2
    4bb2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4bb6:	f7ff bdbf 	b.w	4738 <_malloc_r>
    4bba:	f7ff fff0 	bl	4b9e <__malloc_lock>
    4bbe:	f106 070b 	add.w	r7, r6, #11
    4bc2:	f854 5c04 	ldr.w	r5, [r4, #-4]
    4bc6:	2f16      	cmp	r7, #22
    4bc8:	f1a4 0b08 	sub.w	fp, r4, #8
    4bcc:	f025 0803 	bic.w	r8, r5, #3
    4bd0:	d903      	bls.n	4bda <_realloc_r+0x36>
    4bd2:	f037 0707 	bics.w	r7, r7, #7
    4bd6:	d501      	bpl.n	4bdc <_realloc_r+0x38>
    4bd8:	e002      	b.n	4be0 <_realloc_r+0x3c>
    4bda:	2710      	movs	r7, #16
    4bdc:	42b7      	cmp	r7, r6
    4bde:	d204      	bcs.n	4bea <_realloc_r+0x46>
    4be0:	200c      	movs	r0, #12
    4be2:	f8c9 0000 	str.w	r0, [r9]
    4be6:	2600      	movs	r6, #0
    4be8:	e145      	b.n	4e76 <_realloc_r+0x2d2>
    4bea:	45b8      	cmp	r8, r7
    4bec:	f280 811a 	bge.w	4e24 <_realloc_r+0x280>
    4bf0:	4aa2      	ldr	r2, [pc, #648]	; (4e7c <_realloc_r+0x2d8>)
    4bf2:	6891      	ldr	r1, [r2, #8]
    4bf4:	eb0b 0308 	add.w	r3, fp, r8
    4bf8:	428b      	cmp	r3, r1
    4bfa:	d006      	beq.n	4c0a <_realloc_r+0x66>
    4bfc:	6858      	ldr	r0, [r3, #4]
    4bfe:	f020 0201 	bic.w	r2, r0, #1
    4c02:	1898      	adds	r0, r3, r2
    4c04:	6842      	ldr	r2, [r0, #4]
    4c06:	07d0      	lsls	r0, r2, #31
    4c08:	d426      	bmi.n	4c58 <_realloc_r+0xb4>
    4c0a:	685a      	ldr	r2, [r3, #4]
    4c0c:	428b      	cmp	r3, r1
    4c0e:	f022 0003 	bic.w	r0, r2, #3
    4c12:	eb00 0a08 	add.w	sl, r0, r8
    4c16:	d118      	bne.n	4c4a <_realloc_r+0xa6>
    4c18:	f107 0210 	add.w	r2, r7, #16
    4c1c:	4592      	cmp	sl, r2
    4c1e:	db1d      	blt.n	4c5c <_realloc_r+0xb8>
    4c20:	eb0b 0507 	add.w	r5, fp, r7
    4c24:	ebc7 0a0a 	rsb	sl, r7, sl
    4c28:	f04a 0101 	orr.w	r1, sl, #1
    4c2c:	6069      	str	r1, [r5, #4]
    4c2e:	f854 2c04 	ldr.w	r2, [r4, #-4]
    4c32:	4e92      	ldr	r6, [pc, #584]	; (4e7c <_realloc_r+0x2d8>)
    4c34:	f002 0301 	and.w	r3, r2, #1
    4c38:	431f      	orrs	r7, r3
    4c3a:	60b5      	str	r5, [r6, #8]
    4c3c:	f844 7c04 	str.w	r7, [r4, #-4]
    4c40:	4648      	mov	r0, r9
    4c42:	f7ff ffad 	bl	4ba0 <__malloc_unlock>
    4c46:	4626      	mov	r6, r4
    4c48:	e115      	b.n	4e76 <_realloc_r+0x2d2>
    4c4a:	45ba      	cmp	sl, r7
    4c4c:	db06      	blt.n	4c5c <_realloc_r+0xb8>
    4c4e:	68dd      	ldr	r5, [r3, #12]
    4c50:	689e      	ldr	r6, [r3, #8]
    4c52:	60f5      	str	r5, [r6, #12]
    4c54:	60ae      	str	r6, [r5, #8]
    4c56:	e0e6      	b.n	4e26 <_realloc_r+0x282>
    4c58:	2000      	movs	r0, #0
    4c5a:	4603      	mov	r3, r0
    4c5c:	07ea      	lsls	r2, r5, #31
    4c5e:	f100 8091 	bmi.w	4d84 <_realloc_r+0x1e0>
    4c62:	f854 5c08 	ldr.w	r5, [r4, #-8]
    4c66:	ebc5 050b 	rsb	r5, r5, fp
    4c6a:	686a      	ldr	r2, [r5, #4]
    4c6c:	f022 0203 	bic.w	r2, r2, #3
    4c70:	2b00      	cmp	r3, #0
    4c72:	d051      	beq.n	4d18 <_realloc_r+0x174>
    4c74:	eb02 0a08 	add.w	sl, r2, r8
    4c78:	428b      	cmp	r3, r1
    4c7a:	4482      	add	sl, r0
    4c7c:	d145      	bne.n	4d0a <_realloc_r+0x166>
    4c7e:	f107 0310 	add.w	r3, r7, #16
    4c82:	459a      	cmp	sl, r3
    4c84:	db48      	blt.n	4d18 <_realloc_r+0x174>
    4c86:	462e      	mov	r6, r5
    4c88:	68e9      	ldr	r1, [r5, #12]
    4c8a:	f856 3f08 	ldr.w	r3, [r6, #8]!
    4c8e:	f1a8 0204 	sub.w	r2, r8, #4
    4c92:	2a24      	cmp	r2, #36	; 0x24
    4c94:	60d9      	str	r1, [r3, #12]
    4c96:	608b      	str	r3, [r1, #8]
    4c98:	d825      	bhi.n	4ce6 <_realloc_r+0x142>
    4c9a:	2a13      	cmp	r2, #19
    4c9c:	d91b      	bls.n	4cd6 <_realloc_r+0x132>
    4c9e:	6821      	ldr	r1, [r4, #0]
    4ca0:	60a9      	str	r1, [r5, #8]
    4ca2:	6863      	ldr	r3, [r4, #4]
    4ca4:	2a1b      	cmp	r2, #27
    4ca6:	60eb      	str	r3, [r5, #12]
    4ca8:	d803      	bhi.n	4cb2 <_realloc_r+0x10e>
    4caa:	f105 0010 	add.w	r0, r5, #16
    4cae:	3408      	adds	r4, #8
    4cb0:	e012      	b.n	4cd8 <_realloc_r+0x134>
    4cb2:	68a0      	ldr	r0, [r4, #8]
    4cb4:	6128      	str	r0, [r5, #16]
    4cb6:	68e1      	ldr	r1, [r4, #12]
    4cb8:	2a24      	cmp	r2, #36	; 0x24
    4cba:	6169      	str	r1, [r5, #20]
    4cbc:	d003      	beq.n	4cc6 <_realloc_r+0x122>
    4cbe:	f105 0018 	add.w	r0, r5, #24
    4cc2:	3410      	adds	r4, #16
    4cc4:	e008      	b.n	4cd8 <_realloc_r+0x134>
    4cc6:	6922      	ldr	r2, [r4, #16]
    4cc8:	61aa      	str	r2, [r5, #24]
    4cca:	6963      	ldr	r3, [r4, #20]
    4ccc:	f105 0020 	add.w	r0, r5, #32
    4cd0:	61eb      	str	r3, [r5, #28]
    4cd2:	3418      	adds	r4, #24
    4cd4:	e000      	b.n	4cd8 <_realloc_r+0x134>
    4cd6:	4630      	mov	r0, r6
    4cd8:	6821      	ldr	r1, [r4, #0]
    4cda:	6001      	str	r1, [r0, #0]
    4cdc:	6862      	ldr	r2, [r4, #4]
    4cde:	6042      	str	r2, [r0, #4]
    4ce0:	68a3      	ldr	r3, [r4, #8]
    4ce2:	6083      	str	r3, [r0, #8]
    4ce4:	e003      	b.n	4cee <_realloc_r+0x14a>
    4ce6:	4630      	mov	r0, r6
    4ce8:	4621      	mov	r1, r4
    4cea:	f7ff ff3e 	bl	4b6a <memmove>
    4cee:	19e8      	adds	r0, r5, r7
    4cf0:	ebc7 0a0a 	rsb	sl, r7, sl
    4cf4:	f04a 0201 	orr.w	r2, sl, #1
    4cf8:	6042      	str	r2, [r0, #4]
    4cfa:	686b      	ldr	r3, [r5, #4]
    4cfc:	495f      	ldr	r1, [pc, #380]	; (4e7c <_realloc_r+0x2d8>)
    4cfe:	6088      	str	r0, [r1, #8]
    4d00:	f003 0001 	and.w	r0, r3, #1
    4d04:	4307      	orrs	r7, r0
    4d06:	606f      	str	r7, [r5, #4]
    4d08:	e088      	b.n	4e1c <_realloc_r+0x278>
    4d0a:	45ba      	cmp	sl, r7
    4d0c:	db04      	blt.n	4d18 <_realloc_r+0x174>
    4d0e:	68d9      	ldr	r1, [r3, #12]
    4d10:	6898      	ldr	r0, [r3, #8]
    4d12:	60c1      	str	r1, [r0, #12]
    4d14:	6088      	str	r0, [r1, #8]
    4d16:	e003      	b.n	4d20 <_realloc_r+0x17c>
    4d18:	eb02 0a08 	add.w	sl, r2, r8
    4d1c:	45ba      	cmp	sl, r7
    4d1e:	db31      	blt.n	4d84 <_realloc_r+0x1e0>
    4d20:	4628      	mov	r0, r5
    4d22:	68eb      	ldr	r3, [r5, #12]
    4d24:	f850 1f08 	ldr.w	r1, [r0, #8]!
    4d28:	f1a8 0204 	sub.w	r2, r8, #4
    4d2c:	2a24      	cmp	r2, #36	; 0x24
    4d2e:	60cb      	str	r3, [r1, #12]
    4d30:	6099      	str	r1, [r3, #8]
    4d32:	d823      	bhi.n	4d7c <_realloc_r+0x1d8>
    4d34:	2a13      	cmp	r2, #19
    4d36:	d91a      	bls.n	4d6e <_realloc_r+0x1ca>
    4d38:	6820      	ldr	r0, [r4, #0]
    4d3a:	60a8      	str	r0, [r5, #8]
    4d3c:	6866      	ldr	r6, [r4, #4]
    4d3e:	2a1b      	cmp	r2, #27
    4d40:	60ee      	str	r6, [r5, #12]
    4d42:	d803      	bhi.n	4d4c <_realloc_r+0x1a8>
    4d44:	f105 0010 	add.w	r0, r5, #16
    4d48:	3408      	adds	r4, #8
    4d4a:	e010      	b.n	4d6e <_realloc_r+0x1ca>
    4d4c:	68a3      	ldr	r3, [r4, #8]
    4d4e:	612b      	str	r3, [r5, #16]
    4d50:	68e1      	ldr	r1, [r4, #12]
    4d52:	2a24      	cmp	r2, #36	; 0x24
    4d54:	6169      	str	r1, [r5, #20]
    4d56:	d003      	beq.n	4d60 <_realloc_r+0x1bc>
    4d58:	f105 0018 	add.w	r0, r5, #24
    4d5c:	3410      	adds	r4, #16
    4d5e:	e006      	b.n	4d6e <_realloc_r+0x1ca>
    4d60:	6922      	ldr	r2, [r4, #16]
    4d62:	61aa      	str	r2, [r5, #24]
    4d64:	6960      	ldr	r0, [r4, #20]
    4d66:	3418      	adds	r4, #24
    4d68:	61e8      	str	r0, [r5, #28]
    4d6a:	f105 0020 	add.w	r0, r5, #32
    4d6e:	6826      	ldr	r6, [r4, #0]
    4d70:	6006      	str	r6, [r0, #0]
    4d72:	6863      	ldr	r3, [r4, #4]
    4d74:	6043      	str	r3, [r0, #4]
    4d76:	68a1      	ldr	r1, [r4, #8]
    4d78:	6081      	str	r1, [r0, #8]
    4d7a:	e055      	b.n	4e28 <_realloc_r+0x284>
    4d7c:	4621      	mov	r1, r4
    4d7e:	f7ff fef4 	bl	4b6a <memmove>
    4d82:	e051      	b.n	4e28 <_realloc_r+0x284>
    4d84:	4631      	mov	r1, r6
    4d86:	4648      	mov	r0, r9
    4d88:	f7ff fcd6 	bl	4738 <_malloc_r>
    4d8c:	4606      	mov	r6, r0
    4d8e:	2800      	cmp	r0, #0
    4d90:	d044      	beq.n	4e1c <_realloc_r+0x278>
    4d92:	f854 1c04 	ldr.w	r1, [r4, #-4]
    4d96:	f021 0301 	bic.w	r3, r1, #1
    4d9a:	f1a0 0208 	sub.w	r2, r0, #8
    4d9e:	eb0b 0103 	add.w	r1, fp, r3
    4da2:	428a      	cmp	r2, r1
    4da4:	d106      	bne.n	4db4 <_realloc_r+0x210>
    4da6:	f850 6c04 	ldr.w	r6, [r0, #-4]
    4daa:	f026 0503 	bic.w	r5, r6, #3
    4dae:	eb05 0a08 	add.w	sl, r5, r8
    4db2:	e038      	b.n	4e26 <_realloc_r+0x282>
    4db4:	f1a8 0204 	sub.w	r2, r8, #4
    4db8:	2a24      	cmp	r2, #36	; 0x24
    4dba:	d828      	bhi.n	4e0e <_realloc_r+0x26a>
    4dbc:	2a13      	cmp	r2, #19
    4dbe:	d91e      	bls.n	4dfe <_realloc_r+0x25a>
    4dc0:	6823      	ldr	r3, [r4, #0]
    4dc2:	6003      	str	r3, [r0, #0]
    4dc4:	6861      	ldr	r1, [r4, #4]
    4dc6:	2a1b      	cmp	r2, #27
    4dc8:	6041      	str	r1, [r0, #4]
    4dca:	d804      	bhi.n	4dd6 <_realloc_r+0x232>
    4dcc:	f100 0008 	add.w	r0, r0, #8
    4dd0:	f104 0208 	add.w	r2, r4, #8
    4dd4:	e014      	b.n	4e00 <_realloc_r+0x25c>
    4dd6:	68a0      	ldr	r0, [r4, #8]
    4dd8:	60b0      	str	r0, [r6, #8]
    4dda:	68e3      	ldr	r3, [r4, #12]
    4ddc:	2a24      	cmp	r2, #36	; 0x24
    4dde:	60f3      	str	r3, [r6, #12]
    4de0:	d004      	beq.n	4dec <_realloc_r+0x248>
    4de2:	f106 0010 	add.w	r0, r6, #16
    4de6:	f104 0210 	add.w	r2, r4, #16
    4dea:	e009      	b.n	4e00 <_realloc_r+0x25c>
    4dec:	6922      	ldr	r2, [r4, #16]
    4dee:	6132      	str	r2, [r6, #16]
    4df0:	6961      	ldr	r1, [r4, #20]
    4df2:	f106 0018 	add.w	r0, r6, #24
    4df6:	6171      	str	r1, [r6, #20]
    4df8:	f104 0218 	add.w	r2, r4, #24
    4dfc:	e000      	b.n	4e00 <_realloc_r+0x25c>
    4dfe:	4622      	mov	r2, r4
    4e00:	6813      	ldr	r3, [r2, #0]
    4e02:	6003      	str	r3, [r0, #0]
    4e04:	6851      	ldr	r1, [r2, #4]
    4e06:	6041      	str	r1, [r0, #4]
    4e08:	6892      	ldr	r2, [r2, #8]
    4e0a:	6082      	str	r2, [r0, #8]
    4e0c:	e002      	b.n	4e14 <_realloc_r+0x270>
    4e0e:	4621      	mov	r1, r4
    4e10:	f7ff feab 	bl	4b6a <memmove>
    4e14:	4648      	mov	r0, r9
    4e16:	4621      	mov	r1, r4
    4e18:	f7ff f97a 	bl	4110 <_free_r>
    4e1c:	4648      	mov	r0, r9
    4e1e:	f7ff febf 	bl	4ba0 <__malloc_unlock>
    4e22:	e028      	b.n	4e76 <_realloc_r+0x2d2>
    4e24:	46c2      	mov	sl, r8
    4e26:	465d      	mov	r5, fp
    4e28:	ebc7 000a 	rsb	r0, r7, sl
    4e2c:	280f      	cmp	r0, #15
    4e2e:	686a      	ldr	r2, [r5, #4]
    4e30:	d911      	bls.n	4e56 <_realloc_r+0x2b2>
    4e32:	19e9      	adds	r1, r5, r7
    4e34:	f002 0601 	and.w	r6, r2, #1
    4e38:	4337      	orrs	r7, r6
    4e3a:	f040 0301 	orr.w	r3, r0, #1
    4e3e:	1808      	adds	r0, r1, r0
    4e40:	606f      	str	r7, [r5, #4]
    4e42:	604b      	str	r3, [r1, #4]
    4e44:	6842      	ldr	r2, [r0, #4]
    4e46:	f042 0601 	orr.w	r6, r2, #1
    4e4a:	6046      	str	r6, [r0, #4]
    4e4c:	3108      	adds	r1, #8
    4e4e:	4648      	mov	r0, r9
    4e50:	f7ff f95e 	bl	4110 <_free_r>
    4e54:	e00a      	b.n	4e6c <_realloc_r+0x2c8>
    4e56:	f002 0601 	and.w	r6, r2, #1
    4e5a:	eb05 010a 	add.w	r1, r5, sl
    4e5e:	ea4a 0306 	orr.w	r3, sl, r6
    4e62:	606b      	str	r3, [r5, #4]
    4e64:	6848      	ldr	r0, [r1, #4]
    4e66:	f040 0201 	orr.w	r2, r0, #1
    4e6a:	604a      	str	r2, [r1, #4]
    4e6c:	4648      	mov	r0, r9
    4e6e:	f7ff fe97 	bl	4ba0 <__malloc_unlock>
    4e72:	f105 0608 	add.w	r6, r5, #8
    4e76:	4630      	mov	r0, r6
    4e78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4e7c:	200004fc 	.word	0x200004fc

00004e80 <_sbrk_r>:
    4e80:	b538      	push	{r3, r4, r5, lr}
    4e82:	4c06      	ldr	r4, [pc, #24]	; (4e9c <_sbrk_r+0x1c>)
    4e84:	2300      	movs	r3, #0
    4e86:	4605      	mov	r5, r0
    4e88:	4608      	mov	r0, r1
    4e8a:	6023      	str	r3, [r4, #0]
    4e8c:	f7fe f87a 	bl	2f84 <_sbrk>
    4e90:	1c43      	adds	r3, r0, #1
    4e92:	d102      	bne.n	4e9a <_sbrk_r+0x1a>
    4e94:	6821      	ldr	r1, [r4, #0]
    4e96:	b101      	cbz	r1, 4e9a <_sbrk_r+0x1a>
    4e98:	6029      	str	r1, [r5, #0]
    4e9a:	bd38      	pop	{r3, r4, r5, pc}
    4e9c:	20000a70 	.word	0x20000a70

00004ea0 <__sread>:
    4ea0:	b510      	push	{r4, lr}
    4ea2:	460c      	mov	r4, r1
    4ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    4ea8:	f000 f99c 	bl	51e4 <_read_r>
    4eac:	2800      	cmp	r0, #0
    4eae:	db03      	blt.n	4eb8 <__sread+0x18>
    4eb0:	6d22      	ldr	r2, [r4, #80]	; 0x50
    4eb2:	1813      	adds	r3, r2, r0
    4eb4:	6523      	str	r3, [r4, #80]	; 0x50
    4eb6:	bd10      	pop	{r4, pc}
    4eb8:	89a3      	ldrh	r3, [r4, #12]
    4eba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
    4ebe:	81a1      	strh	r1, [r4, #12]
    4ec0:	bd10      	pop	{r4, pc}

00004ec2 <__seofread>:
    4ec2:	2000      	movs	r0, #0
    4ec4:	4770      	bx	lr

00004ec6 <__swrite>:
    4ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4eca:	461d      	mov	r5, r3
    4ecc:	898b      	ldrh	r3, [r1, #12]
    4ece:	460c      	mov	r4, r1
    4ed0:	f403 7180 	and.w	r1, r3, #256	; 0x100
    4ed4:	4616      	mov	r6, r2
    4ed6:	b20a      	sxth	r2, r1
    4ed8:	4607      	mov	r7, r0
    4eda:	b12a      	cbz	r2, 4ee8 <__swrite+0x22>
    4edc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    4ee0:	2200      	movs	r2, #0
    4ee2:	2302      	movs	r3, #2
    4ee4:	f000 f96c 	bl	51c0 <_lseek_r>
    4ee8:	89a0      	ldrh	r0, [r4, #12]
    4eea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    4eee:	f420 5380 	bic.w	r3, r0, #4096	; 0x1000
    4ef2:	81a3      	strh	r3, [r4, #12]
    4ef4:	4638      	mov	r0, r7
    4ef6:	4632      	mov	r2, r6
    4ef8:	462b      	mov	r3, r5
    4efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4efe:	f000 b8d1 	b.w	50a4 <_write_r>

00004f02 <__sseek>:
    4f02:	b510      	push	{r4, lr}
    4f04:	460c      	mov	r4, r1
    4f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    4f0a:	f000 f959 	bl	51c0 <_lseek_r>
    4f0e:	1c43      	adds	r3, r0, #1
    4f10:	89a3      	ldrh	r3, [r4, #12]
    4f12:	d103      	bne.n	4f1c <__sseek+0x1a>
    4f14:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    4f18:	81a2      	strh	r2, [r4, #12]
    4f1a:	bd10      	pop	{r4, pc}
    4f1c:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
    4f20:	81a1      	strh	r1, [r4, #12]
    4f22:	6520      	str	r0, [r4, #80]	; 0x50
    4f24:	bd10      	pop	{r4, pc}

00004f26 <__sclose>:
    4f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    4f2a:	f000 b8cd 	b.w	50c8 <_close_r>

00004f2e <strcmp>:
    4f2e:	f810 2b01 	ldrb.w	r2, [r0], #1
    4f32:	f811 3b01 	ldrb.w	r3, [r1], #1
    4f36:	2a01      	cmp	r2, #1
    4f38:	bf28      	it	cs
    4f3a:	429a      	cmpcs	r2, r3
    4f3c:	d0f7      	beq.n	4f2e <strcmp>
    4f3e:	eba2 0003 	sub.w	r0, r2, r3
    4f42:	4770      	bx	lr

00004f44 <__swbuf_r>:
    4f44:	b570      	push	{r4, r5, r6, lr}
    4f46:	460d      	mov	r5, r1
    4f48:	4614      	mov	r4, r2
    4f4a:	4606      	mov	r6, r0
    4f4c:	b118      	cbz	r0, 4f56 <__swbuf_r+0x12>
    4f4e:	6b83      	ldr	r3, [r0, #56]	; 0x38
    4f50:	b90b      	cbnz	r3, 4f56 <__swbuf_r+0x12>
    4f52:	f7fe ff9f 	bl	3e94 <__sinit>
    4f56:	89a1      	ldrh	r1, [r4, #12]
    4f58:	69a0      	ldr	r0, [r4, #24]
    4f5a:	f001 0208 	and.w	r2, r1, #8
    4f5e:	b213      	sxth	r3, r2
    4f60:	60a0      	str	r0, [r4, #8]
    4f62:	b10b      	cbz	r3, 4f68 <__swbuf_r+0x24>
    4f64:	6920      	ldr	r0, [r4, #16]
    4f66:	b958      	cbnz	r0, 4f80 <__swbuf_r+0x3c>
    4f68:	4630      	mov	r0, r6
    4f6a:	4621      	mov	r1, r4
    4f6c:	f7fe fe32 	bl	3bd4 <__swsetup_r>
    4f70:	b130      	cbz	r0, 4f80 <__swbuf_r+0x3c>
    4f72:	89a5      	ldrh	r5, [r4, #12]
    4f74:	2009      	movs	r0, #9
    4f76:	f045 0140 	orr.w	r1, r5, #64	; 0x40
    4f7a:	81a1      	strh	r1, [r4, #12]
    4f7c:	6030      	str	r0, [r6, #0]
    4f7e:	e017      	b.n	4fb0 <__swbuf_r+0x6c>
    4f80:	89a1      	ldrh	r1, [r4, #12]
    4f82:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
    4f86:	b213      	sxth	r3, r2
    4f88:	b2ed      	uxtb	r5, r5
    4f8a:	b933      	cbnz	r3, 4f9a <__swbuf_r+0x56>
    4f8c:	f441 5000 	orr.w	r0, r1, #8192	; 0x2000
    4f90:	6e61      	ldr	r1, [r4, #100]	; 0x64
    4f92:	81a0      	strh	r0, [r4, #12]
    4f94:	f421 5200 	bic.w	r2, r1, #8192	; 0x2000
    4f98:	6662      	str	r2, [r4, #100]	; 0x64
    4f9a:	6820      	ldr	r0, [r4, #0]
    4f9c:	6923      	ldr	r3, [r4, #16]
    4f9e:	6961      	ldr	r1, [r4, #20]
    4fa0:	1ac0      	subs	r0, r0, r3
    4fa2:	4288      	cmp	r0, r1
    4fa4:	db07      	blt.n	4fb6 <__swbuf_r+0x72>
    4fa6:	4630      	mov	r0, r6
    4fa8:	4621      	mov	r1, r4
    4faa:	f7fe fe7f 	bl	3cac <_fflush_r>
    4fae:	b110      	cbz	r0, 4fb6 <__swbuf_r+0x72>
    4fb0:	f04f 35ff 	mov.w	r5, #4294967295
    4fb4:	e015      	b.n	4fe2 <__swbuf_r+0x9e>
    4fb6:	68a2      	ldr	r2, [r4, #8]
    4fb8:	6821      	ldr	r1, [r4, #0]
    4fba:	1e53      	subs	r3, r2, #1
    4fbc:	60a3      	str	r3, [r4, #8]
    4fbe:	f801 5b01 	strb.w	r5, [r1], #1
    4fc2:	6962      	ldr	r2, [r4, #20]
    4fc4:	6021      	str	r1, [r4, #0]
    4fc6:	3001      	adds	r0, #1
    4fc8:	4290      	cmp	r0, r2
    4fca:	d004      	beq.n	4fd6 <__swbuf_r+0x92>
    4fcc:	89a3      	ldrh	r3, [r4, #12]
    4fce:	07db      	lsls	r3, r3, #31
    4fd0:	d507      	bpl.n	4fe2 <__swbuf_r+0x9e>
    4fd2:	2d0a      	cmp	r5, #10
    4fd4:	d105      	bne.n	4fe2 <__swbuf_r+0x9e>
    4fd6:	4630      	mov	r0, r6
    4fd8:	4621      	mov	r1, r4
    4fda:	f7fe fe67 	bl	3cac <_fflush_r>
    4fde:	2800      	cmp	r0, #0
    4fe0:	d1e6      	bne.n	4fb0 <__swbuf_r+0x6c>
    4fe2:	4628      	mov	r0, r5
    4fe4:	bd70      	pop	{r4, r5, r6, pc}

00004fe6 <__swbuf>:
    4fe6:	460a      	mov	r2, r1
    4fe8:	4902      	ldr	r1, [pc, #8]	; (4ff4 <__swbuf+0xe>)
    4fea:	4603      	mov	r3, r0
    4fec:	6808      	ldr	r0, [r1, #0]
    4fee:	4619      	mov	r1, r3
    4ff0:	f7ff bfa8 	b.w	4f44 <__swbuf_r>
    4ff4:	20000050 	.word	0x20000050

00004ff8 <_wcrtomb_r>:
    4ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ffc:	461d      	mov	r5, r3
    4ffe:	4b10      	ldr	r3, [pc, #64]	; (5040 <_wcrtomb_r+0x48>)
    5000:	b086      	sub	sp, #24
    5002:	4604      	mov	r4, r0
    5004:	4690      	mov	r8, r2
    5006:	460e      	mov	r6, r1
    5008:	681f      	ldr	r7, [r3, #0]
    500a:	b939      	cbnz	r1, 501c <_wcrtomb_r+0x24>
    500c:	f7ff faf6 	bl	45fc <__locale_charset>
    5010:	9500      	str	r5, [sp, #0]
    5012:	4603      	mov	r3, r0
    5014:	a903      	add	r1, sp, #12
    5016:	4620      	mov	r0, r4
    5018:	4632      	mov	r2, r6
    501a:	e006      	b.n	502a <_wcrtomb_r+0x32>
    501c:	f7ff faee 	bl	45fc <__locale_charset>
    5020:	9500      	str	r5, [sp, #0]
    5022:	4603      	mov	r3, r0
    5024:	4631      	mov	r1, r6
    5026:	4620      	mov	r0, r4
    5028:	4642      	mov	r2, r8
    502a:	47b8      	blx	r7
    502c:	1c43      	adds	r3, r0, #1
    502e:	d103      	bne.n	5038 <_wcrtomb_r+0x40>
    5030:	2100      	movs	r1, #0
    5032:	228a      	movs	r2, #138	; 0x8a
    5034:	6029      	str	r1, [r5, #0]
    5036:	6022      	str	r2, [r4, #0]
    5038:	b006      	add	sp, #24
    503a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    503e:	bf00      	nop
    5040:	2000090c 	.word	0x2000090c

00005044 <wcrtomb>:
    5044:	b530      	push	{r4, r5, lr}
    5046:	4613      	mov	r3, r2
    5048:	4a04      	ldr	r2, [pc, #16]	; (505c <wcrtomb+0x18>)
    504a:	4605      	mov	r5, r0
    504c:	460c      	mov	r4, r1
    504e:	6810      	ldr	r0, [r2, #0]
    5050:	4629      	mov	r1, r5
    5052:	4622      	mov	r2, r4
    5054:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    5058:	f7ff bfce 	b.w	4ff8 <_wcrtomb_r>
    505c:	20000050 	.word	0x20000050

00005060 <__ascii_wctomb>:
    5060:	b149      	cbz	r1, 5076 <__ascii_wctomb+0x16>
    5062:	2aff      	cmp	r2, #255	; 0xff
    5064:	d904      	bls.n	5070 <__ascii_wctomb+0x10>
    5066:	238a      	movs	r3, #138	; 0x8a
    5068:	6003      	str	r3, [r0, #0]
    506a:	f04f 30ff 	mov.w	r0, #4294967295
    506e:	4770      	bx	lr
    5070:	700a      	strb	r2, [r1, #0]
    5072:	2001      	movs	r0, #1
    5074:	4770      	bx	lr
    5076:	4608      	mov	r0, r1
    5078:	4770      	bx	lr

0000507a <_wctomb_r>:
    507a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    507e:	4698      	mov	r8, r3
    5080:	4b07      	ldr	r3, [pc, #28]	; (50a0 <_wctomb_r+0x26>)
    5082:	4605      	mov	r5, r0
    5084:	460f      	mov	r7, r1
    5086:	4616      	mov	r6, r2
    5088:	681c      	ldr	r4, [r3, #0]
    508a:	f7ff fab7 	bl	45fc <__locale_charset>
    508e:	f8cd 8000 	str.w	r8, [sp]
    5092:	4603      	mov	r3, r0
    5094:	4639      	mov	r1, r7
    5096:	4628      	mov	r0, r5
    5098:	4632      	mov	r2, r6
    509a:	47a0      	blx	r4
    509c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    50a0:	2000090c 	.word	0x2000090c

000050a4 <_write_r>:
    50a4:	b538      	push	{r3, r4, r5, lr}
    50a6:	4c07      	ldr	r4, [pc, #28]	; (50c4 <_write_r+0x20>)
    50a8:	4605      	mov	r5, r0
    50aa:	2000      	movs	r0, #0
    50ac:	6020      	str	r0, [r4, #0]
    50ae:	4608      	mov	r0, r1
    50b0:	4611      	mov	r1, r2
    50b2:	461a      	mov	r2, r3
    50b4:	f7fb f9c0 	bl	438 <_write>
    50b8:	1c43      	adds	r3, r0, #1
    50ba:	d102      	bne.n	50c2 <_write_r+0x1e>
    50bc:	6823      	ldr	r3, [r4, #0]
    50be:	b103      	cbz	r3, 50c2 <_write_r+0x1e>
    50c0:	602b      	str	r3, [r5, #0]
    50c2:	bd38      	pop	{r3, r4, r5, pc}
    50c4:	20000a70 	.word	0x20000a70

000050c8 <_close_r>:
    50c8:	b538      	push	{r3, r4, r5, lr}
    50ca:	4c06      	ldr	r4, [pc, #24]	; (50e4 <_close_r+0x1c>)
    50cc:	2300      	movs	r3, #0
    50ce:	4605      	mov	r5, r0
    50d0:	4608      	mov	r0, r1
    50d2:	6023      	str	r3, [r4, #0]
    50d4:	f7fd ff6e 	bl	2fb4 <_close>
    50d8:	1c43      	adds	r3, r0, #1
    50da:	d102      	bne.n	50e2 <_close_r+0x1a>
    50dc:	6821      	ldr	r1, [r4, #0]
    50de:	b101      	cbz	r1, 50e2 <_close_r+0x1a>
    50e0:	6029      	str	r1, [r5, #0]
    50e2:	bd38      	pop	{r3, r4, r5, pc}
    50e4:	20000a70 	.word	0x20000a70

000050e8 <_fclose_r>:
    50e8:	b570      	push	{r4, r5, r6, lr}
    50ea:	4605      	mov	r5, r0
    50ec:	460c      	mov	r4, r1
    50ee:	2900      	cmp	r1, #0
    50f0:	d039      	beq.n	5166 <_fclose_r+0x7e>
    50f2:	f7fe ff33 	bl	3f5c <__sfp_lock_acquire>
    50f6:	b125      	cbz	r5, 5102 <_fclose_r+0x1a>
    50f8:	6bab      	ldr	r3, [r5, #56]	; 0x38
    50fa:	b913      	cbnz	r3, 5102 <_fclose_r+0x1a>
    50fc:	4628      	mov	r0, r5
    50fe:	f7fe fec9 	bl	3e94 <__sinit>
    5102:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
    5106:	b35e      	cbz	r6, 5160 <_fclose_r+0x78>
    5108:	4628      	mov	r0, r5
    510a:	4621      	mov	r1, r4
    510c:	f7fe fdce 	bl	3cac <_fflush_r>
    5110:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5112:	4606      	mov	r6, r0
    5114:	b13a      	cbz	r2, 5126 <_fclose_r+0x3e>
    5116:	4628      	mov	r0, r5
    5118:	69e1      	ldr	r1, [r4, #28]
    511a:	4790      	blx	r2
    511c:	ea36 0620 	bics.w	r6, r6, r0, asr #32
    5120:	bf28      	it	cs
    5122:	f04f 36ff 	movcs.w	r6, #4294967295
    5126:	89a0      	ldrh	r0, [r4, #12]
    5128:	f000 0180 	and.w	r1, r0, #128	; 0x80
    512c:	b20b      	sxth	r3, r1
    512e:	b11b      	cbz	r3, 5138 <_fclose_r+0x50>
    5130:	4628      	mov	r0, r5
    5132:	6921      	ldr	r1, [r4, #16]
    5134:	f7fe ffec 	bl	4110 <_free_r>
    5138:	6b21      	ldr	r1, [r4, #48]	; 0x30
    513a:	b141      	cbz	r1, 514e <_fclose_r+0x66>
    513c:	f104 0240 	add.w	r2, r4, #64	; 0x40
    5140:	4291      	cmp	r1, r2
    5142:	d002      	beq.n	514a <_fclose_r+0x62>
    5144:	4628      	mov	r0, r5
    5146:	f7fe ffe3 	bl	4110 <_free_r>
    514a:	2000      	movs	r0, #0
    514c:	6320      	str	r0, [r4, #48]	; 0x30
    514e:	6c61      	ldr	r1, [r4, #68]	; 0x44
    5150:	b121      	cbz	r1, 515c <_fclose_r+0x74>
    5152:	4628      	mov	r0, r5
    5154:	f7fe ffdc 	bl	4110 <_free_r>
    5158:	2100      	movs	r1, #0
    515a:	6461      	str	r1, [r4, #68]	; 0x44
    515c:	2300      	movs	r3, #0
    515e:	81a3      	strh	r3, [r4, #12]
    5160:	f7fe fefd 	bl	3f5e <__sfp_lock_release>
    5164:	e000      	b.n	5168 <_fclose_r+0x80>
    5166:	460e      	mov	r6, r1
    5168:	4630      	mov	r0, r6
    516a:	bd70      	pop	{r4, r5, r6, pc}

0000516c <fclose>:
    516c:	4b02      	ldr	r3, [pc, #8]	; (5178 <fclose+0xc>)
    516e:	4601      	mov	r1, r0
    5170:	6818      	ldr	r0, [r3, #0]
    5172:	f7ff bfb9 	b.w	50e8 <_fclose_r>
    5176:	bf00      	nop
    5178:	20000050 	.word	0x20000050

0000517c <_fstat_r>:
    517c:	b538      	push	{r3, r4, r5, lr}
    517e:	4c07      	ldr	r4, [pc, #28]	; (519c <_fstat_r+0x20>)
    5180:	2300      	movs	r3, #0
    5182:	4605      	mov	r5, r0
    5184:	4608      	mov	r0, r1
    5186:	4611      	mov	r1, r2
    5188:	6023      	str	r3, [r4, #0]
    518a:	f7fd ff17 	bl	2fbc <_fstat>
    518e:	1c43      	adds	r3, r0, #1
    5190:	d102      	bne.n	5198 <_fstat_r+0x1c>
    5192:	6821      	ldr	r1, [r4, #0]
    5194:	b101      	cbz	r1, 5198 <_fstat_r+0x1c>
    5196:	6029      	str	r1, [r5, #0]
    5198:	bd38      	pop	{r3, r4, r5, pc}
    519a:	bf00      	nop
    519c:	20000a70 	.word	0x20000a70

000051a0 <_isatty_r>:
    51a0:	b538      	push	{r3, r4, r5, lr}
    51a2:	4c06      	ldr	r4, [pc, #24]	; (51bc <_isatty_r+0x1c>)
    51a4:	2300      	movs	r3, #0
    51a6:	4605      	mov	r5, r0
    51a8:	4608      	mov	r0, r1
    51aa:	6023      	str	r3, [r4, #0]
    51ac:	f7fd ff0c 	bl	2fc8 <_isatty>
    51b0:	1c43      	adds	r3, r0, #1
    51b2:	d102      	bne.n	51ba <_isatty_r+0x1a>
    51b4:	6821      	ldr	r1, [r4, #0]
    51b6:	b101      	cbz	r1, 51ba <_isatty_r+0x1a>
    51b8:	6029      	str	r1, [r5, #0]
    51ba:	bd38      	pop	{r3, r4, r5, pc}
    51bc:	20000a70 	.word	0x20000a70

000051c0 <_lseek_r>:
    51c0:	b538      	push	{r3, r4, r5, lr}
    51c2:	4c07      	ldr	r4, [pc, #28]	; (51e0 <_lseek_r+0x20>)
    51c4:	4605      	mov	r5, r0
    51c6:	2000      	movs	r0, #0
    51c8:	6020      	str	r0, [r4, #0]
    51ca:	4608      	mov	r0, r1
    51cc:	4611      	mov	r1, r2
    51ce:	461a      	mov	r2, r3
    51d0:	f7fd fefe 	bl	2fd0 <_lseek>
    51d4:	1c43      	adds	r3, r0, #1
    51d6:	d102      	bne.n	51de <_lseek_r+0x1e>
    51d8:	6823      	ldr	r3, [r4, #0]
    51da:	b103      	cbz	r3, 51de <_lseek_r+0x1e>
    51dc:	602b      	str	r3, [r5, #0]
    51de:	bd38      	pop	{r3, r4, r5, pc}
    51e0:	20000a70 	.word	0x20000a70

000051e4 <_read_r>:
    51e4:	b538      	push	{r3, r4, r5, lr}
    51e6:	4c07      	ldr	r4, [pc, #28]	; (5204 <_read_r+0x20>)
    51e8:	4605      	mov	r5, r0
    51ea:	2000      	movs	r0, #0
    51ec:	6020      	str	r0, [r4, #0]
    51ee:	4608      	mov	r0, r1
    51f0:	4611      	mov	r1, r2
    51f2:	461a      	mov	r2, r3
    51f4:	f7fb f8dc 	bl	3b0 <_read>
    51f8:	1c43      	adds	r3, r0, #1
    51fa:	d102      	bne.n	5202 <_read_r+0x1e>
    51fc:	6823      	ldr	r3, [r4, #0]
    51fe:	b103      	cbz	r3, 5202 <_read_r+0x1e>
    5200:	602b      	str	r3, [r5, #0]
    5202:	bd38      	pop	{r3, r4, r5, pc}
    5204:	20000a70 	.word	0x20000a70

00005208 <__aeabi_uldivmod>:
    5208:	b94b      	cbnz	r3, 521e <__aeabi_uldivmod+0x16>
    520a:	b942      	cbnz	r2, 521e <__aeabi_uldivmod+0x16>
    520c:	2900      	cmp	r1, #0
    520e:	bf08      	it	eq
    5210:	2800      	cmpeq	r0, #0
    5212:	d002      	beq.n	521a <__aeabi_uldivmod+0x12>
    5214:	f04f 31ff 	mov.w	r1, #4294967295
    5218:	4608      	mov	r0, r1
    521a:	f000 b837 	b.w	528c <__aeabi_idiv0>
    521e:	b082      	sub	sp, #8
    5220:	46ec      	mov	ip, sp
    5222:	e92d 5000 	stmdb	sp!, {ip, lr}
    5226:	f000 f81b 	bl	5260 <__gnu_uldivmod_helper>
    522a:	f8dd e004 	ldr.w	lr, [sp, #4]
    522e:	b002      	add	sp, #8
    5230:	bc0c      	pop	{r2, r3}
    5232:	4770      	bx	lr

00005234 <__gnu_ldivmod_helper>:
    5234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5236:	4616      	mov	r6, r2
    5238:	4604      	mov	r4, r0
    523a:	460d      	mov	r5, r1
    523c:	461f      	mov	r7, r3
    523e:	f000 f827 	bl	5290 <__divdi3>
    5242:	fb06 f301 	mul.w	r3, r6, r1
    5246:	fb00 3707 	mla	r7, r0, r7, r3
    524a:	fba6 2300 	umull	r2, r3, r6, r0
    524e:	18fb      	adds	r3, r7, r3
    5250:	1aa2      	subs	r2, r4, r2
    5252:	eb65 0303 	sbc.w	r3, r5, r3
    5256:	9c06      	ldr	r4, [sp, #24]
    5258:	e9c4 2300 	strd	r2, r3, [r4]
    525c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    525e:	bf00      	nop

00005260 <__gnu_uldivmod_helper>:
    5260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5262:	4616      	mov	r6, r2
    5264:	4604      	mov	r4, r0
    5266:	460d      	mov	r5, r1
    5268:	461f      	mov	r7, r3
    526a:	f000 f96f 	bl	554c <__udivdi3>
    526e:	fb00 f707 	mul.w	r7, r0, r7
    5272:	fba0 2306 	umull	r2, r3, r0, r6
    5276:	fb06 7701 	mla	r7, r6, r1, r7
    527a:	18fb      	adds	r3, r7, r3
    527c:	1aa2      	subs	r2, r4, r2
    527e:	eb65 0303 	sbc.w	r3, r5, r3
    5282:	9c06      	ldr	r4, [sp, #24]
    5284:	e9c4 2300 	strd	r2, r3, [r4]
    5288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    528a:	bf00      	nop

0000528c <__aeabi_idiv0>:
    528c:	4770      	bx	lr
    528e:	bf00      	nop

00005290 <__divdi3>:
    5290:	2900      	cmp	r1, #0
    5292:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5296:	461d      	mov	r5, r3
    5298:	f2c0 809d 	blt.w	53d6 <__divdi3+0x146>
    529c:	2400      	movs	r4, #0
    529e:	2d00      	cmp	r5, #0
    52a0:	f2c0 8094 	blt.w	53cc <__divdi3+0x13c>
    52a4:	4680      	mov	r8, r0
    52a6:	460f      	mov	r7, r1
    52a8:	4694      	mov	ip, r2
    52aa:	461e      	mov	r6, r3
    52ac:	bbe3      	cbnz	r3, 5328 <__divdi3+0x98>
    52ae:	428a      	cmp	r2, r1
    52b0:	d955      	bls.n	535e <__divdi3+0xce>
    52b2:	fab2 f782 	clz	r7, r2
    52b6:	b147      	cbz	r7, 52ca <__divdi3+0x3a>
    52b8:	f1c7 0520 	rsb	r5, r7, #32
    52bc:	fa20 f605 	lsr.w	r6, r0, r5
    52c0:	fa01 f107 	lsl.w	r1, r1, r7
    52c4:	40ba      	lsls	r2, r7
    52c6:	4331      	orrs	r1, r6
    52c8:	40b8      	lsls	r0, r7
    52ca:	0c17      	lsrs	r7, r2, #16
    52cc:	fbb1 f6f7 	udiv	r6, r1, r7
    52d0:	0c03      	lsrs	r3, r0, #16
    52d2:	fa1f fc82 	uxth.w	ip, r2
    52d6:	fb07 1116 	mls	r1, r7, r6, r1
    52da:	fb0c f506 	mul.w	r5, ip, r6
    52de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    52e2:	429d      	cmp	r5, r3
    52e4:	d908      	bls.n	52f8 <__divdi3+0x68>
    52e6:	1e71      	subs	r1, r6, #1
    52e8:	189b      	adds	r3, r3, r2
    52ea:	f080 8113 	bcs.w	5514 <__divdi3+0x284>
    52ee:	429d      	cmp	r5, r3
    52f0:	f240 8110 	bls.w	5514 <__divdi3+0x284>
    52f4:	3e02      	subs	r6, #2
    52f6:	189b      	adds	r3, r3, r2
    52f8:	1b59      	subs	r1, r3, r5
    52fa:	fbb1 f5f7 	udiv	r5, r1, r7
    52fe:	fb07 1315 	mls	r3, r7, r5, r1
    5302:	b280      	uxth	r0, r0
    5304:	fb0c fc05 	mul.w	ip, ip, r5
    5308:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
    530c:	458c      	cmp	ip, r1
    530e:	d907      	bls.n	5320 <__divdi3+0x90>
    5310:	1e6b      	subs	r3, r5, #1
    5312:	188a      	adds	r2, r1, r2
    5314:	f080 8100 	bcs.w	5518 <__divdi3+0x288>
    5318:	4594      	cmp	ip, r2
    531a:	f240 80fd 	bls.w	5518 <__divdi3+0x288>
    531e:	3d02      	subs	r5, #2
    5320:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
    5324:	2500      	movs	r5, #0
    5326:	e003      	b.n	5330 <__divdi3+0xa0>
    5328:	428b      	cmp	r3, r1
    532a:	d90c      	bls.n	5346 <__divdi3+0xb6>
    532c:	2500      	movs	r5, #0
    532e:	4629      	mov	r1, r5
    5330:	460a      	mov	r2, r1
    5332:	462b      	mov	r3, r5
    5334:	b114      	cbz	r4, 533c <__divdi3+0xac>
    5336:	4252      	negs	r2, r2
    5338:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    533c:	4610      	mov	r0, r2
    533e:	4619      	mov	r1, r3
    5340:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5344:	4770      	bx	lr
    5346:	fab3 f583 	clz	r5, r3
    534a:	2d00      	cmp	r5, #0
    534c:	f040 8087 	bne.w	545e <__divdi3+0x1ce>
    5350:	428b      	cmp	r3, r1
    5352:	d301      	bcc.n	5358 <__divdi3+0xc8>
    5354:	4282      	cmp	r2, r0
    5356:	d8ea      	bhi.n	532e <__divdi3+0x9e>
    5358:	2500      	movs	r5, #0
    535a:	2101      	movs	r1, #1
    535c:	e7e8      	b.n	5330 <__divdi3+0xa0>
    535e:	b912      	cbnz	r2, 5366 <__divdi3+0xd6>
    5360:	2601      	movs	r6, #1
    5362:	fbb6 f2f2 	udiv	r2, r6, r2
    5366:	fab2 f682 	clz	r6, r2
    536a:	2e00      	cmp	r6, #0
    536c:	d139      	bne.n	53e2 <__divdi3+0x152>
    536e:	1a8e      	subs	r6, r1, r2
    5370:	0c13      	lsrs	r3, r2, #16
    5372:	fa1f fc82 	uxth.w	ip, r2
    5376:	2501      	movs	r5, #1
    5378:	fbb6 f7f3 	udiv	r7, r6, r3
    537c:	fb03 6117 	mls	r1, r3, r7, r6
    5380:	ea4f 4910 	mov.w	r9, r0, lsr #16
    5384:	fb0c f807 	mul.w	r8, ip, r7
    5388:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
    538c:	45b0      	cmp	r8, r6
    538e:	d906      	bls.n	539e <__divdi3+0x10e>
    5390:	1e79      	subs	r1, r7, #1
    5392:	18b6      	adds	r6, r6, r2
    5394:	d202      	bcs.n	539c <__divdi3+0x10c>
    5396:	45b0      	cmp	r8, r6
    5398:	f200 80d3 	bhi.w	5542 <__divdi3+0x2b2>
    539c:	460f      	mov	r7, r1
    539e:	ebc8 0606 	rsb	r6, r8, r6
    53a2:	fbb6 f1f3 	udiv	r1, r6, r3
    53a6:	fb03 6311 	mls	r3, r3, r1, r6
    53aa:	b280      	uxth	r0, r0
    53ac:	fb0c fc01 	mul.w	ip, ip, r1
    53b0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    53b4:	459c      	cmp	ip, r3
    53b6:	d906      	bls.n	53c6 <__divdi3+0x136>
    53b8:	1e4e      	subs	r6, r1, #1
    53ba:	189a      	adds	r2, r3, r2
    53bc:	d202      	bcs.n	53c4 <__divdi3+0x134>
    53be:	4594      	cmp	ip, r2
    53c0:	f200 80c2 	bhi.w	5548 <__divdi3+0x2b8>
    53c4:	4631      	mov	r1, r6
    53c6:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
    53ca:	e7b1      	b.n	5330 <__divdi3+0xa0>
    53cc:	43e4      	mvns	r4, r4
    53ce:	4252      	negs	r2, r2
    53d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    53d4:	e766      	b.n	52a4 <__divdi3+0x14>
    53d6:	4240      	negs	r0, r0
    53d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    53dc:	f04f 34ff 	mov.w	r4, #4294967295
    53e0:	e75d      	b.n	529e <__divdi3+0xe>
    53e2:	40b2      	lsls	r2, r6
    53e4:	f1c6 0920 	rsb	r9, r6, #32
    53e8:	fa21 f709 	lsr.w	r7, r1, r9
    53ec:	fa20 f509 	lsr.w	r5, r0, r9
    53f0:	0c13      	lsrs	r3, r2, #16
    53f2:	fa01 f106 	lsl.w	r1, r1, r6
    53f6:	fbb7 f8f3 	udiv	r8, r7, r3
    53fa:	ea45 0901 	orr.w	r9, r5, r1
    53fe:	fa1f fc82 	uxth.w	ip, r2
    5402:	fb03 7718 	mls	r7, r3, r8, r7
    5406:	ea4f 4119 	mov.w	r1, r9, lsr #16
    540a:	fb0c f508 	mul.w	r5, ip, r8
    540e:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
    5412:	40b0      	lsls	r0, r6
    5414:	42bd      	cmp	r5, r7
    5416:	d90a      	bls.n	542e <__divdi3+0x19e>
    5418:	18bf      	adds	r7, r7, r2
    541a:	f108 36ff 	add.w	r6, r8, #4294967295
    541e:	f080 808e 	bcs.w	553e <__divdi3+0x2ae>
    5422:	42bd      	cmp	r5, r7
    5424:	f240 808b 	bls.w	553e <__divdi3+0x2ae>
    5428:	f1a8 0802 	sub.w	r8, r8, #2
    542c:	18bf      	adds	r7, r7, r2
    542e:	1b79      	subs	r1, r7, r5
    5430:	fbb1 f5f3 	udiv	r5, r1, r3
    5434:	fb03 1715 	mls	r7, r3, r5, r1
    5438:	fa1f f989 	uxth.w	r9, r9
    543c:	fb0c f605 	mul.w	r6, ip, r5
    5440:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
    5444:	428e      	cmp	r6, r1
    5446:	d906      	bls.n	5456 <__divdi3+0x1c6>
    5448:	1e6f      	subs	r7, r5, #1
    544a:	1889      	adds	r1, r1, r2
    544c:	d271      	bcs.n	5532 <__divdi3+0x2a2>
    544e:	428e      	cmp	r6, r1
    5450:	d96f      	bls.n	5532 <__divdi3+0x2a2>
    5452:	3d02      	subs	r5, #2
    5454:	1889      	adds	r1, r1, r2
    5456:	1b8e      	subs	r6, r1, r6
    5458:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
    545c:	e78c      	b.n	5378 <__divdi3+0xe8>
    545e:	f1c5 0120 	rsb	r1, r5, #32
    5462:	fa22 f301 	lsr.w	r3, r2, r1
    5466:	fa06 f605 	lsl.w	r6, r6, r5
    546a:	431e      	orrs	r6, r3
    546c:	fa27 f201 	lsr.w	r2, r7, r1
    5470:	ea4f 4916 	mov.w	r9, r6, lsr #16
    5474:	fa07 f705 	lsl.w	r7, r7, r5
    5478:	fa20 f101 	lsr.w	r1, r0, r1
    547c:	fbb2 f8f9 	udiv	r8, r2, r9
    5480:	430f      	orrs	r7, r1
    5482:	0c3b      	lsrs	r3, r7, #16
    5484:	fa1f fa86 	uxth.w	sl, r6
    5488:	fb09 2218 	mls	r2, r9, r8, r2
    548c:	fb0a fb08 	mul.w	fp, sl, r8
    5490:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    5494:	4593      	cmp	fp, r2
    5496:	fa0c fc05 	lsl.w	ip, ip, r5
    549a:	d908      	bls.n	54ae <__divdi3+0x21e>
    549c:	1992      	adds	r2, r2, r6
    549e:	f108 31ff 	add.w	r1, r8, #4294967295
    54a2:	d24a      	bcs.n	553a <__divdi3+0x2aa>
    54a4:	4593      	cmp	fp, r2
    54a6:	d948      	bls.n	553a <__divdi3+0x2aa>
    54a8:	f1a8 0802 	sub.w	r8, r8, #2
    54ac:	1992      	adds	r2, r2, r6
    54ae:	ebcb 0302 	rsb	r3, fp, r2
    54b2:	fbb3 f1f9 	udiv	r1, r3, r9
    54b6:	fb09 3211 	mls	r2, r9, r1, r3
    54ba:	b2bf      	uxth	r7, r7
    54bc:	fb0a fa01 	mul.w	sl, sl, r1
    54c0:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
    54c4:	459a      	cmp	sl, r3
    54c6:	d906      	bls.n	54d6 <__divdi3+0x246>
    54c8:	1e4a      	subs	r2, r1, #1
    54ca:	199b      	adds	r3, r3, r6
    54cc:	d233      	bcs.n	5536 <__divdi3+0x2a6>
    54ce:	459a      	cmp	sl, r3
    54d0:	d931      	bls.n	5536 <__divdi3+0x2a6>
    54d2:	3902      	subs	r1, #2
    54d4:	199b      	adds	r3, r3, r6
    54d6:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
    54da:	0c0f      	lsrs	r7, r1, #16
    54dc:	fa1f f88c 	uxth.w	r8, ip
    54e0:	fb08 f607 	mul.w	r6, r8, r7
    54e4:	b28a      	uxth	r2, r1
    54e6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
    54ea:	fb08 f802 	mul.w	r8, r8, r2
    54ee:	fb0c 6202 	mla	r2, ip, r2, r6
    54f2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
    54f6:	fb0c fc07 	mul.w	ip, ip, r7
    54fa:	4296      	cmp	r6, r2
    54fc:	bf88      	it	hi
    54fe:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
    5502:	ebca 0303 	rsb	r3, sl, r3
    5506:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
    550a:	4563      	cmp	r3, ip
    550c:	d30e      	bcc.n	552c <__divdi3+0x29c>
    550e:	d005      	beq.n	551c <__divdi3+0x28c>
    5510:	2500      	movs	r5, #0
    5512:	e70d      	b.n	5330 <__divdi3+0xa0>
    5514:	460e      	mov	r6, r1
    5516:	e6ef      	b.n	52f8 <__divdi3+0x68>
    5518:	461d      	mov	r5, r3
    551a:	e701      	b.n	5320 <__divdi3+0x90>
    551c:	fa1f f888 	uxth.w	r8, r8
    5520:	fa00 f005 	lsl.w	r0, r0, r5
    5524:	eb08 4502 	add.w	r5, r8, r2, lsl #16
    5528:	42a8      	cmp	r0, r5
    552a:	d2f1      	bcs.n	5510 <__divdi3+0x280>
    552c:	3901      	subs	r1, #1
    552e:	2500      	movs	r5, #0
    5530:	e6fe      	b.n	5330 <__divdi3+0xa0>
    5532:	463d      	mov	r5, r7
    5534:	e78f      	b.n	5456 <__divdi3+0x1c6>
    5536:	4611      	mov	r1, r2
    5538:	e7cd      	b.n	54d6 <__divdi3+0x246>
    553a:	4688      	mov	r8, r1
    553c:	e7b7      	b.n	54ae <__divdi3+0x21e>
    553e:	46b0      	mov	r8, r6
    5540:	e775      	b.n	542e <__divdi3+0x19e>
    5542:	3f02      	subs	r7, #2
    5544:	18b6      	adds	r6, r6, r2
    5546:	e72a      	b.n	539e <__divdi3+0x10e>
    5548:	3902      	subs	r1, #2
    554a:	e73c      	b.n	53c6 <__divdi3+0x136>

0000554c <__udivdi3>:
    554c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    5550:	4614      	mov	r4, r2
    5552:	4605      	mov	r5, r0
    5554:	460e      	mov	r6, r1
    5556:	2b00      	cmp	r3, #0
    5558:	d13d      	bne.n	55d6 <__udivdi3+0x8a>
    555a:	428a      	cmp	r2, r1
    555c:	d949      	bls.n	55f2 <__udivdi3+0xa6>
    555e:	fab2 f782 	clz	r7, r2
    5562:	b147      	cbz	r7, 5576 <__udivdi3+0x2a>
    5564:	f1c7 0120 	rsb	r1, r7, #32
    5568:	fa20 f201 	lsr.w	r2, r0, r1
    556c:	fa06 f607 	lsl.w	r6, r6, r7
    5570:	40bc      	lsls	r4, r7
    5572:	4316      	orrs	r6, r2
    5574:	40bd      	lsls	r5, r7
    5576:	0c22      	lsrs	r2, r4, #16
    5578:	fbb6 f0f2 	udiv	r0, r6, r2
    557c:	0c2f      	lsrs	r7, r5, #16
    557e:	b2a1      	uxth	r1, r4
    5580:	fb02 6610 	mls	r6, r2, r0, r6
    5584:	fb01 f300 	mul.w	r3, r1, r0
    5588:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    558c:	42b3      	cmp	r3, r6
    558e:	d908      	bls.n	55a2 <__udivdi3+0x56>
    5590:	1e47      	subs	r7, r0, #1
    5592:	1936      	adds	r6, r6, r4
    5594:	f080 80f8 	bcs.w	5788 <__udivdi3+0x23c>
    5598:	42b3      	cmp	r3, r6
    559a:	f240 80f5 	bls.w	5788 <__udivdi3+0x23c>
    559e:	3802      	subs	r0, #2
    55a0:	1936      	adds	r6, r6, r4
    55a2:	1af6      	subs	r6, r6, r3
    55a4:	fbb6 f3f2 	udiv	r3, r6, r2
    55a8:	fb02 6213 	mls	r2, r2, r3, r6
    55ac:	b2ad      	uxth	r5, r5
    55ae:	fb01 f103 	mul.w	r1, r1, r3
    55b2:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
    55b6:	4291      	cmp	r1, r2
    55b8:	d907      	bls.n	55ca <__udivdi3+0x7e>
    55ba:	1e5e      	subs	r6, r3, #1
    55bc:	1912      	adds	r2, r2, r4
    55be:	f080 80e5 	bcs.w	578c <__udivdi3+0x240>
    55c2:	4291      	cmp	r1, r2
    55c4:	f240 80e2 	bls.w	578c <__udivdi3+0x240>
    55c8:	3b02      	subs	r3, #2
    55ca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    55ce:	2100      	movs	r1, #0
    55d0:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    55d4:	4770      	bx	lr
    55d6:	428b      	cmp	r3, r1
    55d8:	d843      	bhi.n	5662 <__udivdi3+0x116>
    55da:	fab3 f483 	clz	r4, r3
    55de:	2c00      	cmp	r4, #0
    55e0:	d142      	bne.n	5668 <__udivdi3+0x11c>
    55e2:	428b      	cmp	r3, r1
    55e4:	d302      	bcc.n	55ec <__udivdi3+0xa0>
    55e6:	4282      	cmp	r2, r0
    55e8:	f200 80df 	bhi.w	57aa <__udivdi3+0x25e>
    55ec:	2100      	movs	r1, #0
    55ee:	2001      	movs	r0, #1
    55f0:	e7ee      	b.n	55d0 <__udivdi3+0x84>
    55f2:	b912      	cbnz	r2, 55fa <__udivdi3+0xae>
    55f4:	2701      	movs	r7, #1
    55f6:	fbb7 f4f2 	udiv	r4, r7, r2
    55fa:	fab4 f284 	clz	r2, r4
    55fe:	2a00      	cmp	r2, #0
    5600:	f040 8088 	bne.w	5714 <__udivdi3+0x1c8>
    5604:	1b0a      	subs	r2, r1, r4
    5606:	0c23      	lsrs	r3, r4, #16
    5608:	b2a7      	uxth	r7, r4
    560a:	2101      	movs	r1, #1
    560c:	fbb2 f6f3 	udiv	r6, r2, r3
    5610:	fb03 2216 	mls	r2, r3, r6, r2
    5614:	ea4f 4c15 	mov.w	ip, r5, lsr #16
    5618:	fb07 f006 	mul.w	r0, r7, r6
    561c:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
    5620:	4290      	cmp	r0, r2
    5622:	d907      	bls.n	5634 <__udivdi3+0xe8>
    5624:	1912      	adds	r2, r2, r4
    5626:	f106 3cff 	add.w	ip, r6, #4294967295
    562a:	d202      	bcs.n	5632 <__udivdi3+0xe6>
    562c:	4290      	cmp	r0, r2
    562e:	f200 80ce 	bhi.w	57ce <__udivdi3+0x282>
    5632:	4666      	mov	r6, ip
    5634:	1a12      	subs	r2, r2, r0
    5636:	fbb2 f0f3 	udiv	r0, r2, r3
    563a:	fb03 2310 	mls	r3, r3, r0, r2
    563e:	b2ad      	uxth	r5, r5
    5640:	fb07 f700 	mul.w	r7, r7, r0
    5644:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
    5648:	429f      	cmp	r7, r3
    564a:	d907      	bls.n	565c <__udivdi3+0x110>
    564c:	1e42      	subs	r2, r0, #1
    564e:	191b      	adds	r3, r3, r4
    5650:	f080 809e 	bcs.w	5790 <__udivdi3+0x244>
    5654:	429f      	cmp	r7, r3
    5656:	f240 809b 	bls.w	5790 <__udivdi3+0x244>
    565a:	3802      	subs	r0, #2
    565c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    5660:	e7b6      	b.n	55d0 <__udivdi3+0x84>
    5662:	2100      	movs	r1, #0
    5664:	4608      	mov	r0, r1
    5666:	e7b3      	b.n	55d0 <__udivdi3+0x84>
    5668:	f1c4 0620 	rsb	r6, r4, #32
    566c:	fa22 f506 	lsr.w	r5, r2, r6
    5670:	fa03 f304 	lsl.w	r3, r3, r4
    5674:	432b      	orrs	r3, r5
    5676:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    567a:	fa21 f506 	lsr.w	r5, r1, r6
    567e:	fa01 f104 	lsl.w	r1, r1, r4
    5682:	fa20 f606 	lsr.w	r6, r0, r6
    5686:	fbb5 f7fc 	udiv	r7, r5, ip
    568a:	ea46 0a01 	orr.w	sl, r6, r1
    568e:	fa1f f883 	uxth.w	r8, r3
    5692:	fb0c 5517 	mls	r5, ip, r7, r5
    5696:	ea4f 411a 	mov.w	r1, sl, lsr #16
    569a:	fb08 f907 	mul.w	r9, r8, r7
    569e:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
    56a2:	45a9      	cmp	r9, r5
    56a4:	fa02 f204 	lsl.w	r2, r2, r4
    56a8:	d903      	bls.n	56b2 <__udivdi3+0x166>
    56aa:	1e7e      	subs	r6, r7, #1
    56ac:	18ed      	adds	r5, r5, r3
    56ae:	d37f      	bcc.n	57b0 <__udivdi3+0x264>
    56b0:	4637      	mov	r7, r6
    56b2:	ebc9 0105 	rsb	r1, r9, r5
    56b6:	fbb1 f6fc 	udiv	r6, r1, ip
    56ba:	fb0c 1516 	mls	r5, ip, r6, r1
    56be:	fa1f fa8a 	uxth.w	sl, sl
    56c2:	fb08 f806 	mul.w	r8, r8, r6
    56c6:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
    56ca:	4588      	cmp	r8, r1
    56cc:	d903      	bls.n	56d6 <__udivdi3+0x18a>
    56ce:	1e75      	subs	r5, r6, #1
    56d0:	18c9      	adds	r1, r1, r3
    56d2:	d373      	bcc.n	57bc <__udivdi3+0x270>
    56d4:	462e      	mov	r6, r5
    56d6:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
    56da:	0c37      	lsrs	r7, r6, #16
    56dc:	fa1f fc82 	uxth.w	ip, r2
    56e0:	fb0c f507 	mul.w	r5, ip, r7
    56e4:	0c12      	lsrs	r2, r2, #16
    56e6:	b2b3      	uxth	r3, r6
    56e8:	fb0c fc03 	mul.w	ip, ip, r3
    56ec:	fb02 5303 	mla	r3, r2, r3, r5
    56f0:	eb03 431c 	add.w	r3, r3, ip, lsr #16
    56f4:	fb02 f207 	mul.w	r2, r2, r7
    56f8:	429d      	cmp	r5, r3
    56fa:	bf88      	it	hi
    56fc:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
    5700:	ebc8 0101 	rsb	r1, r8, r1
    5704:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    5708:	4291      	cmp	r1, r2
    570a:	d34b      	bcc.n	57a4 <__udivdi3+0x258>
    570c:	d042      	beq.n	5794 <__udivdi3+0x248>
    570e:	4630      	mov	r0, r6
    5710:	2100      	movs	r1, #0
    5712:	e75d      	b.n	55d0 <__udivdi3+0x84>
    5714:	4094      	lsls	r4, r2
    5716:	f1c2 0520 	rsb	r5, r2, #32
    571a:	fa21 f605 	lsr.w	r6, r1, r5
    571e:	0c23      	lsrs	r3, r4, #16
    5720:	fa20 f705 	lsr.w	r7, r0, r5
    5724:	fa01 f102 	lsl.w	r1, r1, r2
    5728:	fbb6 fcf3 	udiv	ip, r6, r3
    572c:	4339      	orrs	r1, r7
    572e:	0c0d      	lsrs	r5, r1, #16
    5730:	b2a7      	uxth	r7, r4
    5732:	fb03 661c 	mls	r6, r3, ip, r6
    5736:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    573a:	fb07 f80c 	mul.w	r8, r7, ip
    573e:	45b0      	cmp	r8, r6
    5740:	fa00 f502 	lsl.w	r5, r0, r2
    5744:	d908      	bls.n	5758 <__udivdi3+0x20c>
    5746:	1936      	adds	r6, r6, r4
    5748:	f10c 30ff 	add.w	r0, ip, #4294967295
    574c:	d23d      	bcs.n	57ca <__udivdi3+0x27e>
    574e:	45b0      	cmp	r8, r6
    5750:	d93b      	bls.n	57ca <__udivdi3+0x27e>
    5752:	f1ac 0c02 	sub.w	ip, ip, #2
    5756:	1936      	adds	r6, r6, r4
    5758:	ebc8 0206 	rsb	r2, r8, r6
    575c:	fbb2 f0f3 	udiv	r0, r2, r3
    5760:	fb03 2610 	mls	r6, r3, r0, r2
    5764:	b28a      	uxth	r2, r1
    5766:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
    576a:	fb07 f100 	mul.w	r1, r7, r0
    576e:	4291      	cmp	r1, r2
    5770:	d906      	bls.n	5780 <__udivdi3+0x234>
    5772:	1e46      	subs	r6, r0, #1
    5774:	1912      	adds	r2, r2, r4
    5776:	d226      	bcs.n	57c6 <__udivdi3+0x27a>
    5778:	4291      	cmp	r1, r2
    577a:	d924      	bls.n	57c6 <__udivdi3+0x27a>
    577c:	3802      	subs	r0, #2
    577e:	1912      	adds	r2, r2, r4
    5780:	1a52      	subs	r2, r2, r1
    5782:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
    5786:	e741      	b.n	560c <__udivdi3+0xc0>
    5788:	4638      	mov	r0, r7
    578a:	e70a      	b.n	55a2 <__udivdi3+0x56>
    578c:	4633      	mov	r3, r6
    578e:	e71c      	b.n	55ca <__udivdi3+0x7e>
    5790:	4610      	mov	r0, r2
    5792:	e763      	b.n	565c <__udivdi3+0x110>
    5794:	fa1f fc8c 	uxth.w	ip, ip
    5798:	fa00 f004 	lsl.w	r0, r0, r4
    579c:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
    57a0:	4298      	cmp	r0, r3
    57a2:	d2b4      	bcs.n	570e <__udivdi3+0x1c2>
    57a4:	1e70      	subs	r0, r6, #1
    57a6:	2100      	movs	r1, #0
    57a8:	e712      	b.n	55d0 <__udivdi3+0x84>
    57aa:	4621      	mov	r1, r4
    57ac:	4620      	mov	r0, r4
    57ae:	e70f      	b.n	55d0 <__udivdi3+0x84>
    57b0:	45a9      	cmp	r9, r5
    57b2:	f67f af7d 	bls.w	56b0 <__udivdi3+0x164>
    57b6:	3f02      	subs	r7, #2
    57b8:	18ed      	adds	r5, r5, r3
    57ba:	e77a      	b.n	56b2 <__udivdi3+0x166>
    57bc:	4588      	cmp	r8, r1
    57be:	d989      	bls.n	56d4 <__udivdi3+0x188>
    57c0:	3e02      	subs	r6, #2
    57c2:	18c9      	adds	r1, r1, r3
    57c4:	e787      	b.n	56d6 <__udivdi3+0x18a>
    57c6:	4630      	mov	r0, r6
    57c8:	e7da      	b.n	5780 <__udivdi3+0x234>
    57ca:	4684      	mov	ip, r0
    57cc:	e7c4      	b.n	5758 <__udivdi3+0x20c>
    57ce:	3e02      	subs	r6, #2
    57d0:	1912      	adds	r2, r2, r4
    57d2:	e72f      	b.n	5634 <__udivdi3+0xe8>

000057d4 <default_settings>:
    57d4:	043a d040 1412 8032 1617 0418 0219 7b1a     :.@...2........{
    57e4:	0603 000c 003e 0070 0071 1172 0073 02a2     ....>.p.q.r.s...
    57f4:	0111 207a 1c7b 287c 3c7d 557e 687f 7680     ..z {.|(}<~U.h.v
    5804:	8081 8882 8f83 9684 a385 af86 c487 d788     ................
    5814:	e889 e013 0000 0010 000d 2014 05a5 07ab     ........... ....
    5824:	7524 6325 a526 789f 68a0 03a1 dfa6 dfa7     $u%c&..x.h......
    5834:	f0a8 90a9 94aa e513 610e 4b0f 0216 271e     .........a.K...'
    5844:	0221 9122 0729 0b33 0b35 1d37 7138 2a39     !.".).3.5.7.8q9*
    5854:	783c 404d 204e 0c69 606b 1974 4f8d 008e     <xM@N i.k`t..O..
    5864:	008f 0090 0091 0092 0096 809a 84b0 0cb1     ................
    5874:	0eb2 82b3 0ab8 1443 f044 3445 5846 2847     ......C.D.E4FXG(
    5884:	3a48 8859 885a 445b 675c 495d 0e5e 0464     H:Y.Z.[D\g]I^.d.
    5894:	2065 0566 0494 0895 0a6c 556d 116e 9f6f     e f.....l.mUn.o.
    58a4:	406a 4001 4002 e713 0215 804f 8050 0051     j@.@.@....O.P.Q.
    58b4:	2252 5e53 8054 9e58 0841 003f 0575 e176     R"S^T.X.A.?.u.v.
    58c4:	004c 0177 c23d 094b 60c9 3841 4056 1134     L.w.=.K..`A8V@4.
    58d4:	023b 89a4 0096 3097 2098 3099 849a 299b     ;......0. .0...)
    58e4:	039c 4c9d 3f9e 0478 0179 f0c8 0f79 00c8     ...L.?x.y...y...
    58f4:	1079 7ec8 0a79 80c8 0b79 01c8 0c79 0fc8     y..~y...y...y...
    5904:	0d79 20c8 0979 80c8 0279 c0c8 0379 40c8     y.. y...y...y..@
    5914:	0579 30c8 2679 0309 0055 4056 423b 0000     y..0y&..U.V@;B..
    5924:	6e49 6169 696c 6973 676e 4920 4332 0d0a     Inialising I2C..
    5934:	0000 0000 6e49 6169 696c 6973 676e 4320     ....Inialising C
    5944:	6d61 7265 0a61 000d 0d0a 430a 6d61 7265     amera......Camer
    5954:	2061 7041 0a70 000d 7453 7261 2074 6353     a App...Start Sc
    5964:	6e61 2e2e 0a2e 000d 6e49 7469 6169 696c     an......Initiali
    5974:	6573 7320 6375 6563 7373 0d0a 0000 0000     se success......
    5984:	6e49 7469 6169 696c 6573 6620 6961 0a6c     Initialise fail.
    5994:	000d 0000                                   ....

00005998 <_global_impure_ptr>:
    5998:	0058 2000 0043 000a                         X.. C...

000059a0 <blanks.6678>:
    59a0:	2020 2020 2020 2020 2020 2020 2020 2020                     

000059b0 <zeroes.6679>:
    59b0:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
    59c0:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
    59d0:	3000 3231 3433 3635 3837 6139 6362 6564     .0123456789abcde
    59e0:	0066 4f50 4953 0058 002e 0000               f.POSIX.....

000059ec <_init>:
    59ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    59ee:	bf00      	nop
    59f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    59f2:	bc08      	pop	{r3}
    59f4:	469e      	mov	lr, r3
    59f6:	4770      	bx	lr

000059f8 <__init_array_start>:
    59f8:	00003c8d 	.word	0x00003c8d

000059fc <__frame_dummy_init_array_entry>:
    59fc:	000001f9                                ....

00005a00 <_fini>:
    5a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a02:	bf00      	nop
    5a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5a06:	bc08      	pop	{r3}
    5a08:	469e      	mov	lr, r3
    5a0a:	4770      	bx	lr

00005a0c <__fini_array_start>:
    5a0c:	000001d1 	.word	0x000001d1

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <bpm_ps_no_halt_exec>:
 */
RAMFUNC bool bpm_ps_no_halt_exec(Bpm *bpm, uint32_t pmcon)
{
	bool b_psok = false;
	bool b_timeout = false;
	BPM_UNLOCK(PMCON);
2000000c:	f04f 0300 	mov.w	r3, #0
20000010:	f2c4 030f 	movt	r3, #16399	; 0x400f
20000014:	f04f 021c 	mov.w	r2, #28
20000018:	f6ca 2200 	movt	r2, #43520	; 0xaa00
2000001c:	619a      	str	r2, [r3, #24]
	bpm->BPM_PMCON = pmcon;
2000001e:	61c1      	str	r1, [r0, #28]
	do {
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
20000020:	f04f 0100 	mov.w	r1, #0
20000024:	f2c4 010f 	movt	r1, #16399	; 0x400f
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
20000028:	f24e 0210 	movw	r2, #57360	; 0xe010
2000002c:	f2ce 0200 	movt	r2, #57344	; 0xe000
	bool b_psok = false;
	bool b_timeout = false;
	BPM_UNLOCK(PMCON);
	bpm->BPM_PMCON = pmcon;
	do {
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
20000030:	6948      	ldr	r0, [r1, #20]
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
20000032:	6813      	ldr	r3, [r2, #0]
20000034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
	} while (!b_psok && !b_timeout);
20000038:	f010 0001 	ands.w	r0, r0, #1
2000003c:	d101      	bne.n	20000042 <bpm_ps_no_halt_exec+0x36>
2000003e:	2b00      	cmp	r3, #0
20000040:	d0f6      	beq.n	20000030 <bpm_ps_no_halt_exec+0x24>
	return b_psok;
}
20000042:	4770      	bx	lr

20000044 <g_interrupt_enabled>:
20000044:	0001 0000                                   ....

20000048 <flashcalw_wait_until_ready>:
20000048:	2bad 0000 0000 0000                         .+......

20000050 <_impure_ptr>:
20000050:	0058 2000 0000 0000                         X.. ....

20000058 <impure_data>:
20000058:	0000 0000 0344 2000 03ac 2000 0414 2000     ....D.. ... ... 
	...
2000008c:	599c 0000 0000 0000 0000 0000 0000 0000     .Y..............
	...
20000100:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000110:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000480 <lc_ctype_charset>:
20000480:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

200004a0 <__mb_cur_max>:
200004a0:	0001 0000                                   ....

200004a4 <lc_message_charset>:
200004a4:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

200004c4 <lconv>:
200004c4:	59e8 0000 599f 0000 599f 0000 599f 0000     .Y...Y...Y...Y..
200004d4:	599f 0000 599f 0000 599f 0000 599f 0000     .Y...Y...Y...Y..
200004e4:	599f 0000 599f 0000 ffff ffff ffff ffff     .Y...Y..........
200004f4:	ffff ffff ffff 0000                         ........

200004fc <__malloc_av_>:
	...
20000504:	04fc 2000 04fc 2000 0504 2000 0504 2000     ... ... ... ... 
20000514:	050c 2000 050c 2000 0514 2000 0514 2000     ... ... ... ... 
20000524:	051c 2000 051c 2000 0524 2000 0524 2000     ... ... $.. $.. 
20000534:	052c 2000 052c 2000 0534 2000 0534 2000     ,.. ,.. 4.. 4.. 
20000544:	053c 2000 053c 2000 0544 2000 0544 2000     <.. <.. D.. D.. 
20000554:	054c 2000 054c 2000 0554 2000 0554 2000     L.. L.. T.. T.. 
20000564:	055c 2000 055c 2000 0564 2000 0564 2000     \.. \.. d.. d.. 
20000574:	056c 2000 056c 2000 0574 2000 0574 2000     l.. l.. t.. t.. 
20000584:	057c 2000 057c 2000 0584 2000 0584 2000     |.. |.. ... ... 
20000594:	058c 2000 058c 2000 0594 2000 0594 2000     ... ... ... ... 
200005a4:	059c 2000 059c 2000 05a4 2000 05a4 2000     ... ... ... ... 
200005b4:	05ac 2000 05ac 2000 05b4 2000 05b4 2000     ... ... ... ... 
200005c4:	05bc 2000 05bc 2000 05c4 2000 05c4 2000     ... ... ... ... 
200005d4:	05cc 2000 05cc 2000 05d4 2000 05d4 2000     ... ... ... ... 
200005e4:	05dc 2000 05dc 2000 05e4 2000 05e4 2000     ... ... ... ... 
200005f4:	05ec 2000 05ec 2000 05f4 2000 05f4 2000     ... ... ... ... 
20000604:	05fc 2000 05fc 2000 0604 2000 0604 2000     ... ... ... ... 
20000614:	060c 2000 060c 2000 0614 2000 0614 2000     ... ... ... ... 
20000624:	061c 2000 061c 2000 0624 2000 0624 2000     ... ... $.. $.. 
20000634:	062c 2000 062c 2000 0634 2000 0634 2000     ,.. ,.. 4.. 4.. 
20000644:	063c 2000 063c 2000 0644 2000 0644 2000     <.. <.. D.. D.. 
20000654:	064c 2000 064c 2000 0654 2000 0654 2000     L.. L.. T.. T.. 
20000664:	065c 2000 065c 2000 0664 2000 0664 2000     \.. \.. d.. d.. 
20000674:	066c 2000 066c 2000 0674 2000 0674 2000     l.. l.. t.. t.. 
20000684:	067c 2000 067c 2000 0684 2000 0684 2000     |.. |.. ... ... 
20000694:	068c 2000 068c 2000 0694 2000 0694 2000     ... ... ... ... 
200006a4:	069c 2000 069c 2000 06a4 2000 06a4 2000     ... ... ... ... 
200006b4:	06ac 2000 06ac 2000 06b4 2000 06b4 2000     ... ... ... ... 
200006c4:	06bc 2000 06bc 2000 06c4 2000 06c4 2000     ... ... ... ... 
200006d4:	06cc 2000 06cc 2000 06d4 2000 06d4 2000     ... ... ... ... 
200006e4:	06dc 2000 06dc 2000 06e4 2000 06e4 2000     ... ... ... ... 
200006f4:	06ec 2000 06ec 2000 06f4 2000 06f4 2000     ... ... ... ... 
20000704:	06fc 2000 06fc 2000 0704 2000 0704 2000     ... ... ... ... 
20000714:	070c 2000 070c 2000 0714 2000 0714 2000     ... ... ... ... 
20000724:	071c 2000 071c 2000 0724 2000 0724 2000     ... ... $.. $.. 
20000734:	072c 2000 072c 2000 0734 2000 0734 2000     ,.. ,.. 4.. 4.. 
20000744:	073c 2000 073c 2000 0744 2000 0744 2000     <.. <.. D.. D.. 
20000754:	074c 2000 074c 2000 0754 2000 0754 2000     L.. L.. T.. T.. 
20000764:	075c 2000 075c 2000 0764 2000 0764 2000     \.. \.. d.. d.. 
20000774:	076c 2000 076c 2000 0774 2000 0774 2000     l.. l.. t.. t.. 
20000784:	077c 2000 077c 2000 0784 2000 0784 2000     |.. |.. ... ... 
20000794:	078c 2000 078c 2000 0794 2000 0794 2000     ... ... ... ... 
200007a4:	079c 2000 079c 2000 07a4 2000 07a4 2000     ... ... ... ... 
200007b4:	07ac 2000 07ac 2000 07b4 2000 07b4 2000     ... ... ... ... 
200007c4:	07bc 2000 07bc 2000 07c4 2000 07c4 2000     ... ... ... ... 
200007d4:	07cc 2000 07cc 2000 07d4 2000 07d4 2000     ... ... ... ... 
200007e4:	07dc 2000 07dc 2000 07e4 2000 07e4 2000     ... ... ... ... 
200007f4:	07ec 2000 07ec 2000 07f4 2000 07f4 2000     ... ... ... ... 
20000804:	07fc 2000 07fc 2000 0804 2000 0804 2000     ... ... ... ... 
20000814:	080c 2000 080c 2000 0814 2000 0814 2000     ... ... ... ... 
20000824:	081c 2000 081c 2000 0824 2000 0824 2000     ... ... $.. $.. 
20000834:	082c 2000 082c 2000 0834 2000 0834 2000     ,.. ,.. 4.. 4.. 
20000844:	083c 2000 083c 2000 0844 2000 0844 2000     <.. <.. D.. D.. 
20000854:	084c 2000 084c 2000 0854 2000 0854 2000     L.. L.. T.. T.. 
20000864:	085c 2000 085c 2000 0864 2000 0864 2000     \.. \.. d.. d.. 
20000874:	086c 2000 086c 2000 0874 2000 0874 2000     l.. l.. t.. t.. 
20000884:	087c 2000 087c 2000 0884 2000 0884 2000     |.. |.. ... ... 
20000894:	088c 2000 088c 2000 0894 2000 0894 2000     ... ... ... ... 
200008a4:	089c 2000 089c 2000 08a4 2000 08a4 2000     ... ... ... ... 
200008b4:	08ac 2000 08ac 2000 08b4 2000 08b4 2000     ... ... ... ... 
200008c4:	08bc 2000 08bc 2000 08c4 2000 08c4 2000     ... ... ... ... 
200008d4:	08cc 2000 08cc 2000 08d4 2000 08d4 2000     ... ... ... ... 
200008e4:	08dc 2000 08dc 2000 08e4 2000 08e4 2000     ... ... ... ... 
200008f4:	08ec 2000 08ec 2000 08f4 2000 08f4 2000     ... ... ... ... 

20000904 <__malloc_sbrk_base>:
20000904:	ffff ffff                                   ....

20000908 <__malloc_trim_threshold>:
20000908:	0000 0002                                   ....

2000090c <__wctomb>:
2000090c:	5061 0000                                   aP..
