
Camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005870  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00005870  00005870  0000d870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000900  20000000  00005878  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000174  20000900  00006178  00010900  2**2
                  ALLOC
  4 .stack        00001004  20000a74  000062ec  00010900  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00010900  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  0001092a  2**0
                  CONTENTS, READONLY
  7 .debug_info   00029c28  00000000  00000000  0001099b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00007792  00000000  00000000  0003a5c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001088  00000000  00000000  00041d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00006c3b  00000000  00000000  00042de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00016dc5  00000000  00000000  00049a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000e4514  00000000  00000000  000607e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000e003  00000000  00000000  00144cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000e30  00000000  00000000  00152cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000023f0  00000000  00000000  00153b28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20001a78 	.word	0x20001a78
       4:	00002e09 	.word	0x00002e09
       8:	00002e05 	.word	0x00002e05
       c:	00002e05 	.word	0x00002e05
      10:	00002e05 	.word	0x00002e05
      14:	00002e05 	.word	0x00002e05
      18:	00002e05 	.word	0x00002e05
	...
      2c:	00002e05 	.word	0x00002e05
      30:	00002e05 	.word	0x00002e05
      34:	00000000 	.word	0x00000000
      38:	00002e05 	.word	0x00002e05
      3c:	00002e05 	.word	0x00002e05
      40:	00002e05 	.word	0x00002e05
      44:	000003d1 	.word	0x000003d1
      48:	000003e5 	.word	0x000003e5
      4c:	000003f9 	.word	0x000003f9
      50:	0000040d 	.word	0x0000040d
      54:	00000421 	.word	0x00000421
      58:	00000435 	.word	0x00000435
      5c:	00000449 	.word	0x00000449
      60:	0000045d 	.word	0x0000045d
      64:	00000471 	.word	0x00000471
      68:	00000485 	.word	0x00000485
      6c:	00000499 	.word	0x00000499
      70:	000004ad 	.word	0x000004ad
      74:	000004c1 	.word	0x000004c1
      78:	000004d5 	.word	0x000004d5
      7c:	000004e9 	.word	0x000004e9
      80:	000004fd 	.word	0x000004fd
      84:	00002e05 	.word	0x00002e05
      88:	00002e05 	.word	0x00002e05
      8c:	00002e05 	.word	0x00002e05
      90:	00002e05 	.word	0x00002e05
      94:	00002e05 	.word	0x00002e05
      98:	00002e05 	.word	0x00002e05
      9c:	00002e05 	.word	0x00002e05
      a0:	00002e05 	.word	0x00002e05
      a4:	00002e05 	.word	0x00002e05
      a8:	00002e05 	.word	0x00002e05
      ac:	00002e05 	.word	0x00002e05
      b0:	00002e05 	.word	0x00002e05
      b4:	00002e05 	.word	0x00002e05
      b8:	00002e05 	.word	0x00002e05
      bc:	00002e05 	.word	0x00002e05
      c0:	00002e05 	.word	0x00002e05
      c4:	00002e05 	.word	0x00002e05
      c8:	00002e05 	.word	0x00002e05
      cc:	00002e05 	.word	0x00002e05
      d0:	00002e05 	.word	0x00002e05
      d4:	00002e05 	.word	0x00002e05
      d8:	00002e05 	.word	0x00002e05
      dc:	00002e05 	.word	0x00002e05
      e0:	00002e05 	.word	0x00002e05
      e4:	00002e05 	.word	0x00002e05
      e8:	00002e05 	.word	0x00002e05
      ec:	00002e05 	.word	0x00002e05
      f0:	00002e05 	.word	0x00002e05
      f4:	00002e05 	.word	0x00002e05
      f8:	00002e05 	.word	0x00002e05
      fc:	00002e05 	.word	0x00002e05
     100:	00002e05 	.word	0x00002e05
     104:	00002e05 	.word	0x00002e05
     108:	00002e05 	.word	0x00002e05
     10c:	00002e05 	.word	0x00002e05
     110:	00002e05 	.word	0x00002e05
     114:	00002e05 	.word	0x00002e05
     118:	00002e05 	.word	0x00002e05
     11c:	00002e05 	.word	0x00002e05
     120:	00002e05 	.word	0x00002e05
     124:	00002e05 	.word	0x00002e05
     128:	00002e05 	.word	0x00002e05
     12c:	00002e05 	.word	0x00002e05
     130:	00002e05 	.word	0x00002e05
     134:	00000ca5 	.word	0x00000ca5
     138:	00002e05 	.word	0x00002e05
     13c:	00000cbd 	.word	0x00000cbd
     140:	00002e05 	.word	0x00002e05
     144:	00002e05 	.word	0x00002e05
     148:	00002e05 	.word	0x00002e05
     14c:	00002e05 	.word	0x00002e05
     150:	00002e05 	.word	0x00002e05
     154:	00002e05 	.word	0x00002e05
     158:	00002e05 	.word	0x00002e05
     15c:	00002e05 	.word	0x00002e05
     160:	00002e05 	.word	0x00002e05
     164:	00002e05 	.word	0x00002e05
     168:	00002e05 	.word	0x00002e05
     16c:	00002e05 	.word	0x00002e05
     170:	00002e05 	.word	0x00002e05
     174:	00000cd5 	.word	0x00000cd5
     178:	00000ced 	.word	0x00000ced
     17c:	00002e05 	.word	0x00002e05

00000180 <deregister_tm_clones>:
     180:	b508      	push	{r3, lr}
     182:	4805      	ldr	r0, [pc, #20]	; (198 <deregister_tm_clones+0x18>)
     184:	4b05      	ldr	r3, [pc, #20]	; (19c <deregister_tm_clones+0x1c>)
     186:	1a19      	subs	r1, r3, r0
     188:	2906      	cmp	r1, #6
     18a:	d800      	bhi.n	18e <deregister_tm_clones+0xe>
     18c:	bd08      	pop	{r3, pc}
     18e:	4a04      	ldr	r2, [pc, #16]	; (1a0 <deregister_tm_clones+0x20>)
     190:	2a00      	cmp	r2, #0
     192:	d0fb      	beq.n	18c <deregister_tm_clones+0xc>
     194:	4790      	blx	r2
     196:	e7f9      	b.n	18c <deregister_tm_clones+0xc>
     198:	00005878 	.word	0x00005878
     19c:	0000587b 	.word	0x0000587b
     1a0:	00000000 	.word	0x00000000

000001a4 <register_tm_clones>:
     1a4:	b508      	push	{r3, lr}
     1a6:	4807      	ldr	r0, [pc, #28]	; (1c4 <register_tm_clones+0x20>)
     1a8:	4b07      	ldr	r3, [pc, #28]	; (1c8 <register_tm_clones+0x24>)
     1aa:	1a19      	subs	r1, r3, r0
     1ac:	108a      	asrs	r2, r1, #2
     1ae:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
     1b2:	1059      	asrs	r1, r3, #1
     1b4:	d100      	bne.n	1b8 <register_tm_clones+0x14>
     1b6:	bd08      	pop	{r3, pc}
     1b8:	4a04      	ldr	r2, [pc, #16]	; (1cc <register_tm_clones+0x28>)
     1ba:	2a00      	cmp	r2, #0
     1bc:	d0fb      	beq.n	1b6 <register_tm_clones+0x12>
     1be:	4790      	blx	r2
     1c0:	e7f9      	b.n	1b6 <register_tm_clones+0x12>
     1c2:	bf00      	nop
     1c4:	00005878 	.word	0x00005878
     1c8:	00005878 	.word	0x00005878
     1cc:	00000000 	.word	0x00000000

000001d0 <__do_global_dtors_aux>:
     1d0:	b510      	push	{r4, lr}
     1d2:	4c06      	ldr	r4, [pc, #24]	; (1ec <__do_global_dtors_aux+0x1c>)
     1d4:	7823      	ldrb	r3, [r4, #0]
     1d6:	b943      	cbnz	r3, 1ea <__do_global_dtors_aux+0x1a>
     1d8:	f7ff ffd2 	bl	180 <deregister_tm_clones>
     1dc:	4804      	ldr	r0, [pc, #16]	; (1f0 <__do_global_dtors_aux+0x20>)
     1de:	b110      	cbz	r0, 1e6 <__do_global_dtors_aux+0x16>
     1e0:	4804      	ldr	r0, [pc, #16]	; (1f4 <__do_global_dtors_aux+0x24>)
     1e2:	f3af 8000 	nop.w
     1e6:	2101      	movs	r1, #1
     1e8:	7021      	strb	r1, [r4, #0]
     1ea:	bd10      	pop	{r4, pc}
     1ec:	20000900 	.word	0x20000900
     1f0:	00000000 	.word	0x00000000
     1f4:	00005878 	.word	0x00005878

000001f8 <frame_dummy>:
     1f8:	b508      	push	{r3, lr}
     1fa:	4b08      	ldr	r3, [pc, #32]	; (21c <frame_dummy+0x24>)
     1fc:	b11b      	cbz	r3, 206 <frame_dummy+0xe>
     1fe:	4808      	ldr	r0, [pc, #32]	; (220 <frame_dummy+0x28>)
     200:	4908      	ldr	r1, [pc, #32]	; (224 <frame_dummy+0x2c>)
     202:	f3af 8000 	nop.w
     206:	4808      	ldr	r0, [pc, #32]	; (228 <frame_dummy+0x30>)
     208:	6801      	ldr	r1, [r0, #0]
     20a:	b111      	cbz	r1, 212 <frame_dummy+0x1a>
     20c:	4a07      	ldr	r2, [pc, #28]	; (22c <frame_dummy+0x34>)
     20e:	b102      	cbz	r2, 212 <frame_dummy+0x1a>
     210:	4790      	blx	r2
     212:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     216:	f7ff bfc5 	b.w	1a4 <register_tm_clones>
     21a:	bf00      	nop
     21c:	00000000 	.word	0x00000000
     220:	00005878 	.word	0x00005878
     224:	20000904 	.word	0x20000904
     228:	00005878 	.word	0x00005878
     22c:	00000000 	.word	0x00000000

00000230 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     234:	460c      	mov	r4, r1
     236:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     238:	bb48      	cbnz	r0, 28e <_read+0x5e>
		return -1;
	}

	for (; len > 0; --len) {
     23a:	2a00      	cmp	r2, #0
     23c:	dd2b      	ble.n	296 <_read+0x66>

int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
     23e:	188f      	adds	r7, r1, r2
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
     240:	f640 16d8 	movw	r6, #2520	; 0x9d8
     244:	f2c2 0600 	movt	r6, #8192	; 0x2000
     248:	f640 15d0 	movw	r5, #2512	; 0x9d0
     24c:	f2c2 0500 	movt	r5, #8192	; 0x2000
     250:	ea6f 0901 	mvn.w	r9, r1
     254:	eb07 0009 	add.w	r0, r7, r9
     258:	f000 0901 	and.w	r9, r0, #1
     25c:	6830      	ldr	r0, [r6, #0]
     25e:	682b      	ldr	r3, [r5, #0]
     260:	4798      	blx	r3
		ptr++;
     262:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     266:	42bc      	cmp	r4, r7
     268:	d119      	bne.n	29e <_read+0x6e>
     26a:	e00d      	b.n	288 <_read+0x58>
		ptr_get(stdio_base, ptr);
     26c:	6830      	ldr	r0, [r6, #0]
     26e:	682b      	ldr	r3, [r5, #0]
     270:	4621      	mov	r1, r4
     272:	4798      	blx	r3
		ptr++;
     274:	f104 0401 	add.w	r4, r4, #1
     278:	4621      	mov	r1, r4
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
     27a:	6830      	ldr	r0, [r6, #0]
     27c:	682a      	ldr	r2, [r5, #0]
     27e:	4790      	blx	r2
		ptr++;
     280:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     284:	42bc      	cmp	r4, r7
     286:	d1f1      	bne.n	26c <_read+0x3c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
     288:	4640      	mov	r0, r8
     28a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
     28e:	f04f 30ff 	mov.w	r0, #4294967295
     292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	for (; len > 0; --len) {
     296:	f04f 0000 	mov.w	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
     29a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     29e:	f1b9 0f00 	cmp.w	r9, #0
     2a2:	d0e3      	beq.n	26c <_read+0x3c>
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
     2a4:	6830      	ldr	r0, [r6, #0]
     2a6:	682a      	ldr	r2, [r5, #0]
     2a8:	4621      	mov	r1, r4
     2aa:	4790      	blx	r2
		ptr++;
     2ac:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     2b0:	42bc      	cmp	r4, r7
     2b2:	d1db      	bne.n	26c <_read+0x3c>
     2b4:	e7e8      	b.n	288 <_read+0x58>
     2b6:	bf00      	nop

000002b8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
     2b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     2bc:	460d      	mov	r5, r1
     2be:	4690      	mov	r8, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     2c0:	f100 30ff 	add.w	r0, r0, #4294967295
     2c4:	2802      	cmp	r0, #2
     2c6:	d824      	bhi.n	312 <_write+0x5a>
		return -1;
	}

	for (; len != 0; --len) {
     2c8:	b332      	cbz	r2, 318 <_write+0x60>
		if (ptr_put(stdio_base, *ptr++) < 0) {
     2ca:	f640 16d8 	movw	r6, #2520	; 0x9d8
     2ce:	f2c2 0600 	movt	r6, #8192	; 0x2000
     2d2:	f640 17d4 	movw	r7, #2516	; 0x9d4
     2d6:	f2c2 0700 	movt	r7, #8192	; 0x2000
     2da:	f04f 0400 	mov.w	r4, #0
     2de:	f102 39ff 	add.w	r9, r2, #4294967295
     2e2:	f009 0901 	and.w	r9, r9, #1
     2e6:	6830      	ldr	r0, [r6, #0]
     2e8:	683b      	ldr	r3, [r7, #0]
     2ea:	5d09      	ldrb	r1, [r1, r4]
     2ec:	4798      	blx	r3
     2ee:	42a0      	cmp	r0, r4
     2f0:	da1a      	bge.n	328 <_write+0x70>
     2f2:	e014      	b.n	31e <_write+0x66>
     2f4:	6830      	ldr	r0, [r6, #0]
     2f6:	683b      	ldr	r3, [r7, #0]
     2f8:	5d29      	ldrb	r1, [r5, r4]
     2fa:	4798      	blx	r3
     2fc:	2800      	cmp	r0, #0
     2fe:	db0e      	blt.n	31e <_write+0x66>
			return -1;
		}
		++nChars;
     300:	f104 0401 	add.w	r4, r4, #1
	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
     304:	6830      	ldr	r0, [r6, #0]
     306:	683a      	ldr	r2, [r7, #0]
     308:	5d29      	ldrb	r1, [r5, r4]
     30a:	4790      	blx	r2
     30c:	2800      	cmp	r0, #0
     30e:	da1d      	bge.n	34c <_write+0x94>
     310:	e005      	b.n	31e <_write+0x66>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
     312:	f04f 34ff 	mov.w	r4, #4294967295
     316:	e004      	b.n	322 <_write+0x6a>
	}

	for (; len != 0; --len) {
     318:	f04f 0400 	mov.w	r4, #0
     31c:	e001      	b.n	322 <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
     31e:	f04f 34ff 	mov.w	r4, #4294967295
		}
		++nChars;
	}
	return nChars;
}
     322:	4620      	mov	r0, r4
     324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
     328:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     32c:	45a0      	cmp	r8, r4
     32e:	d0f8      	beq.n	322 <_write+0x6a>
     330:	f1b9 0f00 	cmp.w	r9, #0
     334:	d0de      	beq.n	2f4 <_write+0x3c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
     336:	6830      	ldr	r0, [r6, #0]
     338:	683a      	ldr	r2, [r7, #0]
     33a:	5d29      	ldrb	r1, [r5, r4]
     33c:	4790      	blx	r2
     33e:	2800      	cmp	r0, #0
     340:	dbed      	blt.n	31e <_write+0x66>
			return -1;
		}
		++nChars;
     342:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     346:	45a0      	cmp	r8, r4
     348:	d1d4      	bne.n	2f4 <_write+0x3c>
     34a:	e7ea      	b.n	322 <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
     34c:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     350:	45a0      	cmp	r8, r4
     352:	d1cf      	bne.n	2f4 <_write+0x3c>
     354:	e7e5      	b.n	322 <_write+0x6a>
     356:	bf00      	nop

00000358 <pdca_channel_get_handler>:
 */
volatile PdcaChannel *pdca_channel_get_handler(pdca_channel_num_t
		pdca_ch_number)
{
	if (pdca_ch_number >= PDCA_NUMBER_OF_CHANNELS)
		pdca_ch_number = 0;
     358:	280f      	cmp	r0, #15
     35a:	bf88      	it	hi
     35c:	2000      	movhi	r0, #0

	/* Get the correct channel pointer */
	volatile PdcaChannel *pdca_channel =
     35e:	ea4f 1080 	mov.w	r0, r0, lsl #6
     362:	f100 4180 	add.w	r1, r0, #1073741824	; 0x40000000
			&(PDCA->PDCA_CHANNEL[pdca_ch_number]);

	return pdca_channel;
}
     366:	f501 2022 	add.w	r0, r1, #663552	; 0xa2000
     36a:	4770      	bx	lr

0000036c <pdca_get_channel_status>:
 *
 * \return 1 if channel transfer is enabled, else 0
 */
enum pdca_channel_status
		pdca_get_channel_status(pdca_channel_num_t pdca_ch_number)
{
     36c:	b508      	push	{r3, lr}
	/* Get the correct channel pointer */
	volatile PdcaChannel *pdca_channel =
     36e:	f240 3359 	movw	r3, #857	; 0x359
     372:	f2c0 0300 	movt	r3, #0
     376:	4798      	blx	r3
			pdca_channel_get_handler(pdca_ch_number);
	uint32_t status = pdca_channel->PDCA_SR;
     378:	69c1      	ldr	r1, [r0, #28]
	uint32_t intflag = pdca_channel->PDCA_ISR;
     37a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	if ((status & PDCA_SR_TEN) == PDCA_SR_TEN) {
     37c:	f011 0f01 	tst.w	r1, #1
     380:	d00c      	beq.n	39c <pdca_get_channel_status+0x30>
		if ((intflag & PDCA_ISR_TERR) == PDCA_ISR_TERR) {
     382:	f010 0f04 	tst.w	r0, #4
     386:	d10c      	bne.n	3a2 <pdca_get_channel_status+0x36>
			return PDCA_CH_TRANSFER_ERROR;
		} else if ((intflag & PDCA_ISR_TRC) == PDCA_ISR_TRC) {
     388:	f010 0f02 	tst.w	r0, #2
     38c:	d10c      	bne.n	3a8 <pdca_get_channel_status+0x3c>
			return PDCA_CH_TRANSFER_COMPLETED;
		} else if ((intflag & PDCA_ISR_RCZ) == PDCA_ISR_RCZ) {
     38e:	f000 0201 	and.w	r2, r0, #1
			return PDCA_CH_COUNTER_RELOAD_IS_ZERO;
     392:	2a00      	cmp	r2, #0
     394:	bf0c      	ite	eq
     396:	2001      	moveq	r0, #1
     398:	2002      	movne	r0, #2
     39a:	bd08      	pop	{r3, pc}
		}
		return PDCA_CH_BUSY;
	} else {
		return PDCA_CH_FREE;
     39c:	f04f 0000 	mov.w	r0, #0
     3a0:	bd08      	pop	{r3, pc}
	uint32_t status = pdca_channel->PDCA_SR;
	uint32_t intflag = pdca_channel->PDCA_ISR;

	if ((status & PDCA_SR_TEN) == PDCA_SR_TEN) {
		if ((intflag & PDCA_ISR_TERR) == PDCA_ISR_TERR) {
			return PDCA_CH_TRANSFER_ERROR;
     3a2:	f04f 0004 	mov.w	r0, #4
     3a6:	bd08      	pop	{r3, pc}
		} else if ((intflag & PDCA_ISR_TRC) == PDCA_ISR_TRC) {
			return PDCA_CH_TRANSFER_COMPLETED;
     3a8:	f04f 0003 	mov.w	r0, #3
		}
		return PDCA_CH_BUSY;
	} else {
		return PDCA_CH_FREE;
	}
}
     3ac:	bd08      	pop	{r3, pc}
     3ae:	bf00      	nop

000003b0 <pdca_channel_interrupt>:
 * pdca_channel_set_callback() function.
 *
 * \param pdca_ch_number PDCA channel number to handle interrupt for
 */
static void pdca_channel_interrupt(const pdca_channel_num_t pdca_ch_number)
{
     3b0:	b510      	push	{r4, lr}
     3b2:	4604      	mov	r4, r0
	enum pdca_channel_status status;

	status = pdca_get_channel_status(pdca_ch_number);
     3b4:	f240 336d 	movw	r3, #877	; 0x36d
     3b8:	f2c0 0300 	movt	r3, #0
     3bc:	4798      	blx	r3

	if (pdca_callback_pointer[pdca_ch_number]) {
     3be:	f640 11dc 	movw	r1, #2524	; 0x9dc
     3c2:	f2c2 0100 	movt	r1, #8192	; 0x2000
     3c6:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
     3ca:	b102      	cbz	r2, 3ce <pdca_channel_interrupt+0x1e>
		pdca_callback_pointer[pdca_ch_number] (status);
     3cc:	4790      	blx	r2
     3ce:	bd10      	pop	{r4, pc}

000003d0 <PDCA_0_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 0.
 */
void PDCA_0_Handler(void)
{
     3d0:	b508      	push	{r3, lr}
	pdca_channel_interrupt(0);
     3d2:	f04f 0000 	mov.w	r0, #0
     3d6:	f240 33b1 	movw	r3, #945	; 0x3b1
     3da:	f2c0 0300 	movt	r3, #0
     3de:	4798      	blx	r3
     3e0:	bd08      	pop	{r3, pc}
     3e2:	bf00      	nop

000003e4 <PDCA_1_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 1.
 */
void PDCA_1_Handler(void)
{
     3e4:	b508      	push	{r3, lr}
	pdca_channel_interrupt(1);
     3e6:	f04f 0001 	mov.w	r0, #1
     3ea:	f240 33b1 	movw	r3, #945	; 0x3b1
     3ee:	f2c0 0300 	movt	r3, #0
     3f2:	4798      	blx	r3
     3f4:	bd08      	pop	{r3, pc}
     3f6:	bf00      	nop

000003f8 <PDCA_2_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 2.
 */
void PDCA_2_Handler(void)
{
     3f8:	b508      	push	{r3, lr}
	pdca_channel_interrupt(2);
     3fa:	f04f 0002 	mov.w	r0, #2
     3fe:	f240 33b1 	movw	r3, #945	; 0x3b1
     402:	f2c0 0300 	movt	r3, #0
     406:	4798      	blx	r3
     408:	bd08      	pop	{r3, pc}
     40a:	bf00      	nop

0000040c <PDCA_3_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 3.
 */
void PDCA_3_Handler(void)
{
     40c:	b508      	push	{r3, lr}
	pdca_channel_interrupt(3);
     40e:	f04f 0003 	mov.w	r0, #3
     412:	f240 33b1 	movw	r3, #945	; 0x3b1
     416:	f2c0 0300 	movt	r3, #0
     41a:	4798      	blx	r3
     41c:	bd08      	pop	{r3, pc}
     41e:	bf00      	nop

00000420 <PDCA_4_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 4.
 */
void PDCA_4_Handler(void)
{
     420:	b508      	push	{r3, lr}
	pdca_channel_interrupt(4);
     422:	f04f 0004 	mov.w	r0, #4
     426:	f240 33b1 	movw	r3, #945	; 0x3b1
     42a:	f2c0 0300 	movt	r3, #0
     42e:	4798      	blx	r3
     430:	bd08      	pop	{r3, pc}
     432:	bf00      	nop

00000434 <PDCA_5_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 5.
 */
void PDCA_5_Handler(void)
{
     434:	b508      	push	{r3, lr}
	pdca_channel_interrupt(5);
     436:	f04f 0005 	mov.w	r0, #5
     43a:	f240 33b1 	movw	r3, #945	; 0x3b1
     43e:	f2c0 0300 	movt	r3, #0
     442:	4798      	blx	r3
     444:	bd08      	pop	{r3, pc}
     446:	bf00      	nop

00000448 <PDCA_6_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 6.
 */
void PDCA_6_Handler(void)
{
     448:	b508      	push	{r3, lr}
	pdca_channel_interrupt(6);
     44a:	f04f 0006 	mov.w	r0, #6
     44e:	f240 33b1 	movw	r3, #945	; 0x3b1
     452:	f2c0 0300 	movt	r3, #0
     456:	4798      	blx	r3
     458:	bd08      	pop	{r3, pc}
     45a:	bf00      	nop

0000045c <PDCA_7_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 7.
 */
void PDCA_7_Handler(void)
{
     45c:	b508      	push	{r3, lr}
	pdca_channel_interrupt(7);
     45e:	f04f 0007 	mov.w	r0, #7
     462:	f240 33b1 	movw	r3, #945	; 0x3b1
     466:	f2c0 0300 	movt	r3, #0
     46a:	4798      	blx	r3
     46c:	bd08      	pop	{r3, pc}
     46e:	bf00      	nop

00000470 <PDCA_8_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 8.
 */
void PDCA_8_Handler(void)
{
     470:	b508      	push	{r3, lr}
	pdca_channel_interrupt(8);
     472:	f04f 0008 	mov.w	r0, #8
     476:	f240 33b1 	movw	r3, #945	; 0x3b1
     47a:	f2c0 0300 	movt	r3, #0
     47e:	4798      	blx	r3
     480:	bd08      	pop	{r3, pc}
     482:	bf00      	nop

00000484 <PDCA_9_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 9.
 */
void PDCA_9_Handler(void)
{
     484:	b508      	push	{r3, lr}
	pdca_channel_interrupt(9);
     486:	f04f 0009 	mov.w	r0, #9
     48a:	f240 33b1 	movw	r3, #945	; 0x3b1
     48e:	f2c0 0300 	movt	r3, #0
     492:	4798      	blx	r3
     494:	bd08      	pop	{r3, pc}
     496:	bf00      	nop

00000498 <PDCA_10_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 10.
 */
void PDCA_10_Handler(void)
{
     498:	b508      	push	{r3, lr}
	pdca_channel_interrupt(10);
     49a:	f04f 000a 	mov.w	r0, #10
     49e:	f240 33b1 	movw	r3, #945	; 0x3b1
     4a2:	f2c0 0300 	movt	r3, #0
     4a6:	4798      	blx	r3
     4a8:	bd08      	pop	{r3, pc}
     4aa:	bf00      	nop

000004ac <PDCA_11_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 11.
 */
void PDCA_11_Handler(void)
{
     4ac:	b508      	push	{r3, lr}
	pdca_channel_interrupt(11);
     4ae:	f04f 000b 	mov.w	r0, #11
     4b2:	f240 33b1 	movw	r3, #945	; 0x3b1
     4b6:	f2c0 0300 	movt	r3, #0
     4ba:	4798      	blx	r3
     4bc:	bd08      	pop	{r3, pc}
     4be:	bf00      	nop

000004c0 <PDCA_12_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 12.
 */
void PDCA_12_Handler(void)
{
     4c0:	b508      	push	{r3, lr}
	pdca_channel_interrupt(12);
     4c2:	f04f 000c 	mov.w	r0, #12
     4c6:	f240 33b1 	movw	r3, #945	; 0x3b1
     4ca:	f2c0 0300 	movt	r3, #0
     4ce:	4798      	blx	r3
     4d0:	bd08      	pop	{r3, pc}
     4d2:	bf00      	nop

000004d4 <PDCA_13_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 13.
 */
void PDCA_13_Handler(void)
{
     4d4:	b508      	push	{r3, lr}
	pdca_channel_interrupt(13);
     4d6:	f04f 000d 	mov.w	r0, #13
     4da:	f240 33b1 	movw	r3, #945	; 0x3b1
     4de:	f2c0 0300 	movt	r3, #0
     4e2:	4798      	blx	r3
     4e4:	bd08      	pop	{r3, pc}
     4e6:	bf00      	nop

000004e8 <PDCA_14_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 14.
 */
void PDCA_14_Handler(void)
{
     4e8:	b508      	push	{r3, lr}
	pdca_channel_interrupt(14);
     4ea:	f04f 000e 	mov.w	r0, #14
     4ee:	f240 33b1 	movw	r3, #945	; 0x3b1
     4f2:	f2c0 0300 	movt	r3, #0
     4f6:	4798      	blx	r3
     4f8:	bd08      	pop	{r3, pc}
     4fa:	bf00      	nop

000004fc <PDCA_15_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 15.
 */
void PDCA_15_Handler(void)
{
     4fc:	b508      	push	{r3, lr}
	pdca_channel_interrupt(15);
     4fe:	f04f 000f 	mov.w	r0, #15
     502:	f240 33b1 	movw	r3, #945	; 0x3b1
     506:	f2c0 0300 	movt	r3, #0
     50a:	4798      	blx	r3
     50c:	bd08      	pop	{r3, pc}
     50e:	bf00      	nop

00000510 <find_twim_channel_num>:
			/* Disable master transfer */
			twim->TWIM_CR = TWIM_CR_MDIS;
			/* Check for nack */
			if (transfer_status[twim_ch] == TWI_RECEIVE_NACK
					|| transfer_status[twim_ch] == TWI_ARBITRATION_LOST) {
				return ERR_IO_ERROR;
     510:	f44f 4340 	mov.w	r3, #49152	; 0xc000
#endif
	/* Disable master transfer */
	twim->TWIM_CR = TWIM_CR_MDIS;
	if (transfer_status[twim_ch] == TWI_RECEIVE_NACK
			|| transfer_status[twim_ch] == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
     514:	f2c4 0307 	movt	r3, #16391	; 0x4007
	}
	return STATUS_OK;
}
     518:	4298      	cmp	r0, r3
     51a:	d00e      	beq.n	53a <find_twim_channel_num+0x2a>
     51c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	if (twim == TWIM3) {
		return 3;
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
     520:	f2c4 0107 	movt	r1, #16391	; 0x4007
     524:	4288      	cmp	r0, r1
     526:	d00b      	beq.n	540 <find_twim_channel_num+0x30>
		return 2;
	}
#endif
#if defined(ID_TWIM1)
	if (twim == TWIM1) {
     528:	f44f 4240 	mov.w	r2, #49152	; 0xc000
     52c:	f2c4 0201 	movt	r2, #16385	; 0x4001
     530:	4290      	cmp	r0, r2
     532:	bf14      	ite	ne
     534:	2000      	movne	r0, #0
     536:	2001      	moveq	r0, #1
     538:	4770      	bx	lr
 */
static uint32_t find_twim_channel_num(Twim *twim)
{
#if defined(ID_TWIM3)
	if (twim == TWIM3) {
		return 3;
     53a:	f04f 0003 	mov.w	r0, #3
     53e:	4770      	bx	lr
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
		return 2;
     540:	f04f 0002 	mov.w	r0, #2
		return 0;
	}
#endif

	return 0;
}
     544:	4770      	bx	lr
     546:	bf00      	nop

00000548 <twim_default_callback>:

/**
 * \brief TWIM default callback function
 */
void twim_default_callback(Twim *twim)
{
     548:	b510      	push	{r4, lr}
     54a:	4604      	mov	r4, r0
	/* Get masked status register value */
	uint32_t twim_ch = find_twim_channel_num(twim);
     54c:	f240 5311 	movw	r3, #1297	; 0x511
     550:	f2c0 0300 	movt	r3, #0
     554:	4798      	blx	r3
	uint32_t status = twim->TWIM_SR;
     556:	69e1      	ldr	r1, [r4, #28]
	status &= twim_it_mask[twim_ch];
     558:	f640 1250 	movw	r2, #2384	; 0x950
     55c:	f2c2 0200 	movt	r2, #8192	; 0x2000
     560:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
     564:	4019      	ands	r1, r3
	/* this is a NACK */
	if (status & TWIM_SR_STD_MASK) {
     566:	f411 6fa0 	tst.w	r1, #1280	; 0x500
     56a:	d01a      	beq.n	5a2 <twim_default_callback+0x5a>
		/*
		 * If we get a nak, clear the valid bit in cmdr,
		 * otherwise the command will be resent.
		 */
		transfer_status[twim_ch] = (status & TWIM_IER_ANAK) ?
     56c:	f401 7380 	and.w	r3, r1, #256	; 0x100
     570:	2b00      	cmp	r3, #0
     572:	bf0c      	ite	eq
     574:	21fe      	moveq	r1, #254	; 0xfe
     576:	21fc      	movne	r1, #252	; 0xfc
     578:	f640 123c 	movw	r2, #2364	; 0x93c
     57c:	f2c2 0200 	movt	r2, #8192	; 0x2000
     580:	5411      	strb	r1, [r2, r0]
				TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim->TWIM_CMDR &= ~TWIM_CMDR_VALID;
     582:	68e3      	ldr	r3, [r4, #12]
     584:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
     588:	60e1      	str	r1, [r4, #12]
		twim->TWIM_SCR = ~0UL;
     58a:	f04f 32ff 	mov.w	r2, #4294967295
     58e:	62e2      	str	r2, [r4, #44]	; 0x2c
		twim->TWIM_IDR = ~0UL;
     590:	6262      	str	r2, [r4, #36]	; 0x24
		twim_next[twim_ch] = false;
     592:	f640 1360 	movw	r3, #2400	; 0x960
     596:	f2c2 0300 	movt	r3, #8192	; 0x2000
     59a:	f04f 0100 	mov.w	r1, #0
     59e:	5419      	strb	r1, [r3, r0]
     5a0:	bd10      	pop	{r4, pc}
	}
	/* This is a RXRDY */
	else if (status & TWIM_SR_RXRDY) {
     5a2:	f011 0f01 	tst.w	r1, #1
     5a6:	d032      	beq.n	60e <twim_default_callback+0xc6>
		/* Get data from Receive Holding Register */
		*twim_rx_data[twim_ch] = twim->TWIM_RHR;
     5a8:	f640 121c 	movw	r2, #2332	; 0x91c
     5ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
     5b0:	6961      	ldr	r1, [r4, #20]
     5b2:	b2c9      	uxtb	r1, r1
     5b4:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
     5b8:	f803 1b01 	strb.w	r1, [r3], #1
		twim_rx_data[twim_ch]++;
     5bc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
		/* Decrease received bytes number */
		twim_rx_nb_bytes[twim_ch]--;
     5c0:	f640 112c 	movw	r1, #2348	; 0x92c
     5c4:	f2c2 0100 	movt	r1, #8192	; 0x2000
     5c8:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
     5cc:	f102 33ff 	add.w	r3, r2, #4294967295
     5d0:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
		/* Receive complete */
		if (twim_rx_nb_bytes[twim_ch] == 0) {
     5d4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
     5d8:	2900      	cmp	r1, #0
     5da:	d17c      	bne.n	6d6 <twim_default_callback+0x18e>
			/* Finish the receive operation */
			twim->TWIM_IDR = TWIM_IDR_RXRDY;
     5dc:	f04f 0201 	mov.w	r2, #1
     5e0:	6262      	str	r2, [r4, #36]	; 0x24
			/* Set busy to false */
			twim_next[twim_ch] = false;
     5e2:	f640 1360 	movw	r3, #2400	; 0x960
     5e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
     5ea:	f04f 0100 	mov.w	r1, #0
     5ee:	5419      	strb	r1, [r3, r0]
#if TWIM_LOW_POWER_ENABLE
			twim->TWIM_SCR = TWIM_SCR_CCOMP;
     5f0:	f04f 0208 	mov.w	r2, #8
     5f4:	62e2      	str	r2, [r4, #44]	; 0x2c
			twim->TWIM_IER = TWIM_IER_CCOMP;
     5f6:	6222      	str	r2, [r4, #32]
			twim_it_mask[twim_ch] |= TWIM_IER_CCOMP;
     5f8:	f640 1350 	movw	r3, #2384	; 0x950
     5fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
     600:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
     604:	f041 0208 	orr.w	r2, r1, #8
     608:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
     60c:	bd10      	pop	{r4, pc}
#endif
		}
	}
	/* This is a TXRDY */
	else if (status & TWIM_SR_TXRDY) {
     60e:	f011 0f02 	tst.w	r1, #2
     612:	d059      	beq.n	6c8 <twim_default_callback+0x180>
		/* No more bytes to transmit */
		if (twim_tx_nb_bytes[twim_ch] == 0) {
     614:	f640 1174 	movw	r1, #2420	; 0x974
     618:	f2c2 0100 	movt	r1, #8192	; 0x2000
     61c:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
     620:	b9c2      	cbnz	r2, 654 <twim_default_callback+0x10c>
			/* Finish the receive operation */
			twim->TWIM_IDR = TWIM_IDR_TXRDY;
     622:	f04f 0202 	mov.w	r2, #2
     626:	6262      	str	r2, [r4, #36]	; 0x24
			/* Set busy to false */
			twim_next[twim_ch] = false;
     628:	f640 1160 	movw	r1, #2400	; 0x960
     62c:	f2c2 0100 	movt	r1, #8192	; 0x2000
     630:	f04f 0300 	mov.w	r3, #0
     634:	540b      	strb	r3, [r1, r0]
#if TWIM_LOW_POWER_ENABLE
			twim->TWIM_SCR = TWIM_SCR_CCOMP;
     636:	f04f 0208 	mov.w	r2, #8
     63a:	62e2      	str	r2, [r4, #44]	; 0x2c
			twim->TWIM_IER = TWIM_IER_CCOMP;
     63c:	6222      	str	r2, [r4, #32]
			twim_it_mask[twim_ch] |= TWIM_IER_CCOMP;
     63e:	f640 1150 	movw	r1, #2384	; 0x950
     642:	f2c2 0100 	movt	r1, #8192	; 0x2000
     646:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
     64a:	f043 0208 	orr.w	r2, r3, #8
     64e:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
     652:	bd10      	pop	{r4, pc}
#endif
		} else {
			/* Put the byte in the Transmit Holding Register */
			twim->TWIM_THR = *twim_tx_data[twim_ch]++;
     654:	f640 1240 	movw	r2, #2368	; 0x940
     658:	f2c2 0200 	movt	r2, #8192	; 0x2000
     65c:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
     660:	f813 1b01 	ldrb.w	r1, [r3], #1
     664:	61a1      	str	r1, [r4, #24]
     666:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
			/* Decrease transmitted bytes number */
			twim_tx_nb_bytes[twim_ch]--;
     66a:	f640 1374 	movw	r3, #2420	; 0x974
     66e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     672:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
     676:	f102 31ff 	add.w	r1, r2, #4294967295
     67a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
			if (twim_tx_nb_bytes[twim_ch] == 0) {
     67e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     682:	bb43      	cbnz	r3, 6d6 <twim_default_callback+0x18e>
				/* Check for next transfer */
				if (twim_next[twim_ch]) {
     684:	f640 1260 	movw	r2, #2400	; 0x960
     688:	f2c2 0200 	movt	r2, #8192	; 0x2000
     68c:	5c11      	ldrb	r1, [r2, r0]
     68e:	b311      	cbz	r1, 6d6 <twim_default_callback+0x18e>
					twim_next[twim_ch] = false;
     690:	f640 1360 	movw	r3, #2400	; 0x960
     694:	f2c2 0300 	movt	r3, #8192	; 0x2000
     698:	f04f 0200 	mov.w	r2, #0
     69c:	541a      	strb	r2, [r3, r0]
					twim_tx_nb_bytes[twim_ch] = twim_package[twim_ch]->length;
     69e:	f640 1164 	movw	r1, #2404	; 0x964
     6a2:	f2c2 0100 	movt	r1, #8192	; 0x2000
     6a6:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
     6aa:	68d9      	ldr	r1, [r3, #12]
     6ac:	f640 1274 	movw	r2, #2420	; 0x974
     6b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
     6b4:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
					twim_tx_data[twim_ch] = twim_package[twim_ch]->buffer;
     6b8:	6899      	ldr	r1, [r3, #8]
     6ba:	f640 1340 	movw	r3, #2368	; 0x940
     6be:	f2c2 0300 	movt	r3, #8192	; 0x2000
     6c2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
     6c6:	bd10      	pop	{r4, pc}
				}
			}
		}
	}
#if TWIM_LOW_POWER_ENABLE
	else if (status & TWIM_SR_CCOMP) {
     6c8:	f011 0f08 	tst.w	r1, #8
     6cc:	d003      	beq.n	6d6 <twim_default_callback+0x18e>
		twim->TWIM_SCR = TWIM_SCR_CCOMP;
     6ce:	f04f 0008 	mov.w	r0, #8
     6d2:	62e0      	str	r0, [r4, #44]	; 0x2c
		twim->TWIM_IDR = TWIM_IDR_CCOMP;
     6d4:	6260      	str	r0, [r4, #36]	; 0x24
     6d6:	bd10      	pop	{r4, pc}

000006d8 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
     6d8:	b470      	push	{r4, r5, r6}
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);
     6da:	fbb2 f2f1 	udiv	r2, r2, r1
     6de:	ea4f 0252 	mov.w	r2, r2, lsr #1

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     6e2:	2aff      	cmp	r2, #255	; 0xff
     6e4:	d91e      	bls.n	724 <twim_set_speed+0x4c>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     6e6:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     6ea:	2aff      	cmp	r2, #255	; 0xff
     6ec:	d935      	bls.n	75a <twim_set_speed+0x82>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     6ee:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     6f2:	2aff      	cmp	r2, #255	; 0xff
     6f4:	d934      	bls.n	760 <twim_set_speed+0x88>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     6f6:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     6fa:	2aff      	cmp	r2, #255	; 0xff
     6fc:	d933      	bls.n	766 <twim_set_speed+0x8e>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     6fe:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     702:	2aff      	cmp	r2, #255	; 0xff
     704:	d932      	bls.n	76c <twim_set_speed+0x94>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     706:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     70a:	2aff      	cmp	r2, #255	; 0xff
     70c:	d931      	bls.n	772 <twim_set_speed+0x9a>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     70e:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     712:	2aff      	cmp	r2, #255	; 0xff
     714:	d930      	bls.n	778 <twim_set_speed+0xa0>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     716:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     71a:	2aff      	cmp	r2, #255	; 0xff
     71c:	d92f      	bls.n	77e <twim_set_speed+0xa6>
		/* divide f_prescaled value */
		f_prescaled /= 2;
	}

	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
     71e:	f04f 00f8 	mov.w	r0, #248	; 0xf8
     722:	e018      	b.n	756 <twim_set_speed+0x7e>
 */
status_code_t twim_set_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
     724:	f04f 0600 	mov.w	r6, #0
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
     728:	ea4f 0152 	mov.w	r1, r2, lsr #1
     72c:	b2cd      	uxtb	r5, r1
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
			| TWIM_CWGR_STASTO(f_prescaled);
     72e:	ea4f 4402 	mov.w	r4, r2, lsl #16
     732:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
     736:	432c      	orrs	r4, r5
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
     738:	ea4f 6303 	mov.w	r3, r3, lsl #24
     73c:	f003 6570 	and.w	r5, r3, #251658240	; 0xf000000
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_CWGR_EXP(cwgr_exp)
     740:	432c      	orrs	r4, r5
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
     742:	1a52      	subs	r2, r2, r1
     744:	ea4f 6102 	mov.w	r1, r2, lsl #24
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
     748:	ea44 4311 	orr.w	r3, r4, r1, lsr #16
			| TWIM_CWGR_STASTO(f_prescaled);
     74c:	ea43 7206 	orr.w	r2, r3, r6, lsl #28
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
     750:	6042      	str	r2, [r0, #4]
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
			| TWIM_CWGR_STASTO(f_prescaled);

	return STATUS_OK;
     752:	f04f 0000 	mov.w	r0, #0
     756:	b240      	sxtb	r0, r0
     758:	e014      	b.n	784 <twim_set_speed+0xac>
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
		/* increase clock divider */
		cwgr_exp++;
     75a:	f04f 0601 	mov.w	r6, #1
     75e:	e7e3      	b.n	728 <twim_set_speed+0x50>
     760:	f04f 0602 	mov.w	r6, #2
     764:	e7e0      	b.n	728 <twim_set_speed+0x50>
     766:	f04f 0603 	mov.w	r6, #3
     76a:	e7dd      	b.n	728 <twim_set_speed+0x50>
     76c:	f04f 0604 	mov.w	r6, #4
     770:	e7da      	b.n	728 <twim_set_speed+0x50>
     772:	f04f 0605 	mov.w	r6, #5
     776:	e7d7      	b.n	728 <twim_set_speed+0x50>
     778:	f04f 0606 	mov.w	r6, #6
     77c:	e7d4      	b.n	728 <twim_set_speed+0x50>
     77e:	f04f 0607 	mov.w	r6, #7
     782:	e7d1      	b.n	728 <twim_set_speed+0x50>
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
			| TWIM_CWGR_STASTO(f_prescaled);

	return STATUS_OK;
}
     784:	bc70      	pop	{r4, r5, r6}
     786:	4770      	bx	lr

00000788 <twim_set_hsmode_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_hsmode_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
     788:	b470      	push	{r4, r5, r6}
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);
     78a:	fbb2 f2f1 	udiv	r2, r2, r1
     78e:	ea4f 0252 	mov.w	r2, r2, lsr #1

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     792:	2aff      	cmp	r2, #255	; 0xff
     794:	d91e      	bls.n	7d4 <twim_set_hsmode_speed+0x4c>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     796:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     79a:	2aff      	cmp	r2, #255	; 0xff
     79c:	d935      	bls.n	80a <twim_set_hsmode_speed+0x82>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     79e:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     7a2:	2aff      	cmp	r2, #255	; 0xff
     7a4:	d934      	bls.n	810 <twim_set_hsmode_speed+0x88>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     7a6:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     7aa:	2aff      	cmp	r2, #255	; 0xff
     7ac:	d933      	bls.n	816 <twim_set_hsmode_speed+0x8e>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     7ae:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     7b2:	2aff      	cmp	r2, #255	; 0xff
     7b4:	d932      	bls.n	81c <twim_set_hsmode_speed+0x94>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     7b6:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     7ba:	2aff      	cmp	r2, #255	; 0xff
     7bc:	d931      	bls.n	822 <twim_set_hsmode_speed+0x9a>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     7be:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     7c2:	2aff      	cmp	r2, #255	; 0xff
     7c4:	d930      	bls.n	828 <twim_set_hsmode_speed+0xa0>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
     7c6:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     7ca:	2aff      	cmp	r2, #255	; 0xff
     7cc:	d92f      	bls.n	82e <twim_set_hsmode_speed+0xa6>
		/* divide f_prescaled value */
		f_prescaled /= 2;
	}

	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
     7ce:	f04f 00f8 	mov.w	r0, #248	; 0xf8
     7d2:	e018      	b.n	806 <twim_set_hsmode_speed+0x7e>
 */
status_code_t twim_set_hsmode_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
     7d4:	f04f 0600 	mov.w	r6, #0
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
     7d8:	ea4f 0152 	mov.w	r1, r2, lsr #1
     7dc:	b2cd      	uxtb	r5, r1
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
			| TWIM_HSCWGR_STASTO(f_prescaled);
     7de:	ea4f 4402 	mov.w	r4, r2, lsl #16
     7e2:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
     7e6:	432c      	orrs	r4, r5
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
     7e8:	ea4f 6303 	mov.w	r3, r3, lsl #24
     7ec:	f003 6570 	and.w	r5, r3, #251658240	; 0xf000000
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_HSCWGR_EXP(cwgr_exp)
     7f0:	432c      	orrs	r4, r5
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
     7f2:	1a52      	subs	r2, r2, r1
     7f4:	ea4f 6102 	mov.w	r1, r2, lsl #24
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
     7f8:	ea44 4311 	orr.w	r3, r4, r1, lsr #16
			| TWIM_HSCWGR_STASTO(f_prescaled);
     7fc:	ea43 7206 	orr.w	r2, r3, r6, lsl #28
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
     800:	6382      	str	r2, [r0, #56]	; 0x38
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
			| TWIM_HSCWGR_STASTO(f_prescaled);

	return STATUS_OK;
     802:	f04f 0000 	mov.w	r0, #0
     806:	b240      	sxtb	r0, r0
     808:	e014      	b.n	834 <twim_set_hsmode_speed+0xac>
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
		/* increase clock divider */
		cwgr_exp++;
     80a:	f04f 0601 	mov.w	r6, #1
     80e:	e7e3      	b.n	7d8 <twim_set_hsmode_speed+0x50>
     810:	f04f 0602 	mov.w	r6, #2
     814:	e7e0      	b.n	7d8 <twim_set_hsmode_speed+0x50>
     816:	f04f 0603 	mov.w	r6, #3
     81a:	e7dd      	b.n	7d8 <twim_set_hsmode_speed+0x50>
     81c:	f04f 0604 	mov.w	r6, #4
     820:	e7da      	b.n	7d8 <twim_set_hsmode_speed+0x50>
     822:	f04f 0605 	mov.w	r6, #5
     826:	e7d7      	b.n	7d8 <twim_set_hsmode_speed+0x50>
     828:	f04f 0606 	mov.w	r6, #6
     82c:	e7d4      	b.n	7d8 <twim_set_hsmode_speed+0x50>
     82e:	f04f 0607 	mov.w	r6, #7
     832:	e7d1      	b.n	7d8 <twim_set_hsmode_speed+0x50>
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
			| TWIM_HSCWGR_STASTO(f_prescaled);

	return STATUS_OK;
}
     834:	bc70      	pop	{r4, r5, r6}
     836:	4770      	bx	lr

00000838 <twim_set_config>:
 *
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_config(Twim *twim, struct twim_config *config)
{
     838:	b570      	push	{r4, r5, r6, lr}
     83a:	4605      	mov	r5, r0
     83c:	460c      	mov	r4, r1
	sysclk_enable_peripheral_clock(twim);
     83e:	f641 2379 	movw	r3, #6777	; 0x1a79
     842:	f2c0 0300 	movt	r3, #0
     846:	4798      	blx	r3
	/* Enable master transfer */
	twim->TWIM_CR = TWIM_CR_MEN;
     848:	f04f 0001 	mov.w	r0, #1
     84c:	6028      	str	r0, [r5, #0]
	/* Reset TWI */
	twim->TWIM_CR = TWIM_CR_SWRST;
     84e:	f04f 0180 	mov.w	r1, #128	; 0x80
     852:	6029      	str	r1, [r5, #0]
	/* Clear SR */
	twim->TWIM_SCR = ~0UL;
     854:	f04f 32ff 	mov.w	r2, #4294967295
     858:	62ea      	str	r2, [r5, #44]	; 0x2c

	if (config->smbus) {
     85a:	7ba3      	ldrb	r3, [r4, #14]
     85c:	b12b      	cbz	r3, 86a <twim_set_config+0x32>
		/* Enable SMBUS Transfer */
		twim->TWIM_CR = TWIM_CR_SMEN;
     85e:	f04f 0010 	mov.w	r0, #16
     862:	6028      	str	r0, [r5, #0]
		twim->TWIM_SMBTR = (uint32_t) -1;
     864:	f04f 31ff 	mov.w	r1, #4294967295
     868:	60a9      	str	r1, [r5, #8]
	}

	/* Select the speed */
	if (config->speed) {
     86a:	6861      	ldr	r1, [r4, #4]
     86c:	b149      	cbz	r1, 882 <twim_set_config+0x4a>
		if (twim_set_speed(twim, config->speed, config->twim_clk,
     86e:	4628      	mov	r0, r5
     870:	6822      	ldr	r2, [r4, #0]
     872:	7b23      	ldrb	r3, [r4, #12]
     874:	f240 66d9 	movw	r6, #1753	; 0x6d9
     878:	f2c0 0600 	movt	r6, #0
     87c:	47b0      	blx	r6
     87e:	2800      	cmp	r0, #0
     880:	d15d      	bne.n	93e <twim_set_config+0x106>
				config->data_setup_cycles) != STATUS_OK) {
			return ERR_INVALID_ARG;
		}
	}
	if (config->hsmode_speed) {
     882:	68a1      	ldr	r1, [r4, #8]
     884:	b149      	cbz	r1, 89a <twim_set_config+0x62>
		if (twim_set_hsmode_speed(twim, config->hsmode_speed, config->twim_clk,
     886:	4628      	mov	r0, r5
     888:	6822      	ldr	r2, [r4, #0]
     88a:	7b63      	ldrb	r3, [r4, #13]
     88c:	f240 7689 	movw	r6, #1929	; 0x789
     890:	f2c0 0600 	movt	r6, #0
     894:	47b0      	blx	r6
     896:	2800      	cmp	r0, #0
     898:	d154      	bne.n	944 <twim_set_config+0x10c>
		}
	}

	/* Set clock and data slew rate */
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
			TWIM_SRR_FILTER(2) : TWIM_SRR_FILTER(3))
     89a:	f244 233f 	movw	r3, #16959	; 0x423f
     89e:	f2c0 030f 	movt	r3, #15
     8a2:	6862      	ldr	r2, [r4, #4]
     8a4:	429a      	cmp	r2, r3
     8a6:	bf8c      	ite	hi
     8a8:	f04f 5240 	movhi.w	r2, #805306368	; 0x30000000
     8ac:	f04f 5200 	movls.w	r2, #536870912	; 0x20000000
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
     8b0:	7c60      	ldrb	r0, [r4, #17]
     8b2:	ea4f 2100 	mov.w	r1, r0, lsl #8
     8b6:	f401 7140 	and.w	r1, r1, #768	; 0x300
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
     8ba:	7ca3      	ldrb	r3, [r4, #18]
     8bc:	f003 0007 	and.w	r0, r3, #7

	/* Set clock and data slew rate */
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
			TWIM_SRR_FILTER(2) : TWIM_SRR_FILTER(3))
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
     8c0:	4301      	orrs	r1, r0
     8c2:	7c23      	ldrb	r3, [r4, #16]
     8c4:	ea4f 4003 	mov.w	r0, r3, lsl #16
     8c8:	f400 20e0 	and.w	r0, r0, #458752	; 0x70000
	}

	/* Set clock and data slew rate */
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
			TWIM_SRR_FILTER(2) : TWIM_SRR_FILTER(3))
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
     8cc:	7be3      	ldrb	r3, [r4, #15]
     8ce:	ea4f 6303 	mov.w	r3, r3, lsl #24
     8d2:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
     8d6:	4318      	orrs	r0, r3
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
     8d8:	4301      	orrs	r1, r0
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
     8da:	4311      	orrs	r1, r2
			return ERR_INVALID_ARG;
		}
	}

	/* Set clock and data slew rate */
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
     8dc:	63e9      	str	r1, [r5, #60]	; 0x3c
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
			| TWIM_HSSRR_CLSLEW(config->hs_clock_slew_limit)
			| TWIM_HSSRR_CLDRIVEL(config->hs_clock_drive_strength_low)
			| TWIM_HSSRR_CLDRIVEH(config->hs_clock_drive_strength_high)
			| TWIM_HSSRR_DASLEW(config->hs_data_slew_limit)
			| TWIM_HSSRR_DADRIVEL(config->hs_data_drive_strength_low);
     8de:	7de2      	ldrb	r2, [r4, #23]
     8e0:	f002 0307 	and.w	r3, r2, #7
     8e4:	f043 5080 	orr.w	r0, r3, #268435456	; 0x10000000
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
			| TWIM_HSSRR_CLSLEW(config->hs_clock_slew_limit)
			| TWIM_HSSRR_CLDRIVEL(config->hs_clock_drive_strength_low)
     8e8:	7d61      	ldrb	r1, [r4, #21]
     8ea:	ea4f 4201 	mov.w	r2, r1, lsl #16
     8ee:	f402 21e0 	and.w	r1, r2, #458752	; 0x70000
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
			| TWIM_HSSRR_CLSLEW(config->hs_clock_slew_limit)
     8f2:	7ce3      	ldrb	r3, [r4, #19]
     8f4:	ea4f 6203 	mov.w	r2, r3, lsl #24
     8f8:	f002 7340 	and.w	r3, r2, #50331648	; 0x3000000
			| TWIM_HSSRR_CLDRIVEL(config->hs_clock_drive_strength_low)
     8fc:	ea41 0203 	orr.w	r2, r1, r3
			| TWIM_HSSRR_CLDRIVEH(config->hs_clock_drive_strength_high)
     900:	7d21      	ldrb	r1, [r4, #20]
     902:	ea4f 5301 	mov.w	r3, r1, lsl #20
     906:	f403 1140 	and.w	r1, r3, #3145728	; 0x300000
     90a:	430a      	orrs	r2, r1
			| TWIM_HSSRR_DASLEW(config->hs_data_slew_limit)
     90c:	7da3      	ldrb	r3, [r4, #22]
     90e:	ea4f 2103 	mov.w	r1, r3, lsl #8
     912:	f401 7340 	and.w	r3, r1, #768	; 0x300
     916:	431a      	orrs	r2, r3
			| TWIM_HSSRR_DADRIVEL(config->hs_data_drive_strength_low);
     918:	4310      	orrs	r0, r2
			TWIM_SRR_FILTER(2) : TWIM_SRR_FILTER(3))
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
     91a:	6428      	str	r0, [r5, #64]	; 0x40
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
     91c:	f640 11c8 	movw	r1, #2504	; 0x9c8
     920:	f2c2 0100 	movt	r1, #8192	; 0x2000
     924:	f04f 0300 	mov.w	r3, #0
     928:	700b      	strb	r3, [r1, #0]
     92a:	704b      	strb	r3, [r1, #1]
     92c:	708b      	strb	r3, [r1, #2]
     92e:	70cb      	strb	r3, [r1, #3]
     930:	710b      	strb	r3, [r1, #4]
     932:	714b      	strb	r3, [r1, #5]
     934:	718b      	strb	r3, [r1, #6]
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
     936:	f04f 0201 	mov.w	r2, #1
     93a:	71ca      	strb	r2, [r1, #7]

#if TWIM_LOW_POWER_ENABLE
	sleepmgr_init();
#endif

	return STATUS_OK;
     93c:	e004      	b.n	948 <twim_set_config+0x110>

	/* Select the speed */
	if (config->speed) {
		if (twim_set_speed(twim, config->speed, config->twim_clk,
				config->data_setup_cycles) != STATUS_OK) {
			return ERR_INVALID_ARG;
     93e:	f04f 03f8 	mov.w	r3, #248	; 0xf8
     942:	e001      	b.n	948 <twim_set_config+0x110>
		}
	}
	if (config->hsmode_speed) {
		if (twim_set_hsmode_speed(twim, config->hsmode_speed, config->twim_clk,
				config->hsmode_data_setup_cycles) != STATUS_OK) {
			return ERR_INVALID_ARG;
     944:	f04f 03f8 	mov.w	r3, #248	; 0xf8
#if TWIM_LOW_POWER_ENABLE
	sleepmgr_init();
#endif

	return STATUS_OK;
}
     948:	b258      	sxtb	r0, r3
     94a:	bd70      	pop	{r4, r5, r6, pc}

0000094c <twim_enable_interrupt>:
 * \param interrupt_source  The TWI interrupt to be enabled
 */
void twim_enable_interrupt(Twim *twim, uint32_t interrupt_source)
{
	/* Set the interrupt flags */
	twim->TWIM_IER = interrupt_source;
     94c:	6201      	str	r1, [r0, #32]
     94e:	4770      	bx	lr

00000950 <twim_get_status>:
 *
 * \param twim   Base address of the TWIM
 */
uint32_t twim_get_status(Twim *twim)
{
	return twim->TWIM_SR;
     950:	69c0      	ldr	r0, [r0, #28]
}
     952:	4770      	bx	lr

00000954 <twi_master_write>:
 *
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twi_master_write(Twim *twim, struct twim_package *package)
{
     954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     958:	4606      	mov	r6, r0
     95a:	460c      	mov	r4, r1
	uint32_t twim_ch = find_twim_channel_num(twim);
     95c:	f240 5311 	movw	r3, #1297	; 0x511
     960:	f2c0 0300 	movt	r3, #0
     964:	4798      	blx	r3
     966:	4605      	mov	r5, r0

	/* Reset the TWIM module to clear the THR register */
	twim->TWIM_CR = TWIM_CR_MEN;
     968:	f04f 0001 	mov.w	r0, #1
     96c:	6030      	str	r0, [r6, #0]
	twim->TWIM_CR = TWIM_CR_SWRST;
     96e:	f04f 0180 	mov.w	r1, #128	; 0x80
     972:	6031      	str	r1, [r6, #0]
	twim->TWIM_CR = TWIM_CR_MDIS;
     974:	f04f 0202 	mov.w	r2, #2
     978:	6032      	str	r2, [r6, #0]
	/* Clear the interrupt flags */
	twim->TWIM_IDR = ~0UL;
     97a:	f04f 37ff 	mov.w	r7, #4294967295
     97e:	6277      	str	r7, [r6, #36]	; 0x24
	/* Clear the status flags */
	twim->TWIM_SCR = ~0UL;
     980:	62f7      	str	r7, [r6, #44]	; 0x2c
	/* Initialize bus transfer status */
	transfer_status[twim_ch] = TWI_SUCCESS;
     982:	f04f 0300 	mov.w	r3, #0
     986:	f640 103c 	movw	r0, #2364	; 0x93c
     98a:	f2c2 0000 	movt	r0, #8192	; 0x2000
     98e:	5543      	strb	r3, [r0, r5]
	/* Mask NACK and TXRDY interrupts */
	twim_it_mask[twim_ch] = TWIM_IER_STD_MASK | TWIM_IER_TXRDY;
     990:	f640 1250 	movw	r2, #2384	; 0x950
     994:	f2c2 0200 	movt	r2, #8192	; 0x2000
     998:	f240 5102 	movw	r1, #1282	; 0x502
     99c:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
	/* Set next transfer to false */
	twim_next[twim_ch] = false;
     9a0:	f640 1760 	movw	r7, #2400	; 0x960
     9a4:	f2c2 0700 	movt	r7, #8192	; 0x2000
     9a8:	557b      	strb	r3, [r7, r5]

	/* Check if internal address access is performed */
	if (package->addr_length) {
     9aa:	79e3      	ldrb	r3, [r4, #7]
     9ac:	b1db      	cbz	r3, 9e6 <twi_master_write+0x92>
		/* Selection of first valid byte of the address */
		twim_tx_data[twim_ch] = package->addr;
     9ae:	f104 0004 	add.w	r0, r4, #4
     9b2:	f640 1240 	movw	r2, #2368	; 0x940
     9b6:	f2c2 0200 	movt	r2, #8192	; 0x2000
     9ba:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
		/* Set the number of bytes to transmit */
		twim_tx_nb_bytes[twim_ch] = package->addr_length;
     9be:	f640 1174 	movw	r1, #2420	; 0x974
     9c2:	f2c2 0100 	movt	r1, #8192	; 0x2000
     9c6:	f841 3025 	str.w	r3, [r1, r5, lsl #2]
		/* Set next transfer to true */
		twim_next[twim_ch] = true;
     9ca:	f640 1360 	movw	r3, #2400	; 0x960
     9ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
     9d2:	f04f 0701 	mov.w	r7, #1
     9d6:	555f      	strb	r7, [r3, r5]
		/* Set the number of bytes & address for next transfer */
		twim_package[twim_ch] = package;
     9d8:	f640 1064 	movw	r0, #2404	; 0x964
     9dc:	f2c2 0000 	movt	r0, #8192	; 0x2000
     9e0:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
     9e4:	e00d      	b.n	a02 <twi_master_write+0xae>
	} else {
		/* Get a pointer to applicative data */
		twim_tx_data[twim_ch] = package->buffer;
     9e6:	68a0      	ldr	r0, [r4, #8]
     9e8:	f640 1240 	movw	r2, #2368	; 0x940
     9ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
     9f0:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
		/* Get a copy of nb bytes to write */
		twim_tx_nb_bytes[twim_ch] = package->length;
     9f4:	68e1      	ldr	r1, [r4, #12]
     9f6:	f640 1774 	movw	r7, #2420	; 0x974
     9fa:	f2c2 0700 	movt	r7, #8192	; 0x2000
     9fe:	f847 1025 	str.w	r1, [r7, r5, lsl #2]
	}

	/* Initiate the transfer to send the data */
	twim->TWIM_CMDR = (package->high_speed ? (TWIM_CMDR_HS |
			TWIM_CMDR_HSMCODE(package->high_speed_code)) : 0)
			| TWIM_CMDR_SADR(package->chip)
     a02:	7c62      	ldrb	r2, [r4, #17]
     a04:	b13a      	cbz	r2, a16 <twi_master_write+0xc2>
		twim_tx_nb_bytes[twim_ch] = package->length;
	}

	/* Initiate the transfer to send the data */
	twim->TWIM_CMDR = (package->high_speed ? (TWIM_CMDR_HS |
			TWIM_CMDR_HSMCODE(package->high_speed_code)) : 0)
     a06:	7ca3      	ldrb	r3, [r4, #18]
     a08:	ea4f 7703 	mov.w	r7, r3, lsl #28
     a0c:	f007 40e0 	and.w	r0, r7, #1879048192	; 0x70000000
			| TWIM_CMDR_SADR(package->chip)
     a10:	f040 6180 	orr.w	r1, r0, #67108864	; 0x4000000
     a14:	e001      	b.n	a1a <twi_master_write+0xc6>
     a16:	f04f 0100 	mov.w	r1, #0
     a1a:	6822      	ldr	r2, [r4, #0]
     a1c:	f240 73fe 	movw	r3, #2046	; 0x7fe
     a20:	ea03 0742 	and.w	r7, r3, r2, lsl #1
			| TWIM_CMDR_NBYTES(package->length + package->addr_length)
     a24:	79e0      	ldrb	r0, [r4, #7]
     a26:	68e2      	ldr	r2, [r4, #12]
     a28:	1883      	adds	r3, r0, r2
     a2a:	ea4f 4003 	mov.w	r0, r3, lsl #16
     a2e:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
			| TWIM_CMDR_VALID
			| TWIM_CMDR_START
			| TWIM_CMDR_STOP
			| (package->ten_bit ? TWIM_CMDR_TENBIT : 0);
     a32:	7c24      	ldrb	r4, [r4, #16]
     a34:	2c00      	cmp	r4, #0
     a36:	bf14      	ite	ne
     a38:	f44f 6200 	movne.w	r2, #2048	; 0x800
     a3c:	2200      	moveq	r2, #0
	}

	/* Initiate the transfer to send the data */
	twim->TWIM_CMDR = (package->high_speed ? (TWIM_CMDR_HS |
			TWIM_CMDR_HSMCODE(package->high_speed_code)) : 0)
			| TWIM_CMDR_SADR(package->chip)
     a3e:	f447 4760 	orr.w	r7, r7, #57344	; 0xe000
			| TWIM_CMDR_NBYTES(package->length + package->addr_length)
     a42:	4307      	orrs	r7, r0
			| TWIM_CMDR_VALID
			| TWIM_CMDR_START
			| TWIM_CMDR_STOP
			| (package->ten_bit ? TWIM_CMDR_TENBIT : 0);
     a44:	430f      	orrs	r7, r1
     a46:	4317      	orrs	r7, r2
		/* Get a copy of nb bytes to write */
		twim_tx_nb_bytes[twim_ch] = package->length;
	}

	/* Initiate the transfer to send the data */
	twim->TWIM_CMDR = (package->high_speed ? (TWIM_CMDR_HS |
     a48:	60f7      	str	r7, [r6, #12]
			| TWIM_CMDR_START
			| TWIM_CMDR_STOP
			| (package->ten_bit ? TWIM_CMDR_TENBIT : 0);

	/* Update IMR through IER */
	twim->TWIM_IER = twim_it_mask[twim_ch];
     a4a:	f640 1150 	movw	r1, #2384	; 0x950
     a4e:	f2c2 0100 	movt	r1, #8192	; 0x2000
     a52:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
     a56:	6233      	str	r3, [r6, #32]
	/* Enable master transfer */
	twim->TWIM_CR = TWIM_CR_MEN;
     a58:	f04f 0001 	mov.w	r0, #1
     a5c:	6030      	str	r0, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     a5e:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     a62:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     a64:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     a68:	f240 0238 	movw	r2, #56	; 0x38
     a6c:	f2c2 0200 	movt	r2, #8192	; 0x2000
     a70:	f04f 0700 	mov.w	r7, #0
     a74:	7017      	strb	r7, [r2, #0]
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     a76:	f640 13c8 	movw	r3, #2504	; 0x9c8
     a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     a7e:	7899      	ldrb	r1, [r3, #2]
     a80:	f101 0101 	add.w	r1, r1, #1
     a84:	7099      	strb	r1, [r3, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     a86:	2c00      	cmp	r4, #0
     a88:	d138      	bne.n	afc <twi_master_write+0x1a8>
		cpu_irq_enable();
     a8a:	f240 0038 	movw	r0, #56	; 0x38
     a8e:	f2c2 0000 	movt	r0, #8192	; 0x2000
     a92:	f04f 0401 	mov.w	r4, #1
     a96:	7004      	strb	r4, [r0, #0]
     a98:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     a9c:	b662      	cpsie	i
     a9e:	e02d      	b.n	afc <twi_master_write+0x1a8>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     aa0:	b672      	cpsid	i
     aa2:	f3bf 8f5f 	dmb	sy
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
     aa6:	f04f 0300 	mov.w	r3, #0
     aaa:	7023      	strb	r3, [r4, #0]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
     aac:	f640 11c8 	movw	r1, #2504	; 0x9c8
     ab0:	f2c2 0100 	movt	r1, #8192	; 0x2000
     ab4:	7808      	ldrb	r0, [r1, #0]
     ab6:	b968      	cbnz	r0, ad4 <twi_master_write+0x180>
     ab8:	f640 13c8 	movw	r3, #2504	; 0x9c8
     abc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
     ac0:	f04f 0100 	mov.w	r1, #0
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
     ac4:	f101 0101 	add.w	r1, r1, #1
     ac8:	b2c9      	uxtb	r1, r1

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
     aca:	f813 2f01 	ldrb.w	r2, [r3, #1]!
     ace:	2a00      	cmp	r2, #0
     ad0:	d0f8      	beq.n	ac4 <twi_master_write+0x170>
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
     ad2:	b931      	cbnz	r1, ae2 <twi_master_write+0x18e>
		cpu_irq_enable();
     ad4:	f04f 0101 	mov.w	r1, #1
     ad8:	7021      	strb	r1, [r4, #0]
     ada:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     ade:	b662      	cpsie	i
     ae0:	e01c      	b.n	b1c <twi_master_write+0x1c8>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     ae2:	b672      	cpsid	i
     ae4:	f3bf 8f5f 	dmb	sy

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
     ae8:	f04f 0000 	mov.w	r0, #0
     aec:	7020      	strb	r0, [r4, #0]

	/* Enter the sleep mode. */
	bpm_sleep(BPM, sleep_mode);
     aee:	4648      	mov	r0, r9
     af0:	f642 2319 	movw	r3, #10777	; 0x2a19
     af4:	f2c0 0300 	movt	r3, #0
     af8:	4798      	blx	r3
     afa:	e00f      	b.n	b1c <twi_master_write+0x1c8>
	/* Send data */
#if TWIM_LOW_POWER_ENABLE
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_1);
	while (!(transfer_status[twim_ch])
     afc:	f640 173c 	movw	r7, #2364	; 0x93c
     b00:	f2c2 0700 	movt	r7, #8192	; 0x2000
			&& !(twim_get_status(twim) & TWIM_SR_IDLE)) {
     b04:	f640 1851 	movw	r8, #2385	; 0x951
     b08:	f2c0 0800 	movt	r8, #0
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
     b0c:	f240 0438 	movw	r4, #56	; 0x38
     b10:	f2c2 0400 	movt	r4, #8192	; 0x2000
     b14:	f04f 0900 	mov.w	r9, #0
     b18:	f2c4 090f 	movt	r9, #16399	; 0x400f
	/* Enable master transfer */
	twim->TWIM_CR = TWIM_CR_MEN;
	/* Send data */
#if TWIM_LOW_POWER_ENABLE
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_1);
	while (!(transfer_status[twim_ch])
     b1c:	5d7a      	ldrb	r2, [r7, r5]
     b1e:	b922      	cbnz	r2, b2a <twi_master_write+0x1d6>
			&& !(twim_get_status(twim) & TWIM_SR_IDLE)) {
     b20:	4630      	mov	r0, r6
     b22:	47c0      	blx	r8
     b24:	f010 0f10 	tst.w	r0, #16
     b28:	d0ba      	beq.n	aa0 <twi_master_write+0x14c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     b2a:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     b2e:	b672      	cpsid	i
     b30:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     b34:	f240 0338 	movw	r3, #56	; 0x38
     b38:	f2c2 0300 	movt	r3, #8192	; 0x2000
     b3c:	f04f 0100 	mov.w	r1, #0
     b40:	7019      	strb	r1, [r3, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
     b42:	f640 12c8 	movw	r2, #2504	; 0x9c8
     b46:	f2c2 0200 	movt	r2, #8192	; 0x2000
     b4a:	7893      	ldrb	r3, [r2, #2]
     b4c:	f103 31ff 	add.w	r1, r3, #4294967295
     b50:	7091      	strb	r1, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     b52:	b948      	cbnz	r0, b68 <twi_master_write+0x214>
		cpu_irq_enable();
     b54:	f240 0038 	movw	r0, #56	; 0x38
     b58:	f2c2 0000 	movt	r0, #8192	; 0x2000
     b5c:	f04f 0201 	mov.w	r2, #1
     b60:	7002      	strb	r2, [r0, #0]
     b62:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     b66:	b662      	cpsie	i
			&& !(twim_get_status(twim) & TWIM_SR_IDLE)) {
	}
#endif

	/* Disable master transfer */
	twim->TWIM_CR = TWIM_CR_MDIS;
     b68:	f04f 0302 	mov.w	r3, #2
     b6c:	6033      	str	r3, [r6, #0]
	/* Check for nack */
	if (transfer_status[twim_ch] == TWI_RECEIVE_NACK
     b6e:	f640 113c 	movw	r1, #2364	; 0x93c
     b72:	f2c2 0100 	movt	r1, #8192	; 0x2000
     b76:	5d48      	ldrb	r0, [r1, r5]
     b78:	b242      	sxtb	r2, r0
     b7a:	f112 0f04 	cmn.w	r2, #4
     b7e:	d00b      	beq.n	b98 <twi_master_write+0x244>
			|| transfer_status[twim_ch] == TWI_ARBITRATION_LOST) {
     b80:	f640 133c 	movw	r3, #2364	; 0x93c
     b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
     b88:	5d59      	ldrb	r1, [r3, r5]
     b8a:	b248      	sxtb	r0, r1
		return ERR_IO_ERROR;
     b8c:	f110 0f02 	cmn.w	r0, #2
     b90:	bf0c      	ite	eq
     b92:	22ff      	moveq	r2, #255	; 0xff
     b94:	2200      	movne	r2, #0
     b96:	e001      	b.n	b9c <twi_master_write+0x248>
     b98:	f04f 02ff 	mov.w	r2, #255	; 0xff
	}
	return STATUS_OK;
}
     b9c:	b250      	sxtb	r0, r2
     b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     ba2:	bf00      	nop

00000ba4 <twim_set_callback>:
 * \param callback   Callback function pointer
 * \param irq_level  Interrupt level
 */
void twim_set_callback(Twim *twim, uint32_t interrupt_source,
	twim_callback_t callback, uint8_t irq_level)
{
     ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     ba8:	4604      	mov	r4, r0
     baa:	460e      	mov	r6, r1
     bac:	4690      	mov	r8, r2
     bae:	461f      	mov	r7, r3
	uint32_t twim_ch = find_twim_channel_num(twim);
     bb0:	f240 5311 	movw	r3, #1297	; 0x511
     bb4:	f2c0 0300 	movt	r3, #0
     bb8:	4798      	blx	r3
	uint32_t irq_line = 0;

#if defined(ID_TWIM3)
	if (twim == TWIM3) {
     bba:	f44f 4540 	mov.w	r5, #49152	; 0xc000
     bbe:	f2c4 0507 	movt	r5, #16391	; 0x4007
     bc2:	42ac      	cmp	r4, r5
     bc4:	d00e      	beq.n	be4 <twim_set_callback+0x40>
		irq_line = TWIM3_IRQn;
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
     bc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     bca:	f2c4 0107 	movt	r1, #16391	; 0x4007
     bce:	428c      	cmp	r4, r1
     bd0:	d011      	beq.n	bf6 <twim_set_callback+0x52>
		irq_line = TWIM2_IRQn;
	}
#endif
#if defined(ID_TWIM1)
	if (twim == TWIM1) {
     bd2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
     bd6:	f2c4 0201 	movt	r2, #16385	; 0x4001
     bda:	4294      	cmp	r4, r2
     bdc:	d04f      	beq.n	c7e <twim_set_callback+0xda>
 */
void twim_set_callback(Twim *twim, uint32_t interrupt_source,
	twim_callback_t callback, uint8_t irq_level)
{
	uint32_t twim_ch = find_twim_channel_num(twim);
	uint32_t irq_line = 0;
     bde:	f04f 0500 	mov.w	r5, #0
     be2:	e001      	b.n	be8 <twim_set_callback+0x44>

#if defined(ID_TWIM3)
	if (twim == TWIM3) {
		irq_line = TWIM3_IRQn;
     be4:	f04f 054e 	mov.w	r5, #78	; 0x4e
	if (twim == TWIM1) {
		irq_line = TWIM1_IRQn;
	}
#endif
#if defined(ID_TWIM0)
	if (twim == TWIM0) {
     be8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     bec:	f2c4 0101 	movt	r1, #16385	; 0x4001
     bf0:	428c      	cmp	r4, r1
     bf2:	d102      	bne.n	bfa <twim_set_callback+0x56>
     bf4:	e030      	b.n	c58 <twim_set_callback+0xb4>
		irq_line = TWIM3_IRQn;
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
		irq_line = TWIM2_IRQn;
     bf6:	f04f 054d 	mov.w	r5, #77	; 0x4d
#if defined(ID_TWIM0)
	if (twim == TWIM0) {
		irq_line = TWIM0_IRQn;
	}
#endif
	twim_callback_pointer[twim_ch] = callback;
     bfa:	f640 231c 	movw	r3, #2588	; 0xa1c
     bfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
     c02:	f843 8020 	str.w	r8, [r3, r0, lsl #2]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     c06:	462a      	mov	r2, r5
     c08:	ea4f 1055 	mov.w	r0, r5, lsr #5
     c0c:	f005 051f 	and.w	r5, r5, #31
     c10:	f04f 0101 	mov.w	r1, #1
     c14:	fa01 f505 	lsl.w	r5, r1, r5
     c18:	f44f 4361 	mov.w	r3, #57600	; 0xe100
     c1c:	f2ce 0300 	movt	r3, #57344	; 0xe000
     c20:	f100 0160 	add.w	r1, r0, #96	; 0x60
     c24:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
     c28:	ea4f 1707 	mov.w	r7, r7, lsl #4
     c2c:	b2ff      	uxtb	r7, r7
     c2e:	f102 4360 	add.w	r3, r2, #3758096384	; 0xe0000000
     c32:	f503 4161 	add.w	r1, r3, #57600	; 0xe100
     c36:	f881 7300 	strb.w	r7, [r1, #768]	; 0x300
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
     c3a:	f44f 4261 	mov.w	r2, #57600	; 0xe100
     c3e:	f2ce 0200 	movt	r2, #57344	; 0xe000
     c42:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
	NVIC_ClearPendingIRQ((IRQn_Type)irq_line);
	NVIC_SetPriority((IRQn_Type)irq_line, irq_level);
	NVIC_EnableIRQ((IRQn_Type)irq_line);
	twim_enable_interrupt(twim, interrupt_source);
     c46:	4620      	mov	r0, r4
     c48:	4631      	mov	r1, r6
     c4a:	f640 134d 	movw	r3, #2381	; 0x94d
     c4e:	f2c0 0300 	movt	r3, #0
     c52:	4798      	blx	r3
     c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#if defined(ID_TWIM0)
	if (twim == TWIM0) {
		irq_line = TWIM0_IRQn;
	}
#endif
	twim_callback_pointer[twim_ch] = callback;
     c58:	f640 221c 	movw	r2, #2588	; 0xa1c
     c5c:	f2c2 0200 	movt	r2, #8192	; 0x2000
     c60:	f842 8020 	str.w	r8, [r2, r0, lsl #2]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     c64:	f44f 4061 	mov.w	r0, #57600	; 0xe100
     c68:	f2ce 0000 	movt	r0, #57344	; 0xe000
     c6c:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
     c70:	f8c0 5184 	str.w	r5, [r0, #388]	; 0x184
     c74:	f04f 0001 	mov.w	r0, #1
     c78:	f04f 023d 	mov.w	r2, #61	; 0x3d
     c7c:	e7d4      	b.n	c28 <twim_set_callback+0x84>
     c7e:	f640 231c 	movw	r3, #2588	; 0xa1c
     c82:	f2c2 0300 	movt	r3, #8192	; 0x2000
     c86:	f843 8020 	str.w	r8, [r3, r0, lsl #2]
     c8a:	f44f 4061 	mov.w	r0, #57600	; 0xe100
     c8e:	f2ce 0000 	movt	r0, #57344	; 0xe000
     c92:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
     c96:	f8c0 5184 	str.w	r5, [r0, #388]	; 0x184
     c9a:	f04f 0001 	mov.w	r0, #1
     c9e:	f04f 023f 	mov.w	r2, #63	; 0x3f
     ca2:	e7c1      	b.n	c28 <twim_set_callback+0x84>

00000ca4 <TWIM0_Handler>:
	twim_enable_interrupt(twim, interrupt_source);
}

#if defined(ID_TWIM0)
void TWIM0_Handler(void)
{
     ca4:	b508      	push	{r3, lr}
	twim_callback_pointer[0](TWIM0);
     ca6:	f640 231c 	movw	r3, #2588	; 0xa1c
     caa:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cae:	6819      	ldr	r1, [r3, #0]
     cb0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     cb4:	f2c4 0001 	movt	r0, #16385	; 0x4001
     cb8:	4788      	blx	r1
     cba:	bd08      	pop	{r3, pc}

00000cbc <TWIM1_Handler>:
}
#endif

#if defined(ID_TWIM1)
void TWIM1_Handler(void)
{
     cbc:	b508      	push	{r3, lr}
	twim_callback_pointer[1](TWIM1);
     cbe:	f640 231c 	movw	r3, #2588	; 0xa1c
     cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cc6:	6859      	ldr	r1, [r3, #4]
     cc8:	f44f 4040 	mov.w	r0, #49152	; 0xc000
     ccc:	f2c4 0001 	movt	r0, #16385	; 0x4001
     cd0:	4788      	blx	r1
     cd2:	bd08      	pop	{r3, pc}

00000cd4 <TWIM2_Handler>:
}
#endif

#if defined(ID_TWIM2)
void TWIM2_Handler(void)
{
     cd4:	b508      	push	{r3, lr}
	twim_callback_pointer[2](TWIM2);
     cd6:	f640 231c 	movw	r3, #2588	; 0xa1c
     cda:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cde:	6899      	ldr	r1, [r3, #8]
     ce0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     ce4:	f2c4 0007 	movt	r0, #16391	; 0x4007
     ce8:	4788      	blx	r1
     cea:	bd08      	pop	{r3, pc}

00000cec <TWIM3_Handler>:
}
#endif

#if defined(ID_TWIM3)
void TWIM3_Handler(void)
{
     cec:	b508      	push	{r3, lr}
	twim_callback_pointer[3](TWIM3);
     cee:	f640 231c 	movw	r3, #2588	; 0xa1c
     cf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cf6:	68d9      	ldr	r1, [r3, #12]
     cf8:	f44f 4040 	mov.w	r0, #49152	; 0xc000
     cfc:	f2c4 0007 	movt	r0, #16391	; 0x4007
     d00:	4788      	blx	r1
     d02:	bd08      	pop	{r3, pc}

00000d04 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
     d04:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
     d06:	ea4f 1301 	mov.w	r3, r1, lsl #4
     d0a:	4293      	cmp	r3, r2
     d0c:	d910      	bls.n	d30 <usart_set_async_baudrate+0x2c>
     d0e:	e020      	b.n	d52 <usart_set_async_baudrate+0x4e>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
     d10:	6841      	ldr	r1, [r0, #4]
     d12:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
     d16:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
     d18:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
     d1c:	6202      	str	r2, [r0, #32]

	return 0;
     d1e:	f04f 0000 	mov.w	r0, #0
     d22:	e029      	b.n	d78 <usart_set_async_baudrate+0x74>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
     d24:	f04f 0001 	mov.w	r0, #1
     d28:	e026      	b.n	d78 <usart_set_async_baudrate+0x74>
     d2a:	f04f 0001 	mov.w	r0, #1
     d2e:	e023      	b.n	d78 <usart_set_async_baudrate+0x74>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
     d30:	ea4f 04c2 	mov.w	r4, r2, lsl #3
     d34:	eb04 0253 	add.w	r2, r4, r3, lsr #1
     d38:	fbb2 f3f3 	udiv	r3, r2, r3
	cd = cd_fp >> 3;
     d3c:	ea4f 02d3 	mov.w	r2, r3, lsr #3
	fp = cd_fp & 0x07;
     d40:	f003 0307 	and.w	r3, r3, #7
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
     d44:	f102 34ff 	add.w	r4, r2, #4294967295
     d48:	f64f 71fe 	movw	r1, #65534	; 0xfffe
     d4c:	428c      	cmp	r4, r1
     d4e:	d9e3      	bls.n	d18 <usart_set_async_baudrate+0x14>
     d50:	e7e8      	b.n	d24 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
     d52:	ea4f 01c1 	mov.w	r1, r1, lsl #3
     d56:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     d5a:	eb02 0451 	add.w	r4, r2, r1, lsr #1
     d5e:	fbb4 f3f1 	udiv	r3, r4, r1
	cd = cd_fp >> 3;
     d62:	ea4f 02d3 	mov.w	r2, r3, lsr #3
	fp = cd_fp & 0x07;
     d66:	f003 0307 	and.w	r3, r3, #7
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
     d6a:	f102 34ff 	add.w	r4, r2, #4294967295
     d6e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
     d72:	428c      	cmp	r4, r1
     d74:	d9cc      	bls.n	d10 <usart_set_async_baudrate+0xc>
     d76:	e7d8      	b.n	d2a <usart_set_async_baudrate+0x26>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
     d78:	bc10      	pop	{r4}
     d7a:	4770      	bx	lr

00000d7c <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
     d7c:	f04f 0340 	mov.w	r3, #64	; 0x40
     d80:	6003      	str	r3, [r0, #0]
     d82:	4770      	bx	lr

00000d84 <usart_reset_tx>:
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
     d84:	f04f 0388 	mov.w	r3, #136	; 0x88
     d88:	6003      	str	r3, [r0, #0]
     d8a:	4770      	bx	lr

00000d8c <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
     d8c:	f04f 0310 	mov.w	r3, #16
     d90:	6003      	str	r3, [r0, #0]
     d92:	4770      	bx	lr

00000d94 <usart_reset_rx>:
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
     d94:	f04f 0324 	mov.w	r3, #36	; 0x24
     d98:	6003      	str	r3, [r0, #0]
     d9a:	4770      	bx	lr

00000d9c <usart_reset_status>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
     d9c:	f44f 7380 	mov.w	r3, #256	; 0x100
     da0:	6003      	str	r3, [r0, #0]
     da2:	4770      	bx	lr

00000da4 <usart_drive_DTR_pin_high>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_DTRDIS;
     da4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
     da8:	6003      	str	r3, [r0, #0]
     daa:	4770      	bx	lr

00000dac <usart_drive_RTS_pin_high>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
     dac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
     db0:	6003      	str	r3, [r0, #0]
     db2:	4770      	bx	lr

00000db4 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
     db4:	6943      	ldr	r3, [r0, #20]
     db6:	f013 0f02 	tst.w	r3, #2
     dba:	d007      	beq.n	dcc <usart_write+0x18>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
     dbc:	ea4f 51c1 	mov.w	r1, r1, lsl #23
     dc0:	ea4f 52d1 	mov.w	r2, r1, lsr #23
     dc4:	61c2      	str	r2, [r0, #28]
	return 0;
     dc6:	f04f 0000 	mov.w	r0, #0
     dca:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
     dcc:	f04f 0001 	mov.w	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
     dd0:	4770      	bx	lr
     dd2:	bf00      	nop

00000dd4 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
     dd4:	6943      	ldr	r3, [r0, #20]
     dd6:	f013 0f01 	tst.w	r3, #1
     dda:	d008      	beq.n	dee <usart_read+0x1a>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
     ddc:	6980      	ldr	r0, [r0, #24]
     dde:	ea4f 52c0 	mov.w	r2, r0, lsl #23
     de2:	ea4f 53d2 	mov.w	r3, r2, lsr #23
     de6:	600b      	str	r3, [r1, #0]

	return 0;
     de8:	f04f 0000 	mov.w	r0, #0
     dec:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
     dee:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
     df2:	4770      	bx	lr

00000df4 <usart_disable_writeprotect>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
     df4:	f44f 4382 	mov.w	r3, #16640	; 0x4100
     df8:	f2c5 5353 	movt	r3, #21843	; 0x5553
     dfc:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
     e00:	4770      	bx	lr
     e02:	bf00      	nop

00000e04 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
     e04:	b510      	push	{r4, lr}
     e06:	4604      	mov	r4, r0
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
     e08:	f640 53f5 	movw	r3, #3573	; 0xdf5
     e0c:	f2c0 0300 	movt	r3, #0
     e10:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
     e12:	f04f 0000 	mov.w	r0, #0
     e16:	6060      	str	r0, [r4, #4]
	p_usart->US_RTOR = 0;
     e18:	6260      	str	r0, [r4, #36]	; 0x24
	p_usart->US_TTGR = 0;
     e1a:	62a0      	str	r0, [r4, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
     e1c:	4620      	mov	r0, r4
     e1e:	f640 5185 	movw	r1, #3461	; 0xd85
     e22:	f2c0 0100 	movt	r1, #0
     e26:	4788      	blx	r1
	usart_reset_rx(p_usart);
     e28:	4620      	mov	r0, r4
     e2a:	f640 5295 	movw	r2, #3477	; 0xd95
     e2e:	f2c0 0200 	movt	r2, #0
     e32:	4790      	blx	r2
	/* Reset status bits. */
	usart_reset_status(p_usart);
     e34:	4620      	mov	r0, r4
     e36:	f640 539d 	movw	r3, #3485	; 0xd9d
     e3a:	f2c0 0300 	movt	r3, #0
     e3e:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
     e40:	4620      	mov	r0, r4
     e42:	f640 51ad 	movw	r1, #3501	; 0xdad
     e46:	f2c0 0100 	movt	r1, #0
     e4a:	4788      	blx	r1
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
     e4c:	4620      	mov	r0, r4
     e4e:	f640 52a5 	movw	r2, #3493	; 0xda5
     e52:	f2c0 0200 	movt	r2, #0
     e56:	4790      	blx	r2
     e58:	bd10      	pop	{r4, pc}
     e5a:	bf00      	nop

00000e5c <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
     e5c:	b570      	push	{r4, r5, r6, lr}
     e5e:	4605      	mov	r5, r0
     e60:	460c      	mov	r4, r1
     e62:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
     e64:	f640 6305 	movw	r3, #3589	; 0xe05
     e68:	f2c0 0300 	movt	r3, #0
     e6c:	4798      	blx	r3

	ul_reg_val = 0;
     e6e:	f640 1084 	movw	r0, #2436	; 0x984
     e72:	f2c2 0000 	movt	r0, #8192	; 0x2000
     e76:	f04f 0100 	mov.w	r1, #0
     e7a:	6001      	str	r1, [r0, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
     e7c:	b1cc      	cbz	r4, eb2 <usart_init_rs232+0x56>
     e7e:	4628      	mov	r0, r5
     e80:	6821      	ldr	r1, [r4, #0]
     e82:	4632      	mov	r2, r6
     e84:	f640 5305 	movw	r3, #3333	; 0xd05
     e88:	f2c0 0300 	movt	r3, #0
     e8c:	4798      	blx	r3
     e8e:	b998      	cbnz	r0, eb8 <usart_init_rs232+0x5c>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
     e90:	68a2      	ldr	r2, [r4, #8]
     e92:	6861      	ldr	r1, [r4, #4]
     e94:	ea42 0301 	orr.w	r3, r2, r1
     e98:	6922      	ldr	r2, [r4, #16]
     e9a:	4313      	orrs	r3, r2
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
     e9c:	68e1      	ldr	r1, [r4, #12]
     e9e:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
     ea0:	f640 1284 	movw	r2, #2436	; 0x984
     ea4:	f2c2 0200 	movt	r2, #8192	; 0x2000
     ea8:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
     eaa:	6869      	ldr	r1, [r5, #4]
     eac:	430b      	orrs	r3, r1
     eae:	606b      	str	r3, [r5, #4]

	return 0;
     eb0:	bd70      	pop	{r4, r5, r6, pc}

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
     eb2:	f04f 0001 	mov.w	r0, #1
     eb6:	bd70      	pop	{r4, r5, r6, pc}
     eb8:	f04f 0001 	mov.w	r0, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
     ebc:	bd70      	pop	{r4, r5, r6, pc}
     ebe:	bf00      	nop

00000ec0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
     ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ec2:	b083      	sub	sp, #12
     ec4:	4604      	mov	r4, r0
     ec6:	460d      	mov	r5, r1
	uint32_t val = 0;
     ec8:	f04f 0300 	mov.w	r3, #0
     ecc:	9301      	str	r3, [sp, #4]
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
     ece:	f44f 4080 	mov.w	r0, #16384	; 0x4000
     ed2:	f2c4 0002 	movt	r0, #16386	; 0x4002
     ed6:	4284      	cmp	r4, r0
     ed8:	d10f      	bne.n	efa <usart_serial_getchar+0x3a>
		while (usart_read(p_usart, &val));
     eda:	f44f 4680 	mov.w	r6, #16384	; 0x4000
     ede:	f2c4 0602 	movt	r6, #16386	; 0x4002
     ee2:	f640 57d5 	movw	r7, #3541	; 0xdd5
     ee6:	f2c0 0700 	movt	r7, #0
     eea:	4630      	mov	r0, r6
     eec:	a901      	add	r1, sp, #4
     eee:	47b8      	blx	r7
     ef0:	2800      	cmp	r0, #0
     ef2:	d1fa      	bne.n	eea <usart_serial_getchar+0x2a>
		*data = (uint8_t)(val & 0xFF);
     ef4:	9901      	ldr	r1, [sp, #4]
     ef6:	7029      	strb	r1, [r5, #0]
     ef8:	e02b      	b.n	f52 <usart_serial_getchar+0x92>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
     efa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     efe:	f2c4 0102 	movt	r1, #16386	; 0x4002
     f02:	428c      	cmp	r4, r1
     f04:	d10f      	bne.n	f26 <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
     f06:	f44f 4400 	mov.w	r4, #32768	; 0x8000
     f0a:	f2c4 0402 	movt	r4, #16386	; 0x4002
     f0e:	f640 56d5 	movw	r6, #3541	; 0xdd5
     f12:	f2c0 0600 	movt	r6, #0
     f16:	4620      	mov	r0, r4
     f18:	a901      	add	r1, sp, #4
     f1a:	47b0      	blx	r6
     f1c:	2800      	cmp	r0, #0
     f1e:	d1fa      	bne.n	f16 <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
     f20:	9801      	ldr	r0, [sp, #4]
     f22:	7028      	strb	r0, [r5, #0]
     f24:	e02a      	b.n	f7c <usart_serial_getchar+0xbc>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
     f26:	f44f 4240 	mov.w	r2, #49152	; 0xc000
     f2a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     f2e:	4294      	cmp	r4, r2
     f30:	d10f      	bne.n	f52 <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
     f32:	f44f 4440 	mov.w	r4, #49152	; 0xc000
     f36:	f2c4 0402 	movt	r4, #16386	; 0x4002
     f3a:	f640 56d5 	movw	r6, #3541	; 0xdd5
     f3e:	f2c0 0600 	movt	r6, #0
     f42:	4620      	mov	r0, r4
     f44:	a901      	add	r1, sp, #4
     f46:	47b0      	blx	r6
     f48:	2800      	cmp	r0, #0
     f4a:	d1fa      	bne.n	f42 <usart_serial_getchar+0x82>
		*data = (uint8_t)(val & 0xFF);
     f4c:	9b01      	ldr	r3, [sp, #4]
     f4e:	702b      	strb	r3, [r5, #0]
     f50:	e014      	b.n	f7c <usart_serial_getchar+0xbc>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
     f52:	f04f 0200 	mov.w	r2, #0
     f56:	f2c4 0203 	movt	r2, #16387	; 0x4003
     f5a:	4294      	cmp	r4, r2
     f5c:	d10e      	bne.n	f7c <usart_serial_getchar+0xbc>
		while (usart_read(p_usart, &val));
     f5e:	f04f 0400 	mov.w	r4, #0
     f62:	f2c4 0403 	movt	r4, #16387	; 0x4003
     f66:	f640 56d5 	movw	r6, #3541	; 0xdd5
     f6a:	f2c0 0600 	movt	r6, #0
     f6e:	4620      	mov	r0, r4
     f70:	a901      	add	r1, sp, #4
     f72:	47b0      	blx	r6
     f74:	2800      	cmp	r0, #0
     f76:	d1fa      	bne.n	f6e <usart_serial_getchar+0xae>
		*data = (uint8_t)(val & 0xFF);
     f78:	9b01      	ldr	r3, [sp, #4]
     f7a:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
     f7c:	b003      	add	sp, #12
     f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000f80 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
     f80:	b570      	push	{r4, r5, r6, lr}
     f82:	460c      	mov	r4, r1
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
     f84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	4298      	cmp	r0, r3
     f8e:	d10f      	bne.n	fb0 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
     f90:	f44f 4580 	mov.w	r5, #16384	; 0x4000
     f94:	f2c4 0502 	movt	r5, #16386	; 0x4002
     f98:	f640 56b5 	movw	r6, #3509	; 0xdb5
     f9c:	f2c0 0600 	movt	r6, #0
     fa0:	4628      	mov	r0, r5
     fa2:	4621      	mov	r1, r4
     fa4:	47b0      	blx	r6
     fa6:	2800      	cmp	r0, #0
     fa8:	d1fa      	bne.n	fa0 <usart_serial_putchar+0x20>
		return 1;
     faa:	f04f 0001 	mov.w	r0, #1
     fae:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
     fb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     fb4:	f2c4 0102 	movt	r1, #16386	; 0x4002
     fb8:	4288      	cmp	r0, r1
     fba:	d10f      	bne.n	fdc <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
     fbc:	f44f 4500 	mov.w	r5, #32768	; 0x8000
     fc0:	f2c4 0502 	movt	r5, #16386	; 0x4002
     fc4:	f640 56b5 	movw	r6, #3509	; 0xdb5
     fc8:	f2c0 0600 	movt	r6, #0
     fcc:	4628      	mov	r0, r5
     fce:	4621      	mov	r1, r4
     fd0:	47b0      	blx	r6
     fd2:	2800      	cmp	r0, #0
     fd4:	d1fa      	bne.n	fcc <usart_serial_putchar+0x4c>
		return 1;
     fd6:	f04f 0001 	mov.w	r0, #1
     fda:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
     fdc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
     fe0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     fe4:	4290      	cmp	r0, r2
     fe6:	d10f      	bne.n	1008 <__stack_size__+0x8>
		while (usart_write(p_usart, c)!=0);
     fe8:	f44f 4540 	mov.w	r5, #49152	; 0xc000
     fec:	f2c4 0502 	movt	r5, #16386	; 0x4002
     ff0:	f640 56b5 	movw	r6, #3509	; 0xdb5
     ff4:	f2c0 0600 	movt	r6, #0
     ff8:	4628      	mov	r0, r5
     ffa:	4621      	mov	r1, r4
     ffc:	47b0      	blx	r6
     ffe:	2800      	cmp	r0, #0
    1000:	d1fa      	bne.n	ff8 <usart_serial_putchar+0x78>
		return 1;
    1002:	f04f 0001 	mov.w	r0, #1
    1006:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
    1008:	f04f 0300 	mov.w	r3, #0
    100c:	f2c4 0303 	movt	r3, #16387	; 0x4003
    1010:	4298      	cmp	r0, r3
    1012:	d10f      	bne.n	1034 <__stack_size__+0x34>
		while (usart_write(p_usart, c)!=0);
    1014:	f04f 0500 	mov.w	r5, #0
    1018:	f2c4 0503 	movt	r5, #16387	; 0x4003
    101c:	f640 56b5 	movw	r6, #3509	; 0xdb5
    1020:	f2c0 0600 	movt	r6, #0
    1024:	4628      	mov	r0, r5
    1026:	4621      	mov	r1, r4
    1028:	47b0      	blx	r6
    102a:	2800      	cmp	r0, #0
    102c:	d1fa      	bne.n	1024 <__stack_size__+0x24>
		return 1;
    102e:	f04f 0001 	mov.w	r0, #1
    1032:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
    1034:	f04f 0000 	mov.w	r0, #0
}
    1038:	bd70      	pop	{r4, r5, r6, pc}
    103a:	bf00      	nop

0000103c <main>:
 * \brief Application entry point for usart_serial example.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
    103c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1040:	b086      	sub	sp, #24
	status_code_t status;
	/* Initialize the SAM system. */
	sysclk_init();
    1042:	f242 73f5 	movw	r3, #10229	; 0x27f5
    1046:	f2c0 0300 	movt	r3, #0
    104a:	4798      	blx	r3
	board_init();
    104c:	f642 00b1 	movw	r0, #10417	; 0x28b1
    1050:	f2c0 0000 	movt	r0, #0
    1054:	4780      	blx	r0
uint32_t cpu_speed = 0;

static status_code_t init_twi(void)
{
	/* Set TWIM options */
	cpu_speed = sysclk_get_peripheral_bus_hz(EXAMPLE_TWIM);
    1056:	f44f 4640 	mov.w	r6, #49152	; 0xc000
    105a:	f2c4 0607 	movt	r6, #16391	; 0x4007
    105e:	4630      	mov	r0, r6
    1060:	f241 7781 	movw	r7, #6017	; 0x1781
    1064:	f2c0 0700 	movt	r7, #0
    1068:	47b8      	blx	r7
    106a:	f640 1188 	movw	r1, #2440	; 0x988
    106e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1072:	6008      	str	r0, [r1, #0]
	struct twim_config opts = {
    1074:	9000      	str	r0, [sp, #0]
    1076:	f248 62a0 	movw	r2, #34464	; 0x86a0
    107a:	f2c0 0201 	movt	r2, #1
    107e:	9201      	str	r2, [sp, #4]
    1080:	f04f 0400 	mov.w	r4, #0
    1084:	9402      	str	r4, [sp, #8]
    1086:	f88d 400c 	strb.w	r4, [sp, #12]
    108a:	f88d 400d 	strb.w	r4, [sp, #13]
    108e:	f88d 400e 	strb.w	r4, [sp, #14]
    1092:	f88d 400f 	strb.w	r4, [sp, #15]
    1096:	f88d 4010 	strb.w	r4, [sp, #16]
    109a:	f88d 4011 	strb.w	r4, [sp, #17]
    109e:	f88d 4012 	strb.w	r4, [sp, #18]
    10a2:	f88d 4013 	strb.w	r4, [sp, #19]
    10a6:	f88d 4014 	strb.w	r4, [sp, #20]
    10aa:	f88d 4015 	strb.w	r4, [sp, #21]
    10ae:	f88d 4016 	strb.w	r4, [sp, #22]
    10b2:	f88d 4017 	strb.w	r4, [sp, #23]
		.hs_clock_drive_strength_low = 0,
		.hs_data_slew_limit = 0,
		.hs_data_drive_strength_low = 0,
	};
	/* Initialize the TWIM Module */
	twim_set_callback(EXAMPLE_TWIM, 0, twim_default_callback, 1);
    10b6:	4630      	mov	r0, r6
    10b8:	4621      	mov	r1, r4
    10ba:	f240 5249 	movw	r2, #1353	; 0x549
    10be:	f2c0 0200 	movt	r2, #0
    10c2:	f04f 0301 	mov.w	r3, #1
    10c6:	f640 35a5 	movw	r5, #2981	; 0xba5
    10ca:	f2c0 0500 	movt	r5, #0
    10ce:	47a8      	blx	r5

	return twim_set_config(EXAMPLE_TWIM, &opts);
    10d0:	4630      	mov	r0, r6
    10d2:	4669      	mov	r1, sp
    10d4:	f640 0339 	movw	r3, #2105	; 0x839
    10d8:	f2c0 0300 	movt	r3, #0
    10dc:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    10de:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    10e2:	f2c4 0502 	movt	r5, #16386	; 0x4002
    10e6:	f640 10d8 	movw	r0, #2520	; 0x9d8
    10ea:	f2c2 0000 	movt	r0, #8192	; 0x2000
    10ee:	6005      	str	r5, [r0, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    10f0:	f640 11d4 	movw	r1, #2516	; 0x9d4
    10f4:	f2c2 0100 	movt	r1, #8192	; 0x2000
    10f8:	f640 7281 	movw	r2, #3969	; 0xf81
    10fc:	f2c0 0200 	movt	r2, #0
    1100:	600a      	str	r2, [r1, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1102:	f640 13d0 	movw	r3, #2512	; 0x9d0
    1106:	f2c2 0300 	movt	r3, #8192	; 0x2000
    110a:	f640 60c1 	movw	r0, #3777	; 0xec1
    110e:	f2c0 0000 	movt	r0, #0
    1112:	6018      	str	r0, [r3, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
    1114:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    1118:	9100      	str	r1, [sp, #0]
	usart_settings.char_length = opt->charlength;
    111a:	f04f 02c0 	mov.w	r2, #192	; 0xc0
    111e:	9201      	str	r2, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
    1120:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1124:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
    1126:	9403      	str	r4, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
    1128:	9404      	str	r4, [sp, #16]
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_hz());
#endif
#if (SAM4L)
		sysclk_enable_peripheral_clock(p_usart);
    112a:	4628      	mov	r0, r5
    112c:	f641 2179 	movw	r1, #6777	; 0x1a79
    1130:	f2c0 0100 	movt	r1, #0
    1134:	4788      	blx	r1
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
    1136:	4628      	mov	r0, r5
    1138:	47b8      	blx	r7
    113a:	4602      	mov	r2, r0
    113c:	4628      	mov	r0, r5
    113e:	4669      	mov	r1, sp
    1140:	f640 675d 	movw	r7, #3677	; 0xe5d
    1144:	f2c0 0700 	movt	r7, #0
    1148:	47b8      	blx	r7
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
    114a:	4628      	mov	r0, r5
    114c:	f640 527d 	movw	r2, #3453	; 0xd7d
    1150:	f2c0 0200 	movt	r2, #0
    1154:	4790      	blx	r2
		usart_enable_rx(p_usart);
    1156:	4628      	mov	r0, r5
    1158:	f640 558d 	movw	r5, #3469	; 0xd8d
    115c:	f2c0 0500 	movt	r5, #0
    1160:	47a8      	blx	r5
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    1162:	f240 0740 	movw	r7, #64	; 0x40
    1166:	f2c2 0700 	movt	r7, #8192	; 0x2000
    116a:	6838      	ldr	r0, [r7, #0]
    116c:	6880      	ldr	r0, [r0, #8]
    116e:	4621      	mov	r1, r4
    1170:	f243 1551 	movw	r5, #12625	; 0x3151
    1174:	f2c0 0500 	movt	r5, #0
    1178:	47a8      	blx	r5
	setbuf(stdin, NULL);
    117a:	683b      	ldr	r3, [r7, #0]
    117c:	6858      	ldr	r0, [r3, #4]
    117e:	4621      	mov	r1, r4
    1180:	47a8      	blx	r5
	init_twi();
	/* Configure UART for debug message output. */
	configure_console();

	/* Output example information. */
	puts("Camera App\n\r");
    1182:	f245 7090 	movw	r0, #22416	; 0x5790
    1186:	f2c0 0000 	movt	r0, #0
    118a:	f243 1741 	movw	r7, #12609	; 0x3141
    118e:	f2c0 0700 	movt	r7, #0
    1192:	47b8      	blx	r7

	puts("Start Scan...");
    1194:	f245 70a0 	movw	r0, #22432	; 0x57a0
    1198:	f2c0 0000 	movt	r0, #0
    119c:	47b8      	blx	r7
 * \return STATUS_OK   if all bytes were written, error code otherwise.
 */
static status_code_t write_test(void)
{
	/* TWI chip address to communicate with */
	packet_tx.chip = TARGET_ADDRESS;
    119e:	f640 255c 	movw	r5, #2652	; 0xa5c
    11a2:	f2c2 0500 	movt	r5, #8192	; 0x2000
    11a6:	f04f 0150 	mov.w	r1, #80	; 0x50
    11aa:	6029      	str	r1, [r5, #0]
	/* TWI address/commands to issue to the other chip (node) */
	packet_tx.addr[0] = (VIRTUALMEM_ADDR >> 16) & 0xFF;
    11ac:	712c      	strb	r4, [r5, #4]
	packet_tx.addr[1] = (VIRTUALMEM_ADDR >> 8) & 0xFF;
    11ae:	716c      	strb	r4, [r5, #5]
	/* Length of the TWI data address segment (1-3 bytes) */
	packet_tx.addr_length = TARGET_ADDR_LGT;
    11b0:	f04f 0402 	mov.w	r4, #2
    11b4:	71ec      	strb	r4, [r5, #7]
	/* Where to find the data to be written */
	packet_tx.buffer = (void *) write_data;
    11b6:	f245 7274 	movw	r2, #22388	; 0x5774
    11ba:	f2c0 0200 	movt	r2, #0
    11be:	60aa      	str	r2, [r5, #8]
	/* How many bytes do we want to write */
	packet_tx.length = PATTERN_TEST_LENGTH;
    11c0:	f04f 0019 	mov.w	r0, #25
    11c4:	60e8      	str	r0, [r5, #12]
	printf("Writing data to TARGET\r\n");
    11c6:	f245 70b0 	movw	r0, #22448	; 0x57b0
    11ca:	f2c0 0000 	movt	r0, #0
    11ce:	f243 038d 	movw	r3, #12429	; 0x308d
    11d2:	f2c0 0300 	movt	r3, #0
    11d6:	4798      	blx	r3
	/* Write data to TARGET */
	return twi_master_write(EXAMPLE_TWIM, &packet_tx);
    11d8:	4630      	mov	r0, r6
    11da:	4629      	mov	r1, r5
    11dc:	f640 1655 	movw	r6, #2389	; 0x955
    11e0:	f2c0 0600 	movt	r6, #0
    11e4:	47b0      	blx	r6
	puts("Start Scan...");

	/* Perform Write Test */
	status = write_test();
	/* Check status of transfer */
	if (status == STATUS_OK) {
    11e6:	b948      	cbnz	r0, 11fc <main+0x1c0>
		printf("WRITE TEST:\tPASS\r\n");
    11e8:	f245 70cc 	movw	r0, #22476	; 0x57cc
    11ec:	f2c0 0000 	movt	r0, #0
    11f0:	f243 038d 	movw	r3, #12429	; 0x308d
    11f4:	f2c0 0300 	movt	r3, #0
    11f8:	4798      	blx	r3
    11fa:	e039      	b.n	1270 <main+0x234>
		} else {
		printf("WRITE TEST:\tFAILED\r\n");
    11fc:	f245 70e0 	movw	r0, #22496	; 0x57e0
    1200:	f2c0 0000 	movt	r0, #0
    1204:	f243 078d 	movw	r7, #12429	; 0x308d
    1208:	f2c0 0700 	movt	r7, #0
    120c:	47b8      	blx	r7
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    120e:	f240 0438 	movw	r4, #56	; 0x38
    1212:	f2c2 0400 	movt	r4, #8192	; 0x2000
    1216:	f04f 0600 	mov.w	r6, #0
    121a:	4637      	mov	r7, r6

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    121c:	f640 15c8 	movw	r5, #2504	; 0x9c8
    1220:	f2c2 0500 	movt	r5, #8192	; 0x2000
    1224:	46b1      	mov	r9, r6
    1226:	f2c4 090f 	movt	r9, #16399	; 0x400f
    122a:	f642 2a19 	movw	sl, #10777	; 0x2a19
    122e:	f2c0 0a00 	movt	sl, #0

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
		cpu_irq_enable();
    1232:	f04f 0801 	mov.w	r8, #1
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1236:	b672      	cpsid	i
    1238:	f3bf 8f5f 	dmb	sy
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    123c:	7027      	strb	r7, [r4, #0]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    123e:	7829      	ldrb	r1, [r5, #0]
    1240:	b949      	cbnz	r1, 1256 <main+0x21a>
    1242:	4628      	mov	r0, r5
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
    1244:	4631      	mov	r1, r6
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    1246:	f101 0101 	add.w	r1, r1, #1
    124a:	b2c9      	uxtb	r1, r1

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    124c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
    1250:	2a00      	cmp	r2, #0
    1252:	d0f8      	beq.n	1246 <main+0x20a>
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    1254:	b929      	cbnz	r1, 1262 <main+0x226>
		cpu_irq_enable();
    1256:	f884 8000 	strb.w	r8, [r4]
    125a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    125e:	b662      	cpsie	i
    1260:	e7e9      	b.n	1236 <main+0x1fa>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1262:	b672      	cpsid	i
    1264:	f3bf 8f5f 	dmb	sy

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
    1268:	7026      	strb	r6, [r4, #0]

	/* Enter the sleep mode. */
	bpm_sleep(BPM, sleep_mode);
    126a:	4648      	mov	r0, r9
    126c:	47d0      	blx	sl
    126e:	e7e2      	b.n	1236 <main+0x1fa>
    1270:	e7fe      	b.n	1270 <main+0x234>
    1272:	bf00      	nop

00001274 <dfll_enable_closed_loop>:
	/* Finally, stop the reference clock */
	genclk_disable(0);
}

void dfll_enable_closed_loop(const struct dfll_config *cfg, uint32_t dfll_id)
{
    1274:	b410      	push	{r4}
}

static inline void genclk_enable(const struct genclk_config *cfg,
		uint32_t id)
{
	 SCIF->SCIF_GCCTRL[id].SCIF_GCCTRL = cfg->ctrl | SCIF_GCCTRL_CEN;
    1276:	6803      	ldr	r3, [r0, #0]
    1278:	f043 0201 	orr.w	r2, r3, #1
    127c:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1280:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1284:	675a      	str	r2, [r3, #116]	; 0x74
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1286:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    128a:	b672      	cpsid	i
    128c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1290:	f240 0238 	movw	r2, #56	; 0x38
    1294:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1298:	f04f 0400 	mov.w	r4, #0
    129c:	7014      	strb	r4, [r2, #0]
	 * Enable the DFLL first, but don't wait for the DFLL0RDY bit
	 * because if the DFLL has been disabled before, the DFLL0RDY
	 * bit stays cleared until it is re-enabled.
	 */
	flags = cpu_irq_save();
	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAUL)
    129e:	f04f 0228 	mov.w	r2, #40	; 0x28
    12a2:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    12a6:	619a      	str	r2, [r3, #24]
		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_DFLL0CONF - (uint32_t)SCIF);
	SCIF->SCIF_DFLL0CONF = SCIF_DFLL0CONF_EN;
    12a8:	f04f 0201 	mov.w	r2, #1
    12ac:	629a      	str	r2, [r3, #40]	; 0x28
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    12ae:	b939      	cbnz	r1, 12c0 <dfll_enable_closed_loop+0x4c>
		cpu_irq_enable();
    12b0:	f240 0338 	movw	r3, #56	; 0x38
    12b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    12b8:	701a      	strb	r2, [r3, #0]
    12ba:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    12be:	b662      	cpsie	i

	/*
	 * Then, configure the DFLL, taking care to wait for the
	 * DFLL0RDY bit before every step.
	 */
	dfll_write_reg(DFLL0STEP, cfg->step);
    12c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    12c4:	f2c4 010e 	movt	r1, #16398	; 0x400e
    12c8:	694a      	ldr	r2, [r1, #20]
    12ca:	f012 0f08 	tst.w	r2, #8
    12ce:	d0fb      	beq.n	12c8 <dfll_enable_closed_loop+0x54>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    12d0:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    12d4:	b672      	cpsid	i
    12d6:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    12da:	f240 0338 	movw	r3, #56	; 0x38
    12de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    12e2:	f04f 0200 	mov.w	r2, #0
    12e6:	701a      	strb	r2, [r3, #0]
    12e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
    12ec:	f2c4 030e 	movt	r3, #16398	; 0x400e
    12f0:	f04f 0234 	mov.w	r2, #52	; 0x34
    12f4:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    12f8:	619a      	str	r2, [r3, #24]
    12fa:	68c2      	ldr	r2, [r0, #12]
    12fc:	635a      	str	r2, [r3, #52]	; 0x34
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    12fe:	b949      	cbnz	r1, 1314 <dfll_enable_closed_loop+0xa0>
		cpu_irq_enable();
    1300:	f240 0138 	movw	r1, #56	; 0x38
    1304:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1308:	f04f 0301 	mov.w	r3, #1
    130c:	700b      	strb	r3, [r1, #0]
    130e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1312:	b662      	cpsie	i
	dfll_write_reg(DFLL0MUL, cfg->mul);
    1314:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1318:	f2c4 020e 	movt	r2, #16398	; 0x400e
    131c:	6951      	ldr	r1, [r2, #20]
    131e:	f011 0f08 	tst.w	r1, #8
    1322:	d0fb      	beq.n	131c <dfll_enable_closed_loop+0xa8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1324:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1328:	b672      	cpsid	i
    132a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    132e:	f240 0338 	movw	r3, #56	; 0x38
    1332:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1336:	f04f 0200 	mov.w	r2, #0
    133a:	701a      	strb	r2, [r3, #0]
    133c:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1340:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1344:	f04f 0230 	mov.w	r2, #48	; 0x30
    1348:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    134c:	619a      	str	r2, [r3, #24]
    134e:	6882      	ldr	r2, [r0, #8]
    1350:	631a      	str	r2, [r3, #48]	; 0x30
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1352:	b949      	cbnz	r1, 1368 <dfll_enable_closed_loop+0xf4>
		cpu_irq_enable();
    1354:	f240 0138 	movw	r1, #56	; 0x38
    1358:	f2c2 0100 	movt	r1, #8192	; 0x2000
    135c:	f04f 0301 	mov.w	r3, #1
    1360:	700b      	strb	r3, [r1, #0]
    1362:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1366:	b662      	cpsie	i
	dfll_write_reg(DFLL0SSG, cfg->ssg);
    1368:	f44f 6200 	mov.w	r2, #2048	; 0x800
    136c:	f2c4 020e 	movt	r2, #16398	; 0x400e
    1370:	6951      	ldr	r1, [r2, #20]
    1372:	f011 0f08 	tst.w	r1, #8
    1376:	d0fb      	beq.n	1370 <dfll_enable_closed_loop+0xfc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1378:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    137c:	b672      	cpsid	i
    137e:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1382:	f240 0338 	movw	r3, #56	; 0x38
    1386:	f2c2 0300 	movt	r3, #8192	; 0x2000
    138a:	f04f 0200 	mov.w	r2, #0
    138e:	701a      	strb	r2, [r3, #0]
    1390:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1394:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1398:	f04f 0238 	mov.w	r2, #56	; 0x38
    139c:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    13a0:	619a      	str	r2, [r3, #24]
    13a2:	6902      	ldr	r2, [r0, #16]
    13a4:	639a      	str	r2, [r3, #56]	; 0x38
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    13a6:	b949      	cbnz	r1, 13bc <dfll_enable_closed_loop+0x148>
		cpu_irq_enable();
    13a8:	f240 0138 	movw	r1, #56	; 0x38
    13ac:	f2c2 0100 	movt	r1, #8192	; 0x2000
    13b0:	f04f 0301 	mov.w	r3, #1
    13b4:	700b      	strb	r3, [r1, #0]
    13b6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    13ba:	b662      	cpsie	i
	dfll_write_reg(DFLL0CONF, cfg->conf | SCIF_DFLL0CONF_EN);
    13bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
    13c0:	f2c4 020e 	movt	r2, #16398	; 0x400e
    13c4:	6951      	ldr	r1, [r2, #20]
    13c6:	f011 0f08 	tst.w	r1, #8
    13ca:	d0fb      	beq.n	13c4 <dfll_enable_closed_loop+0x150>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    13cc:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    13d0:	b672      	cpsid	i
    13d2:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    13d6:	f240 0338 	movw	r3, #56	; 0x38
    13da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    13de:	f04f 0200 	mov.w	r2, #0
    13e2:	701a      	strb	r2, [r3, #0]
    13e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
    13e8:	f2c4 030e 	movt	r3, #16398	; 0x400e
    13ec:	f04f 0228 	mov.w	r2, #40	; 0x28
    13f0:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    13f4:	619a      	str	r2, [r3, #24]
    13f6:	6840      	ldr	r0, [r0, #4]
    13f8:	f040 0201 	orr.w	r2, r0, #1
    13fc:	629a      	str	r2, [r3, #40]	; 0x28
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    13fe:	b949      	cbnz	r1, 1414 <dfll_enable_closed_loop+0x1a0>
		cpu_irq_enable();
    1400:	f240 0138 	movw	r1, #56	; 0x38
    1404:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1408:	f04f 0301 	mov.w	r3, #1
    140c:	700b      	strb	r3, [r1, #0]
    140e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1412:	b662      	cpsie	i
}
    1414:	bc10      	pop	{r4}
    1416:	4770      	bx	lr

00001418 <dfll_enable_config_defaults>:
	/* Finally, stop the reference clock */
	genclk_disable(0);
}

void dfll_enable_config_defaults(uint32_t dfll_id)
{
    1418:	b500      	push	{lr}
    141a:	b089      	sub	sp, #36	; 0x24
#ifdef CONFIG_DFLL0_SOURCE
	struct dfll_config dfllcfg;
#endif
	static bool open_loop_done = false;

	if(SCIF->SCIF_DFLL0CONF & SCIF_DFLL0CONF_MODE) {
    141c:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1420:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1424:	6a99      	ldr	r1, [r3, #40]	; 0x28
    1426:	f011 0f02 	tst.w	r1, #2
    142a:	d007      	beq.n	143c <dfll_enable_config_defaults+0x24>
}

static inline bool dfll_is_fine_locked(uint32_t dfll_id)
{
	UNUSED(dfll_id);
	return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_DFLL0LOCKF);
    142c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1430:	f2c4 020e 	movt	r2, #16398	; 0x400e
    1434:	6953      	ldr	r3, [r2, #20]
		// Closed-loop mode
		if (dfll_is_fine_locked(dfll_id)) {
    1436:	f013 0f04 	tst.w	r3, #4
    143a:	d14e      	bne.n	14da <dfll_enable_config_defaults+0xc2>
	}
	if (open_loop_done == true) {
		return;
	}

	switch (dfll_id) {
    143c:	2800      	cmp	r0, #0
    143e:	d14c      	bne.n	14da <dfll_enable_config_defaults+0xc2>
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_OSC32RDY);
    1440:	f44f 6080 	mov.w	r0, #1024	; 0x400
    1444:	f2c4 000f 	movt	r0, #16399	; 0x400f
    1448:	6941      	ldr	r1, [r0, #20]
		/* Nothing to do */
		break;

#ifdef BOARD_OSC32_HZ
	case GENCLK_SRC_OSC32K:
		if (!osc_is_ready(OSC_ID_OSC32)) {
    144a:	f011 0f01 	tst.w	r1, #1
    144e:	d10c      	bne.n	146a <dfll_enable_config_defaults+0x52>
		break;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		osc_priv_enable_osc32();
    1450:	f241 42e1 	movw	r2, #5345	; 0x14e1
    1454:	f2c0 0200 	movt	r2, #0
    1458:	4790      	blx	r2
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_OSC32RDY);
    145a:	f44f 6080 	mov.w	r0, #1024	; 0x400
    145e:	f2c4 000f 	movt	r0, #16399	; 0x400f
    1462:	6943      	ldr	r3, [r0, #20]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1464:	f013 0f01 	tst.w	r3, #1
    1468:	d0fb      	beq.n	1462 <dfll_enable_config_defaults+0x4a>
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
	cfg->ctrl = (cfg->ctrl & ~SCIF_GCCTRL_OSCSEL_Msk)
    146a:	f44f 7180 	mov.w	r1, #256	; 0x100
    146e:	9101      	str	r1, [sp, #4]
	genclk_config_defaults(&cfg->ref_cfg, 0);
	genclk_config_set_source(&cfg->ref_cfg, refclk);
	genclk_config_set_divider(&cfg->ref_cfg, divide);

	// Do a sync before reading a dfll conf register
	SCIF->SCIF_DFLL0SYNC = SCIF_DFLL0SYNC_SYNC;
    1470:	f44f 6000 	mov.w	r0, #2048	; 0x800
    1474:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1478:	f04f 0201 	mov.w	r2, #1
    147c:	6402      	str	r2, [r0, #64]	; 0x40
	while (!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_DFLL0RDY));
    147e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    1482:	f2c4 010e 	movt	r1, #16398	; 0x400e
    1486:	694b      	ldr	r3, [r1, #20]
    1488:	f013 0f08 	tst.w	r3, #8
    148c:	d0fb      	beq.n	1486 <dfll_enable_config_defaults+0x6e>
	cfg->conf = SCIF->SCIF_DFLL0CONF;
    148e:	f44f 6000 	mov.w	r0, #2048	; 0x800
    1492:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1496:	6a81      	ldr	r1, [r0, #40]	; 0x28
{
	if (freq < DFLL_MAX_RANGE3){
		cfg->freq_range = DFLL_RANGE3;
	}
	else if (freq < DFLL_MAX_RANGE2){
		cfg->freq_range = DFLL_RANGE2;
    1498:	f04f 0202 	mov.w	r2, #2
    149c:	f88d 201c 	strb.w	r2, [sp, #28]
		cfg->freq_range = DFLL_RANGE1;
	}
	else {
		cfg->freq_range = DFLL_RANGE0;
	}
	cfg->conf &= ~SCIF_DFLL0CONF_RANGE_Msk;
    14a0:	f421 3340 	bic.w	r3, r1, #196608	; 0x30000
	cfg->conf |=SCIF_DFLL0CONF_RANGE(cfg->freq_range);
    14a4:	f043 1002 	orr.w	r0, r3, #131074	; 0x20002
    14a8:	9002      	str	r0, [sp, #8]
	// Select Closed Loop Mode
	cfg->conf |= SCIF_DFLL0CONF_MODE;
	// Write DFLL Frequency Range
	dfll_priv_set_frequency_range(cfg, CONFIG_DFLL0_FREQ);

	cfg->mul = mul;
    14aa:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
    14ae:	9103      	str	r1, [sp, #12]
	cfg->val = 0;
    14b0:	f04f 0100 	mov.w	r1, #0
    14b4:	9106      	str	r1, [sp, #24]
};

static inline void dfll_config_set_max_step(struct dfll_config *cfg,
		uint16_t coarse, uint16_t fine)
{
	cfg->step = (SCIF_DFLL0STEP_CSTEP(coarse)
    14b6:	f04f 1204 	mov.w	r2, #262148	; 0x40004
    14ba:	9204      	str	r2, [sp, #16]
	/*
	 * Initial step length of 4. If this is set too high, the DFLL
	 * may fail to lock.
	 */
	dfll_config_set_max_step(cfg, 4, 4);
	cfg->ssg = 0;
    14bc:	9105      	str	r1, [sp, #20]
		dfll_config_init_closed_loop_mode(&dfllcfg,
			CONFIG_DFLL0_SOURCE,
			CONFIG_DFLL0_DIV,
			CONFIG_DFLL0_MUL);

		dfll_enable_closed_loop(&dfllcfg, dfll_id);
    14be:	a801      	add	r0, sp, #4
    14c0:	f241 2375 	movw	r3, #4725	; 0x1275
    14c4:	f2c0 0300 	movt	r3, #0
    14c8:	4798      	blx	r3
}

static inline bool dfll_is_fine_locked(uint32_t dfll_id)
{
	UNUSED(dfll_id);
	return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_DFLL0LOCKF);
    14ca:	f44f 6000 	mov.w	r0, #2048	; 0x800
    14ce:	f2c4 000e 	movt	r0, #16398	; 0x400e
    14d2:	6941      	ldr	r1, [r0, #20]
		while (!dfll_is_fine_locked(dfll_id));
    14d4:	f011 0f04 	tst.w	r1, #4
    14d8:	d0fb      	beq.n	14d2 <dfll_enable_config_defaults+0xba>

	default:
		Assert(false);
		break;
	}
}
    14da:	b009      	add	sp, #36	; 0x24
    14dc:	bd00      	pop	{pc}
    14de:	bf00      	nop

000014e0 <osc_priv_enable_osc32>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    14e0:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    14e4:	b672      	cpsid	i
    14e6:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    14ea:	f240 0338 	movw	r3, #56	; 0x38
    14ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    14f2:	f04f 0200 	mov.w	r2, #0
    14f6:	701a      	strb	r2, [r3, #0]
void osc_priv_enable_osc32(void)
{
	irqflags_t flags;

	flags = cpu_irq_save();
	BSCIF->BSCIF_UNLOCK = BSCIF_UNLOCK_KEY(0xAAu)
    14f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
    14fc:	f2c4 000f 	movt	r0, #16399	; 0x400f
    1500:	f04f 0320 	mov.w	r3, #32
    1504:	f6ca 2300 	movt	r3, #43520	; 0xaa00
    1508:	6183      	str	r3, [r0, #24]
		| BSCIF_UNLOCK_ADDR((uint32_t)&BSCIF->BSCIF_OSCCTRL32 - (uint32_t)BSCIF);
	BSCIF->BSCIF_OSCCTRL32 =
    150a:	f24a 120d 	movw	r2, #41229	; 0xa10d
    150e:	f2c0 0205 	movt	r2, #5
    1512:	6202      	str	r2, [r0, #32]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1514:	b949      	cbnz	r1, 152a <osc_priv_enable_osc32+0x4a>
		cpu_irq_enable();
    1516:	f240 0138 	movw	r1, #56	; 0x38
    151a:	f2c2 0100 	movt	r1, #8192	; 0x2000
    151e:	f04f 0001 	mov.w	r0, #1
    1522:	7008      	strb	r0, [r1, #0]
    1524:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1528:	b662      	cpsie	i
    152a:	4770      	bx	lr

0000152c <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(uint32_t bus_id, uint32_t module_index)
{
    152c:	b430      	push	{r4, r5}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    152e:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1532:	b672      	cpsid	i
    1534:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1538:	f240 0338 	movw	r3, #56	; 0x38
    153c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1540:	f04f 0200 	mov.w	r2, #0
    1544:	701a      	strb	r2, [r3, #0]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
    1546:	f04f 0320 	mov.w	r3, #32
    154a:	f2c4 030e 	movt	r3, #16398	; 0x400e
    154e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
	mask |= 1U << module_index;
    1552:	f04f 0501 	mov.w	r5, #1
    1556:	fa05 f101 	lsl.w	r1, r5, r1
    155a:	4311      	orrs	r1, r2
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
    155c:	f100 0208 	add.w	r2, r0, #8
    1560:	ea4f 6502 	mov.w	r5, r2, lsl #24
    1564:	ea4f 5295 	mov.w	r2, r5, lsr #22
	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
	mask |= 1U << module_index;
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    1568:	f042 452a 	orr.w	r5, r2, #2852126720	; 0xaa000000
    156c:	f04f 0200 	mov.w	r2, #0
    1570:	f2c4 020e 	movt	r2, #16398	; 0x400e
    1574:	6595      	str	r5, [r2, #88]	; 0x58
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
	*(&PM->PM_CPUMASK + bus_id) = mask;
    1576:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    157a:	b94c      	cbnz	r4, 1590 <sysclk_priv_enable_module+0x64>
		cpu_irq_enable();
    157c:	f240 0038 	movw	r0, #56	; 0x38
    1580:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1584:	f04f 0301 	mov.w	r3, #1
    1588:	7003      	strb	r3, [r0, #0]
    158a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    158e:	b662      	cpsie	i

	cpu_irq_restore(flags);
}
    1590:	bc30      	pop	{r4, r5}
    1592:	4770      	bx	lr

00001594 <sysclk_priv_disable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be disabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_disable_module(uint32_t bus_id, uint32_t module_index)
{
    1594:	b430      	push	{r4, r5}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1596:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    159a:	b672      	cpsid	i
    159c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    15a0:	f240 0338 	movw	r3, #56	; 0x38
    15a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    15a8:	f04f 0200 	mov.w	r2, #0
    15ac:	701a      	strb	r2, [r3, #0]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Disable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
    15ae:	f04f 0320 	mov.w	r3, #32
    15b2:	f2c4 030e 	movt	r3, #16398	; 0x400e
    15b6:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
	mask &= ~(1U << module_index);
    15ba:	f04f 0501 	mov.w	r5, #1
    15be:	fa05 f101 	lsl.w	r1, r5, r1
    15c2:	ea22 0101 	bic.w	r1, r2, r1
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
    15c6:	f100 0208 	add.w	r2, r0, #8
    15ca:	ea4f 6502 	mov.w	r5, r2, lsl #24
    15ce:	ea4f 5295 	mov.w	r2, r5, lsr #22
	flags = cpu_irq_save();

	/* Disable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
	mask &= ~(1U << module_index);
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    15d2:	f042 452a 	orr.w	r5, r2, #2852126720	; 0xaa000000
    15d6:	f04f 0200 	mov.w	r2, #0
    15da:	f2c4 020e 	movt	r2, #16398	; 0x400e
    15de:	6595      	str	r5, [r2, #88]	; 0x58
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
	*(&PM->PM_CPUMASK + bus_id) = mask;
    15e0:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    15e4:	b94c      	cbnz	r4, 15fa <sysclk_priv_disable_module+0x66>
		cpu_irq_enable();
    15e6:	f240 0038 	movw	r0, #56	; 0x38
    15ea:	f2c2 0000 	movt	r0, #8192	; 0x2000
    15ee:	f04f 0301 	mov.w	r3, #1
    15f2:	7003      	strb	r3, [r0, #0]
    15f4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    15f8:	b662      	cpsie	i

	cpu_irq_restore(flags);
}
    15fa:	bc30      	pop	{r4, r5}
    15fc:	4770      	bx	lr
    15fe:	bf00      	nop

00001600 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_enable_pba_module(uint32_t module_index)
{
    1600:	b538      	push	{r3, r4, r5, lr}
    1602:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1604:	f3ef 8510 	mrs	r5, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1608:	b672      	cpsid	i
    160a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    160e:	f240 0338 	movw	r3, #56	; 0x38
    1612:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1616:	f04f 0200 	mov.w	r2, #0
    161a:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (PM->PM_PBAMASK == 0) {
    161c:	4610      	mov	r0, r2
    161e:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1622:	6a81      	ldr	r1, [r0, #40]	; 0x28
    1624:	b941      	cbnz	r1, 1638 <sysclk_enable_pba_module+0x38>
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    1626:	f04f 0001 	mov.w	r0, #1
    162a:	f04f 0105 	mov.w	r1, #5
    162e:	f241 532d 	movw	r3, #5421	; 0x152d
    1632:	f2c0 0300 	movt	r3, #0
    1636:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1638:	b94d      	cbnz	r5, 164e <sysclk_enable_pba_module+0x4e>
		cpu_irq_enable();
    163a:	f240 0038 	movw	r0, #56	; 0x38
    163e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1642:	f04f 0201 	mov.w	r2, #1
    1646:	7002      	strb	r2, [r0, #0]
    1648:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    164c:	b662      	cpsie	i
	}

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBA, module_index);
    164e:	f04f 0002 	mov.w	r0, #2
    1652:	4621      	mov	r1, r4
    1654:	f241 532d 	movw	r3, #5421	; 0x152d
    1658:	f2c0 0300 	movt	r3, #0
    165c:	4798      	blx	r3
    165e:	bd38      	pop	{r3, r4, r5, pc}

00001660 <sysclk_disable_pba_module>:
/**
 * \brief Disable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_disable_pba_module(uint32_t module_index)
{
    1660:	b510      	push	{r4, lr}
    1662:	4601      	mov	r1, r0
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBA, module_index);
    1664:	f04f 0002 	mov.w	r0, #2
    1668:	f241 5395 	movw	r3, #5525	; 0x1595
    166c:	f2c0 0300 	movt	r3, #0
    1670:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1672:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1676:	b672      	cpsid	i
    1678:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    167c:	f240 0038 	movw	r0, #56	; 0x38
    1680:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1684:	f04f 0200 	mov.w	r2, #0
    1688:	7002      	strb	r2, [r0, #0]

	/* Disable the bridge if possible */
	flags = cpu_irq_save();

	if (PM->PM_PBAMASK == 0) {
    168a:	4611      	mov	r1, r2
    168c:	f2c4 010e 	movt	r1, #16398	; 0x400e
    1690:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    1692:	b943      	cbnz	r3, 16a6 <sysclk_disable_pba_module+0x46>
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
    1694:	f04f 0001 	mov.w	r0, #1
    1698:	f04f 0105 	mov.w	r1, #5
    169c:	f241 5295 	movw	r2, #5525	; 0x1595
    16a0:	f2c0 0200 	movt	r2, #0
    16a4:	4790      	blx	r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    16a6:	b94c      	cbnz	r4, 16bc <sysclk_disable_pba_module+0x5c>
		cpu_irq_enable();
    16a8:	f240 0038 	movw	r0, #56	; 0x38
    16ac:	f2c2 0000 	movt	r0, #8192	; 0x2000
    16b0:	f04f 0101 	mov.w	r1, #1
    16b4:	7001      	strb	r1, [r0, #0]
    16b6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    16ba:	b662      	cpsie	i
    16bc:	bd10      	pop	{r4, pc}
    16be:	bf00      	nop

000016c0 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(uint32_t module_index)
{
    16c0:	b538      	push	{r3, r4, r5, lr}
    16c2:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    16c4:	f3ef 8510 	mrs	r5, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    16c8:	b672      	cpsid	i
    16ca:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    16ce:	f240 0338 	movw	r3, #56	; 0x38
    16d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    16d6:	f04f 0200 	mov.w	r2, #0
    16da:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (PM->PM_PBBMASK == 0) {
    16dc:	4610      	mov	r0, r2
    16de:	f2c4 000e 	movt	r0, #16398	; 0x400e
    16e2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    16e4:	b941      	cbnz	r1, 16f8 <sysclk_enable_pbb_module+0x38>
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    16e6:	f04f 0001 	mov.w	r0, #1
    16ea:	f04f 0106 	mov.w	r1, #6
    16ee:	f241 532d 	movw	r3, #5421	; 0x152d
    16f2:	f2c0 0300 	movt	r3, #0
    16f6:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    16f8:	b94d      	cbnz	r5, 170e <sysclk_enable_pbb_module+0x4e>
		cpu_irq_enable();
    16fa:	f240 0038 	movw	r0, #56	; 0x38
    16fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1702:	f04f 0201 	mov.w	r2, #1
    1706:	7002      	strb	r2, [r0, #0]
    1708:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    170c:	b662      	cpsie	i
	}

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBB, module_index);
    170e:	f04f 0003 	mov.w	r0, #3
    1712:	4621      	mov	r1, r4
    1714:	f241 532d 	movw	r3, #5421	; 0x152d
    1718:	f2c0 0300 	movt	r3, #0
    171c:	4798      	blx	r3
    171e:	bd38      	pop	{r3, r4, r5, pc}

00001720 <sysclk_disable_pbb_module>:
/**
 * \brief Disable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_disable_pbb_module(uint32_t module_index)
{
    1720:	b510      	push	{r4, lr}
    1722:	4601      	mov	r1, r0
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBB, module_index);
    1724:	f04f 0003 	mov.w	r0, #3
    1728:	f241 5395 	movw	r3, #5525	; 0x1595
    172c:	f2c0 0300 	movt	r3, #0
    1730:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1732:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1736:	b672      	cpsid	i
    1738:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    173c:	f240 0038 	movw	r0, #56	; 0x38
    1740:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1744:	f04f 0200 	mov.w	r2, #0
    1748:	7002      	strb	r2, [r0, #0]

	/* Disable the bridge if possible */
	flags = cpu_irq_save();

	if (PM->PM_PBBMASK == 0) {
    174a:	4611      	mov	r1, r2
    174c:	f2c4 010e 	movt	r1, #16398	; 0x400e
    1750:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    1752:	b943      	cbnz	r3, 1766 <sysclk_disable_pbb_module+0x46>
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
    1754:	f04f 0001 	mov.w	r0, #1
    1758:	f04f 0106 	mov.w	r1, #6
    175c:	f241 5295 	movw	r2, #5525	; 0x1595
    1760:	f2c0 0200 	movt	r2, #0
    1764:	4790      	blx	r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1766:	b94c      	cbnz	r4, 177c <sysclk_disable_pbb_module+0x5c>
		cpu_irq_enable();
    1768:	f240 0038 	movw	r0, #56	; 0x38
    176c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1770:	f04f 0101 	mov.w	r1, #1
    1774:	7001      	strb	r1, [r0, #0]
    1776:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    177a:	b662      	cpsie	i
    177c:	bd10      	pop	{r4, pc}
    177e:	bf00      	nop

00001780 <sysclk_get_peripheral_bus_hz>:
 * \return Frequency of the bus attached to the specified peripheral, in Hz.
 */
uint32_t sysclk_get_peripheral_bus_hz(const volatile void *module)
{
	/* Fallthroughs intended for modules sharing the same peripheral bus. */
	switch ((uintptr_t)module) {
    1780:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1784:	f2c4 0307 	movt	r3, #16391	; 0x4007
    1788:	4298      	cmp	r0, r3
    178a:	f000 816f 	beq.w	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    178e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1792:	f2c4 0107 	movt	r1, #16391	; 0x4007
    1796:	4288      	cmp	r0, r1
    1798:	f200 80bb 	bhi.w	1912 <sysclk_get_peripheral_bus_hz+0x192>
    179c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    17a0:	f2c4 0202 	movt	r2, #16386	; 0x4002
    17a4:	4290      	cmp	r0, r2
    17a6:	f000 8161 	beq.w	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    17aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    17ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
    17b2:	4298      	cmp	r0, r3
    17b4:	d851      	bhi.n	185a <sysclk_get_peripheral_bus_hz+0xda>
    17b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    17ba:	f2c4 0101 	movt	r1, #16385	; 0x4001
    17be:	4288      	cmp	r0, r1
    17c0:	f000 8154 	beq.w	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    17c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    17c8:	f2c4 0201 	movt	r2, #16385	; 0x4001
    17cc:	4290      	cmp	r0, r2
    17ce:	d820      	bhi.n	1812 <sysclk_get_peripheral_bus_hz+0x92>
    17d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    17d4:	f2c4 0300 	movt	r3, #16384	; 0x4000
    17d8:	4298      	cmp	r0, r3
    17da:	f000 8147 	beq.w	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    17de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    17e2:	f2c4 0100 	movt	r1, #16384	; 0x4000
    17e6:	4288      	cmp	r0, r1
    17e8:	d804      	bhi.n	17f4 <sysclk_get_peripheral_bus_hz+0x74>
    17ea:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    17ee:	f040 8140 	bne.w	1a72 <sysclk_get_peripheral_bus_hz+0x2f2>
    17f2:	e13b      	b.n	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    17f4:	f04f 0200 	mov.w	r2, #0
    17f8:	f2c4 0201 	movt	r2, #16385	; 0x4001
    17fc:	4290      	cmp	r0, r2
    17fe:	f000 8135 	beq.w	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    1802:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    1806:	f2c4 0301 	movt	r3, #16385	; 0x4001
    180a:	4298      	cmp	r0, r3
    180c:	f040 8131 	bne.w	1a72 <sysclk_get_peripheral_bus_hz+0x2f2>
    1810:	e12c      	b.n	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    1812:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    1816:	f2c4 0101 	movt	r1, #16385	; 0x4001
    181a:	4288      	cmp	r0, r1
    181c:	f000 8126 	beq.w	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    1820:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    1824:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1828:	4290      	cmp	r0, r2
    182a:	d807      	bhi.n	183c <sysclk_get_peripheral_bus_hz+0xbc>
    182c:	f44f 4304 	mov.w	r3, #33792	; 0x8400
    1830:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1834:	4298      	cmp	r0, r3
    1836:	f040 811c 	bne.w	1a72 <sysclk_get_peripheral_bus_hz+0x2f2>
    183a:	e117      	b.n	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    183c:	f44f 4144 	mov.w	r1, #50176	; 0xc400
    1840:	f2c4 0101 	movt	r1, #16385	; 0x4001
    1844:	4288      	cmp	r0, r1
    1846:	f000 8111 	beq.w	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    184a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    184e:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1852:	4290      	cmp	r0, r2
    1854:	f040 810d 	bne.w	1a72 <sysclk_get_peripheral_bus_hz+0x2f2>
    1858:	e108      	b.n	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    185a:	f04f 0300 	mov.w	r3, #0
    185e:	f2c4 0304 	movt	r3, #16388	; 0x4004
    1862:	4298      	cmp	r0, r3
    1864:	f000 8102 	beq.w	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    1868:	f04f 0100 	mov.w	r1, #0
    186c:	f2c4 0104 	movt	r1, #16388	; 0x4004
    1870:	4288      	cmp	r0, r1
    1872:	d823      	bhi.n	18bc <sysclk_get_peripheral_bus_hz+0x13c>
    1874:	f04f 0200 	mov.w	r2, #0
    1878:	f2c4 0203 	movt	r2, #16387	; 0x4003
    187c:	4290      	cmp	r0, r2
    187e:	f000 80f5 	beq.w	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    1882:	f04f 0300 	mov.w	r3, #0
    1886:	f2c4 0303 	movt	r3, #16387	; 0x4003
    188a:	4298      	cmp	r0, r3
    188c:	d807      	bhi.n	189e <sysclk_get_peripheral_bus_hz+0x11e>
    188e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    1892:	f2c4 0102 	movt	r1, #16386	; 0x4002
    1896:	4288      	cmp	r0, r1
    1898:	f040 80eb 	bne.w	1a72 <sysclk_get_peripheral_bus_hz+0x2f2>
    189c:	e0e6      	b.n	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    189e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    18a2:	f2c4 0203 	movt	r2, #16387	; 0x4003
    18a6:	4290      	cmp	r0, r2
    18a8:	f000 80e0 	beq.w	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    18ac:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    18b0:	f2c4 0303 	movt	r3, #16387	; 0x4003
    18b4:	4298      	cmp	r0, r3
    18b6:	f040 80dc 	bne.w	1a72 <sysclk_get_peripheral_bus_hz+0x2f2>
    18ba:	e0d7      	b.n	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    18bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    18c0:	f2c4 0106 	movt	r1, #16390	; 0x4006
    18c4:	4288      	cmp	r0, r1
    18c6:	f000 80d1 	beq.w	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    18ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    18ce:	f2c4 0206 	movt	r2, #16390	; 0x4006
    18d2:	4290      	cmp	r0, r2
    18d4:	d80e      	bhi.n	18f4 <sysclk_get_peripheral_bus_hz+0x174>
    18d6:	f04f 0300 	mov.w	r3, #0
    18da:	f2c4 0306 	movt	r3, #16390	; 0x4006
    18de:	4298      	cmp	r0, r3
    18e0:	f000 80c4 	beq.w	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    18e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    18e8:	f2c4 0106 	movt	r1, #16390	; 0x4006
    18ec:	4288      	cmp	r0, r1
    18ee:	f040 80c0 	bne.w	1a72 <sysclk_get_peripheral_bus_hz+0x2f2>
    18f2:	e0bb      	b.n	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    18f4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    18f8:	f2c4 0206 	movt	r2, #16390	; 0x4006
    18fc:	4290      	cmp	r0, r2
    18fe:	f000 80b5 	beq.w	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    1902:	f04f 0300 	mov.w	r3, #0
    1906:	f2c4 0307 	movt	r3, #16391	; 0x4007
    190a:	4298      	cmp	r0, r3
    190c:	f040 80b1 	bne.w	1a72 <sysclk_get_peripheral_bus_hz+0x2f2>
    1910:	e0ac      	b.n	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    1912:	f04f 0100 	mov.w	r1, #0
    1916:	f2c4 010e 	movt	r1, #16398	; 0x400e
    191a:	4288      	cmp	r0, r1
    191c:	f000 80a6 	beq.w	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    1920:	f04f 0200 	mov.w	r2, #0
    1924:	f2c4 020e 	movt	r2, #16398	; 0x400e
    1928:	4290      	cmp	r0, r2
    192a:	d84e      	bhi.n	19ca <sysclk_get_peripheral_bus_hz+0x24a>
    192c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1930:	f2c4 030a 	movt	r3, #16394	; 0x400a
    1934:	4298      	cmp	r0, r3
    1936:	f000 8099 	beq.w	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    193a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    193e:	f2c4 010a 	movt	r1, #16394	; 0x400a
    1942:	4288      	cmp	r0, r1
    1944:	d821      	bhi.n	198a <sysclk_get_peripheral_bus_hz+0x20a>
    1946:	f04f 0200 	mov.w	r2, #0
    194a:	f2c4 0208 	movt	r2, #16392	; 0x4008
    194e:	4290      	cmp	r0, r2
    1950:	f000 808c 	beq.w	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    1954:	f04f 0300 	mov.w	r3, #0
    1958:	f2c4 0308 	movt	r3, #16392	; 0x4008
    195c:	4298      	cmp	r0, r3
    195e:	d807      	bhi.n	1970 <sysclk_get_peripheral_bus_hz+0x1f0>
    1960:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    1964:	f2c4 0107 	movt	r1, #16391	; 0x4007
    1968:	4288      	cmp	r0, r1
    196a:	f040 8082 	bne.w	1a72 <sysclk_get_peripheral_bus_hz+0x2f2>
    196e:	e07d      	b.n	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    1970:	f04f 0200 	mov.w	r2, #0
    1974:	f2c4 020a 	movt	r2, #16394	; 0x400a
    1978:	4290      	cmp	r0, r2
    197a:	d077      	beq.n	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    197c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1980:	f2c4 030a 	movt	r3, #16394	; 0x400a
    1984:	4298      	cmp	r0, r3
    1986:	d174      	bne.n	1a72 <sysclk_get_peripheral_bus_hz+0x2f2>
    1988:	e070      	b.n	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    198a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    198e:	f2c4 010a 	movt	r1, #16394	; 0x400a
    1992:	4288      	cmp	r0, r1
    1994:	d06a      	beq.n	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    1996:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    199a:	f2c4 020a 	movt	r2, #16394	; 0x400a
    199e:	4290      	cmp	r0, r2
    19a0:	d806      	bhi.n	19b0 <sysclk_get_peripheral_bus_hz+0x230>
    19a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    19a6:	f2c4 030a 	movt	r3, #16394	; 0x400a
    19aa:	4298      	cmp	r0, r3
    19ac:	d161      	bne.n	1a72 <sysclk_get_peripheral_bus_hz+0x2f2>
    19ae:	e05d      	b.n	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    19b0:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    19b4:	f2c4 010a 	movt	r1, #16394	; 0x400a
    19b8:	4288      	cmp	r0, r1
    19ba:	d057      	beq.n	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    19bc:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
    19c0:	f2c4 020a 	movt	r2, #16394	; 0x400a
    19c4:	4290      	cmp	r0, r2
    19c6:	d154      	bne.n	1a72 <sysclk_get_peripheral_bus_hz+0x2f2>
    19c8:	e050      	b.n	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    19ca:	f04f 0300 	mov.w	r3, #0
    19ce:	f2c4 030f 	movt	r3, #16399	; 0x400f
    19d2:	4298      	cmp	r0, r3
    19d4:	d04a      	beq.n	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    19d6:	f04f 0100 	mov.w	r1, #0
    19da:	f2c4 010f 	movt	r1, #16399	; 0x400f
    19de:	4288      	cmp	r0, r1
    19e0:	d81f      	bhi.n	1a22 <sysclk_get_peripheral_bus_hz+0x2a2>
    19e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    19e6:	f2c4 020e 	movt	r2, #16398	; 0x400e
    19ea:	4290      	cmp	r0, r2
    19ec:	d03e      	beq.n	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    19ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
    19f2:	f2c4 030e 	movt	r3, #16398	; 0x400e
    19f6:	4298      	cmp	r0, r3
    19f8:	d806      	bhi.n	1a08 <sysclk_get_peripheral_bus_hz+0x288>
    19fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
    19fe:	f2c4 010e 	movt	r1, #16398	; 0x400e
    1a02:	4288      	cmp	r0, r1
    1a04:	d135      	bne.n	1a72 <sysclk_get_peripheral_bus_hz+0x2f2>
    1a06:	e031      	b.n	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    1a08:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    1a0c:	f2c4 020e 	movt	r2, #16398	; 0x400e
    1a10:	4290      	cmp	r0, r2
    1a12:	d02b      	beq.n	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    1a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1a18:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1a1c:	4298      	cmp	r0, r3
    1a1e:	d128      	bne.n	1a72 <sysclk_get_peripheral_bus_hz+0x2f2>
    1a20:	e024      	b.n	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    1a22:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    1a26:	f2c4 010f 	movt	r1, #16399	; 0x400f
    1a2a:	4288      	cmp	r0, r1
    1a2c:	d01e      	beq.n	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    1a2e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    1a32:	f2c4 020f 	movt	r2, #16399	; 0x400f
    1a36:	4290      	cmp	r0, r2
    1a38:	d80c      	bhi.n	1a54 <sysclk_get_peripheral_bus_hz+0x2d4>
    1a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1a3e:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1a42:	4298      	cmp	r0, r3
    1a44:	d012      	beq.n	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    1a46:	f44f 6100 	mov.w	r1, #2048	; 0x800
    1a4a:	f2c4 010f 	movt	r1, #16399	; 0x400f
    1a4e:	4288      	cmp	r0, r1
    1a50:	d10f      	bne.n	1a72 <sysclk_get_peripheral_bus_hz+0x2f2>
    1a52:	e00b      	b.n	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    1a54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1a58:	f2c4 020f 	movt	r2, #16399	; 0x400f
    1a5c:	4290      	cmp	r0, r2
    1a5e:	d005      	beq.n	1a6c <sysclk_get_peripheral_bus_hz+0x2ec>
    1a60:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    1a64:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1a68:	4298      	cmp	r0, r3
    1a6a:	d102      	bne.n	1a72 <sysclk_get_peripheral_bus_hz+0x2f2>
	case PARC_ADDR:
	case CATB_ADDR:
	case TWIM2_ADDR:
	case TWIM3_ADDR:
	case LCDCA_ADDR:
		return sysclk_get_pba_hz();
    1a6c:	f04f 7037 	mov.w	r0, #47972352	; 0x2dc0000
    1a70:	4770      	bx	lr
	case PICOUART_ADDR:
		return sysclk_get_pbd_hz();

	default:
		Assert(false);
		return 0;
    1a72:	f04f 0000 	mov.w	r0, #0
	}
}
    1a76:	4770      	bx	lr

00001a78 <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
    1a78:	b508      	push	{r3, lr}
	switch ((uintptr_t)module) {
    1a7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1a7e:	f2c4 0307 	movt	r3, #16391	; 0x4007
    1a82:	4298      	cmp	r0, r3
    1a84:	f000 827f 	beq.w	1f86 <sysclk_enable_peripheral_clock+0x50e>
    1a88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1a8c:	f2c4 0107 	movt	r1, #16391	; 0x4007
    1a90:	4288      	cmp	r0, r1
    1a92:	f200 80bb 	bhi.w	1c0c <sysclk_enable_peripheral_clock+0x194>
    1a96:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1a9a:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1a9e:	4290      	cmp	r0, r2
    1aa0:	f000 81f2 	beq.w	1e88 <sysclk_enable_peripheral_clock+0x410>
    1aa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1aa8:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1aac:	4298      	cmp	r0, r3
    1aae:	d851      	bhi.n	1b54 <sysclk_enable_peripheral_clock+0xdc>
    1ab0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1ab4:	f2c4 0101 	movt	r1, #16385	; 0x4001
    1ab8:	4288      	cmp	r0, r1
    1aba:	f000 81b0 	beq.w	1e1e <sysclk_enable_peripheral_clock+0x3a6>
    1abe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1ac2:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1ac6:	4290      	cmp	r0, r2
    1ac8:	d820      	bhi.n	1b0c <sysclk_enable_peripheral_clock+0x94>
    1aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1ace:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1ad2:	4298      	cmp	r0, r3
    1ad4:	f000 8171 	beq.w	1dba <sysclk_enable_peripheral_clock+0x342>
    1ad8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1adc:	f2c4 0100 	movt	r1, #16384	; 0x4000
    1ae0:	4288      	cmp	r0, r1
    1ae2:	d804      	bhi.n	1aee <sysclk_enable_peripheral_clock+0x76>
    1ae4:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    1ae8:	f040 8334 	bne.w	2154 <sysclk_enable_peripheral_clock+0x6dc>
    1aec:	e15d      	b.n	1daa <sysclk_enable_peripheral_clock+0x332>
    1aee:	f04f 0300 	mov.w	r3, #0
    1af2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1af6:	4298      	cmp	r0, r3
    1af8:	f000 8167 	beq.w	1dca <sysclk_enable_peripheral_clock+0x352>
    1afc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    1b00:	f2c4 0101 	movt	r1, #16385	; 0x4001
    1b04:	4288      	cmp	r0, r1
    1b06:	f040 8325 	bne.w	2154 <sysclk_enable_peripheral_clock+0x6dc>
    1b0a:	e173      	b.n	1df4 <sysclk_enable_peripheral_clock+0x37c>
    1b0c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    1b10:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1b14:	4298      	cmp	r0, r3
    1b16:	f000 8192 	beq.w	1e3e <sysclk_enable_peripheral_clock+0x3c6>
    1b1a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    1b1e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1b22:	4290      	cmp	r0, r2
    1b24:	d807      	bhi.n	1b36 <sysclk_enable_peripheral_clock+0xbe>
    1b26:	f44f 4104 	mov.w	r1, #33792	; 0x8400
    1b2a:	f2c4 0101 	movt	r1, #16385	; 0x4001
    1b2e:	4288      	cmp	r0, r1
    1b30:	f040 8310 	bne.w	2154 <sysclk_enable_peripheral_clock+0x6dc>
    1b34:	e17b      	b.n	1e2e <sysclk_enable_peripheral_clock+0x3b6>
    1b36:	f44f 4244 	mov.w	r2, #50176	; 0xc400
    1b3a:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1b3e:	4290      	cmp	r0, r2
    1b40:	f000 8185 	beq.w	1e4e <sysclk_enable_peripheral_clock+0x3d6>
    1b44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    1b48:	f2c4 0102 	movt	r1, #16386	; 0x4002
    1b4c:	4288      	cmp	r0, r1
    1b4e:	f040 8301 	bne.w	2154 <sysclk_enable_peripheral_clock+0x6dc>
    1b52:	e184      	b.n	1e5e <sysclk_enable_peripheral_clock+0x3e6>
    1b54:	f04f 0200 	mov.w	r2, #0
    1b58:	f2c4 0204 	movt	r2, #16388	; 0x4004
    1b5c:	4290      	cmp	r0, r2
    1b5e:	f000 81e2 	beq.w	1f26 <sysclk_enable_peripheral_clock+0x4ae>
    1b62:	f04f 0100 	mov.w	r1, #0
    1b66:	f2c4 0104 	movt	r1, #16388	; 0x4004
    1b6a:	4288      	cmp	r0, r1
    1b6c:	d823      	bhi.n	1bb6 <sysclk_enable_peripheral_clock+0x13e>
    1b6e:	f04f 0300 	mov.w	r3, #0
    1b72:	f2c4 0303 	movt	r3, #16387	; 0x4003
    1b76:	4298      	cmp	r0, r3
    1b78:	f000 81b0 	beq.w	1edc <sysclk_enable_peripheral_clock+0x464>
    1b7c:	f04f 0200 	mov.w	r2, #0
    1b80:	f2c4 0203 	movt	r2, #16387	; 0x4003
    1b84:	4290      	cmp	r0, r2
    1b86:	d807      	bhi.n	1b98 <sysclk_enable_peripheral_clock+0x120>
    1b88:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    1b8c:	f2c4 0102 	movt	r1, #16386	; 0x4002
    1b90:	4288      	cmp	r0, r1
    1b92:	f040 82df 	bne.w	2154 <sysclk_enable_peripheral_clock+0x6dc>
    1b96:	e18c      	b.n	1eb2 <sysclk_enable_peripheral_clock+0x43a>
    1b98:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1b9c:	f2c4 0203 	movt	r2, #16387	; 0x4003
    1ba0:	4290      	cmp	r0, r2
    1ba2:	f000 81b0 	beq.w	1f06 <sysclk_enable_peripheral_clock+0x48e>
    1ba6:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    1baa:	f2c4 0103 	movt	r1, #16387	; 0x4003
    1bae:	4288      	cmp	r0, r1
    1bb0:	f040 82d0 	bne.w	2154 <sysclk_enable_peripheral_clock+0x6dc>
    1bb4:	e1af      	b.n	1f16 <sysclk_enable_peripheral_clock+0x49e>
    1bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1bba:	f2c4 0306 	movt	r3, #16390	; 0x4006
    1bbe:	4298      	cmp	r0, r3
    1bc0:	f000 81c9 	beq.w	1f56 <sysclk_enable_peripheral_clock+0x4de>
    1bc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1bc8:	f2c4 0106 	movt	r1, #16390	; 0x4006
    1bcc:	4288      	cmp	r0, r1
    1bce:	d80e      	bhi.n	1bee <sysclk_enable_peripheral_clock+0x176>
    1bd0:	f04f 0200 	mov.w	r2, #0
    1bd4:	f2c4 0206 	movt	r2, #16390	; 0x4006
    1bd8:	4290      	cmp	r0, r2
    1bda:	f000 81ac 	beq.w	1f36 <sysclk_enable_peripheral_clock+0x4be>
    1bde:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    1be2:	f2c4 0306 	movt	r3, #16390	; 0x4006
    1be6:	4298      	cmp	r0, r3
    1be8:	f040 82b4 	bne.w	2154 <sysclk_enable_peripheral_clock+0x6dc>
    1bec:	e1ab      	b.n	1f46 <sysclk_enable_peripheral_clock+0x4ce>
    1bee:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    1bf2:	f2c4 0306 	movt	r3, #16390	; 0x4006
    1bf6:	4298      	cmp	r0, r3
    1bf8:	f000 81b5 	beq.w	1f66 <sysclk_enable_peripheral_clock+0x4ee>
    1bfc:	f04f 0100 	mov.w	r1, #0
    1c00:	f2c4 0107 	movt	r1, #16391	; 0x4007
    1c04:	4288      	cmp	r0, r1
    1c06:	f040 82a5 	bne.w	2154 <sysclk_enable_peripheral_clock+0x6dc>
    1c0a:	e1b4      	b.n	1f76 <sysclk_enable_peripheral_clock+0x4fe>
    1c0c:	f04f 0100 	mov.w	r1, #0
    1c10:	f2c4 010e 	movt	r1, #16398	; 0x400e
    1c14:	4288      	cmp	r0, r1
    1c16:	f000 8232 	beq.w	207e <sysclk_enable_peripheral_clock+0x606>
    1c1a:	f04f 0300 	mov.w	r3, #0
    1c1e:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1c22:	4298      	cmp	r0, r3
    1c24:	d85b      	bhi.n	1cde <sysclk_enable_peripheral_clock+0x266>
    1c26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1c2a:	f2c4 020a 	movt	r2, #16394	; 0x400a
    1c2e:	4290      	cmp	r0, r2
    1c30:	f000 81e2 	beq.w	1ff8 <sysclk_enable_peripheral_clock+0x580>
    1c34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    1c38:	f2c4 010a 	movt	r1, #16394	; 0x400a
    1c3c:	4288      	cmp	r0, r1
    1c3e:	d823      	bhi.n	1c88 <sysclk_enable_peripheral_clock+0x210>
    1c40:	f04f 0300 	mov.w	r3, #0
    1c44:	f2c4 0308 	movt	r3, #16392	; 0x4008
    1c48:	4298      	cmp	r0, r3
    1c4a:	f000 81ac 	beq.w	1fa6 <sysclk_enable_peripheral_clock+0x52e>
    1c4e:	f04f 0200 	mov.w	r2, #0
    1c52:	f2c4 0208 	movt	r2, #16392	; 0x4008
    1c56:	4290      	cmp	r0, r2
    1c58:	d807      	bhi.n	1c6a <sysclk_enable_peripheral_clock+0x1f2>
    1c5a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    1c5e:	f2c4 0107 	movt	r1, #16391	; 0x4007
    1c62:	4288      	cmp	r0, r1
    1c64:	f040 8276 	bne.w	2154 <sysclk_enable_peripheral_clock+0x6dc>
    1c68:	e195      	b.n	1f96 <sysclk_enable_peripheral_clock+0x51e>
    1c6a:	f04f 0200 	mov.w	r2, #0
    1c6e:	f2c4 020a 	movt	r2, #16394	; 0x400a
    1c72:	4290      	cmp	r0, r2
    1c74:	f000 819f 	beq.w	1fb6 <sysclk_enable_peripheral_clock+0x53e>
    1c78:	f44f 6180 	mov.w	r1, #1024	; 0x400
    1c7c:	f2c4 010a 	movt	r1, #16394	; 0x400a
    1c80:	4288      	cmp	r0, r1
    1c82:	f040 8267 	bne.w	2154 <sysclk_enable_peripheral_clock+0x6dc>
    1c86:	e1a6      	b.n	1fd6 <sysclk_enable_peripheral_clock+0x55e>
    1c88:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1c8c:	f2c4 030a 	movt	r3, #16394	; 0x400a
    1c90:	4298      	cmp	r0, r3
    1c92:	f000 81db 	beq.w	204c <sysclk_enable_peripheral_clock+0x5d4>
    1c96:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    1c9a:	f2c4 010a 	movt	r1, #16394	; 0x400a
    1c9e:	4288      	cmp	r0, r1
    1ca0:	d80e      	bhi.n	1cc0 <sysclk_enable_peripheral_clock+0x248>
    1ca2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    1ca6:	f2c4 020a 	movt	r2, #16394	; 0x400a
    1caa:	4290      	cmp	r0, r2
    1cac:	f000 81ac 	beq.w	2008 <sysclk_enable_peripheral_clock+0x590>
    1cb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    1cb4:	f2c4 030a 	movt	r3, #16394	; 0x400a
    1cb8:	4298      	cmp	r0, r3
    1cba:	f040 824b 	bne.w	2154 <sysclk_enable_peripheral_clock+0x6dc>
    1cbe:	e1b4      	b.n	202a <sysclk_enable_peripheral_clock+0x5b2>
    1cc0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
    1cc4:	f2c4 010a 	movt	r1, #16394	; 0x400a
    1cc8:	4288      	cmp	r0, r1
    1cca:	f000 81d0 	beq.w	206e <sysclk_enable_peripheral_clock+0x5f6>
    1cce:	f04f 0300 	mov.w	r3, #0
    1cd2:	f2c4 030b 	movt	r3, #16395	; 0x400b
    1cd6:	4298      	cmp	r0, r3
    1cd8:	f040 823c 	bne.w	2154 <sysclk_enable_peripheral_clock+0x6dc>
    1cdc:	e05b      	b.n	1d96 <sysclk_enable_peripheral_clock+0x31e>
    1cde:	f04f 0300 	mov.w	r3, #0
    1ce2:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1ce6:	4298      	cmp	r0, r3
    1ce8:	f000 81fa 	beq.w	20e0 <sysclk_enable_peripheral_clock+0x668>
    1cec:	f04f 0200 	mov.w	r2, #0
    1cf0:	f2c4 020f 	movt	r2, #16399	; 0x400f
    1cf4:	4290      	cmp	r0, r2
    1cf6:	d823      	bhi.n	1d40 <sysclk_enable_peripheral_clock+0x2c8>
    1cf8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    1cfc:	f2c4 010e 	movt	r1, #16398	; 0x400e
    1d00:	4288      	cmp	r0, r1
    1d02:	f000 81d0 	beq.w	20a6 <sysclk_enable_peripheral_clock+0x62e>
    1d06:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1d0a:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1d0e:	4298      	cmp	r0, r3
    1d10:	d807      	bhi.n	1d22 <sysclk_enable_peripheral_clock+0x2aa>
    1d12:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1d16:	f2c4 020e 	movt	r2, #16398	; 0x400e
    1d1a:	4290      	cmp	r0, r2
    1d1c:	f040 821a 	bne.w	2154 <sysclk_enable_peripheral_clock+0x6dc>
    1d20:	e1b7      	b.n	2092 <sysclk_enable_peripheral_clock+0x61a>
    1d22:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    1d26:	f2c4 010e 	movt	r1, #16398	; 0x400e
    1d2a:	4288      	cmp	r0, r1
    1d2c:	f000 81c5 	beq.w	20ba <sysclk_enable_peripheral_clock+0x642>
    1d30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1d34:	f2c4 020e 	movt	r2, #16398	; 0x400e
    1d38:	4290      	cmp	r0, r2
    1d3a:	f040 820b 	bne.w	2154 <sysclk_enable_peripheral_clock+0x6dc>
    1d3e:	e1c6      	b.n	20ce <sysclk_enable_peripheral_clock+0x656>
    1d40:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    1d44:	f2c4 010f 	movt	r1, #16399	; 0x400f
    1d48:	4288      	cmp	r0, r1
    1d4a:	f000 81e7 	beq.w	211c <sysclk_enable_peripheral_clock+0x6a4>
    1d4e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    1d52:	f2c4 020f 	movt	r2, #16399	; 0x400f
    1d56:	4290      	cmp	r0, r2
    1d58:	d80e      	bhi.n	1d78 <sysclk_enable_peripheral_clock+0x300>
    1d5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1d5e:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1d62:	4298      	cmp	r0, r3
    1d64:	f000 81c6 	beq.w	20f4 <sysclk_enable_peripheral_clock+0x67c>
    1d68:	f44f 6100 	mov.w	r1, #2048	; 0x800
    1d6c:	f2c4 010f 	movt	r1, #16399	; 0x400f
    1d70:	4288      	cmp	r0, r1
    1d72:	f040 81ef 	bne.w	2154 <sysclk_enable_peripheral_clock+0x6dc>
    1d76:	e1c7      	b.n	2108 <sysclk_enable_peripheral_clock+0x690>
    1d78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    1d7c:	f2c4 010f 	movt	r1, #16399	; 0x400f
    1d80:	4288      	cmp	r0, r1
    1d82:	f000 81d5 	beq.w	2130 <sysclk_enable_peripheral_clock+0x6b8>
    1d86:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
    1d8a:	f2c4 020f 	movt	r2, #16399	; 0x400f
    1d8e:	4290      	cmp	r0, r2
    1d90:	f040 81e0 	bne.w	2154 <sysclk_enable_peripheral_clock+0x6dc>
    1d94:	e1d6      	b.n	2144 <sysclk_enable_peripheral_clock+0x6cc>
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    1d96:	f04f 0001 	mov.w	r0, #1
    1d9a:	f04f 0109 	mov.w	r1, #9
    1d9e:	f241 522d 	movw	r2, #5421	; 0x152d
    1da2:	f2c0 0200 	movt	r2, #0
    1da6:	4790      	blx	r2
    1da8:	bd08      	pop	{r3, pc}
	case AESA_ADDR:
		sysclk_enable_hsb_module(SYSCLK_AESA_HSB);
		break;

	case IISC_ADDR:
		sysclk_enable_pba_module(SYSCLK_IISC);
    1daa:	f04f 0000 	mov.w	r0, #0
    1dae:	f241 6201 	movw	r2, #5633	; 0x1601
    1db2:	f2c0 0200 	movt	r2, #0
    1db6:	4790      	blx	r2
		break;
    1db8:	bd08      	pop	{r3, pc}

	case SPI_ADDR:
		sysclk_enable_pba_module(SYSCLK_SPI);
    1dba:	f04f 0001 	mov.w	r0, #1
    1dbe:	f241 6101 	movw	r1, #5633	; 0x1601
    1dc2:	f2c0 0100 	movt	r1, #0
    1dc6:	4788      	blx	r1
		break;
    1dc8:	bd08      	pop	{r3, pc}

	case TC0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TC0);
    1dca:	f04f 0002 	mov.w	r0, #2
    1dce:	f241 6301 	movw	r3, #5633	; 0x1601
    1dd2:	f2c0 0300 	movt	r3, #0
    1dd6:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    1dd8:	f04f 0000 	mov.w	r0, #0
    1ddc:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1de0:	6c01      	ldr	r1, [r0, #64]	; 0x40
	temp_mask |= mask;
    1de2:	f041 0355 	orr.w	r3, r1, #85	; 0x55
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    1de6:	f04f 0240 	mov.w	r2, #64	; 0x40
    1dea:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    1dee:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    1df0:	6403      	str	r3, [r0, #64]	; 0x40
    1df2:	bd08      	pop	{r3, pc}
			| PBA_DIVMASK_TIMER_CLOCK5
			);
		break;

	case TC1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TC1);
    1df4:	f04f 0003 	mov.w	r0, #3
    1df8:	f241 6201 	movw	r2, #5633	; 0x1601
    1dfc:	f2c0 0200 	movt	r2, #0
    1e00:	4790      	blx	r2
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    1e02:	f04f 0000 	mov.w	r0, #0
    1e06:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1e0a:	6c03      	ldr	r3, [r0, #64]	; 0x40
	temp_mask |= mask;
    1e0c:	f043 0155 	orr.w	r1, r3, #85	; 0x55
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    1e10:	f04f 0240 	mov.w	r2, #64	; 0x40
    1e14:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    1e18:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    1e1a:	6401      	str	r1, [r0, #64]	; 0x40
    1e1c:	bd08      	pop	{r3, pc}
			| PBA_DIVMASK_TIMER_CLOCK5
			);
		break;

	case TWIM0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM0);
    1e1e:	f04f 0004 	mov.w	r0, #4
    1e22:	f241 6301 	movw	r3, #5633	; 0x1601
    1e26:	f2c0 0300 	movt	r3, #0
    1e2a:	4798      	blx	r3
		break;
    1e2c:	bd08      	pop	{r3, pc}

	case TWIS0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIS0);
    1e2e:	f04f 0005 	mov.w	r0, #5
    1e32:	f241 6301 	movw	r3, #5633	; 0x1601
    1e36:	f2c0 0300 	movt	r3, #0
    1e3a:	4798      	blx	r3
		break;
    1e3c:	bd08      	pop	{r3, pc}

	case TWIM1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM1);
    1e3e:	f04f 0006 	mov.w	r0, #6
    1e42:	f241 6101 	movw	r1, #5633	; 0x1601
    1e46:	f2c0 0100 	movt	r1, #0
    1e4a:	4788      	blx	r1
		break;
    1e4c:	bd08      	pop	{r3, pc}

	case TWIS1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIS1);
    1e4e:	f04f 0007 	mov.w	r0, #7
    1e52:	f241 6201 	movw	r2, #5633	; 0x1601
    1e56:	f2c0 0200 	movt	r2, #0
    1e5a:	4790      	blx	r2
		break;
    1e5c:	bd08      	pop	{r3, pc}

	case USART0_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART0);
    1e5e:	f04f 0008 	mov.w	r0, #8
    1e62:	f241 6301 	movw	r3, #5633	; 0x1601
    1e66:	f2c0 0300 	movt	r3, #0
    1e6a:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    1e6c:	f04f 0000 	mov.w	r0, #0
    1e70:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1e74:	6c02      	ldr	r2, [r0, #64]	; 0x40
	temp_mask |= mask;
    1e76:	f042 0104 	orr.w	r1, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    1e7a:	f04f 0340 	mov.w	r3, #64	; 0x40
    1e7e:	f6ca 2300 	movt	r3, #43520	; 0xaa00
    1e82:	6583      	str	r3, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    1e84:	6401      	str	r1, [r0, #64]	; 0x40
    1e86:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART1_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART1);
    1e88:	f04f 0009 	mov.w	r0, #9
    1e8c:	f241 6301 	movw	r3, #5633	; 0x1601
    1e90:	f2c0 0300 	movt	r3, #0
    1e94:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    1e96:	f04f 0000 	mov.w	r0, #0
    1e9a:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1e9e:	6c01      	ldr	r1, [r0, #64]	; 0x40
	temp_mask |= mask;
    1ea0:	f041 0304 	orr.w	r3, r1, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    1ea4:	f04f 0240 	mov.w	r2, #64	; 0x40
    1ea8:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    1eac:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    1eae:	6403      	str	r3, [r0, #64]	; 0x40
    1eb0:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART2_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART2);
    1eb2:	f04f 000a 	mov.w	r0, #10
    1eb6:	f241 6301 	movw	r3, #5633	; 0x1601
    1eba:	f2c0 0300 	movt	r3, #0
    1ebe:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    1ec0:	f04f 0000 	mov.w	r0, #0
    1ec4:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1ec8:	6c02      	ldr	r2, [r0, #64]	; 0x40
	temp_mask |= mask;
    1eca:	f042 0104 	orr.w	r1, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    1ece:	f04f 0340 	mov.w	r3, #64	; 0x40
    1ed2:	f6ca 2300 	movt	r3, #43520	; 0xaa00
    1ed6:	6583      	str	r3, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    1ed8:	6401      	str	r1, [r0, #64]	; 0x40
    1eda:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART3_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART3);
    1edc:	f04f 000b 	mov.w	r0, #11
    1ee0:	f241 6101 	movw	r1, #5633	; 0x1601
    1ee4:	f2c0 0100 	movt	r1, #0
    1ee8:	4788      	blx	r1
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    1eea:	f04f 0000 	mov.w	r0, #0
    1eee:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1ef2:	6c03      	ldr	r3, [r0, #64]	; 0x40
	temp_mask |= mask;
    1ef4:	f043 0104 	orr.w	r1, r3, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    1ef8:	f04f 0240 	mov.w	r2, #64	; 0x40
    1efc:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    1f00:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    1f02:	6401      	str	r1, [r0, #64]	; 0x40
    1f04:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case ADCIFE_ADDR:
		sysclk_enable_pba_module(SYSCLK_ADCIFE);
    1f06:	f04f 000c 	mov.w	r0, #12
    1f0a:	f241 6201 	movw	r2, #5633	; 0x1601
    1f0e:	f2c0 0200 	movt	r2, #0
    1f12:	4790      	blx	r2
		break;
    1f14:	bd08      	pop	{r3, pc}

	case DACC_ADDR:
		sysclk_enable_pba_module(SYSCLK_DACC);
    1f16:	f04f 000d 	mov.w	r0, #13
    1f1a:	f241 6301 	movw	r3, #5633	; 0x1601
    1f1e:	f2c0 0300 	movt	r3, #0
    1f22:	4798      	blx	r3
		break;
    1f24:	bd08      	pop	{r3, pc}

	case ACIFC_ADDR:
		sysclk_enable_pba_module(SYSCLK_ACIFC);
    1f26:	f04f 000e 	mov.w	r0, #14
    1f2a:	f241 6201 	movw	r2, #5633	; 0x1601
    1f2e:	f2c0 0200 	movt	r2, #0
    1f32:	4790      	blx	r2
		break;
    1f34:	bd08      	pop	{r3, pc}

	case GLOC_ADDR:
		sysclk_enable_pba_module(SYSCLK_GLOC);
    1f36:	f04f 000f 	mov.w	r0, #15
    1f3a:	f241 6201 	movw	r2, #5633	; 0x1601
    1f3e:	f2c0 0200 	movt	r2, #0
    1f42:	4790      	blx	r2
		break;
    1f44:	bd08      	pop	{r3, pc}

	case ABDACB_ADDR:
		sysclk_enable_pba_module(SYSCLK_ABDACB);
    1f46:	f04f 0010 	mov.w	r0, #16
    1f4a:	f241 6101 	movw	r1, #5633	; 0x1601
    1f4e:	f2c0 0100 	movt	r1, #0
    1f52:	4788      	blx	r1
		break;
    1f54:	bd08      	pop	{r3, pc}

	case TRNG_ADDR:
		sysclk_enable_pba_module(SYSCLK_TRNG);
    1f56:	f04f 0011 	mov.w	r0, #17
    1f5a:	f241 6101 	movw	r1, #5633	; 0x1601
    1f5e:	f2c0 0100 	movt	r1, #0
    1f62:	4788      	blx	r1
		break;
    1f64:	bd08      	pop	{r3, pc}

	case PARC_ADDR:
		sysclk_enable_pba_module(SYSCLK_PARC);
    1f66:	f04f 0012 	mov.w	r0, #18
    1f6a:	f241 6301 	movw	r3, #5633	; 0x1601
    1f6e:	f2c0 0300 	movt	r3, #0
    1f72:	4798      	blx	r3
		break;
    1f74:	bd08      	pop	{r3, pc}

	case CATB_ADDR:
		sysclk_enable_pba_module(SYSCLK_CATB);
    1f76:	f04f 0013 	mov.w	r0, #19
    1f7a:	f241 6201 	movw	r2, #5633	; 0x1601
    1f7e:	f2c0 0200 	movt	r2, #0
    1f82:	4790      	blx	r2
		break;
    1f84:	bd08      	pop	{r3, pc}

	case TWIM2_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM2);
    1f86:	f04f 0015 	mov.w	r0, #21
    1f8a:	f241 6101 	movw	r1, #5633	; 0x1601
    1f8e:	f2c0 0100 	movt	r1, #0
    1f92:	4788      	blx	r1
		break;
    1f94:	bd08      	pop	{r3, pc}

	case TWIM3_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM3);
    1f96:	f04f 0016 	mov.w	r0, #22
    1f9a:	f241 6301 	movw	r3, #5633	; 0x1601
    1f9e:	f2c0 0300 	movt	r3, #0
    1fa2:	4798      	blx	r3
		break;
    1fa4:	bd08      	pop	{r3, pc}

	case LCDCA_ADDR:
		sysclk_enable_pba_module(SYSCLK_LCDCA);
    1fa6:	f04f 0017 	mov.w	r0, #23
    1faa:	f241 6201 	movw	r2, #5633	; 0x1601
    1fae:	f2c0 0200 	movt	r2, #0
    1fb2:	4790      	blx	r2
		break;
    1fb4:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    1fb6:	f04f 0001 	mov.w	r0, #1
    1fba:	4601      	mov	r1, r0
    1fbc:	f241 532d 	movw	r3, #5421	; 0x152d
    1fc0:	f2c0 0300 	movt	r3, #0
    1fc4:	4798      	blx	r3

	case HFLASHC_ADDR:
		sysclk_enable_hsb_module(SYSCLK_HFLASHC_DATA);
		sysclk_enable_pbb_module(SYSCLK_HFLASHC_REGS);
    1fc6:	f04f 0000 	mov.w	r0, #0
    1fca:	f241 61c1 	movw	r1, #5825	; 0x16c1
    1fce:	f2c0 0100 	movt	r1, #0
    1fd2:	4788      	blx	r1
		break;
    1fd4:	bd08      	pop	{r3, pc}
    1fd6:	f04f 0001 	mov.w	r0, #1
    1fda:	f04f 0102 	mov.w	r1, #2
    1fde:	f241 532d 	movw	r3, #5421	; 0x152d
    1fe2:	f2c0 0300 	movt	r3, #0
    1fe6:	4798      	blx	r3

	case HCACHE_ADDR:
		sysclk_enable_hsb_module(SYSCLK_HRAMC1_DATA);
		sysclk_enable_pbb_module(SYSCLK_HRAMC1_REGS);
    1fe8:	f04f 0001 	mov.w	r0, #1
    1fec:	f241 62c1 	movw	r2, #5825	; 0x16c1
    1ff0:	f2c0 0200 	movt	r2, #0
    1ff4:	4790      	blx	r2
		break;
    1ff6:	bd08      	pop	{r3, pc}

	case HMATRIX_ADDR:
		sysclk_enable_pbb_module(SYSCLK_HMATRIX);
    1ff8:	f04f 0002 	mov.w	r0, #2
    1ffc:	f241 61c1 	movw	r1, #5825	; 0x16c1
    2000:	f2c0 0100 	movt	r1, #0
    2004:	4788      	blx	r1
		break;
    2006:	bd08      	pop	{r3, pc}
    2008:	f04f 0001 	mov.w	r0, #1
    200c:	f04f 0100 	mov.w	r1, #0
    2010:	f241 532d 	movw	r3, #5421	; 0x152d
    2014:	f2c0 0300 	movt	r3, #0
    2018:	4798      	blx	r3

	case PDCA_ADDR:
		sysclk_enable_hsb_module(SYSCLK_PDCA_HSB);
		sysclk_enable_pbb_module(SYSCLK_PDCA_PB);
    201a:	f04f 0003 	mov.w	r0, #3
    201e:	f241 62c1 	movw	r2, #5825	; 0x16c1
    2022:	f2c0 0200 	movt	r2, #0
    2026:	4790      	blx	r2
		break;
    2028:	bd08      	pop	{r3, pc}
    202a:	f04f 0001 	mov.w	r0, #1
    202e:	f04f 0104 	mov.w	r1, #4
    2032:	f241 522d 	movw	r2, #5421	; 0x152d
    2036:	f2c0 0200 	movt	r2, #0
    203a:	4790      	blx	r2

	case CRCCU_ADDR:
		sysclk_enable_hsb_module(SYSCLK_CRCCU_DATA);
		sysclk_enable_pbb_module(SYSCLK_CRCCU_REGS);
    203c:	f04f 0004 	mov.w	r0, #4
    2040:	f241 61c1 	movw	r1, #5825	; 0x16c1
    2044:	f2c0 0100 	movt	r1, #0
    2048:	4788      	blx	r1
		break;
    204a:	bd08      	pop	{r3, pc}
    204c:	f04f 0001 	mov.w	r0, #1
    2050:	f04f 0103 	mov.w	r1, #3
    2054:	f241 532d 	movw	r3, #5421	; 0x152d
    2058:	f2c0 0300 	movt	r3, #0
    205c:	4798      	blx	r3

	case USBC_ADDR:
		sysclk_enable_hsb_module(SYSCLK_USBC_DATA);
		sysclk_enable_pbb_module(SYSCLK_USBC_REGS);
    205e:	f04f 0005 	mov.w	r0, #5
    2062:	f241 62c1 	movw	r2, #5825	; 0x16c1
    2066:	f2c0 0200 	movt	r2, #0
    206a:	4790      	blx	r2
		break;
    206c:	bd08      	pop	{r3, pc}

	case PEVC_ADDR:
		sysclk_enable_pbb_module(SYSCLK_PEVC);
    206e:	f04f 0006 	mov.w	r0, #6
    2072:	f241 61c1 	movw	r1, #5825	; 0x16c1
    2076:	f2c0 0100 	movt	r1, #0
    207a:	4788      	blx	r1
		break;
    207c:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbc_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_PBC, module_index);
    207e:	f04f 0004 	mov.w	r0, #4
    2082:	f04f 0100 	mov.w	r1, #0
    2086:	f241 532d 	movw	r3, #5421	; 0x152d
    208a:	f2c0 0300 	movt	r3, #0
    208e:	4798      	blx	r3
    2090:	bd08      	pop	{r3, pc}
    2092:	f04f 0004 	mov.w	r0, #4
    2096:	f04f 0101 	mov.w	r1, #1
    209a:	f241 532d 	movw	r3, #5421	; 0x152d
    209e:	f2c0 0300 	movt	r3, #0
    20a2:	4798      	blx	r3
    20a4:	bd08      	pop	{r3, pc}
    20a6:	f04f 0004 	mov.w	r0, #4
    20aa:	f04f 0102 	mov.w	r1, #2
    20ae:	f241 532d 	movw	r3, #5421	; 0x152d
    20b2:	f2c0 0300 	movt	r3, #0
    20b6:	4798      	blx	r3
    20b8:	bd08      	pop	{r3, pc}
    20ba:	f04f 0004 	mov.w	r0, #4
    20be:	f04f 0103 	mov.w	r1, #3
    20c2:	f241 522d 	movw	r2, #5421	; 0x152d
    20c6:	f2c0 0200 	movt	r2, #0
    20ca:	4790      	blx	r2
    20cc:	bd08      	pop	{r3, pc}
    20ce:	f04f 0004 	mov.w	r0, #4
    20d2:	4601      	mov	r1, r0
    20d4:	f241 532d 	movw	r3, #5421	; 0x152d
    20d8:	f2c0 0300 	movt	r3, #0
    20dc:	4798      	blx	r3
    20de:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbd_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_PBD, module_index);
    20e0:	f04f 0005 	mov.w	r0, #5
    20e4:	f04f 0100 	mov.w	r1, #0
    20e8:	f241 522d 	movw	r2, #5421	; 0x152d
    20ec:	f2c0 0200 	movt	r2, #0
    20f0:	4790      	blx	r2
    20f2:	bd08      	pop	{r3, pc}
    20f4:	f04f 0005 	mov.w	r0, #5
    20f8:	f04f 0101 	mov.w	r1, #1
    20fc:	f241 532d 	movw	r3, #5421	; 0x152d
    2100:	f2c0 0300 	movt	r3, #0
    2104:	4798      	blx	r3
    2106:	bd08      	pop	{r3, pc}
    2108:	f04f 0005 	mov.w	r0, #5
    210c:	f04f 0102 	mov.w	r1, #2
    2110:	f241 522d 	movw	r2, #5421	; 0x152d
    2114:	f2c0 0200 	movt	r2, #0
    2118:	4790      	blx	r2
    211a:	bd08      	pop	{r3, pc}
    211c:	f04f 0005 	mov.w	r0, #5
    2120:	f04f 0103 	mov.w	r1, #3
    2124:	f241 532d 	movw	r3, #5421	; 0x152d
    2128:	f2c0 0300 	movt	r3, #0
    212c:	4798      	blx	r3
    212e:	bd08      	pop	{r3, pc}
    2130:	f04f 0005 	mov.w	r0, #5
    2134:	f04f 0104 	mov.w	r1, #4
    2138:	f241 522d 	movw	r2, #5421	; 0x152d
    213c:	f2c0 0200 	movt	r2, #0
    2140:	4790      	blx	r2
    2142:	bd08      	pop	{r3, pc}
    2144:	f04f 0005 	mov.w	r0, #5
    2148:	4601      	mov	r1, r0
    214a:	f241 532d 	movw	r3, #5421	; 0x152d
    214e:	f2c0 0300 	movt	r3, #0
    2152:	4798      	blx	r3
    2154:	bd08      	pop	{r3, pc}
    2156:	bf00      	nop

00002158 <sysclk_disable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be disabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
    2158:	b508      	push	{r3, lr}
	switch ((uintptr_t)module) {
    215a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    215e:	f2c4 0307 	movt	r3, #16391	; 0x4007
    2162:	4298      	cmp	r0, r3
    2164:	f000 8231 	beq.w	25ca <sysclk_disable_peripheral_clock+0x472>
    2168:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    216c:	f2c4 0107 	movt	r1, #16391	; 0x4007
    2170:	4288      	cmp	r0, r1
    2172:	f200 80bb 	bhi.w	22ec <sysclk_disable_peripheral_clock+0x194>
    2176:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    217a:	f2c4 0202 	movt	r2, #16386	; 0x4002
    217e:	4290      	cmp	r0, r2
    2180:	f000 81cb 	beq.w	251a <sysclk_disable_peripheral_clock+0x3c2>
    2184:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2188:	f2c4 0302 	movt	r3, #16386	; 0x4002
    218c:	4298      	cmp	r0, r3
    218e:	d851      	bhi.n	2234 <sysclk_disable_peripheral_clock+0xdc>
    2190:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2194:	f2c4 0101 	movt	r1, #16385	; 0x4001
    2198:	4288      	cmp	r0, r1
    219a:	f000 8196 	beq.w	24ca <sysclk_disable_peripheral_clock+0x372>
    219e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    21a2:	f2c4 0201 	movt	r2, #16385	; 0x4001
    21a6:	4290      	cmp	r0, r2
    21a8:	d820      	bhi.n	21ec <sysclk_disable_peripheral_clock+0x94>
    21aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    21ae:	f2c4 0300 	movt	r3, #16384	; 0x4000
    21b2:	4298      	cmp	r0, r3
    21b4:	f000 8171 	beq.w	249a <sysclk_disable_peripheral_clock+0x342>
    21b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    21bc:	f2c4 0100 	movt	r1, #16384	; 0x4000
    21c0:	4288      	cmp	r0, r1
    21c2:	d804      	bhi.n	21ce <sysclk_disable_peripheral_clock+0x76>
    21c4:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    21c8:	f040 82f3 	bne.w	27b2 <sysclk_disable_peripheral_clock+0x65a>
    21cc:	e15d      	b.n	248a <sysclk_disable_peripheral_clock+0x332>
    21ce:	f04f 0300 	mov.w	r3, #0
    21d2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d6:	4298      	cmp	r0, r3
    21d8:	f000 8167 	beq.w	24aa <sysclk_disable_peripheral_clock+0x352>
    21dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    21e0:	f2c4 0101 	movt	r1, #16385	; 0x4001
    21e4:	4288      	cmp	r0, r1
    21e6:	f040 82e4 	bne.w	27b2 <sysclk_disable_peripheral_clock+0x65a>
    21ea:	e166      	b.n	24ba <sysclk_disable_peripheral_clock+0x362>
    21ec:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    21f0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    21f4:	4290      	cmp	r0, r2
    21f6:	f000 8178 	beq.w	24ea <sysclk_disable_peripheral_clock+0x392>
    21fa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    21fe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2202:	4298      	cmp	r0, r3
    2204:	d807      	bhi.n	2216 <sysclk_disable_peripheral_clock+0xbe>
    2206:	f44f 4104 	mov.w	r1, #33792	; 0x8400
    220a:	f2c4 0101 	movt	r1, #16385	; 0x4001
    220e:	4288      	cmp	r0, r1
    2210:	f040 82cf 	bne.w	27b2 <sysclk_disable_peripheral_clock+0x65a>
    2214:	e161      	b.n	24da <sysclk_disable_peripheral_clock+0x382>
    2216:	f44f 4344 	mov.w	r3, #50176	; 0xc400
    221a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    221e:	4298      	cmp	r0, r3
    2220:	f000 816b 	beq.w	24fa <sysclk_disable_peripheral_clock+0x3a2>
    2224:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    2228:	f2c4 0102 	movt	r1, #16386	; 0x4002
    222c:	4288      	cmp	r0, r1
    222e:	f040 82c0 	bne.w	27b2 <sysclk_disable_peripheral_clock+0x65a>
    2232:	e16a      	b.n	250a <sysclk_disable_peripheral_clock+0x3b2>
    2234:	f04f 0300 	mov.w	r3, #0
    2238:	f2c4 0304 	movt	r3, #16388	; 0x4004
    223c:	4298      	cmp	r0, r3
    223e:	f000 8194 	beq.w	256a <sysclk_disable_peripheral_clock+0x412>
    2242:	f04f 0100 	mov.w	r1, #0
    2246:	f2c4 0104 	movt	r1, #16388	; 0x4004
    224a:	4288      	cmp	r0, r1
    224c:	d823      	bhi.n	2296 <sysclk_disable_peripheral_clock+0x13e>
    224e:	f04f 0200 	mov.w	r2, #0
    2252:	f2c4 0203 	movt	r2, #16387	; 0x4003
    2256:	4290      	cmp	r0, r2
    2258:	f000 816f 	beq.w	253a <sysclk_disable_peripheral_clock+0x3e2>
    225c:	f04f 0300 	mov.w	r3, #0
    2260:	f2c4 0303 	movt	r3, #16387	; 0x4003
    2264:	4298      	cmp	r0, r3
    2266:	d807      	bhi.n	2278 <sysclk_disable_peripheral_clock+0x120>
    2268:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    226c:	f2c4 0102 	movt	r1, #16386	; 0x4002
    2270:	4288      	cmp	r0, r1
    2272:	f040 829e 	bne.w	27b2 <sysclk_disable_peripheral_clock+0x65a>
    2276:	e158      	b.n	252a <sysclk_disable_peripheral_clock+0x3d2>
    2278:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    227c:	f2c4 0303 	movt	r3, #16387	; 0x4003
    2280:	4298      	cmp	r0, r3
    2282:	f000 8162 	beq.w	254a <sysclk_disable_peripheral_clock+0x3f2>
    2286:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    228a:	f2c4 0103 	movt	r1, #16387	; 0x4003
    228e:	4288      	cmp	r0, r1
    2290:	f040 828f 	bne.w	27b2 <sysclk_disable_peripheral_clock+0x65a>
    2294:	e161      	b.n	255a <sysclk_disable_peripheral_clock+0x402>
    2296:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    229a:	f2c4 0206 	movt	r2, #16390	; 0x4006
    229e:	4290      	cmp	r0, r2
    22a0:	f000 817b 	beq.w	259a <sysclk_disable_peripheral_clock+0x442>
    22a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    22a8:	f2c4 0306 	movt	r3, #16390	; 0x4006
    22ac:	4298      	cmp	r0, r3
    22ae:	d80e      	bhi.n	22ce <sysclk_disable_peripheral_clock+0x176>
    22b0:	f04f 0100 	mov.w	r1, #0
    22b4:	f2c4 0106 	movt	r1, #16390	; 0x4006
    22b8:	4288      	cmp	r0, r1
    22ba:	f000 815e 	beq.w	257a <sysclk_disable_peripheral_clock+0x422>
    22be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    22c2:	f2c4 0206 	movt	r2, #16390	; 0x4006
    22c6:	4290      	cmp	r0, r2
    22c8:	f040 8273 	bne.w	27b2 <sysclk_disable_peripheral_clock+0x65a>
    22cc:	e15d      	b.n	258a <sysclk_disable_peripheral_clock+0x432>
    22ce:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    22d2:	f2c4 0206 	movt	r2, #16390	; 0x4006
    22d6:	4290      	cmp	r0, r2
    22d8:	f000 8167 	beq.w	25aa <sysclk_disable_peripheral_clock+0x452>
    22dc:	f04f 0300 	mov.w	r3, #0
    22e0:	f2c4 0307 	movt	r3, #16391	; 0x4007
    22e4:	4298      	cmp	r0, r3
    22e6:	f040 8264 	bne.w	27b2 <sysclk_disable_peripheral_clock+0x65a>
    22ea:	e166      	b.n	25ba <sysclk_disable_peripheral_clock+0x462>
    22ec:	f04f 0300 	mov.w	r3, #0
    22f0:	f2c4 030e 	movt	r3, #16398	; 0x400e
    22f4:	4298      	cmp	r0, r3
    22f6:	f000 81dc 	beq.w	26b2 <sysclk_disable_peripheral_clock+0x55a>
    22fa:	f04f 0100 	mov.w	r1, #0
    22fe:	f2c4 010e 	movt	r1, #16398	; 0x400e
    2302:	4288      	cmp	r0, r1
    2304:	d85b      	bhi.n	23be <sysclk_disable_peripheral_clock+0x266>
    2306:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    230a:	f2c4 020a 	movt	r2, #16394	; 0x400a
    230e:	4290      	cmp	r0, r2
    2310:	f000 818c 	beq.w	262c <sysclk_disable_peripheral_clock+0x4d4>
    2314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    2318:	f2c4 030a 	movt	r3, #16394	; 0x400a
    231c:	4298      	cmp	r0, r3
    231e:	d823      	bhi.n	2368 <sysclk_disable_peripheral_clock+0x210>
    2320:	f04f 0100 	mov.w	r1, #0
    2324:	f2c4 0108 	movt	r1, #16392	; 0x4008
    2328:	4288      	cmp	r0, r1
    232a:	f000 815e 	beq.w	25ea <sysclk_disable_peripheral_clock+0x492>
    232e:	f04f 0200 	mov.w	r2, #0
    2332:	f2c4 0208 	movt	r2, #16392	; 0x4008
    2336:	4290      	cmp	r0, r2
    2338:	d807      	bhi.n	234a <sysclk_disable_peripheral_clock+0x1f2>
    233a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    233e:	f2c4 0307 	movt	r3, #16391	; 0x4007
    2342:	4298      	cmp	r0, r3
    2344:	f040 8235 	bne.w	27b2 <sysclk_disable_peripheral_clock+0x65a>
    2348:	e147      	b.n	25da <sysclk_disable_peripheral_clock+0x482>
    234a:	f04f 0200 	mov.w	r2, #0
    234e:	f2c4 020a 	movt	r2, #16394	; 0x400a
    2352:	4290      	cmp	r0, r2
    2354:	f000 8151 	beq.w	25fa <sysclk_disable_peripheral_clock+0x4a2>
    2358:	f44f 6380 	mov.w	r3, #1024	; 0x400
    235c:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2360:	4298      	cmp	r0, r3
    2362:	f040 8226 	bne.w	27b2 <sysclk_disable_peripheral_clock+0x65a>
    2366:	e150      	b.n	260a <sysclk_disable_peripheral_clock+0x4b2>
    2368:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    236c:	f2c4 010a 	movt	r1, #16394	; 0x400a
    2370:	4288      	cmp	r0, r1
    2372:	f000 8185 	beq.w	2680 <sysclk_disable_peripheral_clock+0x528>
    2376:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    237a:	f2c4 030a 	movt	r3, #16394	; 0x400a
    237e:	4298      	cmp	r0, r3
    2380:	d80e      	bhi.n	23a0 <sysclk_disable_peripheral_clock+0x248>
    2382:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    2386:	f2c4 020a 	movt	r2, #16394	; 0x400a
    238a:	4290      	cmp	r0, r2
    238c:	f000 8156 	beq.w	263c <sysclk_disable_peripheral_clock+0x4e4>
    2390:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    2394:	f2c4 010a 	movt	r1, #16394	; 0x400a
    2398:	4288      	cmp	r0, r1
    239a:	f040 820a 	bne.w	27b2 <sysclk_disable_peripheral_clock+0x65a>
    239e:	e15e      	b.n	265e <sysclk_disable_peripheral_clock+0x506>
    23a0:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
    23a4:	f2c4 020a 	movt	r2, #16394	; 0x400a
    23a8:	4290      	cmp	r0, r2
    23aa:	f000 817a 	beq.w	26a2 <sysclk_disable_peripheral_clock+0x54a>
    23ae:	f04f 0300 	mov.w	r3, #0
    23b2:	f2c4 030b 	movt	r3, #16395	; 0x400b
    23b6:	4298      	cmp	r0, r3
    23b8:	f040 81fb 	bne.w	27b2 <sysclk_disable_peripheral_clock+0x65a>
    23bc:	e05b      	b.n	2476 <sysclk_disable_peripheral_clock+0x31e>
    23be:	f04f 0300 	mov.w	r3, #0
    23c2:	f2c4 030f 	movt	r3, #16399	; 0x400f
    23c6:	4298      	cmp	r0, r3
    23c8:	f000 81a4 	beq.w	2714 <sysclk_disable_peripheral_clock+0x5bc>
    23cc:	f04f 0200 	mov.w	r2, #0
    23d0:	f2c4 020f 	movt	r2, #16399	; 0x400f
    23d4:	4290      	cmp	r0, r2
    23d6:	d823      	bhi.n	2420 <sysclk_disable_peripheral_clock+0x2c8>
    23d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    23dc:	f2c4 010e 	movt	r1, #16398	; 0x400e
    23e0:	4288      	cmp	r0, r1
    23e2:	f000 817a 	beq.w	26da <sysclk_disable_peripheral_clock+0x582>
    23e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
    23ea:	f2c4 030e 	movt	r3, #16398	; 0x400e
    23ee:	4298      	cmp	r0, r3
    23f0:	d807      	bhi.n	2402 <sysclk_disable_peripheral_clock+0x2aa>
    23f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    23f6:	f2c4 020e 	movt	r2, #16398	; 0x400e
    23fa:	4290      	cmp	r0, r2
    23fc:	f040 81d9 	bne.w	27b2 <sysclk_disable_peripheral_clock+0x65a>
    2400:	e161      	b.n	26c6 <sysclk_disable_peripheral_clock+0x56e>
    2402:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    2406:	f2c4 010e 	movt	r1, #16398	; 0x400e
    240a:	4288      	cmp	r0, r1
    240c:	f000 816f 	beq.w	26ee <sysclk_disable_peripheral_clock+0x596>
    2410:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    2414:	f2c4 020e 	movt	r2, #16398	; 0x400e
    2418:	4290      	cmp	r0, r2
    241a:	f040 81ca 	bne.w	27b2 <sysclk_disable_peripheral_clock+0x65a>
    241e:	e170      	b.n	2702 <sysclk_disable_peripheral_clock+0x5aa>
    2420:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    2424:	f2c4 010f 	movt	r1, #16399	; 0x400f
    2428:	4288      	cmp	r0, r1
    242a:	f000 8191 	beq.w	2750 <sysclk_disable_peripheral_clock+0x5f8>
    242e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    2432:	f2c4 020f 	movt	r2, #16399	; 0x400f
    2436:	4290      	cmp	r0, r2
    2438:	d80e      	bhi.n	2458 <sysclk_disable_peripheral_clock+0x300>
    243a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    243e:	f2c4 030f 	movt	r3, #16399	; 0x400f
    2442:	4298      	cmp	r0, r3
    2444:	f000 8170 	beq.w	2728 <sysclk_disable_peripheral_clock+0x5d0>
    2448:	f44f 6100 	mov.w	r1, #2048	; 0x800
    244c:	f2c4 010f 	movt	r1, #16399	; 0x400f
    2450:	4288      	cmp	r0, r1
    2452:	f040 81ae 	bne.w	27b2 <sysclk_disable_peripheral_clock+0x65a>
    2456:	e171      	b.n	273c <sysclk_disable_peripheral_clock+0x5e4>
    2458:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    245c:	f2c4 010f 	movt	r1, #16399	; 0x400f
    2460:	4288      	cmp	r0, r1
    2462:	f000 817f 	beq.w	2764 <sysclk_disable_peripheral_clock+0x60c>
    2466:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
    246a:	f2c4 020f 	movt	r2, #16399	; 0x400f
    246e:	4290      	cmp	r0, r2
    2470:	f040 819f 	bne.w	27b2 <sysclk_disable_peripheral_clock+0x65a>
    2474:	e180      	b.n	2778 <sysclk_disable_peripheral_clock+0x620>
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
    2476:	f04f 0001 	mov.w	r0, #1
    247a:	f04f 0109 	mov.w	r1, #9
    247e:	f241 5295 	movw	r2, #5525	; 0x1595
    2482:	f2c0 0200 	movt	r2, #0
    2486:	4790      	blx	r2
    2488:	e17e      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>
	case AESA_ADDR:
		sysclk_disable_hsb_module(SYSCLK_AESA_HSB);
		break;

	case IISC_ADDR:
		sysclk_disable_pba_module(SYSCLK_IISC);
    248a:	f04f 0000 	mov.w	r0, #0
    248e:	f241 6261 	movw	r2, #5729	; 0x1661
    2492:	f2c0 0200 	movt	r2, #0
    2496:	4790      	blx	r2
		break;
    2498:	e176      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>

	case SPI_ADDR:
		sysclk_disable_pba_module(SYSCLK_SPI);
    249a:	f04f 0001 	mov.w	r0, #1
    249e:	f241 6161 	movw	r1, #5729	; 0x1661
    24a2:	f2c0 0100 	movt	r1, #0
    24a6:	4788      	blx	r1
		break;
    24a8:	e16e      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>

	case TC0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TC0);
    24aa:	f04f 0002 	mov.w	r0, #2
    24ae:	f241 6361 	movw	r3, #5729	; 0x1661
    24b2:	f2c0 0300 	movt	r3, #0
    24b6:	4798      	blx	r3
		break;
    24b8:	e166      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>

	case TC1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TC1);
    24ba:	f04f 0003 	mov.w	r0, #3
    24be:	f241 6261 	movw	r2, #5729	; 0x1661
    24c2:	f2c0 0200 	movt	r2, #0
    24c6:	4790      	blx	r2
		break;
    24c8:	e15e      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>

	case TWIM0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM0);
    24ca:	f04f 0004 	mov.w	r0, #4
    24ce:	f241 6261 	movw	r2, #5729	; 0x1661
    24d2:	f2c0 0200 	movt	r2, #0
    24d6:	4790      	blx	r2
		break;
    24d8:	e156      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>

	case TWIS0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIS0);
    24da:	f04f 0005 	mov.w	r0, #5
    24de:	f241 6261 	movw	r2, #5729	; 0x1661
    24e2:	f2c0 0200 	movt	r2, #0
    24e6:	4790      	blx	r2
		break;
    24e8:	e14e      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>

	case TWIM1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM1);
    24ea:	f04f 0006 	mov.w	r0, #6
    24ee:	f241 6161 	movw	r1, #5729	; 0x1661
    24f2:	f2c0 0100 	movt	r1, #0
    24f6:	4788      	blx	r1
		break;
    24f8:	e146      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>

	case TWIS1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIS1);
    24fa:	f04f 0007 	mov.w	r0, #7
    24fe:	f241 6361 	movw	r3, #5729	; 0x1661
    2502:	f2c0 0300 	movt	r3, #0
    2506:	4798      	blx	r3
		break;
    2508:	e13e      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>

	case USART0_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART0);
    250a:	f04f 0008 	mov.w	r0, #8
    250e:	f241 6261 	movw	r2, #5729	; 0x1661
    2512:	f2c0 0200 	movt	r2, #0
    2516:	4790      	blx	r2
		break;
    2518:	e136      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>

	case USART1_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART1);
    251a:	f04f 0009 	mov.w	r0, #9
    251e:	f241 6261 	movw	r2, #5729	; 0x1661
    2522:	f2c0 0200 	movt	r2, #0
    2526:	4790      	blx	r2
		break;
    2528:	e12e      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>

	case USART2_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART2);
    252a:	f04f 000a 	mov.w	r0, #10
    252e:	f241 6261 	movw	r2, #5729	; 0x1661
    2532:	f2c0 0200 	movt	r2, #0
    2536:	4790      	blx	r2
		break;
    2538:	e126      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>

	case USART3_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART3);
    253a:	f04f 000b 	mov.w	r0, #11
    253e:	f241 6161 	movw	r1, #5729	; 0x1661
    2542:	f2c0 0100 	movt	r1, #0
    2546:	4788      	blx	r1
		break;
    2548:	e11e      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>

	case ADCIFE_ADDR:
		sysclk_disable_pba_module(SYSCLK_ADCIFE);
    254a:	f04f 000c 	mov.w	r0, #12
    254e:	f241 6361 	movw	r3, #5729	; 0x1661
    2552:	f2c0 0300 	movt	r3, #0
    2556:	4798      	blx	r3
		break;
    2558:	e116      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>

	case DACC_ADDR:
		sysclk_disable_pba_module(SYSCLK_DACC);
    255a:	f04f 000d 	mov.w	r0, #13
    255e:	f241 6261 	movw	r2, #5729	; 0x1661
    2562:	f2c0 0200 	movt	r2, #0
    2566:	4790      	blx	r2
		break;
    2568:	e10e      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>

	case ACIFC_ADDR:
		sysclk_disable_pba_module(SYSCLK_ACIFC);
    256a:	f04f 000e 	mov.w	r0, #14
    256e:	f241 6161 	movw	r1, #5729	; 0x1661
    2572:	f2c0 0100 	movt	r1, #0
    2576:	4788      	blx	r1
		break;
    2578:	e106      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>

	case GLOC_ADDR:
		sysclk_disable_pba_module(SYSCLK_GLOC);
    257a:	f04f 000f 	mov.w	r0, #15
    257e:	f241 6161 	movw	r1, #5729	; 0x1661
    2582:	f2c0 0100 	movt	r1, #0
    2586:	4788      	blx	r1
		break;
    2588:	e0fe      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>

	case ABDACB_ADDR:
		sysclk_disable_pba_module(SYSCLK_ABDACB);
    258a:	f04f 0010 	mov.w	r0, #16
    258e:	f241 6361 	movw	r3, #5729	; 0x1661
    2592:	f2c0 0300 	movt	r3, #0
    2596:	4798      	blx	r3
		break;
    2598:	e0f6      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>

	case TRNG_ADDR:
		sysclk_disable_pba_module(SYSCLK_TRNG);
    259a:	f04f 0011 	mov.w	r0, #17
    259e:	f241 6361 	movw	r3, #5729	; 0x1661
    25a2:	f2c0 0300 	movt	r3, #0
    25a6:	4798      	blx	r3
		break;
    25a8:	e0ee      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>

	case PARC_ADDR:
		sysclk_disable_pba_module(SYSCLK_PARC);
    25aa:	f04f 0012 	mov.w	r0, #18
    25ae:	f241 6261 	movw	r2, #5729	; 0x1661
    25b2:	f2c0 0200 	movt	r2, #0
    25b6:	4790      	blx	r2
		break;
    25b8:	e0e6      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>

	case CATB_ADDR:
		sysclk_disable_pba_module(SYSCLK_CATB);
    25ba:	f04f 0013 	mov.w	r0, #19
    25be:	f241 6161 	movw	r1, #5729	; 0x1661
    25c2:	f2c0 0100 	movt	r1, #0
    25c6:	4788      	blx	r1
		break;
    25c8:	e0de      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>

	case TWIM2_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM2);
    25ca:	f04f 0015 	mov.w	r0, #21
    25ce:	f241 6161 	movw	r1, #5729	; 0x1661
    25d2:	f2c0 0100 	movt	r1, #0
    25d6:	4788      	blx	r1
		break;
    25d8:	e0d6      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>

	case TWIM3_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM3);
    25da:	f04f 0016 	mov.w	r0, #22
    25de:	f241 6161 	movw	r1, #5729	; 0x1661
    25e2:	f2c0 0100 	movt	r1, #0
    25e6:	4788      	blx	r1
		break;
    25e8:	e0ce      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>

	case LCDCA_ADDR:
		sysclk_disable_pba_module(SYSCLK_LCDCA);
    25ea:	f04f 0017 	mov.w	r0, #23
    25ee:	f241 6261 	movw	r2, #5729	; 0x1661
    25f2:	f2c0 0200 	movt	r2, #0
    25f6:	4790      	blx	r2
		break;
    25f8:	e0c6      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>

	case HFLASHC_ADDR:
		sysclk_disable_pbb_module(SYSCLK_HFLASHC_REGS);
    25fa:	f04f 0000 	mov.w	r0, #0
    25fe:	f241 7321 	movw	r3, #5921	; 0x1721
    2602:	f2c0 0300 	movt	r3, #0
    2606:	4798      	blx	r3
		break;
    2608:	e0be      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>
    260a:	f04f 0001 	mov.w	r0, #1
    260e:	f04f 0102 	mov.w	r1, #2
    2612:	f241 5295 	movw	r2, #5525	; 0x1595
    2616:	f2c0 0200 	movt	r2, #0
    261a:	4790      	blx	r2

	case HCACHE_ADDR:
		sysclk_disable_hsb_module(SYSCLK_HRAMC1_DATA);
		sysclk_disable_pbb_module(SYSCLK_HRAMC1_REGS);
    261c:	f04f 0001 	mov.w	r0, #1
    2620:	f241 7121 	movw	r1, #5921	; 0x1721
    2624:	f2c0 0100 	movt	r1, #0
    2628:	4788      	blx	r1
		break;
    262a:	e0ad      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>

	case HMATRIX_ADDR:
		sysclk_disable_pbb_module(SYSCLK_HMATRIX);
    262c:	f04f 0002 	mov.w	r0, #2
    2630:	f241 7121 	movw	r1, #5921	; 0x1721
    2634:	f2c0 0100 	movt	r1, #0
    2638:	4788      	blx	r1
		break;
    263a:	e0a5      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>
    263c:	f04f 0001 	mov.w	r0, #1
    2640:	f04f 0100 	mov.w	r1, #0
    2644:	f241 5395 	movw	r3, #5525	; 0x1595
    2648:	f2c0 0300 	movt	r3, #0
    264c:	4798      	blx	r3

	case PDCA_ADDR:
		sysclk_disable_hsb_module(SYSCLK_PDCA_HSB);
		sysclk_disable_pbb_module(SYSCLK_PDCA_PB);
    264e:	f04f 0003 	mov.w	r0, #3
    2652:	f241 7121 	movw	r1, #5921	; 0x1721
    2656:	f2c0 0100 	movt	r1, #0
    265a:	4788      	blx	r1
		break;
    265c:	e094      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>
    265e:	f04f 0001 	mov.w	r0, #1
    2662:	f04f 0104 	mov.w	r1, #4
    2666:	f241 5395 	movw	r3, #5525	; 0x1595
    266a:	f2c0 0300 	movt	r3, #0
    266e:	4798      	blx	r3

	case CRCCU_ADDR:
		sysclk_disable_hsb_module(SYSCLK_CRCCU_DATA);
		sysclk_disable_pbb_module(SYSCLK_CRCCU_REGS);
    2670:	f04f 0004 	mov.w	r0, #4
    2674:	f241 7221 	movw	r2, #5921	; 0x1721
    2678:	f2c0 0200 	movt	r2, #0
    267c:	4790      	blx	r2
		break;
    267e:	e083      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>
    2680:	f04f 0001 	mov.w	r0, #1
    2684:	f04f 0103 	mov.w	r1, #3
    2688:	f241 5395 	movw	r3, #5525	; 0x1595
    268c:	f2c0 0300 	movt	r3, #0
    2690:	4798      	blx	r3

	case USBC_ADDR:
		sysclk_disable_hsb_module(SYSCLK_USBC_DATA);
		sysclk_disable_pbb_module(SYSCLK_USBC_REGS);
    2692:	f04f 0005 	mov.w	r0, #5
    2696:	f241 7221 	movw	r2, #5921	; 0x1721
    269a:	f2c0 0200 	movt	r2, #0
    269e:	4790      	blx	r2
		break;
    26a0:	e072      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>

	case PEVC_ADDR:
		sysclk_disable_pbb_module(SYSCLK_PEVC);
    26a2:	f04f 0006 	mov.w	r0, #6
    26a6:	f241 7121 	movw	r1, #5921	; 0x1721
    26aa:	f2c0 0100 	movt	r1, #0
    26ae:	4788      	blx	r1
		break;
    26b0:	e06a      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>
 * \brief Disable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_disable_pbc_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_PBC, module_index);
    26b2:	f04f 0004 	mov.w	r0, #4
    26b6:	f04f 0100 	mov.w	r1, #0
    26ba:	f241 5395 	movw	r3, #5525	; 0x1595
    26be:	f2c0 0300 	movt	r3, #0
    26c2:	4798      	blx	r3
    26c4:	e060      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>
    26c6:	f04f 0004 	mov.w	r0, #4
    26ca:	f04f 0101 	mov.w	r1, #1
    26ce:	f241 5395 	movw	r3, #5525	; 0x1595
    26d2:	f2c0 0300 	movt	r3, #0
    26d6:	4798      	blx	r3
    26d8:	e056      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>
    26da:	f04f 0004 	mov.w	r0, #4
    26de:	f04f 0102 	mov.w	r1, #2
    26e2:	f241 5395 	movw	r3, #5525	; 0x1595
    26e6:	f2c0 0300 	movt	r3, #0
    26ea:	4798      	blx	r3
    26ec:	e04c      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>
    26ee:	f04f 0004 	mov.w	r0, #4
    26f2:	f04f 0103 	mov.w	r1, #3
    26f6:	f241 5295 	movw	r2, #5525	; 0x1595
    26fa:	f2c0 0200 	movt	r2, #0
    26fe:	4790      	blx	r2
    2700:	e042      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>
    2702:	f04f 0004 	mov.w	r0, #4
    2706:	4601      	mov	r1, r0
    2708:	f241 5395 	movw	r3, #5525	; 0x1595
    270c:	f2c0 0300 	movt	r3, #0
    2710:	4798      	blx	r3
    2712:	e039      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>
 * \brief Disable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_disable_pbd_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_PBD, module_index);
    2714:	f04f 0005 	mov.w	r0, #5
    2718:	f04f 0100 	mov.w	r1, #0
    271c:	f241 5295 	movw	r2, #5525	; 0x1595
    2720:	f2c0 0200 	movt	r2, #0
    2724:	4790      	blx	r2
    2726:	e02f      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>
    2728:	f04f 0005 	mov.w	r0, #5
    272c:	f04f 0101 	mov.w	r1, #1
    2730:	f241 5395 	movw	r3, #5525	; 0x1595
    2734:	f2c0 0300 	movt	r3, #0
    2738:	4798      	blx	r3
    273a:	e025      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>
    273c:	f04f 0005 	mov.w	r0, #5
    2740:	f04f 0102 	mov.w	r1, #2
    2744:	f241 5295 	movw	r2, #5525	; 0x1595
    2748:	f2c0 0200 	movt	r2, #0
    274c:	4790      	blx	r2
    274e:	e01b      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>
    2750:	f04f 0005 	mov.w	r0, #5
    2754:	f04f 0103 	mov.w	r1, #3
    2758:	f241 5395 	movw	r3, #5525	; 0x1595
    275c:	f2c0 0300 	movt	r3, #0
    2760:	4798      	blx	r3
    2762:	e011      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>
    2764:	f04f 0005 	mov.w	r0, #5
    2768:	f04f 0104 	mov.w	r1, #4
    276c:	f241 5295 	movw	r2, #5525	; 0x1595
    2770:	f2c0 0200 	movt	r2, #0
    2774:	4790      	blx	r2
    2776:	e007      	b.n	2788 <sysclk_disable_peripheral_clock+0x630>
    2778:	f04f 0005 	mov.w	r0, #5
    277c:	4601      	mov	r1, r0
    277e:	f241 5395 	movw	r3, #5525	; 0x1595
    2782:	f2c0 0300 	movt	r3, #0
    2786:	4798      	blx	r3
	}

	// Disable PBA divided clock if possible.
#define PBADIV_CLKSRC_MASK (SYSCLK_TC0 | SYSCLK_TC1 \
		| SYSCLK_USART0 | SYSCLK_USART1 | SYSCLK_USART2 | SYSCLK_USART3)
	if ((PM->PM_PBAMASK & PBADIV_CLKSRC_MASK) == 0) {
    2788:	f04f 0000 	mov.w	r0, #0
    278c:	f2c4 000e 	movt	r0, #16398	; 0x400e
    2790:	6a82      	ldr	r2, [r0, #40]	; 0x28
    2792:	f012 0f0b 	tst.w	r2, #11
    2796:	d10c      	bne.n	27b2 <sysclk_disable_peripheral_clock+0x65a>
 */
static inline void sysclk_disable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    2798:	f04f 0300 	mov.w	r3, #0
    279c:	f2c4 030e 	movt	r3, #16398	; 0x400e
    27a0:	6c19      	ldr	r1, [r3, #64]	; 0x40
	temp_mask &= ~mask;
    27a2:	f021 007f 	bic.w	r0, r1, #127	; 0x7f
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    27a6:	f04f 0240 	mov.w	r2, #64	; 0x40
    27aa:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    27ae:	659a      	str	r2, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    27b0:	6418      	str	r0, [r3, #64]	; 0x40
    27b2:	bd08      	pop	{r3, pc}

000027b4 <sysclk_set_source>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    27b4:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    27b8:	b672      	cpsid	i
    27ba:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    27be:	f240 0338 	movw	r3, #56	; 0x38
    27c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27c6:	f04f 0100 	mov.w	r1, #0
    27ca:	7019      	strb	r1, [r3, #0]
{
	irqflags_t flags;
	Assert(src <= SYSCLK_SRC_RC1M);

	flags = cpu_irq_save();
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    27cc:	460b      	mov	r3, r1
    27ce:	f2c4 030e 	movt	r3, #16398	; 0x400e
    27d2:	f04f 412a 	mov.w	r1, #2852126720	; 0xaa000000
    27d6:	6599      	str	r1, [r3, #88]	; 0x58
		| PM_UNLOCK_ADDR((uint32_t)&PM->PM_MCCTRL - (uint32_t)PM);
	PM->PM_MCCTRL = src;
    27d8:	6018      	str	r0, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    27da:	b94a      	cbnz	r2, 27f0 <sysclk_set_source+0x3c>
		cpu_irq_enable();
    27dc:	f240 0038 	movw	r0, #56	; 0x38
    27e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    27e4:	f04f 0201 	mov.w	r2, #1
    27e8:	7002      	strb	r2, [r0, #0]
    27ea:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    27ee:	b662      	cpsie	i
    27f0:	4770      	bx	lr
    27f2:	bf00      	nop

000027f4 <sysclk_init>:
   genclk_disable(7);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
    27f4:	b538      	push	{r3, r4, r5, lr}
	uint32_t ps_value = 0;
	bool is_fwu_enabled = false;

#if CONFIG_HCACHE_ENABLE == 1
	/* Enable HCACHE */
	sysclk_enable_peripheral_clock(HCACHE);
    27f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
    27fa:	f2c4 040a 	movt	r4, #16394	; 0x400a
    27fe:	4620      	mov	r0, r4
    2800:	f641 2379 	movw	r3, #6777	; 0x1a79
    2804:	f2c0 0300 	movt	r3, #0
    2808:	4798      	blx	r3
	HCACHE->HCACHE_CTRL = HCACHE_CTRL_CEN_YES;
    280a:	f04f 0001 	mov.w	r0, #1
    280e:	60a0      	str	r0, [r4, #8]
	while (!(HCACHE->HCACHE_SR & HCACHE_SR_CSTS_EN));
    2810:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2814:	f2c4 020a 	movt	r2, #16394	; 0x400a
    2818:	68d1      	ldr	r1, [r2, #12]
    281a:	f011 0f01 	tst.w	r1, #1
    281e:	d0fb      	beq.n	2818 <sysclk_init+0x24>
		sysclk_set_source(SYSCLK_SRC_OSC0);
	}
#endif
#ifdef CONFIG_DFLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_DFLL) {
		dfll_enable_config_defaults(0);
    2820:	f04f 0000 	mov.w	r0, #0
    2824:	f241 4519 	movw	r5, #5145	; 0x1419
    2828:	f2c0 0500 	movt	r5, #0
    282c:	47a8      	blx	r5
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz(), ps_value, is_fwu_enabled);
    282e:	f04f 7037 	mov.w	r0, #47972352	; 0x2dc0000
    2832:	f04f 0100 	mov.w	r1, #0
    2836:	460a      	mov	r2, r1
    2838:	f642 34c5 	movw	r4, #11205	; 0x2bc5
    283c:	f2c0 0400 	movt	r4, #0
    2840:	47a0      	blx	r4
		sysclk_set_source(SYSCLK_SRC_DFLL);
    2842:	f04f 0003 	mov.w	r0, #3
    2846:	f242 73b5 	movw	r3, #10165	; 0x27b5
    284a:	f2c0 0300 	movt	r3, #0
    284e:	4798      	blx	r3
	if (!no_halt) {
		bpm_power_scaling_cpu(bpm, ps_value);
		return true;
	}

	return bpm_power_scaling_cpu_failsafe(bpm, ps_value, 240000);
    2850:	f04f 0000 	mov.w	r0, #0
    2854:	f2c4 000f 	movt	r0, #16399	; 0x400f
    2858:	f04f 0100 	mov.w	r1, #0
    285c:	f64a 1280 	movw	r2, #43392	; 0xa980
    2860:	f2c0 0203 	movt	r2, #3
    2864:	f642 159d 	movw	r5, #10653	; 0x299d
    2868:	f2c0 0500 	movt	r5, #0
    286c:	47a8      	blx	r5
		Assert(false);
	}

	/* Automatically switch to low power mode */
	bpm_configure_power_scaling(BPM, ps_value, BPM_PSCM_CPU_NOT_HALT);
	while ((bpm_get_status(BPM) & BPM_SR_PSOK) == 0);
    286e:	f04f 0400 	mov.w	r4, #0
    2872:	f2c4 040f 	movt	r4, #16399	; 0x400f
    2876:	f642 2515 	movw	r5, #10773	; 0x2a15
    287a:	f2c0 0500 	movt	r5, #0
    287e:	4620      	mov	r0, r4
    2880:	47a8      	blx	r5
    2882:	f010 0f01 	tst.w	r0, #1
    2886:	d0fa      	beq.n	287e <sysclk_init+0x8a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2888:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    288c:	b672      	cpsid	i
    288e:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    2892:	f240 0238 	movw	r2, #56	; 0x38
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	f04f 0100 	mov.w	r1, #0
    289e:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    28a0:	b928      	cbnz	r0, 28ae <sysclk_init+0xba>
		cpu_irq_enable();
    28a2:	f04f 0001 	mov.w	r0, #1
    28a6:	7010      	strb	r0, [r2, #0]
    28a8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    28ac:	b662      	cpsie	i
    28ae:	bd38      	pop	{r3, r4, r5, pc}

000028b0 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_disable_pin(pin);\
	} while (0)

void board_init(void)
{
    28b0:	b500      	push	{lr}
    28b2:	b087      	sub	sp, #28
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	struct wdt_dev_inst wdt_inst;
	struct wdt_config   wdt_cfg;

	wdt_get_config_defaults(&wdt_cfg);
    28b4:	4668      	mov	r0, sp
    28b6:	f642 43f1 	movw	r3, #11505	; 0x2cf1
    28ba:	f2c0 0300 	movt	r3, #0
    28be:	4798      	blx	r3
	wdt_init(&wdt_inst, WDT, &wdt_cfg);
    28c0:	a804      	add	r0, sp, #16
    28c2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    28c6:	f2c4 010f 	movt	r1, #16399	; 0x400f
    28ca:	466a      	mov	r2, sp
    28cc:	f642 530d 	movw	r3, #11533	; 0x2d0d
    28d0:	f2c0 0300 	movt	r3, #0
    28d4:	4798      	blx	r3
	wdt_disable(&wdt_inst);
    28d6:	a804      	add	r0, sp, #16
    28d8:	f642 51d9 	movw	r1, #11737	; 0x2dd9
    28dc:	f2c0 0100 	movt	r1, #0
    28e0:	4788      	blx	r1
	return 1U << (pin & 0x1F);
}

__always_inline static void arch_ioport_init(void)
{
	sysclk_enable_peripheral_clock(GPIO);
    28e2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    28e6:	f2c4 000e 	movt	r0, #16398	; 0x400e
    28ea:	f641 2279 	movw	r2, #6777	; 0x1a79
    28ee:	f2c0 0200 	movt	r2, #0
    28f2:	4790      	blx	r2

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    28f4:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
    28f8:	f2c4 000e 	movt	r0, #16398	; 0x400e
    28fc:	f04f 0380 	mov.w	r3, #128	; 0x80
    2900:	6443      	str	r3, [r0, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    2902:	f8c0 3168 	str.w	r3, [r0, #360]	; 0x168

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    2906:	6543      	str	r3, [r0, #84]	; 0x54
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    2908:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    290c:	6481      	str	r1, [r0, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    290e:	f8c0 1164 	str.w	r1, [r0, #356]	; 0x164
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
    2912:	6741      	str	r1, [r0, #116]	; 0x74

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    2914:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    2918:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    291c:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    2920:	6181      	str	r1, [r0, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    2922:	6281      	str	r1, [r0, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    2924:	6381      	str	r1, [r0, #56]	; 0x38
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    2926:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    292a:	6782      	str	r2, [r0, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    292c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    2930:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    2934:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    2938:	6182      	str	r2, [r0, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    293a:	6282      	str	r2, [r0, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    293c:	6382      	str	r2, [r0, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    293e:	6082      	str	r2, [r0, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    2940:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    2944:	6783      	str	r3, [r0, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    2946:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    294a:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    294e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    2952:	6183      	str	r3, [r0, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    2954:	6283      	str	r3, [r0, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    2956:	6383      	str	r3, [r0, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    2958:	6083      	str	r3, [r0, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    295a:	f44f 5090 	mov.w	r0, #4608	; 0x1200
    295e:	f2c4 000e 	movt	r0, #16398	; 0x400e
    2962:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    2966:	6781      	str	r1, [r0, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    2968:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    296c:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    2970:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    2974:	6181      	str	r1, [r0, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
    2976:	6241      	str	r1, [r0, #36]	; 0x24

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    2978:	6381      	str	r1, [r0, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    297a:	6081      	str	r1, [r0, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    297c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2980:	6782      	str	r2, [r0, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    2982:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    2986:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    298a:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    298e:	6182      	str	r2, [r0, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
    2990:	6242      	str	r2, [r0, #36]	; 0x24

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    2992:	6382      	str	r2, [r0, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    2994:	6082      	str	r2, [r0, #8]
	ioport_set_pin_peripheral_mode(PIN_PA15D_PARC_PCDATA6, MUX_PA15D_PARC_PCDATA6);
	ioport_set_pin_peripheral_mode(PIN_PA16D_PARC_PCDATA7, MUX_PA16D_PARC_PCDATA7);
	ioport_set_pin_peripheral_mode(PIN_PA18D_PARC_PCEN1, MUX_PA18D_PARC_PCEN1);
	ioport_set_pin_peripheral_mode(PIN_PA19D_PARC_PCEN2, MUX_PA19D_PARC_PCEN2);
#endif
}
    2996:	b007      	add	sp, #28
    2998:	bd00      	pop	{pc}
    299a:	bf00      	nop

0000299c <bpm_power_scaling_cpu_failsafe>:
}


bool bpm_power_scaling_cpu_failsafe(Bpm *bpm, uint32_t ps_value,
	uint32_t timeout)
{
    299c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t pmcon = 0;

	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;
    29a0:	69c4      	ldr	r4, [r0, #28]

	/* Clear last PS Value & Write new one */
	pmcon &= ~BPM_PMCON_PS_Msk;
    29a2:	f024 0503 	bic.w	r5, r4, #3
	pmcon |= BPM_PMCON_PS(ps_value);
    29a6:	f045 030c 	orr.w	r3, r5, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    29aa:	f3ef 8610 	mrs	r6, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    29ae:	b672      	cpsid	i
    29b0:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    29b4:	f04f 0500 	mov.w	r5, #0
    29b8:	f240 0738 	movw	r7, #56	; 0x38
    29bc:	f2c2 0700 	movt	r7, #8192	; 0x2000
    29c0:	703d      	strb	r5, [r7, #0]
	uint32_t ctrl, load, val;
	/* Avoid interrupt while flash halt */
	flags = cpu_irq_save();

	/* Save SysTick */
	val = SysTick->VAL;
    29c2:	f24e 0410 	movw	r4, #57360	; 0xe010
    29c6:	f2ce 0400 	movt	r4, #57344	; 0xe000
    29ca:	f8d4 8008 	ldr.w	r8, [r4, #8]
	ctrl = SysTick->CTRL;
    29ce:	6827      	ldr	r7, [r4, #0]
	load = SysTick->LOAD;
    29d0:	f8d4 9004 	ldr.w	r9, [r4, #4]
	/* Setup SysTick & start counting */
	SysTick->LOAD = timeout;
    29d4:	6062      	str	r2, [r4, #4]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    29d6:	f04f 0205 	mov.w	r2, #5
    29da:	6022      	str	r2, [r4, #0]
	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;

	/* Clear last PS Value & Write new one */
	pmcon &= ~BPM_PMCON_PS_Msk;
	pmcon |= BPM_PMCON_PS(ps_value);
    29dc:	f001 0103 	and.w	r1, r1, #3
	load = SysTick->LOAD;
	/* Setup SysTick & start counting */
	SysTick->LOAD = timeout;
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;

	b_psok = bpm_ps_no_halt_exec(bpm, pmcon);
    29e0:	4319      	orrs	r1, r3
    29e2:	f240 0301 	movw	r3, #1
    29e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    29ea:	4798      	blx	r3

	/* Restore SysTick */
	SysTick->CTRL = 0;
    29ec:	6025      	str	r5, [r4, #0]
	SysTick->LOAD = load;
    29ee:	f8c4 9004 	str.w	r9, [r4, #4]
	SysTick->VAL = val;
    29f2:	f8c4 8008 	str.w	r8, [r4, #8]
	SysTick->CTRL = ctrl;
    29f6:	6027      	str	r7, [r4, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    29f8:	b94e      	cbnz	r6, 2a0e <bpm_power_scaling_cpu_failsafe+0x72>
		cpu_irq_enable();
    29fa:	f240 0138 	movw	r1, #56	; 0x38
    29fe:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2a02:	f04f 0201 	mov.w	r2, #1
    2a06:	700a      	strb	r2, [r1, #0]
    2a08:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    2a0c:	b662      	cpsie	i

	cpu_irq_restore(flags);
	return b_psok;
}
    2a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2a12:	bf00      	nop

00002a14 <bpm_get_status>:
	bpm->BPM_ICR = sources;
}

uint32_t bpm_get_status(Bpm *bpm)
{
	return bpm->BPM_SR;
    2a14:	6940      	ldr	r0, [r0, #20]
}
    2a16:	4770      	bx	lr

00002a18 <bpm_sleep>:
{
	return bpm->BPM_VERSION;
}

void bpm_sleep(Bpm *bpm, uint32_t sleep_mode)
{
    2a18:	b410      	push	{r4}
	uint32_t pmcon;

	/* Read PMCON register */
	pmcon = bpm->BPM_PMCON;
    2a1a:	69c3      	ldr	r3, [r0, #28]
	pmcon &= ~BPM_PMCON_BKUP;
	pmcon &= ~BPM_PMCON_RET;
	pmcon &= ~BPM_PMCON_SLEEP_Msk;
    2a1c:	f423 544c 	bic.w	r4, r3, #13056	; 0x3300

	/* Unlock PMCON register */
	BPM_UNLOCK(PMCON);
    2a20:	f04f 0300 	mov.w	r3, #0
    2a24:	f2c4 030f 	movt	r3, #16399	; 0x400f
    2a28:	f04f 021c 	mov.w	r2, #28
    2a2c:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    2a30:	619a      	str	r2, [r3, #24]

	if (sleep_mode == BPM_SM_SLEEP_0) {
    2a32:	2901      	cmp	r1, #1
    2a34:	d109      	bne.n	2a4a <bpm_sleep+0x32>
		pmcon |= BPM_PMCON_SLEEP(0);
		bpm->BPM_PMCON = pmcon;
    2a36:	61c4      	str	r4, [r0, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    2a38:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2a3c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2a40:	6918      	ldr	r0, [r3, #16]
    2a42:	f020 0104 	bic.w	r1, r0, #4
    2a46:	6119      	str	r1, [r3, #16]
    2a48:	e050      	b.n	2aec <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_SLEEP_1) {
    2a4a:	2902      	cmp	r1, #2
    2a4c:	d10b      	bne.n	2a66 <bpm_sleep+0x4e>
		pmcon |= BPM_PMCON_SLEEP(1);
    2a4e:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
		bpm->BPM_PMCON = pmcon;
    2a52:	61c4      	str	r4, [r0, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    2a54:	f44f 406d 	mov.w	r0, #60672	; 0xed00
    2a58:	f2ce 0000 	movt	r0, #57344	; 0xe000
    2a5c:	6901      	ldr	r1, [r0, #16]
    2a5e:	f021 0204 	bic.w	r2, r1, #4
    2a62:	6102      	str	r2, [r0, #16]
    2a64:	e042      	b.n	2aec <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_SLEEP_2) {
    2a66:	2903      	cmp	r1, #3
    2a68:	d10b      	bne.n	2a82 <bpm_sleep+0x6a>
		pmcon |= BPM_PMCON_SLEEP(2);
    2a6a:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
		bpm->BPM_PMCON = pmcon;
    2a6e:	61c4      	str	r4, [r0, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    2a70:	f44f 416d 	mov.w	r1, #60672	; 0xed00
    2a74:	f2ce 0100 	movt	r1, #57344	; 0xe000
    2a78:	690a      	ldr	r2, [r1, #16]
    2a7a:	f022 0304 	bic.w	r3, r2, #4
    2a7e:	610b      	str	r3, [r1, #16]
    2a80:	e034      	b.n	2aec <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_SLEEP_3) {
    2a82:	2904      	cmp	r1, #4
    2a84:	d10b      	bne.n	2a9e <bpm_sleep+0x86>
		pmcon |= BPM_PMCON_SLEEP(3);
    2a86:	f444 5440 	orr.w	r4, r4, #12288	; 0x3000
		bpm->BPM_PMCON = pmcon;
    2a8a:	61c4      	str	r4, [r0, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    2a8c:	f44f 416d 	mov.w	r1, #60672	; 0xed00
    2a90:	f2ce 0100 	movt	r1, #57344	; 0xe000
    2a94:	690b      	ldr	r3, [r1, #16]
    2a96:	f023 0004 	bic.w	r0, r3, #4
    2a9a:	6108      	str	r0, [r1, #16]
    2a9c:	e026      	b.n	2aec <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_WAIT) {
    2a9e:	2905      	cmp	r1, #5
    2aa0:	d109      	bne.n	2ab6 <bpm_sleep+0x9e>
		bpm->BPM_PMCON = pmcon;
    2aa2:	61c4      	str	r4, [r0, #28]
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    2aa4:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2aa8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2aac:	6918      	ldr	r0, [r3, #16]
    2aae:	f040 0204 	orr.w	r2, r0, #4
    2ab2:	611a      	str	r2, [r3, #16]
    2ab4:	e01a      	b.n	2aec <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_RET) {
    2ab6:	2906      	cmp	r1, #6
    2ab8:	d10b      	bne.n	2ad2 <bpm_sleep+0xba>
		pmcon |= BPM_PMCON_RET;
    2aba:	f444 7400 	orr.w	r4, r4, #512	; 0x200
		bpm->BPM_PMCON = pmcon;
    2abe:	61c4      	str	r4, [r0, #28]
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    2ac0:	f44f 406d 	mov.w	r0, #60672	; 0xed00
    2ac4:	f2ce 0000 	movt	r0, #57344	; 0xe000
    2ac8:	6902      	ldr	r2, [r0, #16]
    2aca:	f042 0104 	orr.w	r1, r2, #4
    2ace:	6101      	str	r1, [r0, #16]
    2ad0:	e00c      	b.n	2aec <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_BACKUP) { 
    2ad2:	2907      	cmp	r1, #7
    2ad4:	d11e      	bne.n	2b14 <bpm_sleep+0xfc>
		pmcon |= BPM_PMCON_BKUP;
    2ad6:	f444 7480 	orr.w	r4, r4, #256	; 0x100
		bpm->BPM_PMCON = pmcon;
    2ada:	61c4      	str	r4, [r0, #28]
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    2adc:	f44f 406d 	mov.w	r0, #60672	; 0xed00
    2ae0:	f2ce 0000 	movt	r0, #57344	; 0xe000
    2ae4:	6901      	ldr	r1, [r0, #16]
    2ae6:	f041 0304 	orr.w	r3, r1, #4
    2aea:	6103      	str	r3, [r0, #16]
	} else {
		return;
	}

	/* Wait until vreg is ok. */
	while(!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_VREGOK));
    2aec:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2af0:	f2c4 020f 	movt	r2, #16399	; 0x400f
    2af4:	6953      	ldr	r3, [r2, #20]
    2af6:	f413 6f80 	tst.w	r3, #1024	; 0x400
    2afa:	d0fb      	beq.n	2af4 <bpm_sleep+0xdc>
	asm volatile ("wfi");
    2afc:	bf30      	wfi
	/* ensure sleep request propagation to flash. */
	asm volatile ("nop");
    2afe:	bf00      	nop
	 * masked since we are in the critical section thanks to the previous
	 * set_pri_mask(1). Thus, we need to leave the critical section.
	 * Please note that we should probably use something like
	 * cpu_leave_critical(), using set_pri_mask(0)
	 */
	cpu_irq_enable();
    2b00:	f240 0038 	movw	r0, #56	; 0x38
    2b04:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2b08:	f04f 0101 	mov.w	r1, #1
    2b0c:	7001      	strb	r1, [r0, #0]
    2b0e:	f3bf 8f5f 	dmb	sy
    2b12:	b662      	cpsie	i
}
    2b14:	bc10      	pop	{r4}
    2b16:	4770      	bx	lr

00002b18 <flashcalw_set_wait_state>:
 * \param wait_state The number of wait states of flash read accesses: \c 0 to
 *                   \c 1.
 */
void flashcalw_set_wait_state(uint32_t wait_state)
{
	HFLASHC->FLASHCALW_FCR = (HFLASHC->FLASHCALW_FCR & ~FLASHCALW_FCR_FWS)
    2b18:	f04f 0300 	mov.w	r3, #0
    2b1c:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2b20:	6819      	ldr	r1, [r3, #0]
    2b22:	f021 0240 	bic.w	r2, r1, #64	; 0x40
			| (wait_state ? FLASHCALW_FCR_FWS_1 :
    2b26:	2800      	cmp	r0, #0
    2b28:	bf14      	ite	ne
    2b2a:	2040      	movne	r0, #64	; 0x40
    2b2c:	2000      	moveq	r0, #0
    2b2e:	4310      	orrs	r0, r2
 * \param wait_state The number of wait states of flash read accesses: \c 0 to
 *                   \c 1.
 */
void flashcalw_set_wait_state(uint32_t wait_state)
{
	HFLASHC->FLASHCALW_FCR = (HFLASHC->FLASHCALW_FCR & ~FLASHCALW_FCR_FWS)
    2b30:	f04f 0300 	mov.w	r3, #0
    2b34:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2b38:	6018      	str	r0, [r3, #0]
    2b3a:	4770      	bx	lr

00002b3c <flashcalw_is_ready>:
 *
 * \return Whether the FLASHCALW is ready to run a new command.
 */
bool flashcalw_is_ready(void)
{
	return ((HFLASHC->FLASHCALW_FSR & FLASHCALW_FSR_FRDY) != 0);
    2b3c:	f04f 0300 	mov.w	r3, #0
    2b40:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2b44:	6898      	ldr	r0, [r3, #8]
}
    2b46:	f000 0001 	and.w	r0, r0, #1
    2b4a:	4770      	bx	lr

00002b4c <flashcalw_default_wait_until_ready>:
/*! \brief Waits actively until the FLASHCALW is ready to run a new command.
 *
 * This is the default function assigned to \ref flashcalw_wait_until_ready.
 */
void flashcalw_default_wait_until_ready(void)
{
    2b4c:	b510      	push	{r4, lr}
	while (!flashcalw_is_ready()) {
    2b4e:	f642 343d 	movw	r4, #11069	; 0x2b3d
    2b52:	f2c0 0400 	movt	r4, #0
    2b56:	47a0      	blx	r4
    2b58:	2800      	cmp	r0, #0
    2b5a:	d0fc      	beq.n	2b56 <flashcalw_default_wait_until_ready+0xa>
	}
}
    2b5c:	bd10      	pop	{r4, pc}
    2b5e:	bf00      	nop

00002b60 <flashcalw_issue_command>:
 *
 * \note The FLASHCALW error status returned by \ref flashcalw_is_lock_error and
 *       \ref flashcalw_is_programming_error is updated.
 */
void flashcalw_issue_command(uint32_t command, int page_number)
{
    2b60:	b538      	push	{r3, r4, r5, lr}
    2b62:	4605      	mov	r5, r0
    2b64:	460c      	mov	r4, r1
	uint32_t tempo;

	flashcalw_wait_until_ready();
    2b66:	f240 033c 	movw	r3, #60	; 0x3c
    2b6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b6e:	6818      	ldr	r0, [r3, #0]
    2b70:	4780      	blx	r0
	tempo = HFLASHC->FLASHCALW_FCMD;
    2b72:	f04f 0100 	mov.w	r1, #0
    2b76:	f2c4 010a 	movt	r1, #16394	; 0x400a
    2b7a:	684a      	ldr	r2, [r1, #4]
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
	if (page_number >= 0) {
    2b7c:	2c00      	cmp	r4, #0
    2b7e:	db07      	blt.n	2b90 <flashcalw_issue_command+0x30>
		tempo = (FLASHCALW_FCMD_KEY_KEY
				| FLASHCALW_FCMD_PAGEN(page_number) | command);
    2b80:	f045 4525 	orr.w	r5, r5, #2768240640	; 0xa5000000
    2b84:	ea4f 2404 	mov.w	r4, r4, lsl #8
    2b88:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	flashcalw_wait_until_ready();
	tempo = HFLASHC->FLASHCALW_FCMD;
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
	if (page_number >= 0) {
		tempo = (FLASHCALW_FCMD_KEY_KEY
    2b8c:	4325      	orrs	r5, r4
    2b8e:	e004      	b.n	2b9a <flashcalw_issue_command+0x3a>
	uint32_t tempo;

	flashcalw_wait_until_ready();
	tempo = HFLASHC->FLASHCALW_FCMD;
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
    2b90:	f022 033f 	bic.w	r3, r2, #63	; 0x3f
	if (page_number >= 0) {
		tempo = (FLASHCALW_FCMD_KEY_KEY
				| FLASHCALW_FCMD_PAGEN(page_number) | command);
	} else {
		tempo |= (FLASHCALW_FCMD_KEY_KEY | command);
    2b94:	f043 4025 	orr.w	r0, r3, #2768240640	; 0xa5000000
    2b98:	4305      	orrs	r5, r0
	}

	HFLASHC->FLASHCALW_FCMD = tempo;
    2b9a:	f04f 0100 	mov.w	r1, #0
    2b9e:	f2c4 010a 	movt	r1, #16394	; 0x400a
    2ba2:	604d      	str	r5, [r1, #4]
 *          the driver's API which instead presents \ref flashcalw_is_lock_error
 *          and \ref flashcalw_is_programming_error.
 */
static uint32_t flashcalw_get_error_status(void)
{
	return HFLASHC->FLASHCALW_FSR &
    2ba4:	688a      	ldr	r2, [r1, #8]
    2ba6:	f002 000c 	and.w	r0, r2, #12
	} else {
		tempo |= (FLASHCALW_FCMD_KEY_KEY | command);
	}

	HFLASHC->FLASHCALW_FCMD = tempo;
	flashcalw_error_status = flashcalw_get_error_status();
    2baa:	f640 138c 	movw	r3, #2444	; 0x98c
    2bae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bb2:	6018      	str	r0, [r3, #0]
	flashcalw_wait_until_ready();
    2bb4:	f240 013c 	movw	r1, #60	; 0x3c
    2bb8:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2bbc:	680a      	ldr	r2, [r1, #0]
    2bbe:	4790      	blx	r2
    2bc0:	bd38      	pop	{r3, r4, r5, pc}
    2bc2:	bf00      	nop

00002bc4 <flashcalw_set_flash_waitstate_and_readmode>:
 * \param ps_value Power Scaling mode value (0, 1)
 * \param is_fwu_enabled (boolean), Is fast wakeup mode enabled or not
 */
void flashcalw_set_flash_waitstate_and_readmode(uint32_t cpu_f_hz,
		uint32_t ps_value, bool is_fwu_enabled)
{
    2bc4:	b508      	push	{r3, lr}
	}

	/* Enable the high-speed read mode. */
	flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSEN, -1);
#else
	if (ps_value == 0) {
    2bc6:	2900      	cmp	r1, #0
    2bc8:	d156      	bne.n	2c78 <flashcalw_set_flash_waitstate_and_readmode+0xb4>
		if (cpu_f_hz > FLASH_FREQ_PS0_FWS_0_MAX_FREQ) {
    2bca:	f64a 0380 	movw	r3, #43136	; 0xa880
    2bce:	f2c0 1312 	movt	r3, #274	; 0x112
    2bd2:	4298      	cmp	r0, r3
    2bd4:	d927      	bls.n	2c26 <flashcalw_set_flash_waitstate_and_readmode+0x62>
			// > 18MHz
			if (cpu_f_hz <= FLASH_FREQ_PS0_FWS_1_MAX_FREQ) {
    2bd6:	f44f 43a2 	mov.w	r3, #20736	; 0x5100
    2bda:	f2c0 2325 	movt	r3, #549	; 0x225
    2bde:	4298      	cmp	r0, r3
    2be0:	d810      	bhi.n	2c04 <flashcalw_set_flash_waitstate_and_readmode+0x40>
				// <= 36MHz
				/* Set a wait-state, disable the high-speed read
				 * mode. */
				flashcalw_set_wait_state(1);
    2be2:	f04f 0001 	mov.w	r0, #1
    2be6:	f642 3319 	movw	r3, #11033	; 0x2b19
    2bea:	f2c0 0300 	movt	r3, #0
    2bee:	4798      	blx	r3
				flashcalw_issue_command(
    2bf0:	f04f 0011 	mov.w	r0, #17
    2bf4:	f04f 31ff 	mov.w	r1, #4294967295
    2bf8:	f642 3261 	movw	r2, #11105	; 0x2b61
    2bfc:	f2c0 0200 	movt	r2, #0
    2c00:	4790      	blx	r2
    2c02:	bd08      	pop	{r3, pc}
						FLASHCALW_FCMD_CMD_HSDIS, -1);
			} else {
				// > 36 MHz
				/* Set a wait-state, enable the high-speed read
				mode. */
				flashcalw_set_wait_state(1);
    2c04:	f04f 0001 	mov.w	r0, #1
    2c08:	f642 3119 	movw	r1, #11033	; 0x2b19
    2c0c:	f2c0 0100 	movt	r1, #0
    2c10:	4788      	blx	r1
				flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSEN,
    2c12:	f04f 0010 	mov.w	r0, #16
    2c16:	f04f 31ff 	mov.w	r1, #4294967295
    2c1a:	f642 3261 	movw	r2, #11105	; 0x2b61
    2c1e:	f2c0 0200 	movt	r2, #0
    2c22:	4790      	blx	r2
    2c24:	bd08      	pop	{r3, pc}
						-1);
			}
		} else { // <= 18MHz
			if((is_fwu_enabled == true) &&
    2c26:	b1b2      	cbz	r2, 2c56 <flashcalw_set_flash_waitstate_and_readmode+0x92>
    2c28:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
    2c2c:	f2c0 01b7 	movt	r1, #183	; 0xb7
    2c30:	4288      	cmp	r0, r1
    2c32:	d810      	bhi.n	2c56 <flashcalw_set_flash_waitstate_and_readmode+0x92>
				(cpu_f_hz <= FLASH_FREQ_PS1_FWS_1_FWU_MAX_FREQ))
			{
				// <= 12MHz
				/* Set a wait-state, disable the high-speed read
				mode. */
				flashcalw_set_wait_state(1);
    2c34:	f04f 0001 	mov.w	r0, #1
    2c38:	f642 3119 	movw	r1, #11033	; 0x2b19
    2c3c:	f2c0 0100 	movt	r1, #0
    2c40:	4788      	blx	r1
				flashcalw_issue_command(
    2c42:	f04f 0011 	mov.w	r0, #17
    2c46:	f04f 31ff 	mov.w	r1, #4294967295
    2c4a:	f642 3261 	movw	r2, #11105	; 0x2b61
    2c4e:	f2c0 0200 	movt	r2, #0
    2c52:	4790      	blx	r2
    2c54:	bd08      	pop	{r3, pc}
						FLASHCALW_FCMD_CMD_HSDIS, -1);
			} else {
				/* No wait-state, disable the high-speed read
				mode */
				flashcalw_set_wait_state(0);
    2c56:	f04f 0000 	mov.w	r0, #0
    2c5a:	f642 3219 	movw	r2, #11033	; 0x2b19
    2c5e:	f2c0 0200 	movt	r2, #0
    2c62:	4790      	blx	r2
				flashcalw_issue_command(
    2c64:	f04f 0011 	mov.w	r0, #17
    2c68:	f04f 31ff 	mov.w	r1, #4294967295
    2c6c:	f642 3361 	movw	r3, #11105	; 0x2b61
    2c70:	f2c0 0300 	movt	r3, #0
    2c74:	4798      	blx	r3
    2c76:	bd08      	pop	{r3, pc}
					FLASHCALW_FCMD_CMD_HSDIS, -1);
			}
		}
	} else { /* ps_value == 1 */
		if (cpu_f_hz > FLASH_FREQ_PS0_FWS_0_MAX_FREQ) { /* > 8MHz */
    2c78:	f64a 0380 	movw	r3, #43136	; 0xa880
    2c7c:	f2c0 1312 	movt	r3, #274	; 0x112
    2c80:	4298      	cmp	r0, r3
			/* Set a wait-state. */
			flashcalw_set_wait_state(1);
    2c82:	bf8c      	ite	hi
    2c84:	2001      	movhi	r0, #1
		} else {
			/* No wait-state. */
			flashcalw_set_wait_state(0);
    2c86:	2000      	movls	r0, #0
    2c88:	f642 3119 	movw	r1, #11033	; 0x2b19
    2c8c:	f2c0 0100 	movt	r1, #0
    2c90:	4788      	blx	r1
		}

		/* Disable the high-speed read mode. */
		flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSDIS, -1);
    2c92:	f04f 0011 	mov.w	r0, #17
    2c96:	f04f 31ff 	mov.w	r1, #4294967295
    2c9a:	f642 3261 	movw	r2, #11105	; 0x2b61
    2c9e:	f2c0 0200 	movt	r2, #0
    2ca2:	4790      	blx	r2
    2ca4:	bd08      	pop	{r3, pc}
    2ca6:	bf00      	nop

00002ca8 <wdt_set_ctrl>:
 *        to the WatchDog Timer key.
 *
 * \param ctrl  Value to set the WatchDog Timer Control register to.
 */
static void wdt_set_ctrl(uint32_t ctrl)
{
    2ca8:	b082      	sub	sp, #8
	volatile uint32_t dly;

	/* Calculate delay for internal synchronization, see 44.1.2 WDT errata */
	if ((WDT->WDT_CTRL & WDT_CTRL_CSSEL) == WDT_CLK_SRC_RCSYS) {
    2caa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    2cae:	f2c4 030f 	movt	r3, #16399	; 0x400f
    2cb2:	6819      	ldr	r1, [r3, #0]
    2cb4:	f411 3f00 	tst.w	r1, #131072	; 0x20000
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RCSYS_NOMINAL_HZ);
    2cb8:	bf0c      	ite	eq
    2cba:	f240 3143 	movweq	r1, #835	; 0x343
	} else { /* WDT_CLK_SRC_32K */
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RC32K_NOMINAL_HZ);
    2cbe:	f44f 6137 	movne.w	r1, #2928	; 0xb70
    2cc2:	9101      	str	r1, [sp, #4]
	}
	dly >>= 3; /* ~8 cycles for one while loop */
    2cc4:	9a01      	ldr	r2, [sp, #4]
    2cc6:	ea4f 03d2 	mov.w	r3, r2, lsr #3
    2cca:	9301      	str	r3, [sp, #4]
	while(dly--);
    2ccc:	9901      	ldr	r1, [sp, #4]
    2cce:	f101 32ff 	add.w	r2, r1, #4294967295
    2cd2:	9201      	str	r2, [sp, #4]
    2cd4:	2900      	cmp	r1, #0
    2cd6:	d1f9      	bne.n	2ccc <wdt_set_ctrl+0x24>
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_FIRST_KEY);
    2cd8:	f040 41aa 	orr.w	r1, r0, #1426063360	; 0x55000000
    2cdc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    2ce0:	f2c4 030f 	movt	r3, #16399	; 0x400f
    2ce4:	6019      	str	r1, [r3, #0]
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_SECOND_KEY);
    2ce6:	f040 402a 	orr.w	r0, r0, #2852126720	; 0xaa000000
    2cea:	6018      	str	r0, [r3, #0]
}
    2cec:	b002      	add	sp, #8
    2cee:	4770      	bx	lr

00002cf0 <wdt_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(cfg);

	/* Default configuration values */
	cfg->clk_src = WDT_CLK_SRC_RCSYS;
    2cf0:	f04f 0300 	mov.w	r3, #0
    2cf4:	6003      	str	r3, [r0, #0]
	cfg->wdt_mode = WDT_MODE_BASIC;
    2cf6:	6043      	str	r3, [r0, #4]
	cfg->timeout_period = WDT_PERIOD_131072_CLK;
    2cf8:	f04f 0210 	mov.w	r2, #16
    2cfc:	7202      	strb	r2, [r0, #8]
	cfg->window_period = WDT_PERIOD_NONE;
    2cfe:	7243      	strb	r3, [r0, #9]
	cfg->disable_flash_cali = true;
    2d00:	f04f 0101 	mov.w	r1, #1
    2d04:	7281      	strb	r1, [r0, #10]
	cfg->disable_wdt_after_reset = true;
    2d06:	72c1      	strb	r1, [r0, #11]
	cfg->always_on = false;
    2d08:	7303      	strb	r3, [r0, #12]
    2d0a:	4770      	bx	lr

00002d0c <wdt_init>:
 */
bool wdt_init(
		struct wdt_dev_inst *const dev_inst,
		Wdt *const wdt,
		struct wdt_config *const cfg)
{
    2d0c:	b538      	push	{r3, r4, r5, lr}
    2d0e:	460c      	mov	r4, r1
    2d10:	4615      	mov	r5, r2
	/* Sanity check arguments */
	Assert(dev_inst);
	Assert(wdt);
	Assert(cfg);

	dev_inst->hw_dev = wdt;
    2d12:	6001      	str	r1, [r0, #0]
	dev_inst->wdt_cfg = cfg;
    2d14:	6042      	str	r2, [r0, #4]

	/* Enable APB clock for WDT */
	sysclk_enable_peripheral_clock(wdt);
    2d16:	4608      	mov	r0, r1
    2d18:	f641 2379 	movw	r3, #6777	; 0x1a79
    2d1c:	f2c0 0300 	movt	r3, #0
    2d20:	4798      	blx	r3

	/* Check SFV bit: if SFV bit is set, Control Register is locked */
	if (wdt->WDT_CTRL & WDT_CTRL_SFV) {
    2d22:	6820      	ldr	r0, [r4, #0]
    2d24:	f010 0f08 	tst.w	r0, #8
    2d28:	d152      	bne.n	2dd0 <wdt_init+0xc4>
		return false;
	}

	/* Disable the WDT */
	if (wdt->WDT_CTRL & WDT_CTRL_EN) {
    2d2a:	6821      	ldr	r1, [r4, #0]
    2d2c:	f011 0f01 	tst.w	r1, #1
    2d30:	d00b      	beq.n	2d4a <wdt_init+0x3e>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    2d32:	6822      	ldr	r2, [r4, #0]
    2d34:	f022 0001 	bic.w	r0, r2, #1
    2d38:	f642 43a9 	movw	r3, #11433	; 0x2ca9
    2d3c:	f2c0 0300 	movt	r3, #0
    2d40:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    2d42:	6820      	ldr	r0, [r4, #0]
    2d44:	f010 0f01 	tst.w	r0, #1
    2d48:	d1fb      	bne.n	2d42 <wdt_init+0x36>
		}
	}
	/* Disable the WDT clock */
	if (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    2d4a:	6821      	ldr	r1, [r4, #0]
    2d4c:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    2d50:	d00b      	beq.n	2d6a <wdt_init+0x5e>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_CEN);
    2d52:	6822      	ldr	r2, [r4, #0]
    2d54:	f422 3080 	bic.w	r0, r2, #65536	; 0x10000
    2d58:	f642 43a9 	movw	r3, #11433	; 0x2ca9
    2d5c:	f2c0 0300 	movt	r3, #0
    2d60:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    2d62:	6820      	ldr	r0, [r4, #0]
    2d64:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2d68:	d1fb      	bne.n	2d62 <wdt_init+0x56>
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
    2d6a:	6869      	ldr	r1, [r5, #4]
    2d6c:	682a      	ldr	r2, [r5, #0]
    2d6e:	ea41 0302 	orr.w	r3, r1, r2
			cfg->wdt_mode |
			WDT_CTRL_PSEL(cfg->timeout_period) |
    2d72:	7a28      	ldrb	r0, [r5, #8]
    2d74:	ea4f 2100 	mov.w	r1, r0, lsl #8
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
			cfg->wdt_mode |
    2d78:	f401 52f8 	and.w	r2, r1, #7936	; 0x1f00
    2d7c:	ea43 0002 	orr.w	r0, r3, r2
			WDT_CTRL_PSEL(cfg->timeout_period) |
			WDT_CTRL_TBAN(cfg->window_period) |
    2d80:	7a6b      	ldrb	r3, [r5, #9]
    2d82:	ea4f 4183 	mov.w	r1, r3, lsl #18
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
			cfg->wdt_mode |
			WDT_CTRL_PSEL(cfg->timeout_period) |
    2d86:	f401 02f8 	and.w	r2, r1, #8126464	; 0x7c0000
    2d8a:	4310      	orrs	r0, r2
			WDT_CTRL_TBAN(cfg->window_period) |
    2d8c:	7aab      	ldrb	r3, [r5, #10]
    2d8e:	2b00      	cmp	r3, #0
    2d90:	bf14      	ite	ne
    2d92:	2180      	movne	r1, #128	; 0x80
    2d94:	2100      	moveq	r1, #0
    2d96:	4308      	orrs	r0, r1
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
    2d98:	7aed      	ldrb	r5, [r5, #11]
    2d9a:	2d00      	cmp	r5, #0
    2d9c:	bf14      	ite	ne
    2d9e:	2202      	movne	r2, #2
    2da0:	2200      	moveq	r2, #0
    2da2:	4310      	orrs	r0, r2
    2da4:	f642 45a9 	movw	r5, #11433	; 0x2ca9
    2da8:	f2c0 0500 	movt	r5, #0
    2dac:	47a8      	blx	r5
			WDT_CTRL_PSEL(cfg->timeout_period) |
			WDT_CTRL_TBAN(cfg->window_period) |
			(cfg->disable_flash_cali ? WDT_CTRL_FCD : 0) |
			(cfg->disable_wdt_after_reset ? WDT_CTRL_DAR : 0)
	);
	wdt_set_ctrl(wdt->WDT_CTRL | WDT_CTRL_CEN);
    2dae:	6820      	ldr	r0, [r4, #0]
    2db0:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
    2db4:	47a8      	blx	r5
	while (!(wdt->WDT_CTRL & WDT_CTRL_CEN)) {
    2db6:	6823      	ldr	r3, [r4, #0]
    2db8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2dbc:	d0fb      	beq.n	2db6 <wdt_init+0xaa>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    2dbe:	4620      	mov	r0, r4
    2dc0:	f242 1159 	movw	r1, #8537	; 0x2159
    2dc4:	f2c0 0100 	movt	r1, #0
    2dc8:	4788      	blx	r1

	return true;
    2dca:	f04f 0001 	mov.w	r0, #1
    2dce:	bd38      	pop	{r3, r4, r5, pc}
	/* Enable APB clock for WDT */
	sysclk_enable_peripheral_clock(wdt);

	/* Check SFV bit: if SFV bit is set, Control Register is locked */
	if (wdt->WDT_CTRL & WDT_CTRL_SFV) {
		return false;
    2dd0:	f04f 0000 	mov.w	r0, #0

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);

	return true;
}
    2dd4:	bd38      	pop	{r3, r4, r5, pc}
    2dd6:	bf00      	nop

00002dd8 <wdt_disable>:
 * \brief Disable the WDT module.
 *
 * \param dev_inst    Device structure pointer.
 */
void wdt_disable(struct wdt_dev_inst *const dev_inst)
{
    2dd8:	b510      	push	{r4, lr}
	Wdt *wdt = dev_inst->hw_dev;
    2dda:	6804      	ldr	r4, [r0, #0]

	/* Disable the WDT */
	wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    2ddc:	6820      	ldr	r0, [r4, #0]
    2dde:	f020 0001 	bic.w	r0, r0, #1
    2de2:	f642 43a9 	movw	r3, #11433	; 0x2ca9
    2de6:	f2c0 0300 	movt	r3, #0
    2dea:	4798      	blx	r3
	while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    2dec:	6821      	ldr	r1, [r4, #0]
    2dee:	f011 0f01 	tst.w	r1, #1
    2df2:	d1fb      	bne.n	2dec <wdt_disable+0x14>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    2df4:	4620      	mov	r0, r4
    2df6:	f242 1259 	movw	r2, #8537	; 0x2159
    2dfa:	f2c0 0200 	movt	r2, #0
    2dfe:	4790      	blx	r2
    2e00:	bd10      	pop	{r4, pc}
    2e02:	bf00      	nop

00002e04 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2e04:	e7fe      	b.n	2e04 <Dummy_Handler>
    2e06:	bf00      	nop

00002e08 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    2e08:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
    2e0a:	f240 0300 	movw	r3, #0
    2e0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e12:	f645 0278 	movw	r2, #22648	; 0x5878
    2e16:	f2c0 0200 	movt	r2, #0
    2e1a:	429a      	cmp	r2, r3
    2e1c:	d003      	beq.n	2e26 <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
    2e1e:	4839      	ldr	r0, [pc, #228]	; (2f04 <Reset_Handler+0xfc>)
    2e20:	4939      	ldr	r1, [pc, #228]	; (2f08 <Reset_Handler+0x100>)
    2e22:	4281      	cmp	r1, r0
    2e24:	d304      	bcc.n	2e30 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    2e26:	4b39      	ldr	r3, [pc, #228]	; (2f0c <Reset_Handler+0x104>)
    2e28:	4a39      	ldr	r2, [pc, #228]	; (2f10 <Reset_Handler+0x108>)
    2e2a:	429a      	cmp	r2, r3
    2e2c:	d325      	bcc.n	2e7a <Reset_Handler+0x72>
    2e2e:	e042      	b.n	2eb6 <Reset_Handler+0xae>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
    2e30:	4d38      	ldr	r5, [pc, #224]	; (2f14 <Reset_Handler+0x10c>)
    2e32:	4c39      	ldr	r4, [pc, #228]	; (2f18 <Reset_Handler+0x110>)
    2e34:	1b63      	subs	r3, r4, r5
    2e36:	f023 0503 	bic.w	r5, r3, #3
    2e3a:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
    2e3e:	f240 0200 	movw	r2, #0
    2e42:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2e46:	f645 0178 	movw	r1, #22648	; 0x5878
    2e4a:	f2c0 0100 	movt	r1, #0
    2e4e:	f105 0004 	add.w	r0, r5, #4
    2e52:	f3c5 0480 	ubfx	r4, r5, #2, #1
    2e56:	585d      	ldr	r5, [r3, r1]
    2e58:	509d      	str	r5, [r3, r2]
    2e5a:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    2e5e:	4283      	cmp	r3, r0
    2e60:	d146      	bne.n	2ef0 <Reset_Handler+0xe8>
    2e62:	e7e0      	b.n	2e26 <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
    2e64:	585d      	ldr	r5, [r3, r1]
    2e66:	509d      	str	r5, [r3, r2]
    2e68:	f103 0304 	add.w	r3, r3, #4
    2e6c:	585c      	ldr	r4, [r3, r1]
    2e6e:	509c      	str	r4, [r3, r2]
    2e70:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    2e74:	4283      	cmp	r3, r0
    2e76:	d1f5      	bne.n	2e64 <Reset_Handler+0x5c>
    2e78:	e7d5      	b.n	2e26 <Reset_Handler+0x1e>
    2e7a:	4d28      	ldr	r5, [pc, #160]	; (2f1c <Reset_Handler+0x114>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
    2e7c:	4928      	ldr	r1, [pc, #160]	; (2f20 <Reset_Handler+0x118>)
    2e7e:	1b48      	subs	r0, r1, r5
    2e80:	f020 0403 	bic.w	r4, r0, #3
    2e84:	f640 1300 	movw	r3, #2304	; 0x900
    2e88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e8c:	18e2      	adds	r2, r4, r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
    2e8e:	f04f 0100 	mov.w	r1, #0
    2e92:	1b50      	subs	r0, r2, r5
    2e94:	f1a0 0004 	sub.w	r0, r0, #4
    2e98:	f3c0 0480 	ubfx	r4, r0, #2, #1
    2e9c:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    2ea0:	4295      	cmp	r5, r2
    2ea2:	d11e      	bne.n	2ee2 <Reset_Handler+0xda>
    2ea4:	e007      	b.n	2eb6 <Reset_Handler+0xae>
    2ea6:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
    2eaa:	6069      	str	r1, [r5, #4]
    2eac:	f105 0508 	add.w	r5, r5, #8
    2eb0:	6059      	str	r1, [r3, #4]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    2eb2:	4295      	cmp	r5, r2
    2eb4:	d1f7      	bne.n	2ea6 <Reset_Handler+0x9e>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) &_sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2eb6:	f240 0500 	movw	r5, #0
    2eba:	f2c0 0500 	movt	r5, #0
    2ebe:	f025 027f 	bic.w	r2, r5, #127	; 0x7f
    2ec2:	f44f 416d 	mov.w	r1, #60672	; 0xed00
    2ec6:	f2ce 0100 	movt	r1, #57344	; 0xe000
    2eca:	608a      	str	r2, [r1, #8]

	/* Initialize the C library */
	__libc_init_array();
    2ecc:	f243 0041 	movw	r0, #12353	; 0x3041
    2ed0:	f2c0 0000 	movt	r0, #0
    2ed4:	4780      	blx	r0

	/* Branch to main function */
	main();
    2ed6:	f241 043d 	movw	r4, #4157	; 0x103d
    2eda:	f2c0 0400 	movt	r4, #0
    2ede:	47a0      	blx	r4
    2ee0:	e7fe      	b.n	2ee0 <Reset_Handler+0xd8>
    2ee2:	2c00      	cmp	r4, #0
    2ee4:	d0df      	beq.n	2ea6 <Reset_Handler+0x9e>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
    2ee6:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    2eea:	4295      	cmp	r5, r2
    2eec:	d1db      	bne.n	2ea6 <Reset_Handler+0x9e>
    2eee:	e7e2      	b.n	2eb6 <Reset_Handler+0xae>
    2ef0:	2c00      	cmp	r4, #0
    2ef2:	d0b7      	beq.n	2e64 <Reset_Handler+0x5c>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
    2ef4:	585c      	ldr	r4, [r3, r1]
    2ef6:	509c      	str	r4, [r3, r2]
    2ef8:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    2efc:	4283      	cmp	r3, r0
    2efe:	d1b1      	bne.n	2e64 <Reset_Handler+0x5c>
    2f00:	e791      	b.n	2e26 <Reset_Handler+0x1e>
    2f02:	bf00      	nop
    2f04:	20000900 	.word	0x20000900
    2f08:	20000000 	.word	0x20000000
    2f0c:	20000a74 	.word	0x20000a74
    2f10:	20000900 	.word	0x20000900
    2f14:	20000004 	.word	0x20000004
    2f18:	20000903 	.word	0x20000903
    2f1c:	200008fc 	.word	0x200008fc
    2f20:	20000a6f 	.word	0x20000a6f

00002f24 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2f24:	f640 1390 	movw	r3, #2448	; 0x990
    2f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f2c:	6819      	ldr	r1, [r3, #0]
    2f2e:	b941      	cbnz	r1, 2f42 <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
    2f30:	f640 1390 	movw	r3, #2448	; 0x990
    2f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f38:	f641 2278 	movw	r2, #6776	; 0x1a78
    2f3c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f40:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    2f42:	f640 1190 	movw	r1, #2448	; 0x990
    2f46:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2f4a:	680b      	ldr	r3, [r1, #0]

	heap += incr;
    2f4c:	1818      	adds	r0, r3, r0
    2f4e:	6008      	str	r0, [r1, #0]

	return (caddr_t) prev_heap;
}
    2f50:	4618      	mov	r0, r3
    2f52:	4770      	bx	lr

00002f54 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    2f54:	f04f 30ff 	mov.w	r0, #4294967295
    2f58:	4770      	bx	lr
    2f5a:	bf00      	nop

00002f5c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2f5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    2f60:	604b      	str	r3, [r1, #4]

	return 0;
}
    2f62:	f04f 0000 	mov.w	r0, #0
    2f66:	4770      	bx	lr

00002f68 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2f68:	f04f 0001 	mov.w	r0, #1
    2f6c:	4770      	bx	lr
    2f6e:	bf00      	nop

00002f70 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2f70:	f04f 0000 	mov.w	r0, #0
    2f74:	4770      	bx	lr
    2f76:	bf00      	nop

00002f78 <__register_exitproc>:
    2f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2f7c:	4698      	mov	r8, r3
    2f7e:	4b23      	ldr	r3, [pc, #140]	; (300c <__register_exitproc+0x94>)
    2f80:	681c      	ldr	r4, [r3, #0]
    2f82:	4606      	mov	r6, r0
    2f84:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    2f88:	460f      	mov	r7, r1
    2f8a:	4691      	mov	r9, r2
    2f8c:	b918      	cbnz	r0, 2f96 <__register_exitproc+0x1e>
    2f8e:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
    2f92:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    2f96:	6841      	ldr	r1, [r0, #4]
    2f98:	291f      	cmp	r1, #31
    2f9a:	dd16      	ble.n	2fca <__register_exitproc+0x52>
    2f9c:	481c      	ldr	r0, [pc, #112]	; (3010 <__register_exitproc+0x98>)
    2f9e:	b918      	cbnz	r0, 2fa8 <__register_exitproc+0x30>
    2fa0:	f04f 30ff 	mov.w	r0, #4294967295
    2fa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2fa8:	f44f 70c8 	mov.w	r0, #400	; 0x190
    2fac:	f001 fb84 	bl	46b8 <malloc>
    2fb0:	2800      	cmp	r0, #0
    2fb2:	d0f5      	beq.n	2fa0 <__register_exitproc+0x28>
    2fb4:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    2fb8:	2500      	movs	r5, #0
    2fba:	6045      	str	r5, [r0, #4]
    2fbc:	6002      	str	r2, [r0, #0]
    2fbe:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    2fc2:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
    2fc6:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
    2fca:	b1b6      	cbz	r6, 2ffa <__register_exitproc+0x82>
    2fcc:	6844      	ldr	r4, [r0, #4]
    2fce:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    2fd2:	2201      	movs	r2, #1
    2fd4:	eb00 0384 	add.w	r3, r0, r4, lsl #2
    2fd8:	fa02 f204 	lsl.w	r2, r2, r4
    2fdc:	4311      	orrs	r1, r2
    2fde:	2e02      	cmp	r6, #2
    2fe0:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
    2fe4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    2fe8:	461c      	mov	r4, r3
    2fea:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
    2fee:	d104      	bne.n	2ffa <__register_exitproc+0x82>
    2ff0:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
    2ff4:	431a      	orrs	r2, r3
    2ff6:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
    2ffa:	6841      	ldr	r1, [r0, #4]
    2ffc:	1c8b      	adds	r3, r1, #2
    2ffe:	1c4a      	adds	r2, r1, #1
    3000:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    3004:	6042      	str	r2, [r0, #4]
    3006:	2000      	movs	r0, #0
    3008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    300c:	000057f8 	.word	0x000057f8
    3010:	000046b9 	.word	0x000046b9

00003014 <__libc_fini_array>:
    3014:	b570      	push	{r4, r5, r6, lr}
    3016:	4b08      	ldr	r3, [pc, #32]	; (3038 <__libc_fini_array+0x24>)
    3018:	4c08      	ldr	r4, [pc, #32]	; (303c <__libc_fini_array+0x28>)
    301a:	1ae0      	subs	r0, r4, r3
    301c:	1084      	asrs	r4, r0, #2
    301e:	eb03 0684 	add.w	r6, r3, r4, lsl #2
    3022:	2500      	movs	r5, #0
    3024:	3d04      	subs	r5, #4
    3026:	b11c      	cbz	r4, 3030 <__libc_fini_array+0x1c>
    3028:	5972      	ldr	r2, [r6, r5]
    302a:	4790      	blx	r2
    302c:	3c01      	subs	r4, #1
    302e:	e7f9      	b.n	3024 <__libc_fini_array+0x10>
    3030:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3034:	f002 bc14 	b.w	5860 <_fini>
    3038:	0000586c 	.word	0x0000586c
    303c:	00005870 	.word	0x00005870

00003040 <__libc_init_array>:
    3040:	b538      	push	{r3, r4, r5, lr}
    3042:	4d0e      	ldr	r5, [pc, #56]	; (307c <__libc_init_array+0x3c>)
    3044:	4b0e      	ldr	r3, [pc, #56]	; (3080 <__libc_init_array+0x40>)
    3046:	1ae8      	subs	r0, r5, r3
    3048:	1085      	asrs	r5, r0, #2
    304a:	2400      	movs	r4, #0
    304c:	42ac      	cmp	r4, r5
    304e:	d005      	beq.n	305c <__libc_init_array+0x1c>
    3050:	490b      	ldr	r1, [pc, #44]	; (3080 <__libc_init_array+0x40>)
    3052:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
    3056:	4790      	blx	r2
    3058:	3401      	adds	r4, #1
    305a:	e7f7      	b.n	304c <__libc_init_array+0xc>
    305c:	f002 fbf6 	bl	584c <_init>
    3060:	4908      	ldr	r1, [pc, #32]	; (3084 <__libc_init_array+0x44>)
    3062:	4a09      	ldr	r2, [pc, #36]	; (3088 <__libc_init_array+0x48>)
    3064:	1a54      	subs	r4, r2, r1
    3066:	10a5      	asrs	r5, r4, #2
    3068:	2400      	movs	r4, #0
    306a:	42ac      	cmp	r4, r5
    306c:	d005      	beq.n	307a <__libc_init_array+0x3a>
    306e:	4b05      	ldr	r3, [pc, #20]	; (3084 <__libc_init_array+0x44>)
    3070:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    3074:	4780      	blx	r0
    3076:	3401      	adds	r4, #1
    3078:	e7f7      	b.n	306a <__libc_init_array+0x2a>
    307a:	bd38      	pop	{r3, r4, r5, pc}
    307c:	00005858 	.word	0x00005858
    3080:	00005858 	.word	0x00005858
    3084:	00005858 	.word	0x00005858
    3088:	00005860 	.word	0x00005860

0000308c <iprintf>:
    308c:	b40f      	push	{r0, r1, r2, r3}
    308e:	b507      	push	{r0, r1, r2, lr}
    3090:	4906      	ldr	r1, [pc, #24]	; (30ac <iprintf+0x20>)
    3092:	ab04      	add	r3, sp, #16
    3094:	6808      	ldr	r0, [r1, #0]
    3096:	f853 2b04 	ldr.w	r2, [r3], #4
    309a:	6881      	ldr	r1, [r0, #8]
    309c:	9301      	str	r3, [sp, #4]
    309e:	f000 f911 	bl	32c4 <_vfiprintf_r>
    30a2:	e8bd 400e 	ldmia.w	sp!, {r1, r2, r3, lr}
    30a6:	b004      	add	sp, #16
    30a8:	4770      	bx	lr
    30aa:	bf00      	nop
    30ac:	20000040 	.word	0x20000040

000030b0 <_iprintf_r>:
    30b0:	b40e      	push	{r1, r2, r3}
    30b2:	b503      	push	{r0, r1, lr}
    30b4:	ab03      	add	r3, sp, #12
    30b6:	6881      	ldr	r1, [r0, #8]
    30b8:	f853 2b04 	ldr.w	r2, [r3], #4
    30bc:	9301      	str	r3, [sp, #4]
    30be:	f000 f901 	bl	32c4 <_vfiprintf_r>
    30c2:	e8bd 400c 	ldmia.w	sp!, {r2, r3, lr}
    30c6:	b003      	add	sp, #12
    30c8:	4770      	bx	lr
    30ca:	bf00      	nop

000030cc <memset>:
    30cc:	1882      	adds	r2, r0, r2
    30ce:	4603      	mov	r3, r0
    30d0:	4293      	cmp	r3, r2
    30d2:	d002      	beq.n	30da <memset+0xe>
    30d4:	f803 1b01 	strb.w	r1, [r3], #1
    30d8:	e7fa      	b.n	30d0 <memset+0x4>
    30da:	4770      	bx	lr

000030dc <_puts_r>:
    30dc:	b530      	push	{r4, r5, lr}
    30de:	4605      	mov	r5, r0
    30e0:	b089      	sub	sp, #36	; 0x24
    30e2:	4608      	mov	r0, r1
    30e4:	460c      	mov	r4, r1
    30e6:	f000 f8b1 	bl	324c <strlen>
    30ea:	2101      	movs	r1, #1
    30ec:	1843      	adds	r3, r0, r1
    30ee:	9107      	str	r1, [sp, #28]
    30f0:	4911      	ldr	r1, [pc, #68]	; (3138 <_puts_r+0x5c>)
    30f2:	9303      	str	r3, [sp, #12]
    30f4:	680b      	ldr	r3, [r1, #0]
    30f6:	4a11      	ldr	r2, [pc, #68]	; (313c <_puts_r+0x60>)
    30f8:	9005      	str	r0, [sp, #20]
    30fa:	a804      	add	r0, sp, #16
    30fc:	9001      	str	r0, [sp, #4]
    30fe:	6898      	ldr	r0, [r3, #8]
    3100:	9206      	str	r2, [sp, #24]
    3102:	2202      	movs	r2, #2
    3104:	9202      	str	r2, [sp, #8]
    3106:	8982      	ldrh	r2, [r0, #12]
    3108:	9404      	str	r4, [sp, #16]
    310a:	f402 5100 	and.w	r1, r2, #8192	; 0x2000
    310e:	b20b      	sxth	r3, r1
    3110:	b933      	cbnz	r3, 3120 <_puts_r+0x44>
    3112:	6e41      	ldr	r1, [r0, #100]	; 0x64
    3114:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    3118:	f421 5300 	bic.w	r3, r1, #8192	; 0x2000
    311c:	8182      	strh	r2, [r0, #12]
    311e:	6643      	str	r3, [r0, #100]	; 0x64
    3120:	4628      	mov	r0, r5
    3122:	68a9      	ldr	r1, [r5, #8]
    3124:	aa01      	add	r2, sp, #4
    3126:	f001 f879 	bl	421c <__sfvwrite_r>
    312a:	2800      	cmp	r0, #0
    312c:	bf0c      	ite	eq
    312e:	200a      	moveq	r0, #10
    3130:	f04f 30ff 	movne.w	r0, #4294967295
    3134:	b009      	add	sp, #36	; 0x24
    3136:	bd30      	pop	{r4, r5, pc}
    3138:	20000040 	.word	0x20000040
    313c:	000057fe 	.word	0x000057fe

00003140 <puts>:
    3140:	4b02      	ldr	r3, [pc, #8]	; (314c <puts+0xc>)
    3142:	4601      	mov	r1, r0
    3144:	6818      	ldr	r0, [r3, #0]
    3146:	f7ff bfc9 	b.w	30dc <_puts_r>
    314a:	bf00      	nop
    314c:	20000040 	.word	0x20000040

00003150 <setbuf>:
    3150:	2900      	cmp	r1, #0
    3152:	bf0c      	ite	eq
    3154:	2202      	moveq	r2, #2
    3156:	2200      	movne	r2, #0
    3158:	f44f 6380 	mov.w	r3, #1024	; 0x400
    315c:	f000 b800 	b.w	3160 <setvbuf>

00003160 <setvbuf>:
    3160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3164:	461d      	mov	r5, r3
    3166:	4b37      	ldr	r3, [pc, #220]	; (3244 <setvbuf+0xe4>)
    3168:	4604      	mov	r4, r0
    316a:	6818      	ldr	r0, [r3, #0]
    316c:	460e      	mov	r6, r1
    316e:	4617      	mov	r7, r2
    3170:	4698      	mov	r8, r3
    3172:	b118      	cbz	r0, 317c <setvbuf+0x1c>
    3174:	6b82      	ldr	r2, [r0, #56]	; 0x38
    3176:	b90a      	cbnz	r2, 317c <setvbuf+0x1c>
    3178:	f000 fe5c 	bl	3e34 <__sinit>
    317c:	2f02      	cmp	r7, #2
    317e:	d85d      	bhi.n	323c <setvbuf+0xdc>
    3180:	2d00      	cmp	r5, #0
    3182:	db5b      	blt.n	323c <setvbuf+0xdc>
    3184:	4621      	mov	r1, r4
    3186:	f8d8 0000 	ldr.w	r0, [r8]
    318a:	f000 fd5f 	bl	3c4c <_fflush_r>
    318e:	89a1      	ldrh	r1, [r4, #12]
    3190:	f001 0380 	and.w	r3, r1, #128	; 0x80
    3194:	2000      	movs	r0, #0
    3196:	b21a      	sxth	r2, r3
    3198:	6060      	str	r0, [r4, #4]
    319a:	61a0      	str	r0, [r4, #24]
    319c:	b122      	cbz	r2, 31a8 <setvbuf+0x48>
    319e:	4829      	ldr	r0, [pc, #164]	; (3244 <setvbuf+0xe4>)
    31a0:	6921      	ldr	r1, [r4, #16]
    31a2:	6800      	ldr	r0, [r0, #0]
    31a4:	f000 ff84 	bl	40b0 <_free_r>
    31a8:	89a1      	ldrh	r1, [r4, #12]
    31aa:	2f02      	cmp	r7, #2
    31ac:	f021 0383 	bic.w	r3, r1, #131	; 0x83
    31b0:	81a3      	strh	r3, [r4, #12]
    31b2:	d012      	beq.n	31da <setvbuf+0x7a>
    31b4:	bb36      	cbnz	r6, 3204 <setvbuf+0xa4>
    31b6:	2d00      	cmp	r5, #0
    31b8:	bf08      	it	eq
    31ba:	f44f 6580 	moveq.w	r5, #1024	; 0x400
    31be:	4628      	mov	r0, r5
    31c0:	f001 fa7a 	bl	46b8 <malloc>
    31c4:	4606      	mov	r6, r0
    31c6:	b9c8      	cbnz	r0, 31fc <setvbuf+0x9c>
    31c8:	f44f 6080 	mov.w	r0, #1024	; 0x400
    31cc:	f001 fa74 	bl	46b8 <malloc>
    31d0:	4606      	mov	r6, r0
    31d2:	b988      	cbnz	r0, 31f8 <setvbuf+0x98>
    31d4:	f04f 30ff 	mov.w	r0, #4294967295
    31d8:	e000      	b.n	31dc <setvbuf+0x7c>
    31da:	2000      	movs	r0, #0
    31dc:	89a1      	ldrh	r1, [r4, #12]
    31de:	f041 0302 	orr.w	r3, r1, #2
    31e2:	81a3      	strh	r3, [r4, #12]
    31e4:	f104 0143 	add.w	r1, r4, #67	; 0x43
    31e8:	2200      	movs	r2, #0
    31ea:	2301      	movs	r3, #1
    31ec:	60a2      	str	r2, [r4, #8]
    31ee:	6021      	str	r1, [r4, #0]
    31f0:	6121      	str	r1, [r4, #16]
    31f2:	6163      	str	r3, [r4, #20]
    31f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    31f8:	f44f 6580 	mov.w	r5, #1024	; 0x400
    31fc:	89a2      	ldrh	r2, [r4, #12]
    31fe:	f042 0080 	orr.w	r0, r2, #128	; 0x80
    3202:	81a0      	strh	r0, [r4, #12]
    3204:	2f01      	cmp	r7, #1
    3206:	d105      	bne.n	3214 <setvbuf+0xb4>
    3208:	89a1      	ldrh	r1, [r4, #12]
    320a:	426a      	negs	r2, r5
    320c:	f041 0301 	orr.w	r3, r1, #1
    3210:	81a3      	strh	r3, [r4, #12]
    3212:	61a2      	str	r2, [r4, #24]
    3214:	480b      	ldr	r0, [pc, #44]	; (3244 <setvbuf+0xe4>)
    3216:	89a2      	ldrh	r2, [r4, #12]
    3218:	6801      	ldr	r1, [r0, #0]
    321a:	4b0b      	ldr	r3, [pc, #44]	; (3248 <setvbuf+0xe8>)
    321c:	f002 0008 	and.w	r0, r2, #8
    3220:	b200      	sxth	r0, r0
    3222:	63cb      	str	r3, [r1, #60]	; 0x3c
    3224:	6026      	str	r6, [r4, #0]
    3226:	6126      	str	r6, [r4, #16]
    3228:	6165      	str	r5, [r4, #20]
    322a:	b148      	cbz	r0, 3240 <setvbuf+0xe0>
    322c:	f012 0f03 	tst.w	r2, #3
    3230:	bf18      	it	ne
    3232:	2500      	movne	r5, #0
    3234:	60a5      	str	r5, [r4, #8]
    3236:	2000      	movs	r0, #0
    3238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    323c:	f04f 30ff 	mov.w	r0, #4294967295
    3240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3244:	20000040 	.word	0x20000040
    3248:	00003da9 	.word	0x00003da9

0000324c <strlen>:
    324c:	4603      	mov	r3, r0
    324e:	f813 2b01 	ldrb.w	r2, [r3], #1
    3252:	2a00      	cmp	r2, #0
    3254:	d1fb      	bne.n	324e <strlen+0x2>
    3256:	1a18      	subs	r0, r3, r0
    3258:	3801      	subs	r0, #1
    325a:	4770      	bx	lr

0000325c <__sprint_r>:
    325c:	6893      	ldr	r3, [r2, #8]
    325e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3262:	4681      	mov	r9, r0
    3264:	460f      	mov	r7, r1
    3266:	4614      	mov	r4, r2
    3268:	b91b      	cbnz	r3, 3272 <__sprint_r+0x16>
    326a:	6053      	str	r3, [r2, #4]
    326c:	4618      	mov	r0, r3
    326e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3272:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    3274:	049b      	lsls	r3, r3, #18
    3276:	d51e      	bpl.n	32b6 <__sprint_r+0x5a>
    3278:	6815      	ldr	r5, [r2, #0]
    327a:	68a0      	ldr	r0, [r4, #8]
    327c:	3508      	adds	r5, #8
    327e:	b1c8      	cbz	r0, 32b4 <__sprint_r+0x58>
    3280:	f855 1c04 	ldr.w	r1, [r5, #-4]
    3284:	f855 ac08 	ldr.w	sl, [r5, #-8]
    3288:	ea4f 0891 	mov.w	r8, r1, lsr #2
    328c:	2600      	movs	r6, #0
    328e:	4546      	cmp	r6, r8
    3290:	da09      	bge.n	32a6 <__sprint_r+0x4a>
    3292:	4648      	mov	r0, r9
    3294:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
    3298:	463a      	mov	r2, r7
    329a:	f000 fe47 	bl	3f2c <_fputwc_r>
    329e:	1c43      	adds	r3, r0, #1
    32a0:	d00b      	beq.n	32ba <__sprint_r+0x5e>
    32a2:	3601      	adds	r6, #1
    32a4:	e7f3      	b.n	328e <__sprint_r+0x32>
    32a6:	68a2      	ldr	r2, [r4, #8]
    32a8:	ea4f 0888 	mov.w	r8, r8, lsl #2
    32ac:	ebc8 0302 	rsb	r3, r8, r2
    32b0:	60a3      	str	r3, [r4, #8]
    32b2:	e7e2      	b.n	327a <__sprint_r+0x1e>
    32b4:	e001      	b.n	32ba <__sprint_r+0x5e>
    32b6:	f000 ffb1 	bl	421c <__sfvwrite_r>
    32ba:	2100      	movs	r1, #0
    32bc:	60a1      	str	r1, [r4, #8]
    32be:	6061      	str	r1, [r4, #4]
    32c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000032c4 <_vfiprintf_r>:
    32c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    32c8:	4689      	mov	r9, r1
    32ca:	b0a9      	sub	sp, #164	; 0xa4
    32cc:	4614      	mov	r4, r2
    32ce:	461d      	mov	r5, r3
    32d0:	461e      	mov	r6, r3
    32d2:	4682      	mov	sl, r0
    32d4:	b118      	cbz	r0, 32de <_vfiprintf_r+0x1a>
    32d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
    32d8:	b90b      	cbnz	r3, 32de <_vfiprintf_r+0x1a>
    32da:	f000 fdab 	bl	3e34 <__sinit>
    32de:	f8b9 000c 	ldrh.w	r0, [r9, #12]
    32e2:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
    32e6:	b211      	sxth	r1, r2
    32e8:	b949      	cbnz	r1, 32fe <_vfiprintf_r+0x3a>
    32ea:	f440 5300 	orr.w	r3, r0, #8192	; 0x2000
    32ee:	f8d9 0064 	ldr.w	r0, [r9, #100]	; 0x64
    32f2:	f8a9 300c 	strh.w	r3, [r9, #12]
    32f6:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
    32fa:	f8c9 2064 	str.w	r2, [r9, #100]	; 0x64
    32fe:	f8b9 100c 	ldrh.w	r1, [r9, #12]
    3302:	f001 0308 	and.w	r3, r1, #8
    3306:	b218      	sxth	r0, r3
    3308:	b148      	cbz	r0, 331e <_vfiprintf_r+0x5a>
    330a:	f8d9 2010 	ldr.w	r2, [r9, #16]
    330e:	b132      	cbz	r2, 331e <_vfiprintf_r+0x5a>
    3310:	f8b9 100c 	ldrh.w	r1, [r9, #12]
    3314:	f001 031a 	and.w	r3, r1, #26
    3318:	2b0a      	cmp	r3, #10
    331a:	d116      	bne.n	334a <_vfiprintf_r+0x86>
    331c:	e009      	b.n	3332 <_vfiprintf_r+0x6e>
    331e:	4650      	mov	r0, sl
    3320:	4649      	mov	r1, r9
    3322:	f000 fc27 	bl	3b74 <__swsetup_r>
    3326:	2800      	cmp	r0, #0
    3328:	d0f2      	beq.n	3310 <_vfiprintf_r+0x4c>
    332a:	f04f 32ff 	mov.w	r2, #4294967295
    332e:	9203      	str	r2, [sp, #12]
    3330:	e3d5      	b.n	3ade <_vfiprintf_r+0x81a>
    3332:	f9b9 000e 	ldrsh.w	r0, [r9, #14]
    3336:	2800      	cmp	r0, #0
    3338:	db07      	blt.n	334a <_vfiprintf_r+0x86>
    333a:	4650      	mov	r0, sl
    333c:	4649      	mov	r1, r9
    333e:	4622      	mov	r2, r4
    3340:	462b      	mov	r3, r5
    3342:	f000 fbd0 	bl	3ae6 <__sbprintf>
    3346:	9003      	str	r0, [sp, #12]
    3348:	e3c9      	b.n	3ade <_vfiprintf_r+0x81a>
    334a:	2200      	movs	r2, #0
    334c:	ad18      	add	r5, sp, #96	; 0x60
    334e:	950b      	str	r5, [sp, #44]	; 0x2c
    3350:	920d      	str	r2, [sp, #52]	; 0x34
    3352:	920c      	str	r2, [sp, #48]	; 0x30
    3354:	9401      	str	r4, [sp, #4]
    3356:	9205      	str	r2, [sp, #20]
    3358:	9203      	str	r2, [sp, #12]
    335a:	46a8      	mov	r8, r5
    335c:	9901      	ldr	r1, [sp, #4]
    335e:	460c      	mov	r4, r1
    3360:	f811 3b01 	ldrb.w	r3, [r1], #1
    3364:	b10b      	cbz	r3, 336a <_vfiprintf_r+0xa6>
    3366:	2b25      	cmp	r3, #37	; 0x25
    3368:	d1f9      	bne.n	335e <_vfiprintf_r+0x9a>
    336a:	9a01      	ldr	r2, [sp, #4]
    336c:	1aa5      	subs	r5, r4, r2
    336e:	d019      	beq.n	33a4 <_vfiprintf_r+0xe0>
    3370:	990c      	ldr	r1, [sp, #48]	; 0x30
    3372:	980d      	ldr	r0, [sp, #52]	; 0x34
    3374:	1c4b      	adds	r3, r1, #1
    3376:	e888 0024 	stmia.w	r8, {r2, r5}
    337a:	2b07      	cmp	r3, #7
    337c:	eb00 0205 	add.w	r2, r0, r5
    3380:	920d      	str	r2, [sp, #52]	; 0x34
    3382:	f108 0808 	add.w	r8, r8, #8
    3386:	930c      	str	r3, [sp, #48]	; 0x30
    3388:	dd09      	ble.n	339e <_vfiprintf_r+0xda>
    338a:	4650      	mov	r0, sl
    338c:	4649      	mov	r1, r9
    338e:	aa0b      	add	r2, sp, #44	; 0x2c
    3390:	f7ff ff64 	bl	325c <__sprint_r>
    3394:	2800      	cmp	r0, #0
    3396:	f040 839a 	bne.w	3ace <_vfiprintf_r+0x80a>
    339a:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    339e:	9803      	ldr	r0, [sp, #12]
    33a0:	1942      	adds	r2, r0, r5
    33a2:	9203      	str	r2, [sp, #12]
    33a4:	7821      	ldrb	r1, [r4, #0]
    33a6:	2900      	cmp	r1, #0
    33a8:	f000 838a 	beq.w	3ac0 <_vfiprintf_r+0x7fc>
    33ac:	2200      	movs	r2, #0
    33ae:	3401      	adds	r4, #1
    33b0:	9401      	str	r4, [sp, #4]
    33b2:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    33b6:	f04f 3cff 	mov.w	ip, #4294967295
    33ba:	9204      	str	r2, [sp, #16]
    33bc:	4617      	mov	r7, r2
    33be:	9801      	ldr	r0, [sp, #4]
    33c0:	f810 3b01 	ldrb.w	r3, [r0], #1
    33c4:	9001      	str	r0, [sp, #4]
    33c6:	2b63      	cmp	r3, #99	; 0x63
    33c8:	f000 80b3 	beq.w	3532 <_vfiprintf_r+0x26e>
    33cc:	dc33      	bgt.n	3436 <_vfiprintf_r+0x172>
    33ce:	2b39      	cmp	r3, #57	; 0x39
    33d0:	dc1a      	bgt.n	3408 <_vfiprintf_r+0x144>
    33d2:	2b31      	cmp	r3, #49	; 0x31
    33d4:	f280 8091 	bge.w	34fa <_vfiprintf_r+0x236>
    33d8:	2b2b      	cmp	r3, #43	; 0x2b
    33da:	d101      	bne.n	33e0 <_vfiprintf_r+0x11c>
    33dc:	461a      	mov	r2, r3
    33de:	e7ee      	b.n	33be <_vfiprintf_r+0xfa>
    33e0:	dc0a      	bgt.n	33f8 <_vfiprintf_r+0x134>
    33e2:	2b23      	cmp	r3, #35	; 0x23
    33e4:	d055      	beq.n	3492 <_vfiprintf_r+0x1ce>
    33e6:	2b2a      	cmp	r3, #42	; 0x2a
    33e8:	d056      	beq.n	3498 <_vfiprintf_r+0x1d4>
    33ea:	2b20      	cmp	r3, #32
    33ec:	f040 81f7 	bne.w	37de <_vfiprintf_r+0x51a>
    33f0:	2a00      	cmp	r2, #0
    33f2:	bf08      	it	eq
    33f4:	2220      	moveq	r2, #32
    33f6:	e7e2      	b.n	33be <_vfiprintf_r+0xfa>
    33f8:	2b2e      	cmp	r3, #46	; 0x2e
    33fa:	d058      	beq.n	34ae <_vfiprintf_r+0x1ea>
    33fc:	2b30      	cmp	r3, #48	; 0x30
    33fe:	d079      	beq.n	34f4 <_vfiprintf_r+0x230>
    3400:	2b2d      	cmp	r3, #45	; 0x2d
    3402:	f040 81ec 	bne.w	37de <_vfiprintf_r+0x51a>
    3406:	e04f      	b.n	34a8 <_vfiprintf_r+0x1e4>
    3408:	2b4f      	cmp	r3, #79	; 0x4f
    340a:	f000 80de 	beq.w	35ca <_vfiprintf_r+0x306>
    340e:	dc07      	bgt.n	3420 <_vfiprintf_r+0x15c>
    3410:	2b44      	cmp	r3, #68	; 0x44
    3412:	f040 81e4 	bne.w	37de <_vfiprintf_r+0x51a>
    3416:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    341a:	f047 0710 	orr.w	r7, r7, #16
    341e:	e090      	b.n	3542 <_vfiprintf_r+0x27e>
    3420:	2b55      	cmp	r3, #85	; 0x55
    3422:	f000 811f 	beq.w	3664 <_vfiprintf_r+0x3a0>
    3426:	2b58      	cmp	r3, #88	; 0x58
    3428:	f040 81d9 	bne.w	37de <_vfiprintf_r+0x51a>
    342c:	4daf      	ldr	r5, [pc, #700]	; (36ec <_vfiprintf_r+0x428>)
    342e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3432:	9505      	str	r5, [sp, #20]
    3434:	e131      	b.n	369a <_vfiprintf_r+0x3d6>
    3436:	2b6f      	cmp	r3, #111	; 0x6f
    3438:	f000 80c9 	beq.w	35ce <_vfiprintf_r+0x30a>
    343c:	dc10      	bgt.n	3460 <_vfiprintf_r+0x19c>
    343e:	2b69      	cmp	r3, #105	; 0x69
    3440:	d024      	beq.n	348c <_vfiprintf_r+0x1c8>
    3442:	dc07      	bgt.n	3454 <_vfiprintf_r+0x190>
    3444:	2b64      	cmp	r3, #100	; 0x64
    3446:	d021      	beq.n	348c <_vfiprintf_r+0x1c8>
    3448:	2b68      	cmp	r3, #104	; 0x68
    344a:	f040 81c8 	bne.w	37de <_vfiprintf_r+0x51a>
    344e:	f047 0740 	orr.w	r7, r7, #64	; 0x40
    3452:	e7b4      	b.n	33be <_vfiprintf_r+0xfa>
    3454:	2b6c      	cmp	r3, #108	; 0x6c
    3456:	d05f      	beq.n	3518 <_vfiprintf_r+0x254>
    3458:	2b6e      	cmp	r3, #110	; 0x6e
    345a:	f040 81c0 	bne.w	37de <_vfiprintf_r+0x51a>
    345e:	e096      	b.n	358e <_vfiprintf_r+0x2ca>
    3460:	2b73      	cmp	r3, #115	; 0x73
    3462:	f000 80df 	beq.w	3624 <_vfiprintf_r+0x360>
    3466:	dc06      	bgt.n	3476 <_vfiprintf_r+0x1b2>
    3468:	2b70      	cmp	r3, #112	; 0x70
    346a:	f000 80cd 	beq.w	3608 <_vfiprintf_r+0x344>
    346e:	2b71      	cmp	r3, #113	; 0x71
    3470:	f040 81b5 	bne.w	37de <_vfiprintf_r+0x51a>
    3474:	e05a      	b.n	352c <_vfiprintf_r+0x268>
    3476:	2b75      	cmp	r3, #117	; 0x75
    3478:	f000 80f6 	beq.w	3668 <_vfiprintf_r+0x3a4>
    347c:	2b78      	cmp	r3, #120	; 0x78
    347e:	f040 81ae 	bne.w	37de <_vfiprintf_r+0x51a>
    3482:	4d9b      	ldr	r5, [pc, #620]	; (36f0 <_vfiprintf_r+0x42c>)
    3484:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3488:	9505      	str	r5, [sp, #20]
    348a:	e106      	b.n	369a <_vfiprintf_r+0x3d6>
    348c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3490:	e057      	b.n	3542 <_vfiprintf_r+0x27e>
    3492:	f047 0701 	orr.w	r7, r7, #1
    3496:	e792      	b.n	33be <_vfiprintf_r+0xfa>
    3498:	1d33      	adds	r3, r6, #4
    349a:	6836      	ldr	r6, [r6, #0]
    349c:	2e00      	cmp	r6, #0
    349e:	9604      	str	r6, [sp, #16]
    34a0:	da15      	bge.n	34ce <_vfiprintf_r+0x20a>
    34a2:	4270      	negs	r0, r6
    34a4:	9004      	str	r0, [sp, #16]
    34a6:	461e      	mov	r6, r3
    34a8:	f047 0704 	orr.w	r7, r7, #4
    34ac:	e787      	b.n	33be <_vfiprintf_r+0xfa>
    34ae:	9901      	ldr	r1, [sp, #4]
    34b0:	f811 3b01 	ldrb.w	r3, [r1], #1
    34b4:	2b2a      	cmp	r3, #42	; 0x2a
    34b6:	9101      	str	r1, [sp, #4]
    34b8:	d10b      	bne.n	34d2 <_vfiprintf_r+0x20e>
    34ba:	f8d6 c000 	ldr.w	ip, [r6]
    34be:	1d33      	adds	r3, r6, #4
    34c0:	f1bc 0f00 	cmp.w	ip, #0
    34c4:	da03      	bge.n	34ce <_vfiprintf_r+0x20a>
    34c6:	461e      	mov	r6, r3
    34c8:	f04f 3cff 	mov.w	ip, #4294967295
    34cc:	e777      	b.n	33be <_vfiprintf_r+0xfa>
    34ce:	461e      	mov	r6, r3
    34d0:	e775      	b.n	33be <_vfiprintf_r+0xfa>
    34d2:	f04f 0c00 	mov.w	ip, #0
    34d6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    34da:	2809      	cmp	r0, #9
    34dc:	d807      	bhi.n	34ee <_vfiprintf_r+0x22a>
    34de:	9901      	ldr	r1, [sp, #4]
    34e0:	230a      	movs	r3, #10
    34e2:	fb03 0c0c 	mla	ip, r3, ip, r0
    34e6:	f811 3b01 	ldrb.w	r3, [r1], #1
    34ea:	9101      	str	r1, [sp, #4]
    34ec:	e7f3      	b.n	34d6 <_vfiprintf_r+0x212>
    34ee:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
    34f2:	e768      	b.n	33c6 <_vfiprintf_r+0x102>
    34f4:	f047 0780 	orr.w	r7, r7, #128	; 0x80
    34f8:	e761      	b.n	33be <_vfiprintf_r+0xfa>
    34fa:	9801      	ldr	r0, [sp, #4]
    34fc:	2100      	movs	r1, #0
    34fe:	3b30      	subs	r3, #48	; 0x30
    3500:	240a      	movs	r4, #10
    3502:	fb04 3101 	mla	r1, r4, r1, r3
    3506:	f810 3b01 	ldrb.w	r3, [r0], #1
    350a:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
    350e:	2c09      	cmp	r4, #9
    3510:	9001      	str	r0, [sp, #4]
    3512:	d9f4      	bls.n	34fe <_vfiprintf_r+0x23a>
    3514:	9104      	str	r1, [sp, #16]
    3516:	e756      	b.n	33c6 <_vfiprintf_r+0x102>
    3518:	9901      	ldr	r1, [sp, #4]
    351a:	780b      	ldrb	r3, [r1, #0]
    351c:	2b6c      	cmp	r3, #108	; 0x6c
    351e:	d102      	bne.n	3526 <_vfiprintf_r+0x262>
    3520:	1c48      	adds	r0, r1, #1
    3522:	9001      	str	r0, [sp, #4]
    3524:	e002      	b.n	352c <_vfiprintf_r+0x268>
    3526:	f047 0710 	orr.w	r7, r7, #16
    352a:	e748      	b.n	33be <_vfiprintf_r+0xfa>
    352c:	f047 0720 	orr.w	r7, r7, #32
    3530:	e745      	b.n	33be <_vfiprintf_r+0xfa>
    3532:	6832      	ldr	r2, [r6, #0]
    3534:	2500      	movs	r5, #0
    3536:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    353a:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
    353e:	3604      	adds	r6, #4
    3540:	e157      	b.n	37f2 <_vfiprintf_r+0x52e>
    3542:	06ba      	lsls	r2, r7, #26
    3544:	d507      	bpl.n	3556 <_vfiprintf_r+0x292>
    3546:	3607      	adds	r6, #7
    3548:	f026 0507 	bic.w	r5, r6, #7
    354c:	f105 0608 	add.w	r6, r5, #8
    3550:	e9d5 4500 	ldrd	r4, r5, [r5]
    3554:	e00f      	b.n	3576 <_vfiprintf_r+0x2b2>
    3556:	f017 0f10 	tst.w	r7, #16
    355a:	f106 0104 	add.w	r1, r6, #4
    355e:	d001      	beq.n	3564 <_vfiprintf_r+0x2a0>
    3560:	6832      	ldr	r2, [r6, #0]
    3562:	e005      	b.n	3570 <_vfiprintf_r+0x2ac>
    3564:	f017 0f40 	tst.w	r7, #64	; 0x40
    3568:	6832      	ldr	r2, [r6, #0]
    356a:	d001      	beq.n	3570 <_vfiprintf_r+0x2ac>
    356c:	b214      	sxth	r4, r2
    356e:	e000      	b.n	3572 <_vfiprintf_r+0x2ae>
    3570:	4614      	mov	r4, r2
    3572:	17e5      	asrs	r5, r4, #31
    3574:	460e      	mov	r6, r1
    3576:	2c00      	cmp	r4, #0
    3578:	f175 0200 	sbcs.w	r2, r5, #0
    357c:	f280 80ba 	bge.w	36f4 <_vfiprintf_r+0x430>
    3580:	232d      	movs	r3, #45	; 0x2d
    3582:	4264      	negs	r4, r4
    3584:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    3588:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    358c:	e0b2      	b.n	36f4 <_vfiprintf_r+0x430>
    358e:	f017 0f20 	tst.w	r7, #32
    3592:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3596:	f106 0204 	add.w	r2, r6, #4
    359a:	d005      	beq.n	35a8 <_vfiprintf_r+0x2e4>
    359c:	9c03      	ldr	r4, [sp, #12]
    359e:	6835      	ldr	r5, [r6, #0]
    35a0:	17e0      	asrs	r0, r4, #31
    35a2:	602c      	str	r4, [r5, #0]
    35a4:	6068      	str	r0, [r5, #4]
    35a6:	e004      	b.n	35b2 <_vfiprintf_r+0x2ee>
    35a8:	06fb      	lsls	r3, r7, #27
    35aa:	d504      	bpl.n	35b6 <_vfiprintf_r+0x2f2>
    35ac:	6833      	ldr	r3, [r6, #0]
    35ae:	9903      	ldr	r1, [sp, #12]
    35b0:	6019      	str	r1, [r3, #0]
    35b2:	4616      	mov	r6, r2
    35b4:	e6d2      	b.n	335c <_vfiprintf_r+0x98>
    35b6:	6830      	ldr	r0, [r6, #0]
    35b8:	9c03      	ldr	r4, [sp, #12]
    35ba:	f017 0f40 	tst.w	r7, #64	; 0x40
    35be:	f106 0604 	add.w	r6, r6, #4
    35c2:	bf14      	ite	ne
    35c4:	8004      	strhne	r4, [r0, #0]
    35c6:	6004      	streq	r4, [r0, #0]
    35c8:	e6c8      	b.n	335c <_vfiprintf_r+0x98>
    35ca:	f047 0710 	orr.w	r7, r7, #16
    35ce:	f017 0020 	ands.w	r0, r7, #32
    35d2:	d008      	beq.n	35e6 <_vfiprintf_r+0x322>
    35d4:	1df3      	adds	r3, r6, #7
    35d6:	f023 0507 	bic.w	r5, r3, #7
    35da:	f105 0608 	add.w	r6, r5, #8
    35de:	e9d5 4500 	ldrd	r4, r5, [r5]
    35e2:	2000      	movs	r0, #0
    35e4:	e07d      	b.n	36e2 <_vfiprintf_r+0x41e>
    35e6:	f017 0110 	ands.w	r1, r7, #16
    35ea:	f106 0204 	add.w	r2, r6, #4
    35ee:	d106      	bne.n	35fe <_vfiprintf_r+0x33a>
    35f0:	f017 0040 	ands.w	r0, r7, #64	; 0x40
    35f4:	d003      	beq.n	35fe <_vfiprintf_r+0x33a>
    35f6:	8834      	ldrh	r4, [r6, #0]
    35f8:	2500      	movs	r5, #0
    35fa:	4616      	mov	r6, r2
    35fc:	e7f1      	b.n	35e2 <_vfiprintf_r+0x31e>
    35fe:	6836      	ldr	r6, [r6, #0]
    3600:	2500      	movs	r5, #0
    3602:	4634      	mov	r4, r6
    3604:	4616      	mov	r6, r2
    3606:	e06c      	b.n	36e2 <_vfiprintf_r+0x41e>
    3608:	4b39      	ldr	r3, [pc, #228]	; (36f0 <_vfiprintf_r+0x42c>)
    360a:	6834      	ldr	r4, [r6, #0]
    360c:	9305      	str	r3, [sp, #20]
    360e:	2130      	movs	r1, #48	; 0x30
    3610:	2278      	movs	r2, #120	; 0x78
    3612:	2500      	movs	r5, #0
    3614:	f047 0702 	orr.w	r7, r7, #2
    3618:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    361c:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
    3620:	3604      	adds	r6, #4
    3622:	e05d      	b.n	36e0 <_vfiprintf_r+0x41c>
    3624:	4631      	mov	r1, r6
    3626:	2500      	movs	r5, #0
    3628:	f8d1 b000 	ldr.w	fp, [r1]
    362c:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
    3630:	3604      	adds	r6, #4
    3632:	45ac      	cmp	ip, r5
    3634:	4658      	mov	r0, fp
    3636:	db11      	blt.n	365c <_vfiprintf_r+0x398>
    3638:	4662      	mov	r2, ip
    363a:	4629      	mov	r1, r5
    363c:	f8cd c000 	str.w	ip, [sp]
    3640:	f001 fa4c 	bl	4adc <memchr>
    3644:	f8dd c000 	ldr.w	ip, [sp]
    3648:	2800      	cmp	r0, #0
    364a:	f000 80d6 	beq.w	37fa <_vfiprintf_r+0x536>
    364e:	ebcb 0400 	rsb	r4, fp, r0
    3652:	4564      	cmp	r4, ip
    3654:	f340 80d3 	ble.w	37fe <_vfiprintf_r+0x53a>
    3658:	4664      	mov	r4, ip
    365a:	e0d0      	b.n	37fe <_vfiprintf_r+0x53a>
    365c:	f7ff fdf6 	bl	324c <strlen>
    3660:	4604      	mov	r4, r0
    3662:	e0cc      	b.n	37fe <_vfiprintf_r+0x53a>
    3664:	f047 0710 	orr.w	r7, r7, #16
    3668:	06bd      	lsls	r5, r7, #26
    366a:	d507      	bpl.n	367c <_vfiprintf_r+0x3b8>
    366c:	1df0      	adds	r0, r6, #7
    366e:	f020 0407 	bic.w	r4, r0, #7
    3672:	f104 0608 	add.w	r6, r4, #8
    3676:	e9d4 4500 	ldrd	r4, r5, [r4]
    367a:	e00c      	b.n	3696 <_vfiprintf_r+0x3d2>
    367c:	f017 0f10 	tst.w	r7, #16
    3680:	f106 0304 	add.w	r3, r6, #4
    3684:	d103      	bne.n	368e <_vfiprintf_r+0x3ca>
    3686:	067c      	lsls	r4, r7, #25
    3688:	d501      	bpl.n	368e <_vfiprintf_r+0x3ca>
    368a:	8834      	ldrh	r4, [r6, #0]
    368c:	e001      	b.n	3692 <_vfiprintf_r+0x3ce>
    368e:	6835      	ldr	r5, [r6, #0]
    3690:	462c      	mov	r4, r5
    3692:	2500      	movs	r5, #0
    3694:	461e      	mov	r6, r3
    3696:	2001      	movs	r0, #1
    3698:	e023      	b.n	36e2 <_vfiprintf_r+0x41e>
    369a:	06b8      	lsls	r0, r7, #26
    369c:	d507      	bpl.n	36ae <_vfiprintf_r+0x3ea>
    369e:	1df4      	adds	r4, r6, #7
    36a0:	f024 0107 	bic.w	r1, r4, #7
    36a4:	f101 0608 	add.w	r6, r1, #8
    36a8:	e9d1 4500 	ldrd	r4, r5, [r1]
    36ac:	e00c      	b.n	36c8 <_vfiprintf_r+0x404>
    36ae:	f017 0f10 	tst.w	r7, #16
    36b2:	f106 0004 	add.w	r0, r6, #4
    36b6:	d103      	bne.n	36c0 <_vfiprintf_r+0x3fc>
    36b8:	0679      	lsls	r1, r7, #25
    36ba:	d501      	bpl.n	36c0 <_vfiprintf_r+0x3fc>
    36bc:	8834      	ldrh	r4, [r6, #0]
    36be:	e001      	b.n	36c4 <_vfiprintf_r+0x400>
    36c0:	6836      	ldr	r6, [r6, #0]
    36c2:	4634      	mov	r4, r6
    36c4:	2500      	movs	r5, #0
    36c6:	4606      	mov	r6, r0
    36c8:	07fa      	lsls	r2, r7, #31
    36ca:	d509      	bpl.n	36e0 <_vfiprintf_r+0x41c>
    36cc:	ea54 0205 	orrs.w	r2, r4, r5
    36d0:	d006      	beq.n	36e0 <_vfiprintf_r+0x41c>
    36d2:	2230      	movs	r2, #48	; 0x30
    36d4:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
    36d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    36dc:	f047 0702 	orr.w	r7, r7, #2
    36e0:	2002      	movs	r0, #2
    36e2:	2100      	movs	r1, #0
    36e4:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    36e8:	e005      	b.n	36f6 <_vfiprintf_r+0x432>
    36ea:	bf00      	nop
    36ec:	00005820 	.word	0x00005820
    36f0:	00005831 	.word	0x00005831
    36f4:	2001      	movs	r0, #1
    36f6:	f1bc 0f00 	cmp.w	ip, #0
    36fa:	bfa8      	it	ge
    36fc:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
    3700:	ea54 0105 	orrs.w	r1, r4, r5
    3704:	d102      	bne.n	370c <_vfiprintf_r+0x448>
    3706:	f1bc 0f00 	cmp.w	ip, #0
    370a:	d058      	beq.n	37be <_vfiprintf_r+0x4fa>
    370c:	2801      	cmp	r0, #1
    370e:	d01d      	beq.n	374c <_vfiprintf_r+0x488>
    3710:	2802      	cmp	r0, #2
    3712:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
    3716:	d041      	beq.n	379c <_vfiprintf_r+0x4d8>
    3718:	f004 0207 	and.w	r2, r4, #7
    371c:	08e4      	lsrs	r4, r4, #3
    371e:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
    3722:	08e9      	lsrs	r1, r5, #3
    3724:	4604      	mov	r4, r0
    3726:	460d      	mov	r5, r1
    3728:	3230      	adds	r2, #48	; 0x30
    372a:	ea54 0105 	orrs.w	r1, r4, r5
    372e:	469b      	mov	fp, r3
    3730:	701a      	strb	r2, [r3, #0]
    3732:	f103 33ff 	add.w	r3, r3, #4294967295
    3736:	d1ef      	bne.n	3718 <_vfiprintf_r+0x454>
    3738:	07f8      	lsls	r0, r7, #31
    373a:	465d      	mov	r5, fp
    373c:	d54a      	bpl.n	37d4 <_vfiprintf_r+0x510>
    373e:	2a30      	cmp	r2, #48	; 0x30
    3740:	d048      	beq.n	37d4 <_vfiprintf_r+0x510>
    3742:	2230      	movs	r2, #48	; 0x30
    3744:	469b      	mov	fp, r3
    3746:	f805 2c01 	strb.w	r2, [r5, #-1]
    374a:	e043      	b.n	37d4 <_vfiprintf_r+0x510>
    374c:	2d00      	cmp	r5, #0
    374e:	bf08      	it	eq
    3750:	2c0a      	cmpeq	r4, #10
    3752:	d203      	bcs.n	375c <_vfiprintf_r+0x498>
    3754:	3430      	adds	r4, #48	; 0x30
    3756:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
    375a:	e036      	b.n	37ca <_vfiprintf_r+0x506>
    375c:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
    3760:	9302      	str	r3, [sp, #8]
    3762:	4620      	mov	r0, r4
    3764:	4629      	mov	r1, r5
    3766:	220a      	movs	r2, #10
    3768:	2300      	movs	r3, #0
    376a:	f8cd c000 	str.w	ip, [sp]
    376e:	f001 fd1b 	bl	51a8 <__aeabi_uldivmod>
    3772:	9802      	ldr	r0, [sp, #8]
    3774:	f8dd b008 	ldr.w	fp, [sp, #8]
    3778:	3230      	adds	r2, #48	; 0x30
    377a:	f800 2901 	strb.w	r2, [r0], #-1
    377e:	4629      	mov	r1, r5
    3780:	9002      	str	r0, [sp, #8]
    3782:	220a      	movs	r2, #10
    3784:	4620      	mov	r0, r4
    3786:	2300      	movs	r3, #0
    3788:	f001 fd0e 	bl	51a8 <__aeabi_uldivmod>
    378c:	4604      	mov	r4, r0
    378e:	460d      	mov	r5, r1
    3790:	ea54 0105 	orrs.w	r1, r4, r5
    3794:	f8dd c000 	ldr.w	ip, [sp]
    3798:	d1e3      	bne.n	3762 <_vfiprintf_r+0x49e>
    379a:	e01b      	b.n	37d4 <_vfiprintf_r+0x510>
    379c:	f004 000f 	and.w	r0, r4, #15
    37a0:	9905      	ldr	r1, [sp, #20]
    37a2:	0924      	lsrs	r4, r4, #4
    37a4:	5c0a      	ldrb	r2, [r1, r0]
    37a6:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
    37aa:	0929      	lsrs	r1, r5, #4
    37ac:	4604      	mov	r4, r0
    37ae:	460d      	mov	r5, r1
    37b0:	469b      	mov	fp, r3
    37b2:	f803 2901 	strb.w	r2, [r3], #-1
    37b6:	ea54 0205 	orrs.w	r2, r4, r5
    37ba:	d1ef      	bne.n	379c <_vfiprintf_r+0x4d8>
    37bc:	e00a      	b.n	37d4 <_vfiprintf_r+0x510>
    37be:	b938      	cbnz	r0, 37d0 <_vfiprintf_r+0x50c>
    37c0:	07f9      	lsls	r1, r7, #31
    37c2:	d505      	bpl.n	37d0 <_vfiprintf_r+0x50c>
    37c4:	2030      	movs	r0, #48	; 0x30
    37c6:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
    37ca:	f10d 0b5f 	add.w	fp, sp, #95	; 0x5f
    37ce:	e001      	b.n	37d4 <_vfiprintf_r+0x510>
    37d0:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
    37d4:	ad18      	add	r5, sp, #96	; 0x60
    37d6:	ebcb 0405 	rsb	r4, fp, r5
    37da:	4665      	mov	r5, ip
    37dc:	e00f      	b.n	37fe <_vfiprintf_r+0x53a>
    37de:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    37e2:	2b00      	cmp	r3, #0
    37e4:	f000 816c 	beq.w	3ac0 <_vfiprintf_r+0x7fc>
    37e8:	2500      	movs	r5, #0
    37ea:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    37ee:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
    37f2:	2401      	movs	r4, #1
    37f4:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
    37f8:	e001      	b.n	37fe <_vfiprintf_r+0x53a>
    37fa:	4664      	mov	r4, ip
    37fc:	4605      	mov	r5, r0
    37fe:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3802:	42ac      	cmp	r4, r5
    3804:	bfac      	ite	ge
    3806:	4621      	movge	r1, r4
    3808:	4629      	movlt	r1, r5
    380a:	9102      	str	r1, [sp, #8]
    380c:	b113      	cbz	r3, 3814 <_vfiprintf_r+0x550>
    380e:	9802      	ldr	r0, [sp, #8]
    3810:	1c42      	adds	r2, r0, #1
    3812:	9202      	str	r2, [sp, #8]
    3814:	f017 0102 	ands.w	r1, r7, #2
    3818:	9106      	str	r1, [sp, #24]
    381a:	d002      	beq.n	3822 <_vfiprintf_r+0x55e>
    381c:	9b02      	ldr	r3, [sp, #8]
    381e:	1c98      	adds	r0, r3, #2
    3820:	9002      	str	r0, [sp, #8]
    3822:	f017 0284 	ands.w	r2, r7, #132	; 0x84
    3826:	9207      	str	r2, [sp, #28]
    3828:	d13a      	bne.n	38a0 <_vfiprintf_r+0x5dc>
    382a:	9904      	ldr	r1, [sp, #16]
    382c:	9b02      	ldr	r3, [sp, #8]
    382e:	1acb      	subs	r3, r1, r3
    3830:	2b00      	cmp	r3, #0
    3832:	dd35      	ble.n	38a0 <_vfiprintf_r+0x5dc>
    3834:	48a0      	ldr	r0, [pc, #640]	; (3ab8 <_vfiprintf_r+0x7f4>)
    3836:	2b10      	cmp	r3, #16
    3838:	f8c8 0000 	str.w	r0, [r8]
    383c:	dd1a      	ble.n	3874 <_vfiprintf_r+0x5b0>
    383e:	990c      	ldr	r1, [sp, #48]	; 0x30
    3840:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3842:	2010      	movs	r0, #16
    3844:	f8c8 0004 	str.w	r0, [r8, #4]
    3848:	1c48      	adds	r0, r1, #1
    384a:	3210      	adds	r2, #16
    384c:	2807      	cmp	r0, #7
    384e:	920d      	str	r2, [sp, #52]	; 0x34
    3850:	f108 0808 	add.w	r8, r8, #8
    3854:	900c      	str	r0, [sp, #48]	; 0x30
    3856:	dd0b      	ble.n	3870 <_vfiprintf_r+0x5ac>
    3858:	4650      	mov	r0, sl
    385a:	4649      	mov	r1, r9
    385c:	aa0b      	add	r2, sp, #44	; 0x2c
    385e:	9300      	str	r3, [sp, #0]
    3860:	f7ff fcfc 	bl	325c <__sprint_r>
    3864:	9b00      	ldr	r3, [sp, #0]
    3866:	2800      	cmp	r0, #0
    3868:	f040 8131 	bne.w	3ace <_vfiprintf_r+0x80a>
    386c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    3870:	3b10      	subs	r3, #16
    3872:	e7df      	b.n	3834 <_vfiprintf_r+0x570>
    3874:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3876:	f8c8 3004 	str.w	r3, [r8, #4]
    387a:	18d1      	adds	r1, r2, r3
    387c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    387e:	910d      	str	r1, [sp, #52]	; 0x34
    3880:	1c58      	adds	r0, r3, #1
    3882:	2807      	cmp	r0, #7
    3884:	f108 0808 	add.w	r8, r8, #8
    3888:	900c      	str	r0, [sp, #48]	; 0x30
    388a:	dd09      	ble.n	38a0 <_vfiprintf_r+0x5dc>
    388c:	4650      	mov	r0, sl
    388e:	4649      	mov	r1, r9
    3890:	aa0b      	add	r2, sp, #44	; 0x2c
    3892:	f7ff fce3 	bl	325c <__sprint_r>
    3896:	2800      	cmp	r0, #0
    3898:	f040 8119 	bne.w	3ace <_vfiprintf_r+0x80a>
    389c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    38a0:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    38a4:	b1d2      	cbz	r2, 38dc <_vfiprintf_r+0x618>
    38a6:	f10d 0127 	add.w	r1, sp, #39	; 0x27
    38aa:	f8c8 1000 	str.w	r1, [r8]
    38ae:	990c      	ldr	r1, [sp, #48]	; 0x30
    38b0:	980d      	ldr	r0, [sp, #52]	; 0x34
    38b2:	2301      	movs	r3, #1
    38b4:	f8c8 3004 	str.w	r3, [r8, #4]
    38b8:	1c4b      	adds	r3, r1, #1
    38ba:	1c42      	adds	r2, r0, #1
    38bc:	2b07      	cmp	r3, #7
    38be:	920d      	str	r2, [sp, #52]	; 0x34
    38c0:	f108 0808 	add.w	r8, r8, #8
    38c4:	930c      	str	r3, [sp, #48]	; 0x30
    38c6:	dd09      	ble.n	38dc <_vfiprintf_r+0x618>
    38c8:	4650      	mov	r0, sl
    38ca:	4649      	mov	r1, r9
    38cc:	aa0b      	add	r2, sp, #44	; 0x2c
    38ce:	f7ff fcc5 	bl	325c <__sprint_r>
    38d2:	2800      	cmp	r0, #0
    38d4:	f040 80fb 	bne.w	3ace <_vfiprintf_r+0x80a>
    38d8:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    38dc:	9806      	ldr	r0, [sp, #24]
    38de:	b1c8      	cbz	r0, 3914 <_vfiprintf_r+0x650>
    38e0:	aa0a      	add	r2, sp, #40	; 0x28
    38e2:	f8c8 2000 	str.w	r2, [r8]
    38e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    38e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    38ea:	2102      	movs	r1, #2
    38ec:	f8c8 1004 	str.w	r1, [r8, #4]
    38f0:	1c51      	adds	r1, r2, #1
    38f2:	1c98      	adds	r0, r3, #2
    38f4:	2907      	cmp	r1, #7
    38f6:	900d      	str	r0, [sp, #52]	; 0x34
    38f8:	f108 0808 	add.w	r8, r8, #8
    38fc:	910c      	str	r1, [sp, #48]	; 0x30
    38fe:	dd09      	ble.n	3914 <_vfiprintf_r+0x650>
    3900:	4650      	mov	r0, sl
    3902:	4649      	mov	r1, r9
    3904:	aa0b      	add	r2, sp, #44	; 0x2c
    3906:	f7ff fca9 	bl	325c <__sprint_r>
    390a:	2800      	cmp	r0, #0
    390c:	f040 80df 	bne.w	3ace <_vfiprintf_r+0x80a>
    3910:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    3914:	9b07      	ldr	r3, [sp, #28]
    3916:	2b80      	cmp	r3, #128	; 0x80
    3918:	d13a      	bne.n	3990 <_vfiprintf_r+0x6cc>
    391a:	9804      	ldr	r0, [sp, #16]
    391c:	9a02      	ldr	r2, [sp, #8]
    391e:	1a83      	subs	r3, r0, r2
    3920:	2b00      	cmp	r3, #0
    3922:	dd35      	ble.n	3990 <_vfiprintf_r+0x6cc>
    3924:	4965      	ldr	r1, [pc, #404]	; (3abc <_vfiprintf_r+0x7f8>)
    3926:	2b10      	cmp	r3, #16
    3928:	f8c8 1000 	str.w	r1, [r8]
    392c:	dd1a      	ble.n	3964 <_vfiprintf_r+0x6a0>
    392e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3930:	980d      	ldr	r0, [sp, #52]	; 0x34
    3932:	2110      	movs	r1, #16
    3934:	f8c8 1004 	str.w	r1, [r8, #4]
    3938:	1c51      	adds	r1, r2, #1
    393a:	3010      	adds	r0, #16
    393c:	2907      	cmp	r1, #7
    393e:	900d      	str	r0, [sp, #52]	; 0x34
    3940:	f108 0808 	add.w	r8, r8, #8
    3944:	910c      	str	r1, [sp, #48]	; 0x30
    3946:	dd0b      	ble.n	3960 <_vfiprintf_r+0x69c>
    3948:	4650      	mov	r0, sl
    394a:	4649      	mov	r1, r9
    394c:	aa0b      	add	r2, sp, #44	; 0x2c
    394e:	9300      	str	r3, [sp, #0]
    3950:	f7ff fc84 	bl	325c <__sprint_r>
    3954:	9b00      	ldr	r3, [sp, #0]
    3956:	2800      	cmp	r0, #0
    3958:	f040 80b9 	bne.w	3ace <_vfiprintf_r+0x80a>
    395c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    3960:	3b10      	subs	r3, #16
    3962:	e7df      	b.n	3924 <_vfiprintf_r+0x660>
    3964:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3966:	980d      	ldr	r0, [sp, #52]	; 0x34
    3968:	f8c8 3004 	str.w	r3, [r8, #4]
    396c:	1c51      	adds	r1, r2, #1
    396e:	18c3      	adds	r3, r0, r3
    3970:	2907      	cmp	r1, #7
    3972:	930d      	str	r3, [sp, #52]	; 0x34
    3974:	f108 0808 	add.w	r8, r8, #8
    3978:	910c      	str	r1, [sp, #48]	; 0x30
    397a:	dd09      	ble.n	3990 <_vfiprintf_r+0x6cc>
    397c:	4650      	mov	r0, sl
    397e:	4649      	mov	r1, r9
    3980:	aa0b      	add	r2, sp, #44	; 0x2c
    3982:	f7ff fc6b 	bl	325c <__sprint_r>
    3986:	2800      	cmp	r0, #0
    3988:	f040 80a1 	bne.w	3ace <_vfiprintf_r+0x80a>
    398c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    3990:	1b2d      	subs	r5, r5, r4
    3992:	2d00      	cmp	r5, #0
    3994:	dd32      	ble.n	39fc <_vfiprintf_r+0x738>
    3996:	4849      	ldr	r0, [pc, #292]	; (3abc <_vfiprintf_r+0x7f8>)
    3998:	2d10      	cmp	r5, #16
    399a:	f8c8 0000 	str.w	r0, [r8]
    399e:	dd18      	ble.n	39d2 <_vfiprintf_r+0x70e>
    39a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    39a2:	980d      	ldr	r0, [sp, #52]	; 0x34
    39a4:	1c53      	adds	r3, r2, #1
    39a6:	2110      	movs	r1, #16
    39a8:	3010      	adds	r0, #16
    39aa:	2b07      	cmp	r3, #7
    39ac:	f8c8 1004 	str.w	r1, [r8, #4]
    39b0:	900d      	str	r0, [sp, #52]	; 0x34
    39b2:	f108 0808 	add.w	r8, r8, #8
    39b6:	930c      	str	r3, [sp, #48]	; 0x30
    39b8:	dd09      	ble.n	39ce <_vfiprintf_r+0x70a>
    39ba:	4650      	mov	r0, sl
    39bc:	4649      	mov	r1, r9
    39be:	aa0b      	add	r2, sp, #44	; 0x2c
    39c0:	f7ff fc4c 	bl	325c <__sprint_r>
    39c4:	2800      	cmp	r0, #0
    39c6:	f040 8082 	bne.w	3ace <_vfiprintf_r+0x80a>
    39ca:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    39ce:	3d10      	subs	r5, #16
    39d0:	e7e1      	b.n	3996 <_vfiprintf_r+0x6d2>
    39d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    39d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    39d6:	f8c8 5004 	str.w	r5, [r8, #4]
    39da:	1c51      	adds	r1, r2, #1
    39dc:	195d      	adds	r5, r3, r5
    39de:	2907      	cmp	r1, #7
    39e0:	950d      	str	r5, [sp, #52]	; 0x34
    39e2:	f108 0808 	add.w	r8, r8, #8
    39e6:	910c      	str	r1, [sp, #48]	; 0x30
    39e8:	dd08      	ble.n	39fc <_vfiprintf_r+0x738>
    39ea:	4650      	mov	r0, sl
    39ec:	4649      	mov	r1, r9
    39ee:	aa0b      	add	r2, sp, #44	; 0x2c
    39f0:	f7ff fc34 	bl	325c <__sprint_r>
    39f4:	2800      	cmp	r0, #0
    39f6:	d16a      	bne.n	3ace <_vfiprintf_r+0x80a>
    39f8:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    39fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    39fe:	980d      	ldr	r0, [sp, #52]	; 0x34
    3a00:	f8c8 4004 	str.w	r4, [r8, #4]
    3a04:	1c51      	adds	r1, r2, #1
    3a06:	1904      	adds	r4, r0, r4
    3a08:	2907      	cmp	r1, #7
    3a0a:	f8c8 b000 	str.w	fp, [r8]
    3a0e:	940d      	str	r4, [sp, #52]	; 0x34
    3a10:	f108 0308 	add.w	r3, r8, #8
    3a14:	910c      	str	r1, [sp, #48]	; 0x30
    3a16:	dd07      	ble.n	3a28 <_vfiprintf_r+0x764>
    3a18:	4650      	mov	r0, sl
    3a1a:	4649      	mov	r1, r9
    3a1c:	aa0b      	add	r2, sp, #44	; 0x2c
    3a1e:	f7ff fc1d 	bl	325c <__sprint_r>
    3a22:	2800      	cmp	r0, #0
    3a24:	d153      	bne.n	3ace <_vfiprintf_r+0x80a>
    3a26:	ab18      	add	r3, sp, #96	; 0x60
    3a28:	077a      	lsls	r2, r7, #29
    3a2a:	d40b      	bmi.n	3a44 <_vfiprintf_r+0x780>
    3a2c:	9b03      	ldr	r3, [sp, #12]
    3a2e:	9a02      	ldr	r2, [sp, #8]
    3a30:	9904      	ldr	r1, [sp, #16]
    3a32:	980d      	ldr	r0, [sp, #52]	; 0x34
    3a34:	428a      	cmp	r2, r1
    3a36:	bfac      	ite	ge
    3a38:	189b      	addge	r3, r3, r2
    3a3a:	185b      	addlt	r3, r3, r1
    3a3c:	9303      	str	r3, [sp, #12]
    3a3e:	2800      	cmp	r0, #0
    3a40:	d035      	beq.n	3aae <_vfiprintf_r+0x7ea>
    3a42:	e02e      	b.n	3aa2 <_vfiprintf_r+0x7de>
    3a44:	9c04      	ldr	r4, [sp, #16]
    3a46:	9802      	ldr	r0, [sp, #8]
    3a48:	1a24      	subs	r4, r4, r0
    3a4a:	2c00      	cmp	r4, #0
    3a4c:	ddee      	ble.n	3a2c <_vfiprintf_r+0x768>
    3a4e:	4a1a      	ldr	r2, [pc, #104]	; (3ab8 <_vfiprintf_r+0x7f4>)
    3a50:	2c10      	cmp	r4, #16
    3a52:	601a      	str	r2, [r3, #0]
    3a54:	dd14      	ble.n	3a80 <_vfiprintf_r+0x7bc>
    3a56:	980c      	ldr	r0, [sp, #48]	; 0x30
    3a58:	990d      	ldr	r1, [sp, #52]	; 0x34
    3a5a:	2210      	movs	r2, #16
    3a5c:	605a      	str	r2, [r3, #4]
    3a5e:	1c42      	adds	r2, r0, #1
    3a60:	3110      	adds	r1, #16
    3a62:	3308      	adds	r3, #8
    3a64:	2a07      	cmp	r2, #7
    3a66:	910d      	str	r1, [sp, #52]	; 0x34
    3a68:	920c      	str	r2, [sp, #48]	; 0x30
    3a6a:	dd07      	ble.n	3a7c <_vfiprintf_r+0x7b8>
    3a6c:	4650      	mov	r0, sl
    3a6e:	4649      	mov	r1, r9
    3a70:	aa0b      	add	r2, sp, #44	; 0x2c
    3a72:	f7ff fbf3 	bl	325c <__sprint_r>
    3a76:	2800      	cmp	r0, #0
    3a78:	d129      	bne.n	3ace <_vfiprintf_r+0x80a>
    3a7a:	ab18      	add	r3, sp, #96	; 0x60
    3a7c:	3c10      	subs	r4, #16
    3a7e:	e7e6      	b.n	3a4e <_vfiprintf_r+0x78a>
    3a80:	990c      	ldr	r1, [sp, #48]	; 0x30
    3a82:	605c      	str	r4, [r3, #4]
    3a84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3a86:	1c48      	adds	r0, r1, #1
    3a88:	191c      	adds	r4, r3, r4
    3a8a:	2807      	cmp	r0, #7
    3a8c:	940d      	str	r4, [sp, #52]	; 0x34
    3a8e:	900c      	str	r0, [sp, #48]	; 0x30
    3a90:	ddcc      	ble.n	3a2c <_vfiprintf_r+0x768>
    3a92:	4650      	mov	r0, sl
    3a94:	4649      	mov	r1, r9
    3a96:	aa0b      	add	r2, sp, #44	; 0x2c
    3a98:	f7ff fbe0 	bl	325c <__sprint_r>
    3a9c:	2800      	cmp	r0, #0
    3a9e:	d0c5      	beq.n	3a2c <_vfiprintf_r+0x768>
    3aa0:	e015      	b.n	3ace <_vfiprintf_r+0x80a>
    3aa2:	4650      	mov	r0, sl
    3aa4:	4649      	mov	r1, r9
    3aa6:	aa0b      	add	r2, sp, #44	; 0x2c
    3aa8:	f7ff fbd8 	bl	325c <__sprint_r>
    3aac:	b978      	cbnz	r0, 3ace <_vfiprintf_r+0x80a>
    3aae:	2500      	movs	r5, #0
    3ab0:	950c      	str	r5, [sp, #48]	; 0x30
    3ab2:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    3ab6:	e451      	b.n	335c <_vfiprintf_r+0x98>
    3ab8:	00005800 	.word	0x00005800
    3abc:	00005810 	.word	0x00005810
    3ac0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3ac2:	b122      	cbz	r2, 3ace <_vfiprintf_r+0x80a>
    3ac4:	4650      	mov	r0, sl
    3ac6:	4649      	mov	r1, r9
    3ac8:	aa0b      	add	r2, sp, #44	; 0x2c
    3aca:	f7ff fbc7 	bl	325c <__sprint_r>
    3ace:	f8b9 100c 	ldrh.w	r1, [r9, #12]
    3ad2:	f001 0040 	and.w	r0, r1, #64	; 0x40
    3ad6:	b203      	sxth	r3, r0
    3ad8:	2b00      	cmp	r3, #0
    3ada:	f47f ac26 	bne.w	332a <_vfiprintf_r+0x66>
    3ade:	9803      	ldr	r0, [sp, #12]
    3ae0:	b029      	add	sp, #164	; 0xa4
    3ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003ae6 <__sbprintf>:
    3ae6:	b570      	push	{r4, r5, r6, lr}
    3ae8:	460c      	mov	r4, r1
    3aea:	8989      	ldrh	r1, [r1, #12]
    3aec:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
    3af0:	f021 0502 	bic.w	r5, r1, #2
    3af4:	6e61      	ldr	r1, [r4, #100]	; 0x64
    3af6:	f8ad 500c 	strh.w	r5, [sp, #12]
    3afa:	9119      	str	r1, [sp, #100]	; 0x64
    3afc:	89e5      	ldrh	r5, [r4, #14]
    3afe:	69e1      	ldr	r1, [r4, #28]
    3b00:	f8ad 500e 	strh.w	r5, [sp, #14]
    3b04:	9107      	str	r1, [sp, #28]
    3b06:	6a65      	ldr	r5, [r4, #36]	; 0x24
    3b08:	a91a      	add	r1, sp, #104	; 0x68
    3b0a:	9100      	str	r1, [sp, #0]
    3b0c:	9104      	str	r1, [sp, #16]
    3b0e:	2100      	movs	r1, #0
    3b10:	9509      	str	r5, [sp, #36]	; 0x24
    3b12:	9106      	str	r1, [sp, #24]
    3b14:	f44f 6580 	mov.w	r5, #1024	; 0x400
    3b18:	4669      	mov	r1, sp
    3b1a:	9502      	str	r5, [sp, #8]
    3b1c:	9505      	str	r5, [sp, #20]
    3b1e:	4606      	mov	r6, r0
    3b20:	f7ff fbd0 	bl	32c4 <_vfiprintf_r>
    3b24:	1e05      	subs	r5, r0, #0
    3b26:	db07      	blt.n	3b38 <__sbprintf+0x52>
    3b28:	4630      	mov	r0, r6
    3b2a:	4669      	mov	r1, sp
    3b2c:	f000 f88e 	bl	3c4c <_fflush_r>
    3b30:	2800      	cmp	r0, #0
    3b32:	bf18      	it	ne
    3b34:	f04f 35ff 	movne.w	r5, #4294967295
    3b38:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    3b3c:	f003 0040 	and.w	r0, r3, #64	; 0x40
    3b40:	b202      	sxth	r2, r0
    3b42:	b11a      	cbz	r2, 3b4c <__sbprintf+0x66>
    3b44:	89a1      	ldrh	r1, [r4, #12]
    3b46:	f041 0340 	orr.w	r3, r1, #64	; 0x40
    3b4a:	81a3      	strh	r3, [r4, #12]
    3b4c:	4628      	mov	r0, r5
    3b4e:	b01a      	add	sp, #104	; 0x68
    3b50:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
    3b54:	bd70      	pop	{r4, r5, r6, pc}

00003b56 <vfiprintf>:
    3b56:	b530      	push	{r4, r5, lr}
    3b58:	4613      	mov	r3, r2
    3b5a:	4a05      	ldr	r2, [pc, #20]	; (3b70 <vfiprintf+0x1a>)
    3b5c:	4605      	mov	r5, r0
    3b5e:	460c      	mov	r4, r1
    3b60:	6810      	ldr	r0, [r2, #0]
    3b62:	4629      	mov	r1, r5
    3b64:	4622      	mov	r2, r4
    3b66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    3b6a:	f7ff bbab 	b.w	32c4 <_vfiprintf_r>
    3b6e:	bf00      	nop
    3b70:	20000040 	.word	0x20000040

00003b74 <__swsetup_r>:
    3b74:	b538      	push	{r3, r4, r5, lr}
    3b76:	4b2c      	ldr	r3, [pc, #176]	; (3c28 <__swsetup_r+0xb4>)
    3b78:	4605      	mov	r5, r0
    3b7a:	6818      	ldr	r0, [r3, #0]
    3b7c:	460c      	mov	r4, r1
    3b7e:	b118      	cbz	r0, 3b88 <__swsetup_r+0x14>
    3b80:	6b82      	ldr	r2, [r0, #56]	; 0x38
    3b82:	b90a      	cbnz	r2, 3b88 <__swsetup_r+0x14>
    3b84:	f000 f956 	bl	3e34 <__sinit>
    3b88:	89a0      	ldrh	r0, [r4, #12]
    3b8a:	f000 0108 	and.w	r1, r0, #8
    3b8e:	b20b      	sxth	r3, r1
    3b90:	bb0b      	cbnz	r3, 3bd6 <__swsetup_r+0x62>
    3b92:	f000 0210 	and.w	r2, r0, #16
    3b96:	b211      	sxth	r1, r2
    3b98:	b911      	cbnz	r1, 3ba0 <__swsetup_r+0x2c>
    3b9a:	f04f 30ff 	mov.w	r0, #4294967295
    3b9e:	bd38      	pop	{r3, r4, r5, pc}
    3ba0:	f000 0004 	and.w	r0, r0, #4
    3ba4:	b203      	sxth	r3, r0
    3ba6:	b193      	cbz	r3, 3bce <__swsetup_r+0x5a>
    3ba8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    3baa:	b141      	cbz	r1, 3bbe <__swsetup_r+0x4a>
    3bac:	f104 0240 	add.w	r2, r4, #64	; 0x40
    3bb0:	4291      	cmp	r1, r2
    3bb2:	d002      	beq.n	3bba <__swsetup_r+0x46>
    3bb4:	4628      	mov	r0, r5
    3bb6:	f000 fa7b 	bl	40b0 <_free_r>
    3bba:	2100      	movs	r1, #0
    3bbc:	6321      	str	r1, [r4, #48]	; 0x30
    3bbe:	89a0      	ldrh	r0, [r4, #12]
    3bc0:	6921      	ldr	r1, [r4, #16]
    3bc2:	f020 0324 	bic.w	r3, r0, #36	; 0x24
    3bc6:	2200      	movs	r2, #0
    3bc8:	81a3      	strh	r3, [r4, #12]
    3bca:	6062      	str	r2, [r4, #4]
    3bcc:	6021      	str	r1, [r4, #0]
    3bce:	89a0      	ldrh	r0, [r4, #12]
    3bd0:	f040 0308 	orr.w	r3, r0, #8
    3bd4:	81a3      	strh	r3, [r4, #12]
    3bd6:	6922      	ldr	r2, [r4, #16]
    3bd8:	b94a      	cbnz	r2, 3bee <__swsetup_r+0x7a>
    3bda:	89a1      	ldrh	r1, [r4, #12]
    3bdc:	f401 7020 	and.w	r0, r1, #640	; 0x280
    3be0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    3be4:	d003      	beq.n	3bee <__swsetup_r+0x7a>
    3be6:	4628      	mov	r0, r5
    3be8:	4621      	mov	r1, r4
    3bea:	f000 fcf9 	bl	45e0 <__smakebuf_r>
    3bee:	89a3      	ldrh	r3, [r4, #12]
    3bf0:	f013 0201 	ands.w	r2, r3, #1
    3bf4:	d005      	beq.n	3c02 <__swsetup_r+0x8e>
    3bf6:	6961      	ldr	r1, [r4, #20]
    3bf8:	2200      	movs	r2, #0
    3bfa:	4248      	negs	r0, r1
    3bfc:	60a2      	str	r2, [r4, #8]
    3bfe:	61a0      	str	r0, [r4, #24]
    3c00:	e007      	b.n	3c12 <__swsetup_r+0x9e>
    3c02:	f003 0102 	and.w	r1, r3, #2
    3c06:	b208      	sxth	r0, r1
    3c08:	b908      	cbnz	r0, 3c0e <__swsetup_r+0x9a>
    3c0a:	6963      	ldr	r3, [r4, #20]
    3c0c:	e000      	b.n	3c10 <__swsetup_r+0x9c>
    3c0e:	4613      	mov	r3, r2
    3c10:	60a3      	str	r3, [r4, #8]
    3c12:	6923      	ldr	r3, [r4, #16]
    3c14:	b933      	cbnz	r3, 3c24 <__swsetup_r+0xb0>
    3c16:	89a2      	ldrh	r2, [r4, #12]
    3c18:	f002 0180 	and.w	r1, r2, #128	; 0x80
    3c1c:	b208      	sxth	r0, r1
    3c1e:	2800      	cmp	r0, #0
    3c20:	d1bb      	bne.n	3b9a <__swsetup_r+0x26>
    3c22:	bd38      	pop	{r3, r4, r5, pc}
    3c24:	2000      	movs	r0, #0
    3c26:	bd38      	pop	{r3, r4, r5, pc}
    3c28:	20000040 	.word	0x20000040

00003c2c <register_fini>:
    3c2c:	4b02      	ldr	r3, [pc, #8]	; (3c38 <register_fini+0xc>)
    3c2e:	b113      	cbz	r3, 3c36 <register_fini+0xa>
    3c30:	4802      	ldr	r0, [pc, #8]	; (3c3c <register_fini+0x10>)
    3c32:	f000 b805 	b.w	3c40 <atexit>
    3c36:	4770      	bx	lr
    3c38:	00000000 	.word	0x00000000
    3c3c:	00003015 	.word	0x00003015

00003c40 <atexit>:
    3c40:	4601      	mov	r1, r0
    3c42:	2000      	movs	r0, #0
    3c44:	4602      	mov	r2, r0
    3c46:	4603      	mov	r3, r0
    3c48:	f7ff b996 	b.w	2f78 <__register_exitproc>

00003c4c <_fflush_r>:
    3c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3c50:	460c      	mov	r4, r1
    3c52:	4605      	mov	r5, r0
    3c54:	b118      	cbz	r0, 3c5e <_fflush_r+0x12>
    3c56:	6b83      	ldr	r3, [r0, #56]	; 0x38
    3c58:	b90b      	cbnz	r3, 3c5e <_fflush_r+0x12>
    3c5a:	f000 f8eb 	bl	3e34 <__sinit>
    3c5e:	89a2      	ldrh	r2, [r4, #12]
    3c60:	b332      	cbz	r2, 3cb0 <_fflush_r+0x64>
    3c62:	f002 0008 	and.w	r0, r2, #8
    3c66:	b201      	sxth	r1, r0
    3c68:	2900      	cmp	r1, #0
    3c6a:	d162      	bne.n	3d32 <_fflush_r+0xe6>
    3c6c:	6861      	ldr	r1, [r4, #4]
    3c6e:	f442 6000 	orr.w	r0, r2, #2048	; 0x800
    3c72:	2900      	cmp	r1, #0
    3c74:	81a0      	strh	r0, [r4, #12]
    3c76:	dc02      	bgt.n	3c7e <_fflush_r+0x32>
    3c78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3c7a:	2b00      	cmp	r3, #0
    3c7c:	dd18      	ble.n	3cb0 <_fflush_r+0x64>
    3c7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3c80:	b1b6      	cbz	r6, 3cb0 <_fflush_r+0x64>
    3c82:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    3c86:	2000      	movs	r0, #0
    3c88:	b212      	sxth	r2, r2
    3c8a:	682f      	ldr	r7, [r5, #0]
    3c8c:	6028      	str	r0, [r5, #0]
    3c8e:	b10a      	cbz	r2, 3c94 <_fflush_r+0x48>
    3c90:	6d22      	ldr	r2, [r4, #80]	; 0x50
    3c92:	e010      	b.n	3cb6 <_fflush_r+0x6a>
    3c94:	2301      	movs	r3, #1
    3c96:	4628      	mov	r0, r5
    3c98:	69e1      	ldr	r1, [r4, #28]
    3c9a:	47b0      	blx	r6
    3c9c:	4602      	mov	r2, r0
    3c9e:	3001      	adds	r0, #1
    3ca0:	d109      	bne.n	3cb6 <_fflush_r+0x6a>
    3ca2:	6829      	ldr	r1, [r5, #0]
    3ca4:	b139      	cbz	r1, 3cb6 <_fflush_r+0x6a>
    3ca6:	291d      	cmp	r1, #29
    3ca8:	d001      	beq.n	3cae <_fflush_r+0x62>
    3caa:	2916      	cmp	r1, #22
    3cac:	d14f      	bne.n	3d4e <_fflush_r+0x102>
    3cae:	602f      	str	r7, [r5, #0]
    3cb0:	2000      	movs	r0, #0
    3cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3cb6:	89a6      	ldrh	r6, [r4, #12]
    3cb8:	f006 0104 	and.w	r1, r6, #4
    3cbc:	b20b      	sxth	r3, r1
    3cbe:	b12b      	cbz	r3, 3ccc <_fflush_r+0x80>
    3cc0:	6860      	ldr	r0, [r4, #4]
    3cc2:	6b26      	ldr	r6, [r4, #48]	; 0x30
    3cc4:	1a12      	subs	r2, r2, r0
    3cc6:	b10e      	cbz	r6, 3ccc <_fflush_r+0x80>
    3cc8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    3cca:	1a52      	subs	r2, r2, r1
    3ccc:	69e1      	ldr	r1, [r4, #28]
    3cce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3cd0:	2300      	movs	r3, #0
    3cd2:	4628      	mov	r0, r5
    3cd4:	47b0      	blx	r6
    3cd6:	1c41      	adds	r1, r0, #1
    3cd8:	d105      	bne.n	3ce6 <_fflush_r+0x9a>
    3cda:	682a      	ldr	r2, [r5, #0]
    3cdc:	b11a      	cbz	r2, 3ce6 <_fflush_r+0x9a>
    3cde:	2a1d      	cmp	r2, #29
    3ce0:	d001      	beq.n	3ce6 <_fflush_r+0x9a>
    3ce2:	2a16      	cmp	r2, #22
    3ce4:	d11f      	bne.n	3d26 <_fflush_r+0xda>
    3ce6:	89a3      	ldrh	r3, [r4, #12]
    3ce8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
    3cec:	2100      	movs	r1, #0
    3cee:	81a2      	strh	r2, [r4, #12]
    3cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    3cf4:	6922      	ldr	r2, [r4, #16]
    3cf6:	6061      	str	r1, [r4, #4]
    3cf8:	b219      	sxth	r1, r3
    3cfa:	6022      	str	r2, [r4, #0]
    3cfc:	b121      	cbz	r1, 3d08 <_fflush_r+0xbc>
    3cfe:	1c42      	adds	r2, r0, #1
    3d00:	d101      	bne.n	3d06 <_fflush_r+0xba>
    3d02:	682a      	ldr	r2, [r5, #0]
    3d04:	b902      	cbnz	r2, 3d08 <_fflush_r+0xbc>
    3d06:	6520      	str	r0, [r4, #80]	; 0x50
    3d08:	6b21      	ldr	r1, [r4, #48]	; 0x30
    3d0a:	602f      	str	r7, [r5, #0]
    3d0c:	2900      	cmp	r1, #0
    3d0e:	d0cf      	beq.n	3cb0 <_fflush_r+0x64>
    3d10:	f104 0040 	add.w	r0, r4, #64	; 0x40
    3d14:	4281      	cmp	r1, r0
    3d16:	d002      	beq.n	3d1e <_fflush_r+0xd2>
    3d18:	4628      	mov	r0, r5
    3d1a:	f000 f9c9 	bl	40b0 <_free_r>
    3d1e:	2000      	movs	r0, #0
    3d20:	6320      	str	r0, [r4, #48]	; 0x30
    3d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3d26:	89a3      	ldrh	r3, [r4, #12]
    3d28:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    3d2c:	81a1      	strh	r1, [r4, #12]
    3d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3d32:	6926      	ldr	r6, [r4, #16]
    3d34:	2e00      	cmp	r6, #0
    3d36:	d0bb      	beq.n	3cb0 <_fflush_r+0x64>
    3d38:	0792      	lsls	r2, r2, #30
    3d3a:	6823      	ldr	r3, [r4, #0]
    3d3c:	bf08      	it	eq
    3d3e:	6962      	ldreq	r2, [r4, #20]
    3d40:	6026      	str	r6, [r4, #0]
    3d42:	bf18      	it	ne
    3d44:	2200      	movne	r2, #0
    3d46:	ebc6 0803 	rsb	r8, r6, r3
    3d4a:	60a2      	str	r2, [r4, #8]
    3d4c:	e012      	b.n	3d74 <_fflush_r+0x128>
    3d4e:	89a3      	ldrh	r3, [r4, #12]
    3d50:	f043 0040 	orr.w	r0, r3, #64	; 0x40
    3d54:	81a0      	strh	r0, [r4, #12]
    3d56:	f04f 30ff 	mov.w	r0, #4294967295
    3d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3d5e:	6a67      	ldr	r7, [r4, #36]	; 0x24
    3d60:	69e1      	ldr	r1, [r4, #28]
    3d62:	4628      	mov	r0, r5
    3d64:	4632      	mov	r2, r6
    3d66:	4643      	mov	r3, r8
    3d68:	47b8      	blx	r7
    3d6a:	2800      	cmp	r0, #0
    3d6c:	ddef      	ble.n	3d4e <_fflush_r+0x102>
    3d6e:	1836      	adds	r6, r6, r0
    3d70:	ebc0 0808 	rsb	r8, r0, r8
    3d74:	f1b8 0f00 	cmp.w	r8, #0
    3d78:	dcf1      	bgt.n	3d5e <_fflush_r+0x112>
    3d7a:	e799      	b.n	3cb0 <_fflush_r+0x64>

00003d7c <fflush>:
    3d7c:	4601      	mov	r1, r0
    3d7e:	b920      	cbnz	r0, 3d8a <fflush+0xe>
    3d80:	4804      	ldr	r0, [pc, #16]	; (3d94 <fflush+0x18>)
    3d82:	4905      	ldr	r1, [pc, #20]	; (3d98 <fflush+0x1c>)
    3d84:	6800      	ldr	r0, [r0, #0]
    3d86:	f000 bbc5 	b.w	4514 <_fwalk_reent>
    3d8a:	4b04      	ldr	r3, [pc, #16]	; (3d9c <fflush+0x20>)
    3d8c:	6818      	ldr	r0, [r3, #0]
    3d8e:	f7ff bf5d 	b.w	3c4c <_fflush_r>
    3d92:	bf00      	nop
    3d94:	000057f8 	.word	0x000057f8
    3d98:	00003c4d 	.word	0x00003c4d
    3d9c:	20000040 	.word	0x20000040

00003da0 <__fp_lock>:
    3da0:	2000      	movs	r0, #0
    3da2:	4770      	bx	lr

00003da4 <__fp_unlock>:
    3da4:	2000      	movs	r0, #0
    3da6:	4770      	bx	lr

00003da8 <_cleanup_r>:
    3da8:	4901      	ldr	r1, [pc, #4]	; (3db0 <_cleanup_r+0x8>)
    3daa:	f000 bb92 	b.w	44d2 <_fwalk>
    3dae:	bf00      	nop
    3db0:	0000510d 	.word	0x0000510d

00003db4 <std.isra.0>:
    3db4:	2300      	movs	r3, #0
    3db6:	b510      	push	{r4, lr}
    3db8:	4604      	mov	r4, r0
    3dba:	6003      	str	r3, [r0, #0]
    3dbc:	6043      	str	r3, [r0, #4]
    3dbe:	6083      	str	r3, [r0, #8]
    3dc0:	8181      	strh	r1, [r0, #12]
    3dc2:	6643      	str	r3, [r0, #100]	; 0x64
    3dc4:	81c2      	strh	r2, [r0, #14]
    3dc6:	6103      	str	r3, [r0, #16]
    3dc8:	6143      	str	r3, [r0, #20]
    3dca:	6183      	str	r3, [r0, #24]
    3dcc:	4619      	mov	r1, r3
    3dce:	2208      	movs	r2, #8
    3dd0:	f100 005c 	add.w	r0, r0, #92	; 0x5c
    3dd4:	f7ff f97a 	bl	30cc <memset>
    3dd8:	4804      	ldr	r0, [pc, #16]	; (3dec <std.isra.0+0x38>)
    3dda:	4905      	ldr	r1, [pc, #20]	; (3df0 <std.isra.0+0x3c>)
    3ddc:	4a05      	ldr	r2, [pc, #20]	; (3df4 <std.isra.0+0x40>)
    3dde:	4b06      	ldr	r3, [pc, #24]	; (3df8 <std.isra.0+0x44>)
    3de0:	61e4      	str	r4, [r4, #28]
    3de2:	6220      	str	r0, [r4, #32]
    3de4:	6261      	str	r1, [r4, #36]	; 0x24
    3de6:	62a2      	str	r2, [r4, #40]	; 0x28
    3de8:	62e3      	str	r3, [r4, #44]	; 0x2c
    3dea:	bd10      	pop	{r4, pc}
    3dec:	00004e41 	.word	0x00004e41
    3df0:	00004e67 	.word	0x00004e67
    3df4:	00004ea3 	.word	0x00004ea3
    3df8:	00004ec7 	.word	0x00004ec7

00003dfc <__sfmoreglue>:
    3dfc:	b570      	push	{r4, r5, r6, lr}
    3dfe:	2568      	movs	r5, #104	; 0x68
    3e00:	434d      	muls	r5, r1
    3e02:	460e      	mov	r6, r1
    3e04:	f105 010c 	add.w	r1, r5, #12
    3e08:	f000 fc66 	bl	46d8 <_malloc_r>
    3e0c:	4604      	mov	r4, r0
    3e0e:	b140      	cbz	r0, 3e22 <__sfmoreglue+0x26>
    3e10:	f100 000c 	add.w	r0, r0, #12
    3e14:	2100      	movs	r1, #0
    3e16:	e884 0042 	stmia.w	r4, {r1, r6}
    3e1a:	60a0      	str	r0, [r4, #8]
    3e1c:	462a      	mov	r2, r5
    3e1e:	f7ff f955 	bl	30cc <memset>
    3e22:	4620      	mov	r0, r4
    3e24:	bd70      	pop	{r4, r5, r6, pc}

00003e26 <_cleanup>:
    3e26:	4b02      	ldr	r3, [pc, #8]	; (3e30 <_cleanup+0xa>)
    3e28:	6818      	ldr	r0, [r3, #0]
    3e2a:	f7ff bfbd 	b.w	3da8 <_cleanup_r>
    3e2e:	bf00      	nop
    3e30:	000057f8 	.word	0x000057f8

00003e34 <__sinit>:
    3e34:	b538      	push	{r3, r4, r5, lr}
    3e36:	6b83      	ldr	r3, [r0, #56]	; 0x38
    3e38:	4604      	mov	r4, r0
    3e3a:	b9eb      	cbnz	r3, 3e78 <__sinit+0x44>
    3e3c:	4a0f      	ldr	r2, [pc, #60]	; (3e7c <__sinit+0x48>)
    3e3e:	f8c0 32e0 	str.w	r3, [r0, #736]	; 0x2e0
    3e42:	2501      	movs	r5, #1
    3e44:	63c2      	str	r2, [r0, #60]	; 0x3c
    3e46:	6385      	str	r5, [r0, #56]	; 0x38
    3e48:	f504 713b 	add.w	r1, r4, #748	; 0x2ec
    3e4c:	2003      	movs	r0, #3
    3e4e:	461a      	mov	r2, r3
    3e50:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
    3e54:	f8c4 12e8 	str.w	r1, [r4, #744]	; 0x2e8
    3e58:	6860      	ldr	r0, [r4, #4]
    3e5a:	2104      	movs	r1, #4
    3e5c:	f7ff ffaa 	bl	3db4 <std.isra.0>
    3e60:	68a0      	ldr	r0, [r4, #8]
    3e62:	2109      	movs	r1, #9
    3e64:	462a      	mov	r2, r5
    3e66:	f7ff ffa5 	bl	3db4 <std.isra.0>
    3e6a:	68e0      	ldr	r0, [r4, #12]
    3e6c:	2112      	movs	r1, #18
    3e6e:	2202      	movs	r2, #2
    3e70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3e74:	f7ff bf9e 	b.w	3db4 <std.isra.0>
    3e78:	bd38      	pop	{r3, r4, r5, pc}
    3e7a:	bf00      	nop
    3e7c:	00003da9 	.word	0x00003da9

00003e80 <__sfp>:
    3e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e82:	4b1d      	ldr	r3, [pc, #116]	; (3ef8 <__sfp+0x78>)
    3e84:	681e      	ldr	r6, [r3, #0]
    3e86:	4607      	mov	r7, r0
    3e88:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    3e8a:	b910      	cbnz	r0, 3e92 <__sfp+0x12>
    3e8c:	4630      	mov	r0, r6
    3e8e:	f7ff ffd1 	bl	3e34 <__sinit>
    3e92:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
    3e96:	68b4      	ldr	r4, [r6, #8]
    3e98:	6871      	ldr	r1, [r6, #4]
    3e9a:	3901      	subs	r1, #1
    3e9c:	d404      	bmi.n	3ea8 <__sfp+0x28>
    3e9e:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    3ea2:	b185      	cbz	r5, 3ec6 <__sfp+0x46>
    3ea4:	3468      	adds	r4, #104	; 0x68
    3ea6:	e7f8      	b.n	3e9a <__sfp+0x1a>
    3ea8:	6832      	ldr	r2, [r6, #0]
    3eaa:	b10a      	cbz	r2, 3eb0 <__sfp+0x30>
    3eac:	6836      	ldr	r6, [r6, #0]
    3eae:	e7f2      	b.n	3e96 <__sfp+0x16>
    3eb0:	4638      	mov	r0, r7
    3eb2:	2104      	movs	r1, #4
    3eb4:	f7ff ffa2 	bl	3dfc <__sfmoreglue>
    3eb8:	6030      	str	r0, [r6, #0]
    3eba:	2800      	cmp	r0, #0
    3ebc:	d1f6      	bne.n	3eac <__sfp+0x2c>
    3ebe:	240c      	movs	r4, #12
    3ec0:	603c      	str	r4, [r7, #0]
    3ec2:	4604      	mov	r4, r0
    3ec4:	e015      	b.n	3ef2 <__sfp+0x72>
    3ec6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3eca:	2001      	movs	r0, #1
    3ecc:	81a0      	strh	r0, [r4, #12]
    3ece:	81e3      	strh	r3, [r4, #14]
    3ed0:	6665      	str	r5, [r4, #100]	; 0x64
    3ed2:	6025      	str	r5, [r4, #0]
    3ed4:	60a5      	str	r5, [r4, #8]
    3ed6:	6065      	str	r5, [r4, #4]
    3ed8:	6125      	str	r5, [r4, #16]
    3eda:	6165      	str	r5, [r4, #20]
    3edc:	61a5      	str	r5, [r4, #24]
    3ede:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    3ee2:	4629      	mov	r1, r5
    3ee4:	2208      	movs	r2, #8
    3ee6:	f7ff f8f1 	bl	30cc <memset>
    3eea:	6325      	str	r5, [r4, #48]	; 0x30
    3eec:	6365      	str	r5, [r4, #52]	; 0x34
    3eee:	6465      	str	r5, [r4, #68]	; 0x44
    3ef0:	64a5      	str	r5, [r4, #72]	; 0x48
    3ef2:	4620      	mov	r0, r4
    3ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ef6:	bf00      	nop
    3ef8:	000057f8 	.word	0x000057f8

00003efc <__sfp_lock_acquire>:
    3efc:	4770      	bx	lr

00003efe <__sfp_lock_release>:
    3efe:	4770      	bx	lr

00003f00 <__sinit_lock_acquire>:
    3f00:	4770      	bx	lr

00003f02 <__sinit_lock_release>:
    3f02:	4770      	bx	lr

00003f04 <__fp_lock_all>:
    3f04:	4b02      	ldr	r3, [pc, #8]	; (3f10 <__fp_lock_all+0xc>)
    3f06:	4903      	ldr	r1, [pc, #12]	; (3f14 <__fp_lock_all+0x10>)
    3f08:	6818      	ldr	r0, [r3, #0]
    3f0a:	f000 bae2 	b.w	44d2 <_fwalk>
    3f0e:	bf00      	nop
    3f10:	20000040 	.word	0x20000040
    3f14:	00003da1 	.word	0x00003da1

00003f18 <__fp_unlock_all>:
    3f18:	4b02      	ldr	r3, [pc, #8]	; (3f24 <__fp_unlock_all+0xc>)
    3f1a:	4903      	ldr	r1, [pc, #12]	; (3f28 <__fp_unlock_all+0x10>)
    3f1c:	6818      	ldr	r0, [r3, #0]
    3f1e:	f000 bad8 	b.w	44d2 <_fwalk>
    3f22:	bf00      	nop
    3f24:	20000040 	.word	0x20000040
    3f28:	00003da5 	.word	0x00003da5

00003f2c <_fputwc_r>:
    3f2c:	8993      	ldrh	r3, [r2, #12]
    3f2e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3f32:	4614      	mov	r4, r2
    3f34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
    3f38:	4680      	mov	r8, r0
    3f3a:	b210      	sxth	r0, r2
    3f3c:	460e      	mov	r6, r1
    3f3e:	b930      	cbnz	r0, 3f4e <_fputwc_r+0x22>
    3f40:	6e67      	ldr	r7, [r4, #100]	; 0x64
    3f42:	f443 5100 	orr.w	r1, r3, #8192	; 0x2000
    3f46:	f447 5300 	orr.w	r3, r7, #8192	; 0x2000
    3f4a:	81a1      	strh	r1, [r4, #12]
    3f4c:	6663      	str	r3, [r4, #100]	; 0x64
    3f4e:	f000 fb29 	bl	45a4 <__locale_mb_cur_max>
    3f52:	2801      	cmp	r0, #1
    3f54:	d106      	bne.n	3f64 <_fputwc_r+0x38>
    3f56:	b12e      	cbz	r6, 3f64 <_fputwc_r+0x38>
    3f58:	2eff      	cmp	r6, #255	; 0xff
    3f5a:	d803      	bhi.n	3f64 <_fputwc_r+0x38>
    3f5c:	f88d 6004 	strb.w	r6, [sp, #4]
    3f60:	4607      	mov	r7, r0
    3f62:	e00f      	b.n	3f84 <_fputwc_r+0x58>
    3f64:	4632      	mov	r2, r6
    3f66:	4640      	mov	r0, r8
    3f68:	a901      	add	r1, sp, #4
    3f6a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    3f6e:	f001 f813 	bl	4f98 <_wcrtomb_r>
    3f72:	1c42      	adds	r2, r0, #1
    3f74:	4607      	mov	r7, r0
    3f76:	d105      	bne.n	3f84 <_fputwc_r+0x58>
    3f78:	89a2      	ldrh	r2, [r4, #12]
    3f7a:	f042 0040 	orr.w	r0, r2, #64	; 0x40
    3f7e:	81a0      	strh	r0, [r4, #12]
    3f80:	4638      	mov	r0, r7
    3f82:	e031      	b.n	3fe8 <_fputwc_r+0xbc>
    3f84:	2500      	movs	r5, #0
    3f86:	42bd      	cmp	r5, r7
    3f88:	d02a      	beq.n	3fe0 <_fputwc_r+0xb4>
    3f8a:	68a1      	ldr	r1, [r4, #8]
    3f8c:	1e4a      	subs	r2, r1, #1
    3f8e:	2a00      	cmp	r2, #0
    3f90:	60a2      	str	r2, [r4, #8]
    3f92:	ab01      	add	r3, sp, #4
    3f94:	da1a      	bge.n	3fcc <_fputwc_r+0xa0>
    3f96:	69a0      	ldr	r0, [r4, #24]
    3f98:	4282      	cmp	r2, r0
    3f9a:	db0c      	blt.n	3fb6 <_fputwc_r+0x8a>
    3f9c:	6821      	ldr	r1, [r4, #0]
    3f9e:	5d5a      	ldrb	r2, [r3, r5]
    3fa0:	700a      	strb	r2, [r1, #0]
    3fa2:	6823      	ldr	r3, [r4, #0]
    3fa4:	7819      	ldrb	r1, [r3, #0]
    3fa6:	290a      	cmp	r1, #10
    3fa8:	d003      	beq.n	3fb2 <_fputwc_r+0x86>
    3faa:	3301      	adds	r3, #1
    3fac:	2200      	movs	r2, #0
    3fae:	6023      	str	r3, [r4, #0]
    3fb0:	e013      	b.n	3fda <_fputwc_r+0xae>
    3fb2:	4640      	mov	r0, r8
    3fb4:	e001      	b.n	3fba <_fputwc_r+0x8e>
    3fb6:	5d59      	ldrb	r1, [r3, r5]
    3fb8:	4640      	mov	r0, r8
    3fba:	4622      	mov	r2, r4
    3fbc:	f000 ff92 	bl	4ee4 <__swbuf_r>
    3fc0:	f1b0 31ff 	subs.w	r1, r0, #4294967295
    3fc4:	4248      	negs	r0, r1
    3fc6:	eb50 0201 	adcs.w	r2, r0, r1
    3fca:	e006      	b.n	3fda <_fputwc_r+0xae>
    3fcc:	6820      	ldr	r0, [r4, #0]
    3fce:	5d59      	ldrb	r1, [r3, r5]
    3fd0:	7001      	strb	r1, [r0, #0]
    3fd2:	6822      	ldr	r2, [r4, #0]
    3fd4:	1c53      	adds	r3, r2, #1
    3fd6:	6023      	str	r3, [r4, #0]
    3fd8:	e000      	b.n	3fdc <_fputwc_r+0xb0>
    3fda:	b91a      	cbnz	r2, 3fe4 <_fputwc_r+0xb8>
    3fdc:	3501      	adds	r5, #1
    3fde:	e7d2      	b.n	3f86 <_fputwc_r+0x5a>
    3fe0:	4630      	mov	r0, r6
    3fe2:	e001      	b.n	3fe8 <_fputwc_r+0xbc>
    3fe4:	f04f 30ff 	mov.w	r0, #4294967295
    3fe8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

00003fec <fputwc>:
    3fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3fee:	4c08      	ldr	r4, [pc, #32]	; (4010 <fputwc+0x24>)
    3ff0:	4607      	mov	r7, r0
    3ff2:	6820      	ldr	r0, [r4, #0]
    3ff4:	460e      	mov	r6, r1
    3ff6:	b118      	cbz	r0, 4000 <fputwc+0x14>
    3ff8:	6b85      	ldr	r5, [r0, #56]	; 0x38
    3ffa:	b90d      	cbnz	r5, 4000 <fputwc+0x14>
    3ffc:	f7ff ff1a 	bl	3e34 <__sinit>
    4000:	6820      	ldr	r0, [r4, #0]
    4002:	4639      	mov	r1, r7
    4004:	4632      	mov	r2, r6
    4006:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    400a:	f7ff bf8f 	b.w	3f2c <_fputwc_r>
    400e:	bf00      	nop
    4010:	20000040 	.word	0x20000040

00004014 <_malloc_trim_r>:
    4014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4016:	4d23      	ldr	r5, [pc, #140]	; (40a4 <_malloc_trim_r+0x90>)
    4018:	460e      	mov	r6, r1
    401a:	4604      	mov	r4, r0
    401c:	f000 fd8f 	bl	4b3e <__malloc_lock>
    4020:	68ab      	ldr	r3, [r5, #8]
    4022:	685f      	ldr	r7, [r3, #4]
    4024:	f027 0703 	bic.w	r7, r7, #3
    4028:	f607 70ef 	addw	r0, r7, #4079	; 0xfef
    402c:	1b81      	subs	r1, r0, r6
    402e:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
    4032:	f022 060f 	bic.w	r6, r2, #15
    4036:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
    403a:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
    403e:	da04      	bge.n	404a <_malloc_trim_r+0x36>
    4040:	4620      	mov	r0, r4
    4042:	f000 fd7d 	bl	4b40 <__malloc_unlock>
    4046:	2000      	movs	r0, #0
    4048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    404a:	2100      	movs	r1, #0
    404c:	4620      	mov	r0, r4
    404e:	f000 fee7 	bl	4e20 <_sbrk_r>
    4052:	68ab      	ldr	r3, [r5, #8]
    4054:	19d9      	adds	r1, r3, r7
    4056:	4288      	cmp	r0, r1
    4058:	d1f2      	bne.n	4040 <_malloc_trim_r+0x2c>
    405a:	4271      	negs	r1, r6
    405c:	4620      	mov	r0, r4
    405e:	f000 fedf 	bl	4e20 <_sbrk_r>
    4062:	3001      	adds	r0, #1
    4064:	d110      	bne.n	4088 <_malloc_trim_r+0x74>
    4066:	2100      	movs	r1, #0
    4068:	4620      	mov	r0, r4
    406a:	f000 fed9 	bl	4e20 <_sbrk_r>
    406e:	68ab      	ldr	r3, [r5, #8]
    4070:	1ac2      	subs	r2, r0, r3
    4072:	2a0f      	cmp	r2, #15
    4074:	dde4      	ble.n	4040 <_malloc_trim_r+0x2c>
    4076:	490c      	ldr	r1, [pc, #48]	; (40a8 <_malloc_trim_r+0x94>)
    4078:	6809      	ldr	r1, [r1, #0]
    407a:	1a40      	subs	r0, r0, r1
    407c:	490b      	ldr	r1, [pc, #44]	; (40ac <_malloc_trim_r+0x98>)
    407e:	f042 0201 	orr.w	r2, r2, #1
    4082:	6008      	str	r0, [r1, #0]
    4084:	605a      	str	r2, [r3, #4]
    4086:	e7db      	b.n	4040 <_malloc_trim_r+0x2c>
    4088:	4b08      	ldr	r3, [pc, #32]	; (40ac <_malloc_trim_r+0x98>)
    408a:	68a8      	ldr	r0, [r5, #8]
    408c:	681a      	ldr	r2, [r3, #0]
    408e:	1bbf      	subs	r7, r7, r6
    4090:	f047 0701 	orr.w	r7, r7, #1
    4094:	6047      	str	r7, [r0, #4]
    4096:	1b96      	subs	r6, r2, r6
    4098:	4620      	mov	r0, r4
    409a:	601e      	str	r6, [r3, #0]
    409c:	f000 fd50 	bl	4b40 <__malloc_unlock>
    40a0:	2001      	movs	r0, #1
    40a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40a4:	200004ec 	.word	0x200004ec
    40a8:	200008f4 	.word	0x200008f4
    40ac:	20000998 	.word	0x20000998

000040b0 <_free_r>:
    40b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40b2:	4606      	mov	r6, r0
    40b4:	460d      	mov	r5, r1
    40b6:	2900      	cmp	r1, #0
    40b8:	f000 80a6 	beq.w	4208 <_free_r+0x158>
    40bc:	f000 fd3f 	bl	4b3e <__malloc_lock>
    40c0:	f855 cc04 	ldr.w	ip, [r5, #-4]
    40c4:	4f51      	ldr	r7, [pc, #324]	; (420c <_free_r+0x15c>)
    40c6:	f1a5 0308 	sub.w	r3, r5, #8
    40ca:	f02c 0201 	bic.w	r2, ip, #1
    40ce:	189c      	adds	r4, r3, r2
    40d0:	68b9      	ldr	r1, [r7, #8]
    40d2:	6860      	ldr	r0, [r4, #4]
    40d4:	428c      	cmp	r4, r1
    40d6:	f020 0003 	bic.w	r0, r0, #3
    40da:	f00c 0101 	and.w	r1, ip, #1
    40de:	d11c      	bne.n	411a <_free_r+0x6a>
    40e0:	1882      	adds	r2, r0, r2
    40e2:	b939      	cbnz	r1, 40f4 <_free_r+0x44>
    40e4:	f855 1c08 	ldr.w	r1, [r5, #-8]
    40e8:	1a5b      	subs	r3, r3, r1
    40ea:	1852      	adds	r2, r2, r1
    40ec:	6898      	ldr	r0, [r3, #8]
    40ee:	68d9      	ldr	r1, [r3, #12]
    40f0:	60c1      	str	r1, [r0, #12]
    40f2:	6088      	str	r0, [r1, #8]
    40f4:	4845      	ldr	r0, [pc, #276]	; (420c <_free_r+0x15c>)
    40f6:	f042 0101 	orr.w	r1, r2, #1
    40fa:	6059      	str	r1, [r3, #4]
    40fc:	6083      	str	r3, [r0, #8]
    40fe:	4b44      	ldr	r3, [pc, #272]	; (4210 <_free_r+0x160>)
    4100:	6819      	ldr	r1, [r3, #0]
    4102:	428a      	cmp	r2, r1
    4104:	d304      	bcc.n	4110 <_free_r+0x60>
    4106:	4a43      	ldr	r2, [pc, #268]	; (4214 <_free_r+0x164>)
    4108:	4630      	mov	r0, r6
    410a:	6811      	ldr	r1, [r2, #0]
    410c:	f7ff ff82 	bl	4014 <_malloc_trim_r>
    4110:	4630      	mov	r0, r6
    4112:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4116:	f000 bd13 	b.w	4b40 <__malloc_unlock>
    411a:	6060      	str	r0, [r4, #4]
    411c:	b959      	cbnz	r1, 4136 <_free_r+0x86>
    411e:	f855 5c08 	ldr.w	r5, [r5, #-8]
    4122:	1b5b      	subs	r3, r3, r5
    4124:	1952      	adds	r2, r2, r5
    4126:	689d      	ldr	r5, [r3, #8]
    4128:	3708      	adds	r7, #8
    412a:	42bd      	cmp	r5, r7
    412c:	d005      	beq.n	413a <_free_r+0x8a>
    412e:	68df      	ldr	r7, [r3, #12]
    4130:	60ef      	str	r7, [r5, #12]
    4132:	60bd      	str	r5, [r7, #8]
    4134:	e002      	b.n	413c <_free_r+0x8c>
    4136:	2100      	movs	r1, #0
    4138:	e000      	b.n	413c <_free_r+0x8c>
    413a:	2101      	movs	r1, #1
    413c:	1825      	adds	r5, r4, r0
    413e:	686d      	ldr	r5, [r5, #4]
    4140:	f015 0f01 	tst.w	r5, #1
    4144:	d10f      	bne.n	4166 <_free_r+0xb6>
    4146:	1812      	adds	r2, r2, r0
    4148:	b949      	cbnz	r1, 415e <_free_r+0xae>
    414a:	68a0      	ldr	r0, [r4, #8]
    414c:	4d32      	ldr	r5, [pc, #200]	; (4218 <_free_r+0x168>)
    414e:	42a8      	cmp	r0, r5
    4150:	d105      	bne.n	415e <_free_r+0xae>
    4152:	60eb      	str	r3, [r5, #12]
    4154:	60ab      	str	r3, [r5, #8]
    4156:	60d8      	str	r0, [r3, #12]
    4158:	6098      	str	r0, [r3, #8]
    415a:	2101      	movs	r1, #1
    415c:	e003      	b.n	4166 <_free_r+0xb6>
    415e:	68e0      	ldr	r0, [r4, #12]
    4160:	68a4      	ldr	r4, [r4, #8]
    4162:	60e0      	str	r0, [r4, #12]
    4164:	6084      	str	r4, [r0, #8]
    4166:	f042 0001 	orr.w	r0, r2, #1
    416a:	6058      	str	r0, [r3, #4]
    416c:	509a      	str	r2, [r3, r2]
    416e:	2900      	cmp	r1, #0
    4170:	d1ce      	bne.n	4110 <_free_r+0x60>
    4172:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    4176:	d20c      	bcs.n	4192 <_free_r+0xe2>
    4178:	4924      	ldr	r1, [pc, #144]	; (420c <_free_r+0x15c>)
    417a:	08d2      	lsrs	r2, r2, #3
    417c:	1090      	asrs	r0, r2, #2
    417e:	2401      	movs	r4, #1
    4180:	fa04 f400 	lsl.w	r4, r4, r0
    4184:	6848      	ldr	r0, [r1, #4]
    4186:	4320      	orrs	r0, r4
    4188:	6048      	str	r0, [r1, #4]
    418a:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    418e:	6881      	ldr	r1, [r0, #8]
    4190:	e035      	b.n	41fe <_free_r+0x14e>
    4192:	0a54      	lsrs	r4, r2, #9
    4194:	2c04      	cmp	r4, #4
    4196:	d802      	bhi.n	419e <_free_r+0xee>
    4198:	0994      	lsrs	r4, r2, #6
    419a:	3438      	adds	r4, #56	; 0x38
    419c:	e016      	b.n	41cc <_free_r+0x11c>
    419e:	2c14      	cmp	r4, #20
    41a0:	d801      	bhi.n	41a6 <_free_r+0xf6>
    41a2:	345b      	adds	r4, #91	; 0x5b
    41a4:	e012      	b.n	41cc <_free_r+0x11c>
    41a6:	2c54      	cmp	r4, #84	; 0x54
    41a8:	d802      	bhi.n	41b0 <_free_r+0x100>
    41aa:	0b14      	lsrs	r4, r2, #12
    41ac:	346e      	adds	r4, #110	; 0x6e
    41ae:	e00d      	b.n	41cc <_free_r+0x11c>
    41b0:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
    41b4:	d802      	bhi.n	41bc <_free_r+0x10c>
    41b6:	0bd4      	lsrs	r4, r2, #15
    41b8:	3477      	adds	r4, #119	; 0x77
    41ba:	e007      	b.n	41cc <_free_r+0x11c>
    41bc:	f240 5554 	movw	r5, #1364	; 0x554
    41c0:	42ac      	cmp	r4, r5
    41c2:	d802      	bhi.n	41ca <_free_r+0x11a>
    41c4:	0c94      	lsrs	r4, r2, #18
    41c6:	347c      	adds	r4, #124	; 0x7c
    41c8:	e000      	b.n	41cc <_free_r+0x11c>
    41ca:	247e      	movs	r4, #126	; 0x7e
    41cc:	4d0f      	ldr	r5, [pc, #60]	; (420c <_free_r+0x15c>)
    41ce:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    41d2:	6881      	ldr	r1, [r0, #8]
    41d4:	4281      	cmp	r1, r0
    41d6:	d10c      	bne.n	41f2 <_free_r+0x142>
    41d8:	6868      	ldr	r0, [r5, #4]
    41da:	2201      	movs	r2, #1
    41dc:	10a4      	asrs	r4, r4, #2
    41de:	fa02 f404 	lsl.w	r4, r2, r4
    41e2:	ea44 0200 	orr.w	r2, r4, r0
    41e6:	606a      	str	r2, [r5, #4]
    41e8:	4608      	mov	r0, r1
    41ea:	e008      	b.n	41fe <_free_r+0x14e>
    41ec:	6889      	ldr	r1, [r1, #8]
    41ee:	4281      	cmp	r1, r0
    41f0:	d004      	beq.n	41fc <_free_r+0x14c>
    41f2:	684c      	ldr	r4, [r1, #4]
    41f4:	f024 0403 	bic.w	r4, r4, #3
    41f8:	42a2      	cmp	r2, r4
    41fa:	d3f7      	bcc.n	41ec <_free_r+0x13c>
    41fc:	68c8      	ldr	r0, [r1, #12]
    41fe:	60d8      	str	r0, [r3, #12]
    4200:	6099      	str	r1, [r3, #8]
    4202:	6083      	str	r3, [r0, #8]
    4204:	60cb      	str	r3, [r1, #12]
    4206:	e783      	b.n	4110 <_free_r+0x60>
    4208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    420a:	bf00      	nop
    420c:	200004ec 	.word	0x200004ec
    4210:	200008f8 	.word	0x200008f8
    4214:	20000994 	.word	0x20000994
    4218:	200004f4 	.word	0x200004f4

0000421c <__sfvwrite_r>:
    421c:	6893      	ldr	r3, [r2, #8]
    421e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4222:	4606      	mov	r6, r0
    4224:	460c      	mov	r4, r1
    4226:	4691      	mov	r9, r2
    4228:	b90b      	cbnz	r3, 422e <__sfvwrite_r+0x12>
    422a:	2000      	movs	r0, #0
    422c:	e14f      	b.n	44ce <__sfvwrite_r+0x2b2>
    422e:	8988      	ldrh	r0, [r1, #12]
    4230:	f000 0108 	and.w	r1, r0, #8
    4234:	b20a      	sxth	r2, r1
    4236:	b10a      	cbz	r2, 423c <__sfvwrite_r+0x20>
    4238:	6923      	ldr	r3, [r4, #16]
    423a:	b95b      	cbnz	r3, 4254 <__sfvwrite_r+0x38>
    423c:	4630      	mov	r0, r6
    423e:	4621      	mov	r1, r4
    4240:	f7ff fc98 	bl	3b74 <__swsetup_r>
    4244:	b130      	cbz	r0, 4254 <__sfvwrite_r+0x38>
    4246:	89a1      	ldrh	r1, [r4, #12]
    4248:	2209      	movs	r2, #9
    424a:	f041 0040 	orr.w	r0, r1, #64	; 0x40
    424e:	81a0      	strh	r0, [r4, #12]
    4250:	6032      	str	r2, [r6, #0]
    4252:	e13a      	b.n	44ca <__sfvwrite_r+0x2ae>
    4254:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
    4258:	f8d9 8000 	ldr.w	r8, [r9]
    425c:	f00a 0c02 	and.w	ip, sl, #2
    4260:	fa0f f58c 	sxth.w	r5, ip
    4264:	b315      	cbz	r5, 42ac <__sfvwrite_r+0x90>
    4266:	f04f 0a00 	mov.w	sl, #0
    426a:	4657      	mov	r7, sl
    426c:	b937      	cbnz	r7, 427c <__sfvwrite_r+0x60>
    426e:	f8d8 a000 	ldr.w	sl, [r8]
    4272:	f8d8 7004 	ldr.w	r7, [r8, #4]
    4276:	f108 0808 	add.w	r8, r8, #8
    427a:	e7f7      	b.n	426c <__sfvwrite_r+0x50>
    427c:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    4280:	bf34      	ite	cc
    4282:	463b      	movcc	r3, r7
    4284:	f44f 6380 	movcs.w	r3, #1024	; 0x400
    4288:	4630      	mov	r0, r6
    428a:	69e1      	ldr	r1, [r4, #28]
    428c:	6a65      	ldr	r5, [r4, #36]	; 0x24
    428e:	4652      	mov	r2, sl
    4290:	47a8      	blx	r5
    4292:	2800      	cmp	r0, #0
    4294:	f340 8115 	ble.w	44c2 <__sfvwrite_r+0x2a6>
    4298:	f8d9 1008 	ldr.w	r1, [r9, #8]
    429c:	4482      	add	sl, r0
    429e:	1a3f      	subs	r7, r7, r0
    42a0:	1a08      	subs	r0, r1, r0
    42a2:	f8c9 0008 	str.w	r0, [r9, #8]
    42a6:	2800      	cmp	r0, #0
    42a8:	d1e0      	bne.n	426c <__sfvwrite_r+0x50>
    42aa:	e7be      	b.n	422a <__sfvwrite_r+0xe>
    42ac:	f01a 0a01 	ands.w	sl, sl, #1
    42b0:	d004      	beq.n	42bc <__sfvwrite_r+0xa0>
    42b2:	46ab      	mov	fp, r5
    42b4:	9501      	str	r5, [sp, #4]
    42b6:	462f      	mov	r7, r5
    42b8:	46aa      	mov	sl, r5
    42ba:	e0c7      	b.n	444c <__sfvwrite_r+0x230>
    42bc:	4655      	mov	r5, sl
    42be:	b935      	cbnz	r5, 42ce <__sfvwrite_r+0xb2>
    42c0:	f8d8 a000 	ldr.w	sl, [r8]
    42c4:	f8d8 5004 	ldr.w	r5, [r8, #4]
    42c8:	f108 0808 	add.w	r8, r8, #8
    42cc:	e7f7      	b.n	42be <__sfvwrite_r+0xa2>
    42ce:	89a2      	ldrh	r2, [r4, #12]
    42d0:	f8d4 b008 	ldr.w	fp, [r4, #8]
    42d4:	f402 7000 	and.w	r0, r2, #512	; 0x200
    42d8:	b203      	sxth	r3, r0
    42da:	2b00      	cmp	r3, #0
    42dc:	d052      	beq.n	4384 <__sfvwrite_r+0x168>
    42de:	455d      	cmp	r5, fp
    42e0:	d340      	bcc.n	4364 <__sfvwrite_r+0x148>
    42e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
    42e6:	d03b      	beq.n	4360 <__sfvwrite_r+0x144>
    42e8:	6921      	ldr	r1, [r4, #16]
    42ea:	6827      	ldr	r7, [r4, #0]
    42ec:	6963      	ldr	r3, [r4, #20]
    42ee:	f04f 0b03 	mov.w	fp, #3
    42f2:	fb0b f303 	mul.w	r3, fp, r3
    42f6:	2002      	movs	r0, #2
    42f8:	1a7f      	subs	r7, r7, r1
    42fa:	fb93 fcf0 	sdiv	ip, r3, r0
    42fe:	1c7b      	adds	r3, r7, #1
    4300:	1958      	adds	r0, r3, r5
    4302:	f402 6280 	and.w	r2, r2, #1024	; 0x400
    4306:	4584      	cmp	ip, r0
    4308:	bf28      	it	cs
    430a:	4660      	movcs	r0, ip
    430c:	b213      	sxth	r3, r2
    430e:	9001      	str	r0, [sp, #4]
    4310:	4630      	mov	r0, r6
    4312:	b17b      	cbz	r3, 4334 <__sfvwrite_r+0x118>
    4314:	9901      	ldr	r1, [sp, #4]
    4316:	f000 f9df 	bl	46d8 <_malloc_r>
    431a:	4683      	mov	fp, r0
    431c:	b198      	cbz	r0, 4346 <__sfvwrite_r+0x12a>
    431e:	6921      	ldr	r1, [r4, #16]
    4320:	463a      	mov	r2, r7
    4322:	f000 fbe9 	bl	4af8 <memcpy>
    4326:	89a1      	ldrh	r1, [r4, #12]
    4328:	f421 6090 	bic.w	r0, r1, #1152	; 0x480
    432c:	f040 0280 	orr.w	r2, r0, #128	; 0x80
    4330:	81a2      	strh	r2, [r4, #12]
    4332:	e00b      	b.n	434c <__sfvwrite_r+0x130>
    4334:	9a01      	ldr	r2, [sp, #4]
    4336:	f000 fc05 	bl	4b44 <_realloc_r>
    433a:	4683      	mov	fp, r0
    433c:	b930      	cbnz	r0, 434c <__sfvwrite_r+0x130>
    433e:	4630      	mov	r0, r6
    4340:	6921      	ldr	r1, [r4, #16]
    4342:	f7ff feb5 	bl	40b0 <_free_r>
    4346:	230c      	movs	r3, #12
    4348:	6033      	str	r3, [r6, #0]
    434a:	e0ba      	b.n	44c2 <__sfvwrite_r+0x2a6>
    434c:	9901      	ldr	r1, [sp, #4]
    434e:	f8c4 b010 	str.w	fp, [r4, #16]
    4352:	eb0b 0307 	add.w	r3, fp, r7
    4356:	1bcf      	subs	r7, r1, r7
    4358:	6023      	str	r3, [r4, #0]
    435a:	6161      	str	r1, [r4, #20]
    435c:	46ab      	mov	fp, r5
    435e:	60a7      	str	r7, [r4, #8]
    4360:	455d      	cmp	r5, fp
    4362:	d200      	bcs.n	4366 <__sfvwrite_r+0x14a>
    4364:	46ab      	mov	fp, r5
    4366:	465a      	mov	r2, fp
    4368:	4651      	mov	r1, sl
    436a:	6820      	ldr	r0, [r4, #0]
    436c:	f000 fbcd 	bl	4b0a <memmove>
    4370:	68a0      	ldr	r0, [r4, #8]
    4372:	6823      	ldr	r3, [r4, #0]
    4374:	ebcb 0200 	rsb	r2, fp, r0
    4378:	eb03 010b 	add.w	r1, r3, fp
    437c:	60a2      	str	r2, [r4, #8]
    437e:	6021      	str	r1, [r4, #0]
    4380:	46ab      	mov	fp, r5
    4382:	e02a      	b.n	43da <__sfvwrite_r+0x1be>
    4384:	6820      	ldr	r0, [r4, #0]
    4386:	6921      	ldr	r1, [r4, #16]
    4388:	4288      	cmp	r0, r1
    438a:	d90f      	bls.n	43ac <__sfvwrite_r+0x190>
    438c:	455d      	cmp	r5, fp
    438e:	d90d      	bls.n	43ac <__sfvwrite_r+0x190>
    4390:	4651      	mov	r1, sl
    4392:	465a      	mov	r2, fp
    4394:	f000 fbb9 	bl	4b0a <memmove>
    4398:	6822      	ldr	r2, [r4, #0]
    439a:	eb02 000b 	add.w	r0, r2, fp
    439e:	6020      	str	r0, [r4, #0]
    43a0:	4621      	mov	r1, r4
    43a2:	4630      	mov	r0, r6
    43a4:	f7ff fc52 	bl	3c4c <_fflush_r>
    43a8:	b1b8      	cbz	r0, 43da <__sfvwrite_r+0x1be>
    43aa:	e08a      	b.n	44c2 <__sfvwrite_r+0x2a6>
    43ac:	6963      	ldr	r3, [r4, #20]
    43ae:	429d      	cmp	r5, r3
    43b0:	d308      	bcc.n	43c4 <__sfvwrite_r+0x1a8>
    43b2:	6a67      	ldr	r7, [r4, #36]	; 0x24
    43b4:	69e1      	ldr	r1, [r4, #28]
    43b6:	4630      	mov	r0, r6
    43b8:	4652      	mov	r2, sl
    43ba:	47b8      	blx	r7
    43bc:	f1b0 0b00 	subs.w	fp, r0, #0
    43c0:	dc0b      	bgt.n	43da <__sfvwrite_r+0x1be>
    43c2:	e07e      	b.n	44c2 <__sfvwrite_r+0x2a6>
    43c4:	4651      	mov	r1, sl
    43c6:	462a      	mov	r2, r5
    43c8:	f000 fb9f 	bl	4b0a <memmove>
    43cc:	68a2      	ldr	r2, [r4, #8]
    43ce:	6823      	ldr	r3, [r4, #0]
    43d0:	1b50      	subs	r0, r2, r5
    43d2:	1959      	adds	r1, r3, r5
    43d4:	46ab      	mov	fp, r5
    43d6:	60a0      	str	r0, [r4, #8]
    43d8:	6021      	str	r1, [r4, #0]
    43da:	f8d9 0008 	ldr.w	r0, [r9, #8]
    43de:	ebcb 0200 	rsb	r2, fp, r0
    43e2:	44da      	add	sl, fp
    43e4:	ebcb 0505 	rsb	r5, fp, r5
    43e8:	f8c9 2008 	str.w	r2, [r9, #8]
    43ec:	2a00      	cmp	r2, #0
    43ee:	f47f af66 	bne.w	42be <__sfvwrite_r+0xa2>
    43f2:	e71a      	b.n	422a <__sfvwrite_r+0xe>
    43f4:	9801      	ldr	r0, [sp, #4]
    43f6:	2800      	cmp	r0, #0
    43f8:	d032      	beq.n	4460 <__sfvwrite_r+0x244>
    43fa:	6820      	ldr	r0, [r4, #0]
    43fc:	6921      	ldr	r1, [r4, #16]
    43fe:	68a5      	ldr	r5, [r4, #8]
    4400:	f8d4 e014 	ldr.w	lr, [r4, #20]
    4404:	45d3      	cmp	fp, sl
    4406:	bf34      	ite	cc
    4408:	465b      	movcc	r3, fp
    440a:	4653      	movcs	r3, sl
    440c:	4288      	cmp	r0, r1
    440e:	d937      	bls.n	4480 <__sfvwrite_r+0x264>
    4410:	4475      	add	r5, lr
    4412:	42ab      	cmp	r3, r5
    4414:	dd34      	ble.n	4480 <__sfvwrite_r+0x264>
    4416:	4639      	mov	r1, r7
    4418:	462a      	mov	r2, r5
    441a:	f000 fb76 	bl	4b0a <memmove>
    441e:	6820      	ldr	r0, [r4, #0]
    4420:	1943      	adds	r3, r0, r5
    4422:	6023      	str	r3, [r4, #0]
    4424:	4630      	mov	r0, r6
    4426:	4621      	mov	r1, r4
    4428:	f7ff fc10 	bl	3c4c <_fflush_r>
    442c:	2800      	cmp	r0, #0
    442e:	d148      	bne.n	44c2 <__sfvwrite_r+0x2a6>
    4430:	ebbb 0b05 	subs.w	fp, fp, r5
    4434:	d03d      	beq.n	44b2 <__sfvwrite_r+0x296>
    4436:	f8d9 2008 	ldr.w	r2, [r9, #8]
    443a:	197f      	adds	r7, r7, r5
    443c:	ebc5 0a0a 	rsb	sl, r5, sl
    4440:	1b55      	subs	r5, r2, r5
    4442:	f8c9 5008 	str.w	r5, [r9, #8]
    4446:	2d00      	cmp	r5, #0
    4448:	f43f aeef 	beq.w	422a <__sfvwrite_r+0xe>
    444c:	f1ba 0f00 	cmp.w	sl, #0
    4450:	d1d0      	bne.n	43f4 <__sfvwrite_r+0x1d8>
    4452:	2100      	movs	r1, #0
    4454:	e898 0480 	ldmia.w	r8, {r7, sl}
    4458:	9101      	str	r1, [sp, #4]
    445a:	f108 0808 	add.w	r8, r8, #8
    445e:	e7f5      	b.n	444c <__sfvwrite_r+0x230>
    4460:	4638      	mov	r0, r7
    4462:	210a      	movs	r1, #10
    4464:	4652      	mov	r2, sl
    4466:	f000 fb39 	bl	4adc <memchr>
    446a:	b120      	cbz	r0, 4476 <__sfvwrite_r+0x25a>
    446c:	f100 0101 	add.w	r1, r0, #1
    4470:	ebc7 0b01 	rsb	fp, r7, r1
    4474:	e001      	b.n	447a <__sfvwrite_r+0x25e>
    4476:	f10a 0b01 	add.w	fp, sl, #1
    447a:	2201      	movs	r2, #1
    447c:	9201      	str	r2, [sp, #4]
    447e:	e7bc      	b.n	43fa <__sfvwrite_r+0x1de>
    4480:	4573      	cmp	r3, lr
    4482:	db08      	blt.n	4496 <__sfvwrite_r+0x27a>
    4484:	6a65      	ldr	r5, [r4, #36]	; 0x24
    4486:	69e1      	ldr	r1, [r4, #28]
    4488:	4630      	mov	r0, r6
    448a:	463a      	mov	r2, r7
    448c:	4673      	mov	r3, lr
    448e:	47a8      	blx	r5
    4490:	1e05      	subs	r5, r0, #0
    4492:	dccd      	bgt.n	4430 <__sfvwrite_r+0x214>
    4494:	e015      	b.n	44c2 <__sfvwrite_r+0x2a6>
    4496:	461a      	mov	r2, r3
    4498:	4639      	mov	r1, r7
    449a:	9300      	str	r3, [sp, #0]
    449c:	f000 fb35 	bl	4b0a <memmove>
    44a0:	9b00      	ldr	r3, [sp, #0]
    44a2:	6825      	ldr	r5, [r4, #0]
    44a4:	68a0      	ldr	r0, [r4, #8]
    44a6:	18e9      	adds	r1, r5, r3
    44a8:	1ac2      	subs	r2, r0, r3
    44aa:	60a2      	str	r2, [r4, #8]
    44ac:	6021      	str	r1, [r4, #0]
    44ae:	461d      	mov	r5, r3
    44b0:	e7be      	b.n	4430 <__sfvwrite_r+0x214>
    44b2:	4630      	mov	r0, r6
    44b4:	4621      	mov	r1, r4
    44b6:	f7ff fbc9 	bl	3c4c <_fflush_r>
    44ba:	b910      	cbnz	r0, 44c2 <__sfvwrite_r+0x2a6>
    44bc:	f8cd b004 	str.w	fp, [sp, #4]
    44c0:	e7b9      	b.n	4436 <__sfvwrite_r+0x21a>
    44c2:	89a2      	ldrh	r2, [r4, #12]
    44c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
    44c8:	81a3      	strh	r3, [r4, #12]
    44ca:	f04f 30ff 	mov.w	r0, #4294967295
    44ce:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000044d2 <_fwalk>:
    44d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    44d6:	4604      	mov	r4, r0
    44d8:	4688      	mov	r8, r1
    44da:	f7ff fd0f 	bl	3efc <__sfp_lock_acquire>
    44de:	f504 7438 	add.w	r4, r4, #736	; 0x2e0
    44e2:	2600      	movs	r6, #0
    44e4:	b18c      	cbz	r4, 450a <_fwalk+0x38>
    44e6:	68a5      	ldr	r5, [r4, #8]
    44e8:	6867      	ldr	r7, [r4, #4]
    44ea:	3f01      	subs	r7, #1
    44ec:	d40b      	bmi.n	4506 <_fwalk+0x34>
    44ee:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
    44f2:	b133      	cbz	r3, 4502 <_fwalk+0x30>
    44f4:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
    44f8:	1c43      	adds	r3, r0, #1
    44fa:	d002      	beq.n	4502 <_fwalk+0x30>
    44fc:	4628      	mov	r0, r5
    44fe:	47c0      	blx	r8
    4500:	4306      	orrs	r6, r0
    4502:	3568      	adds	r5, #104	; 0x68
    4504:	e7f1      	b.n	44ea <_fwalk+0x18>
    4506:	6824      	ldr	r4, [r4, #0]
    4508:	e7ec      	b.n	44e4 <_fwalk+0x12>
    450a:	f7ff fcf8 	bl	3efe <__sfp_lock_release>
    450e:	4630      	mov	r0, r6
    4510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004514 <_fwalk_reent>:
    4514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4518:	4680      	mov	r8, r0
    451a:	4689      	mov	r9, r1
    451c:	f7ff fcee 	bl	3efc <__sfp_lock_acquire>
    4520:	f508 7438 	add.w	r4, r8, #736	; 0x2e0
    4524:	2600      	movs	r6, #0
    4526:	b194      	cbz	r4, 454e <_fwalk_reent+0x3a>
    4528:	68a5      	ldr	r5, [r4, #8]
    452a:	6867      	ldr	r7, [r4, #4]
    452c:	3f01      	subs	r7, #1
    452e:	d40c      	bmi.n	454a <_fwalk_reent+0x36>
    4530:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
    4534:	b13b      	cbz	r3, 4546 <_fwalk_reent+0x32>
    4536:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
    453a:	1c43      	adds	r3, r0, #1
    453c:	d003      	beq.n	4546 <_fwalk_reent+0x32>
    453e:	4640      	mov	r0, r8
    4540:	4629      	mov	r1, r5
    4542:	47c8      	blx	r9
    4544:	4306      	orrs	r6, r0
    4546:	3568      	adds	r5, #104	; 0x68
    4548:	e7f0      	b.n	452c <_fwalk_reent+0x18>
    454a:	6824      	ldr	r4, [r4, #0]
    454c:	e7eb      	b.n	4526 <_fwalk_reent+0x12>
    454e:	f7ff fcd6 	bl	3efe <__sfp_lock_release>
    4552:	4630      	mov	r0, r6
    4554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00004558 <_setlocale_r>:
    4558:	b510      	push	{r4, lr}
    455a:	4614      	mov	r4, r2
    455c:	b90a      	cbnz	r2, 4562 <_setlocale_r+0xa>
    455e:	480c      	ldr	r0, [pc, #48]	; (4590 <_setlocale_r+0x38>)
    4560:	bd10      	pop	{r4, pc}
    4562:	4610      	mov	r0, r2
    4564:	490b      	ldr	r1, [pc, #44]	; (4594 <_setlocale_r+0x3c>)
    4566:	f000 fcb2 	bl	4ece <strcmp>
    456a:	2800      	cmp	r0, #0
    456c:	d0f7      	beq.n	455e <_setlocale_r+0x6>
    456e:	4620      	mov	r0, r4
    4570:	4907      	ldr	r1, [pc, #28]	; (4590 <_setlocale_r+0x38>)
    4572:	f000 fcac 	bl	4ece <strcmp>
    4576:	2800      	cmp	r0, #0
    4578:	d0f1      	beq.n	455e <_setlocale_r+0x6>
    457a:	4620      	mov	r0, r4
    457c:	4906      	ldr	r1, [pc, #24]	; (4598 <_setlocale_r+0x40>)
    457e:	f000 fca6 	bl	4ece <strcmp>
    4582:	4b03      	ldr	r3, [pc, #12]	; (4590 <_setlocale_r+0x38>)
    4584:	2800      	cmp	r0, #0
    4586:	bf0c      	ite	eq
    4588:	4618      	moveq	r0, r3
    458a:	2000      	movne	r0, #0
    458c:	bd10      	pop	{r4, pc}
    458e:	bf00      	nop
    4590:	000057fc 	.word	0x000057fc
    4594:	00005842 	.word	0x00005842
    4598:	000057ff 	.word	0x000057ff

0000459c <__locale_charset>:
    459c:	4800      	ldr	r0, [pc, #0]	; (45a0 <__locale_charset+0x4>)
    459e:	4770      	bx	lr
    45a0:	20000470 	.word	0x20000470

000045a4 <__locale_mb_cur_max>:
    45a4:	4b01      	ldr	r3, [pc, #4]	; (45ac <__locale_mb_cur_max+0x8>)
    45a6:	6a18      	ldr	r0, [r3, #32]
    45a8:	4770      	bx	lr
    45aa:	bf00      	nop
    45ac:	20000470 	.word	0x20000470

000045b0 <__locale_msgcharset>:
    45b0:	4800      	ldr	r0, [pc, #0]	; (45b4 <__locale_msgcharset+0x4>)
    45b2:	4770      	bx	lr
    45b4:	20000494 	.word	0x20000494

000045b8 <__locale_cjk_lang>:
    45b8:	2000      	movs	r0, #0
    45ba:	4770      	bx	lr

000045bc <_localeconv_r>:
    45bc:	4800      	ldr	r0, [pc, #0]	; (45c0 <_localeconv_r+0x4>)
    45be:	4770      	bx	lr
    45c0:	200004b4 	.word	0x200004b4

000045c4 <setlocale>:
    45c4:	460a      	mov	r2, r1
    45c6:	4903      	ldr	r1, [pc, #12]	; (45d4 <setlocale+0x10>)
    45c8:	4603      	mov	r3, r0
    45ca:	6808      	ldr	r0, [r1, #0]
    45cc:	4619      	mov	r1, r3
    45ce:	f7ff bfc3 	b.w	4558 <_setlocale_r>
    45d2:	bf00      	nop
    45d4:	20000040 	.word	0x20000040

000045d8 <localeconv>:
    45d8:	4800      	ldr	r0, [pc, #0]	; (45dc <localeconv+0x4>)
    45da:	4770      	bx	lr
    45dc:	200004b4 	.word	0x200004b4

000045e0 <__smakebuf_r>:
    45e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    45e2:	898b      	ldrh	r3, [r1, #12]
    45e4:	460c      	mov	r4, r1
    45e6:	f003 0102 	and.w	r1, r3, #2
    45ea:	b20a      	sxth	r2, r1
    45ec:	b091      	sub	sp, #68	; 0x44
    45ee:	4606      	mov	r6, r0
    45f0:	2a00      	cmp	r2, #0
    45f2:	d13f      	bne.n	4674 <__smakebuf_r+0x94>
    45f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    45f8:	2900      	cmp	r1, #0
    45fa:	da0d      	bge.n	4618 <__smakebuf_r+0x38>
    45fc:	89a7      	ldrh	r7, [r4, #12]
    45fe:	f007 0280 	and.w	r2, r7, #128	; 0x80
    4602:	f447 6300 	orr.w	r3, r7, #2048	; 0x800
    4606:	b210      	sxth	r0, r2
    4608:	2800      	cmp	r0, #0
    460a:	bf0c      	ite	eq
    460c:	f44f 6580 	moveq.w	r5, #1024	; 0x400
    4610:	2540      	movne	r5, #64	; 0x40
    4612:	81a3      	strh	r3, [r4, #12]
    4614:	2700      	movs	r7, #0
    4616:	e020      	b.n	465a <__smakebuf_r+0x7a>
    4618:	aa01      	add	r2, sp, #4
    461a:	f000 fd7f 	bl	511c <_fstat_r>
    461e:	2800      	cmp	r0, #0
    4620:	dbec      	blt.n	45fc <__smakebuf_r+0x1c>
    4622:	9802      	ldr	r0, [sp, #8]
    4624:	f400 4570 	and.w	r5, r0, #61440	; 0xf000
    4628:	f5b5 5300 	subs.w	r3, r5, #8192	; 0x2000
    462c:	425f      	negs	r7, r3
    462e:	415f      	adcs	r7, r3
    4630:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    4634:	d10b      	bne.n	464e <__smakebuf_r+0x6e>
    4636:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    4638:	4a1d      	ldr	r2, [pc, #116]	; (46b0 <__smakebuf_r+0xd0>)
    463a:	4291      	cmp	r1, r2
    463c:	d107      	bne.n	464e <__smakebuf_r+0x6e>
    463e:	89a3      	ldrh	r3, [r4, #12]
    4640:	f44f 6580 	mov.w	r5, #1024	; 0x400
    4644:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
    4648:	81a1      	strh	r1, [r4, #12]
    464a:	64e5      	str	r5, [r4, #76]	; 0x4c
    464c:	e005      	b.n	465a <__smakebuf_r+0x7a>
    464e:	89a0      	ldrh	r0, [r4, #12]
    4650:	f440 6500 	orr.w	r5, r0, #2048	; 0x800
    4654:	81a5      	strh	r5, [r4, #12]
    4656:	f44f 6580 	mov.w	r5, #1024	; 0x400
    465a:	4630      	mov	r0, r6
    465c:	4629      	mov	r1, r5
    465e:	f000 f83b 	bl	46d8 <_malloc_r>
    4662:	b970      	cbnz	r0, 4682 <__smakebuf_r+0xa2>
    4664:	89a3      	ldrh	r3, [r4, #12]
    4666:	f403 7200 	and.w	r2, r3, #512	; 0x200
    466a:	b210      	sxth	r0, r2
    466c:	b9e8      	cbnz	r0, 46aa <__smakebuf_r+0xca>
    466e:	f043 0102 	orr.w	r1, r3, #2
    4672:	81a1      	strh	r1, [r4, #12]
    4674:	f104 0343 	add.w	r3, r4, #67	; 0x43
    4678:	2201      	movs	r2, #1
    467a:	6023      	str	r3, [r4, #0]
    467c:	6123      	str	r3, [r4, #16]
    467e:	6162      	str	r2, [r4, #20]
    4680:	e013      	b.n	46aa <__smakebuf_r+0xca>
    4682:	89a2      	ldrh	r2, [r4, #12]
    4684:	490b      	ldr	r1, [pc, #44]	; (46b4 <__smakebuf_r+0xd4>)
    4686:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    468a:	63f1      	str	r1, [r6, #60]	; 0x3c
    468c:	81a3      	strh	r3, [r4, #12]
    468e:	6020      	str	r0, [r4, #0]
    4690:	6120      	str	r0, [r4, #16]
    4692:	6165      	str	r5, [r4, #20]
    4694:	b14f      	cbz	r7, 46aa <__smakebuf_r+0xca>
    4696:	4630      	mov	r0, r6
    4698:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    469c:	f000 fd50 	bl	5140 <_isatty_r>
    46a0:	b118      	cbz	r0, 46aa <__smakebuf_r+0xca>
    46a2:	89a0      	ldrh	r0, [r4, #12]
    46a4:	f040 0101 	orr.w	r1, r0, #1
    46a8:	81a1      	strh	r1, [r4, #12]
    46aa:	b011      	add	sp, #68	; 0x44
    46ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    46ae:	bf00      	nop
    46b0:	00004ea3 	.word	0x00004ea3
    46b4:	00003da9 	.word	0x00003da9

000046b8 <malloc>:
    46b8:	4b02      	ldr	r3, [pc, #8]	; (46c4 <malloc+0xc>)
    46ba:	4601      	mov	r1, r0
    46bc:	6818      	ldr	r0, [r3, #0]
    46be:	f000 b80b 	b.w	46d8 <_malloc_r>
    46c2:	bf00      	nop
    46c4:	20000040 	.word	0x20000040

000046c8 <free>:
    46c8:	4b02      	ldr	r3, [pc, #8]	; (46d4 <free+0xc>)
    46ca:	4601      	mov	r1, r0
    46cc:	6818      	ldr	r0, [r3, #0]
    46ce:	f7ff bcef 	b.w	40b0 <_free_r>
    46d2:	bf00      	nop
    46d4:	20000040 	.word	0x20000040

000046d8 <_malloc_r>:
    46d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    46dc:	f101 040b 	add.w	r4, r1, #11
    46e0:	2c16      	cmp	r4, #22
    46e2:	4606      	mov	r6, r0
    46e4:	d903      	bls.n	46ee <_malloc_r+0x16>
    46e6:	f034 0407 	bics.w	r4, r4, #7
    46ea:	d501      	bpl.n	46f0 <_malloc_r+0x18>
    46ec:	e002      	b.n	46f4 <_malloc_r+0x1c>
    46ee:	2410      	movs	r4, #16
    46f0:	428c      	cmp	r4, r1
    46f2:	d202      	bcs.n	46fa <_malloc_r+0x22>
    46f4:	250c      	movs	r5, #12
    46f6:	6035      	str	r5, [r6, #0]
    46f8:	e1d9      	b.n	4aae <_malloc_r+0x3d6>
    46fa:	4630      	mov	r0, r6
    46fc:	f000 fa1f 	bl	4b3e <__malloc_lock>
    4700:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
    4704:	d214      	bcs.n	4730 <_malloc_r+0x58>
    4706:	4da0      	ldr	r5, [pc, #640]	; (4988 <_malloc_r+0x2b0>)
    4708:	08e1      	lsrs	r1, r4, #3
    470a:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
    470e:	68c5      	ldr	r5, [r0, #12]
    4710:	4285      	cmp	r5, r0
    4712:	d105      	bne.n	4720 <_malloc_r+0x48>
    4714:	f105 0308 	add.w	r3, r5, #8
    4718:	696d      	ldr	r5, [r5, #20]
    471a:	1c8a      	adds	r2, r1, #2
    471c:	429d      	cmp	r5, r3
    471e:	d044      	beq.n	47aa <_malloc_r+0xd2>
    4720:	68e8      	ldr	r0, [r5, #12]
    4722:	68a9      	ldr	r1, [r5, #8]
    4724:	686a      	ldr	r2, [r5, #4]
    4726:	60c8      	str	r0, [r1, #12]
    4728:	f022 0303 	bic.w	r3, r2, #3
    472c:	6081      	str	r1, [r0, #8]
    472e:	e059      	b.n	47e4 <_malloc_r+0x10c>
    4730:	0a62      	lsrs	r2, r4, #9
    4732:	d101      	bne.n	4738 <_malloc_r+0x60>
    4734:	08e2      	lsrs	r2, r4, #3
    4736:	e01b      	b.n	4770 <_malloc_r+0x98>
    4738:	2a04      	cmp	r2, #4
    473a:	d802      	bhi.n	4742 <_malloc_r+0x6a>
    473c:	09a2      	lsrs	r2, r4, #6
    473e:	3238      	adds	r2, #56	; 0x38
    4740:	e016      	b.n	4770 <_malloc_r+0x98>
    4742:	2a14      	cmp	r2, #20
    4744:	d801      	bhi.n	474a <_malloc_r+0x72>
    4746:	325b      	adds	r2, #91	; 0x5b
    4748:	e012      	b.n	4770 <_malloc_r+0x98>
    474a:	2a54      	cmp	r2, #84	; 0x54
    474c:	d802      	bhi.n	4754 <_malloc_r+0x7c>
    474e:	0b22      	lsrs	r2, r4, #12
    4750:	326e      	adds	r2, #110	; 0x6e
    4752:	e00d      	b.n	4770 <_malloc_r+0x98>
    4754:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    4758:	d802      	bhi.n	4760 <_malloc_r+0x88>
    475a:	0be2      	lsrs	r2, r4, #15
    475c:	3277      	adds	r2, #119	; 0x77
    475e:	e007      	b.n	4770 <_malloc_r+0x98>
    4760:	f240 5354 	movw	r3, #1364	; 0x554
    4764:	429a      	cmp	r2, r3
    4766:	d802      	bhi.n	476e <_malloc_r+0x96>
    4768:	0ca2      	lsrs	r2, r4, #18
    476a:	327c      	adds	r2, #124	; 0x7c
    476c:	e000      	b.n	4770 <_malloc_r+0x98>
    476e:	227e      	movs	r2, #126	; 0x7e
    4770:	4885      	ldr	r0, [pc, #532]	; (4988 <_malloc_r+0x2b0>)
    4772:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
    4776:	68dd      	ldr	r5, [r3, #12]
    4778:	429d      	cmp	r5, r3
    477a:	d015      	beq.n	47a8 <_malloc_r+0xd0>
    477c:	6869      	ldr	r1, [r5, #4]
    477e:	f021 0103 	bic.w	r1, r1, #3
    4782:	1b08      	subs	r0, r1, r4
    4784:	280f      	cmp	r0, #15
    4786:	dd01      	ble.n	478c <_malloc_r+0xb4>
    4788:	3a01      	subs	r2, #1
    478a:	e00d      	b.n	47a8 <_malloc_r+0xd0>
    478c:	2800      	cmp	r0, #0
    478e:	db09      	blt.n	47a4 <_malloc_r+0xcc>
    4790:	68eb      	ldr	r3, [r5, #12]
    4792:	68aa      	ldr	r2, [r5, #8]
    4794:	60d3      	str	r3, [r2, #12]
    4796:	609a      	str	r2, [r3, #8]
    4798:	186b      	adds	r3, r5, r1
    479a:	685a      	ldr	r2, [r3, #4]
    479c:	f042 0001 	orr.w	r0, r2, #1
    47a0:	6058      	str	r0, [r3, #4]
    47a2:	e190      	b.n	4ac6 <_malloc_r+0x3ee>
    47a4:	68ed      	ldr	r5, [r5, #12]
    47a6:	e7e7      	b.n	4778 <_malloc_r+0xa0>
    47a8:	3201      	adds	r2, #1
    47aa:	4977      	ldr	r1, [pc, #476]	; (4988 <_malloc_r+0x2b0>)
    47ac:	690d      	ldr	r5, [r1, #16]
    47ae:	f101 0708 	add.w	r7, r1, #8
    47b2:	42bd      	cmp	r5, r7
    47b4:	d068      	beq.n	4888 <_malloc_r+0x1b0>
    47b6:	6868      	ldr	r0, [r5, #4]
    47b8:	f020 0303 	bic.w	r3, r0, #3
    47bc:	1b18      	subs	r0, r3, r4
    47be:	280f      	cmp	r0, #15
    47c0:	dd0c      	ble.n	47dc <_malloc_r+0x104>
    47c2:	192b      	adds	r3, r5, r4
    47c4:	614b      	str	r3, [r1, #20]
    47c6:	610b      	str	r3, [r1, #16]
    47c8:	f044 0401 	orr.w	r4, r4, #1
    47cc:	f040 0101 	orr.w	r1, r0, #1
    47d0:	606c      	str	r4, [r5, #4]
    47d2:	60df      	str	r7, [r3, #12]
    47d4:	609f      	str	r7, [r3, #8]
    47d6:	6059      	str	r1, [r3, #4]
    47d8:	5018      	str	r0, [r3, r0]
    47da:	e174      	b.n	4ac6 <_malloc_r+0x3ee>
    47dc:	2800      	cmp	r0, #0
    47de:	614f      	str	r7, [r1, #20]
    47e0:	610f      	str	r7, [r1, #16]
    47e2:	db01      	blt.n	47e8 <_malloc_r+0x110>
    47e4:	18eb      	adds	r3, r5, r3
    47e6:	e7d8      	b.n	479a <_malloc_r+0xc2>
    47e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    47ec:	d20f      	bcs.n	480e <_malloc_r+0x136>
    47ee:	08db      	lsrs	r3, r3, #3
    47f0:	1098      	asrs	r0, r3, #2
    47f2:	2701      	movs	r7, #1
    47f4:	fa07 f700 	lsl.w	r7, r7, r0
    47f8:	6848      	ldr	r0, [r1, #4]
    47fa:	4307      	orrs	r7, r0
    47fc:	604f      	str	r7, [r1, #4]
    47fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    4802:	60e9      	str	r1, [r5, #12]
    4804:	688b      	ldr	r3, [r1, #8]
    4806:	60ab      	str	r3, [r5, #8]
    4808:	60dd      	str	r5, [r3, #12]
    480a:	608d      	str	r5, [r1, #8]
    480c:	e03c      	b.n	4888 <_malloc_r+0x1b0>
    480e:	0a58      	lsrs	r0, r3, #9
    4810:	2804      	cmp	r0, #4
    4812:	d802      	bhi.n	481a <_malloc_r+0x142>
    4814:	0998      	lsrs	r0, r3, #6
    4816:	3038      	adds	r0, #56	; 0x38
    4818:	e016      	b.n	4848 <_malloc_r+0x170>
    481a:	2814      	cmp	r0, #20
    481c:	d801      	bhi.n	4822 <_malloc_r+0x14a>
    481e:	305b      	adds	r0, #91	; 0x5b
    4820:	e012      	b.n	4848 <_malloc_r+0x170>
    4822:	2854      	cmp	r0, #84	; 0x54
    4824:	d802      	bhi.n	482c <_malloc_r+0x154>
    4826:	0b18      	lsrs	r0, r3, #12
    4828:	306e      	adds	r0, #110	; 0x6e
    482a:	e00d      	b.n	4848 <_malloc_r+0x170>
    482c:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
    4830:	d802      	bhi.n	4838 <_malloc_r+0x160>
    4832:	0bd8      	lsrs	r0, r3, #15
    4834:	3077      	adds	r0, #119	; 0x77
    4836:	e007      	b.n	4848 <_malloc_r+0x170>
    4838:	f240 5754 	movw	r7, #1364	; 0x554
    483c:	42b8      	cmp	r0, r7
    483e:	d802      	bhi.n	4846 <_malloc_r+0x16e>
    4840:	0c98      	lsrs	r0, r3, #18
    4842:	307c      	adds	r0, #124	; 0x7c
    4844:	e000      	b.n	4848 <_malloc_r+0x170>
    4846:	207e      	movs	r0, #126	; 0x7e
    4848:	f8df e13c 	ldr.w	lr, [pc, #316]	; 4988 <_malloc_r+0x2b0>
    484c:	eb0e 07c0 	add.w	r7, lr, r0, lsl #3
    4850:	68b9      	ldr	r1, [r7, #8]
    4852:	42b9      	cmp	r1, r7
    4854:	d10e      	bne.n	4874 <_malloc_r+0x19c>
    4856:	1087      	asrs	r7, r0, #2
    4858:	2301      	movs	r3, #1
    485a:	fa03 f007 	lsl.w	r0, r3, r7
    485e:	f8de 7004 	ldr.w	r7, [lr, #4]
    4862:	ea40 0307 	orr.w	r3, r0, r7
    4866:	f8ce 3004 	str.w	r3, [lr, #4]
    486a:	4608      	mov	r0, r1
    486c:	e008      	b.n	4880 <_malloc_r+0x1a8>
    486e:	6889      	ldr	r1, [r1, #8]
    4870:	42b9      	cmp	r1, r7
    4872:	d004      	beq.n	487e <_malloc_r+0x1a6>
    4874:	6848      	ldr	r0, [r1, #4]
    4876:	f020 0003 	bic.w	r0, r0, #3
    487a:	4283      	cmp	r3, r0
    487c:	d3f7      	bcc.n	486e <_malloc_r+0x196>
    487e:	68c8      	ldr	r0, [r1, #12]
    4880:	60e8      	str	r0, [r5, #12]
    4882:	60a9      	str	r1, [r5, #8]
    4884:	60cd      	str	r5, [r1, #12]
    4886:	6085      	str	r5, [r0, #8]
    4888:	4f3f      	ldr	r7, [pc, #252]	; (4988 <_malloc_r+0x2b0>)
    488a:	1095      	asrs	r5, r2, #2
    488c:	2001      	movs	r0, #1
    488e:	6879      	ldr	r1, [r7, #4]
    4890:	fa00 f305 	lsl.w	r3, r0, r5
    4894:	428b      	cmp	r3, r1
    4896:	d85d      	bhi.n	4954 <_malloc_r+0x27c>
    4898:	420b      	tst	r3, r1
    489a:	d105      	bne.n	48a8 <_malloc_r+0x1d0>
    489c:	f022 0203 	bic.w	r2, r2, #3
    48a0:	005b      	lsls	r3, r3, #1
    48a2:	3204      	adds	r2, #4
    48a4:	420b      	tst	r3, r1
    48a6:	d0fb      	beq.n	48a0 <_malloc_r+0x1c8>
    48a8:	4d37      	ldr	r5, [pc, #220]	; (4988 <_malloc_r+0x2b0>)
    48aa:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
    48ae:	4677      	mov	r7, lr
    48b0:	4610      	mov	r0, r2
    48b2:	68fd      	ldr	r5, [r7, #12]
    48b4:	42bd      	cmp	r5, r7
    48b6:	d02d      	beq.n	4914 <_malloc_r+0x23c>
    48b8:	6869      	ldr	r1, [r5, #4]
    48ba:	f021 0c03 	bic.w	ip, r1, #3
    48be:	ebc4 010c 	rsb	r1, r4, ip
    48c2:	290f      	cmp	r1, #15
    48c4:	dd13      	ble.n	48ee <_malloc_r+0x216>
    48c6:	192b      	adds	r3, r5, r4
    48c8:	f044 0401 	orr.w	r4, r4, #1
    48cc:	68ea      	ldr	r2, [r5, #12]
    48ce:	606c      	str	r4, [r5, #4]
    48d0:	f855 0f08 	ldr.w	r0, [r5, #8]!
    48d4:	5059      	str	r1, [r3, r1]
    48d6:	60c2      	str	r2, [r0, #12]
    48d8:	6090      	str	r0, [r2, #8]
    48da:	4a2b      	ldr	r2, [pc, #172]	; (4988 <_malloc_r+0x2b0>)
    48dc:	f041 0001 	orr.w	r0, r1, #1
    48e0:	6153      	str	r3, [r2, #20]
    48e2:	6113      	str	r3, [r2, #16]
    48e4:	3208      	adds	r2, #8
    48e6:	60da      	str	r2, [r3, #12]
    48e8:	609a      	str	r2, [r3, #8]
    48ea:	6058      	str	r0, [r3, #4]
    48ec:	e00c      	b.n	4908 <_malloc_r+0x230>
    48ee:	2900      	cmp	r1, #0
    48f0:	db0e      	blt.n	4910 <_malloc_r+0x238>
    48f2:	eb05 000c 	add.w	r0, r5, ip
    48f6:	68e9      	ldr	r1, [r5, #12]
    48f8:	6842      	ldr	r2, [r0, #4]
    48fa:	f042 0301 	orr.w	r3, r2, #1
    48fe:	6043      	str	r3, [r0, #4]
    4900:	f855 0f08 	ldr.w	r0, [r5, #8]!
    4904:	60c1      	str	r1, [r0, #12]
    4906:	6088      	str	r0, [r1, #8]
    4908:	4630      	mov	r0, r6
    490a:	f000 f919 	bl	4b40 <__malloc_unlock>
    490e:	e0de      	b.n	4ace <_malloc_r+0x3f6>
    4910:	68ed      	ldr	r5, [r5, #12]
    4912:	e7cf      	b.n	48b4 <_malloc_r+0x1dc>
    4914:	3001      	adds	r0, #1
    4916:	0781      	lsls	r1, r0, #30
    4918:	f105 0708 	add.w	r7, r5, #8
    491c:	d1c9      	bne.n	48b2 <_malloc_r+0x1da>
    491e:	4671      	mov	r1, lr
    4920:	0795      	lsls	r5, r2, #30
    4922:	d105      	bne.n	4930 <_malloc_r+0x258>
    4924:	4a18      	ldr	r2, [pc, #96]	; (4988 <_malloc_r+0x2b0>)
    4926:	6855      	ldr	r5, [r2, #4]
    4928:	ea25 0503 	bic.w	r5, r5, r3
    492c:	6055      	str	r5, [r2, #4]
    492e:	e005      	b.n	493c <_malloc_r+0x264>
    4930:	f1a1 0708 	sub.w	r7, r1, #8
    4934:	6809      	ldr	r1, [r1, #0]
    4936:	3a01      	subs	r2, #1
    4938:	42b9      	cmp	r1, r7
    493a:	d0f1      	beq.n	4920 <_malloc_r+0x248>
    493c:	4f12      	ldr	r7, [pc, #72]	; (4988 <_malloc_r+0x2b0>)
    493e:	687f      	ldr	r7, [r7, #4]
    4940:	005b      	lsls	r3, r3, #1
    4942:	42bb      	cmp	r3, r7
    4944:	d806      	bhi.n	4954 <_malloc_r+0x27c>
    4946:	b12b      	cbz	r3, 4954 <_malloc_r+0x27c>
    4948:	4602      	mov	r2, r0
    494a:	423b      	tst	r3, r7
    494c:	d1ac      	bne.n	48a8 <_malloc_r+0x1d0>
    494e:	3204      	adds	r2, #4
    4950:	005b      	lsls	r3, r3, #1
    4952:	e7fa      	b.n	494a <_malloc_r+0x272>
    4954:	4b0c      	ldr	r3, [pc, #48]	; (4988 <_malloc_r+0x2b0>)
    4956:	689f      	ldr	r7, [r3, #8]
    4958:	6878      	ldr	r0, [r7, #4]
    495a:	f020 0903 	bic.w	r9, r0, #3
    495e:	45a1      	cmp	r9, r4
    4960:	4619      	mov	r1, r3
    4962:	d304      	bcc.n	496e <_malloc_r+0x296>
    4964:	ebc4 0009 	rsb	r0, r4, r9
    4968:	280f      	cmp	r0, #15
    496a:	f300 80a2 	bgt.w	4ab2 <_malloc_r+0x3da>
    496e:	4a07      	ldr	r2, [pc, #28]	; (498c <_malloc_r+0x2b4>)
    4970:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
    4974:	6815      	ldr	r5, [r2, #0]
    4976:	3301      	adds	r3, #1
    4978:	eb07 0a09 	add.w	sl, r7, r9
    497c:	eb04 0805 	add.w	r8, r4, r5
    4980:	d106      	bne.n	4990 <_malloc_r+0x2b8>
    4982:	f108 0810 	add.w	r8, r8, #16
    4986:	e00b      	b.n	49a0 <_malloc_r+0x2c8>
    4988:	200004ec 	.word	0x200004ec
    498c:	20000994 	.word	0x20000994
    4990:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
    4994:	f100 010f 	add.w	r1, r0, #15
    4998:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
    499c:	f022 080f 	bic.w	r8, r2, #15
    49a0:	4630      	mov	r0, r6
    49a2:	4641      	mov	r1, r8
    49a4:	f000 fa3c 	bl	4e20 <_sbrk_r>
    49a8:	1c42      	adds	r2, r0, #1
    49aa:	4605      	mov	r5, r0
    49ac:	d071      	beq.n	4a92 <_malloc_r+0x3ba>
    49ae:	4550      	cmp	r0, sl
    49b0:	d202      	bcs.n	49b8 <_malloc_r+0x2e0>
    49b2:	4b48      	ldr	r3, [pc, #288]	; (4ad4 <_malloc_r+0x3fc>)
    49b4:	429f      	cmp	r7, r3
    49b6:	d16c      	bne.n	4a92 <_malloc_r+0x3ba>
    49b8:	4847      	ldr	r0, [pc, #284]	; (4ad8 <_malloc_r+0x400>)
    49ba:	4a46      	ldr	r2, [pc, #280]	; (4ad4 <_malloc_r+0x3fc>)
    49bc:	6841      	ldr	r1, [r0, #4]
    49be:	4555      	cmp	r5, sl
    49c0:	eb08 0301 	add.w	r3, r8, r1
    49c4:	6043      	str	r3, [r0, #4]
    49c6:	d107      	bne.n	49d8 <_malloc_r+0x300>
    49c8:	0529      	lsls	r1, r5, #20
    49ca:	d105      	bne.n	49d8 <_malloc_r+0x300>
    49cc:	6895      	ldr	r5, [r2, #8]
    49ce:	44c8      	add	r8, r9
    49d0:	f048 0001 	orr.w	r0, r8, #1
    49d4:	6068      	str	r0, [r5, #4]
    49d6:	e051      	b.n	4a7c <_malloc_r+0x3a4>
    49d8:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
    49dc:	1c42      	adds	r2, r0, #1
    49de:	d103      	bne.n	49e8 <_malloc_r+0x310>
    49e0:	4a3c      	ldr	r2, [pc, #240]	; (4ad4 <_malloc_r+0x3fc>)
    49e2:	f8c2 5408 	str.w	r5, [r2, #1032]	; 0x408
    49e6:	e005      	b.n	49f4 <_malloc_r+0x31c>
    49e8:	ebca 0a05 	rsb	sl, sl, r5
    49ec:	eb03 010a 	add.w	r1, r3, sl
    49f0:	4b39      	ldr	r3, [pc, #228]	; (4ad8 <_malloc_r+0x400>)
    49f2:	6059      	str	r1, [r3, #4]
    49f4:	f015 0007 	ands.w	r0, r5, #7
    49f8:	bf1c      	itt	ne
    49fa:	f1c0 0008 	rsbne	r0, r0, #8
    49fe:	182d      	addne	r5, r5, r0
    4a00:	eb05 0c08 	add.w	ip, r5, r8
    4a04:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
    4a08:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
    4a0c:	eba1 581e 	sub.w	r8, r1, lr, lsr #20
    4a10:	4641      	mov	r1, r8
    4a12:	4630      	mov	r0, r6
    4a14:	f000 fa04 	bl	4e20 <_sbrk_r>
    4a18:	4a2f      	ldr	r2, [pc, #188]	; (4ad8 <_malloc_r+0x400>)
    4a1a:	1c43      	adds	r3, r0, #1
    4a1c:	6853      	ldr	r3, [r2, #4]
    4a1e:	bf08      	it	eq
    4a20:	f04f 0800 	moveq.w	r8, #0
    4a24:	eb08 0103 	add.w	r1, r8, r3
    4a28:	bf08      	it	eq
    4a2a:	4628      	moveq	r0, r5
    4a2c:	6051      	str	r1, [r2, #4]
    4a2e:	1b40      	subs	r0, r0, r5
    4a30:	4a28      	ldr	r2, [pc, #160]	; (4ad4 <_malloc_r+0x3fc>)
    4a32:	eb00 0308 	add.w	r3, r0, r8
    4a36:	f043 0101 	orr.w	r1, r3, #1
    4a3a:	4297      	cmp	r7, r2
    4a3c:	6095      	str	r5, [r2, #8]
    4a3e:	6069      	str	r1, [r5, #4]
    4a40:	d01c      	beq.n	4a7c <_malloc_r+0x3a4>
    4a42:	f1b9 0f0f 	cmp.w	r9, #15
    4a46:	d802      	bhi.n	4a4e <_malloc_r+0x376>
    4a48:	2201      	movs	r2, #1
    4a4a:	606a      	str	r2, [r5, #4]
    4a4c:	e021      	b.n	4a92 <_malloc_r+0x3ba>
    4a4e:	687d      	ldr	r5, [r7, #4]
    4a50:	f1a9 090c 	sub.w	r9, r9, #12
    4a54:	f029 0907 	bic.w	r9, r9, #7
    4a58:	eb07 0309 	add.w	r3, r7, r9
    4a5c:	f005 0201 	and.w	r2, r5, #1
    4a60:	2105      	movs	r1, #5
    4a62:	ea49 0002 	orr.w	r0, r9, r2
    4a66:	f1b9 0f0f 	cmp.w	r9, #15
    4a6a:	6078      	str	r0, [r7, #4]
    4a6c:	6059      	str	r1, [r3, #4]
    4a6e:	6099      	str	r1, [r3, #8]
    4a70:	d904      	bls.n	4a7c <_malloc_r+0x3a4>
    4a72:	4630      	mov	r0, r6
    4a74:	f107 0108 	add.w	r1, r7, #8
    4a78:	f7ff fb1a 	bl	40b0 <_free_r>
    4a7c:	4a16      	ldr	r2, [pc, #88]	; (4ad8 <_malloc_r+0x400>)
    4a7e:	6853      	ldr	r3, [r2, #4]
    4a80:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    4a82:	6b15      	ldr	r5, [r2, #48]	; 0x30
    4a84:	428b      	cmp	r3, r1
    4a86:	bf88      	it	hi
    4a88:	62d3      	strhi	r3, [r2, #44]	; 0x2c
    4a8a:	42ab      	cmp	r3, r5
    4a8c:	bf84      	itt	hi
    4a8e:	4d12      	ldrhi	r5, [pc, #72]	; (4ad8 <_malloc_r+0x400>)
    4a90:	632b      	strhi	r3, [r5, #48]	; 0x30
    4a92:	4810      	ldr	r0, [pc, #64]	; (4ad4 <_malloc_r+0x3fc>)
    4a94:	6882      	ldr	r2, [r0, #8]
    4a96:	6853      	ldr	r3, [r2, #4]
    4a98:	f023 0103 	bic.w	r1, r3, #3
    4a9c:	42a1      	cmp	r1, r4
    4a9e:	ebc4 0001 	rsb	r0, r4, r1
    4aa2:	d301      	bcc.n	4aa8 <_malloc_r+0x3d0>
    4aa4:	280f      	cmp	r0, #15
    4aa6:	dc04      	bgt.n	4ab2 <_malloc_r+0x3da>
    4aa8:	4630      	mov	r0, r6
    4aaa:	f000 f849 	bl	4b40 <__malloc_unlock>
    4aae:	2500      	movs	r5, #0
    4ab0:	e00d      	b.n	4ace <_malloc_r+0x3f6>
    4ab2:	4a08      	ldr	r2, [pc, #32]	; (4ad4 <_malloc_r+0x3fc>)
    4ab4:	6895      	ldr	r5, [r2, #8]
    4ab6:	f044 0301 	orr.w	r3, r4, #1
    4aba:	192c      	adds	r4, r5, r4
    4abc:	f040 0101 	orr.w	r1, r0, #1
    4ac0:	606b      	str	r3, [r5, #4]
    4ac2:	6094      	str	r4, [r2, #8]
    4ac4:	6061      	str	r1, [r4, #4]
    4ac6:	4630      	mov	r0, r6
    4ac8:	f000 f83a 	bl	4b40 <__malloc_unlock>
    4acc:	3508      	adds	r5, #8
    4ace:	4628      	mov	r0, r5
    4ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4ad4:	200004ec 	.word	0x200004ec
    4ad8:	20000994 	.word	0x20000994

00004adc <memchr>:
    4adc:	b510      	push	{r4, lr}
    4ade:	b2c9      	uxtb	r1, r1
    4ae0:	4603      	mov	r3, r0
    4ae2:	1882      	adds	r2, r0, r2
    4ae4:	4293      	cmp	r3, r2
    4ae6:	4618      	mov	r0, r3
    4ae8:	d004      	beq.n	4af4 <memchr+0x18>
    4aea:	7804      	ldrb	r4, [r0, #0]
    4aec:	3301      	adds	r3, #1
    4aee:	428c      	cmp	r4, r1
    4af0:	d1f8      	bne.n	4ae4 <memchr+0x8>
    4af2:	e000      	b.n	4af6 <memchr+0x1a>
    4af4:	2000      	movs	r0, #0
    4af6:	bd10      	pop	{r4, pc}

00004af8 <memcpy>:
    4af8:	b510      	push	{r4, lr}
    4afa:	2300      	movs	r3, #0
    4afc:	4293      	cmp	r3, r2
    4afe:	d003      	beq.n	4b08 <memcpy+0x10>
    4b00:	5ccc      	ldrb	r4, [r1, r3]
    4b02:	54c4      	strb	r4, [r0, r3]
    4b04:	3301      	adds	r3, #1
    4b06:	e7f9      	b.n	4afc <memcpy+0x4>
    4b08:	bd10      	pop	{r4, pc}

00004b0a <memmove>:
    4b0a:	4281      	cmp	r1, r0
    4b0c:	b570      	push	{r4, r5, r6, lr}
    4b0e:	d20e      	bcs.n	4b2e <memmove+0x24>
    4b10:	188c      	adds	r4, r1, r2
    4b12:	42a0      	cmp	r0, r4
    4b14:	d20b      	bcs.n	4b2e <memmove+0x24>
    4b16:	1885      	adds	r5, r0, r2
    4b18:	4613      	mov	r3, r2
    4b1a:	f113 33ff 	adds.w	r3, r3, #4294967295
    4b1e:	d305      	bcc.n	4b2c <memmove+0x22>
    4b20:	4251      	negs	r1, r2
    4b22:	1866      	adds	r6, r4, r1
    4b24:	1869      	adds	r1, r5, r1
    4b26:	5cf6      	ldrb	r6, [r6, r3]
    4b28:	54ce      	strb	r6, [r1, r3]
    4b2a:	e7f6      	b.n	4b1a <memmove+0x10>
    4b2c:	bd70      	pop	{r4, r5, r6, pc}
    4b2e:	2300      	movs	r3, #0
    4b30:	4293      	cmp	r3, r2
    4b32:	d003      	beq.n	4b3c <memmove+0x32>
    4b34:	5ccc      	ldrb	r4, [r1, r3]
    4b36:	54c4      	strb	r4, [r0, r3]
    4b38:	3301      	adds	r3, #1
    4b3a:	e7f9      	b.n	4b30 <memmove+0x26>
    4b3c:	bd70      	pop	{r4, r5, r6, pc}

00004b3e <__malloc_lock>:
    4b3e:	4770      	bx	lr

00004b40 <__malloc_unlock>:
    4b40:	4770      	bx	lr
	...

00004b44 <_realloc_r>:
    4b44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4b48:	4681      	mov	r9, r0
    4b4a:	4616      	mov	r6, r2
    4b4c:	460c      	mov	r4, r1
    4b4e:	b921      	cbnz	r1, 4b5a <_realloc_r+0x16>
    4b50:	4611      	mov	r1, r2
    4b52:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4b56:	f7ff bdbf 	b.w	46d8 <_malloc_r>
    4b5a:	f7ff fff0 	bl	4b3e <__malloc_lock>
    4b5e:	f106 070b 	add.w	r7, r6, #11
    4b62:	f854 5c04 	ldr.w	r5, [r4, #-4]
    4b66:	2f16      	cmp	r7, #22
    4b68:	f1a4 0b08 	sub.w	fp, r4, #8
    4b6c:	f025 0803 	bic.w	r8, r5, #3
    4b70:	d903      	bls.n	4b7a <_realloc_r+0x36>
    4b72:	f037 0707 	bics.w	r7, r7, #7
    4b76:	d501      	bpl.n	4b7c <_realloc_r+0x38>
    4b78:	e002      	b.n	4b80 <_realloc_r+0x3c>
    4b7a:	2710      	movs	r7, #16
    4b7c:	42b7      	cmp	r7, r6
    4b7e:	d204      	bcs.n	4b8a <_realloc_r+0x46>
    4b80:	200c      	movs	r0, #12
    4b82:	f8c9 0000 	str.w	r0, [r9]
    4b86:	2600      	movs	r6, #0
    4b88:	e145      	b.n	4e16 <_realloc_r+0x2d2>
    4b8a:	45b8      	cmp	r8, r7
    4b8c:	f280 811a 	bge.w	4dc4 <_realloc_r+0x280>
    4b90:	4aa2      	ldr	r2, [pc, #648]	; (4e1c <_realloc_r+0x2d8>)
    4b92:	6891      	ldr	r1, [r2, #8]
    4b94:	eb0b 0308 	add.w	r3, fp, r8
    4b98:	428b      	cmp	r3, r1
    4b9a:	d006      	beq.n	4baa <_realloc_r+0x66>
    4b9c:	6858      	ldr	r0, [r3, #4]
    4b9e:	f020 0201 	bic.w	r2, r0, #1
    4ba2:	1898      	adds	r0, r3, r2
    4ba4:	6842      	ldr	r2, [r0, #4]
    4ba6:	07d0      	lsls	r0, r2, #31
    4ba8:	d426      	bmi.n	4bf8 <_realloc_r+0xb4>
    4baa:	685a      	ldr	r2, [r3, #4]
    4bac:	428b      	cmp	r3, r1
    4bae:	f022 0003 	bic.w	r0, r2, #3
    4bb2:	eb00 0a08 	add.w	sl, r0, r8
    4bb6:	d118      	bne.n	4bea <_realloc_r+0xa6>
    4bb8:	f107 0210 	add.w	r2, r7, #16
    4bbc:	4592      	cmp	sl, r2
    4bbe:	db1d      	blt.n	4bfc <_realloc_r+0xb8>
    4bc0:	eb0b 0507 	add.w	r5, fp, r7
    4bc4:	ebc7 0a0a 	rsb	sl, r7, sl
    4bc8:	f04a 0101 	orr.w	r1, sl, #1
    4bcc:	6069      	str	r1, [r5, #4]
    4bce:	f854 2c04 	ldr.w	r2, [r4, #-4]
    4bd2:	4e92      	ldr	r6, [pc, #584]	; (4e1c <_realloc_r+0x2d8>)
    4bd4:	f002 0301 	and.w	r3, r2, #1
    4bd8:	431f      	orrs	r7, r3
    4bda:	60b5      	str	r5, [r6, #8]
    4bdc:	f844 7c04 	str.w	r7, [r4, #-4]
    4be0:	4648      	mov	r0, r9
    4be2:	f7ff ffad 	bl	4b40 <__malloc_unlock>
    4be6:	4626      	mov	r6, r4
    4be8:	e115      	b.n	4e16 <_realloc_r+0x2d2>
    4bea:	45ba      	cmp	sl, r7
    4bec:	db06      	blt.n	4bfc <_realloc_r+0xb8>
    4bee:	68dd      	ldr	r5, [r3, #12]
    4bf0:	689e      	ldr	r6, [r3, #8]
    4bf2:	60f5      	str	r5, [r6, #12]
    4bf4:	60ae      	str	r6, [r5, #8]
    4bf6:	e0e6      	b.n	4dc6 <_realloc_r+0x282>
    4bf8:	2000      	movs	r0, #0
    4bfa:	4603      	mov	r3, r0
    4bfc:	07ea      	lsls	r2, r5, #31
    4bfe:	f100 8091 	bmi.w	4d24 <_realloc_r+0x1e0>
    4c02:	f854 5c08 	ldr.w	r5, [r4, #-8]
    4c06:	ebc5 050b 	rsb	r5, r5, fp
    4c0a:	686a      	ldr	r2, [r5, #4]
    4c0c:	f022 0203 	bic.w	r2, r2, #3
    4c10:	2b00      	cmp	r3, #0
    4c12:	d051      	beq.n	4cb8 <_realloc_r+0x174>
    4c14:	eb02 0a08 	add.w	sl, r2, r8
    4c18:	428b      	cmp	r3, r1
    4c1a:	4482      	add	sl, r0
    4c1c:	d145      	bne.n	4caa <_realloc_r+0x166>
    4c1e:	f107 0310 	add.w	r3, r7, #16
    4c22:	459a      	cmp	sl, r3
    4c24:	db48      	blt.n	4cb8 <_realloc_r+0x174>
    4c26:	462e      	mov	r6, r5
    4c28:	68e9      	ldr	r1, [r5, #12]
    4c2a:	f856 3f08 	ldr.w	r3, [r6, #8]!
    4c2e:	f1a8 0204 	sub.w	r2, r8, #4
    4c32:	2a24      	cmp	r2, #36	; 0x24
    4c34:	60d9      	str	r1, [r3, #12]
    4c36:	608b      	str	r3, [r1, #8]
    4c38:	d825      	bhi.n	4c86 <_realloc_r+0x142>
    4c3a:	2a13      	cmp	r2, #19
    4c3c:	d91b      	bls.n	4c76 <_realloc_r+0x132>
    4c3e:	6821      	ldr	r1, [r4, #0]
    4c40:	60a9      	str	r1, [r5, #8]
    4c42:	6863      	ldr	r3, [r4, #4]
    4c44:	2a1b      	cmp	r2, #27
    4c46:	60eb      	str	r3, [r5, #12]
    4c48:	d803      	bhi.n	4c52 <_realloc_r+0x10e>
    4c4a:	f105 0010 	add.w	r0, r5, #16
    4c4e:	3408      	adds	r4, #8
    4c50:	e012      	b.n	4c78 <_realloc_r+0x134>
    4c52:	68a0      	ldr	r0, [r4, #8]
    4c54:	6128      	str	r0, [r5, #16]
    4c56:	68e1      	ldr	r1, [r4, #12]
    4c58:	2a24      	cmp	r2, #36	; 0x24
    4c5a:	6169      	str	r1, [r5, #20]
    4c5c:	d003      	beq.n	4c66 <_realloc_r+0x122>
    4c5e:	f105 0018 	add.w	r0, r5, #24
    4c62:	3410      	adds	r4, #16
    4c64:	e008      	b.n	4c78 <_realloc_r+0x134>
    4c66:	6922      	ldr	r2, [r4, #16]
    4c68:	61aa      	str	r2, [r5, #24]
    4c6a:	6963      	ldr	r3, [r4, #20]
    4c6c:	f105 0020 	add.w	r0, r5, #32
    4c70:	61eb      	str	r3, [r5, #28]
    4c72:	3418      	adds	r4, #24
    4c74:	e000      	b.n	4c78 <_realloc_r+0x134>
    4c76:	4630      	mov	r0, r6
    4c78:	6821      	ldr	r1, [r4, #0]
    4c7a:	6001      	str	r1, [r0, #0]
    4c7c:	6862      	ldr	r2, [r4, #4]
    4c7e:	6042      	str	r2, [r0, #4]
    4c80:	68a3      	ldr	r3, [r4, #8]
    4c82:	6083      	str	r3, [r0, #8]
    4c84:	e003      	b.n	4c8e <_realloc_r+0x14a>
    4c86:	4630      	mov	r0, r6
    4c88:	4621      	mov	r1, r4
    4c8a:	f7ff ff3e 	bl	4b0a <memmove>
    4c8e:	19e8      	adds	r0, r5, r7
    4c90:	ebc7 0a0a 	rsb	sl, r7, sl
    4c94:	f04a 0201 	orr.w	r2, sl, #1
    4c98:	6042      	str	r2, [r0, #4]
    4c9a:	686b      	ldr	r3, [r5, #4]
    4c9c:	495f      	ldr	r1, [pc, #380]	; (4e1c <_realloc_r+0x2d8>)
    4c9e:	6088      	str	r0, [r1, #8]
    4ca0:	f003 0001 	and.w	r0, r3, #1
    4ca4:	4307      	orrs	r7, r0
    4ca6:	606f      	str	r7, [r5, #4]
    4ca8:	e088      	b.n	4dbc <_realloc_r+0x278>
    4caa:	45ba      	cmp	sl, r7
    4cac:	db04      	blt.n	4cb8 <_realloc_r+0x174>
    4cae:	68d9      	ldr	r1, [r3, #12]
    4cb0:	6898      	ldr	r0, [r3, #8]
    4cb2:	60c1      	str	r1, [r0, #12]
    4cb4:	6088      	str	r0, [r1, #8]
    4cb6:	e003      	b.n	4cc0 <_realloc_r+0x17c>
    4cb8:	eb02 0a08 	add.w	sl, r2, r8
    4cbc:	45ba      	cmp	sl, r7
    4cbe:	db31      	blt.n	4d24 <_realloc_r+0x1e0>
    4cc0:	4628      	mov	r0, r5
    4cc2:	68eb      	ldr	r3, [r5, #12]
    4cc4:	f850 1f08 	ldr.w	r1, [r0, #8]!
    4cc8:	f1a8 0204 	sub.w	r2, r8, #4
    4ccc:	2a24      	cmp	r2, #36	; 0x24
    4cce:	60cb      	str	r3, [r1, #12]
    4cd0:	6099      	str	r1, [r3, #8]
    4cd2:	d823      	bhi.n	4d1c <_realloc_r+0x1d8>
    4cd4:	2a13      	cmp	r2, #19
    4cd6:	d91a      	bls.n	4d0e <_realloc_r+0x1ca>
    4cd8:	6820      	ldr	r0, [r4, #0]
    4cda:	60a8      	str	r0, [r5, #8]
    4cdc:	6866      	ldr	r6, [r4, #4]
    4cde:	2a1b      	cmp	r2, #27
    4ce0:	60ee      	str	r6, [r5, #12]
    4ce2:	d803      	bhi.n	4cec <_realloc_r+0x1a8>
    4ce4:	f105 0010 	add.w	r0, r5, #16
    4ce8:	3408      	adds	r4, #8
    4cea:	e010      	b.n	4d0e <_realloc_r+0x1ca>
    4cec:	68a3      	ldr	r3, [r4, #8]
    4cee:	612b      	str	r3, [r5, #16]
    4cf0:	68e1      	ldr	r1, [r4, #12]
    4cf2:	2a24      	cmp	r2, #36	; 0x24
    4cf4:	6169      	str	r1, [r5, #20]
    4cf6:	d003      	beq.n	4d00 <_realloc_r+0x1bc>
    4cf8:	f105 0018 	add.w	r0, r5, #24
    4cfc:	3410      	adds	r4, #16
    4cfe:	e006      	b.n	4d0e <_realloc_r+0x1ca>
    4d00:	6922      	ldr	r2, [r4, #16]
    4d02:	61aa      	str	r2, [r5, #24]
    4d04:	6960      	ldr	r0, [r4, #20]
    4d06:	3418      	adds	r4, #24
    4d08:	61e8      	str	r0, [r5, #28]
    4d0a:	f105 0020 	add.w	r0, r5, #32
    4d0e:	6826      	ldr	r6, [r4, #0]
    4d10:	6006      	str	r6, [r0, #0]
    4d12:	6863      	ldr	r3, [r4, #4]
    4d14:	6043      	str	r3, [r0, #4]
    4d16:	68a1      	ldr	r1, [r4, #8]
    4d18:	6081      	str	r1, [r0, #8]
    4d1a:	e055      	b.n	4dc8 <_realloc_r+0x284>
    4d1c:	4621      	mov	r1, r4
    4d1e:	f7ff fef4 	bl	4b0a <memmove>
    4d22:	e051      	b.n	4dc8 <_realloc_r+0x284>
    4d24:	4631      	mov	r1, r6
    4d26:	4648      	mov	r0, r9
    4d28:	f7ff fcd6 	bl	46d8 <_malloc_r>
    4d2c:	4606      	mov	r6, r0
    4d2e:	2800      	cmp	r0, #0
    4d30:	d044      	beq.n	4dbc <_realloc_r+0x278>
    4d32:	f854 1c04 	ldr.w	r1, [r4, #-4]
    4d36:	f021 0301 	bic.w	r3, r1, #1
    4d3a:	f1a0 0208 	sub.w	r2, r0, #8
    4d3e:	eb0b 0103 	add.w	r1, fp, r3
    4d42:	428a      	cmp	r2, r1
    4d44:	d106      	bne.n	4d54 <_realloc_r+0x210>
    4d46:	f850 6c04 	ldr.w	r6, [r0, #-4]
    4d4a:	f026 0503 	bic.w	r5, r6, #3
    4d4e:	eb05 0a08 	add.w	sl, r5, r8
    4d52:	e038      	b.n	4dc6 <_realloc_r+0x282>
    4d54:	f1a8 0204 	sub.w	r2, r8, #4
    4d58:	2a24      	cmp	r2, #36	; 0x24
    4d5a:	d828      	bhi.n	4dae <_realloc_r+0x26a>
    4d5c:	2a13      	cmp	r2, #19
    4d5e:	d91e      	bls.n	4d9e <_realloc_r+0x25a>
    4d60:	6823      	ldr	r3, [r4, #0]
    4d62:	6003      	str	r3, [r0, #0]
    4d64:	6861      	ldr	r1, [r4, #4]
    4d66:	2a1b      	cmp	r2, #27
    4d68:	6041      	str	r1, [r0, #4]
    4d6a:	d804      	bhi.n	4d76 <_realloc_r+0x232>
    4d6c:	f100 0008 	add.w	r0, r0, #8
    4d70:	f104 0208 	add.w	r2, r4, #8
    4d74:	e014      	b.n	4da0 <_realloc_r+0x25c>
    4d76:	68a0      	ldr	r0, [r4, #8]
    4d78:	60b0      	str	r0, [r6, #8]
    4d7a:	68e3      	ldr	r3, [r4, #12]
    4d7c:	2a24      	cmp	r2, #36	; 0x24
    4d7e:	60f3      	str	r3, [r6, #12]
    4d80:	d004      	beq.n	4d8c <_realloc_r+0x248>
    4d82:	f106 0010 	add.w	r0, r6, #16
    4d86:	f104 0210 	add.w	r2, r4, #16
    4d8a:	e009      	b.n	4da0 <_realloc_r+0x25c>
    4d8c:	6922      	ldr	r2, [r4, #16]
    4d8e:	6132      	str	r2, [r6, #16]
    4d90:	6961      	ldr	r1, [r4, #20]
    4d92:	f106 0018 	add.w	r0, r6, #24
    4d96:	6171      	str	r1, [r6, #20]
    4d98:	f104 0218 	add.w	r2, r4, #24
    4d9c:	e000      	b.n	4da0 <_realloc_r+0x25c>
    4d9e:	4622      	mov	r2, r4
    4da0:	6813      	ldr	r3, [r2, #0]
    4da2:	6003      	str	r3, [r0, #0]
    4da4:	6851      	ldr	r1, [r2, #4]
    4da6:	6041      	str	r1, [r0, #4]
    4da8:	6892      	ldr	r2, [r2, #8]
    4daa:	6082      	str	r2, [r0, #8]
    4dac:	e002      	b.n	4db4 <_realloc_r+0x270>
    4dae:	4621      	mov	r1, r4
    4db0:	f7ff feab 	bl	4b0a <memmove>
    4db4:	4648      	mov	r0, r9
    4db6:	4621      	mov	r1, r4
    4db8:	f7ff f97a 	bl	40b0 <_free_r>
    4dbc:	4648      	mov	r0, r9
    4dbe:	f7ff febf 	bl	4b40 <__malloc_unlock>
    4dc2:	e028      	b.n	4e16 <_realloc_r+0x2d2>
    4dc4:	46c2      	mov	sl, r8
    4dc6:	465d      	mov	r5, fp
    4dc8:	ebc7 000a 	rsb	r0, r7, sl
    4dcc:	280f      	cmp	r0, #15
    4dce:	686a      	ldr	r2, [r5, #4]
    4dd0:	d911      	bls.n	4df6 <_realloc_r+0x2b2>
    4dd2:	19e9      	adds	r1, r5, r7
    4dd4:	f002 0601 	and.w	r6, r2, #1
    4dd8:	4337      	orrs	r7, r6
    4dda:	f040 0301 	orr.w	r3, r0, #1
    4dde:	1808      	adds	r0, r1, r0
    4de0:	606f      	str	r7, [r5, #4]
    4de2:	604b      	str	r3, [r1, #4]
    4de4:	6842      	ldr	r2, [r0, #4]
    4de6:	f042 0601 	orr.w	r6, r2, #1
    4dea:	6046      	str	r6, [r0, #4]
    4dec:	3108      	adds	r1, #8
    4dee:	4648      	mov	r0, r9
    4df0:	f7ff f95e 	bl	40b0 <_free_r>
    4df4:	e00a      	b.n	4e0c <_realloc_r+0x2c8>
    4df6:	f002 0601 	and.w	r6, r2, #1
    4dfa:	eb05 010a 	add.w	r1, r5, sl
    4dfe:	ea4a 0306 	orr.w	r3, sl, r6
    4e02:	606b      	str	r3, [r5, #4]
    4e04:	6848      	ldr	r0, [r1, #4]
    4e06:	f040 0201 	orr.w	r2, r0, #1
    4e0a:	604a      	str	r2, [r1, #4]
    4e0c:	4648      	mov	r0, r9
    4e0e:	f7ff fe97 	bl	4b40 <__malloc_unlock>
    4e12:	f105 0608 	add.w	r6, r5, #8
    4e16:	4630      	mov	r0, r6
    4e18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4e1c:	200004ec 	.word	0x200004ec

00004e20 <_sbrk_r>:
    4e20:	b538      	push	{r3, r4, r5, lr}
    4e22:	4c06      	ldr	r4, [pc, #24]	; (4e3c <_sbrk_r+0x1c>)
    4e24:	2300      	movs	r3, #0
    4e26:	4605      	mov	r5, r0
    4e28:	4608      	mov	r0, r1
    4e2a:	6023      	str	r3, [r4, #0]
    4e2c:	f7fe f87a 	bl	2f24 <_sbrk>
    4e30:	1c43      	adds	r3, r0, #1
    4e32:	d102      	bne.n	4e3a <_sbrk_r+0x1a>
    4e34:	6821      	ldr	r1, [r4, #0]
    4e36:	b101      	cbz	r1, 4e3a <_sbrk_r+0x1a>
    4e38:	6029      	str	r1, [r5, #0]
    4e3a:	bd38      	pop	{r3, r4, r5, pc}
    4e3c:	20000a70 	.word	0x20000a70

00004e40 <__sread>:
    4e40:	b510      	push	{r4, lr}
    4e42:	460c      	mov	r4, r1
    4e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    4e48:	f000 f99c 	bl	5184 <_read_r>
    4e4c:	2800      	cmp	r0, #0
    4e4e:	db03      	blt.n	4e58 <__sread+0x18>
    4e50:	6d22      	ldr	r2, [r4, #80]	; 0x50
    4e52:	1813      	adds	r3, r2, r0
    4e54:	6523      	str	r3, [r4, #80]	; 0x50
    4e56:	bd10      	pop	{r4, pc}
    4e58:	89a3      	ldrh	r3, [r4, #12]
    4e5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
    4e5e:	81a1      	strh	r1, [r4, #12]
    4e60:	bd10      	pop	{r4, pc}

00004e62 <__seofread>:
    4e62:	2000      	movs	r0, #0
    4e64:	4770      	bx	lr

00004e66 <__swrite>:
    4e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e6a:	461d      	mov	r5, r3
    4e6c:	898b      	ldrh	r3, [r1, #12]
    4e6e:	460c      	mov	r4, r1
    4e70:	f403 7180 	and.w	r1, r3, #256	; 0x100
    4e74:	4616      	mov	r6, r2
    4e76:	b20a      	sxth	r2, r1
    4e78:	4607      	mov	r7, r0
    4e7a:	b12a      	cbz	r2, 4e88 <__swrite+0x22>
    4e7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    4e80:	2200      	movs	r2, #0
    4e82:	2302      	movs	r3, #2
    4e84:	f000 f96c 	bl	5160 <_lseek_r>
    4e88:	89a0      	ldrh	r0, [r4, #12]
    4e8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    4e8e:	f420 5380 	bic.w	r3, r0, #4096	; 0x1000
    4e92:	81a3      	strh	r3, [r4, #12]
    4e94:	4638      	mov	r0, r7
    4e96:	4632      	mov	r2, r6
    4e98:	462b      	mov	r3, r5
    4e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4e9e:	f000 b8d1 	b.w	5044 <_write_r>

00004ea2 <__sseek>:
    4ea2:	b510      	push	{r4, lr}
    4ea4:	460c      	mov	r4, r1
    4ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    4eaa:	f000 f959 	bl	5160 <_lseek_r>
    4eae:	1c43      	adds	r3, r0, #1
    4eb0:	89a3      	ldrh	r3, [r4, #12]
    4eb2:	d103      	bne.n	4ebc <__sseek+0x1a>
    4eb4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    4eb8:	81a2      	strh	r2, [r4, #12]
    4eba:	bd10      	pop	{r4, pc}
    4ebc:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
    4ec0:	81a1      	strh	r1, [r4, #12]
    4ec2:	6520      	str	r0, [r4, #80]	; 0x50
    4ec4:	bd10      	pop	{r4, pc}

00004ec6 <__sclose>:
    4ec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    4eca:	f000 b8cd 	b.w	5068 <_close_r>

00004ece <strcmp>:
    4ece:	f810 2b01 	ldrb.w	r2, [r0], #1
    4ed2:	f811 3b01 	ldrb.w	r3, [r1], #1
    4ed6:	2a01      	cmp	r2, #1
    4ed8:	bf28      	it	cs
    4eda:	429a      	cmpcs	r2, r3
    4edc:	d0f7      	beq.n	4ece <strcmp>
    4ede:	eba2 0003 	sub.w	r0, r2, r3
    4ee2:	4770      	bx	lr

00004ee4 <__swbuf_r>:
    4ee4:	b570      	push	{r4, r5, r6, lr}
    4ee6:	460d      	mov	r5, r1
    4ee8:	4614      	mov	r4, r2
    4eea:	4606      	mov	r6, r0
    4eec:	b118      	cbz	r0, 4ef6 <__swbuf_r+0x12>
    4eee:	6b83      	ldr	r3, [r0, #56]	; 0x38
    4ef0:	b90b      	cbnz	r3, 4ef6 <__swbuf_r+0x12>
    4ef2:	f7fe ff9f 	bl	3e34 <__sinit>
    4ef6:	89a1      	ldrh	r1, [r4, #12]
    4ef8:	69a0      	ldr	r0, [r4, #24]
    4efa:	f001 0208 	and.w	r2, r1, #8
    4efe:	b213      	sxth	r3, r2
    4f00:	60a0      	str	r0, [r4, #8]
    4f02:	b10b      	cbz	r3, 4f08 <__swbuf_r+0x24>
    4f04:	6920      	ldr	r0, [r4, #16]
    4f06:	b958      	cbnz	r0, 4f20 <__swbuf_r+0x3c>
    4f08:	4630      	mov	r0, r6
    4f0a:	4621      	mov	r1, r4
    4f0c:	f7fe fe32 	bl	3b74 <__swsetup_r>
    4f10:	b130      	cbz	r0, 4f20 <__swbuf_r+0x3c>
    4f12:	89a5      	ldrh	r5, [r4, #12]
    4f14:	2009      	movs	r0, #9
    4f16:	f045 0140 	orr.w	r1, r5, #64	; 0x40
    4f1a:	81a1      	strh	r1, [r4, #12]
    4f1c:	6030      	str	r0, [r6, #0]
    4f1e:	e017      	b.n	4f50 <__swbuf_r+0x6c>
    4f20:	89a1      	ldrh	r1, [r4, #12]
    4f22:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
    4f26:	b213      	sxth	r3, r2
    4f28:	b2ed      	uxtb	r5, r5
    4f2a:	b933      	cbnz	r3, 4f3a <__swbuf_r+0x56>
    4f2c:	f441 5000 	orr.w	r0, r1, #8192	; 0x2000
    4f30:	6e61      	ldr	r1, [r4, #100]	; 0x64
    4f32:	81a0      	strh	r0, [r4, #12]
    4f34:	f421 5200 	bic.w	r2, r1, #8192	; 0x2000
    4f38:	6662      	str	r2, [r4, #100]	; 0x64
    4f3a:	6820      	ldr	r0, [r4, #0]
    4f3c:	6923      	ldr	r3, [r4, #16]
    4f3e:	6961      	ldr	r1, [r4, #20]
    4f40:	1ac0      	subs	r0, r0, r3
    4f42:	4288      	cmp	r0, r1
    4f44:	db07      	blt.n	4f56 <__swbuf_r+0x72>
    4f46:	4630      	mov	r0, r6
    4f48:	4621      	mov	r1, r4
    4f4a:	f7fe fe7f 	bl	3c4c <_fflush_r>
    4f4e:	b110      	cbz	r0, 4f56 <__swbuf_r+0x72>
    4f50:	f04f 35ff 	mov.w	r5, #4294967295
    4f54:	e015      	b.n	4f82 <__swbuf_r+0x9e>
    4f56:	68a2      	ldr	r2, [r4, #8]
    4f58:	6821      	ldr	r1, [r4, #0]
    4f5a:	1e53      	subs	r3, r2, #1
    4f5c:	60a3      	str	r3, [r4, #8]
    4f5e:	f801 5b01 	strb.w	r5, [r1], #1
    4f62:	6962      	ldr	r2, [r4, #20]
    4f64:	6021      	str	r1, [r4, #0]
    4f66:	3001      	adds	r0, #1
    4f68:	4290      	cmp	r0, r2
    4f6a:	d004      	beq.n	4f76 <__swbuf_r+0x92>
    4f6c:	89a3      	ldrh	r3, [r4, #12]
    4f6e:	07db      	lsls	r3, r3, #31
    4f70:	d507      	bpl.n	4f82 <__swbuf_r+0x9e>
    4f72:	2d0a      	cmp	r5, #10
    4f74:	d105      	bne.n	4f82 <__swbuf_r+0x9e>
    4f76:	4630      	mov	r0, r6
    4f78:	4621      	mov	r1, r4
    4f7a:	f7fe fe67 	bl	3c4c <_fflush_r>
    4f7e:	2800      	cmp	r0, #0
    4f80:	d1e6      	bne.n	4f50 <__swbuf_r+0x6c>
    4f82:	4628      	mov	r0, r5
    4f84:	bd70      	pop	{r4, r5, r6, pc}

00004f86 <__swbuf>:
    4f86:	460a      	mov	r2, r1
    4f88:	4902      	ldr	r1, [pc, #8]	; (4f94 <__swbuf+0xe>)
    4f8a:	4603      	mov	r3, r0
    4f8c:	6808      	ldr	r0, [r1, #0]
    4f8e:	4619      	mov	r1, r3
    4f90:	f7ff bfa8 	b.w	4ee4 <__swbuf_r>
    4f94:	20000040 	.word	0x20000040

00004f98 <_wcrtomb_r>:
    4f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f9c:	461d      	mov	r5, r3
    4f9e:	4b10      	ldr	r3, [pc, #64]	; (4fe0 <_wcrtomb_r+0x48>)
    4fa0:	b086      	sub	sp, #24
    4fa2:	4604      	mov	r4, r0
    4fa4:	4690      	mov	r8, r2
    4fa6:	460e      	mov	r6, r1
    4fa8:	681f      	ldr	r7, [r3, #0]
    4faa:	b939      	cbnz	r1, 4fbc <_wcrtomb_r+0x24>
    4fac:	f7ff faf6 	bl	459c <__locale_charset>
    4fb0:	9500      	str	r5, [sp, #0]
    4fb2:	4603      	mov	r3, r0
    4fb4:	a903      	add	r1, sp, #12
    4fb6:	4620      	mov	r0, r4
    4fb8:	4632      	mov	r2, r6
    4fba:	e006      	b.n	4fca <_wcrtomb_r+0x32>
    4fbc:	f7ff faee 	bl	459c <__locale_charset>
    4fc0:	9500      	str	r5, [sp, #0]
    4fc2:	4603      	mov	r3, r0
    4fc4:	4631      	mov	r1, r6
    4fc6:	4620      	mov	r0, r4
    4fc8:	4642      	mov	r2, r8
    4fca:	47b8      	blx	r7
    4fcc:	1c43      	adds	r3, r0, #1
    4fce:	d103      	bne.n	4fd8 <_wcrtomb_r+0x40>
    4fd0:	2100      	movs	r1, #0
    4fd2:	228a      	movs	r2, #138	; 0x8a
    4fd4:	6029      	str	r1, [r5, #0]
    4fd6:	6022      	str	r2, [r4, #0]
    4fd8:	b006      	add	sp, #24
    4fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4fde:	bf00      	nop
    4fe0:	200008fc 	.word	0x200008fc

00004fe4 <wcrtomb>:
    4fe4:	b530      	push	{r4, r5, lr}
    4fe6:	4613      	mov	r3, r2
    4fe8:	4a04      	ldr	r2, [pc, #16]	; (4ffc <wcrtomb+0x18>)
    4fea:	4605      	mov	r5, r0
    4fec:	460c      	mov	r4, r1
    4fee:	6810      	ldr	r0, [r2, #0]
    4ff0:	4629      	mov	r1, r5
    4ff2:	4622      	mov	r2, r4
    4ff4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    4ff8:	f7ff bfce 	b.w	4f98 <_wcrtomb_r>
    4ffc:	20000040 	.word	0x20000040

00005000 <__ascii_wctomb>:
    5000:	b149      	cbz	r1, 5016 <__ascii_wctomb+0x16>
    5002:	2aff      	cmp	r2, #255	; 0xff
    5004:	d904      	bls.n	5010 <__ascii_wctomb+0x10>
    5006:	238a      	movs	r3, #138	; 0x8a
    5008:	6003      	str	r3, [r0, #0]
    500a:	f04f 30ff 	mov.w	r0, #4294967295
    500e:	4770      	bx	lr
    5010:	700a      	strb	r2, [r1, #0]
    5012:	2001      	movs	r0, #1
    5014:	4770      	bx	lr
    5016:	4608      	mov	r0, r1
    5018:	4770      	bx	lr

0000501a <_wctomb_r>:
    501a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    501e:	4698      	mov	r8, r3
    5020:	4b07      	ldr	r3, [pc, #28]	; (5040 <_wctomb_r+0x26>)
    5022:	4605      	mov	r5, r0
    5024:	460f      	mov	r7, r1
    5026:	4616      	mov	r6, r2
    5028:	681c      	ldr	r4, [r3, #0]
    502a:	f7ff fab7 	bl	459c <__locale_charset>
    502e:	f8cd 8000 	str.w	r8, [sp]
    5032:	4603      	mov	r3, r0
    5034:	4639      	mov	r1, r7
    5036:	4628      	mov	r0, r5
    5038:	4632      	mov	r2, r6
    503a:	47a0      	blx	r4
    503c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    5040:	200008fc 	.word	0x200008fc

00005044 <_write_r>:
    5044:	b538      	push	{r3, r4, r5, lr}
    5046:	4c07      	ldr	r4, [pc, #28]	; (5064 <_write_r+0x20>)
    5048:	4605      	mov	r5, r0
    504a:	2000      	movs	r0, #0
    504c:	6020      	str	r0, [r4, #0]
    504e:	4608      	mov	r0, r1
    5050:	4611      	mov	r1, r2
    5052:	461a      	mov	r2, r3
    5054:	f7fb f930 	bl	2b8 <_write>
    5058:	1c43      	adds	r3, r0, #1
    505a:	d102      	bne.n	5062 <_write_r+0x1e>
    505c:	6823      	ldr	r3, [r4, #0]
    505e:	b103      	cbz	r3, 5062 <_write_r+0x1e>
    5060:	602b      	str	r3, [r5, #0]
    5062:	bd38      	pop	{r3, r4, r5, pc}
    5064:	20000a70 	.word	0x20000a70

00005068 <_close_r>:
    5068:	b538      	push	{r3, r4, r5, lr}
    506a:	4c06      	ldr	r4, [pc, #24]	; (5084 <_close_r+0x1c>)
    506c:	2300      	movs	r3, #0
    506e:	4605      	mov	r5, r0
    5070:	4608      	mov	r0, r1
    5072:	6023      	str	r3, [r4, #0]
    5074:	f7fd ff6e 	bl	2f54 <_close>
    5078:	1c43      	adds	r3, r0, #1
    507a:	d102      	bne.n	5082 <_close_r+0x1a>
    507c:	6821      	ldr	r1, [r4, #0]
    507e:	b101      	cbz	r1, 5082 <_close_r+0x1a>
    5080:	6029      	str	r1, [r5, #0]
    5082:	bd38      	pop	{r3, r4, r5, pc}
    5084:	20000a70 	.word	0x20000a70

00005088 <_fclose_r>:
    5088:	b570      	push	{r4, r5, r6, lr}
    508a:	4605      	mov	r5, r0
    508c:	460c      	mov	r4, r1
    508e:	2900      	cmp	r1, #0
    5090:	d039      	beq.n	5106 <_fclose_r+0x7e>
    5092:	f7fe ff33 	bl	3efc <__sfp_lock_acquire>
    5096:	b125      	cbz	r5, 50a2 <_fclose_r+0x1a>
    5098:	6bab      	ldr	r3, [r5, #56]	; 0x38
    509a:	b913      	cbnz	r3, 50a2 <_fclose_r+0x1a>
    509c:	4628      	mov	r0, r5
    509e:	f7fe fec9 	bl	3e34 <__sinit>
    50a2:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
    50a6:	b35e      	cbz	r6, 5100 <_fclose_r+0x78>
    50a8:	4628      	mov	r0, r5
    50aa:	4621      	mov	r1, r4
    50ac:	f7fe fdce 	bl	3c4c <_fflush_r>
    50b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    50b2:	4606      	mov	r6, r0
    50b4:	b13a      	cbz	r2, 50c6 <_fclose_r+0x3e>
    50b6:	4628      	mov	r0, r5
    50b8:	69e1      	ldr	r1, [r4, #28]
    50ba:	4790      	blx	r2
    50bc:	ea36 0620 	bics.w	r6, r6, r0, asr #32
    50c0:	bf28      	it	cs
    50c2:	f04f 36ff 	movcs.w	r6, #4294967295
    50c6:	89a0      	ldrh	r0, [r4, #12]
    50c8:	f000 0180 	and.w	r1, r0, #128	; 0x80
    50cc:	b20b      	sxth	r3, r1
    50ce:	b11b      	cbz	r3, 50d8 <_fclose_r+0x50>
    50d0:	4628      	mov	r0, r5
    50d2:	6921      	ldr	r1, [r4, #16]
    50d4:	f7fe ffec 	bl	40b0 <_free_r>
    50d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    50da:	b141      	cbz	r1, 50ee <_fclose_r+0x66>
    50dc:	f104 0240 	add.w	r2, r4, #64	; 0x40
    50e0:	4291      	cmp	r1, r2
    50e2:	d002      	beq.n	50ea <_fclose_r+0x62>
    50e4:	4628      	mov	r0, r5
    50e6:	f7fe ffe3 	bl	40b0 <_free_r>
    50ea:	2000      	movs	r0, #0
    50ec:	6320      	str	r0, [r4, #48]	; 0x30
    50ee:	6c61      	ldr	r1, [r4, #68]	; 0x44
    50f0:	b121      	cbz	r1, 50fc <_fclose_r+0x74>
    50f2:	4628      	mov	r0, r5
    50f4:	f7fe ffdc 	bl	40b0 <_free_r>
    50f8:	2100      	movs	r1, #0
    50fa:	6461      	str	r1, [r4, #68]	; 0x44
    50fc:	2300      	movs	r3, #0
    50fe:	81a3      	strh	r3, [r4, #12]
    5100:	f7fe fefd 	bl	3efe <__sfp_lock_release>
    5104:	e000      	b.n	5108 <_fclose_r+0x80>
    5106:	460e      	mov	r6, r1
    5108:	4630      	mov	r0, r6
    510a:	bd70      	pop	{r4, r5, r6, pc}

0000510c <fclose>:
    510c:	4b02      	ldr	r3, [pc, #8]	; (5118 <fclose+0xc>)
    510e:	4601      	mov	r1, r0
    5110:	6818      	ldr	r0, [r3, #0]
    5112:	f7ff bfb9 	b.w	5088 <_fclose_r>
    5116:	bf00      	nop
    5118:	20000040 	.word	0x20000040

0000511c <_fstat_r>:
    511c:	b538      	push	{r3, r4, r5, lr}
    511e:	4c07      	ldr	r4, [pc, #28]	; (513c <_fstat_r+0x20>)
    5120:	2300      	movs	r3, #0
    5122:	4605      	mov	r5, r0
    5124:	4608      	mov	r0, r1
    5126:	4611      	mov	r1, r2
    5128:	6023      	str	r3, [r4, #0]
    512a:	f7fd ff17 	bl	2f5c <_fstat>
    512e:	1c43      	adds	r3, r0, #1
    5130:	d102      	bne.n	5138 <_fstat_r+0x1c>
    5132:	6821      	ldr	r1, [r4, #0]
    5134:	b101      	cbz	r1, 5138 <_fstat_r+0x1c>
    5136:	6029      	str	r1, [r5, #0]
    5138:	bd38      	pop	{r3, r4, r5, pc}
    513a:	bf00      	nop
    513c:	20000a70 	.word	0x20000a70

00005140 <_isatty_r>:
    5140:	b538      	push	{r3, r4, r5, lr}
    5142:	4c06      	ldr	r4, [pc, #24]	; (515c <_isatty_r+0x1c>)
    5144:	2300      	movs	r3, #0
    5146:	4605      	mov	r5, r0
    5148:	4608      	mov	r0, r1
    514a:	6023      	str	r3, [r4, #0]
    514c:	f7fd ff0c 	bl	2f68 <_isatty>
    5150:	1c43      	adds	r3, r0, #1
    5152:	d102      	bne.n	515a <_isatty_r+0x1a>
    5154:	6821      	ldr	r1, [r4, #0]
    5156:	b101      	cbz	r1, 515a <_isatty_r+0x1a>
    5158:	6029      	str	r1, [r5, #0]
    515a:	bd38      	pop	{r3, r4, r5, pc}
    515c:	20000a70 	.word	0x20000a70

00005160 <_lseek_r>:
    5160:	b538      	push	{r3, r4, r5, lr}
    5162:	4c07      	ldr	r4, [pc, #28]	; (5180 <_lseek_r+0x20>)
    5164:	4605      	mov	r5, r0
    5166:	2000      	movs	r0, #0
    5168:	6020      	str	r0, [r4, #0]
    516a:	4608      	mov	r0, r1
    516c:	4611      	mov	r1, r2
    516e:	461a      	mov	r2, r3
    5170:	f7fd fefe 	bl	2f70 <_lseek>
    5174:	1c43      	adds	r3, r0, #1
    5176:	d102      	bne.n	517e <_lseek_r+0x1e>
    5178:	6823      	ldr	r3, [r4, #0]
    517a:	b103      	cbz	r3, 517e <_lseek_r+0x1e>
    517c:	602b      	str	r3, [r5, #0]
    517e:	bd38      	pop	{r3, r4, r5, pc}
    5180:	20000a70 	.word	0x20000a70

00005184 <_read_r>:
    5184:	b538      	push	{r3, r4, r5, lr}
    5186:	4c07      	ldr	r4, [pc, #28]	; (51a4 <_read_r+0x20>)
    5188:	4605      	mov	r5, r0
    518a:	2000      	movs	r0, #0
    518c:	6020      	str	r0, [r4, #0]
    518e:	4608      	mov	r0, r1
    5190:	4611      	mov	r1, r2
    5192:	461a      	mov	r2, r3
    5194:	f7fb f84c 	bl	230 <_read>
    5198:	1c43      	adds	r3, r0, #1
    519a:	d102      	bne.n	51a2 <_read_r+0x1e>
    519c:	6823      	ldr	r3, [r4, #0]
    519e:	b103      	cbz	r3, 51a2 <_read_r+0x1e>
    51a0:	602b      	str	r3, [r5, #0]
    51a2:	bd38      	pop	{r3, r4, r5, pc}
    51a4:	20000a70 	.word	0x20000a70

000051a8 <__aeabi_uldivmod>:
    51a8:	b94b      	cbnz	r3, 51be <__aeabi_uldivmod+0x16>
    51aa:	b942      	cbnz	r2, 51be <__aeabi_uldivmod+0x16>
    51ac:	2900      	cmp	r1, #0
    51ae:	bf08      	it	eq
    51b0:	2800      	cmpeq	r0, #0
    51b2:	d002      	beq.n	51ba <__aeabi_uldivmod+0x12>
    51b4:	f04f 31ff 	mov.w	r1, #4294967295
    51b8:	4608      	mov	r0, r1
    51ba:	f000 b837 	b.w	522c <__aeabi_idiv0>
    51be:	b082      	sub	sp, #8
    51c0:	46ec      	mov	ip, sp
    51c2:	e92d 5000 	stmdb	sp!, {ip, lr}
    51c6:	f000 f81b 	bl	5200 <__gnu_uldivmod_helper>
    51ca:	f8dd e004 	ldr.w	lr, [sp, #4]
    51ce:	b002      	add	sp, #8
    51d0:	bc0c      	pop	{r2, r3}
    51d2:	4770      	bx	lr

000051d4 <__gnu_ldivmod_helper>:
    51d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    51d6:	4616      	mov	r6, r2
    51d8:	4604      	mov	r4, r0
    51da:	460d      	mov	r5, r1
    51dc:	461f      	mov	r7, r3
    51de:	f000 f827 	bl	5230 <__divdi3>
    51e2:	fb06 f301 	mul.w	r3, r6, r1
    51e6:	fb00 3707 	mla	r7, r0, r7, r3
    51ea:	fba6 2300 	umull	r2, r3, r6, r0
    51ee:	18fb      	adds	r3, r7, r3
    51f0:	1aa2      	subs	r2, r4, r2
    51f2:	eb65 0303 	sbc.w	r3, r5, r3
    51f6:	9c06      	ldr	r4, [sp, #24]
    51f8:	e9c4 2300 	strd	r2, r3, [r4]
    51fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    51fe:	bf00      	nop

00005200 <__gnu_uldivmod_helper>:
    5200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5202:	4616      	mov	r6, r2
    5204:	4604      	mov	r4, r0
    5206:	460d      	mov	r5, r1
    5208:	461f      	mov	r7, r3
    520a:	f000 f96f 	bl	54ec <__udivdi3>
    520e:	fb00 f707 	mul.w	r7, r0, r7
    5212:	fba0 2306 	umull	r2, r3, r0, r6
    5216:	fb06 7701 	mla	r7, r6, r1, r7
    521a:	18fb      	adds	r3, r7, r3
    521c:	1aa2      	subs	r2, r4, r2
    521e:	eb65 0303 	sbc.w	r3, r5, r3
    5222:	9c06      	ldr	r4, [sp, #24]
    5224:	e9c4 2300 	strd	r2, r3, [r4]
    5228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    522a:	bf00      	nop

0000522c <__aeabi_idiv0>:
    522c:	4770      	bx	lr
    522e:	bf00      	nop

00005230 <__divdi3>:
    5230:	2900      	cmp	r1, #0
    5232:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5236:	461d      	mov	r5, r3
    5238:	f2c0 809d 	blt.w	5376 <__divdi3+0x146>
    523c:	2400      	movs	r4, #0
    523e:	2d00      	cmp	r5, #0
    5240:	f2c0 8094 	blt.w	536c <__divdi3+0x13c>
    5244:	4680      	mov	r8, r0
    5246:	460f      	mov	r7, r1
    5248:	4694      	mov	ip, r2
    524a:	461e      	mov	r6, r3
    524c:	bbe3      	cbnz	r3, 52c8 <__divdi3+0x98>
    524e:	428a      	cmp	r2, r1
    5250:	d955      	bls.n	52fe <__divdi3+0xce>
    5252:	fab2 f782 	clz	r7, r2
    5256:	b147      	cbz	r7, 526a <__divdi3+0x3a>
    5258:	f1c7 0520 	rsb	r5, r7, #32
    525c:	fa20 f605 	lsr.w	r6, r0, r5
    5260:	fa01 f107 	lsl.w	r1, r1, r7
    5264:	40ba      	lsls	r2, r7
    5266:	4331      	orrs	r1, r6
    5268:	40b8      	lsls	r0, r7
    526a:	0c17      	lsrs	r7, r2, #16
    526c:	fbb1 f6f7 	udiv	r6, r1, r7
    5270:	0c03      	lsrs	r3, r0, #16
    5272:	fa1f fc82 	uxth.w	ip, r2
    5276:	fb07 1116 	mls	r1, r7, r6, r1
    527a:	fb0c f506 	mul.w	r5, ip, r6
    527e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    5282:	429d      	cmp	r5, r3
    5284:	d908      	bls.n	5298 <__divdi3+0x68>
    5286:	1e71      	subs	r1, r6, #1
    5288:	189b      	adds	r3, r3, r2
    528a:	f080 8113 	bcs.w	54b4 <__divdi3+0x284>
    528e:	429d      	cmp	r5, r3
    5290:	f240 8110 	bls.w	54b4 <__divdi3+0x284>
    5294:	3e02      	subs	r6, #2
    5296:	189b      	adds	r3, r3, r2
    5298:	1b59      	subs	r1, r3, r5
    529a:	fbb1 f5f7 	udiv	r5, r1, r7
    529e:	fb07 1315 	mls	r3, r7, r5, r1
    52a2:	b280      	uxth	r0, r0
    52a4:	fb0c fc05 	mul.w	ip, ip, r5
    52a8:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
    52ac:	458c      	cmp	ip, r1
    52ae:	d907      	bls.n	52c0 <__divdi3+0x90>
    52b0:	1e6b      	subs	r3, r5, #1
    52b2:	188a      	adds	r2, r1, r2
    52b4:	f080 8100 	bcs.w	54b8 <__divdi3+0x288>
    52b8:	4594      	cmp	ip, r2
    52ba:	f240 80fd 	bls.w	54b8 <__divdi3+0x288>
    52be:	3d02      	subs	r5, #2
    52c0:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
    52c4:	2500      	movs	r5, #0
    52c6:	e003      	b.n	52d0 <__divdi3+0xa0>
    52c8:	428b      	cmp	r3, r1
    52ca:	d90c      	bls.n	52e6 <__divdi3+0xb6>
    52cc:	2500      	movs	r5, #0
    52ce:	4629      	mov	r1, r5
    52d0:	460a      	mov	r2, r1
    52d2:	462b      	mov	r3, r5
    52d4:	b114      	cbz	r4, 52dc <__divdi3+0xac>
    52d6:	4252      	negs	r2, r2
    52d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    52dc:	4610      	mov	r0, r2
    52de:	4619      	mov	r1, r3
    52e0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    52e4:	4770      	bx	lr
    52e6:	fab3 f583 	clz	r5, r3
    52ea:	2d00      	cmp	r5, #0
    52ec:	f040 8087 	bne.w	53fe <__divdi3+0x1ce>
    52f0:	428b      	cmp	r3, r1
    52f2:	d301      	bcc.n	52f8 <__divdi3+0xc8>
    52f4:	4282      	cmp	r2, r0
    52f6:	d8ea      	bhi.n	52ce <__divdi3+0x9e>
    52f8:	2500      	movs	r5, #0
    52fa:	2101      	movs	r1, #1
    52fc:	e7e8      	b.n	52d0 <__divdi3+0xa0>
    52fe:	b912      	cbnz	r2, 5306 <__divdi3+0xd6>
    5300:	2601      	movs	r6, #1
    5302:	fbb6 f2f2 	udiv	r2, r6, r2
    5306:	fab2 f682 	clz	r6, r2
    530a:	2e00      	cmp	r6, #0
    530c:	d139      	bne.n	5382 <__divdi3+0x152>
    530e:	1a8e      	subs	r6, r1, r2
    5310:	0c13      	lsrs	r3, r2, #16
    5312:	fa1f fc82 	uxth.w	ip, r2
    5316:	2501      	movs	r5, #1
    5318:	fbb6 f7f3 	udiv	r7, r6, r3
    531c:	fb03 6117 	mls	r1, r3, r7, r6
    5320:	ea4f 4910 	mov.w	r9, r0, lsr #16
    5324:	fb0c f807 	mul.w	r8, ip, r7
    5328:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
    532c:	45b0      	cmp	r8, r6
    532e:	d906      	bls.n	533e <__divdi3+0x10e>
    5330:	1e79      	subs	r1, r7, #1
    5332:	18b6      	adds	r6, r6, r2
    5334:	d202      	bcs.n	533c <__divdi3+0x10c>
    5336:	45b0      	cmp	r8, r6
    5338:	f200 80d3 	bhi.w	54e2 <__divdi3+0x2b2>
    533c:	460f      	mov	r7, r1
    533e:	ebc8 0606 	rsb	r6, r8, r6
    5342:	fbb6 f1f3 	udiv	r1, r6, r3
    5346:	fb03 6311 	mls	r3, r3, r1, r6
    534a:	b280      	uxth	r0, r0
    534c:	fb0c fc01 	mul.w	ip, ip, r1
    5350:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    5354:	459c      	cmp	ip, r3
    5356:	d906      	bls.n	5366 <__divdi3+0x136>
    5358:	1e4e      	subs	r6, r1, #1
    535a:	189a      	adds	r2, r3, r2
    535c:	d202      	bcs.n	5364 <__divdi3+0x134>
    535e:	4594      	cmp	ip, r2
    5360:	f200 80c2 	bhi.w	54e8 <__divdi3+0x2b8>
    5364:	4631      	mov	r1, r6
    5366:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
    536a:	e7b1      	b.n	52d0 <__divdi3+0xa0>
    536c:	43e4      	mvns	r4, r4
    536e:	4252      	negs	r2, r2
    5370:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    5374:	e766      	b.n	5244 <__divdi3+0x14>
    5376:	4240      	negs	r0, r0
    5378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    537c:	f04f 34ff 	mov.w	r4, #4294967295
    5380:	e75d      	b.n	523e <__divdi3+0xe>
    5382:	40b2      	lsls	r2, r6
    5384:	f1c6 0920 	rsb	r9, r6, #32
    5388:	fa21 f709 	lsr.w	r7, r1, r9
    538c:	fa20 f509 	lsr.w	r5, r0, r9
    5390:	0c13      	lsrs	r3, r2, #16
    5392:	fa01 f106 	lsl.w	r1, r1, r6
    5396:	fbb7 f8f3 	udiv	r8, r7, r3
    539a:	ea45 0901 	orr.w	r9, r5, r1
    539e:	fa1f fc82 	uxth.w	ip, r2
    53a2:	fb03 7718 	mls	r7, r3, r8, r7
    53a6:	ea4f 4119 	mov.w	r1, r9, lsr #16
    53aa:	fb0c f508 	mul.w	r5, ip, r8
    53ae:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
    53b2:	40b0      	lsls	r0, r6
    53b4:	42bd      	cmp	r5, r7
    53b6:	d90a      	bls.n	53ce <__divdi3+0x19e>
    53b8:	18bf      	adds	r7, r7, r2
    53ba:	f108 36ff 	add.w	r6, r8, #4294967295
    53be:	f080 808e 	bcs.w	54de <__divdi3+0x2ae>
    53c2:	42bd      	cmp	r5, r7
    53c4:	f240 808b 	bls.w	54de <__divdi3+0x2ae>
    53c8:	f1a8 0802 	sub.w	r8, r8, #2
    53cc:	18bf      	adds	r7, r7, r2
    53ce:	1b79      	subs	r1, r7, r5
    53d0:	fbb1 f5f3 	udiv	r5, r1, r3
    53d4:	fb03 1715 	mls	r7, r3, r5, r1
    53d8:	fa1f f989 	uxth.w	r9, r9
    53dc:	fb0c f605 	mul.w	r6, ip, r5
    53e0:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
    53e4:	428e      	cmp	r6, r1
    53e6:	d906      	bls.n	53f6 <__divdi3+0x1c6>
    53e8:	1e6f      	subs	r7, r5, #1
    53ea:	1889      	adds	r1, r1, r2
    53ec:	d271      	bcs.n	54d2 <__divdi3+0x2a2>
    53ee:	428e      	cmp	r6, r1
    53f0:	d96f      	bls.n	54d2 <__divdi3+0x2a2>
    53f2:	3d02      	subs	r5, #2
    53f4:	1889      	adds	r1, r1, r2
    53f6:	1b8e      	subs	r6, r1, r6
    53f8:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
    53fc:	e78c      	b.n	5318 <__divdi3+0xe8>
    53fe:	f1c5 0120 	rsb	r1, r5, #32
    5402:	fa22 f301 	lsr.w	r3, r2, r1
    5406:	fa06 f605 	lsl.w	r6, r6, r5
    540a:	431e      	orrs	r6, r3
    540c:	fa27 f201 	lsr.w	r2, r7, r1
    5410:	ea4f 4916 	mov.w	r9, r6, lsr #16
    5414:	fa07 f705 	lsl.w	r7, r7, r5
    5418:	fa20 f101 	lsr.w	r1, r0, r1
    541c:	fbb2 f8f9 	udiv	r8, r2, r9
    5420:	430f      	orrs	r7, r1
    5422:	0c3b      	lsrs	r3, r7, #16
    5424:	fa1f fa86 	uxth.w	sl, r6
    5428:	fb09 2218 	mls	r2, r9, r8, r2
    542c:	fb0a fb08 	mul.w	fp, sl, r8
    5430:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    5434:	4593      	cmp	fp, r2
    5436:	fa0c fc05 	lsl.w	ip, ip, r5
    543a:	d908      	bls.n	544e <__divdi3+0x21e>
    543c:	1992      	adds	r2, r2, r6
    543e:	f108 31ff 	add.w	r1, r8, #4294967295
    5442:	d24a      	bcs.n	54da <__divdi3+0x2aa>
    5444:	4593      	cmp	fp, r2
    5446:	d948      	bls.n	54da <__divdi3+0x2aa>
    5448:	f1a8 0802 	sub.w	r8, r8, #2
    544c:	1992      	adds	r2, r2, r6
    544e:	ebcb 0302 	rsb	r3, fp, r2
    5452:	fbb3 f1f9 	udiv	r1, r3, r9
    5456:	fb09 3211 	mls	r2, r9, r1, r3
    545a:	b2bf      	uxth	r7, r7
    545c:	fb0a fa01 	mul.w	sl, sl, r1
    5460:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
    5464:	459a      	cmp	sl, r3
    5466:	d906      	bls.n	5476 <__divdi3+0x246>
    5468:	1e4a      	subs	r2, r1, #1
    546a:	199b      	adds	r3, r3, r6
    546c:	d233      	bcs.n	54d6 <__divdi3+0x2a6>
    546e:	459a      	cmp	sl, r3
    5470:	d931      	bls.n	54d6 <__divdi3+0x2a6>
    5472:	3902      	subs	r1, #2
    5474:	199b      	adds	r3, r3, r6
    5476:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
    547a:	0c0f      	lsrs	r7, r1, #16
    547c:	fa1f f88c 	uxth.w	r8, ip
    5480:	fb08 f607 	mul.w	r6, r8, r7
    5484:	b28a      	uxth	r2, r1
    5486:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
    548a:	fb08 f802 	mul.w	r8, r8, r2
    548e:	fb0c 6202 	mla	r2, ip, r2, r6
    5492:	eb02 4218 	add.w	r2, r2, r8, lsr #16
    5496:	fb0c fc07 	mul.w	ip, ip, r7
    549a:	4296      	cmp	r6, r2
    549c:	bf88      	it	hi
    549e:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
    54a2:	ebca 0303 	rsb	r3, sl, r3
    54a6:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
    54aa:	4563      	cmp	r3, ip
    54ac:	d30e      	bcc.n	54cc <__divdi3+0x29c>
    54ae:	d005      	beq.n	54bc <__divdi3+0x28c>
    54b0:	2500      	movs	r5, #0
    54b2:	e70d      	b.n	52d0 <__divdi3+0xa0>
    54b4:	460e      	mov	r6, r1
    54b6:	e6ef      	b.n	5298 <__divdi3+0x68>
    54b8:	461d      	mov	r5, r3
    54ba:	e701      	b.n	52c0 <__divdi3+0x90>
    54bc:	fa1f f888 	uxth.w	r8, r8
    54c0:	fa00 f005 	lsl.w	r0, r0, r5
    54c4:	eb08 4502 	add.w	r5, r8, r2, lsl #16
    54c8:	42a8      	cmp	r0, r5
    54ca:	d2f1      	bcs.n	54b0 <__divdi3+0x280>
    54cc:	3901      	subs	r1, #1
    54ce:	2500      	movs	r5, #0
    54d0:	e6fe      	b.n	52d0 <__divdi3+0xa0>
    54d2:	463d      	mov	r5, r7
    54d4:	e78f      	b.n	53f6 <__divdi3+0x1c6>
    54d6:	4611      	mov	r1, r2
    54d8:	e7cd      	b.n	5476 <__divdi3+0x246>
    54da:	4688      	mov	r8, r1
    54dc:	e7b7      	b.n	544e <__divdi3+0x21e>
    54de:	46b0      	mov	r8, r6
    54e0:	e775      	b.n	53ce <__divdi3+0x19e>
    54e2:	3f02      	subs	r7, #2
    54e4:	18b6      	adds	r6, r6, r2
    54e6:	e72a      	b.n	533e <__divdi3+0x10e>
    54e8:	3902      	subs	r1, #2
    54ea:	e73c      	b.n	5366 <__divdi3+0x136>

000054ec <__udivdi3>:
    54ec:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    54f0:	4614      	mov	r4, r2
    54f2:	4605      	mov	r5, r0
    54f4:	460e      	mov	r6, r1
    54f6:	2b00      	cmp	r3, #0
    54f8:	d13d      	bne.n	5576 <__udivdi3+0x8a>
    54fa:	428a      	cmp	r2, r1
    54fc:	d949      	bls.n	5592 <__udivdi3+0xa6>
    54fe:	fab2 f782 	clz	r7, r2
    5502:	b147      	cbz	r7, 5516 <__udivdi3+0x2a>
    5504:	f1c7 0120 	rsb	r1, r7, #32
    5508:	fa20 f201 	lsr.w	r2, r0, r1
    550c:	fa06 f607 	lsl.w	r6, r6, r7
    5510:	40bc      	lsls	r4, r7
    5512:	4316      	orrs	r6, r2
    5514:	40bd      	lsls	r5, r7
    5516:	0c22      	lsrs	r2, r4, #16
    5518:	fbb6 f0f2 	udiv	r0, r6, r2
    551c:	0c2f      	lsrs	r7, r5, #16
    551e:	b2a1      	uxth	r1, r4
    5520:	fb02 6610 	mls	r6, r2, r0, r6
    5524:	fb01 f300 	mul.w	r3, r1, r0
    5528:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    552c:	42b3      	cmp	r3, r6
    552e:	d908      	bls.n	5542 <__udivdi3+0x56>
    5530:	1e47      	subs	r7, r0, #1
    5532:	1936      	adds	r6, r6, r4
    5534:	f080 80f8 	bcs.w	5728 <__udivdi3+0x23c>
    5538:	42b3      	cmp	r3, r6
    553a:	f240 80f5 	bls.w	5728 <__udivdi3+0x23c>
    553e:	3802      	subs	r0, #2
    5540:	1936      	adds	r6, r6, r4
    5542:	1af6      	subs	r6, r6, r3
    5544:	fbb6 f3f2 	udiv	r3, r6, r2
    5548:	fb02 6213 	mls	r2, r2, r3, r6
    554c:	b2ad      	uxth	r5, r5
    554e:	fb01 f103 	mul.w	r1, r1, r3
    5552:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
    5556:	4291      	cmp	r1, r2
    5558:	d907      	bls.n	556a <__udivdi3+0x7e>
    555a:	1e5e      	subs	r6, r3, #1
    555c:	1912      	adds	r2, r2, r4
    555e:	f080 80e5 	bcs.w	572c <__udivdi3+0x240>
    5562:	4291      	cmp	r1, r2
    5564:	f240 80e2 	bls.w	572c <__udivdi3+0x240>
    5568:	3b02      	subs	r3, #2
    556a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    556e:	2100      	movs	r1, #0
    5570:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    5574:	4770      	bx	lr
    5576:	428b      	cmp	r3, r1
    5578:	d843      	bhi.n	5602 <__udivdi3+0x116>
    557a:	fab3 f483 	clz	r4, r3
    557e:	2c00      	cmp	r4, #0
    5580:	d142      	bne.n	5608 <__udivdi3+0x11c>
    5582:	428b      	cmp	r3, r1
    5584:	d302      	bcc.n	558c <__udivdi3+0xa0>
    5586:	4282      	cmp	r2, r0
    5588:	f200 80df 	bhi.w	574a <__udivdi3+0x25e>
    558c:	2100      	movs	r1, #0
    558e:	2001      	movs	r0, #1
    5590:	e7ee      	b.n	5570 <__udivdi3+0x84>
    5592:	b912      	cbnz	r2, 559a <__udivdi3+0xae>
    5594:	2701      	movs	r7, #1
    5596:	fbb7 f4f2 	udiv	r4, r7, r2
    559a:	fab4 f284 	clz	r2, r4
    559e:	2a00      	cmp	r2, #0
    55a0:	f040 8088 	bne.w	56b4 <__udivdi3+0x1c8>
    55a4:	1b0a      	subs	r2, r1, r4
    55a6:	0c23      	lsrs	r3, r4, #16
    55a8:	b2a7      	uxth	r7, r4
    55aa:	2101      	movs	r1, #1
    55ac:	fbb2 f6f3 	udiv	r6, r2, r3
    55b0:	fb03 2216 	mls	r2, r3, r6, r2
    55b4:	ea4f 4c15 	mov.w	ip, r5, lsr #16
    55b8:	fb07 f006 	mul.w	r0, r7, r6
    55bc:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
    55c0:	4290      	cmp	r0, r2
    55c2:	d907      	bls.n	55d4 <__udivdi3+0xe8>
    55c4:	1912      	adds	r2, r2, r4
    55c6:	f106 3cff 	add.w	ip, r6, #4294967295
    55ca:	d202      	bcs.n	55d2 <__udivdi3+0xe6>
    55cc:	4290      	cmp	r0, r2
    55ce:	f200 80ce 	bhi.w	576e <__udivdi3+0x282>
    55d2:	4666      	mov	r6, ip
    55d4:	1a12      	subs	r2, r2, r0
    55d6:	fbb2 f0f3 	udiv	r0, r2, r3
    55da:	fb03 2310 	mls	r3, r3, r0, r2
    55de:	b2ad      	uxth	r5, r5
    55e0:	fb07 f700 	mul.w	r7, r7, r0
    55e4:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
    55e8:	429f      	cmp	r7, r3
    55ea:	d907      	bls.n	55fc <__udivdi3+0x110>
    55ec:	1e42      	subs	r2, r0, #1
    55ee:	191b      	adds	r3, r3, r4
    55f0:	f080 809e 	bcs.w	5730 <__udivdi3+0x244>
    55f4:	429f      	cmp	r7, r3
    55f6:	f240 809b 	bls.w	5730 <__udivdi3+0x244>
    55fa:	3802      	subs	r0, #2
    55fc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    5600:	e7b6      	b.n	5570 <__udivdi3+0x84>
    5602:	2100      	movs	r1, #0
    5604:	4608      	mov	r0, r1
    5606:	e7b3      	b.n	5570 <__udivdi3+0x84>
    5608:	f1c4 0620 	rsb	r6, r4, #32
    560c:	fa22 f506 	lsr.w	r5, r2, r6
    5610:	fa03 f304 	lsl.w	r3, r3, r4
    5614:	432b      	orrs	r3, r5
    5616:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    561a:	fa21 f506 	lsr.w	r5, r1, r6
    561e:	fa01 f104 	lsl.w	r1, r1, r4
    5622:	fa20 f606 	lsr.w	r6, r0, r6
    5626:	fbb5 f7fc 	udiv	r7, r5, ip
    562a:	ea46 0a01 	orr.w	sl, r6, r1
    562e:	fa1f f883 	uxth.w	r8, r3
    5632:	fb0c 5517 	mls	r5, ip, r7, r5
    5636:	ea4f 411a 	mov.w	r1, sl, lsr #16
    563a:	fb08 f907 	mul.w	r9, r8, r7
    563e:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
    5642:	45a9      	cmp	r9, r5
    5644:	fa02 f204 	lsl.w	r2, r2, r4
    5648:	d903      	bls.n	5652 <__udivdi3+0x166>
    564a:	1e7e      	subs	r6, r7, #1
    564c:	18ed      	adds	r5, r5, r3
    564e:	d37f      	bcc.n	5750 <__udivdi3+0x264>
    5650:	4637      	mov	r7, r6
    5652:	ebc9 0105 	rsb	r1, r9, r5
    5656:	fbb1 f6fc 	udiv	r6, r1, ip
    565a:	fb0c 1516 	mls	r5, ip, r6, r1
    565e:	fa1f fa8a 	uxth.w	sl, sl
    5662:	fb08 f806 	mul.w	r8, r8, r6
    5666:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
    566a:	4588      	cmp	r8, r1
    566c:	d903      	bls.n	5676 <__udivdi3+0x18a>
    566e:	1e75      	subs	r5, r6, #1
    5670:	18c9      	adds	r1, r1, r3
    5672:	d373      	bcc.n	575c <__udivdi3+0x270>
    5674:	462e      	mov	r6, r5
    5676:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
    567a:	0c37      	lsrs	r7, r6, #16
    567c:	fa1f fc82 	uxth.w	ip, r2
    5680:	fb0c f507 	mul.w	r5, ip, r7
    5684:	0c12      	lsrs	r2, r2, #16
    5686:	b2b3      	uxth	r3, r6
    5688:	fb0c fc03 	mul.w	ip, ip, r3
    568c:	fb02 5303 	mla	r3, r2, r3, r5
    5690:	eb03 431c 	add.w	r3, r3, ip, lsr #16
    5694:	fb02 f207 	mul.w	r2, r2, r7
    5698:	429d      	cmp	r5, r3
    569a:	bf88      	it	hi
    569c:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
    56a0:	ebc8 0101 	rsb	r1, r8, r1
    56a4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    56a8:	4291      	cmp	r1, r2
    56aa:	d34b      	bcc.n	5744 <__udivdi3+0x258>
    56ac:	d042      	beq.n	5734 <__udivdi3+0x248>
    56ae:	4630      	mov	r0, r6
    56b0:	2100      	movs	r1, #0
    56b2:	e75d      	b.n	5570 <__udivdi3+0x84>
    56b4:	4094      	lsls	r4, r2
    56b6:	f1c2 0520 	rsb	r5, r2, #32
    56ba:	fa21 f605 	lsr.w	r6, r1, r5
    56be:	0c23      	lsrs	r3, r4, #16
    56c0:	fa20 f705 	lsr.w	r7, r0, r5
    56c4:	fa01 f102 	lsl.w	r1, r1, r2
    56c8:	fbb6 fcf3 	udiv	ip, r6, r3
    56cc:	4339      	orrs	r1, r7
    56ce:	0c0d      	lsrs	r5, r1, #16
    56d0:	b2a7      	uxth	r7, r4
    56d2:	fb03 661c 	mls	r6, r3, ip, r6
    56d6:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    56da:	fb07 f80c 	mul.w	r8, r7, ip
    56de:	45b0      	cmp	r8, r6
    56e0:	fa00 f502 	lsl.w	r5, r0, r2
    56e4:	d908      	bls.n	56f8 <__udivdi3+0x20c>
    56e6:	1936      	adds	r6, r6, r4
    56e8:	f10c 30ff 	add.w	r0, ip, #4294967295
    56ec:	d23d      	bcs.n	576a <__udivdi3+0x27e>
    56ee:	45b0      	cmp	r8, r6
    56f0:	d93b      	bls.n	576a <__udivdi3+0x27e>
    56f2:	f1ac 0c02 	sub.w	ip, ip, #2
    56f6:	1936      	adds	r6, r6, r4
    56f8:	ebc8 0206 	rsb	r2, r8, r6
    56fc:	fbb2 f0f3 	udiv	r0, r2, r3
    5700:	fb03 2610 	mls	r6, r3, r0, r2
    5704:	b28a      	uxth	r2, r1
    5706:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
    570a:	fb07 f100 	mul.w	r1, r7, r0
    570e:	4291      	cmp	r1, r2
    5710:	d906      	bls.n	5720 <__udivdi3+0x234>
    5712:	1e46      	subs	r6, r0, #1
    5714:	1912      	adds	r2, r2, r4
    5716:	d226      	bcs.n	5766 <__udivdi3+0x27a>
    5718:	4291      	cmp	r1, r2
    571a:	d924      	bls.n	5766 <__udivdi3+0x27a>
    571c:	3802      	subs	r0, #2
    571e:	1912      	adds	r2, r2, r4
    5720:	1a52      	subs	r2, r2, r1
    5722:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
    5726:	e741      	b.n	55ac <__udivdi3+0xc0>
    5728:	4638      	mov	r0, r7
    572a:	e70a      	b.n	5542 <__udivdi3+0x56>
    572c:	4633      	mov	r3, r6
    572e:	e71c      	b.n	556a <__udivdi3+0x7e>
    5730:	4610      	mov	r0, r2
    5732:	e763      	b.n	55fc <__udivdi3+0x110>
    5734:	fa1f fc8c 	uxth.w	ip, ip
    5738:	fa00 f004 	lsl.w	r0, r0, r4
    573c:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
    5740:	4298      	cmp	r0, r3
    5742:	d2b4      	bcs.n	56ae <__udivdi3+0x1c2>
    5744:	1e70      	subs	r0, r6, #1
    5746:	2100      	movs	r1, #0
    5748:	e712      	b.n	5570 <__udivdi3+0x84>
    574a:	4621      	mov	r1, r4
    574c:	4620      	mov	r0, r4
    574e:	e70f      	b.n	5570 <__udivdi3+0x84>
    5750:	45a9      	cmp	r9, r5
    5752:	f67f af7d 	bls.w	5650 <__udivdi3+0x164>
    5756:	3f02      	subs	r7, #2
    5758:	18ed      	adds	r5, r5, r3
    575a:	e77a      	b.n	5652 <__udivdi3+0x166>
    575c:	4588      	cmp	r8, r1
    575e:	d989      	bls.n	5674 <__udivdi3+0x188>
    5760:	3e02      	subs	r6, #2
    5762:	18c9      	adds	r1, r1, r3
    5764:	e787      	b.n	5676 <__udivdi3+0x18a>
    5766:	4630      	mov	r0, r6
    5768:	e7da      	b.n	5720 <__udivdi3+0x234>
    576a:	4684      	mov	ip, r0
    576c:	e7c4      	b.n	56f8 <__udivdi3+0x20c>
    576e:	3e02      	subs	r6, #2
    5770:	1912      	adds	r2, r2, r4
    5772:	e72f      	b.n	55d4 <__udivdi3+0xe8>

00005774 <write_data>:
    5774:	4153 344d 204c 5754 4d49 4d20 7361 6574     SAM4L TWIM Maste
    5784:	2072 7845 6d61 6c70 0065 0000 6143 656d     r Example...Came
    5794:	6172 4120 7070 0d0a 0000 0000 7453 7261     ra App......Star
    57a4:	2074 6353 6e61 2e2e 002e 0000 7257 7469     t Scan......Writ
    57b4:	6e69 2067 6164 6174 7420 206f 4154 4752     ing data to TARG
    57c4:	5445 0a0d 0000 0000 5257 5449 2045 4554     ET......WRITE TE
    57d4:	5453 093a 4150 5353 0a0d 0000 5257 5449     ST:.PASS....WRIT
    57e4:	2045 4554 5453 093a 4146 4c49 4445 0a0d     E TEST:.FAILED..
    57f4:	0000 0000                                   ....

000057f8 <_global_impure_ptr>:
    57f8:	0048 2000 0043 000a                         H.. C...

00005800 <blanks.6678>:
    5800:	2020 2020 2020 2020 2020 2020 2020 2020                     

00005810 <zeroes.6679>:
    5810:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
    5820:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
    5830:	3000 3231 3433 3635 3837 6139 6362 6564     .0123456789abcde
    5840:	0066 4f50 4953 0058 002e 0000               f.POSIX.....

0000584c <_init>:
    584c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    584e:	bf00      	nop
    5850:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5852:	bc08      	pop	{r3}
    5854:	469e      	mov	lr, r3
    5856:	4770      	bx	lr

00005858 <__init_array_start>:
    5858:	00003c2d 	.word	0x00003c2d

0000585c <__frame_dummy_init_array_entry>:
    585c:	000001f9                                ....

00005860 <_fini>:
    5860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5862:	bf00      	nop
    5864:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5866:	bc08      	pop	{r3}
    5868:	469e      	mov	lr, r3
    586a:	4770      	bx	lr

0000586c <__fini_array_start>:
    586c:	000001d1 	.word	0x000001d1

Disassembly of section .relocate:

20000000 <bpm_ps_no_halt_exec>:
 */
RAMFUNC bool bpm_ps_no_halt_exec(Bpm *bpm, uint32_t pmcon)
{
	bool b_psok = false;
	bool b_timeout = false;
	BPM_UNLOCK(PMCON);
20000000:	f04f 0300 	mov.w	r3, #0
20000004:	f2c4 030f 	movt	r3, #16399	; 0x400f
20000008:	f04f 021c 	mov.w	r2, #28
2000000c:	f6ca 2200 	movt	r2, #43520	; 0xaa00
20000010:	619a      	str	r2, [r3, #24]
	bpm->BPM_PMCON = pmcon;
20000012:	61c1      	str	r1, [r0, #28]
	do {
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
20000014:	f04f 0100 	mov.w	r1, #0
20000018:	f2c4 010f 	movt	r1, #16399	; 0x400f
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
2000001c:	f24e 0210 	movw	r2, #57360	; 0xe010
20000020:	f2ce 0200 	movt	r2, #57344	; 0xe000
	bool b_psok = false;
	bool b_timeout = false;
	BPM_UNLOCK(PMCON);
	bpm->BPM_PMCON = pmcon;
	do {
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
20000024:	6948      	ldr	r0, [r1, #20]
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
20000026:	6813      	ldr	r3, [r2, #0]
20000028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
	} while (!b_psok && !b_timeout);
2000002c:	f010 0001 	ands.w	r0, r0, #1
20000030:	d101      	bne.n	20000036 <bpm_ps_no_halt_exec+0x36>
20000032:	2b00      	cmp	r3, #0
20000034:	d0f6      	beq.n	20000024 <bpm_ps_no_halt_exec+0x24>
	return b_psok;
}
20000036:	4770      	bx	lr

20000038 <g_interrupt_enabled>:
20000038:	0001 0000                                   ....

2000003c <flashcalw_wait_until_ready>:
2000003c:	2b4d 0000                                   M+..

20000040 <_impure_ptr>:
20000040:	0048 2000 0000 0000                         H.. ....

20000048 <impure_data>:
20000048:	0000 0000 0334 2000 039c 2000 0404 2000     ....4.. ... ... 
	...
2000007c:	57fc 0000 0000 0000 0000 0000 0000 0000     .W..............
	...
200000f0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000100:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000470 <lc_ctype_charset>:
20000470:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

20000490 <__mb_cur_max>:
20000490:	0001 0000                                   ....

20000494 <lc_message_charset>:
20000494:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

200004b4 <lconv>:
200004b4:	5848 0000 57ff 0000 57ff 0000 57ff 0000     HX...W...W...W..
200004c4:	57ff 0000 57ff 0000 57ff 0000 57ff 0000     .W...W...W...W..
200004d4:	57ff 0000 57ff 0000 ffff ffff ffff ffff     .W...W..........
200004e4:	ffff ffff ffff 0000                         ........

200004ec <__malloc_av_>:
	...
200004f4:	04ec 2000 04ec 2000 04f4 2000 04f4 2000     ... ... ... ... 
20000504:	04fc 2000 04fc 2000 0504 2000 0504 2000     ... ... ... ... 
20000514:	050c 2000 050c 2000 0514 2000 0514 2000     ... ... ... ... 
20000524:	051c 2000 051c 2000 0524 2000 0524 2000     ... ... $.. $.. 
20000534:	052c 2000 052c 2000 0534 2000 0534 2000     ,.. ,.. 4.. 4.. 
20000544:	053c 2000 053c 2000 0544 2000 0544 2000     <.. <.. D.. D.. 
20000554:	054c 2000 054c 2000 0554 2000 0554 2000     L.. L.. T.. T.. 
20000564:	055c 2000 055c 2000 0564 2000 0564 2000     \.. \.. d.. d.. 
20000574:	056c 2000 056c 2000 0574 2000 0574 2000     l.. l.. t.. t.. 
20000584:	057c 2000 057c 2000 0584 2000 0584 2000     |.. |.. ... ... 
20000594:	058c 2000 058c 2000 0594 2000 0594 2000     ... ... ... ... 
200005a4:	059c 2000 059c 2000 05a4 2000 05a4 2000     ... ... ... ... 
200005b4:	05ac 2000 05ac 2000 05b4 2000 05b4 2000     ... ... ... ... 
200005c4:	05bc 2000 05bc 2000 05c4 2000 05c4 2000     ... ... ... ... 
200005d4:	05cc 2000 05cc 2000 05d4 2000 05d4 2000     ... ... ... ... 
200005e4:	05dc 2000 05dc 2000 05e4 2000 05e4 2000     ... ... ... ... 
200005f4:	05ec 2000 05ec 2000 05f4 2000 05f4 2000     ... ... ... ... 
20000604:	05fc 2000 05fc 2000 0604 2000 0604 2000     ... ... ... ... 
20000614:	060c 2000 060c 2000 0614 2000 0614 2000     ... ... ... ... 
20000624:	061c 2000 061c 2000 0624 2000 0624 2000     ... ... $.. $.. 
20000634:	062c 2000 062c 2000 0634 2000 0634 2000     ,.. ,.. 4.. 4.. 
20000644:	063c 2000 063c 2000 0644 2000 0644 2000     <.. <.. D.. D.. 
20000654:	064c 2000 064c 2000 0654 2000 0654 2000     L.. L.. T.. T.. 
20000664:	065c 2000 065c 2000 0664 2000 0664 2000     \.. \.. d.. d.. 
20000674:	066c 2000 066c 2000 0674 2000 0674 2000     l.. l.. t.. t.. 
20000684:	067c 2000 067c 2000 0684 2000 0684 2000     |.. |.. ... ... 
20000694:	068c 2000 068c 2000 0694 2000 0694 2000     ... ... ... ... 
200006a4:	069c 2000 069c 2000 06a4 2000 06a4 2000     ... ... ... ... 
200006b4:	06ac 2000 06ac 2000 06b4 2000 06b4 2000     ... ... ... ... 
200006c4:	06bc 2000 06bc 2000 06c4 2000 06c4 2000     ... ... ... ... 
200006d4:	06cc 2000 06cc 2000 06d4 2000 06d4 2000     ... ... ... ... 
200006e4:	06dc 2000 06dc 2000 06e4 2000 06e4 2000     ... ... ... ... 
200006f4:	06ec 2000 06ec 2000 06f4 2000 06f4 2000     ... ... ... ... 
20000704:	06fc 2000 06fc 2000 0704 2000 0704 2000     ... ... ... ... 
20000714:	070c 2000 070c 2000 0714 2000 0714 2000     ... ... ... ... 
20000724:	071c 2000 071c 2000 0724 2000 0724 2000     ... ... $.. $.. 
20000734:	072c 2000 072c 2000 0734 2000 0734 2000     ,.. ,.. 4.. 4.. 
20000744:	073c 2000 073c 2000 0744 2000 0744 2000     <.. <.. D.. D.. 
20000754:	074c 2000 074c 2000 0754 2000 0754 2000     L.. L.. T.. T.. 
20000764:	075c 2000 075c 2000 0764 2000 0764 2000     \.. \.. d.. d.. 
20000774:	076c 2000 076c 2000 0774 2000 0774 2000     l.. l.. t.. t.. 
20000784:	077c 2000 077c 2000 0784 2000 0784 2000     |.. |.. ... ... 
20000794:	078c 2000 078c 2000 0794 2000 0794 2000     ... ... ... ... 
200007a4:	079c 2000 079c 2000 07a4 2000 07a4 2000     ... ... ... ... 
200007b4:	07ac 2000 07ac 2000 07b4 2000 07b4 2000     ... ... ... ... 
200007c4:	07bc 2000 07bc 2000 07c4 2000 07c4 2000     ... ... ... ... 
200007d4:	07cc 2000 07cc 2000 07d4 2000 07d4 2000     ... ... ... ... 
200007e4:	07dc 2000 07dc 2000 07e4 2000 07e4 2000     ... ... ... ... 
200007f4:	07ec 2000 07ec 2000 07f4 2000 07f4 2000     ... ... ... ... 
20000804:	07fc 2000 07fc 2000 0804 2000 0804 2000     ... ... ... ... 
20000814:	080c 2000 080c 2000 0814 2000 0814 2000     ... ... ... ... 
20000824:	081c 2000 081c 2000 0824 2000 0824 2000     ... ... $.. $.. 
20000834:	082c 2000 082c 2000 0834 2000 0834 2000     ,.. ,.. 4.. 4.. 
20000844:	083c 2000 083c 2000 0844 2000 0844 2000     <.. <.. D.. D.. 
20000854:	084c 2000 084c 2000 0854 2000 0854 2000     L.. L.. T.. T.. 
20000864:	085c 2000 085c 2000 0864 2000 0864 2000     \.. \.. d.. d.. 
20000874:	086c 2000 086c 2000 0874 2000 0874 2000     l.. l.. t.. t.. 
20000884:	087c 2000 087c 2000 0884 2000 0884 2000     |.. |.. ... ... 
20000894:	088c 2000 088c 2000 0894 2000 0894 2000     ... ... ... ... 
200008a4:	089c 2000 089c 2000 08a4 2000 08a4 2000     ... ... ... ... 
200008b4:	08ac 2000 08ac 2000 08b4 2000 08b4 2000     ... ... ... ... 
200008c4:	08bc 2000 08bc 2000 08c4 2000 08c4 2000     ... ... ... ... 
200008d4:	08cc 2000 08cc 2000 08d4 2000 08d4 2000     ... ... ... ... 
200008e4:	08dc 2000 08dc 2000 08e4 2000 08e4 2000     ... ... ... ... 

200008f4 <__malloc_sbrk_base>:
200008f4:	ffff ffff                                   ....

200008f8 <__malloc_trim_threshold>:
200008f8:	0000 0002                                   ....

200008fc <__wctomb>:
200008fc:	5001 0000                                   .P..
