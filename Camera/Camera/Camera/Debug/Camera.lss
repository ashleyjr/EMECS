
Camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000627c  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000627c  0000627c  0000e27c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000910  20000000  00006284  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000198  20000910  00006b94  00010910  2**2
                  ALLOC
  4 .stack        00001000  20000aa8  00006d2c  00010910  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00010910  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  0001093a  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002e9ca  00000000  00000000  000109ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000080a2  00000000  00000000  0003f375  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000011c8  00000000  00000000  00047418  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000f38  00000000  00000000  000485e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0003296b  00000000  00000000  00049518  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001ad7b  00000000  00000000  0007be83  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000e5dcb  00000000  00000000  00096bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000026e0  00000000  00000000  0017c9cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000f0cc  00000000  00000000  0017f0ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20001aa8 	.word	0x20001aa8
       4:	000036a1 	.word	0x000036a1
       8:	0000369d 	.word	0x0000369d
       c:	0000369d 	.word	0x0000369d
      10:	0000369d 	.word	0x0000369d
      14:	0000369d 	.word	0x0000369d
      18:	0000369d 	.word	0x0000369d
	...
      2c:	0000369d 	.word	0x0000369d
      30:	0000369d 	.word	0x0000369d
      34:	00000000 	.word	0x00000000
      38:	0000369d 	.word	0x0000369d
      3c:	0000369d 	.word	0x0000369d
      40:	0000369d 	.word	0x0000369d
      44:	00000d39 	.word	0x00000d39
      48:	00000d4d 	.word	0x00000d4d
      4c:	00000d61 	.word	0x00000d61
      50:	00000d75 	.word	0x00000d75
      54:	00000d89 	.word	0x00000d89
      58:	00000d9d 	.word	0x00000d9d
      5c:	00000db1 	.word	0x00000db1
      60:	00000dc5 	.word	0x00000dc5
      64:	00000dd9 	.word	0x00000dd9
      68:	00000ded 	.word	0x00000ded
      6c:	00000e01 	.word	0x00000e01
      70:	00000e15 	.word	0x00000e15
      74:	00000e29 	.word	0x00000e29
      78:	00000e3d 	.word	0x00000e3d
      7c:	00000e51 	.word	0x00000e51
      80:	00000e65 	.word	0x00000e65
      84:	0000369d 	.word	0x0000369d
      88:	0000369d 	.word	0x0000369d
      8c:	0000369d 	.word	0x0000369d
      90:	0000369d 	.word	0x0000369d
      94:	0000369d 	.word	0x0000369d
      98:	0000369d 	.word	0x0000369d
      9c:	0000369d 	.word	0x0000369d
      a0:	0000369d 	.word	0x0000369d
      a4:	0000042d 	.word	0x0000042d
      a8:	00000445 	.word	0x00000445
      ac:	0000045d 	.word	0x0000045d
      b0:	00000475 	.word	0x00000475
      b4:	0000048d 	.word	0x0000048d
      b8:	000004a5 	.word	0x000004a5
      bc:	000004bd 	.word	0x000004bd
      c0:	000004d5 	.word	0x000004d5
      c4:	000004ed 	.word	0x000004ed
      c8:	00000505 	.word	0x00000505
      cc:	0000051d 	.word	0x0000051d
      d0:	00000535 	.word	0x00000535
      d4:	0000369d 	.word	0x0000369d
      d8:	0000369d 	.word	0x0000369d
      dc:	0000369d 	.word	0x0000369d
      e0:	0000369d 	.word	0x0000369d
      e4:	0000369d 	.word	0x0000369d
      e8:	0000369d 	.word	0x0000369d
      ec:	0000369d 	.word	0x0000369d
      f0:	0000369d 	.word	0x0000369d
      f4:	0000369d 	.word	0x0000369d
      f8:	0000369d 	.word	0x0000369d
      fc:	0000369d 	.word	0x0000369d
     100:	0000369d 	.word	0x0000369d
     104:	0000369d 	.word	0x0000369d
     108:	0000369d 	.word	0x0000369d
     10c:	0000369d 	.word	0x0000369d
     110:	0000369d 	.word	0x0000369d
     114:	0000369d 	.word	0x0000369d
     118:	0000369d 	.word	0x0000369d
     11c:	0000369d 	.word	0x0000369d
     120:	0000369d 	.word	0x0000369d
     124:	0000369d 	.word	0x0000369d
     128:	0000369d 	.word	0x0000369d
     12c:	0000369d 	.word	0x0000369d
     130:	0000369d 	.word	0x0000369d
     134:	0000160d 	.word	0x0000160d
     138:	0000369d 	.word	0x0000369d
     13c:	00001625 	.word	0x00001625
     140:	0000369d 	.word	0x0000369d
     144:	0000369d 	.word	0x0000369d
     148:	0000369d 	.word	0x0000369d
     14c:	0000369d 	.word	0x0000369d
     150:	0000369d 	.word	0x0000369d
     154:	0000369d 	.word	0x0000369d
     158:	0000369d 	.word	0x0000369d
     15c:	0000369d 	.word	0x0000369d
     160:	0000369d 	.word	0x0000369d
     164:	0000369d 	.word	0x0000369d
     168:	0000369d 	.word	0x0000369d
     16c:	0000369d 	.word	0x0000369d
     170:	0000369d 	.word	0x0000369d
     174:	0000163d 	.word	0x0000163d
     178:	00001655 	.word	0x00001655
     17c:	0000369d 	.word	0x0000369d

00000180 <deregister_tm_clones>:
     180:	b508      	push	{r3, lr}
     182:	4805      	ldr	r0, [pc, #20]	; (198 <deregister_tm_clones+0x18>)
     184:	4b05      	ldr	r3, [pc, #20]	; (19c <deregister_tm_clones+0x1c>)
     186:	1a19      	subs	r1, r3, r0
     188:	2906      	cmp	r1, #6
     18a:	d800      	bhi.n	18e <deregister_tm_clones+0xe>
     18c:	bd08      	pop	{r3, pc}
     18e:	4a04      	ldr	r2, [pc, #16]	; (1a0 <deregister_tm_clones+0x20>)
     190:	2a00      	cmp	r2, #0
     192:	d0fb      	beq.n	18c <deregister_tm_clones+0xc>
     194:	4790      	blx	r2
     196:	e7f9      	b.n	18c <deregister_tm_clones+0xc>
     198:	00006284 	.word	0x00006284
     19c:	00006287 	.word	0x00006287
     1a0:	00000000 	.word	0x00000000

000001a4 <register_tm_clones>:
     1a4:	b508      	push	{r3, lr}
     1a6:	4807      	ldr	r0, [pc, #28]	; (1c4 <register_tm_clones+0x20>)
     1a8:	4b07      	ldr	r3, [pc, #28]	; (1c8 <register_tm_clones+0x24>)
     1aa:	1a19      	subs	r1, r3, r0
     1ac:	108a      	asrs	r2, r1, #2
     1ae:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
     1b2:	1059      	asrs	r1, r3, #1
     1b4:	d100      	bne.n	1b8 <register_tm_clones+0x14>
     1b6:	bd08      	pop	{r3, pc}
     1b8:	4a04      	ldr	r2, [pc, #16]	; (1cc <register_tm_clones+0x28>)
     1ba:	2a00      	cmp	r2, #0
     1bc:	d0fb      	beq.n	1b6 <register_tm_clones+0x12>
     1be:	4790      	blx	r2
     1c0:	e7f9      	b.n	1b6 <register_tm_clones+0x12>
     1c2:	bf00      	nop
     1c4:	00006284 	.word	0x00006284
     1c8:	00006284 	.word	0x00006284
     1cc:	00000000 	.word	0x00000000

000001d0 <__do_global_dtors_aux>:
     1d0:	b510      	push	{r4, lr}
     1d2:	4c06      	ldr	r4, [pc, #24]	; (1ec <__do_global_dtors_aux+0x1c>)
     1d4:	7823      	ldrb	r3, [r4, #0]
     1d6:	b943      	cbnz	r3, 1ea <__do_global_dtors_aux+0x1a>
     1d8:	f7ff ffd2 	bl	180 <deregister_tm_clones>
     1dc:	4804      	ldr	r0, [pc, #16]	; (1f0 <__do_global_dtors_aux+0x20>)
     1de:	b110      	cbz	r0, 1e6 <__do_global_dtors_aux+0x16>
     1e0:	4804      	ldr	r0, [pc, #16]	; (1f4 <__do_global_dtors_aux+0x24>)
     1e2:	f3af 8000 	nop.w
     1e6:	2101      	movs	r1, #1
     1e8:	7021      	strb	r1, [r4, #0]
     1ea:	bd10      	pop	{r4, pc}
     1ec:	20000910 	.word	0x20000910
     1f0:	00000000 	.word	0x00000000
     1f4:	00006284 	.word	0x00006284

000001f8 <frame_dummy>:
     1f8:	b508      	push	{r3, lr}
     1fa:	4b08      	ldr	r3, [pc, #32]	; (21c <frame_dummy+0x24>)
     1fc:	b11b      	cbz	r3, 206 <frame_dummy+0xe>
     1fe:	4808      	ldr	r0, [pc, #32]	; (220 <frame_dummy+0x28>)
     200:	4908      	ldr	r1, [pc, #32]	; (224 <frame_dummy+0x2c>)
     202:	f3af 8000 	nop.w
     206:	4808      	ldr	r0, [pc, #32]	; (228 <frame_dummy+0x30>)
     208:	6801      	ldr	r1, [r0, #0]
     20a:	b111      	cbz	r1, 212 <frame_dummy+0x1a>
     20c:	4a07      	ldr	r2, [pc, #28]	; (22c <frame_dummy+0x34>)
     20e:	b102      	cbz	r2, 212 <frame_dummy+0x1a>
     210:	4790      	blx	r2
     212:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     216:	f7ff bfc5 	b.w	1a4 <register_tm_clones>
     21a:	bf00      	nop
     21c:	00000000 	.word	0x00000000
     220:	00006284 	.word	0x00006284
     224:	20000914 	.word	0x20000914
     228:	00006284 	.word	0x00006284
     22c:	00000000 	.word	0x00000000

00000230 <events_get_config_defaults>:
 *
 *  \param config    Configuration structure to initialize to default values.
 */
void events_get_config_defaults(struct events_conf *const config)
{
	config->igf_divider = EVENT_IGF_DIVIDER_1024;
     230:	f04f 030a 	mov.w	r3, #10
     234:	7003      	strb	r3, [r0, #0]
     236:	4770      	bx	lr

00000238 <events_init>:
 * \brief Initialize the events module.
 *
 *  \param config    Configuration structure to initialize to default values.
 */
void events_init(struct events_conf *const config)
{
     238:	b538      	push	{r3, r4, r5, lr}
     23a:	4605      	mov	r5, r0
	/* Enable clock for PEVC module */
	sysclk_enable_peripheral_clock(PEVC);
     23c:	f44f 44c0 	mov.w	r4, #24576	; 0x6000
     240:	f2c4 040a 	movt	r4, #16394	; 0x400a
     244:	4620      	mov	r0, r4
     246:	f242 331d 	movw	r3, #8989	; 0x231d
     24a:	f2c0 0300 	movt	r3, #0
     24e:	4798      	blx	r3
 * \note As stated in the datasheet, there is one divider value for
 * all EVS instance.
 */
static inline void events_set_igf_divider(enum events_igf_divider divider)
{
	PEVC->PEVC_IGFDR = PEVC_IGFDR_IGFDR(divider);
     250:	7828      	ldrb	r0, [r5, #0]
     252:	f000 010f 	and.w	r1, r0, #15
     256:	f8c4 1300 	str.w	r1, [r4, #768]	; 0x300
     25a:	bd38      	pop	{r3, r4, r5, pc}

0000025c <events_ch_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->channel_id = EVENT_CHANNEL_N;
     25c:	f04f 0313 	mov.w	r3, #19
     260:	6003      	str	r3, [r0, #0]
	config->generator_id = EVENT_GENERATOR_N;
     262:	f04f 011f 	mov.w	r1, #31
     266:	6041      	str	r1, [r0, #4]
	config->shaper_enable = false;
     268:	f04f 0200 	mov.w	r2, #0
     26c:	7202      	strb	r2, [r0, #8]
	config->igf_edge = EVENT_IGF_EDGE_NONE;
     26e:	7242      	strb	r2, [r0, #9]
     270:	4770      	bx	lr
     272:	bf00      	nop

00000274 <events_ch_configure>:
 *
 * \param channel_id  Channel ID.
 */
static inline void events_ch_disable(uint32_t channel_id)
{
	PEVC->PEVC_CHDR = PEVC_CHDR_CHD(PEVC_CHDR_CHD_1 << channel_id);
     274:	6803      	ldr	r3, [r0, #0]
     276:	f04f 0201 	mov.w	r2, #1
     27a:	fa02 f203 	lsl.w	r2, r2, r3
     27e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
     282:	f2c4 030a 	movt	r3, #16394	; 0x400a
     286:	609a      	str	r2, [r3, #8]

	/* Disable the channel first */
	events_ch_disable(config->channel_id);

	/* Configure the event channel */
	PEVC->PEVC_CHMX[config->channel_id].PEVC_CHMX =
     288:	6802      	ldr	r2, [r0, #0]
		PEVC_CHMX_EVMX(config->generator_id);
     28a:	6841      	ldr	r1, [r0, #4]
     28c:	f001 013f 	and.w	r1, r1, #63	; 0x3f

	/* Disable the channel first */
	events_ch_disable(config->channel_id);

	/* Configure the event channel */
	PEVC->PEVC_CHMX[config->channel_id].PEVC_CHMX =
     290:	f102 0240 	add.w	r2, r2, #64	; 0x40
     294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		PEVC_CHMX_EVMX(config->generator_id);
	if (config->shaper_enable) {
		evs_val |= PEVC_EVS_EN;
     298:	7a03      	ldrb	r3, [r0, #8]
	} else {
		evs_val &= (~PEVC_EVS_EN);
	}
	switch (config->igf_edge) {
     29a:	7a42      	ldrb	r2, [r0, #9]
     29c:	2a02      	cmp	r2, #2
     29e:	d006      	beq.n	2ae <events_ch_configure+0x3a>
     2a0:	2a03      	cmp	r2, #3
     2a2:	d007      	beq.n	2b4 <events_ch_configure+0x40>
     2a4:	2a01      	cmp	r2, #1
     2a6:	d107      	bne.n	2b8 <events_ch_configure+0x44>
	case EVENT_IGF_EDGE_RISING:
		evs_val |= PEVC_EVS_IGFR_1;
     2a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
		break;
     2ac:	e004      	b.n	2b8 <events_ch_configure+0x44>
	case EVENT_IGF_EDGE_FALLING:
		evs_val |= PEVC_EVS_IGFF_1;
     2ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		break;
     2b2:	e001      	b.n	2b8 <events_ch_configure+0x44>
	case EVENT_IGF_EDGE_BOTH:
		evs_val |= (PEVC_EVS_IGFR_1 | PEVC_EVS_IGFF_1);
     2b4:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
		break;
	case EVENT_IGF_EDGE_NONE:
	default:
		break;
	}
	PEVC->PEVC_EVS[config->generator_id].PEVC_EVS = evs_val;
     2b8:	6840      	ldr	r0, [r0, #4]
     2ba:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
     2be:	f2c4 010a 	movt	r1, #16394	; 0x400a
     2c2:	f100 0080 	add.w	r0, r0, #128	; 0x80
     2c6:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
     2ca:	4770      	bx	lr

000002cc <gpio_common_handler>:

/**
 * Common GPIO handler.
 */
static void gpio_common_handler(uint32_t port_id, uint32_t port_mask)
{
     2cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     2d0:	4606      	mov	r6, r0
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[port_id]);
     2d2:	ea4f 2340 	mov.w	r3, r0, lsl #9
     2d6:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
     2da:	f500 2261 	add.w	r2, r0, #921600	; 0xe1000
	uint32_t i;
	uint32_t int_flags;
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;
     2de:	f8d2 90d0 	ldr.w	r9, [r2, #208]	; 0xd0
	gpio_port->GPIO_IFRC = (int_flags & port_mask);
     2e2:	ea01 0109 	and.w	r1, r1, r9
     2e6:	f8c2 10d8 	str.w	r1, [r2, #216]	; 0xd8

	for (i = 0; i < gpio_nb_sources; i++) {
     2ea:	f640 132c 	movw	r3, #2348	; 0x92c
     2ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
     2f2:	6818      	ldr	r0, [r3, #0]
     2f4:	b318      	cbz	r0, 33e <gpio_common_handler+0x72>
     2f6:	f04f 0400 	mov.w	r4, #0
     2fa:	4625      	mov	r5, r4
		pin = gpio_int_sources[i].pin;
     2fc:	f640 1730 	movw	r7, #2352	; 0x930
     300:	f2c2 0700 	movt	r7, #8192	; 0x2000
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
     304:	f04f 0a01 	mov.w	sl, #1
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;
	gpio_port->GPIO_IFRC = (int_flags & port_mask);

	for (i = 0; i < gpio_nb_sources; i++) {
     308:	f640 182c 	movw	r8, #2348	; 0x92c
     30c:	f2c2 0800 	movt	r8, #8192	; 0x2000
		pin = gpio_int_sources[i].pin;
     310:	59e2      	ldr	r2, [r4, r7]
		if ((ioport_pin_to_port_id(pin) == port_id) &&
     312:	ebb6 1f52 	cmp.w	r6, r2, lsr #5
     316:	d10a      	bne.n	32e <gpio_common_handler+0x62>
     318:	f002 011f 	and.w	r1, r2, #31
     31c:	fa0a f301 	lsl.w	r3, sl, r1
     320:	ea13 0f09 	tst.w	r3, r9
     324:	d003      	beq.n	32e <gpio_common_handler+0x62>
}

/**
 * Common GPIO handler.
 */
static void gpio_common_handler(uint32_t port_id, uint32_t port_mask)
     326:	1938      	adds	r0, r7, r4

	for (i = 0; i < gpio_nb_sources; i++) {
		pin = gpio_int_sources[i].pin;
		if ((ioport_pin_to_port_id(pin) == port_id) &&
				(ioport_pin_to_mask(pin) & int_flags)) {
			if (gpio_int_sources[i].callback != NULL) {
     328:	6842      	ldr	r2, [r0, #4]
     32a:	b102      	cbz	r2, 32e <gpio_common_handler+0x62>
				gpio_int_sources[i].callback();
     32c:	4790      	blx	r2
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;
	gpio_port->GPIO_IFRC = (int_flags & port_mask);

	for (i = 0; i < gpio_nb_sources; i++) {
     32e:	f105 0501 	add.w	r5, r5, #1
     332:	f104 0408 	add.w	r4, r4, #8
     336:	f8d8 1000 	ldr.w	r1, [r8]
     33a:	42a9      	cmp	r1, r5
     33c:	d8e8      	bhi.n	310 <gpio_common_handler+0x44>
     33e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     342:	bf00      	nop

00000344 <gpio_set_pin_callback>:
 * \retval \c false Wrong parameters or exceeding maximum number of interrupt
 *                  sources has been defined.
 */
bool gpio_set_pin_callback(ioport_pin_t pin, gpio_pin_callback_t callback,
		uint8_t irq_level)
{
     344:	b470      	push	{r4, r5, r6}
	int8_t i;
	int8_t irq_line;

	if (gpio_nb_sources >= GPIO_MAX_INTERRUPT_SOURCES) {
     346:	f640 132c 	movw	r3, #2348	; 0x92c
     34a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     34e:	681b      	ldr	r3, [r3, #0]
     350:	2b05      	cmp	r3, #5
     352:	d866      	bhi.n	422 <gpio_set_pin_callback+0xde>
     354:	f000 041f 	and.w	r4, r0, #31
     358:	f04f 0501 	mov.w	r5, #1
     35c:	fa05 f604 	lsl.w	r6, r5, r4
	 *
	 * \note Grouping interrupt generators into groups of eight, four
	 * different interrupt handlers can be installed for each GPIO port.
	 */
	for (i = 0; i < 4; i++) {
		if (ioport_pin_to_mask(pin) & (GPIO_INT_GROUP_MASK << (i * 8))) {
     360:	f016 0fff 	tst.w	r6, #255	; 0xff
     364:	d112      	bne.n	38c <gpio_set_pin_callback+0x48>
     366:	f416 4f7f 	tst.w	r6, #65280	; 0xff00
     36a:	d109      	bne.n	380 <gpio_set_pin_callback+0x3c>
     36c:	f416 0f7f 	tst.w	r6, #16711680	; 0xff0000
     370:	d109      	bne.n	386 <gpio_set_pin_callback+0x42>
     372:	f006 447f 	and.w	r4, r6, #4278190080	; 0xff000000
     376:	2c00      	cmp	r4, #0
     378:	bf0c      	ite	eq
     37a:	2604      	moveq	r6, #4
     37c:	2603      	movne	r6, #3
     37e:	e007      	b.n	390 <gpio_set_pin_callback+0x4c>
	 * Get IRQ line for the given pin.
	 *
	 * \note Grouping interrupt generators into groups of eight, four
	 * different interrupt handlers can be installed for each GPIO port.
	 */
	for (i = 0; i < 4; i++) {
     380:	f04f 0601 	mov.w	r6, #1
     384:	e004      	b.n	390 <gpio_set_pin_callback+0x4c>
     386:	f04f 0602 	mov.w	r6, #2
     38a:	e001      	b.n	390 <gpio_set_pin_callback+0x4c>
		if (ioport_pin_to_mask(pin) & (GPIO_INT_GROUP_MASK << (i * 8))) {
     38c:	f04f 0600 	mov.w	r6, #0
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
     390:	ea4f 1550 	mov.w	r5, r0, lsr #5
			break;
		}
	}
	irq_line = GPIO_0_IRQn + ioport_pin_to_port_id(pin) * 4 + i;
     394:	eb06 0485 	add.w	r4, r6, r5, lsl #2
     398:	f104 0419 	add.w	r4, r4, #25
     39c:	b2e4      	uxtb	r4, r4

	gpio_int_sources[gpio_nb_sources].pin = pin;
     39e:	f640 1630 	movw	r6, #2352	; 0x930
     3a2:	f2c2 0600 	movt	r6, #8192	; 0x2000
     3a6:	f846 0033 	str.w	r0, [r6, r3, lsl #3]
	gpio_int_sources[gpio_nb_sources].callback = callback;
     3aa:	eb06 00c3 	add.w	r0, r6, r3, lsl #3
     3ae:	6041      	str	r1, [r0, #4]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     3b0:	b263      	sxtb	r3, r4
     3b2:	ea4f 1153 	mov.w	r1, r3, lsr #5
     3b6:	f004 061f 	and.w	r6, r4, #31
     3ba:	f04f 0501 	mov.w	r5, #1
     3be:	fa05 f006 	lsl.w	r0, r5, r6
     3c2:	f44f 4561 	mov.w	r5, #57600	; 0xe100
     3c6:	f2ce 0500 	movt	r5, #57344	; 0xe000
     3ca:	f101 0660 	add.w	r6, r1, #96	; 0x60
     3ce:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
     3d2:	2b00      	cmp	r3, #0
     3d4:	da0b      	bge.n	3ee <gpio_set_pin_callback+0xaa>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
     3d6:	f004 040f 	and.w	r4, r4, #15
     3da:	ea4f 1202 	mov.w	r2, r2, lsl #4
     3de:	b2d2      	uxtb	r2, r2
     3e0:	f64e 43fc 	movw	r3, #60668	; 0xecfc
     3e4:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3e8:	18e3      	adds	r3, r4, r3
     3ea:	761a      	strb	r2, [r3, #24]
     3ec:	e008      	b.n	400 <gpio_set_pin_callback+0xbc>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
     3ee:	ea4f 1202 	mov.w	r2, r2, lsl #4
     3f2:	b2d2      	uxtb	r2, r2
     3f4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
     3f8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
     3fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
     400:	f44f 4261 	mov.w	r2, #57600	; 0xe100
     404:	f2ce 0200 	movt	r2, #57344	; 0xe000
     408:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	NVIC_ClearPendingIRQ((IRQn_Type)irq_line);
	NVIC_SetPriority((IRQn_Type)irq_line, irq_level);
	NVIC_EnableIRQ((IRQn_Type)irq_line);

	gpio_nb_sources++;
     40c:	f640 112c 	movw	r1, #2348	; 0x92c
     410:	f2c2 0100 	movt	r1, #8192	; 0x2000
     414:	6808      	ldr	r0, [r1, #0]
     416:	f100 0001 	add.w	r0, r0, #1
     41a:	6008      	str	r0, [r1, #0]

	return true;
     41c:	f04f 0001 	mov.w	r0, #1
     420:	e001      	b.n	426 <gpio_set_pin_callback+0xe2>
{
	int8_t i;
	int8_t irq_line;

	if (gpio_nb_sources >= GPIO_MAX_INTERRUPT_SOURCES) {
		return false;
     422:	f04f 0000 	mov.w	r0, #0
	NVIC_EnableIRQ((IRQn_Type)irq_line);

	gpio_nb_sources++;

	return true;
}
     426:	bc70      	pop	{r4, r5, r6}
     428:	4770      	bx	lr
     42a:	bf00      	nop

0000042c <GPIO_0_Handler>:

/**
 * GPIO handler 0 (PA 0..7)
 */
void GPIO_0_Handler(void)
{
     42c:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, GPIO_INT_GROUP_MASK);
     42e:	f04f 0000 	mov.w	r0, #0
     432:	f04f 01ff 	mov.w	r1, #255	; 0xff
     436:	f240 23cd 	movw	r3, #717	; 0x2cd
     43a:	f2c0 0300 	movt	r3, #0
     43e:	4798      	blx	r3
     440:	bd08      	pop	{r3, pc}
     442:	bf00      	nop

00000444 <GPIO_1_Handler>:

/**
 * GPIO handler 1 (PA 8..15)
 */
void GPIO_1_Handler(void)
{
     444:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 8));
     446:	f04f 0000 	mov.w	r0, #0
     44a:	f44f 417f 	mov.w	r1, #65280	; 0xff00
     44e:	f240 23cd 	movw	r3, #717	; 0x2cd
     452:	f2c0 0300 	movt	r3, #0
     456:	4798      	blx	r3
     458:	bd08      	pop	{r3, pc}
     45a:	bf00      	nop

0000045c <GPIO_2_Handler>:

/**
 * GPIO handler 2 (PA 16..23)
 */
void GPIO_2_Handler(void)
{
     45c:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 16));
     45e:	f04f 0000 	mov.w	r0, #0
     462:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
     466:	f240 23cd 	movw	r3, #717	; 0x2cd
     46a:	f2c0 0300 	movt	r3, #0
     46e:	4798      	blx	r3
     470:	bd08      	pop	{r3, pc}
     472:	bf00      	nop

00000474 <GPIO_3_Handler>:

/**
 * GPIO handler 3 (PA 24..31)
 */
void GPIO_3_Handler(void)
{
     474:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 23));
     476:	f04f 0000 	mov.w	r0, #0
     47a:	f04f 41ff 	mov.w	r1, #2139095040	; 0x7f800000
     47e:	f240 23cd 	movw	r3, #717	; 0x2cd
     482:	f2c0 0300 	movt	r3, #0
     486:	4798      	blx	r3
     488:	bd08      	pop	{r3, pc}
     48a:	bf00      	nop

0000048c <GPIO_4_Handler>:

/**
 * GPIO handler 4 (PB 0..7)
 */
void GPIO_4_Handler(void)
{
     48c:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, GPIO_INT_GROUP_MASK);
     48e:	f04f 0001 	mov.w	r0, #1
     492:	f04f 01ff 	mov.w	r1, #255	; 0xff
     496:	f240 23cd 	movw	r3, #717	; 0x2cd
     49a:	f2c0 0300 	movt	r3, #0
     49e:	4798      	blx	r3
     4a0:	bd08      	pop	{r3, pc}
     4a2:	bf00      	nop

000004a4 <GPIO_5_Handler>:

/**
 * GPIO handler 5 (PB 8..15)
 */
void GPIO_5_Handler(void)
{
     4a4:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 8));
     4a6:	f04f 0001 	mov.w	r0, #1
     4aa:	f44f 417f 	mov.w	r1, #65280	; 0xff00
     4ae:	f240 23cd 	movw	r3, #717	; 0x2cd
     4b2:	f2c0 0300 	movt	r3, #0
     4b6:	4798      	blx	r3
     4b8:	bd08      	pop	{r3, pc}
     4ba:	bf00      	nop

000004bc <GPIO_6_Handler>:

/**
 * GPIO handler 6 (PB 16..23)
 */
void GPIO_6_Handler(void)
{
     4bc:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 16));
     4be:	f04f 0001 	mov.w	r0, #1
     4c2:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
     4c6:	f240 23cd 	movw	r3, #717	; 0x2cd
     4ca:	f2c0 0300 	movt	r3, #0
     4ce:	4798      	blx	r3
     4d0:	bd08      	pop	{r3, pc}
     4d2:	bf00      	nop

000004d4 <GPIO_7_Handler>:

/**
 * GPIO handler 7 (PB 24..31)
 */
void GPIO_7_Handler(void)
{
     4d4:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 24));
     4d6:	f04f 0001 	mov.w	r0, #1
     4da:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
     4de:	f240 23cd 	movw	r3, #717	; 0x2cd
     4e2:	f2c0 0300 	movt	r3, #0
     4e6:	4798      	blx	r3
     4e8:	bd08      	pop	{r3, pc}
     4ea:	bf00      	nop

000004ec <GPIO_8_Handler>:

/**
 * GPIO handler 8 (PC 0..7)
 */
void GPIO_8_Handler(void)
{
     4ec:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, GPIO_INT_GROUP_MASK);
     4ee:	f04f 0002 	mov.w	r0, #2
     4f2:	f04f 01ff 	mov.w	r1, #255	; 0xff
     4f6:	f240 23cd 	movw	r3, #717	; 0x2cd
     4fa:	f2c0 0300 	movt	r3, #0
     4fe:	4798      	blx	r3
     500:	bd08      	pop	{r3, pc}
     502:	bf00      	nop

00000504 <GPIO_9_Handler>:

/**
 * GPIO handler 9 (PC 8..15)
 */
void GPIO_9_Handler(void)
{
     504:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 8));
     506:	f04f 0002 	mov.w	r0, #2
     50a:	f44f 417f 	mov.w	r1, #65280	; 0xff00
     50e:	f240 23cd 	movw	r3, #717	; 0x2cd
     512:	f2c0 0300 	movt	r3, #0
     516:	4798      	blx	r3
     518:	bd08      	pop	{r3, pc}
     51a:	bf00      	nop

0000051c <GPIO_10_Handler>:

/**
 * GPIO handler 10 (PC 16..23)
 */
void GPIO_10_Handler(void)
{
     51c:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 16));
     51e:	f04f 0002 	mov.w	r0, #2
     522:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
     526:	f240 23cd 	movw	r3, #717	; 0x2cd
     52a:	f2c0 0300 	movt	r3, #0
     52e:	4798      	blx	r3
     530:	bd08      	pop	{r3, pc}
     532:	bf00      	nop

00000534 <GPIO_11_Handler>:

/**
 * GPIO handler 11 (PC 24..31)
 */
void GPIO_11_Handler(void)
{
     534:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 24));
     536:	f04f 0002 	mov.w	r0, #2
     53a:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
     53e:	f240 23cd 	movw	r3, #717	; 0x2cd
     542:	f2c0 0300 	movt	r3, #0
     546:	4798      	blx	r3
     548:	bd08      	pop	{r3, pc}
     54a:	bf00      	nop

0000054c <VSYNC_Callback>:
	return arch_ioport_port_to_base(port)->GPIO_PVR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	arch_ioport_pin_to_base(pin)->GPIO_OVRT = arch_ioport_pin_to_mask(pin);
     54c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
     550:	f2c4 030e 	movt	r3, #16398	; 0x400e
     554:	f04f 0280 	mov.w	r2, #128	; 0x80
     558:	65da      	str	r2, [r3, #92]	; 0x5c
}

static void VSYNC_Callback(void)
{
	LED_Toggle(LED0);
	if (VSYNC_Count==1)//start a frame read
     55a:	f640 2024 	movw	r0, #2596	; 0xa24
     55e:	f2c2 0000 	movt	r0, #8192	; 0x2000
     562:	6801      	ldr	r1, [r0, #0]
     564:	2901      	cmp	r1, #1
     566:	d10f      	bne.n	588 <VSYNC_Callback+0x3c>

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     568:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
     56c:	f2c4 000e 	movt	r0, #16398	; 0x400e
     570:	f04f 0104 	mov.w	r1, #4
     574:	6541      	str	r1, [r0, #84]	; 0x54
	{
		/*xprintf(PSTR("WEN Set\n"));*/
		FIFO_WEN_SET;
		VSYNC_Count++;
     576:	f640 2324 	movw	r3, #2596	; 0xa24
     57a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     57e:	681a      	ldr	r2, [r3, #0]
     580:	f102 0201 	add.w	r2, r2, #1
     584:	601a      	str	r2, [r3, #0]
     586:	4770      	bx	lr
	}
	else if (VSYNC_Count==2)//end a frame read
     588:	f640 2324 	movw	r3, #2596	; 0xa24
     58c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     590:	681a      	ldr	r2, [r3, #0]
     592:	2a02      	cmp	r2, #2
     594:	d107      	bne.n	5a6 <VSYNC_Callback+0x5a>
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     596:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
     59a:	f2c4 030e 	movt	r3, #16398	; 0x400e
     59e:	f04f 0204 	mov.w	r2, #4
     5a2:	659a      	str	r2, [r3, #88]	; 0x58
     5a4:	4770      	bx	lr
		FIFO_WEN_CLR;
		/*xprintf(PSTR("WEN Clear\n"));*/
	}
	else
	{
		VSYNC_Count = 0;//wait for a read to be started
     5a6:	f640 2024 	movw	r0, #2596	; 0xa24
     5aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
     5ae:	f04f 0100 	mov.w	r1, #0
     5b2:	6001      	str	r1, [r0, #0]
     5b4:	4770      	bx	lr
     5b6:	bf00      	nop

000005b8 <write_twi>:
 * \brief Write the data pattern to the target.
 *
 * \return STATUS_OK   if all bytes were written, error code otherwise.
 */
static status_code_t write_twi(unsigned char regID, unsigned char regDat)
{
     5b8:	b508      	push	{r3, lr}
	/* TWI chip address to communicate with */
	packet_tx.chip = OV7670_ADDR;
     5ba:	f640 232c 	movw	r3, #2604	; 0xa2c
     5be:	f2c2 0300 	movt	r3, #8192	; 0x2000
     5c2:	f04f 0221 	mov.w	r2, #33	; 0x21
     5c6:	601a      	str	r2, [r3, #0]
	/* TWI address/commands to issue to the other chip (node) */
	packet_tx.addr[0] = regID; //(VIRTUALMEM_ADDR >> 16) & 0xFF;
     5c8:	7118      	strb	r0, [r3, #4]
	packet_tx.addr[1] = (VIRTUALMEM_ADDR >> 8) & 0xFF;
     5ca:	f04f 0000 	mov.w	r0, #0
     5ce:	7158      	strb	r0, [r3, #5]
	/* Length of the TWI data address segment (1-3 bytes) */
	packet_tx.addr_length = 1;
     5d0:	f04f 0201 	mov.w	r2, #1
     5d4:	71da      	strb	r2, [r3, #7]
	/* Where to find the data to be written */
	write_data[0] = regDat;
     5d6:	f640 1060 	movw	r0, #2400	; 0x960
     5da:	f2c2 0000 	movt	r0, #8192	; 0x2000
     5de:	7001      	strb	r1, [r0, #0]
	packet_tx.buffer = (void *) write_data;
     5e0:	6098      	str	r0, [r3, #8]
	/* How many bytes do we want to write */
	packet_tx.length = PATTERN_TEST_LENGTH;
     5e2:	60da      	str	r2, [r3, #12]
	//printf("Writing data to TARGET\r\n");
	/* Write data to TARGET */
	return twi_master_write(OV7670_TWI, &packet_tx);
     5e4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     5e8:	f2c4 0001 	movt	r0, #16385	; 0x4001
     5ec:	4619      	mov	r1, r3
     5ee:	f241 23bd 	movw	r3, #4797	; 0x12bd
     5f2:	f2c0 0300 	movt	r3, #0
     5f6:	4798      	blx	r3
}
     5f8:	bd08      	pop	{r3, pc}
     5fa:	bf00      	nop

000005fc <FIFO_init>:


//Initial FIFO
unsigned char FIFO_init(void)
{
     5fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
     600:	f44f 5490 	mov.w	r4, #4608	; 0x1200
     604:	f2c4 040e 	movt	r4, #16398	; 0x400e
     608:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
     60c:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
     610:	f8c4 a168 	str.w	sl, [r4, #360]	; 0x168

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
     614:	f04f 0602 	mov.w	r6, #2
     618:	6466      	str	r6, [r4, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
     61a:	f8c4 6168 	str.w	r6, [r4, #360]	; 0x168

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
     61e:	4655      	mov	r5, sl
     620:	f2c4 050e 	movt	r5, #16398	; 0x400e
     624:	f04f 0920 	mov.w	r9, #32
     628:	f8c5 9044 	str.w	r9, [r5, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
     62c:	f8c5 9168 	str.w	r9, [r5, #360]	; 0x168

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
     630:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
     634:	f2c4 030e 	movt	r3, #16398	; 0x400e
     638:	f04f 0204 	mov.w	r2, #4
     63c:	645a      	str	r2, [r3, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
     63e:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
     642:	f04f 0701 	mov.w	r7, #1
     646:	6467      	str	r7, [r4, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
     648:	f8c4 7168 	str.w	r7, [r4, #360]	; 0x168
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
     64c:	649f      	str	r7, [r3, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
     64e:	f8c3 7164 	str.w	r7, [r3, #356]	; 0x164
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
     652:	649e      	str	r6, [r3, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
     654:	f8c3 6164 	str.w	r6, [r3, #356]	; 0x164
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
     658:	f04f 0108 	mov.w	r1, #8
     65c:	6499      	str	r1, [r3, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
     65e:	f8c3 1164 	str.w	r1, [r3, #356]	; 0x164
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
     662:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     666:	6498      	str	r0, [r3, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
     668:	f8c3 0164 	str.w	r0, [r3, #356]	; 0x164
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
     66c:	f04f 0110 	mov.w	r1, #16
     670:	64a9      	str	r1, [r5, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
     672:	f8c5 1164 	str.w	r1, [r5, #356]	; 0x164
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
     676:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
     67a:	64a8      	str	r0, [r5, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
     67c:	f8c5 0164 	str.w	r0, [r5, #356]	; 0x164
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
     680:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
     684:	64a9      	str	r1, [r5, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
     686:	f8c5 1164 	str.w	r1, [r5, #356]	; 0x164
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
     68a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
     68e:	64a0      	str	r0, [r4, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
     690:	f8c4 0164 	str.w	r0, [r4, #356]	; 0x164
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     694:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
     698:	65a6      	str	r6, [r4, #88]	; 0x58
     69a:	f8c5 9058 	str.w	r9, [r5, #88]	; 0x58

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     69e:	6567      	str	r7, [r4, #84]	; 0x54
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     6a0:	659a      	str	r2, [r3, #88]	; 0x58
	FIFO_WRST_CLR;
	FIFO_RCLK_CLR;
	FIFO_nOE_CLR;
	FIFO_nRRST_SET;
	FIFO_WEN_CLR;
	delay_us(10);
     6a2:	f04f 0023 	mov.w	r0, #35	; 0x23
     6a6:	f240 0801 	movw	r8, #1
     6aa:	f2c2 0800 	movt	r8, #8192	; 0x2000
     6ae:	47c0      	blx	r8

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     6b0:	6566      	str	r6, [r4, #84]	; 0x54
	FIFO_RCLK_SET;
	delay_us(10);
     6b2:	f04f 0023 	mov.w	r0, #35	; 0x23
     6b6:	47c0      	blx	r8
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     6b8:	65a6      	str	r6, [r4, #88]	; 0x58
     6ba:	65a7      	str	r7, [r4, #88]	; 0x58
	FIFO_RCLK_CLR;
	FIFO_nRRST_CLR;
	delay_us(10);
     6bc:	f04f 0023 	mov.w	r0, #35	; 0x23
     6c0:	47c0      	blx	r8

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     6c2:	6566      	str	r6, [r4, #84]	; 0x54
	FIFO_RCLK_SET;
	delay_us(10);
     6c4:	f04f 0023 	mov.w	r0, #35	; 0x23
     6c8:	47c0      	blx	r8
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     6ca:	65a6      	str	r6, [r4, #88]	; 0x58

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     6cc:	6567      	str	r7, [r4, #84]	; 0x54
	FIFO_RCLK_CLR;
	FIFO_nRRST_SET;
	delay_us(10);
     6ce:	f04f 0023 	mov.w	r0, #35	; 0x23
     6d2:	47c0      	blx	r8
     6d4:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
     6d8:	f8c5 9054 	str.w	r9, [r5, #84]	; 0x54
	FIFO_WRST_SET;
	FIFO_nOE_SET;
	return STATUS_OK; //okay
}
     6dc:	f04f 0000 	mov.w	r0, #0
     6e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000006e4 <OV7670_init>:
}



unsigned char OV7670_init(void)
{
     6e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     6e8:	b089      	sub	sp, #36	; 0x24
	uint8_t temp;
	status_code_t status;
	VSYNC_Count = 0;
     6ea:	f04f 0400 	mov.w	r4, #0
     6ee:	f640 2324 	movw	r3, #2596	; 0xa24
     6f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     6f6:	601c      	str	r4, [r3, #0]
	printf("Inialising I2C\n\r");
     6f8:	f246 105c 	movw	r0, #24924	; 0x615c
     6fc:	f2c0 0000 	movt	r0, #0
     700:	f643 1625 	movw	r6, #14629	; 0x3925
     704:	f2c0 0600 	movt	r6, #0
     708:	47b0      	blx	r6
uint32_t cpu_speed = 0;

static status_code_t init_twi(void)
{
	/* Set TWIM options */
	cpu_speed = sysclk_get_peripheral_bus_hz(OV7670_TWI);
     70a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
     70e:	f2c4 0501 	movt	r5, #16385	; 0x4001
     712:	4628      	mov	r0, r5
     714:	f242 0125 	movw	r1, #8229	; 0x2025
     718:	f2c0 0100 	movt	r1, #0
     71c:	4788      	blx	r1
     71e:	f640 1264 	movw	r2, #2404	; 0x964
     722:	f2c2 0200 	movt	r2, #8192	; 0x2000
     726:	6010      	str	r0, [r2, #0]
	struct twim_config opts = {
     728:	9002      	str	r0, [sp, #8]
     72a:	f248 60a0 	movw	r0, #34464	; 0x86a0
     72e:	f2c0 0001 	movt	r0, #1
     732:	9003      	str	r0, [sp, #12]
     734:	9404      	str	r4, [sp, #16]
     736:	f88d 4014 	strb.w	r4, [sp, #20]
     73a:	f88d 4015 	strb.w	r4, [sp, #21]
     73e:	f88d 4016 	strb.w	r4, [sp, #22]
     742:	f88d 4017 	strb.w	r4, [sp, #23]
     746:	f88d 4018 	strb.w	r4, [sp, #24]
     74a:	f88d 4019 	strb.w	r4, [sp, #25]
     74e:	f88d 401a 	strb.w	r4, [sp, #26]
     752:	f88d 401b 	strb.w	r4, [sp, #27]
     756:	f88d 401c 	strb.w	r4, [sp, #28]
     75a:	f88d 401d 	strb.w	r4, [sp, #29]
     75e:	f88d 401e 	strb.w	r4, [sp, #30]
     762:	f88d 401f 	strb.w	r4, [sp, #31]
		.hs_clock_drive_strength_low = 0,
		.hs_data_slew_limit = 0,
		.hs_data_drive_strength_low = 0,
	};
	/* Initialize the TWIM Module */
	twim_set_callback(OV7670_TWI, 0, twim_default_callback, 1);
     766:	4628      	mov	r0, r5
     768:	4621      	mov	r1, r4
     76a:	f640 62b1 	movw	r2, #3761	; 0xeb1
     76e:	f2c0 0200 	movt	r2, #0
     772:	f04f 0301 	mov.w	r3, #1
     776:	f241 540d 	movw	r4, #5389	; 0x150d
     77a:	f2c0 0400 	movt	r4, #0
     77e:	47a0      	blx	r4

	return twim_set_config(OV7670_TWI, &opts);
     780:	4628      	mov	r0, r5
     782:	a902      	add	r1, sp, #8
     784:	f241 13a1 	movw	r3, #4513	; 0x11a1
     788:	f2c0 0300 	movt	r3, #0
     78c:	4798      	blx	r3
	uint8_t temp;
	status_code_t status;
	VSYNC_Count = 0;
	printf("Inialising I2C\n\r");
	init_twi();
	printf("Inialising Camera\n\r");
     78e:	f246 1070 	movw	r0, #24944	; 0x6170
     792:	f2c0 0000 	movt	r0, #0
     796:	47b0      	blx	r6

	status = write_twi(OV_COM7,0x80);
     798:	f04f 0012 	mov.w	r0, #18
     79c:	f04f 0180 	mov.w	r1, #128	; 0x80
     7a0:	f240 52b9 	movw	r2, #1465	; 0x5b9
     7a4:	f2c0 0200 	movt	r2, #0
     7a8:	4790      	blx	r2
	if(STATUS_OK != status)
     7aa:	2800      	cmp	r0, #0
     7ac:	f040 80a9 	bne.w	902 <OV7670_init+0x21e>
		return STATUS_ERR_DENIED;
	delay_ms(10);
     7b0:	f248 50da 	movw	r0, #34266	; 0x85da
     7b4:	f240 0601 	movw	r6, #1
     7b8:	f2c2 0600 	movt	r6, #8192	; 0x2000
     7bc:	47b0      	blx	r6
     7be:	f246 040c 	movw	r4, #24588	; 0x600c
     7c2:	f2c0 0400 	movt	r4, #0
	events_ch_enable(PEVC_ID_USER_PDCA_0);
}



unsigned char OV7670_init(void)
     7c6:	f504 79a7 	add.w	r9, r4, #334	; 0x14e
		return STATUS_ERR_DENIED;
	delay_ms(10);
	
	for(temp = 0; temp < SETTINGS_LENGTH; temp++)
	{
		if( STATUS_OK != write_twi(default_settings[temp][0], default_settings[temp][1] ))
     7ca:	f240 56b9 	movw	r6, #1465	; 0x5b9
     7ce:	f2c0 0600 	movt	r6, #0
		{
			return STATUS_ERR_DENIED;
		}
		delay_ms(1);
     7d2:	f640 5863 	movw	r8, #3427	; 0xd63
     7d6:	f240 0701 	movw	r7, #1
     7da:	f2c2 0700 	movt	r7, #8192	; 0x2000
		return STATUS_ERR_DENIED;
	delay_ms(10);
	
	for(temp = 0; temp < SETTINGS_LENGTH; temp++)
	{
		if( STATUS_OK != write_twi(default_settings[temp][0], default_settings[temp][1] ))
     7de:	7820      	ldrb	r0, [r4, #0]
     7e0:	7861      	ldrb	r1, [r4, #1]
     7e2:	47b0      	blx	r6
     7e4:	2800      	cmp	r0, #0
     7e6:	f000 8094 	beq.w	912 <OV7670_init+0x22e>
     7ea:	e08d      	b.n	908 <OV7670_init+0x224>
     7ec:	7820      	ldrb	r0, [r4, #0]
     7ee:	7861      	ldrb	r1, [r4, #1]
     7f0:	47b0      	blx	r6
     7f2:	2800      	cmp	r0, #0
     7f4:	f040 8088 	bne.w	908 <OV7670_init+0x224>
		{
			return STATUS_ERR_DENIED;
		}
		delay_ms(1);
     7f8:	4640      	mov	r0, r8
     7fa:	47b8      	blx	r7
     7fc:	f104 0502 	add.w	r5, r4, #2
		return STATUS_ERR_DENIED;
	delay_ms(10);
	
	for(temp = 0; temp < SETTINGS_LENGTH; temp++)
	{
		if( STATUS_OK != write_twi(default_settings[temp][0], default_settings[temp][1] ))
     800:	78a0      	ldrb	r0, [r4, #2]
     802:	7869      	ldrb	r1, [r5, #1]
     804:	47b0      	blx	r6
     806:	2800      	cmp	r0, #0
     808:	f000 8088 	beq.w	91c <OV7670_init+0x238>
     80c:	e07c      	b.n	908 <OV7670_init+0x224>
		{
			return STATUS_ERR_DENIED;
		}
		delay_ms(1);
	}
	FIFO_init();
     80e:	f240 51fd 	movw	r1, #1533	; 0x5fd
     812:	f2c0 0100 	movt	r1, #0
     816:	4788      	blx	r1
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
     818:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
     81c:	f2c4 000e 	movt	r0, #16398	; 0x400e
     820:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
     824:	6483      	str	r3, [r0, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
     826:	f8c0 3164 	str.w	r3, [r0, #356]	; 0x164
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
     82a:	6743      	str	r3, [r0, #116]	; 0x74

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
     82c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
	}
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
     830:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
     834:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
     838:	6183      	str	r3, [r0, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
     83a:	6283      	str	r3, [r0, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
     83c:	6383      	str	r3, [r0, #56]	; 0x38
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (pin_sense & 0x01) {
		base->GPIO_IMR0S = mask;
	} else {
		base->GPIO_IMR0C = mask;
     83e:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
	}

	if (pin_sense & 0x02) {
		base->GPIO_IMR1S = mask;
     842:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
	/* Configure push button 0 to trigger an interrupt on falling edge */
	ioport_set_pin_dir(OV7670_VSYNC_PIN, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(OV7670_VSYNC_PIN, IOPORT_MODE_PULLUP | IOPORT_MODE_GLITCH_FILTER);
	ioport_set_pin_sense_mode(OV7670_VSYNC_PIN, IOPORT_SENSE_FALLING);
	if (!gpio_set_pin_callback(OV7670_VSYNC_PIN, VSYNC_Callback, 1)) {
     846:	f04f 0059 	mov.w	r0, #89	; 0x59
     84a:	f240 514d 	movw	r1, #1357	; 0x54d
     84e:	f2c0 0100 	movt	r1, #0
     852:	f04f 0201 	mov.w	r2, #1
     856:	f240 3345 	movw	r3, #837	; 0x345
     85a:	f2c0 0300 	movt	r3, #0
     85e:	4798      	blx	r3
     860:	b958      	cbnz	r0, 87a <OV7670_init+0x196>
		printf("Set pin callback failure!\r\n");
     862:	f246 1084 	movw	r0, #24964	; 0x6184
     866:	f2c0 0000 	movt	r0, #0
     86a:	f643 1325 	movw	r3, #14629	; 0x3925
     86e:	f2c0 0300 	movt	r3, #0
     872:	4798      	blx	r3
		return STATUS_ERR_DENIED;
     874:	f04f 001c 	mov.w	r0, #28
     878:	e048      	b.n	90c <OV7670_init+0x228>
 * \param pin The pin number.
 */
static inline void gpio_enable_pin_interrupt(ioport_pin_t pin)
{
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[ioport_pin_to_port_id(pin)]);
	gpio_port->GPIO_IERS = ioport_pin_to_mask(pin);
     87a:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
     87e:	f2c4 050e 	movt	r5, #16398	; 0x400e
     882:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
     886:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
     88a:	676c      	str	r4, [r5, #116]	; 0x74

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
     88c:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
     890:	f8c5 40c8 	str.w	r4, [r5, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
     894:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
     898:	61ac      	str	r4, [r5, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
     89a:	626c      	str	r4, [r5, #36]	; 0x24

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
     89c:	63ac      	str	r4, [r5, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
     89e:	60ac      	str	r4, [r5, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (pin_sense & 0x01) {
		base->GPIO_IMR0S = mask;
	} else {
		base->GPIO_IMR0C = mask;
     8a0:	f8c5 40a8 	str.w	r4, [r5, #168]	; 0xa8
	}

	if (pin_sense & 0x02) {
		base->GPIO_IMR1S = mask;
     8a4:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
 * \param pin The pin number.
 */
static inline void gpio_enable_pin_periph_event(ioport_pin_t pin)
{
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[ioport_pin_to_port_id(pin)]);
	gpio_port->GPIO_EVERS = ioport_pin_to_mask(pin);
     8a8:	f8c5 4184 	str.w	r4, [r5, #388]	; 0x184
}
static void init_pevc(void)
{
	/* Set input glitch filter divider to 0x0A (2^10) */
	struct events_conf config;
	events_get_config_defaults(&config);
     8ac:	a801      	add	r0, sp, #4
     8ae:	f240 2231 	movw	r2, #561	; 0x231
     8b2:	f2c0 0200 	movt	r2, #0
     8b6:	4790      	blx	r2
	events_init(&config);
     8b8:	a801      	add	r0, sp, #4
     8ba:	f240 2139 	movw	r1, #569	; 0x239
     8be:	f2c0 0100 	movt	r1, #0
     8c2:	4788      	blx	r1
	 * - Generator: PAD_EVT 1
	 * - User: PDCA - channel 0 transfer one word
	 * - Enable falling edge detection for EVS
	 */
	struct events_ch_conf ch_config;
	events_ch_get_config_defaults(&ch_config);
     8c4:	a802      	add	r0, sp, #8
     8c6:	f240 235d 	movw	r3, #605	; 0x25d
     8ca:	f2c0 0300 	movt	r3, #0
     8ce:	4798      	blx	r3
	ch_config.channel_id = PEVC_ID_USER_PDCA_0;
     8d0:	f04f 0500 	mov.w	r5, #0
     8d4:	9502      	str	r5, [sp, #8]
	ch_config.generator_id = PEVC_ID_GEN_PAD_1;
     8d6:	f04f 0401 	mov.w	r4, #1
     8da:	9403      	str	r4, [sp, #12]
	ch_config.shaper_enable = true;
     8dc:	f88d 4010 	strb.w	r4, [sp, #16]
	ch_config.igf_edge = EVENT_IGF_EDGE_FALLING;
     8e0:	f04f 0002 	mov.w	r0, #2
     8e4:	f88d 0011 	strb.w	r0, [sp, #17]
	events_ch_configure(&ch_config);
     8e8:	a802      	add	r0, sp, #8
     8ea:	f240 2275 	movw	r2, #629	; 0x275
     8ee:	f2c0 0200 	movt	r2, #0
     8f2:	4790      	blx	r2
 *
 * \param channel_id  Channel ID.
 */
static inline void events_ch_enable(uint32_t channel_id)
{
	PEVC->PEVC_CHER = PEVC_CHER_CHE(PEVC_CHER_CHE_1 << channel_id);
     8f4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
     8f8:	f2c4 010a 	movt	r1, #16394	; 0x400a
     8fc:	604c      	str	r4, [r1, #4]
	ioport_disable_pin(OV7670_VSYNC_EVENT);
	ioport_set_pin_sense_mode(OV7670_VSYNC_EVENT, IOPORT_SENSE_FALLING);
	gpio_enable_pin_periph_event(OV7670_VSYNC_EVENT);
	init_pevc();
	
	return STATUS_OK;
     8fe:	4628      	mov	r0, r5
     900:	e004      	b.n	90c <OV7670_init+0x228>
	init_twi();
	printf("Inialising Camera\n\r");

	status = write_twi(OV_COM7,0x80);
	if(STATUS_OK != status)
		return STATUS_ERR_DENIED;
     902:	f04f 001c 	mov.w	r0, #28
     906:	e001      	b.n	90c <OV7670_init+0x228>
	
	for(temp = 0; temp < SETTINGS_LENGTH; temp++)
	{
		if( STATUS_OK != write_twi(default_settings[temp][0], default_settings[temp][1] ))
		{
			return STATUS_ERR_DENIED;
     908:	f04f 001c 	mov.w	r0, #28
	ioport_set_pin_sense_mode(OV7670_VSYNC_EVENT, IOPORT_SENSE_FALLING);
	gpio_enable_pin_periph_event(OV7670_VSYNC_EVENT);
	init_pevc();
	
	return STATUS_OK;
}
     90c:	b009      	add	sp, #36	; 0x24
     90e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	{
		if( STATUS_OK != write_twi(default_settings[temp][0], default_settings[temp][1] ))
		{
			return STATUS_ERR_DENIED;
		}
		delay_ms(1);
     912:	4640      	mov	r0, r8
     914:	47b8      	blx	r7
     916:	f104 0402 	add.w	r4, r4, #2
     91a:	e767      	b.n	7ec <OV7670_init+0x108>
     91c:	4640      	mov	r0, r8
     91e:	47b8      	blx	r7
     920:	f105 0402 	add.w	r4, r5, #2
	status = write_twi(OV_COM7,0x80);
	if(STATUS_OK != status)
		return STATUS_ERR_DENIED;
	delay_ms(10);
	
	for(temp = 0; temp < SETTINGS_LENGTH; temp++)
     924:	454c      	cmp	r4, r9
     926:	f47f af61 	bne.w	7ec <OV7670_init+0x108>
     92a:	e770      	b.n	80e <OV7670_init+0x12a>

0000092c <LoadImageToBuffer>:
	}
}

/** starts the VSYNC state machine off */
void LoadImageToBuffer( void )
{
     92c:	b570      	push	{r4, r5, r6, lr}
	while(VSYNC_Count != 0); //wait for any frame to be written to complete
     92e:	f640 2224 	movw	r2, #2596	; 0xa24
     932:	f2c2 0200 	movt	r2, #8192	; 0x2000
     936:	6813      	ldr	r3, [r2, #0]
     938:	2b00      	cmp	r3, #0
     93a:	d1fc      	bne.n	936 <LoadImageToBuffer+0xa>
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     93c:	f44f 5490 	mov.w	r4, #4608	; 0x1200
     940:	f2c4 040e 	movt	r4, #16398	; 0x400e
     944:	f44f 5680 	mov.w	r6, #4096	; 0x1000
     948:	65a6      	str	r6, [r4, #88]	; 0x58
	FIFO_WRST_CLR;//Reset the write pointer
	delay_ms(1);//wait a few clock cycles of the internal oscillator
     94a:	f640 5063 	movw	r0, #3427	; 0xd63
     94e:	f240 0501 	movw	r5, #1
     952:	f2c2 0500 	movt	r5, #8192	; 0x2000
     956:	47a8      	blx	r5

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     958:	6566      	str	r6, [r4, #84]	; 0x54
	FIFO_WRST_SET;
	delay_ms(1);
     95a:	f640 5063 	movw	r0, #3427	; 0xd63
     95e:	47a8      	blx	r5
	VSYNC_Count = 1;
     960:	f640 2024 	movw	r0, #2596	; 0xa24
     964:	f2c2 0000 	movt	r0, #8192	; 0x2000
     968:	f04f 0101 	mov.w	r1, #1
     96c:	6001      	str	r1, [r0, #0]
     96e:	bd70      	pop	{r4, r5, r6, pc}

00000970 <FIFO_TO_AVR>:
}

//Write one pixel in AVR
uint16_t FIFO_TO_AVR(void)
{
     970:	b410      	push	{r4}
     972:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     976:	f2c4 030e 	movt	r3, #16398	; 0x400e
     97a:	f04f 0102 	mov.w	r1, #2
     97e:	6559      	str	r1, [r3, #84]	; 0x54
	base->GPIO_OVRC = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->GPIO_PVR & arch_ioport_pin_to_mask(pin);
     980:	6e1c      	ldr	r4, [r3, #96]	; 0x60
     982:	f3c4 3440 	ubfx	r4, r4, #13, #1
     986:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     98a:	f2c4 020e 	movt	r2, #16398	; 0x400e
     98e:	6e10      	ldr	r0, [r2, #96]	; 0x60
     990:	f3c0 5080 	ubfx	r0, r0, #22, #1
	//@todo work out a more efficient way of doing this... 
	FIFO_RCLK_SET;
	//data = FIFO_AVR_PINP;
	data |= ioport_get_pin_level(OV7670_D7);//get it and shift it up
	data <<= 1;
	data |= ioport_get_pin_level(OV7670_D6);//get it and shift it up
     994:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
     998:	6e14      	ldr	r4, [r2, #96]	; 0x60
     99a:	f3c4 5440 	ubfx	r4, r4, #21, #1
	data <<= 1;
	data |= ioport_get_pin_level(OV7670_D5);//get it and shift it up
     99e:	ea44 0040 	orr.w	r0, r4, r0, lsl #1
     9a2:	6e12      	ldr	r2, [r2, #96]	; 0x60
     9a4:	f3c2 1400 	ubfx	r4, r2, #4, #1
	data <<= 1;
	data |= ioport_get_pin_level(OV7670_D4);//get it and shift it up
     9a8:	ea44 0040 	orr.w	r0, r4, r0, lsl #1
     9ac:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
     9b0:	f2c4 020e 	movt	r2, #16398	; 0x400e
     9b4:	6e14      	ldr	r4, [r2, #96]	; 0x60
     9b6:	f3c4 7480 	ubfx	r4, r4, #30, #1
	data <<= 1;
	data |= ioport_get_pin_level(OV7670_D3);//get it and shift it up
     9ba:	ea44 0040 	orr.w	r0, r4, r0, lsl #1
     9be:	6e14      	ldr	r4, [r2, #96]	; 0x60
     9c0:	f3c4 04c0 	ubfx	r4, r4, #3, #1
	data <<= 1;
	data |= ioport_get_pin_level(OV7670_D2);//get it and shift it up
     9c4:	ea44 0040 	orr.w	r0, r4, r0, lsl #1
     9c8:	6e14      	ldr	r4, [r2, #96]	; 0x60
     9ca:	f3c4 0440 	ubfx	r4, r4, #1, #1
	data <<= 1;
	data |= ioport_get_pin_level(OV7670_D1);//get it and shift it up
     9ce:	ea44 0040 	orr.w	r0, r4, r0, lsl #1
     9d2:	6e12      	ldr	r2, [r2, #96]	; 0x60
     9d4:	f002 0201 	and.w	r2, r2, #1
	data <<= 1;
	data |= ioport_get_pin_level(OV7670_D0);//get it and shift it up
     9d8:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
	data <<= 1;
     9dc:	ea4f 0240 	mov.w	r2, r0, lsl #1
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     9e0:	6599      	str	r1, [r3, #88]	; 0x58

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     9e2:	6559      	str	r1, [r3, #84]	; 0x54
	base->GPIO_OVRC = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->GPIO_PVR & arch_ioport_pin_to_mask(pin);
     9e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	FIFO_RCLK_CLR;
	FIFO_RCLK_SET;
	//data |= FIFO_AVR_PINP;
	if (ioport_get_pin_level(OV7670_D7))//get it and shift it up
     9e6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
		data |= 1;
     9ea:	bf18      	it	ne
     9ec:	f042 0201 	orrne.w	r2, r2, #1
	data <<= 1;
     9f0:	ea4f 0142 	mov.w	r1, r2, lsl #1
     9f4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
     9f8:	f2c4 000e 	movt	r0, #16398	; 0x400e
     9fc:	6e02      	ldr	r2, [r0, #96]	; 0x60
	if (ioport_get_pin_level(OV7670_D6))//get it and shift it up
     9fe:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
		data |= 1;
     a02:	bf1c      	itt	ne
     a04:	f041 0101 	orrne.w	r1, r1, #1
     a08:	b289      	uxthne	r1, r1
	data <<= 1;
     a0a:	ea4f 0341 	mov.w	r3, r1, lsl #1
     a0e:	b299      	uxth	r1, r3
     a10:	f44f 5080 	mov.w	r0, #4096	; 0x1000
     a14:	f2c4 000e 	movt	r0, #16398	; 0x400e
     a18:	6e02      	ldr	r2, [r0, #96]	; 0x60
	if (ioport_get_pin_level(OV7670_D5))//get it and shift it up
     a1a:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
		data |= 1;
     a1e:	bf18      	it	ne
     a20:	f041 0101 	orrne.w	r1, r1, #1
	data <<= 1;
     a24:	ea4f 0341 	mov.w	r3, r1, lsl #1
     a28:	b299      	uxth	r1, r3
     a2a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
     a2e:	f2c4 000e 	movt	r0, #16398	; 0x400e
     a32:	6e02      	ldr	r2, [r0, #96]	; 0x60
	if (ioport_get_pin_level(OV7670_D4))//get it and shift it up
     a34:	f012 0f10 	tst.w	r2, #16
		data |= 1;
     a38:	bf18      	it	ne
     a3a:	f041 0101 	orrne.w	r1, r1, #1
	data <<= 1;
     a3e:	ea4f 0341 	mov.w	r3, r1, lsl #1
     a42:	b299      	uxth	r1, r3
     a44:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
     a48:	f2c4 000e 	movt	r0, #16398	; 0x400e
     a4c:	6e02      	ldr	r2, [r0, #96]	; 0x60
	if (ioport_get_pin_level(OV7670_D3))//get it and shift it up
     a4e:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
		data |= 1;
     a52:	bf18      	it	ne
     a54:	f041 0101 	orrne.w	r1, r1, #1
	data <<= 1;
     a58:	ea4f 0341 	mov.w	r3, r1, lsl #1
     a5c:	b299      	uxth	r1, r3
     a5e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
     a62:	f2c4 000e 	movt	r0, #16398	; 0x400e
     a66:	6e02      	ldr	r2, [r0, #96]	; 0x60
	if (ioport_get_pin_level(OV7670_D2))//get it and shift it up
     a68:	f012 0f08 	tst.w	r2, #8
		data |= 1;
     a6c:	bf18      	it	ne
     a6e:	f041 0101 	orrne.w	r1, r1, #1
	data <<= 1;
     a72:	ea4f 0341 	mov.w	r3, r1, lsl #1
     a76:	b299      	uxth	r1, r3
     a78:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
     a7c:	f2c4 000e 	movt	r0, #16398	; 0x400e
     a80:	6e02      	ldr	r2, [r0, #96]	; 0x60
	if (ioport_get_pin_level(OV7670_D1))//get it and shift it up
     a82:	f012 0f02 	tst.w	r2, #2
		data |= 1;
     a86:	bf18      	it	ne
     a88:	f041 0101 	orrne.w	r1, r1, #1
	data <<= 1;
     a8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
     a90:	b298      	uxth	r0, r3
     a92:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
     a96:	f2c4 010e 	movt	r1, #16398	; 0x400e
     a9a:	6e0a      	ldr	r2, [r1, #96]	; 0x60
	if (ioport_get_pin_level(OV7670_D0))//get it and shift it up
     a9c:	f012 0f01 	tst.w	r2, #1
		data |= 1;
     aa0:	bf18      	it	ne
     aa2:	f040 0001 	orrne.w	r0, r0, #1
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     aa6:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     aaa:	f2c4 030e 	movt	r3, #16398	; 0x400e
     aae:	f04f 0102 	mov.w	r1, #2
     ab2:	6599      	str	r1, [r3, #88]	; 0x58
	//	FIFO_RCLK_CLR;
	//	FIFO_RCLK_SET;
	//	FIFO_RCLK_CLR;

	return(data);
}
     ab4:	bc10      	pop	{r4}
     ab6:	4770      	bx	lr

00000ab8 <GetImageIfAvailiable>:
}


//Reads all data from the buffer if an image has been written
uint8_t GetImageIfAvailiable( int offset )
{
     ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (VSYNC_Count == 2)//if one full frame has elapsed.
     abc:	f640 2324 	movw	r3, #2596	; 0xa24
     ac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ac4:	6818      	ldr	r0, [r3, #0]
     ac6:	2802      	cmp	r0, #2
     ac8:	d161      	bne.n	b8e <GetImageIfAvailiable+0xd6>
     aca:	f44f 5490 	mov.w	r4, #4608	; 0x1200
     ace:	f2c4 040e 	movt	r4, #16398	; 0x400e
     ad2:	f04f 0201 	mov.w	r2, #1
     ad6:	65a2      	str	r2, [r4, #88]	; 0x58

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     ad8:	f04f 0102 	mov.w	r1, #2
     adc:	6561      	str	r1, [r4, #84]	; 0x54
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     ade:	65a1      	str	r1, [r4, #88]	; 0x58

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     ae0:	6562      	str	r2, [r4, #84]	; 0x54
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     ae2:	f44f 5580 	mov.w	r5, #4096	; 0x1000
     ae6:	f2c4 050e 	movt	r5, #16398	; 0x400e
     aea:	f04f 0620 	mov.w	r6, #32
     aee:	65ae      	str	r6, [r5, #88]	; 0x58
		FIFO_nRRST_CLR; //Reset Read Pointer
		FIFO_RCLK_SET;
		FIFO_RCLK_CLR;
		FIFO_nRRST_SET;
		FIFO_nOE_CLR;
		delay_ms(1);
     af0:	f640 5063 	movw	r0, #3427	; 0xd63
     af4:	f240 0701 	movw	r7, #1
     af8:	f2c2 0700 	movt	r7, #8192	; 0x2000
     afc:	47b8      	blx	r7
     afe:	f04f 09f0 	mov.w	r9, #240	; 0xf0
}


//Reads all data from the buffer if an image has been written
uint8_t GetImageIfAvailiable( int offset )
{
     b02:	f44f 7aa0 	mov.w	sl, #320	; 0x140
		for (j=HEIGHT; j > 0; j--) //Read all data
		{
			
			for (i=0; i < WIDTH; i++)
			{
				Temp=FIFO_TO_AVR();
     b06:	f640 1871 	movw	r8, #2417	; 0x971
     b0a:	f2c0 0800 	movt	r8, #0
				usart_putchar(BOARD_USART, Temp);
     b0e:	f44f 4400 	mov.w	r4, #32768	; 0x8000
     b12:	f2c4 0402 	movt	r4, #16386	; 0x4002
     b16:	f241 753d 	movw	r5, #5949	; 0x173d
     b1a:	f2c0 0500 	movt	r5, #0
     b1e:	e018      	b.n	b52 <GetImageIfAvailiable+0x9a>
		for (j=HEIGHT; j > 0; j--) //Read all data
		{
			
			for (i=0; i < WIDTH; i++)
			{
				Temp=FIFO_TO_AVR();
     b20:	47c0      	blx	r8
     b22:	4607      	mov	r7, r0
				usart_putchar(BOARD_USART, Temp);
     b24:	4620      	mov	r0, r4
     b26:	4639      	mov	r1, r7
     b28:	47a8      	blx	r5
				usart_putchar(BOARD_USART, (Temp >> 8));
     b2a:	4620      	mov	r0, r4
     b2c:	f3c7 210f 	ubfx	r1, r7, #8, #16
     b30:	47a8      	blx	r5
     b32:	f106 36ff 	add.w	r6, r6, #4294967295
		for (j=HEIGHT; j > 0; j--) //Read all data
		{
			
			for (i=0; i < WIDTH; i++)
			{
				Temp=FIFO_TO_AVR();
     b36:	47c0      	blx	r8
     b38:	4607      	mov	r7, r0
				usart_putchar(BOARD_USART, Temp);
     b3a:	4620      	mov	r0, r4
     b3c:	4639      	mov	r1, r7
     b3e:	47a8      	blx	r5
				usart_putchar(BOARD_USART, (Temp >> 8));
     b40:	4620      	mov	r0, r4
     b42:	f3c7 210f 	ubfx	r1, r7, #8, #16
     b46:	47a8      	blx	r5
			I've set it to send the raw values up the UART for now.
			I'm also not certain on the endianness...*/
		for (j=HEIGHT; j > 0; j--) //Read all data
		{
			
			for (i=0; i < WIDTH; i++)
     b48:	3e01      	subs	r6, #1
     b4a:	d1e9      	bne.n	b20 <GetImageIfAvailiable+0x68>
		delay_ms(1);
		/** @ashleyjr - this is where the reading occurs
			It's broken down into rows and colums and it reads L/R; U/D.
			I've set it to send the raw values up the UART for now.
			I'm also not certain on the endianness...*/
		for (j=HEIGHT; j > 0; j--) //Read all data
     b4c:	f1b9 0901 	subs.w	r9, r9, #1
     b50:	d001      	beq.n	b56 <GetImageIfAvailiable+0x9e>
}


//Reads all data from the buffer if an image has been written
uint8_t GetImageIfAvailiable( int offset )
{
     b52:	4656      	mov	r6, sl
     b54:	e7e4      	b.n	b20 <GetImageIfAvailiable+0x68>
     b56:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     b5a:	f2c4 030e 	movt	r3, #16398	; 0x400e
     b5e:	f04f 0001 	mov.w	r0, #1
     b62:	6598      	str	r0, [r3, #88]	; 0x58

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     b64:	f04f 0202 	mov.w	r2, #2
     b68:	655a      	str	r2, [r3, #84]	; 0x54
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     b6a:	659a      	str	r2, [r3, #88]	; 0x58

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     b6c:	6558      	str	r0, [r3, #84]	; 0x54
     b6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     b72:	f2c4 010e 	movt	r1, #16398	; 0x400e
     b76:	f04f 0320 	mov.w	r3, #32
     b7a:	654b      	str	r3, [r1, #84]	; 0x54
		FIFO_nRRST_CLR; //Reset Read Pointer
		FIFO_RCLK_SET;
		FIFO_RCLK_CLR;
		FIFO_nRRST_SET;
		FIFO_nOE_SET;
		VSYNC_Count = 0; //No image present in buffer
     b7c:	f04f 0000 	mov.w	r0, #0
     b80:	f640 2224 	movw	r2, #2596	; 0xa24
     b84:	f2c2 0200 	movt	r2, #8192	; 0x2000
     b88:	6010      	str	r0, [r2, #0]
		// 		xprintf(PSTR("Success!\n"));
		// 		xprintf(PSTR("Closing File: %d\n"), f_close(&File[0]));
		return STATUS_OK; //Success!
     b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}
	else
	{
		return STATUS_ERR_BUSY;// No image available
     b8e:	f04f 0019 	mov.w	r0, #25
	}
}
     b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b96:	bf00      	nop

00000b98 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     b9c:	460c      	mov	r4, r1
     b9e:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     ba0:	bb48      	cbnz	r0, bf6 <_read+0x5e>
		return -1;
	}

	for (; len > 0; --len) {
     ba2:	2a00      	cmp	r2, #0
     ba4:	dd2b      	ble.n	bfe <_read+0x66>

int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
     ba6:	188f      	adds	r7, r1, r2
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
     ba8:	f640 2650 	movw	r6, #2640	; 0xa50
     bac:	f2c2 0600 	movt	r6, #8192	; 0x2000
     bb0:	f640 2548 	movw	r5, #2632	; 0xa48
     bb4:	f2c2 0500 	movt	r5, #8192	; 0x2000
     bb8:	ea6f 0901 	mvn.w	r9, r1
     bbc:	eb07 0009 	add.w	r0, r7, r9
     bc0:	f000 0901 	and.w	r9, r0, #1
     bc4:	6830      	ldr	r0, [r6, #0]
     bc6:	682b      	ldr	r3, [r5, #0]
     bc8:	4798      	blx	r3
		ptr++;
     bca:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     bce:	42bc      	cmp	r4, r7
     bd0:	d119      	bne.n	c06 <_read+0x6e>
     bd2:	e00d      	b.n	bf0 <_read+0x58>
		ptr_get(stdio_base, ptr);
     bd4:	6830      	ldr	r0, [r6, #0]
     bd6:	682b      	ldr	r3, [r5, #0]
     bd8:	4621      	mov	r1, r4
     bda:	4798      	blx	r3
		ptr++;
     bdc:	f104 0401 	add.w	r4, r4, #1
     be0:	4621      	mov	r1, r4
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
     be2:	6830      	ldr	r0, [r6, #0]
     be4:	682a      	ldr	r2, [r5, #0]
     be6:	4790      	blx	r2
		ptr++;
     be8:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     bec:	42bc      	cmp	r4, r7
     bee:	d1f1      	bne.n	bd4 <_read+0x3c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
     bf0:	4640      	mov	r0, r8
     bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
     bf6:	f04f 30ff 	mov.w	r0, #4294967295
     bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	for (; len > 0; --len) {
     bfe:	f04f 0000 	mov.w	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
     c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     c06:	f1b9 0f00 	cmp.w	r9, #0
     c0a:	d0e3      	beq.n	bd4 <_read+0x3c>
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
     c0c:	6830      	ldr	r0, [r6, #0]
     c0e:	682a      	ldr	r2, [r5, #0]
     c10:	4621      	mov	r1, r4
     c12:	4790      	blx	r2
		ptr++;
     c14:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     c18:	42bc      	cmp	r4, r7
     c1a:	d1db      	bne.n	bd4 <_read+0x3c>
     c1c:	e7e8      	b.n	bf0 <_read+0x58>
     c1e:	bf00      	nop

00000c20 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
     c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     c24:	460d      	mov	r5, r1
     c26:	4690      	mov	r8, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     c28:	f100 30ff 	add.w	r0, r0, #4294967295
     c2c:	2802      	cmp	r0, #2
     c2e:	d824      	bhi.n	c7a <_write+0x5a>
		return -1;
	}

	for (; len != 0; --len) {
     c30:	b332      	cbz	r2, c80 <_write+0x60>
		if (ptr_put(stdio_base, *ptr++) < 0) {
     c32:	f640 2650 	movw	r6, #2640	; 0xa50
     c36:	f2c2 0600 	movt	r6, #8192	; 0x2000
     c3a:	f640 274c 	movw	r7, #2636	; 0xa4c
     c3e:	f2c2 0700 	movt	r7, #8192	; 0x2000
     c42:	f04f 0400 	mov.w	r4, #0
     c46:	f102 39ff 	add.w	r9, r2, #4294967295
     c4a:	f009 0901 	and.w	r9, r9, #1
     c4e:	6830      	ldr	r0, [r6, #0]
     c50:	683b      	ldr	r3, [r7, #0]
     c52:	5d09      	ldrb	r1, [r1, r4]
     c54:	4798      	blx	r3
     c56:	42a0      	cmp	r0, r4
     c58:	da1a      	bge.n	c90 <_write+0x70>
     c5a:	e014      	b.n	c86 <_write+0x66>
     c5c:	6830      	ldr	r0, [r6, #0]
     c5e:	683b      	ldr	r3, [r7, #0]
     c60:	5d29      	ldrb	r1, [r5, r4]
     c62:	4798      	blx	r3
     c64:	2800      	cmp	r0, #0
     c66:	db0e      	blt.n	c86 <_write+0x66>
			return -1;
		}
		++nChars;
     c68:	f104 0401 	add.w	r4, r4, #1
	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
     c6c:	6830      	ldr	r0, [r6, #0]
     c6e:	683a      	ldr	r2, [r7, #0]
     c70:	5d29      	ldrb	r1, [r5, r4]
     c72:	4790      	blx	r2
     c74:	2800      	cmp	r0, #0
     c76:	da1d      	bge.n	cb4 <_write+0x94>
     c78:	e005      	b.n	c86 <_write+0x66>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
     c7a:	f04f 34ff 	mov.w	r4, #4294967295
     c7e:	e004      	b.n	c8a <_write+0x6a>
	}

	for (; len != 0; --len) {
     c80:	f04f 0400 	mov.w	r4, #0
     c84:	e001      	b.n	c8a <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
     c86:	f04f 34ff 	mov.w	r4, #4294967295
		}
		++nChars;
	}
	return nChars;
}
     c8a:	4620      	mov	r0, r4
     c8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
     c90:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     c94:	45a0      	cmp	r8, r4
     c96:	d0f8      	beq.n	c8a <_write+0x6a>
     c98:	f1b9 0f00 	cmp.w	r9, #0
     c9c:	d0de      	beq.n	c5c <_write+0x3c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
     c9e:	6830      	ldr	r0, [r6, #0]
     ca0:	683a      	ldr	r2, [r7, #0]
     ca2:	5d29      	ldrb	r1, [r5, r4]
     ca4:	4790      	blx	r2
     ca6:	2800      	cmp	r0, #0
     ca8:	dbed      	blt.n	c86 <_write+0x66>
			return -1;
		}
		++nChars;
     caa:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     cae:	45a0      	cmp	r8, r4
     cb0:	d1d4      	bne.n	c5c <_write+0x3c>
     cb2:	e7ea      	b.n	c8a <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
     cb4:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     cb8:	45a0      	cmp	r8, r4
     cba:	d1cf      	bne.n	c5c <_write+0x3c>
     cbc:	e7e5      	b.n	c8a <_write+0x6a>
     cbe:	bf00      	nop

00000cc0 <pdca_channel_get_handler>:
 */
volatile PdcaChannel *pdca_channel_get_handler(pdca_channel_num_t
		pdca_ch_number)
{
	if (pdca_ch_number >= PDCA_NUMBER_OF_CHANNELS)
		pdca_ch_number = 0;
     cc0:	280f      	cmp	r0, #15
     cc2:	bf88      	it	hi
     cc4:	2000      	movhi	r0, #0

	/* Get the correct channel pointer */
	volatile PdcaChannel *pdca_channel =
     cc6:	ea4f 1080 	mov.w	r0, r0, lsl #6
     cca:	f100 4180 	add.w	r1, r0, #1073741824	; 0x40000000
			&(PDCA->PDCA_CHANNEL[pdca_ch_number]);

	return pdca_channel;
}
     cce:	f501 2022 	add.w	r0, r1, #663552	; 0xa2000
     cd2:	4770      	bx	lr

00000cd4 <pdca_get_channel_status>:
 *
 * \return 1 if channel transfer is enabled, else 0
 */
enum pdca_channel_status
		pdca_get_channel_status(pdca_channel_num_t pdca_ch_number)
{
     cd4:	b508      	push	{r3, lr}
	/* Get the correct channel pointer */
	volatile PdcaChannel *pdca_channel =
     cd6:	f640 43c1 	movw	r3, #3265	; 0xcc1
     cda:	f2c0 0300 	movt	r3, #0
     cde:	4798      	blx	r3
			pdca_channel_get_handler(pdca_ch_number);
	uint32_t status = pdca_channel->PDCA_SR;
     ce0:	69c1      	ldr	r1, [r0, #28]
	uint32_t intflag = pdca_channel->PDCA_ISR;
     ce2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	if ((status & PDCA_SR_TEN) == PDCA_SR_TEN) {
     ce4:	f011 0f01 	tst.w	r1, #1
     ce8:	d00c      	beq.n	d04 <pdca_get_channel_status+0x30>
		if ((intflag & PDCA_ISR_TERR) == PDCA_ISR_TERR) {
     cea:	f010 0f04 	tst.w	r0, #4
     cee:	d10c      	bne.n	d0a <pdca_get_channel_status+0x36>
			return PDCA_CH_TRANSFER_ERROR;
		} else if ((intflag & PDCA_ISR_TRC) == PDCA_ISR_TRC) {
     cf0:	f010 0f02 	tst.w	r0, #2
     cf4:	d10c      	bne.n	d10 <pdca_get_channel_status+0x3c>
			return PDCA_CH_TRANSFER_COMPLETED;
		} else if ((intflag & PDCA_ISR_RCZ) == PDCA_ISR_RCZ) {
     cf6:	f000 0201 	and.w	r2, r0, #1
			return PDCA_CH_COUNTER_RELOAD_IS_ZERO;
     cfa:	2a00      	cmp	r2, #0
     cfc:	bf0c      	ite	eq
     cfe:	2001      	moveq	r0, #1
     d00:	2002      	movne	r0, #2
     d02:	bd08      	pop	{r3, pc}
		}
		return PDCA_CH_BUSY;
	} else {
		return PDCA_CH_FREE;
     d04:	f04f 0000 	mov.w	r0, #0
     d08:	bd08      	pop	{r3, pc}
	uint32_t status = pdca_channel->PDCA_SR;
	uint32_t intflag = pdca_channel->PDCA_ISR;

	if ((status & PDCA_SR_TEN) == PDCA_SR_TEN) {
		if ((intflag & PDCA_ISR_TERR) == PDCA_ISR_TERR) {
			return PDCA_CH_TRANSFER_ERROR;
     d0a:	f04f 0004 	mov.w	r0, #4
     d0e:	bd08      	pop	{r3, pc}
		} else if ((intflag & PDCA_ISR_TRC) == PDCA_ISR_TRC) {
			return PDCA_CH_TRANSFER_COMPLETED;
     d10:	f04f 0003 	mov.w	r0, #3
		}
		return PDCA_CH_BUSY;
	} else {
		return PDCA_CH_FREE;
	}
}
     d14:	bd08      	pop	{r3, pc}
     d16:	bf00      	nop

00000d18 <pdca_channel_interrupt>:
 * pdca_channel_set_callback() function.
 *
 * \param pdca_ch_number PDCA channel number to handle interrupt for
 */
static void pdca_channel_interrupt(const pdca_channel_num_t pdca_ch_number)
{
     d18:	b510      	push	{r4, lr}
     d1a:	4604      	mov	r4, r0
	enum pdca_channel_status status;

	status = pdca_get_channel_status(pdca_ch_number);
     d1c:	f640 43d5 	movw	r3, #3285	; 0xcd5
     d20:	f2c0 0300 	movt	r3, #0
     d24:	4798      	blx	r3

	if (pdca_callback_pointer[pdca_ch_number]) {
     d26:	f640 2154 	movw	r1, #2644	; 0xa54
     d2a:	f2c2 0100 	movt	r1, #8192	; 0x2000
     d2e:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
     d32:	b102      	cbz	r2, d36 <pdca_channel_interrupt+0x1e>
		pdca_callback_pointer[pdca_ch_number] (status);
     d34:	4790      	blx	r2
     d36:	bd10      	pop	{r4, pc}

00000d38 <PDCA_0_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 0.
 */
void PDCA_0_Handler(void)
{
     d38:	b508      	push	{r3, lr}
	pdca_channel_interrupt(0);
     d3a:	f04f 0000 	mov.w	r0, #0
     d3e:	f640 5319 	movw	r3, #3353	; 0xd19
     d42:	f2c0 0300 	movt	r3, #0
     d46:	4798      	blx	r3
     d48:	bd08      	pop	{r3, pc}
     d4a:	bf00      	nop

00000d4c <PDCA_1_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 1.
 */
void PDCA_1_Handler(void)
{
     d4c:	b508      	push	{r3, lr}
	pdca_channel_interrupt(1);
     d4e:	f04f 0001 	mov.w	r0, #1
     d52:	f640 5319 	movw	r3, #3353	; 0xd19
     d56:	f2c0 0300 	movt	r3, #0
     d5a:	4798      	blx	r3
     d5c:	bd08      	pop	{r3, pc}
     d5e:	bf00      	nop

00000d60 <PDCA_2_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 2.
 */
void PDCA_2_Handler(void)
{
     d60:	b508      	push	{r3, lr}
	pdca_channel_interrupt(2);
     d62:	f04f 0002 	mov.w	r0, #2
     d66:	f640 5319 	movw	r3, #3353	; 0xd19
     d6a:	f2c0 0300 	movt	r3, #0
     d6e:	4798      	blx	r3
     d70:	bd08      	pop	{r3, pc}
     d72:	bf00      	nop

00000d74 <PDCA_3_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 3.
 */
void PDCA_3_Handler(void)
{
     d74:	b508      	push	{r3, lr}
	pdca_channel_interrupt(3);
     d76:	f04f 0003 	mov.w	r0, #3
     d7a:	f640 5319 	movw	r3, #3353	; 0xd19
     d7e:	f2c0 0300 	movt	r3, #0
     d82:	4798      	blx	r3
     d84:	bd08      	pop	{r3, pc}
     d86:	bf00      	nop

00000d88 <PDCA_4_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 4.
 */
void PDCA_4_Handler(void)
{
     d88:	b508      	push	{r3, lr}
	pdca_channel_interrupt(4);
     d8a:	f04f 0004 	mov.w	r0, #4
     d8e:	f640 5319 	movw	r3, #3353	; 0xd19
     d92:	f2c0 0300 	movt	r3, #0
     d96:	4798      	blx	r3
     d98:	bd08      	pop	{r3, pc}
     d9a:	bf00      	nop

00000d9c <PDCA_5_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 5.
 */
void PDCA_5_Handler(void)
{
     d9c:	b508      	push	{r3, lr}
	pdca_channel_interrupt(5);
     d9e:	f04f 0005 	mov.w	r0, #5
     da2:	f640 5319 	movw	r3, #3353	; 0xd19
     da6:	f2c0 0300 	movt	r3, #0
     daa:	4798      	blx	r3
     dac:	bd08      	pop	{r3, pc}
     dae:	bf00      	nop

00000db0 <PDCA_6_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 6.
 */
void PDCA_6_Handler(void)
{
     db0:	b508      	push	{r3, lr}
	pdca_channel_interrupt(6);
     db2:	f04f 0006 	mov.w	r0, #6
     db6:	f640 5319 	movw	r3, #3353	; 0xd19
     dba:	f2c0 0300 	movt	r3, #0
     dbe:	4798      	blx	r3
     dc0:	bd08      	pop	{r3, pc}
     dc2:	bf00      	nop

00000dc4 <PDCA_7_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 7.
 */
void PDCA_7_Handler(void)
{
     dc4:	b508      	push	{r3, lr}
	pdca_channel_interrupt(7);
     dc6:	f04f 0007 	mov.w	r0, #7
     dca:	f640 5319 	movw	r3, #3353	; 0xd19
     dce:	f2c0 0300 	movt	r3, #0
     dd2:	4798      	blx	r3
     dd4:	bd08      	pop	{r3, pc}
     dd6:	bf00      	nop

00000dd8 <PDCA_8_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 8.
 */
void PDCA_8_Handler(void)
{
     dd8:	b508      	push	{r3, lr}
	pdca_channel_interrupt(8);
     dda:	f04f 0008 	mov.w	r0, #8
     dde:	f640 5319 	movw	r3, #3353	; 0xd19
     de2:	f2c0 0300 	movt	r3, #0
     de6:	4798      	blx	r3
     de8:	bd08      	pop	{r3, pc}
     dea:	bf00      	nop

00000dec <PDCA_9_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 9.
 */
void PDCA_9_Handler(void)
{
     dec:	b508      	push	{r3, lr}
	pdca_channel_interrupt(9);
     dee:	f04f 0009 	mov.w	r0, #9
     df2:	f640 5319 	movw	r3, #3353	; 0xd19
     df6:	f2c0 0300 	movt	r3, #0
     dfa:	4798      	blx	r3
     dfc:	bd08      	pop	{r3, pc}
     dfe:	bf00      	nop

00000e00 <PDCA_10_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 10.
 */
void PDCA_10_Handler(void)
{
     e00:	b508      	push	{r3, lr}
	pdca_channel_interrupt(10);
     e02:	f04f 000a 	mov.w	r0, #10
     e06:	f640 5319 	movw	r3, #3353	; 0xd19
     e0a:	f2c0 0300 	movt	r3, #0
     e0e:	4798      	blx	r3
     e10:	bd08      	pop	{r3, pc}
     e12:	bf00      	nop

00000e14 <PDCA_11_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 11.
 */
void PDCA_11_Handler(void)
{
     e14:	b508      	push	{r3, lr}
	pdca_channel_interrupt(11);
     e16:	f04f 000b 	mov.w	r0, #11
     e1a:	f640 5319 	movw	r3, #3353	; 0xd19
     e1e:	f2c0 0300 	movt	r3, #0
     e22:	4798      	blx	r3
     e24:	bd08      	pop	{r3, pc}
     e26:	bf00      	nop

00000e28 <PDCA_12_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 12.
 */
void PDCA_12_Handler(void)
{
     e28:	b508      	push	{r3, lr}
	pdca_channel_interrupt(12);
     e2a:	f04f 000c 	mov.w	r0, #12
     e2e:	f640 5319 	movw	r3, #3353	; 0xd19
     e32:	f2c0 0300 	movt	r3, #0
     e36:	4798      	blx	r3
     e38:	bd08      	pop	{r3, pc}
     e3a:	bf00      	nop

00000e3c <PDCA_13_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 13.
 */
void PDCA_13_Handler(void)
{
     e3c:	b508      	push	{r3, lr}
	pdca_channel_interrupt(13);
     e3e:	f04f 000d 	mov.w	r0, #13
     e42:	f640 5319 	movw	r3, #3353	; 0xd19
     e46:	f2c0 0300 	movt	r3, #0
     e4a:	4798      	blx	r3
     e4c:	bd08      	pop	{r3, pc}
     e4e:	bf00      	nop

00000e50 <PDCA_14_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 14.
 */
void PDCA_14_Handler(void)
{
     e50:	b508      	push	{r3, lr}
	pdca_channel_interrupt(14);
     e52:	f04f 000e 	mov.w	r0, #14
     e56:	f640 5319 	movw	r3, #3353	; 0xd19
     e5a:	f2c0 0300 	movt	r3, #0
     e5e:	4798      	blx	r3
     e60:	bd08      	pop	{r3, pc}
     e62:	bf00      	nop

00000e64 <PDCA_15_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 15.
 */
void PDCA_15_Handler(void)
{
     e64:	b508      	push	{r3, lr}
	pdca_channel_interrupt(15);
     e66:	f04f 000f 	mov.w	r0, #15
     e6a:	f640 5319 	movw	r3, #3353	; 0xd19
     e6e:	f2c0 0300 	movt	r3, #0
     e72:	4798      	blx	r3
     e74:	bd08      	pop	{r3, pc}
     e76:	bf00      	nop

00000e78 <find_twim_channel_num>:
 * \return      TWIM channel number
 */
static uint32_t find_twim_channel_num(Twim *twim)
{
#if defined(ID_TWIM3)
	if (twim == TWIM3) {
     e78:	f44f 4340 	mov.w	r3, #49152	; 0xc000
     e7c:	f2c4 0307 	movt	r3, #16391	; 0x4007
     e80:	4298      	cmp	r0, r3
     e82:	d00e      	beq.n	ea2 <find_twim_channel_num+0x2a>
		return 3;
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
     e84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     e88:	f2c4 0107 	movt	r1, #16391	; 0x4007
     e8c:	4288      	cmp	r0, r1
     e8e:	d00b      	beq.n	ea8 <find_twim_channel_num+0x30>
		return 2;
	}
#endif
#if defined(ID_TWIM1)
	if (twim == TWIM1) {
     e90:	f44f 4240 	mov.w	r2, #49152	; 0xc000
     e94:	f2c4 0201 	movt	r2, #16385	; 0x4001
     e98:	4290      	cmp	r0, r2
     e9a:	bf14      	ite	ne
     e9c:	2000      	movne	r0, #0
     e9e:	2001      	moveq	r0, #1
     ea0:	4770      	bx	lr
 */
static uint32_t find_twim_channel_num(Twim *twim)
{
#if defined(ID_TWIM3)
	if (twim == TWIM3) {
		return 3;
     ea2:	f04f 0003 	mov.w	r0, #3
     ea6:	4770      	bx	lr
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
		return 2;
     ea8:	f04f 0002 	mov.w	r0, #2
		return 0;
	}
#endif

	return 0;
}
     eac:	4770      	bx	lr
     eae:	bf00      	nop

00000eb0 <twim_default_callback>:

/**
 * \brief TWIM default callback function
 */
void twim_default_callback(Twim *twim)
{
     eb0:	b510      	push	{r4, lr}
     eb2:	4604      	mov	r4, r0
	/* Get masked status register value */
	uint32_t twim_ch = find_twim_channel_num(twim);
     eb4:	f640 6379 	movw	r3, #3705	; 0xe79
     eb8:	f2c0 0300 	movt	r3, #0
     ebc:	4798      	blx	r3
	uint32_t status = twim->TWIM_SR;
     ebe:	69e1      	ldr	r1, [r4, #28]
	status &= twim_it_mask[twim_ch];
     ec0:	f640 129c 	movw	r2, #2460	; 0x99c
     ec4:	f2c2 0200 	movt	r2, #8192	; 0x2000
     ec8:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
     ecc:	4019      	ands	r1, r3
	/* this is a NACK */
	if (status & TWIM_SR_STD_MASK) {
     ece:	f411 6fa0 	tst.w	r1, #1280	; 0x500
     ed2:	d01a      	beq.n	f0a <twim_default_callback+0x5a>
		/*
		 * If we get a nak, clear the valid bit in cmdr,
		 * otherwise the command will be resent.
		 */
		transfer_status[twim_ch] = (status & TWIM_IER_ANAK) ?
     ed4:	f401 7380 	and.w	r3, r1, #256	; 0x100
     ed8:	2b00      	cmp	r3, #0
     eda:	bf0c      	ite	eq
     edc:	21fe      	moveq	r1, #254	; 0xfe
     ede:	21fc      	movne	r1, #252	; 0xfc
     ee0:	f640 1288 	movw	r2, #2440	; 0x988
     ee4:	f2c2 0200 	movt	r2, #8192	; 0x2000
     ee8:	5411      	strb	r1, [r2, r0]
				TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim->TWIM_CMDR &= ~TWIM_CMDR_VALID;
     eea:	68e3      	ldr	r3, [r4, #12]
     eec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
     ef0:	60e1      	str	r1, [r4, #12]
		twim->TWIM_SCR = ~0UL;
     ef2:	f04f 32ff 	mov.w	r2, #4294967295
     ef6:	62e2      	str	r2, [r4, #44]	; 0x2c
		twim->TWIM_IDR = ~0UL;
     ef8:	6262      	str	r2, [r4, #36]	; 0x24
		twim_next[twim_ch] = false;
     efa:	f640 13ac 	movw	r3, #2476	; 0x9ac
     efe:	f2c2 0300 	movt	r3, #8192	; 0x2000
     f02:	f04f 0100 	mov.w	r1, #0
     f06:	5419      	strb	r1, [r3, r0]
     f08:	bd10      	pop	{r4, pc}
	}
	/* This is a RXRDY */
	else if (status & TWIM_SR_RXRDY) {
     f0a:	f011 0f01 	tst.w	r1, #1
     f0e:	d032      	beq.n	f76 <twim_default_callback+0xc6>
		/* Get data from Receive Holding Register */
		*twim_rx_data[twim_ch] = twim->TWIM_RHR;
     f10:	f640 1268 	movw	r2, #2408	; 0x968
     f14:	f2c2 0200 	movt	r2, #8192	; 0x2000
     f18:	6961      	ldr	r1, [r4, #20]
     f1a:	b2c9      	uxtb	r1, r1
     f1c:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
     f20:	f803 1b01 	strb.w	r1, [r3], #1
		twim_rx_data[twim_ch]++;
     f24:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
		/* Decrease received bytes number */
		twim_rx_nb_bytes[twim_ch]--;
     f28:	f640 1178 	movw	r1, #2424	; 0x978
     f2c:	f2c2 0100 	movt	r1, #8192	; 0x2000
     f30:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
     f34:	f102 33ff 	add.w	r3, r2, #4294967295
     f38:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
		/* Receive complete */
		if (twim_rx_nb_bytes[twim_ch] == 0) {
     f3c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
     f40:	2900      	cmp	r1, #0
     f42:	d17c      	bne.n	103e <__stack_size__+0x3e>
			/* Finish the receive operation */
			twim->TWIM_IDR = TWIM_IDR_RXRDY;
     f44:	f04f 0201 	mov.w	r2, #1
     f48:	6262      	str	r2, [r4, #36]	; 0x24
			/* Set busy to false */
			twim_next[twim_ch] = false;
     f4a:	f640 13ac 	movw	r3, #2476	; 0x9ac
     f4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     f52:	f04f 0100 	mov.w	r1, #0
     f56:	5419      	strb	r1, [r3, r0]
#if TWIM_LOW_POWER_ENABLE
			twim->TWIM_SCR = TWIM_SCR_CCOMP;
     f58:	f04f 0208 	mov.w	r2, #8
     f5c:	62e2      	str	r2, [r4, #44]	; 0x2c
			twim->TWIM_IER = TWIM_IER_CCOMP;
     f5e:	6222      	str	r2, [r4, #32]
			twim_it_mask[twim_ch] |= TWIM_IER_CCOMP;
     f60:	f640 139c 	movw	r3, #2460	; 0x99c
     f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
     f68:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
     f6c:	f041 0208 	orr.w	r2, r1, #8
     f70:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
     f74:	bd10      	pop	{r4, pc}
#endif
		}
	}
	/* This is a TXRDY */
	else if (status & TWIM_SR_TXRDY) {
     f76:	f011 0f02 	tst.w	r1, #2
     f7a:	d059      	beq.n	1030 <__stack_size__+0x30>
		/* No more bytes to transmit */
		if (twim_tx_nb_bytes[twim_ch] == 0) {
     f7c:	f640 11c0 	movw	r1, #2496	; 0x9c0
     f80:	f2c2 0100 	movt	r1, #8192	; 0x2000
     f84:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
     f88:	b9c2      	cbnz	r2, fbc <twim_default_callback+0x10c>
			/* Finish the receive operation */
			twim->TWIM_IDR = TWIM_IDR_TXRDY;
     f8a:	f04f 0202 	mov.w	r2, #2
     f8e:	6262      	str	r2, [r4, #36]	; 0x24
			/* Set busy to false */
			twim_next[twim_ch] = false;
     f90:	f640 11ac 	movw	r1, #2476	; 0x9ac
     f94:	f2c2 0100 	movt	r1, #8192	; 0x2000
     f98:	f04f 0300 	mov.w	r3, #0
     f9c:	540b      	strb	r3, [r1, r0]
#if TWIM_LOW_POWER_ENABLE
			twim->TWIM_SCR = TWIM_SCR_CCOMP;
     f9e:	f04f 0208 	mov.w	r2, #8
     fa2:	62e2      	str	r2, [r4, #44]	; 0x2c
			twim->TWIM_IER = TWIM_IER_CCOMP;
     fa4:	6222      	str	r2, [r4, #32]
			twim_it_mask[twim_ch] |= TWIM_IER_CCOMP;
     fa6:	f640 119c 	movw	r1, #2460	; 0x99c
     faa:	f2c2 0100 	movt	r1, #8192	; 0x2000
     fae:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
     fb2:	f043 0208 	orr.w	r2, r3, #8
     fb6:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
     fba:	bd10      	pop	{r4, pc}
#endif
		} else {
			/* Put the byte in the Transmit Holding Register */
			twim->TWIM_THR = *twim_tx_data[twim_ch]++;
     fbc:	f640 128c 	movw	r2, #2444	; 0x98c
     fc0:	f2c2 0200 	movt	r2, #8192	; 0x2000
     fc4:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
     fc8:	f813 1b01 	ldrb.w	r1, [r3], #1
     fcc:	61a1      	str	r1, [r4, #24]
     fce:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
			/* Decrease transmitted bytes number */
			twim_tx_nb_bytes[twim_ch]--;
     fd2:	f640 13c0 	movw	r3, #2496	; 0x9c0
     fd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
     fda:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
     fde:	f102 31ff 	add.w	r1, r2, #4294967295
     fe2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
			if (twim_tx_nb_bytes[twim_ch] == 0) {
     fe6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     fea:	bb43      	cbnz	r3, 103e <__stack_size__+0x3e>
				/* Check for next transfer */
				if (twim_next[twim_ch]) {
     fec:	f640 12ac 	movw	r2, #2476	; 0x9ac
     ff0:	f2c2 0200 	movt	r2, #8192	; 0x2000
     ff4:	5c11      	ldrb	r1, [r2, r0]
     ff6:	b311      	cbz	r1, 103e <__stack_size__+0x3e>
					twim_next[twim_ch] = false;
     ff8:	f640 13ac 	movw	r3, #2476	; 0x9ac
     ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1000:	f04f 0200 	mov.w	r2, #0
    1004:	541a      	strb	r2, [r3, r0]
					twim_tx_nb_bytes[twim_ch] = twim_package[twim_ch]->length;
    1006:	f640 11b0 	movw	r1, #2480	; 0x9b0
    100a:	f2c2 0100 	movt	r1, #8192	; 0x2000
    100e:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
    1012:	68d9      	ldr	r1, [r3, #12]
    1014:	f640 12c0 	movw	r2, #2496	; 0x9c0
    1018:	f2c2 0200 	movt	r2, #8192	; 0x2000
    101c:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
					twim_tx_data[twim_ch] = twim_package[twim_ch]->buffer;
    1020:	6899      	ldr	r1, [r3, #8]
    1022:	f640 138c 	movw	r3, #2444	; 0x98c
    1026:	f2c2 0300 	movt	r3, #8192	; 0x2000
    102a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    102e:	bd10      	pop	{r4, pc}
				}
			}
		}
	}
#if TWIM_LOW_POWER_ENABLE
	else if (status & TWIM_SR_CCOMP) {
    1030:	f011 0f08 	tst.w	r1, #8
    1034:	d003      	beq.n	103e <__stack_size__+0x3e>
		twim->TWIM_SCR = TWIM_SCR_CCOMP;
    1036:	f04f 0008 	mov.w	r0, #8
    103a:	62e0      	str	r0, [r4, #44]	; 0x2c
		twim->TWIM_IDR = TWIM_IDR_CCOMP;
    103c:	6260      	str	r0, [r4, #36]	; 0x24
    103e:	bd10      	pop	{r4, pc}

00001040 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
    1040:	b470      	push	{r4, r5, r6}
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);
    1042:	fbb2 f2f1 	udiv	r2, r2, r1
    1046:	ea4f 0252 	mov.w	r2, r2, lsr #1

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    104a:	2aff      	cmp	r2, #255	; 0xff
    104c:	d91e      	bls.n	108c <twim_set_speed+0x4c>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
    104e:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    1052:	2aff      	cmp	r2, #255	; 0xff
    1054:	d935      	bls.n	10c2 <twim_set_speed+0x82>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
    1056:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    105a:	2aff      	cmp	r2, #255	; 0xff
    105c:	d934      	bls.n	10c8 <twim_set_speed+0x88>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
    105e:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    1062:	2aff      	cmp	r2, #255	; 0xff
    1064:	d933      	bls.n	10ce <twim_set_speed+0x8e>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
    1066:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    106a:	2aff      	cmp	r2, #255	; 0xff
    106c:	d932      	bls.n	10d4 <twim_set_speed+0x94>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
    106e:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    1072:	2aff      	cmp	r2, #255	; 0xff
    1074:	d931      	bls.n	10da <twim_set_speed+0x9a>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
    1076:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    107a:	2aff      	cmp	r2, #255	; 0xff
    107c:	d930      	bls.n	10e0 <twim_set_speed+0xa0>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
    107e:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    1082:	2aff      	cmp	r2, #255	; 0xff
    1084:	d92f      	bls.n	10e6 <twim_set_speed+0xa6>
		/* divide f_prescaled value */
		f_prescaled /= 2;
	}

	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
    1086:	f04f 00f8 	mov.w	r0, #248	; 0xf8
    108a:	e018      	b.n	10be <twim_set_speed+0x7e>
 */
status_code_t twim_set_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
    108c:	f04f 0600 	mov.w	r6, #0
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
    1090:	ea4f 0152 	mov.w	r1, r2, lsr #1
    1094:	b2cd      	uxtb	r5, r1
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
			| TWIM_CWGR_STASTO(f_prescaled);
    1096:	ea4f 4402 	mov.w	r4, r2, lsl #16
    109a:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
    109e:	432c      	orrs	r4, r5
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
    10a0:	ea4f 6303 	mov.w	r3, r3, lsl #24
    10a4:	f003 6570 	and.w	r5, r3, #251658240	; 0xf000000
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_CWGR_EXP(cwgr_exp)
    10a8:	432c      	orrs	r4, r5
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
    10aa:	1a52      	subs	r2, r2, r1
    10ac:	ea4f 6102 	mov.w	r1, r2, lsl #24
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
    10b0:	ea44 4311 	orr.w	r3, r4, r1, lsr #16
			| TWIM_CWGR_STASTO(f_prescaled);
    10b4:	ea43 7206 	orr.w	r2, r3, r6, lsl #28
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
    10b8:	6042      	str	r2, [r0, #4]
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
			| TWIM_CWGR_STASTO(f_prescaled);

	return STATUS_OK;
    10ba:	f04f 0000 	mov.w	r0, #0
    10be:	b240      	sxtb	r0, r0
    10c0:	e014      	b.n	10ec <twim_set_speed+0xac>
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
		/* increase clock divider */
		cwgr_exp++;
    10c2:	f04f 0601 	mov.w	r6, #1
    10c6:	e7e3      	b.n	1090 <twim_set_speed+0x50>
    10c8:	f04f 0602 	mov.w	r6, #2
    10cc:	e7e0      	b.n	1090 <twim_set_speed+0x50>
    10ce:	f04f 0603 	mov.w	r6, #3
    10d2:	e7dd      	b.n	1090 <twim_set_speed+0x50>
    10d4:	f04f 0604 	mov.w	r6, #4
    10d8:	e7da      	b.n	1090 <twim_set_speed+0x50>
    10da:	f04f 0605 	mov.w	r6, #5
    10de:	e7d7      	b.n	1090 <twim_set_speed+0x50>
    10e0:	f04f 0606 	mov.w	r6, #6
    10e4:	e7d4      	b.n	1090 <twim_set_speed+0x50>
    10e6:	f04f 0607 	mov.w	r6, #7
    10ea:	e7d1      	b.n	1090 <twim_set_speed+0x50>
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
			| TWIM_CWGR_STASTO(f_prescaled);

	return STATUS_OK;
}
    10ec:	bc70      	pop	{r4, r5, r6}
    10ee:	4770      	bx	lr

000010f0 <twim_set_hsmode_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_hsmode_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
    10f0:	b470      	push	{r4, r5, r6}
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);
    10f2:	fbb2 f2f1 	udiv	r2, r2, r1
    10f6:	ea4f 0252 	mov.w	r2, r2, lsr #1

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    10fa:	2aff      	cmp	r2, #255	; 0xff
    10fc:	d91e      	bls.n	113c <twim_set_hsmode_speed+0x4c>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
    10fe:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    1102:	2aff      	cmp	r2, #255	; 0xff
    1104:	d935      	bls.n	1172 <twim_set_hsmode_speed+0x82>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
    1106:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    110a:	2aff      	cmp	r2, #255	; 0xff
    110c:	d934      	bls.n	1178 <twim_set_hsmode_speed+0x88>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
    110e:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    1112:	2aff      	cmp	r2, #255	; 0xff
    1114:	d933      	bls.n	117e <twim_set_hsmode_speed+0x8e>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
    1116:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    111a:	2aff      	cmp	r2, #255	; 0xff
    111c:	d932      	bls.n	1184 <twim_set_hsmode_speed+0x94>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
    111e:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    1122:	2aff      	cmp	r2, #255	; 0xff
    1124:	d931      	bls.n	118a <twim_set_hsmode_speed+0x9a>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
    1126:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    112a:	2aff      	cmp	r2, #255	; 0xff
    112c:	d930      	bls.n	1190 <twim_set_hsmode_speed+0xa0>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
    112e:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    1132:	2aff      	cmp	r2, #255	; 0xff
    1134:	d92f      	bls.n	1196 <twim_set_hsmode_speed+0xa6>
		/* divide f_prescaled value */
		f_prescaled /= 2;
	}

	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
    1136:	f04f 00f8 	mov.w	r0, #248	; 0xf8
    113a:	e018      	b.n	116e <twim_set_hsmode_speed+0x7e>
 */
status_code_t twim_set_hsmode_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
    113c:	f04f 0600 	mov.w	r6, #0
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
    1140:	ea4f 0152 	mov.w	r1, r2, lsr #1
    1144:	b2cd      	uxtb	r5, r1
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
			| TWIM_HSCWGR_STASTO(f_prescaled);
    1146:	ea4f 4402 	mov.w	r4, r2, lsl #16
    114a:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
    114e:	432c      	orrs	r4, r5
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
    1150:	ea4f 6303 	mov.w	r3, r3, lsl #24
    1154:	f003 6570 	and.w	r5, r3, #251658240	; 0xf000000
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_HSCWGR_EXP(cwgr_exp)
    1158:	432c      	orrs	r4, r5
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
    115a:	1a52      	subs	r2, r2, r1
    115c:	ea4f 6102 	mov.w	r1, r2, lsl #24
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
    1160:	ea44 4311 	orr.w	r3, r4, r1, lsr #16
			| TWIM_HSCWGR_STASTO(f_prescaled);
    1164:	ea43 7206 	orr.w	r2, r3, r6, lsl #28
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
    1168:	6382      	str	r2, [r0, #56]	; 0x38
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
			| TWIM_HSCWGR_STASTO(f_prescaled);

	return STATUS_OK;
    116a:	f04f 0000 	mov.w	r0, #0
    116e:	b240      	sxtb	r0, r0
    1170:	e014      	b.n	119c <twim_set_hsmode_speed+0xac>
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
		/* increase clock divider */
		cwgr_exp++;
    1172:	f04f 0601 	mov.w	r6, #1
    1176:	e7e3      	b.n	1140 <twim_set_hsmode_speed+0x50>
    1178:	f04f 0602 	mov.w	r6, #2
    117c:	e7e0      	b.n	1140 <twim_set_hsmode_speed+0x50>
    117e:	f04f 0603 	mov.w	r6, #3
    1182:	e7dd      	b.n	1140 <twim_set_hsmode_speed+0x50>
    1184:	f04f 0604 	mov.w	r6, #4
    1188:	e7da      	b.n	1140 <twim_set_hsmode_speed+0x50>
    118a:	f04f 0605 	mov.w	r6, #5
    118e:	e7d7      	b.n	1140 <twim_set_hsmode_speed+0x50>
    1190:	f04f 0606 	mov.w	r6, #6
    1194:	e7d4      	b.n	1140 <twim_set_hsmode_speed+0x50>
    1196:	f04f 0607 	mov.w	r6, #7
    119a:	e7d1      	b.n	1140 <twim_set_hsmode_speed+0x50>
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
			| TWIM_HSCWGR_STASTO(f_prescaled);

	return STATUS_OK;
}
    119c:	bc70      	pop	{r4, r5, r6}
    119e:	4770      	bx	lr

000011a0 <twim_set_config>:
 *
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_config(Twim *twim, struct twim_config *config)
{
    11a0:	b570      	push	{r4, r5, r6, lr}
    11a2:	4605      	mov	r5, r0
    11a4:	460c      	mov	r4, r1
	sysclk_enable_peripheral_clock(twim);
    11a6:	f242 331d 	movw	r3, #8989	; 0x231d
    11aa:	f2c0 0300 	movt	r3, #0
    11ae:	4798      	blx	r3
	/* Enable master transfer */
	twim->TWIM_CR = TWIM_CR_MEN;
    11b0:	f04f 0001 	mov.w	r0, #1
    11b4:	6028      	str	r0, [r5, #0]
	/* Reset TWI */
	twim->TWIM_CR = TWIM_CR_SWRST;
    11b6:	f04f 0180 	mov.w	r1, #128	; 0x80
    11ba:	6029      	str	r1, [r5, #0]
	/* Clear SR */
	twim->TWIM_SCR = ~0UL;
    11bc:	f04f 32ff 	mov.w	r2, #4294967295
    11c0:	62ea      	str	r2, [r5, #44]	; 0x2c

	if (config->smbus) {
    11c2:	7ba3      	ldrb	r3, [r4, #14]
    11c4:	b12b      	cbz	r3, 11d2 <twim_set_config+0x32>
		/* Enable SMBUS Transfer */
		twim->TWIM_CR = TWIM_CR_SMEN;
    11c6:	f04f 0010 	mov.w	r0, #16
    11ca:	6028      	str	r0, [r5, #0]
		twim->TWIM_SMBTR = (uint32_t) -1;
    11cc:	f04f 31ff 	mov.w	r1, #4294967295
    11d0:	60a9      	str	r1, [r5, #8]
	}

	/* Select the speed */
	if (config->speed) {
    11d2:	6861      	ldr	r1, [r4, #4]
    11d4:	b149      	cbz	r1, 11ea <twim_set_config+0x4a>
		if (twim_set_speed(twim, config->speed, config->twim_clk,
    11d6:	4628      	mov	r0, r5
    11d8:	6822      	ldr	r2, [r4, #0]
    11da:	7b23      	ldrb	r3, [r4, #12]
    11dc:	f241 0641 	movw	r6, #4161	; 0x1041
    11e0:	f2c0 0600 	movt	r6, #0
    11e4:	47b0      	blx	r6
    11e6:	2800      	cmp	r0, #0
    11e8:	d15d      	bne.n	12a6 <twim_set_config+0x106>
				config->data_setup_cycles) != STATUS_OK) {
			return ERR_INVALID_ARG;
		}
	}
	if (config->hsmode_speed) {
    11ea:	68a1      	ldr	r1, [r4, #8]
    11ec:	b149      	cbz	r1, 1202 <twim_set_config+0x62>
		if (twim_set_hsmode_speed(twim, config->hsmode_speed, config->twim_clk,
    11ee:	4628      	mov	r0, r5
    11f0:	6822      	ldr	r2, [r4, #0]
    11f2:	7b63      	ldrb	r3, [r4, #13]
    11f4:	f241 06f1 	movw	r6, #4337	; 0x10f1
    11f8:	f2c0 0600 	movt	r6, #0
    11fc:	47b0      	blx	r6
    11fe:	2800      	cmp	r0, #0
    1200:	d154      	bne.n	12ac <twim_set_config+0x10c>
		}
	}

	/* Set clock and data slew rate */
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
			TWIM_SRR_FILTER(2) : TWIM_SRR_FILTER(3))
    1202:	f244 233f 	movw	r3, #16959	; 0x423f
    1206:	f2c0 030f 	movt	r3, #15
    120a:	6862      	ldr	r2, [r4, #4]
    120c:	429a      	cmp	r2, r3
    120e:	bf8c      	ite	hi
    1210:	f04f 5240 	movhi.w	r2, #805306368	; 0x30000000
    1214:	f04f 5200 	movls.w	r2, #536870912	; 0x20000000
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
    1218:	7c60      	ldrb	r0, [r4, #17]
    121a:	ea4f 2100 	mov.w	r1, r0, lsl #8
    121e:	f401 7140 	and.w	r1, r1, #768	; 0x300
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
    1222:	7ca3      	ldrb	r3, [r4, #18]
    1224:	f003 0007 	and.w	r0, r3, #7

	/* Set clock and data slew rate */
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
			TWIM_SRR_FILTER(2) : TWIM_SRR_FILTER(3))
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
    1228:	4301      	orrs	r1, r0
    122a:	7c23      	ldrb	r3, [r4, #16]
    122c:	ea4f 4003 	mov.w	r0, r3, lsl #16
    1230:	f400 20e0 	and.w	r0, r0, #458752	; 0x70000
	}

	/* Set clock and data slew rate */
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
			TWIM_SRR_FILTER(2) : TWIM_SRR_FILTER(3))
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
    1234:	7be3      	ldrb	r3, [r4, #15]
    1236:	ea4f 6303 	mov.w	r3, r3, lsl #24
    123a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
    123e:	4318      	orrs	r0, r3
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
    1240:	4301      	orrs	r1, r0
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
    1242:	4311      	orrs	r1, r2
			return ERR_INVALID_ARG;
		}
	}

	/* Set clock and data slew rate */
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
    1244:	63e9      	str	r1, [r5, #60]	; 0x3c
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
			| TWIM_HSSRR_CLSLEW(config->hs_clock_slew_limit)
			| TWIM_HSSRR_CLDRIVEL(config->hs_clock_drive_strength_low)
			| TWIM_HSSRR_CLDRIVEH(config->hs_clock_drive_strength_high)
			| TWIM_HSSRR_DASLEW(config->hs_data_slew_limit)
			| TWIM_HSSRR_DADRIVEL(config->hs_data_drive_strength_low);
    1246:	7de2      	ldrb	r2, [r4, #23]
    1248:	f002 0307 	and.w	r3, r2, #7
    124c:	f043 5080 	orr.w	r0, r3, #268435456	; 0x10000000
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
			| TWIM_HSSRR_CLSLEW(config->hs_clock_slew_limit)
			| TWIM_HSSRR_CLDRIVEL(config->hs_clock_drive_strength_low)
    1250:	7d61      	ldrb	r1, [r4, #21]
    1252:	ea4f 4201 	mov.w	r2, r1, lsl #16
    1256:	f402 21e0 	and.w	r1, r2, #458752	; 0x70000
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
			| TWIM_HSSRR_CLSLEW(config->hs_clock_slew_limit)
    125a:	7ce3      	ldrb	r3, [r4, #19]
    125c:	ea4f 6203 	mov.w	r2, r3, lsl #24
    1260:	f002 7340 	and.w	r3, r2, #50331648	; 0x3000000
			| TWIM_HSSRR_CLDRIVEL(config->hs_clock_drive_strength_low)
    1264:	ea41 0203 	orr.w	r2, r1, r3
			| TWIM_HSSRR_CLDRIVEH(config->hs_clock_drive_strength_high)
    1268:	7d21      	ldrb	r1, [r4, #20]
    126a:	ea4f 5301 	mov.w	r3, r1, lsl #20
    126e:	f403 1140 	and.w	r1, r3, #3145728	; 0x300000
    1272:	430a      	orrs	r2, r1
			| TWIM_HSSRR_DASLEW(config->hs_data_slew_limit)
    1274:	7da3      	ldrb	r3, [r4, #22]
    1276:	ea4f 2103 	mov.w	r1, r3, lsl #8
    127a:	f401 7340 	and.w	r3, r1, #768	; 0x300
    127e:	431a      	orrs	r2, r3
			| TWIM_HSSRR_DADRIVEL(config->hs_data_drive_strength_low);
    1280:	4310      	orrs	r0, r2
			TWIM_SRR_FILTER(2) : TWIM_SRR_FILTER(3))
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
    1282:	6428      	str	r0, [r5, #64]	; 0x40
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    1284:	f640 2140 	movw	r1, #2624	; 0xa40
    1288:	f2c2 0100 	movt	r1, #8192	; 0x2000
    128c:	f04f 0300 	mov.w	r3, #0
    1290:	700b      	strb	r3, [r1, #0]
    1292:	704b      	strb	r3, [r1, #1]
    1294:	708b      	strb	r3, [r1, #2]
    1296:	70cb      	strb	r3, [r1, #3]
    1298:	710b      	strb	r3, [r1, #4]
    129a:	714b      	strb	r3, [r1, #5]
    129c:	718b      	strb	r3, [r1, #6]
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    129e:	f04f 0201 	mov.w	r2, #1
    12a2:	71ca      	strb	r2, [r1, #7]

#if TWIM_LOW_POWER_ENABLE
	sleepmgr_init();
#endif

	return STATUS_OK;
    12a4:	e004      	b.n	12b0 <twim_set_config+0x110>

	/* Select the speed */
	if (config->speed) {
		if (twim_set_speed(twim, config->speed, config->twim_clk,
				config->data_setup_cycles) != STATUS_OK) {
			return ERR_INVALID_ARG;
    12a6:	f04f 03f8 	mov.w	r3, #248	; 0xf8
    12aa:	e001      	b.n	12b0 <twim_set_config+0x110>
		}
	}
	if (config->hsmode_speed) {
		if (twim_set_hsmode_speed(twim, config->hsmode_speed, config->twim_clk,
				config->hsmode_data_setup_cycles) != STATUS_OK) {
			return ERR_INVALID_ARG;
    12ac:	f04f 03f8 	mov.w	r3, #248	; 0xf8
#if TWIM_LOW_POWER_ENABLE
	sleepmgr_init();
#endif

	return STATUS_OK;
}
    12b0:	b258      	sxtb	r0, r3
    12b2:	bd70      	pop	{r4, r5, r6, pc}

000012b4 <twim_enable_interrupt>:
 * \param interrupt_source  The TWI interrupt to be enabled
 */
void twim_enable_interrupt(Twim *twim, uint32_t interrupt_source)
{
	/* Set the interrupt flags */
	twim->TWIM_IER = interrupt_source;
    12b4:	6201      	str	r1, [r0, #32]
    12b6:	4770      	bx	lr

000012b8 <twim_get_status>:
 *
 * \param twim   Base address of the TWIM
 */
uint32_t twim_get_status(Twim *twim)
{
	return twim->TWIM_SR;
    12b8:	69c0      	ldr	r0, [r0, #28]
}
    12ba:	4770      	bx	lr

000012bc <twi_master_write>:
 *
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twi_master_write(Twim *twim, struct twim_package *package)
{
    12bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    12c0:	4606      	mov	r6, r0
    12c2:	460c      	mov	r4, r1
	uint32_t twim_ch = find_twim_channel_num(twim);
    12c4:	f640 6379 	movw	r3, #3705	; 0xe79
    12c8:	f2c0 0300 	movt	r3, #0
    12cc:	4798      	blx	r3
    12ce:	4605      	mov	r5, r0

	/* Reset the TWIM module to clear the THR register */
	twim->TWIM_CR = TWIM_CR_MEN;
    12d0:	f04f 0001 	mov.w	r0, #1
    12d4:	6030      	str	r0, [r6, #0]
	twim->TWIM_CR = TWIM_CR_SWRST;
    12d6:	f04f 0180 	mov.w	r1, #128	; 0x80
    12da:	6031      	str	r1, [r6, #0]
	twim->TWIM_CR = TWIM_CR_MDIS;
    12dc:	f04f 0202 	mov.w	r2, #2
    12e0:	6032      	str	r2, [r6, #0]
	/* Clear the interrupt flags */
	twim->TWIM_IDR = ~0UL;
    12e2:	f04f 37ff 	mov.w	r7, #4294967295
    12e6:	6277      	str	r7, [r6, #36]	; 0x24
	/* Clear the status flags */
	twim->TWIM_SCR = ~0UL;
    12e8:	62f7      	str	r7, [r6, #44]	; 0x2c
	/* Initialize bus transfer status */
	transfer_status[twim_ch] = TWI_SUCCESS;
    12ea:	f04f 0300 	mov.w	r3, #0
    12ee:	f640 1088 	movw	r0, #2440	; 0x988
    12f2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    12f6:	5543      	strb	r3, [r0, r5]
	/* Mask NACK and TXRDY interrupts */
	twim_it_mask[twim_ch] = TWIM_IER_STD_MASK | TWIM_IER_TXRDY;
    12f8:	f640 129c 	movw	r2, #2460	; 0x99c
    12fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1300:	f240 5102 	movw	r1, #1282	; 0x502
    1304:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
	/* Set next transfer to false */
	twim_next[twim_ch] = false;
    1308:	f640 17ac 	movw	r7, #2476	; 0x9ac
    130c:	f2c2 0700 	movt	r7, #8192	; 0x2000
    1310:	557b      	strb	r3, [r7, r5]

	/* Check if internal address access is performed */
	if (package->addr_length) {
    1312:	79e3      	ldrb	r3, [r4, #7]
    1314:	b1db      	cbz	r3, 134e <twi_master_write+0x92>
		/* Selection of first valid byte of the address */
		twim_tx_data[twim_ch] = package->addr;
    1316:	f104 0004 	add.w	r0, r4, #4
    131a:	f640 128c 	movw	r2, #2444	; 0x98c
    131e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1322:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
		/* Set the number of bytes to transmit */
		twim_tx_nb_bytes[twim_ch] = package->addr_length;
    1326:	f640 11c0 	movw	r1, #2496	; 0x9c0
    132a:	f2c2 0100 	movt	r1, #8192	; 0x2000
    132e:	f841 3025 	str.w	r3, [r1, r5, lsl #2]
		/* Set next transfer to true */
		twim_next[twim_ch] = true;
    1332:	f640 13ac 	movw	r3, #2476	; 0x9ac
    1336:	f2c2 0300 	movt	r3, #8192	; 0x2000
    133a:	f04f 0701 	mov.w	r7, #1
    133e:	555f      	strb	r7, [r3, r5]
		/* Set the number of bytes & address for next transfer */
		twim_package[twim_ch] = package;
    1340:	f640 10b0 	movw	r0, #2480	; 0x9b0
    1344:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1348:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
    134c:	e00d      	b.n	136a <twi_master_write+0xae>
	} else {
		/* Get a pointer to applicative data */
		twim_tx_data[twim_ch] = package->buffer;
    134e:	68a0      	ldr	r0, [r4, #8]
    1350:	f640 128c 	movw	r2, #2444	; 0x98c
    1354:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1358:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
		/* Get a copy of nb bytes to write */
		twim_tx_nb_bytes[twim_ch] = package->length;
    135c:	68e1      	ldr	r1, [r4, #12]
    135e:	f640 17c0 	movw	r7, #2496	; 0x9c0
    1362:	f2c2 0700 	movt	r7, #8192	; 0x2000
    1366:	f847 1025 	str.w	r1, [r7, r5, lsl #2]
	}

	/* Initiate the transfer to send the data */
	twim->TWIM_CMDR = (package->high_speed ? (TWIM_CMDR_HS |
			TWIM_CMDR_HSMCODE(package->high_speed_code)) : 0)
			| TWIM_CMDR_SADR(package->chip)
    136a:	7c62      	ldrb	r2, [r4, #17]
    136c:	b13a      	cbz	r2, 137e <twi_master_write+0xc2>
		twim_tx_nb_bytes[twim_ch] = package->length;
	}

	/* Initiate the transfer to send the data */
	twim->TWIM_CMDR = (package->high_speed ? (TWIM_CMDR_HS |
			TWIM_CMDR_HSMCODE(package->high_speed_code)) : 0)
    136e:	7ca3      	ldrb	r3, [r4, #18]
    1370:	ea4f 7703 	mov.w	r7, r3, lsl #28
    1374:	f007 40e0 	and.w	r0, r7, #1879048192	; 0x70000000
			| TWIM_CMDR_SADR(package->chip)
    1378:	f040 6180 	orr.w	r1, r0, #67108864	; 0x4000000
    137c:	e001      	b.n	1382 <twi_master_write+0xc6>
    137e:	f04f 0100 	mov.w	r1, #0
    1382:	6822      	ldr	r2, [r4, #0]
    1384:	f240 73fe 	movw	r3, #2046	; 0x7fe
    1388:	ea03 0742 	and.w	r7, r3, r2, lsl #1
			| TWIM_CMDR_NBYTES(package->length + package->addr_length)
    138c:	79e0      	ldrb	r0, [r4, #7]
    138e:	68e2      	ldr	r2, [r4, #12]
    1390:	1883      	adds	r3, r0, r2
    1392:	ea4f 4003 	mov.w	r0, r3, lsl #16
    1396:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
			| TWIM_CMDR_VALID
			| TWIM_CMDR_START
			| TWIM_CMDR_STOP
			| (package->ten_bit ? TWIM_CMDR_TENBIT : 0);
    139a:	7c24      	ldrb	r4, [r4, #16]
    139c:	2c00      	cmp	r4, #0
    139e:	bf14      	ite	ne
    13a0:	f44f 6200 	movne.w	r2, #2048	; 0x800
    13a4:	2200      	moveq	r2, #0
	}

	/* Initiate the transfer to send the data */
	twim->TWIM_CMDR = (package->high_speed ? (TWIM_CMDR_HS |
			TWIM_CMDR_HSMCODE(package->high_speed_code)) : 0)
			| TWIM_CMDR_SADR(package->chip)
    13a6:	f447 4760 	orr.w	r7, r7, #57344	; 0xe000
			| TWIM_CMDR_NBYTES(package->length + package->addr_length)
    13aa:	4307      	orrs	r7, r0
			| TWIM_CMDR_VALID
			| TWIM_CMDR_START
			| TWIM_CMDR_STOP
			| (package->ten_bit ? TWIM_CMDR_TENBIT : 0);
    13ac:	430f      	orrs	r7, r1
    13ae:	4317      	orrs	r7, r2
		/* Get a copy of nb bytes to write */
		twim_tx_nb_bytes[twim_ch] = package->length;
	}

	/* Initiate the transfer to send the data */
	twim->TWIM_CMDR = (package->high_speed ? (TWIM_CMDR_HS |
    13b0:	60f7      	str	r7, [r6, #12]
			| TWIM_CMDR_START
			| TWIM_CMDR_STOP
			| (package->ten_bit ? TWIM_CMDR_TENBIT : 0);

	/* Update IMR through IER */
	twim->TWIM_IER = twim_it_mask[twim_ch];
    13b2:	f640 119c 	movw	r1, #2460	; 0x99c
    13b6:	f2c2 0100 	movt	r1, #8192	; 0x2000
    13ba:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
    13be:	6233      	str	r3, [r6, #32]
	/* Enable master transfer */
	twim->TWIM_CR = TWIM_CR_MEN;
    13c0:	f04f 0001 	mov.w	r0, #1
    13c4:	6030      	str	r0, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    13c6:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    13ca:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    13cc:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    13d0:	f240 0244 	movw	r2, #68	; 0x44
    13d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    13d8:	f04f 0700 	mov.w	r7, #0
    13dc:	7017      	strb	r7, [r2, #0]
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    13de:	f640 2340 	movw	r3, #2624	; 0xa40
    13e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    13e6:	7899      	ldrb	r1, [r3, #2]
    13e8:	f101 0101 	add.w	r1, r1, #1
    13ec:	7099      	strb	r1, [r3, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    13ee:	2c00      	cmp	r4, #0
    13f0:	d138      	bne.n	1464 <twi_master_write+0x1a8>
		cpu_irq_enable();
    13f2:	f240 0044 	movw	r0, #68	; 0x44
    13f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    13fa:	f04f 0401 	mov.w	r4, #1
    13fe:	7004      	strb	r4, [r0, #0]
    1400:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1404:	b662      	cpsie	i
    1406:	e02d      	b.n	1464 <twi_master_write+0x1a8>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1408:	b672      	cpsid	i
    140a:	f3bf 8f5f 	dmb	sy
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    140e:	f04f 0300 	mov.w	r3, #0
    1412:	7023      	strb	r3, [r4, #0]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    1414:	f640 2140 	movw	r1, #2624	; 0xa40
    1418:	f2c2 0100 	movt	r1, #8192	; 0x2000
    141c:	7808      	ldrb	r0, [r1, #0]
    141e:	b968      	cbnz	r0, 143c <twi_master_write+0x180>
    1420:	f640 2340 	movw	r3, #2624	; 0xa40
    1424:	f2c2 0300 	movt	r3, #8192	; 0x2000
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
    1428:	f04f 0100 	mov.w	r1, #0
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    142c:	f101 0101 	add.w	r1, r1, #1
    1430:	b2c9      	uxtb	r1, r1

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    1432:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    1436:	2a00      	cmp	r2, #0
    1438:	d0f8      	beq.n	142c <twi_master_write+0x170>
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    143a:	b931      	cbnz	r1, 144a <twi_master_write+0x18e>
		cpu_irq_enable();
    143c:	f04f 0101 	mov.w	r1, #1
    1440:	7021      	strb	r1, [r4, #0]
    1442:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1446:	b662      	cpsie	i
    1448:	e01c      	b.n	1484 <twi_master_write+0x1c8>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    144a:	b672      	cpsid	i
    144c:	f3bf 8f5f 	dmb	sy

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
    1450:	f04f 0000 	mov.w	r0, #0
    1454:	7020      	strb	r0, [r4, #0]

	/* Enter the sleep mode. */
	bpm_sleep(BPM, sleep_mode);
    1456:	4648      	mov	r0, r9
    1458:	f243 23b1 	movw	r3, #12977	; 0x32b1
    145c:	f2c0 0300 	movt	r3, #0
    1460:	4798      	blx	r3
    1462:	e00f      	b.n	1484 <twi_master_write+0x1c8>
	/* Send data */
#if TWIM_LOW_POWER_ENABLE
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_1);
	while (!(transfer_status[twim_ch])
    1464:	f640 1788 	movw	r7, #2440	; 0x988
    1468:	f2c2 0700 	movt	r7, #8192	; 0x2000
			&& !(twim_get_status(twim) & TWIM_SR_IDLE)) {
    146c:	f241 28b9 	movw	r8, #4793	; 0x12b9
    1470:	f2c0 0800 	movt	r8, #0
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    1474:	f240 0444 	movw	r4, #68	; 0x44
    1478:	f2c2 0400 	movt	r4, #8192	; 0x2000
    147c:	f04f 0900 	mov.w	r9, #0
    1480:	f2c4 090f 	movt	r9, #16399	; 0x400f
	/* Enable master transfer */
	twim->TWIM_CR = TWIM_CR_MEN;
	/* Send data */
#if TWIM_LOW_POWER_ENABLE
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_1);
	while (!(transfer_status[twim_ch])
    1484:	5d7a      	ldrb	r2, [r7, r5]
    1486:	b922      	cbnz	r2, 1492 <twi_master_write+0x1d6>
			&& !(twim_get_status(twim) & TWIM_SR_IDLE)) {
    1488:	4630      	mov	r0, r6
    148a:	47c0      	blx	r8
    148c:	f010 0f10 	tst.w	r0, #16
    1490:	d0ba      	beq.n	1408 <twi_master_write+0x14c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1492:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1496:	b672      	cpsid	i
    1498:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    149c:	f240 0344 	movw	r3, #68	; 0x44
    14a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    14a4:	f04f 0100 	mov.w	r1, #0
    14a8:	7019      	strb	r1, [r3, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    14aa:	f640 2240 	movw	r2, #2624	; 0xa40
    14ae:	f2c2 0200 	movt	r2, #8192	; 0x2000
    14b2:	7893      	ldrb	r3, [r2, #2]
    14b4:	f103 31ff 	add.w	r1, r3, #4294967295
    14b8:	7091      	strb	r1, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    14ba:	b948      	cbnz	r0, 14d0 <twi_master_write+0x214>
		cpu_irq_enable();
    14bc:	f240 0044 	movw	r0, #68	; 0x44
    14c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    14c4:	f04f 0201 	mov.w	r2, #1
    14c8:	7002      	strb	r2, [r0, #0]
    14ca:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    14ce:	b662      	cpsie	i
			&& !(twim_get_status(twim) & TWIM_SR_IDLE)) {
	}
#endif

	/* Disable master transfer */
	twim->TWIM_CR = TWIM_CR_MDIS;
    14d0:	f04f 0302 	mov.w	r3, #2
    14d4:	6033      	str	r3, [r6, #0]
	/* Check for nack */
	if (transfer_status[twim_ch] == TWI_RECEIVE_NACK
    14d6:	f640 1188 	movw	r1, #2440	; 0x988
    14da:	f2c2 0100 	movt	r1, #8192	; 0x2000
    14de:	5d48      	ldrb	r0, [r1, r5]
    14e0:	b242      	sxtb	r2, r0
    14e2:	f112 0f04 	cmn.w	r2, #4
    14e6:	d00b      	beq.n	1500 <twi_master_write+0x244>
			|| transfer_status[twim_ch] == TWI_ARBITRATION_LOST) {
    14e8:	f640 1388 	movw	r3, #2440	; 0x988
    14ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    14f0:	5d59      	ldrb	r1, [r3, r5]
    14f2:	b248      	sxtb	r0, r1
		return ERR_IO_ERROR;
    14f4:	f110 0f02 	cmn.w	r0, #2
    14f8:	bf0c      	ite	eq
    14fa:	22ff      	moveq	r2, #255	; 0xff
    14fc:	2200      	movne	r2, #0
    14fe:	e001      	b.n	1504 <twi_master_write+0x248>
    1500:	f04f 02ff 	mov.w	r2, #255	; 0xff
	}
	return STATUS_OK;
}
    1504:	b250      	sxtb	r0, r2
    1506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    150a:	bf00      	nop

0000150c <twim_set_callback>:
 * \param callback   Callback function pointer
 * \param irq_level  Interrupt level
 */
void twim_set_callback(Twim *twim, uint32_t interrupt_source,
	twim_callback_t callback, uint8_t irq_level)
{
    150c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1510:	4604      	mov	r4, r0
    1512:	460e      	mov	r6, r1
    1514:	4690      	mov	r8, r2
    1516:	461f      	mov	r7, r3
	uint32_t twim_ch = find_twim_channel_num(twim);
    1518:	f640 6379 	movw	r3, #3705	; 0xe79
    151c:	f2c0 0300 	movt	r3, #0
    1520:	4798      	blx	r3
	uint32_t irq_line = 0;

#if defined(ID_TWIM3)
	if (twim == TWIM3) {
    1522:	f44f 4540 	mov.w	r5, #49152	; 0xc000
    1526:	f2c4 0507 	movt	r5, #16391	; 0x4007
    152a:	42ac      	cmp	r4, r5
    152c:	d00e      	beq.n	154c <twim_set_callback+0x40>
		irq_line = TWIM3_IRQn;
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
    152e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1532:	f2c4 0107 	movt	r1, #16391	; 0x4007
    1536:	428c      	cmp	r4, r1
    1538:	d011      	beq.n	155e <twim_set_callback+0x52>
		irq_line = TWIM2_IRQn;
	}
#endif
#if defined(ID_TWIM1)
	if (twim == TWIM1) {
    153a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    153e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1542:	4294      	cmp	r4, r2
    1544:	d04f      	beq.n	15e6 <twim_set_callback+0xda>
 */
void twim_set_callback(Twim *twim, uint32_t interrupt_source,
	twim_callback_t callback, uint8_t irq_level)
{
	uint32_t twim_ch = find_twim_channel_num(twim);
	uint32_t irq_line = 0;
    1546:	f04f 0500 	mov.w	r5, #0
    154a:	e001      	b.n	1550 <twim_set_callback+0x44>

#if defined(ID_TWIM3)
	if (twim == TWIM3) {
		irq_line = TWIM3_IRQn;
    154c:	f04f 054e 	mov.w	r5, #78	; 0x4e
	if (twim == TWIM1) {
		irq_line = TWIM1_IRQn;
	}
#endif
#if defined(ID_TWIM0)
	if (twim == TWIM0) {
    1550:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1554:	f2c4 0101 	movt	r1, #16385	; 0x4001
    1558:	428c      	cmp	r4, r1
    155a:	d102      	bne.n	1562 <twim_set_callback+0x56>
    155c:	e030      	b.n	15c0 <twim_set_callback+0xb4>
		irq_line = TWIM3_IRQn;
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
		irq_line = TWIM2_IRQn;
    155e:	f04f 054d 	mov.w	r5, #77	; 0x4d
#if defined(ID_TWIM0)
	if (twim == TWIM0) {
		irq_line = TWIM0_IRQn;
	}
#endif
	twim_callback_pointer[twim_ch] = callback;
    1562:	f640 2394 	movw	r3, #2708	; 0xa94
    1566:	f2c2 0300 	movt	r3, #8192	; 0x2000
    156a:	f843 8020 	str.w	r8, [r3, r0, lsl #2]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    156e:	462a      	mov	r2, r5
    1570:	ea4f 1055 	mov.w	r0, r5, lsr #5
    1574:	f005 051f 	and.w	r5, r5, #31
    1578:	f04f 0101 	mov.w	r1, #1
    157c:	fa01 f505 	lsl.w	r5, r1, r5
    1580:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    1584:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1588:	f100 0160 	add.w	r1, r0, #96	; 0x60
    158c:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    1590:	ea4f 1707 	mov.w	r7, r7, lsl #4
    1594:	b2ff      	uxtb	r7, r7
    1596:	f102 4360 	add.w	r3, r2, #3758096384	; 0xe0000000
    159a:	f503 4161 	add.w	r1, r3, #57600	; 0xe100
    159e:	f881 7300 	strb.w	r7, [r1, #768]	; 0x300
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
    15a2:	f44f 4261 	mov.w	r2, #57600	; 0xe100
    15a6:	f2ce 0200 	movt	r2, #57344	; 0xe000
    15aa:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
	NVIC_ClearPendingIRQ((IRQn_Type)irq_line);
	NVIC_SetPriority((IRQn_Type)irq_line, irq_level);
	NVIC_EnableIRQ((IRQn_Type)irq_line);
	twim_enable_interrupt(twim, interrupt_source);
    15ae:	4620      	mov	r0, r4
    15b0:	4631      	mov	r1, r6
    15b2:	f241 23b5 	movw	r3, #4789	; 0x12b5
    15b6:	f2c0 0300 	movt	r3, #0
    15ba:	4798      	blx	r3
    15bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#if defined(ID_TWIM0)
	if (twim == TWIM0) {
		irq_line = TWIM0_IRQn;
	}
#endif
	twim_callback_pointer[twim_ch] = callback;
    15c0:	f640 2294 	movw	r2, #2708	; 0xa94
    15c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    15c8:	f842 8020 	str.w	r8, [r2, r0, lsl #2]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    15cc:	f44f 4061 	mov.w	r0, #57600	; 0xe100
    15d0:	f2ce 0000 	movt	r0, #57344	; 0xe000
    15d4:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
    15d8:	f8c0 5184 	str.w	r5, [r0, #388]	; 0x184
    15dc:	f04f 0001 	mov.w	r0, #1
    15e0:	f04f 023d 	mov.w	r2, #61	; 0x3d
    15e4:	e7d4      	b.n	1590 <twim_set_callback+0x84>
    15e6:	f640 2394 	movw	r3, #2708	; 0xa94
    15ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    15ee:	f843 8020 	str.w	r8, [r3, r0, lsl #2]
    15f2:	f44f 4061 	mov.w	r0, #57600	; 0xe100
    15f6:	f2ce 0000 	movt	r0, #57344	; 0xe000
    15fa:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
    15fe:	f8c0 5184 	str.w	r5, [r0, #388]	; 0x184
    1602:	f04f 0001 	mov.w	r0, #1
    1606:	f04f 023f 	mov.w	r2, #63	; 0x3f
    160a:	e7c1      	b.n	1590 <twim_set_callback+0x84>

0000160c <TWIM0_Handler>:
	twim_enable_interrupt(twim, interrupt_source);
}

#if defined(ID_TWIM0)
void TWIM0_Handler(void)
{
    160c:	b508      	push	{r3, lr}
	twim_callback_pointer[0](TWIM0);
    160e:	f640 2394 	movw	r3, #2708	; 0xa94
    1612:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1616:	6819      	ldr	r1, [r3, #0]
    1618:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    161c:	f2c4 0001 	movt	r0, #16385	; 0x4001
    1620:	4788      	blx	r1
    1622:	bd08      	pop	{r3, pc}

00001624 <TWIM1_Handler>:
}
#endif

#if defined(ID_TWIM1)
void TWIM1_Handler(void)
{
    1624:	b508      	push	{r3, lr}
	twim_callback_pointer[1](TWIM1);
    1626:	f640 2394 	movw	r3, #2708	; 0xa94
    162a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    162e:	6859      	ldr	r1, [r3, #4]
    1630:	f44f 4040 	mov.w	r0, #49152	; 0xc000
    1634:	f2c4 0001 	movt	r0, #16385	; 0x4001
    1638:	4788      	blx	r1
    163a:	bd08      	pop	{r3, pc}

0000163c <TWIM2_Handler>:
}
#endif

#if defined(ID_TWIM2)
void TWIM2_Handler(void)
{
    163c:	b508      	push	{r3, lr}
	twim_callback_pointer[2](TWIM2);
    163e:	f640 2394 	movw	r3, #2708	; 0xa94
    1642:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1646:	6899      	ldr	r1, [r3, #8]
    1648:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    164c:	f2c4 0007 	movt	r0, #16391	; 0x4007
    1650:	4788      	blx	r1
    1652:	bd08      	pop	{r3, pc}

00001654 <TWIM3_Handler>:
}
#endif

#if defined(ID_TWIM3)
void TWIM3_Handler(void)
{
    1654:	b508      	push	{r3, lr}
	twim_callback_pointer[3](TWIM3);
    1656:	f640 2394 	movw	r3, #2708	; 0xa94
    165a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    165e:	68d9      	ldr	r1, [r3, #12]
    1660:	f44f 4040 	mov.w	r0, #49152	; 0xc000
    1664:	f2c4 0007 	movt	r0, #16391	; 0x4007
    1668:	4788      	blx	r1
    166a:	bd08      	pop	{r3, pc}

0000166c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
    166c:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
    166e:	ea4f 1301 	mov.w	r3, r1, lsl #4
    1672:	4293      	cmp	r3, r2
    1674:	d910      	bls.n	1698 <usart_set_async_baudrate+0x2c>
    1676:	e020      	b.n	16ba <usart_set_async_baudrate+0x4e>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
    1678:	6841      	ldr	r1, [r0, #4]
    167a:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
    167e:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
    1680:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    1684:	6202      	str	r2, [r0, #32]

	return 0;
    1686:	f04f 0000 	mov.w	r0, #0
    168a:	e029      	b.n	16e0 <usart_set_async_baudrate+0x74>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
    168c:	f04f 0001 	mov.w	r0, #1
    1690:	e026      	b.n	16e0 <usart_set_async_baudrate+0x74>
    1692:	f04f 0001 	mov.w	r0, #1
    1696:	e023      	b.n	16e0 <usart_set_async_baudrate+0x74>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
    1698:	ea4f 04c2 	mov.w	r4, r2, lsl #3
    169c:	eb04 0253 	add.w	r2, r4, r3, lsr #1
    16a0:	fbb2 f3f3 	udiv	r3, r2, r3
	cd = cd_fp >> 3;
    16a4:	ea4f 02d3 	mov.w	r2, r3, lsr #3
	fp = cd_fp & 0x07;
    16a8:	f003 0307 	and.w	r3, r3, #7
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
    16ac:	f102 34ff 	add.w	r4, r2, #4294967295
    16b0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
    16b4:	428c      	cmp	r4, r1
    16b6:	d9e3      	bls.n	1680 <usart_set_async_baudrate+0x14>
    16b8:	e7e8      	b.n	168c <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
    16ba:	ea4f 01c1 	mov.w	r1, r1, lsl #3
    16be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    16c2:	eb02 0451 	add.w	r4, r2, r1, lsr #1
    16c6:	fbb4 f3f1 	udiv	r3, r4, r1
	cd = cd_fp >> 3;
    16ca:	ea4f 02d3 	mov.w	r2, r3, lsr #3
	fp = cd_fp & 0x07;
    16ce:	f003 0307 	and.w	r3, r3, #7
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
    16d2:	f102 34ff 	add.w	r4, r2, #4294967295
    16d6:	f64f 71fe 	movw	r1, #65534	; 0xfffe
    16da:	428c      	cmp	r4, r1
    16dc:	d9cc      	bls.n	1678 <usart_set_async_baudrate+0xc>
    16de:	e7d8      	b.n	1692 <usart_set_async_baudrate+0x26>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
    16e0:	bc10      	pop	{r4}
    16e2:	4770      	bx	lr

000016e4 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
    16e4:	f04f 0340 	mov.w	r3, #64	; 0x40
    16e8:	6003      	str	r3, [r0, #0]
    16ea:	4770      	bx	lr

000016ec <usart_reset_tx>:
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
    16ec:	f04f 0388 	mov.w	r3, #136	; 0x88
    16f0:	6003      	str	r3, [r0, #0]
    16f2:	4770      	bx	lr

000016f4 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
    16f4:	f04f 0310 	mov.w	r3, #16
    16f8:	6003      	str	r3, [r0, #0]
    16fa:	4770      	bx	lr

000016fc <usart_reset_rx>:
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
    16fc:	f04f 0324 	mov.w	r3, #36	; 0x24
    1700:	6003      	str	r3, [r0, #0]
    1702:	4770      	bx	lr

00001704 <usart_reset_status>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
    1704:	f44f 7380 	mov.w	r3, #256	; 0x100
    1708:	6003      	str	r3, [r0, #0]
    170a:	4770      	bx	lr

0000170c <usart_drive_DTR_pin_high>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_DTRDIS;
    170c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    1710:	6003      	str	r3, [r0, #0]
    1712:	4770      	bx	lr

00001714 <usart_drive_RTS_pin_high>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
    1714:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    1718:	6003      	str	r3, [r0, #0]
    171a:	4770      	bx	lr

0000171c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
    171c:	6943      	ldr	r3, [r0, #20]
    171e:	f013 0f02 	tst.w	r3, #2
    1722:	d007      	beq.n	1734 <usart_write+0x18>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
    1724:	ea4f 51c1 	mov.w	r1, r1, lsl #23
    1728:	ea4f 52d1 	mov.w	r2, r1, lsr #23
    172c:	61c2      	str	r2, [r0, #28]
	return 0;
    172e:	f04f 0000 	mov.w	r0, #0
    1732:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
    1734:	f04f 0001 	mov.w	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
    1738:	4770      	bx	lr
    173a:	bf00      	nop

0000173c <usart_putchar>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
    173c:	6943      	ldr	r3, [r0, #20]
    173e:	f013 0f02 	tst.w	r3, #2
    1742:	d0fb      	beq.n	173c <usart_putchar>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
    1744:	ea4f 51c1 	mov.w	r1, r1, lsl #23
    1748:	ea4f 52d1 	mov.w	r2, r1, lsr #23
    174c:	61c2      	str	r2, [r0, #28]

	return 0;
}
    174e:	f04f 0000 	mov.w	r0, #0
    1752:	4770      	bx	lr

00001754 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
    1754:	6943      	ldr	r3, [r0, #20]
    1756:	f013 0f01 	tst.w	r3, #1
    175a:	d008      	beq.n	176e <usart_read+0x1a>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
    175c:	6980      	ldr	r0, [r0, #24]
    175e:	ea4f 52c0 	mov.w	r2, r0, lsl #23
    1762:	ea4f 53d2 	mov.w	r3, r2, lsr #23
    1766:	600b      	str	r3, [r1, #0]

	return 0;
    1768:	f04f 0000 	mov.w	r0, #0
    176c:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
    176e:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
    1772:	4770      	bx	lr

00001774 <usart_disable_writeprotect>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
    1774:	f44f 4382 	mov.w	r3, #16640	; 0x4100
    1778:	f2c5 5353 	movt	r3, #21843	; 0x5553
    177c:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
    1780:	4770      	bx	lr
    1782:	bf00      	nop

00001784 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
    1784:	b510      	push	{r4, lr}
    1786:	4604      	mov	r4, r0
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
    1788:	f241 7375 	movw	r3, #6005	; 0x1775
    178c:	f2c0 0300 	movt	r3, #0
    1790:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
    1792:	f04f 0000 	mov.w	r0, #0
    1796:	6060      	str	r0, [r4, #4]
	p_usart->US_RTOR = 0;
    1798:	6260      	str	r0, [r4, #36]	; 0x24
	p_usart->US_TTGR = 0;
    179a:	62a0      	str	r0, [r4, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
    179c:	4620      	mov	r0, r4
    179e:	f241 61ed 	movw	r1, #5869	; 0x16ed
    17a2:	f2c0 0100 	movt	r1, #0
    17a6:	4788      	blx	r1
	usart_reset_rx(p_usart);
    17a8:	4620      	mov	r0, r4
    17aa:	f241 62fd 	movw	r2, #5885	; 0x16fd
    17ae:	f2c0 0200 	movt	r2, #0
    17b2:	4790      	blx	r2
	/* Reset status bits. */
	usart_reset_status(p_usart);
    17b4:	4620      	mov	r0, r4
    17b6:	f241 7305 	movw	r3, #5893	; 0x1705
    17ba:	f2c0 0300 	movt	r3, #0
    17be:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
    17c0:	4620      	mov	r0, r4
    17c2:	f241 7115 	movw	r1, #5909	; 0x1715
    17c6:	f2c0 0100 	movt	r1, #0
    17ca:	4788      	blx	r1
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
    17cc:	4620      	mov	r0, r4
    17ce:	f241 720d 	movw	r2, #5901	; 0x170d
    17d2:	f2c0 0200 	movt	r2, #0
    17d6:	4790      	blx	r2
    17d8:	bd10      	pop	{r4, pc}
    17da:	bf00      	nop

000017dc <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
    17dc:	b570      	push	{r4, r5, r6, lr}
    17de:	4605      	mov	r5, r0
    17e0:	460c      	mov	r4, r1
    17e2:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
    17e4:	f241 7385 	movw	r3, #6021	; 0x1785
    17e8:	f2c0 0300 	movt	r3, #0
    17ec:	4798      	blx	r3

	ul_reg_val = 0;
    17ee:	f640 10d0 	movw	r0, #2512	; 0x9d0
    17f2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    17f6:	f04f 0100 	mov.w	r1, #0
    17fa:	6001      	str	r1, [r0, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
    17fc:	b1cc      	cbz	r4, 1832 <usart_init_rs232+0x56>
    17fe:	4628      	mov	r0, r5
    1800:	6821      	ldr	r1, [r4, #0]
    1802:	4632      	mov	r2, r6
    1804:	f241 636d 	movw	r3, #5741	; 0x166d
    1808:	f2c0 0300 	movt	r3, #0
    180c:	4798      	blx	r3
    180e:	b998      	cbnz	r0, 1838 <usart_init_rs232+0x5c>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
    1810:	68a2      	ldr	r2, [r4, #8]
    1812:	6861      	ldr	r1, [r4, #4]
    1814:	ea42 0301 	orr.w	r3, r2, r1
    1818:	6922      	ldr	r2, [r4, #16]
    181a:	4313      	orrs	r3, r2
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
    181c:	68e1      	ldr	r1, [r4, #12]
    181e:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
    1820:	f640 12d0 	movw	r2, #2512	; 0x9d0
    1824:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1828:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
    182a:	6869      	ldr	r1, [r5, #4]
    182c:	430b      	orrs	r3, r1
    182e:	606b      	str	r3, [r5, #4]

	return 0;
    1830:	bd70      	pop	{r4, r5, r6, pc}

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
    1832:	f04f 0001 	mov.w	r0, #1
    1836:	bd70      	pop	{r4, r5, r6, pc}
    1838:	f04f 0001 	mov.w	r0, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
    183c:	bd70      	pop	{r4, r5, r6, pc}
    183e:	bf00      	nop

00001840 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
    1840:	b5f0      	push	{r4, r5, r6, r7, lr}
    1842:	b083      	sub	sp, #12
    1844:	4604      	mov	r4, r0
    1846:	460d      	mov	r5, r1
	uint32_t val = 0;
    1848:	f04f 0300 	mov.w	r3, #0
    184c:	9301      	str	r3, [sp, #4]
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
    184e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1852:	f2c4 0002 	movt	r0, #16386	; 0x4002
    1856:	4284      	cmp	r4, r0
    1858:	d10f      	bne.n	187a <usart_serial_getchar+0x3a>
		while (usart_read(p_usart, &val));
    185a:	f44f 4680 	mov.w	r6, #16384	; 0x4000
    185e:	f2c4 0602 	movt	r6, #16386	; 0x4002
    1862:	f241 7755 	movw	r7, #5973	; 0x1755
    1866:	f2c0 0700 	movt	r7, #0
    186a:	4630      	mov	r0, r6
    186c:	a901      	add	r1, sp, #4
    186e:	47b8      	blx	r7
    1870:	2800      	cmp	r0, #0
    1872:	d1fa      	bne.n	186a <usart_serial_getchar+0x2a>
		*data = (uint8_t)(val & 0xFF);
    1874:	9901      	ldr	r1, [sp, #4]
    1876:	7029      	strb	r1, [r5, #0]
    1878:	e02b      	b.n	18d2 <usart_serial_getchar+0x92>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
    187a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    187e:	f2c4 0102 	movt	r1, #16386	; 0x4002
    1882:	428c      	cmp	r4, r1
    1884:	d10f      	bne.n	18a6 <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
    1886:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    188a:	f2c4 0402 	movt	r4, #16386	; 0x4002
    188e:	f241 7655 	movw	r6, #5973	; 0x1755
    1892:	f2c0 0600 	movt	r6, #0
    1896:	4620      	mov	r0, r4
    1898:	a901      	add	r1, sp, #4
    189a:	47b0      	blx	r6
    189c:	2800      	cmp	r0, #0
    189e:	d1fa      	bne.n	1896 <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
    18a0:	9801      	ldr	r0, [sp, #4]
    18a2:	7028      	strb	r0, [r5, #0]
    18a4:	e02a      	b.n	18fc <usart_serial_getchar+0xbc>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
    18a6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    18aa:	f2c4 0202 	movt	r2, #16386	; 0x4002
    18ae:	4294      	cmp	r4, r2
    18b0:	d10f      	bne.n	18d2 <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
    18b2:	f44f 4440 	mov.w	r4, #49152	; 0xc000
    18b6:	f2c4 0402 	movt	r4, #16386	; 0x4002
    18ba:	f241 7655 	movw	r6, #5973	; 0x1755
    18be:	f2c0 0600 	movt	r6, #0
    18c2:	4620      	mov	r0, r4
    18c4:	a901      	add	r1, sp, #4
    18c6:	47b0      	blx	r6
    18c8:	2800      	cmp	r0, #0
    18ca:	d1fa      	bne.n	18c2 <usart_serial_getchar+0x82>
		*data = (uint8_t)(val & 0xFF);
    18cc:	9b01      	ldr	r3, [sp, #4]
    18ce:	702b      	strb	r3, [r5, #0]
    18d0:	e014      	b.n	18fc <usart_serial_getchar+0xbc>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
    18d2:	f04f 0200 	mov.w	r2, #0
    18d6:	f2c4 0203 	movt	r2, #16387	; 0x4003
    18da:	4294      	cmp	r4, r2
    18dc:	d10e      	bne.n	18fc <usart_serial_getchar+0xbc>
		while (usart_read(p_usart, &val));
    18de:	f04f 0400 	mov.w	r4, #0
    18e2:	f2c4 0403 	movt	r4, #16387	; 0x4003
    18e6:	f241 7655 	movw	r6, #5973	; 0x1755
    18ea:	f2c0 0600 	movt	r6, #0
    18ee:	4620      	mov	r0, r4
    18f0:	a901      	add	r1, sp, #4
    18f2:	47b0      	blx	r6
    18f4:	2800      	cmp	r0, #0
    18f6:	d1fa      	bne.n	18ee <usart_serial_getchar+0xae>
		*data = (uint8_t)(val & 0xFF);
    18f8:	9b01      	ldr	r3, [sp, #4]
    18fa:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
    18fc:	b003      	add	sp, #12
    18fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001900 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
    1900:	b570      	push	{r4, r5, r6, lr}
    1902:	460c      	mov	r4, r1
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
    1904:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    1908:	f2c4 0302 	movt	r3, #16386	; 0x4002
    190c:	4298      	cmp	r0, r3
    190e:	d10f      	bne.n	1930 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
    1910:	f44f 4580 	mov.w	r5, #16384	; 0x4000
    1914:	f2c4 0502 	movt	r5, #16386	; 0x4002
    1918:	f241 761d 	movw	r6, #5917	; 0x171d
    191c:	f2c0 0600 	movt	r6, #0
    1920:	4628      	mov	r0, r5
    1922:	4621      	mov	r1, r4
    1924:	47b0      	blx	r6
    1926:	2800      	cmp	r0, #0
    1928:	d1fa      	bne.n	1920 <usart_serial_putchar+0x20>
		return 1;
    192a:	f04f 0001 	mov.w	r0, #1
    192e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
    1930:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1934:	f2c4 0102 	movt	r1, #16386	; 0x4002
    1938:	4288      	cmp	r0, r1
    193a:	d10f      	bne.n	195c <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
    193c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    1940:	f2c4 0502 	movt	r5, #16386	; 0x4002
    1944:	f241 761d 	movw	r6, #5917	; 0x171d
    1948:	f2c0 0600 	movt	r6, #0
    194c:	4628      	mov	r0, r5
    194e:	4621      	mov	r1, r4
    1950:	47b0      	blx	r6
    1952:	2800      	cmp	r0, #0
    1954:	d1fa      	bne.n	194c <usart_serial_putchar+0x4c>
		return 1;
    1956:	f04f 0001 	mov.w	r0, #1
    195a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
    195c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    1960:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1964:	4290      	cmp	r0, r2
    1966:	d10f      	bne.n	1988 <usart_serial_putchar+0x88>
		while (usart_write(p_usart, c)!=0);
    1968:	f44f 4540 	mov.w	r5, #49152	; 0xc000
    196c:	f2c4 0502 	movt	r5, #16386	; 0x4002
    1970:	f241 761d 	movw	r6, #5917	; 0x171d
    1974:	f2c0 0600 	movt	r6, #0
    1978:	4628      	mov	r0, r5
    197a:	4621      	mov	r1, r4
    197c:	47b0      	blx	r6
    197e:	2800      	cmp	r0, #0
    1980:	d1fa      	bne.n	1978 <usart_serial_putchar+0x78>
		return 1;
    1982:	f04f 0001 	mov.w	r0, #1
    1986:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
    1988:	f04f 0300 	mov.w	r3, #0
    198c:	f2c4 0303 	movt	r3, #16387	; 0x4003
    1990:	4298      	cmp	r0, r3
    1992:	d10f      	bne.n	19b4 <usart_serial_putchar+0xb4>
		while (usart_write(p_usart, c)!=0);
    1994:	f04f 0500 	mov.w	r5, #0
    1998:	f2c4 0503 	movt	r5, #16387	; 0x4003
    199c:	f241 761d 	movw	r6, #5917	; 0x171d
    19a0:	f2c0 0600 	movt	r6, #0
    19a4:	4628      	mov	r0, r5
    19a6:	4621      	mov	r1, r4
    19a8:	47b0      	blx	r6
    19aa:	2800      	cmp	r0, #0
    19ac:	d1fa      	bne.n	19a4 <usart_serial_putchar+0xa4>
		return 1;
    19ae:	f04f 0001 	mov.w	r0, #1
    19b2:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
    19b4:	f04f 0000 	mov.w	r0, #0
}
    19b8:	bd70      	pop	{r4, r5, r6, pc}
    19ba:	bf00      	nop

000019bc <main>:
 * \brief Application entry point for usart_serial example.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
    19bc:	b570      	push	{r4, r5, r6, lr}
    19be:	b086      	sub	sp, #24
	status_code_t status;
	uint8_t addr;
	/* Initialize the SAM system. */
	sysclk_init();
    19c0:	f243 0399 	movw	r3, #12441	; 0x3099
    19c4:	f2c0 0300 	movt	r3, #0
    19c8:	4798      	blx	r3
	board_init();
    19ca:	f243 1055 	movw	r0, #12629	; 0x3155
    19ce:	f2c0 0000 	movt	r0, #0
    19d2:	4780      	blx	r0
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    19d4:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    19d8:	f2c4 0402 	movt	r4, #16386	; 0x4002
    19dc:	f640 2150 	movw	r1, #2640	; 0xa50
    19e0:	f2c2 0100 	movt	r1, #8192	; 0x2000
    19e4:	600c      	str	r4, [r1, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    19e6:	f640 254c 	movw	r5, #2636	; 0xa4c
    19ea:	f2c2 0500 	movt	r5, #8192	; 0x2000
    19ee:	f641 1201 	movw	r2, #6401	; 0x1901
    19f2:	f2c0 0200 	movt	r2, #0
    19f6:	602a      	str	r2, [r5, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    19f8:	f640 2648 	movw	r6, #2632	; 0xa48
    19fc:	f2c2 0600 	movt	r6, #8192	; 0x2000
    1a00:	f641 0341 	movw	r3, #6209	; 0x1841
    1a04:	f2c0 0300 	movt	r3, #0
    1a08:	6033      	str	r3, [r6, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
    1a0a:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
    1a0e:	9000      	str	r0, [sp, #0]
	usart_settings.char_length = opt->charlength;
    1a10:	f04f 01c0 	mov.w	r1, #192	; 0xc0
    1a14:	9101      	str	r1, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
    1a16:	f44f 6500 	mov.w	r5, #2048	; 0x800
    1a1a:	9502      	str	r5, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
    1a1c:	f04f 0500 	mov.w	r5, #0
    1a20:	9503      	str	r5, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
    1a22:	9504      	str	r5, [sp, #16]
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_hz());
#endif
#if (SAM4L)
		sysclk_enable_peripheral_clock(p_usart);
    1a24:	4620      	mov	r0, r4
    1a26:	f242 321d 	movw	r2, #8989	; 0x231d
    1a2a:	f2c0 0200 	movt	r2, #0
    1a2e:	4790      	blx	r2
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
    1a30:	4620      	mov	r0, r4
    1a32:	f242 0625 	movw	r6, #8229	; 0x2025
    1a36:	f2c0 0600 	movt	r6, #0
    1a3a:	47b0      	blx	r6
    1a3c:	4602      	mov	r2, r0
    1a3e:	4620      	mov	r0, r4
    1a40:	4669      	mov	r1, sp
    1a42:	f241 73dd 	movw	r3, #6109	; 0x17dd
    1a46:	f2c0 0300 	movt	r3, #0
    1a4a:	4798      	blx	r3
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
    1a4c:	4620      	mov	r0, r4
    1a4e:	f241 61e5 	movw	r1, #5861	; 0x16e5
    1a52:	f2c0 0100 	movt	r1, #0
    1a56:	4788      	blx	r1
		usart_enable_rx(p_usart);
    1a58:	4620      	mov	r0, r4
    1a5a:	f241 64f5 	movw	r4, #5877	; 0x16f5
    1a5e:	f2c0 0400 	movt	r4, #0
    1a62:	47a0      	blx	r4
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    1a64:	f240 0650 	movw	r6, #80	; 0x50
    1a68:	f2c2 0600 	movt	r6, #8192	; 0x2000
    1a6c:	6830      	ldr	r0, [r6, #0]
    1a6e:	6880      	ldr	r0, [r0, #8]
    1a70:	4629      	mov	r1, r5
    1a72:	f643 14e9 	movw	r4, #14825	; 0x39e9
    1a76:	f2c0 0400 	movt	r4, #0
    1a7a:	47a0      	blx	r4
	setbuf(stdin, NULL);
    1a7c:	6832      	ldr	r2, [r6, #0]
    1a7e:	6850      	ldr	r0, [r2, #4]
    1a80:	4629      	mov	r1, r5
    1a82:	47a0      	blx	r4
	//init_twi();
	/* Configure UART for debug message output. */
	configure_console();

	/* Output example information. */
	puts("\n\r\nCamera App\n\r");
    1a84:	f246 10a0 	movw	r0, #24992	; 0x61a0
    1a88:	f2c0 0000 	movt	r0, #0
    1a8c:	f643 15d9 	movw	r5, #14809	; 0x39d9
    1a90:	f2c0 0500 	movt	r5, #0
    1a94:	47a8      	blx	r5

	puts("Start Scan...\n\r");
    1a96:	f246 10b0 	movw	r0, #25008	; 0x61b0
    1a9a:	f2c0 0000 	movt	r0, #0
    1a9e:	47a8      	blx	r5
	

	if (STATUS_OK == OV7670_init())
    1aa0:	f240 63e5 	movw	r3, #1765	; 0x6e5
    1aa4:	f2c0 0300 	movt	r3, #0
    1aa8:	4798      	blx	r3
    1aaa:	b948      	cbnz	r0, 1ac0 <main+0x104>
	{
		printf("Initialise success\n\r");
    1aac:	f246 10c0 	movw	r0, #25024	; 0x61c0
    1ab0:	f2c0 0000 	movt	r0, #0
    1ab4:	f643 1625 	movw	r6, #14629	; 0x3925
    1ab8:	f2c0 0600 	movt	r6, #0
    1abc:	47b0      	blx	r6
    1abe:	e008      	b.n	1ad2 <main+0x116>
	}
	else
	{
		printf("Initialise fail\n\r");
    1ac0:	f246 10d8 	movw	r0, #25048	; 0x61d8
    1ac4:	f2c0 0000 	movt	r0, #0
    1ac8:	f643 1125 	movw	r1, #14629	; 0x3925
    1acc:	f2c0 0100 	movt	r1, #0
    1ad0:	4788      	blx	r1
	}
	
	printf("Get Image!\n\r");
    1ad2:	f246 10ec 	movw	r0, #25068	; 0x61ec
    1ad6:	f2c0 0000 	movt	r0, #0
    1ada:	f643 1425 	movw	r4, #14629	; 0x3925
    1ade:	f2c0 0400 	movt	r4, #0
    1ae2:	47a0      	blx	r4
	LoadImageToBuffer();
    1ae4:	f640 102d 	movw	r0, #2349	; 0x92d
    1ae8:	f2c0 0000 	movt	r0, #0
    1aec:	4780      	blx	r0
	while ( STATUS_ERR_BUSY == GetImageIfAvailiable(0));
    1aee:	f04f 0500 	mov.w	r5, #0
    1af2:	f640 26b9 	movw	r6, #2745	; 0xab9
    1af6:	f2c0 0600 	movt	r6, #0
    1afa:	4628      	mov	r0, r5
    1afc:	47b0      	blx	r6
    1afe:	2819      	cmp	r0, #25
    1b00:	d0fb      	beq.n	1afa <main+0x13e>
	printf("Done!\n\r");
    1b02:	f246 10fc 	movw	r0, #25084	; 0x61fc
    1b06:	f2c0 0000 	movt	r0, #0
    1b0a:	f643 1225 	movw	r2, #14629	; 0x3925
    1b0e:	f2c0 0200 	movt	r2, #0
    1b12:	4790      	blx	r2
    1b14:	e7fe      	b.n	1b14 <main+0x158>
    1b16:	bf00      	nop

00001b18 <dfll_enable_closed_loop>:
	/* Finally, stop the reference clock */
	genclk_disable(0);
}

void dfll_enable_closed_loop(const struct dfll_config *cfg, uint32_t dfll_id)
{
    1b18:	b410      	push	{r4}
}

static inline void genclk_enable(const struct genclk_config *cfg,
		uint32_t id)
{
	 SCIF->SCIF_GCCTRL[id].SCIF_GCCTRL = cfg->ctrl | SCIF_GCCTRL_CEN;
    1b1a:	6803      	ldr	r3, [r0, #0]
    1b1c:	f043 0201 	orr.w	r2, r3, #1
    1b20:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1b24:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1b28:	675a      	str	r2, [r3, #116]	; 0x74
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1b2a:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1b2e:	b672      	cpsid	i
    1b30:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1b34:	f240 0244 	movw	r2, #68	; 0x44
    1b38:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1b3c:	f04f 0400 	mov.w	r4, #0
    1b40:	7014      	strb	r4, [r2, #0]
	 * Enable the DFLL first, but don't wait for the DFLL0RDY bit
	 * because if the DFLL has been disabled before, the DFLL0RDY
	 * bit stays cleared until it is re-enabled.
	 */
	flags = cpu_irq_save();
	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAUL)
    1b42:	f04f 0228 	mov.w	r2, #40	; 0x28
    1b46:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    1b4a:	619a      	str	r2, [r3, #24]
		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_DFLL0CONF - (uint32_t)SCIF);
	SCIF->SCIF_DFLL0CONF = SCIF_DFLL0CONF_EN;
    1b4c:	f04f 0201 	mov.w	r2, #1
    1b50:	629a      	str	r2, [r3, #40]	; 0x28
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1b52:	b939      	cbnz	r1, 1b64 <dfll_enable_closed_loop+0x4c>
		cpu_irq_enable();
    1b54:	f240 0344 	movw	r3, #68	; 0x44
    1b58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1b5c:	701a      	strb	r2, [r3, #0]
    1b5e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1b62:	b662      	cpsie	i

	/*
	 * Then, configure the DFLL, taking care to wait for the
	 * DFLL0RDY bit before every step.
	 */
	dfll_write_reg(DFLL0STEP, cfg->step);
    1b64:	f44f 6100 	mov.w	r1, #2048	; 0x800
    1b68:	f2c4 010e 	movt	r1, #16398	; 0x400e
    1b6c:	694a      	ldr	r2, [r1, #20]
    1b6e:	f012 0f08 	tst.w	r2, #8
    1b72:	d0fb      	beq.n	1b6c <dfll_enable_closed_loop+0x54>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1b74:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1b78:	b672      	cpsid	i
    1b7a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1b7e:	f240 0344 	movw	r3, #68	; 0x44
    1b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1b86:	f04f 0200 	mov.w	r2, #0
    1b8a:	701a      	strb	r2, [r3, #0]
    1b8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1b90:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1b94:	f04f 0234 	mov.w	r2, #52	; 0x34
    1b98:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    1b9c:	619a      	str	r2, [r3, #24]
    1b9e:	68c2      	ldr	r2, [r0, #12]
    1ba0:	635a      	str	r2, [r3, #52]	; 0x34
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1ba2:	b949      	cbnz	r1, 1bb8 <dfll_enable_closed_loop+0xa0>
		cpu_irq_enable();
    1ba4:	f240 0144 	movw	r1, #68	; 0x44
    1ba8:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1bac:	f04f 0301 	mov.w	r3, #1
    1bb0:	700b      	strb	r3, [r1, #0]
    1bb2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1bb6:	b662      	cpsie	i
	dfll_write_reg(DFLL0MUL, cfg->mul);
    1bb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1bbc:	f2c4 020e 	movt	r2, #16398	; 0x400e
    1bc0:	6951      	ldr	r1, [r2, #20]
    1bc2:	f011 0f08 	tst.w	r1, #8
    1bc6:	d0fb      	beq.n	1bc0 <dfll_enable_closed_loop+0xa8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1bc8:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1bcc:	b672      	cpsid	i
    1bce:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1bd2:	f240 0344 	movw	r3, #68	; 0x44
    1bd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1bda:	f04f 0200 	mov.w	r2, #0
    1bde:	701a      	strb	r2, [r3, #0]
    1be0:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1be4:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1be8:	f04f 0230 	mov.w	r2, #48	; 0x30
    1bec:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    1bf0:	619a      	str	r2, [r3, #24]
    1bf2:	6882      	ldr	r2, [r0, #8]
    1bf4:	631a      	str	r2, [r3, #48]	; 0x30
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1bf6:	b949      	cbnz	r1, 1c0c <dfll_enable_closed_loop+0xf4>
		cpu_irq_enable();
    1bf8:	f240 0144 	movw	r1, #68	; 0x44
    1bfc:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1c00:	f04f 0301 	mov.w	r3, #1
    1c04:	700b      	strb	r3, [r1, #0]
    1c06:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1c0a:	b662      	cpsie	i
	dfll_write_reg(DFLL0SSG, cfg->ssg);
    1c0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1c10:	f2c4 020e 	movt	r2, #16398	; 0x400e
    1c14:	6951      	ldr	r1, [r2, #20]
    1c16:	f011 0f08 	tst.w	r1, #8
    1c1a:	d0fb      	beq.n	1c14 <dfll_enable_closed_loop+0xfc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1c1c:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1c20:	b672      	cpsid	i
    1c22:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1c26:	f240 0344 	movw	r3, #68	; 0x44
    1c2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1c2e:	f04f 0200 	mov.w	r2, #0
    1c32:	701a      	strb	r2, [r3, #0]
    1c34:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1c38:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1c3c:	f04f 0238 	mov.w	r2, #56	; 0x38
    1c40:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    1c44:	619a      	str	r2, [r3, #24]
    1c46:	6902      	ldr	r2, [r0, #16]
    1c48:	639a      	str	r2, [r3, #56]	; 0x38
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1c4a:	b949      	cbnz	r1, 1c60 <dfll_enable_closed_loop+0x148>
		cpu_irq_enable();
    1c4c:	f240 0144 	movw	r1, #68	; 0x44
    1c50:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1c54:	f04f 0301 	mov.w	r3, #1
    1c58:	700b      	strb	r3, [r1, #0]
    1c5a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1c5e:	b662      	cpsie	i
	dfll_write_reg(DFLL0CONF, cfg->conf | SCIF_DFLL0CONF_EN);
    1c60:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1c64:	f2c4 020e 	movt	r2, #16398	; 0x400e
    1c68:	6951      	ldr	r1, [r2, #20]
    1c6a:	f011 0f08 	tst.w	r1, #8
    1c6e:	d0fb      	beq.n	1c68 <dfll_enable_closed_loop+0x150>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1c70:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1c74:	b672      	cpsid	i
    1c76:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1c7a:	f240 0344 	movw	r3, #68	; 0x44
    1c7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1c82:	f04f 0200 	mov.w	r2, #0
    1c86:	701a      	strb	r2, [r3, #0]
    1c88:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1c8c:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1c90:	f04f 0228 	mov.w	r2, #40	; 0x28
    1c94:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    1c98:	619a      	str	r2, [r3, #24]
    1c9a:	6840      	ldr	r0, [r0, #4]
    1c9c:	f040 0201 	orr.w	r2, r0, #1
    1ca0:	629a      	str	r2, [r3, #40]	; 0x28
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1ca2:	b949      	cbnz	r1, 1cb8 <dfll_enable_closed_loop+0x1a0>
		cpu_irq_enable();
    1ca4:	f240 0144 	movw	r1, #68	; 0x44
    1ca8:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1cac:	f04f 0301 	mov.w	r3, #1
    1cb0:	700b      	strb	r3, [r1, #0]
    1cb2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1cb6:	b662      	cpsie	i
}
    1cb8:	bc10      	pop	{r4}
    1cba:	4770      	bx	lr

00001cbc <dfll_enable_config_defaults>:
	/* Finally, stop the reference clock */
	genclk_disable(0);
}

void dfll_enable_config_defaults(uint32_t dfll_id)
{
    1cbc:	b500      	push	{lr}
    1cbe:	b089      	sub	sp, #36	; 0x24
#ifdef CONFIG_DFLL0_SOURCE
	struct dfll_config dfllcfg;
#endif
	static bool open_loop_done = false;

	if(SCIF->SCIF_DFLL0CONF & SCIF_DFLL0CONF_MODE) {
    1cc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1cc4:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1cc8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    1cca:	f011 0f02 	tst.w	r1, #2
    1cce:	d007      	beq.n	1ce0 <dfll_enable_config_defaults+0x24>
}

static inline bool dfll_is_fine_locked(uint32_t dfll_id)
{
	UNUSED(dfll_id);
	return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_DFLL0LOCKF);
    1cd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1cd4:	f2c4 020e 	movt	r2, #16398	; 0x400e
    1cd8:	6953      	ldr	r3, [r2, #20]
		// Closed-loop mode
		if (dfll_is_fine_locked(dfll_id)) {
    1cda:	f013 0f04 	tst.w	r3, #4
    1cde:	d14e      	bne.n	1d7e <dfll_enable_config_defaults+0xc2>
	}
	if (open_loop_done == true) {
		return;
	}

	switch (dfll_id) {
    1ce0:	2800      	cmp	r0, #0
    1ce2:	d14c      	bne.n	1d7e <dfll_enable_config_defaults+0xc2>
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_OSC32RDY);
    1ce4:	f44f 6080 	mov.w	r0, #1024	; 0x400
    1ce8:	f2c4 000f 	movt	r0, #16399	; 0x400f
    1cec:	6941      	ldr	r1, [r0, #20]
		/* Nothing to do */
		break;

#ifdef BOARD_OSC32_HZ
	case GENCLK_SRC_OSC32K:
		if (!osc_is_ready(OSC_ID_OSC32)) {
    1cee:	f011 0f01 	tst.w	r1, #1
    1cf2:	d10c      	bne.n	1d0e <dfll_enable_config_defaults+0x52>
		break;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		osc_priv_enable_osc32();
    1cf4:	f641 5285 	movw	r2, #7557	; 0x1d85
    1cf8:	f2c0 0200 	movt	r2, #0
    1cfc:	4790      	blx	r2
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_OSC32RDY);
    1cfe:	f44f 6080 	mov.w	r0, #1024	; 0x400
    1d02:	f2c4 000f 	movt	r0, #16399	; 0x400f
    1d06:	6943      	ldr	r3, [r0, #20]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1d08:	f013 0f01 	tst.w	r3, #1
    1d0c:	d0fb      	beq.n	1d06 <dfll_enable_config_defaults+0x4a>
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
	cfg->ctrl = (cfg->ctrl & ~SCIF_GCCTRL_OSCSEL_Msk)
    1d0e:	f44f 7180 	mov.w	r1, #256	; 0x100
    1d12:	9101      	str	r1, [sp, #4]
	genclk_config_defaults(&cfg->ref_cfg, 0);
	genclk_config_set_source(&cfg->ref_cfg, refclk);
	genclk_config_set_divider(&cfg->ref_cfg, divide);

	// Do a sync before reading a dfll conf register
	SCIF->SCIF_DFLL0SYNC = SCIF_DFLL0SYNC_SYNC;
    1d14:	f44f 6000 	mov.w	r0, #2048	; 0x800
    1d18:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1d1c:	f04f 0201 	mov.w	r2, #1
    1d20:	6402      	str	r2, [r0, #64]	; 0x40
	while (!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_DFLL0RDY));
    1d22:	f44f 6100 	mov.w	r1, #2048	; 0x800
    1d26:	f2c4 010e 	movt	r1, #16398	; 0x400e
    1d2a:	694b      	ldr	r3, [r1, #20]
    1d2c:	f013 0f08 	tst.w	r3, #8
    1d30:	d0fb      	beq.n	1d2a <dfll_enable_config_defaults+0x6e>
	cfg->conf = SCIF->SCIF_DFLL0CONF;
    1d32:	f44f 6000 	mov.w	r0, #2048	; 0x800
    1d36:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1d3a:	6a81      	ldr	r1, [r0, #40]	; 0x28
{
	if (freq < DFLL_MAX_RANGE3){
		cfg->freq_range = DFLL_RANGE3;
	}
	else if (freq < DFLL_MAX_RANGE2){
		cfg->freq_range = DFLL_RANGE2;
    1d3c:	f04f 0202 	mov.w	r2, #2
    1d40:	f88d 201c 	strb.w	r2, [sp, #28]
		cfg->freq_range = DFLL_RANGE1;
	}
	else {
		cfg->freq_range = DFLL_RANGE0;
	}
	cfg->conf &= ~SCIF_DFLL0CONF_RANGE_Msk;
    1d44:	f421 3340 	bic.w	r3, r1, #196608	; 0x30000
	cfg->conf |=SCIF_DFLL0CONF_RANGE(cfg->freq_range);
    1d48:	f043 1002 	orr.w	r0, r3, #131074	; 0x20002
    1d4c:	9002      	str	r0, [sp, #8]
	// Select Closed Loop Mode
	cfg->conf |= SCIF_DFLL0CONF_MODE;
	// Write DFLL Frequency Range
	dfll_priv_set_frequency_range(cfg, CONFIG_DFLL0_FREQ);

	cfg->mul = mul;
    1d4e:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
    1d52:	9103      	str	r1, [sp, #12]
	cfg->val = 0;
    1d54:	f04f 0100 	mov.w	r1, #0
    1d58:	9106      	str	r1, [sp, #24]
};

static inline void dfll_config_set_max_step(struct dfll_config *cfg,
		uint16_t coarse, uint16_t fine)
{
	cfg->step = (SCIF_DFLL0STEP_CSTEP(coarse)
    1d5a:	f04f 1204 	mov.w	r2, #262148	; 0x40004
    1d5e:	9204      	str	r2, [sp, #16]
	/*
	 * Initial step length of 4. If this is set too high, the DFLL
	 * may fail to lock.
	 */
	dfll_config_set_max_step(cfg, 4, 4);
	cfg->ssg = 0;
    1d60:	9105      	str	r1, [sp, #20]
		dfll_config_init_closed_loop_mode(&dfllcfg,
			CONFIG_DFLL0_SOURCE,
			CONFIG_DFLL0_DIV,
			CONFIG_DFLL0_MUL);

		dfll_enable_closed_loop(&dfllcfg, dfll_id);
    1d62:	a801      	add	r0, sp, #4
    1d64:	f641 3319 	movw	r3, #6937	; 0x1b19
    1d68:	f2c0 0300 	movt	r3, #0
    1d6c:	4798      	blx	r3
}

static inline bool dfll_is_fine_locked(uint32_t dfll_id)
{
	UNUSED(dfll_id);
	return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_DFLL0LOCKF);
    1d6e:	f44f 6000 	mov.w	r0, #2048	; 0x800
    1d72:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1d76:	6941      	ldr	r1, [r0, #20]
		while (!dfll_is_fine_locked(dfll_id));
    1d78:	f011 0f04 	tst.w	r1, #4
    1d7c:	d0fb      	beq.n	1d76 <dfll_enable_config_defaults+0xba>

	default:
		Assert(false);
		break;
	}
}
    1d7e:	b009      	add	sp, #36	; 0x24
    1d80:	bd00      	pop	{pc}
    1d82:	bf00      	nop

00001d84 <osc_priv_enable_osc32>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1d84:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1d88:	b672      	cpsid	i
    1d8a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1d8e:	f240 0344 	movw	r3, #68	; 0x44
    1d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1d96:	f04f 0200 	mov.w	r2, #0
    1d9a:	701a      	strb	r2, [r3, #0]
void osc_priv_enable_osc32(void)
{
	irqflags_t flags;

	flags = cpu_irq_save();
	BSCIF->BSCIF_UNLOCK = BSCIF_UNLOCK_KEY(0xAAu)
    1d9c:	f44f 6080 	mov.w	r0, #1024	; 0x400
    1da0:	f2c4 000f 	movt	r0, #16399	; 0x400f
    1da4:	f04f 0320 	mov.w	r3, #32
    1da8:	f6ca 2300 	movt	r3, #43520	; 0xaa00
    1dac:	6183      	str	r3, [r0, #24]
		| BSCIF_UNLOCK_ADDR((uint32_t)&BSCIF->BSCIF_OSCCTRL32 - (uint32_t)BSCIF);
	BSCIF->BSCIF_OSCCTRL32 =
    1dae:	f24a 120d 	movw	r2, #41229	; 0xa10d
    1db2:	f2c0 0205 	movt	r2, #5
    1db6:	6202      	str	r2, [r0, #32]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1db8:	b949      	cbnz	r1, 1dce <osc_priv_enable_osc32+0x4a>
		cpu_irq_enable();
    1dba:	f240 0144 	movw	r1, #68	; 0x44
    1dbe:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1dc2:	f04f 0001 	mov.w	r0, #1
    1dc6:	7008      	strb	r0, [r1, #0]
    1dc8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1dcc:	b662      	cpsie	i
    1dce:	4770      	bx	lr

00001dd0 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(uint32_t bus_id, uint32_t module_index)
{
    1dd0:	b430      	push	{r4, r5}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1dd2:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1dd6:	b672      	cpsid	i
    1dd8:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1ddc:	f240 0344 	movw	r3, #68	; 0x44
    1de0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1de4:	f04f 0200 	mov.w	r2, #0
    1de8:	701a      	strb	r2, [r3, #0]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
    1dea:	f04f 0320 	mov.w	r3, #32
    1dee:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1df2:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
	mask |= 1U << module_index;
    1df6:	f04f 0501 	mov.w	r5, #1
    1dfa:	fa05 f101 	lsl.w	r1, r5, r1
    1dfe:	4311      	orrs	r1, r2
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
    1e00:	f100 0208 	add.w	r2, r0, #8
    1e04:	ea4f 6502 	mov.w	r5, r2, lsl #24
    1e08:	ea4f 5295 	mov.w	r2, r5, lsr #22
	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
	mask |= 1U << module_index;
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    1e0c:	f042 452a 	orr.w	r5, r2, #2852126720	; 0xaa000000
    1e10:	f04f 0200 	mov.w	r2, #0
    1e14:	f2c4 020e 	movt	r2, #16398	; 0x400e
    1e18:	6595      	str	r5, [r2, #88]	; 0x58
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
	*(&PM->PM_CPUMASK + bus_id) = mask;
    1e1a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1e1e:	b94c      	cbnz	r4, 1e34 <sysclk_priv_enable_module+0x64>
		cpu_irq_enable();
    1e20:	f240 0044 	movw	r0, #68	; 0x44
    1e24:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1e28:	f04f 0301 	mov.w	r3, #1
    1e2c:	7003      	strb	r3, [r0, #0]
    1e2e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1e32:	b662      	cpsie	i

	cpu_irq_restore(flags);
}
    1e34:	bc30      	pop	{r4, r5}
    1e36:	4770      	bx	lr

00001e38 <sysclk_priv_disable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be disabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_disable_module(uint32_t bus_id, uint32_t module_index)
{
    1e38:	b430      	push	{r4, r5}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1e3a:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1e3e:	b672      	cpsid	i
    1e40:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1e44:	f240 0344 	movw	r3, #68	; 0x44
    1e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1e4c:	f04f 0200 	mov.w	r2, #0
    1e50:	701a      	strb	r2, [r3, #0]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Disable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
    1e52:	f04f 0320 	mov.w	r3, #32
    1e56:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1e5a:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
	mask &= ~(1U << module_index);
    1e5e:	f04f 0501 	mov.w	r5, #1
    1e62:	fa05 f101 	lsl.w	r1, r5, r1
    1e66:	ea22 0101 	bic.w	r1, r2, r1
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
    1e6a:	f100 0208 	add.w	r2, r0, #8
    1e6e:	ea4f 6502 	mov.w	r5, r2, lsl #24
    1e72:	ea4f 5295 	mov.w	r2, r5, lsr #22
	flags = cpu_irq_save();

	/* Disable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
	mask &= ~(1U << module_index);
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    1e76:	f042 452a 	orr.w	r5, r2, #2852126720	; 0xaa000000
    1e7a:	f04f 0200 	mov.w	r2, #0
    1e7e:	f2c4 020e 	movt	r2, #16398	; 0x400e
    1e82:	6595      	str	r5, [r2, #88]	; 0x58
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
	*(&PM->PM_CPUMASK + bus_id) = mask;
    1e84:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1e88:	b94c      	cbnz	r4, 1e9e <sysclk_priv_disable_module+0x66>
		cpu_irq_enable();
    1e8a:	f240 0044 	movw	r0, #68	; 0x44
    1e8e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1e92:	f04f 0301 	mov.w	r3, #1
    1e96:	7003      	strb	r3, [r0, #0]
    1e98:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1e9c:	b662      	cpsie	i

	cpu_irq_restore(flags);
}
    1e9e:	bc30      	pop	{r4, r5}
    1ea0:	4770      	bx	lr
    1ea2:	bf00      	nop

00001ea4 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_enable_pba_module(uint32_t module_index)
{
    1ea4:	b538      	push	{r3, r4, r5, lr}
    1ea6:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1ea8:	f3ef 8510 	mrs	r5, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1eac:	b672      	cpsid	i
    1eae:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1eb2:	f240 0344 	movw	r3, #68	; 0x44
    1eb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1eba:	f04f 0200 	mov.w	r2, #0
    1ebe:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (PM->PM_PBAMASK == 0) {
    1ec0:	4610      	mov	r0, r2
    1ec2:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1ec6:	6a81      	ldr	r1, [r0, #40]	; 0x28
    1ec8:	b941      	cbnz	r1, 1edc <sysclk_enable_pba_module+0x38>
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    1eca:	f04f 0001 	mov.w	r0, #1
    1ece:	f04f 0105 	mov.w	r1, #5
    1ed2:	f641 53d1 	movw	r3, #7633	; 0x1dd1
    1ed6:	f2c0 0300 	movt	r3, #0
    1eda:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1edc:	b94d      	cbnz	r5, 1ef2 <sysclk_enable_pba_module+0x4e>
		cpu_irq_enable();
    1ede:	f240 0044 	movw	r0, #68	; 0x44
    1ee2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1ee6:	f04f 0201 	mov.w	r2, #1
    1eea:	7002      	strb	r2, [r0, #0]
    1eec:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1ef0:	b662      	cpsie	i
	}

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBA, module_index);
    1ef2:	f04f 0002 	mov.w	r0, #2
    1ef6:	4621      	mov	r1, r4
    1ef8:	f641 53d1 	movw	r3, #7633	; 0x1dd1
    1efc:	f2c0 0300 	movt	r3, #0
    1f00:	4798      	blx	r3
    1f02:	bd38      	pop	{r3, r4, r5, pc}

00001f04 <sysclk_disable_pba_module>:
/**
 * \brief Disable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_disable_pba_module(uint32_t module_index)
{
    1f04:	b510      	push	{r4, lr}
    1f06:	4601      	mov	r1, r0
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBA, module_index);
    1f08:	f04f 0002 	mov.w	r0, #2
    1f0c:	f641 6339 	movw	r3, #7737	; 0x1e39
    1f10:	f2c0 0300 	movt	r3, #0
    1f14:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1f16:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1f1a:	b672      	cpsid	i
    1f1c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1f20:	f240 0044 	movw	r0, #68	; 0x44
    1f24:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1f28:	f04f 0200 	mov.w	r2, #0
    1f2c:	7002      	strb	r2, [r0, #0]

	/* Disable the bridge if possible */
	flags = cpu_irq_save();

	if (PM->PM_PBAMASK == 0) {
    1f2e:	4611      	mov	r1, r2
    1f30:	f2c4 010e 	movt	r1, #16398	; 0x400e
    1f34:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    1f36:	b943      	cbnz	r3, 1f4a <sysclk_disable_pba_module+0x46>
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
    1f38:	f04f 0001 	mov.w	r0, #1
    1f3c:	f04f 0105 	mov.w	r1, #5
    1f40:	f641 6239 	movw	r2, #7737	; 0x1e39
    1f44:	f2c0 0200 	movt	r2, #0
    1f48:	4790      	blx	r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1f4a:	b94c      	cbnz	r4, 1f60 <sysclk_disable_pba_module+0x5c>
		cpu_irq_enable();
    1f4c:	f240 0044 	movw	r0, #68	; 0x44
    1f50:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1f54:	f04f 0101 	mov.w	r1, #1
    1f58:	7001      	strb	r1, [r0, #0]
    1f5a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1f5e:	b662      	cpsie	i
    1f60:	bd10      	pop	{r4, pc}
    1f62:	bf00      	nop

00001f64 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(uint32_t module_index)
{
    1f64:	b538      	push	{r3, r4, r5, lr}
    1f66:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1f68:	f3ef 8510 	mrs	r5, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1f6c:	b672      	cpsid	i
    1f6e:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1f72:	f240 0344 	movw	r3, #68	; 0x44
    1f76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1f7a:	f04f 0200 	mov.w	r2, #0
    1f7e:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (PM->PM_PBBMASK == 0) {
    1f80:	4610      	mov	r0, r2
    1f82:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1f86:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    1f88:	b941      	cbnz	r1, 1f9c <sysclk_enable_pbb_module+0x38>
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    1f8a:	f04f 0001 	mov.w	r0, #1
    1f8e:	f04f 0106 	mov.w	r1, #6
    1f92:	f641 53d1 	movw	r3, #7633	; 0x1dd1
    1f96:	f2c0 0300 	movt	r3, #0
    1f9a:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1f9c:	b94d      	cbnz	r5, 1fb2 <sysclk_enable_pbb_module+0x4e>
		cpu_irq_enable();
    1f9e:	f240 0044 	movw	r0, #68	; 0x44
    1fa2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1fa6:	f04f 0201 	mov.w	r2, #1
    1faa:	7002      	strb	r2, [r0, #0]
    1fac:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1fb0:	b662      	cpsie	i
	}

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBB, module_index);
    1fb2:	f04f 0003 	mov.w	r0, #3
    1fb6:	4621      	mov	r1, r4
    1fb8:	f641 53d1 	movw	r3, #7633	; 0x1dd1
    1fbc:	f2c0 0300 	movt	r3, #0
    1fc0:	4798      	blx	r3
    1fc2:	bd38      	pop	{r3, r4, r5, pc}

00001fc4 <sysclk_disable_pbb_module>:
/**
 * \brief Disable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_disable_pbb_module(uint32_t module_index)
{
    1fc4:	b510      	push	{r4, lr}
    1fc6:	4601      	mov	r1, r0
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBB, module_index);
    1fc8:	f04f 0003 	mov.w	r0, #3
    1fcc:	f641 6339 	movw	r3, #7737	; 0x1e39
    1fd0:	f2c0 0300 	movt	r3, #0
    1fd4:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1fd6:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1fda:	b672      	cpsid	i
    1fdc:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1fe0:	f240 0044 	movw	r0, #68	; 0x44
    1fe4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1fe8:	f04f 0200 	mov.w	r2, #0
    1fec:	7002      	strb	r2, [r0, #0]

	/* Disable the bridge if possible */
	flags = cpu_irq_save();

	if (PM->PM_PBBMASK == 0) {
    1fee:	4611      	mov	r1, r2
    1ff0:	f2c4 010e 	movt	r1, #16398	; 0x400e
    1ff4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    1ff6:	b943      	cbnz	r3, 200a <sysclk_disable_pbb_module+0x46>
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
    1ff8:	f04f 0001 	mov.w	r0, #1
    1ffc:	f04f 0106 	mov.w	r1, #6
    2000:	f641 6239 	movw	r2, #7737	; 0x1e39
    2004:	f2c0 0200 	movt	r2, #0
    2008:	4790      	blx	r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    200a:	b94c      	cbnz	r4, 2020 <sysclk_disable_pbb_module+0x5c>
		cpu_irq_enable();
    200c:	f240 0044 	movw	r0, #68	; 0x44
    2010:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2014:	f04f 0101 	mov.w	r1, #1
    2018:	7001      	strb	r1, [r0, #0]
    201a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    201e:	b662      	cpsie	i
    2020:	bd10      	pop	{r4, pc}
    2022:	bf00      	nop

00002024 <sysclk_get_peripheral_bus_hz>:
 * \return Frequency of the bus attached to the specified peripheral, in Hz.
 */
uint32_t sysclk_get_peripheral_bus_hz(const volatile void *module)
{
	/* Fallthroughs intended for modules sharing the same peripheral bus. */
	switch ((uintptr_t)module) {
    2024:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2028:	f2c4 0307 	movt	r3, #16391	; 0x4007
    202c:	4298      	cmp	r0, r3
    202e:	f000 816f 	beq.w	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    2032:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2036:	f2c4 0107 	movt	r1, #16391	; 0x4007
    203a:	4288      	cmp	r0, r1
    203c:	f200 80bb 	bhi.w	21b6 <sysclk_get_peripheral_bus_hz+0x192>
    2040:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2044:	f2c4 0202 	movt	r2, #16386	; 0x4002
    2048:	4290      	cmp	r0, r2
    204a:	f000 8161 	beq.w	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    204e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2052:	f2c4 0302 	movt	r3, #16386	; 0x4002
    2056:	4298      	cmp	r0, r3
    2058:	d851      	bhi.n	20fe <sysclk_get_peripheral_bus_hz+0xda>
    205a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    205e:	f2c4 0101 	movt	r1, #16385	; 0x4001
    2062:	4288      	cmp	r0, r1
    2064:	f000 8154 	beq.w	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    2068:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    206c:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2070:	4290      	cmp	r0, r2
    2072:	d820      	bhi.n	20b6 <sysclk_get_peripheral_bus_hz+0x92>
    2074:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2078:	f2c4 0300 	movt	r3, #16384	; 0x4000
    207c:	4298      	cmp	r0, r3
    207e:	f000 8147 	beq.w	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    2082:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2086:	f2c4 0100 	movt	r1, #16384	; 0x4000
    208a:	4288      	cmp	r0, r1
    208c:	d804      	bhi.n	2098 <sysclk_get_peripheral_bus_hz+0x74>
    208e:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    2092:	f040 8140 	bne.w	2316 <sysclk_get_peripheral_bus_hz+0x2f2>
    2096:	e13b      	b.n	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    2098:	f04f 0200 	mov.w	r2, #0
    209c:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20a0:	4290      	cmp	r0, r2
    20a2:	f000 8135 	beq.w	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    20a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    20aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ae:	4298      	cmp	r0, r3
    20b0:	f040 8131 	bne.w	2316 <sysclk_get_peripheral_bus_hz+0x2f2>
    20b4:	e12c      	b.n	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    20b6:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    20ba:	f2c4 0101 	movt	r1, #16385	; 0x4001
    20be:	4288      	cmp	r0, r1
    20c0:	f000 8126 	beq.w	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    20c4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    20c8:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20cc:	4290      	cmp	r0, r2
    20ce:	d807      	bhi.n	20e0 <sysclk_get_peripheral_bus_hz+0xbc>
    20d0:	f44f 4304 	mov.w	r3, #33792	; 0x8400
    20d4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20d8:	4298      	cmp	r0, r3
    20da:	f040 811c 	bne.w	2316 <sysclk_get_peripheral_bus_hz+0x2f2>
    20de:	e117      	b.n	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    20e0:	f44f 4144 	mov.w	r1, #50176	; 0xc400
    20e4:	f2c4 0101 	movt	r1, #16385	; 0x4001
    20e8:	4288      	cmp	r0, r1
    20ea:	f000 8111 	beq.w	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    20ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    20f2:	f2c4 0202 	movt	r2, #16386	; 0x4002
    20f6:	4290      	cmp	r0, r2
    20f8:	f040 810d 	bne.w	2316 <sysclk_get_peripheral_bus_hz+0x2f2>
    20fc:	e108      	b.n	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    20fe:	f04f 0300 	mov.w	r3, #0
    2102:	f2c4 0304 	movt	r3, #16388	; 0x4004
    2106:	4298      	cmp	r0, r3
    2108:	f000 8102 	beq.w	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    210c:	f04f 0100 	mov.w	r1, #0
    2110:	f2c4 0104 	movt	r1, #16388	; 0x4004
    2114:	4288      	cmp	r0, r1
    2116:	d823      	bhi.n	2160 <sysclk_get_peripheral_bus_hz+0x13c>
    2118:	f04f 0200 	mov.w	r2, #0
    211c:	f2c4 0203 	movt	r2, #16387	; 0x4003
    2120:	4290      	cmp	r0, r2
    2122:	f000 80f5 	beq.w	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    2126:	f04f 0300 	mov.w	r3, #0
    212a:	f2c4 0303 	movt	r3, #16387	; 0x4003
    212e:	4298      	cmp	r0, r3
    2130:	d807      	bhi.n	2142 <sysclk_get_peripheral_bus_hz+0x11e>
    2132:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    2136:	f2c4 0102 	movt	r1, #16386	; 0x4002
    213a:	4288      	cmp	r0, r1
    213c:	f040 80eb 	bne.w	2316 <sysclk_get_peripheral_bus_hz+0x2f2>
    2140:	e0e6      	b.n	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    2142:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2146:	f2c4 0203 	movt	r2, #16387	; 0x4003
    214a:	4290      	cmp	r0, r2
    214c:	f000 80e0 	beq.w	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    2150:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    2154:	f2c4 0303 	movt	r3, #16387	; 0x4003
    2158:	4298      	cmp	r0, r3
    215a:	f040 80dc 	bne.w	2316 <sysclk_get_peripheral_bus_hz+0x2f2>
    215e:	e0d7      	b.n	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    2160:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2164:	f2c4 0106 	movt	r1, #16390	; 0x4006
    2168:	4288      	cmp	r0, r1
    216a:	f000 80d1 	beq.w	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    216e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2172:	f2c4 0206 	movt	r2, #16390	; 0x4006
    2176:	4290      	cmp	r0, r2
    2178:	d80e      	bhi.n	2198 <sysclk_get_peripheral_bus_hz+0x174>
    217a:	f04f 0300 	mov.w	r3, #0
    217e:	f2c4 0306 	movt	r3, #16390	; 0x4006
    2182:	4298      	cmp	r0, r3
    2184:	f000 80c4 	beq.w	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    2188:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    218c:	f2c4 0106 	movt	r1, #16390	; 0x4006
    2190:	4288      	cmp	r0, r1
    2192:	f040 80c0 	bne.w	2316 <sysclk_get_peripheral_bus_hz+0x2f2>
    2196:	e0bb      	b.n	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    2198:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    219c:	f2c4 0206 	movt	r2, #16390	; 0x4006
    21a0:	4290      	cmp	r0, r2
    21a2:	f000 80b5 	beq.w	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    21a6:	f04f 0300 	mov.w	r3, #0
    21aa:	f2c4 0307 	movt	r3, #16391	; 0x4007
    21ae:	4298      	cmp	r0, r3
    21b0:	f040 80b1 	bne.w	2316 <sysclk_get_peripheral_bus_hz+0x2f2>
    21b4:	e0ac      	b.n	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    21b6:	f04f 0100 	mov.w	r1, #0
    21ba:	f2c4 010e 	movt	r1, #16398	; 0x400e
    21be:	4288      	cmp	r0, r1
    21c0:	f000 80a6 	beq.w	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    21c4:	f04f 0200 	mov.w	r2, #0
    21c8:	f2c4 020e 	movt	r2, #16398	; 0x400e
    21cc:	4290      	cmp	r0, r2
    21ce:	d84e      	bhi.n	226e <sysclk_get_peripheral_bus_hz+0x24a>
    21d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    21d4:	f2c4 030a 	movt	r3, #16394	; 0x400a
    21d8:	4298      	cmp	r0, r3
    21da:	f000 8099 	beq.w	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    21de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    21e2:	f2c4 010a 	movt	r1, #16394	; 0x400a
    21e6:	4288      	cmp	r0, r1
    21e8:	d821      	bhi.n	222e <sysclk_get_peripheral_bus_hz+0x20a>
    21ea:	f04f 0200 	mov.w	r2, #0
    21ee:	f2c4 0208 	movt	r2, #16392	; 0x4008
    21f2:	4290      	cmp	r0, r2
    21f4:	f000 808c 	beq.w	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    21f8:	f04f 0300 	mov.w	r3, #0
    21fc:	f2c4 0308 	movt	r3, #16392	; 0x4008
    2200:	4298      	cmp	r0, r3
    2202:	d807      	bhi.n	2214 <sysclk_get_peripheral_bus_hz+0x1f0>
    2204:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    2208:	f2c4 0107 	movt	r1, #16391	; 0x4007
    220c:	4288      	cmp	r0, r1
    220e:	f040 8082 	bne.w	2316 <sysclk_get_peripheral_bus_hz+0x2f2>
    2212:	e07d      	b.n	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    2214:	f04f 0200 	mov.w	r2, #0
    2218:	f2c4 020a 	movt	r2, #16394	; 0x400a
    221c:	4290      	cmp	r0, r2
    221e:	d077      	beq.n	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    2220:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2224:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2228:	4298      	cmp	r0, r3
    222a:	d174      	bne.n	2316 <sysclk_get_peripheral_bus_hz+0x2f2>
    222c:	e070      	b.n	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    222e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    2232:	f2c4 010a 	movt	r1, #16394	; 0x400a
    2236:	4288      	cmp	r0, r1
    2238:	d06a      	beq.n	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    223a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    223e:	f2c4 020a 	movt	r2, #16394	; 0x400a
    2242:	4290      	cmp	r0, r2
    2244:	d806      	bhi.n	2254 <sysclk_get_peripheral_bus_hz+0x230>
    2246:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    224a:	f2c4 030a 	movt	r3, #16394	; 0x400a
    224e:	4298      	cmp	r0, r3
    2250:	d161      	bne.n	2316 <sysclk_get_peripheral_bus_hz+0x2f2>
    2252:	e05d      	b.n	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    2254:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    2258:	f2c4 010a 	movt	r1, #16394	; 0x400a
    225c:	4288      	cmp	r0, r1
    225e:	d057      	beq.n	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    2260:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
    2264:	f2c4 020a 	movt	r2, #16394	; 0x400a
    2268:	4290      	cmp	r0, r2
    226a:	d154      	bne.n	2316 <sysclk_get_peripheral_bus_hz+0x2f2>
    226c:	e050      	b.n	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    226e:	f04f 0300 	mov.w	r3, #0
    2272:	f2c4 030f 	movt	r3, #16399	; 0x400f
    2276:	4298      	cmp	r0, r3
    2278:	d04a      	beq.n	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    227a:	f04f 0100 	mov.w	r1, #0
    227e:	f2c4 010f 	movt	r1, #16399	; 0x400f
    2282:	4288      	cmp	r0, r1
    2284:	d81f      	bhi.n	22c6 <sysclk_get_peripheral_bus_hz+0x2a2>
    2286:	f44f 6200 	mov.w	r2, #2048	; 0x800
    228a:	f2c4 020e 	movt	r2, #16398	; 0x400e
    228e:	4290      	cmp	r0, r2
    2290:	d03e      	beq.n	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    2292:	f44f 6300 	mov.w	r3, #2048	; 0x800
    2296:	f2c4 030e 	movt	r3, #16398	; 0x400e
    229a:	4298      	cmp	r0, r3
    229c:	d806      	bhi.n	22ac <sysclk_get_peripheral_bus_hz+0x288>
    229e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    22a2:	f2c4 010e 	movt	r1, #16398	; 0x400e
    22a6:	4288      	cmp	r0, r1
    22a8:	d135      	bne.n	2316 <sysclk_get_peripheral_bus_hz+0x2f2>
    22aa:	e031      	b.n	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    22ac:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    22b0:	f2c4 020e 	movt	r2, #16398	; 0x400e
    22b4:	4290      	cmp	r0, r2
    22b6:	d02b      	beq.n	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    22b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    22bc:	f2c4 030e 	movt	r3, #16398	; 0x400e
    22c0:	4298      	cmp	r0, r3
    22c2:	d128      	bne.n	2316 <sysclk_get_peripheral_bus_hz+0x2f2>
    22c4:	e024      	b.n	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    22c6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    22ca:	f2c4 010f 	movt	r1, #16399	; 0x400f
    22ce:	4288      	cmp	r0, r1
    22d0:	d01e      	beq.n	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    22d2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    22d6:	f2c4 020f 	movt	r2, #16399	; 0x400f
    22da:	4290      	cmp	r0, r2
    22dc:	d80c      	bhi.n	22f8 <sysclk_get_peripheral_bus_hz+0x2d4>
    22de:	f44f 6380 	mov.w	r3, #1024	; 0x400
    22e2:	f2c4 030f 	movt	r3, #16399	; 0x400f
    22e6:	4298      	cmp	r0, r3
    22e8:	d012      	beq.n	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    22ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
    22ee:	f2c4 010f 	movt	r1, #16399	; 0x400f
    22f2:	4288      	cmp	r0, r1
    22f4:	d10f      	bne.n	2316 <sysclk_get_peripheral_bus_hz+0x2f2>
    22f6:	e00b      	b.n	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    22f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    22fc:	f2c4 020f 	movt	r2, #16399	; 0x400f
    2300:	4290      	cmp	r0, r2
    2302:	d005      	beq.n	2310 <sysclk_get_peripheral_bus_hz+0x2ec>
    2304:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    2308:	f2c4 030f 	movt	r3, #16399	; 0x400f
    230c:	4298      	cmp	r0, r3
    230e:	d102      	bne.n	2316 <sysclk_get_peripheral_bus_hz+0x2f2>
	case PARC_ADDR:
	case CATB_ADDR:
	case TWIM2_ADDR:
	case TWIM3_ADDR:
	case LCDCA_ADDR:
		return sysclk_get_pba_hz();
    2310:	f04f 7037 	mov.w	r0, #47972352	; 0x2dc0000
    2314:	4770      	bx	lr
	case PICOUART_ADDR:
		return sysclk_get_pbd_hz();

	default:
		Assert(false);
		return 0;
    2316:	f04f 0000 	mov.w	r0, #0
	}
}
    231a:	4770      	bx	lr

0000231c <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
    231c:	b508      	push	{r3, lr}
	switch ((uintptr_t)module) {
    231e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2322:	f2c4 0307 	movt	r3, #16391	; 0x4007
    2326:	4298      	cmp	r0, r3
    2328:	f000 827f 	beq.w	282a <sysclk_enable_peripheral_clock+0x50e>
    232c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2330:	f2c4 0107 	movt	r1, #16391	; 0x4007
    2334:	4288      	cmp	r0, r1
    2336:	f200 80bb 	bhi.w	24b0 <sysclk_enable_peripheral_clock+0x194>
    233a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    233e:	f2c4 0202 	movt	r2, #16386	; 0x4002
    2342:	4290      	cmp	r0, r2
    2344:	f000 81f2 	beq.w	272c <sysclk_enable_peripheral_clock+0x410>
    2348:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    234c:	f2c4 0302 	movt	r3, #16386	; 0x4002
    2350:	4298      	cmp	r0, r3
    2352:	d851      	bhi.n	23f8 <sysclk_enable_peripheral_clock+0xdc>
    2354:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2358:	f2c4 0101 	movt	r1, #16385	; 0x4001
    235c:	4288      	cmp	r0, r1
    235e:	f000 81b0 	beq.w	26c2 <sysclk_enable_peripheral_clock+0x3a6>
    2362:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2366:	f2c4 0201 	movt	r2, #16385	; 0x4001
    236a:	4290      	cmp	r0, r2
    236c:	d820      	bhi.n	23b0 <sysclk_enable_peripheral_clock+0x94>
    236e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2372:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2376:	4298      	cmp	r0, r3
    2378:	f000 8171 	beq.w	265e <sysclk_enable_peripheral_clock+0x342>
    237c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2380:	f2c4 0100 	movt	r1, #16384	; 0x4000
    2384:	4288      	cmp	r0, r1
    2386:	d804      	bhi.n	2392 <sysclk_enable_peripheral_clock+0x76>
    2388:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    238c:	f040 8334 	bne.w	29f8 <sysclk_enable_peripheral_clock+0x6dc>
    2390:	e15d      	b.n	264e <sysclk_enable_peripheral_clock+0x332>
    2392:	f04f 0300 	mov.w	r3, #0
    2396:	f2c4 0301 	movt	r3, #16385	; 0x4001
    239a:	4298      	cmp	r0, r3
    239c:	f000 8167 	beq.w	266e <sysclk_enable_peripheral_clock+0x352>
    23a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    23a4:	f2c4 0101 	movt	r1, #16385	; 0x4001
    23a8:	4288      	cmp	r0, r1
    23aa:	f040 8325 	bne.w	29f8 <sysclk_enable_peripheral_clock+0x6dc>
    23ae:	e173      	b.n	2698 <sysclk_enable_peripheral_clock+0x37c>
    23b0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    23b4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    23b8:	4298      	cmp	r0, r3
    23ba:	f000 8192 	beq.w	26e2 <sysclk_enable_peripheral_clock+0x3c6>
    23be:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    23c2:	f2c4 0201 	movt	r2, #16385	; 0x4001
    23c6:	4290      	cmp	r0, r2
    23c8:	d807      	bhi.n	23da <sysclk_enable_peripheral_clock+0xbe>
    23ca:	f44f 4104 	mov.w	r1, #33792	; 0x8400
    23ce:	f2c4 0101 	movt	r1, #16385	; 0x4001
    23d2:	4288      	cmp	r0, r1
    23d4:	f040 8310 	bne.w	29f8 <sysclk_enable_peripheral_clock+0x6dc>
    23d8:	e17b      	b.n	26d2 <sysclk_enable_peripheral_clock+0x3b6>
    23da:	f44f 4244 	mov.w	r2, #50176	; 0xc400
    23de:	f2c4 0201 	movt	r2, #16385	; 0x4001
    23e2:	4290      	cmp	r0, r2
    23e4:	f000 8185 	beq.w	26f2 <sysclk_enable_peripheral_clock+0x3d6>
    23e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    23ec:	f2c4 0102 	movt	r1, #16386	; 0x4002
    23f0:	4288      	cmp	r0, r1
    23f2:	f040 8301 	bne.w	29f8 <sysclk_enable_peripheral_clock+0x6dc>
    23f6:	e184      	b.n	2702 <sysclk_enable_peripheral_clock+0x3e6>
    23f8:	f04f 0200 	mov.w	r2, #0
    23fc:	f2c4 0204 	movt	r2, #16388	; 0x4004
    2400:	4290      	cmp	r0, r2
    2402:	f000 81e2 	beq.w	27ca <sysclk_enable_peripheral_clock+0x4ae>
    2406:	f04f 0100 	mov.w	r1, #0
    240a:	f2c4 0104 	movt	r1, #16388	; 0x4004
    240e:	4288      	cmp	r0, r1
    2410:	d823      	bhi.n	245a <sysclk_enable_peripheral_clock+0x13e>
    2412:	f04f 0300 	mov.w	r3, #0
    2416:	f2c4 0303 	movt	r3, #16387	; 0x4003
    241a:	4298      	cmp	r0, r3
    241c:	f000 81b0 	beq.w	2780 <sysclk_enable_peripheral_clock+0x464>
    2420:	f04f 0200 	mov.w	r2, #0
    2424:	f2c4 0203 	movt	r2, #16387	; 0x4003
    2428:	4290      	cmp	r0, r2
    242a:	d807      	bhi.n	243c <sysclk_enable_peripheral_clock+0x120>
    242c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    2430:	f2c4 0102 	movt	r1, #16386	; 0x4002
    2434:	4288      	cmp	r0, r1
    2436:	f040 82df 	bne.w	29f8 <sysclk_enable_peripheral_clock+0x6dc>
    243a:	e18c      	b.n	2756 <sysclk_enable_peripheral_clock+0x43a>
    243c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2440:	f2c4 0203 	movt	r2, #16387	; 0x4003
    2444:	4290      	cmp	r0, r2
    2446:	f000 81b0 	beq.w	27aa <sysclk_enable_peripheral_clock+0x48e>
    244a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    244e:	f2c4 0103 	movt	r1, #16387	; 0x4003
    2452:	4288      	cmp	r0, r1
    2454:	f040 82d0 	bne.w	29f8 <sysclk_enable_peripheral_clock+0x6dc>
    2458:	e1af      	b.n	27ba <sysclk_enable_peripheral_clock+0x49e>
    245a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    245e:	f2c4 0306 	movt	r3, #16390	; 0x4006
    2462:	4298      	cmp	r0, r3
    2464:	f000 81c9 	beq.w	27fa <sysclk_enable_peripheral_clock+0x4de>
    2468:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    246c:	f2c4 0106 	movt	r1, #16390	; 0x4006
    2470:	4288      	cmp	r0, r1
    2472:	d80e      	bhi.n	2492 <sysclk_enable_peripheral_clock+0x176>
    2474:	f04f 0200 	mov.w	r2, #0
    2478:	f2c4 0206 	movt	r2, #16390	; 0x4006
    247c:	4290      	cmp	r0, r2
    247e:	f000 81ac 	beq.w	27da <sysclk_enable_peripheral_clock+0x4be>
    2482:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    2486:	f2c4 0306 	movt	r3, #16390	; 0x4006
    248a:	4298      	cmp	r0, r3
    248c:	f040 82b4 	bne.w	29f8 <sysclk_enable_peripheral_clock+0x6dc>
    2490:	e1ab      	b.n	27ea <sysclk_enable_peripheral_clock+0x4ce>
    2492:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    2496:	f2c4 0306 	movt	r3, #16390	; 0x4006
    249a:	4298      	cmp	r0, r3
    249c:	f000 81b5 	beq.w	280a <sysclk_enable_peripheral_clock+0x4ee>
    24a0:	f04f 0100 	mov.w	r1, #0
    24a4:	f2c4 0107 	movt	r1, #16391	; 0x4007
    24a8:	4288      	cmp	r0, r1
    24aa:	f040 82a5 	bne.w	29f8 <sysclk_enable_peripheral_clock+0x6dc>
    24ae:	e1b4      	b.n	281a <sysclk_enable_peripheral_clock+0x4fe>
    24b0:	f04f 0100 	mov.w	r1, #0
    24b4:	f2c4 010e 	movt	r1, #16398	; 0x400e
    24b8:	4288      	cmp	r0, r1
    24ba:	f000 8232 	beq.w	2922 <sysclk_enable_peripheral_clock+0x606>
    24be:	f04f 0300 	mov.w	r3, #0
    24c2:	f2c4 030e 	movt	r3, #16398	; 0x400e
    24c6:	4298      	cmp	r0, r3
    24c8:	d85b      	bhi.n	2582 <sysclk_enable_peripheral_clock+0x266>
    24ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    24ce:	f2c4 020a 	movt	r2, #16394	; 0x400a
    24d2:	4290      	cmp	r0, r2
    24d4:	f000 81e2 	beq.w	289c <sysclk_enable_peripheral_clock+0x580>
    24d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    24dc:	f2c4 010a 	movt	r1, #16394	; 0x400a
    24e0:	4288      	cmp	r0, r1
    24e2:	d823      	bhi.n	252c <sysclk_enable_peripheral_clock+0x210>
    24e4:	f04f 0300 	mov.w	r3, #0
    24e8:	f2c4 0308 	movt	r3, #16392	; 0x4008
    24ec:	4298      	cmp	r0, r3
    24ee:	f000 81ac 	beq.w	284a <sysclk_enable_peripheral_clock+0x52e>
    24f2:	f04f 0200 	mov.w	r2, #0
    24f6:	f2c4 0208 	movt	r2, #16392	; 0x4008
    24fa:	4290      	cmp	r0, r2
    24fc:	d807      	bhi.n	250e <sysclk_enable_peripheral_clock+0x1f2>
    24fe:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    2502:	f2c4 0107 	movt	r1, #16391	; 0x4007
    2506:	4288      	cmp	r0, r1
    2508:	f040 8276 	bne.w	29f8 <sysclk_enable_peripheral_clock+0x6dc>
    250c:	e195      	b.n	283a <sysclk_enable_peripheral_clock+0x51e>
    250e:	f04f 0200 	mov.w	r2, #0
    2512:	f2c4 020a 	movt	r2, #16394	; 0x400a
    2516:	4290      	cmp	r0, r2
    2518:	f000 819f 	beq.w	285a <sysclk_enable_peripheral_clock+0x53e>
    251c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    2520:	f2c4 010a 	movt	r1, #16394	; 0x400a
    2524:	4288      	cmp	r0, r1
    2526:	f040 8267 	bne.w	29f8 <sysclk_enable_peripheral_clock+0x6dc>
    252a:	e1a6      	b.n	287a <sysclk_enable_peripheral_clock+0x55e>
    252c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    2530:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2534:	4298      	cmp	r0, r3
    2536:	f000 81db 	beq.w	28f0 <sysclk_enable_peripheral_clock+0x5d4>
    253a:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    253e:	f2c4 010a 	movt	r1, #16394	; 0x400a
    2542:	4288      	cmp	r0, r1
    2544:	d80e      	bhi.n	2564 <sysclk_enable_peripheral_clock+0x248>
    2546:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    254a:	f2c4 020a 	movt	r2, #16394	; 0x400a
    254e:	4290      	cmp	r0, r2
    2550:	f000 81ac 	beq.w	28ac <sysclk_enable_peripheral_clock+0x590>
    2554:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    2558:	f2c4 030a 	movt	r3, #16394	; 0x400a
    255c:	4298      	cmp	r0, r3
    255e:	f040 824b 	bne.w	29f8 <sysclk_enable_peripheral_clock+0x6dc>
    2562:	e1b4      	b.n	28ce <sysclk_enable_peripheral_clock+0x5b2>
    2564:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
    2568:	f2c4 010a 	movt	r1, #16394	; 0x400a
    256c:	4288      	cmp	r0, r1
    256e:	f000 81d0 	beq.w	2912 <sysclk_enable_peripheral_clock+0x5f6>
    2572:	f04f 0300 	mov.w	r3, #0
    2576:	f2c4 030b 	movt	r3, #16395	; 0x400b
    257a:	4298      	cmp	r0, r3
    257c:	f040 823c 	bne.w	29f8 <sysclk_enable_peripheral_clock+0x6dc>
    2580:	e05b      	b.n	263a <sysclk_enable_peripheral_clock+0x31e>
    2582:	f04f 0300 	mov.w	r3, #0
    2586:	f2c4 030f 	movt	r3, #16399	; 0x400f
    258a:	4298      	cmp	r0, r3
    258c:	f000 81fa 	beq.w	2984 <sysclk_enable_peripheral_clock+0x668>
    2590:	f04f 0200 	mov.w	r2, #0
    2594:	f2c4 020f 	movt	r2, #16399	; 0x400f
    2598:	4290      	cmp	r0, r2
    259a:	d823      	bhi.n	25e4 <sysclk_enable_peripheral_clock+0x2c8>
    259c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    25a0:	f2c4 010e 	movt	r1, #16398	; 0x400e
    25a4:	4288      	cmp	r0, r1
    25a6:	f000 81d0 	beq.w	294a <sysclk_enable_peripheral_clock+0x62e>
    25aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
    25ae:	f2c4 030e 	movt	r3, #16398	; 0x400e
    25b2:	4298      	cmp	r0, r3
    25b4:	d807      	bhi.n	25c6 <sysclk_enable_peripheral_clock+0x2aa>
    25b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    25ba:	f2c4 020e 	movt	r2, #16398	; 0x400e
    25be:	4290      	cmp	r0, r2
    25c0:	f040 821a 	bne.w	29f8 <sysclk_enable_peripheral_clock+0x6dc>
    25c4:	e1b7      	b.n	2936 <sysclk_enable_peripheral_clock+0x61a>
    25c6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    25ca:	f2c4 010e 	movt	r1, #16398	; 0x400e
    25ce:	4288      	cmp	r0, r1
    25d0:	f000 81c5 	beq.w	295e <sysclk_enable_peripheral_clock+0x642>
    25d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    25d8:	f2c4 020e 	movt	r2, #16398	; 0x400e
    25dc:	4290      	cmp	r0, r2
    25de:	f040 820b 	bne.w	29f8 <sysclk_enable_peripheral_clock+0x6dc>
    25e2:	e1c6      	b.n	2972 <sysclk_enable_peripheral_clock+0x656>
    25e4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    25e8:	f2c4 010f 	movt	r1, #16399	; 0x400f
    25ec:	4288      	cmp	r0, r1
    25ee:	f000 81e7 	beq.w	29c0 <sysclk_enable_peripheral_clock+0x6a4>
    25f2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    25f6:	f2c4 020f 	movt	r2, #16399	; 0x400f
    25fa:	4290      	cmp	r0, r2
    25fc:	d80e      	bhi.n	261c <sysclk_enable_peripheral_clock+0x300>
    25fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2602:	f2c4 030f 	movt	r3, #16399	; 0x400f
    2606:	4298      	cmp	r0, r3
    2608:	f000 81c6 	beq.w	2998 <sysclk_enable_peripheral_clock+0x67c>
    260c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2610:	f2c4 010f 	movt	r1, #16399	; 0x400f
    2614:	4288      	cmp	r0, r1
    2616:	f040 81ef 	bne.w	29f8 <sysclk_enable_peripheral_clock+0x6dc>
    261a:	e1c7      	b.n	29ac <sysclk_enable_peripheral_clock+0x690>
    261c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    2620:	f2c4 010f 	movt	r1, #16399	; 0x400f
    2624:	4288      	cmp	r0, r1
    2626:	f000 81d5 	beq.w	29d4 <sysclk_enable_peripheral_clock+0x6b8>
    262a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
    262e:	f2c4 020f 	movt	r2, #16399	; 0x400f
    2632:	4290      	cmp	r0, r2
    2634:	f040 81e0 	bne.w	29f8 <sysclk_enable_peripheral_clock+0x6dc>
    2638:	e1d6      	b.n	29e8 <sysclk_enable_peripheral_clock+0x6cc>
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    263a:	f04f 0001 	mov.w	r0, #1
    263e:	f04f 0109 	mov.w	r1, #9
    2642:	f641 52d1 	movw	r2, #7633	; 0x1dd1
    2646:	f2c0 0200 	movt	r2, #0
    264a:	4790      	blx	r2
    264c:	bd08      	pop	{r3, pc}
	case AESA_ADDR:
		sysclk_enable_hsb_module(SYSCLK_AESA_HSB);
		break;

	case IISC_ADDR:
		sysclk_enable_pba_module(SYSCLK_IISC);
    264e:	f04f 0000 	mov.w	r0, #0
    2652:	f641 62a5 	movw	r2, #7845	; 0x1ea5
    2656:	f2c0 0200 	movt	r2, #0
    265a:	4790      	blx	r2
		break;
    265c:	bd08      	pop	{r3, pc}

	case SPI_ADDR:
		sysclk_enable_pba_module(SYSCLK_SPI);
    265e:	f04f 0001 	mov.w	r0, #1
    2662:	f641 61a5 	movw	r1, #7845	; 0x1ea5
    2666:	f2c0 0100 	movt	r1, #0
    266a:	4788      	blx	r1
		break;
    266c:	bd08      	pop	{r3, pc}

	case TC0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TC0);
    266e:	f04f 0002 	mov.w	r0, #2
    2672:	f641 63a5 	movw	r3, #7845	; 0x1ea5
    2676:	f2c0 0300 	movt	r3, #0
    267a:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    267c:	f04f 0000 	mov.w	r0, #0
    2680:	f2c4 000e 	movt	r0, #16398	; 0x400e
    2684:	6c01      	ldr	r1, [r0, #64]	; 0x40
	temp_mask |= mask;
    2686:	f041 0355 	orr.w	r3, r1, #85	; 0x55
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    268a:	f04f 0240 	mov.w	r2, #64	; 0x40
    268e:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    2692:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    2694:	6403      	str	r3, [r0, #64]	; 0x40
    2696:	bd08      	pop	{r3, pc}
			| PBA_DIVMASK_TIMER_CLOCK5
			);
		break;

	case TC1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TC1);
    2698:	f04f 0003 	mov.w	r0, #3
    269c:	f641 62a5 	movw	r2, #7845	; 0x1ea5
    26a0:	f2c0 0200 	movt	r2, #0
    26a4:	4790      	blx	r2
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    26a6:	f04f 0000 	mov.w	r0, #0
    26aa:	f2c4 000e 	movt	r0, #16398	; 0x400e
    26ae:	6c03      	ldr	r3, [r0, #64]	; 0x40
	temp_mask |= mask;
    26b0:	f043 0155 	orr.w	r1, r3, #85	; 0x55
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    26b4:	f04f 0240 	mov.w	r2, #64	; 0x40
    26b8:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    26bc:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    26be:	6401      	str	r1, [r0, #64]	; 0x40
    26c0:	bd08      	pop	{r3, pc}
			| PBA_DIVMASK_TIMER_CLOCK5
			);
		break;

	case TWIM0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM0);
    26c2:	f04f 0004 	mov.w	r0, #4
    26c6:	f641 63a5 	movw	r3, #7845	; 0x1ea5
    26ca:	f2c0 0300 	movt	r3, #0
    26ce:	4798      	blx	r3
		break;
    26d0:	bd08      	pop	{r3, pc}

	case TWIS0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIS0);
    26d2:	f04f 0005 	mov.w	r0, #5
    26d6:	f641 63a5 	movw	r3, #7845	; 0x1ea5
    26da:	f2c0 0300 	movt	r3, #0
    26de:	4798      	blx	r3
		break;
    26e0:	bd08      	pop	{r3, pc}

	case TWIM1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM1);
    26e2:	f04f 0006 	mov.w	r0, #6
    26e6:	f641 61a5 	movw	r1, #7845	; 0x1ea5
    26ea:	f2c0 0100 	movt	r1, #0
    26ee:	4788      	blx	r1
		break;
    26f0:	bd08      	pop	{r3, pc}

	case TWIS1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIS1);
    26f2:	f04f 0007 	mov.w	r0, #7
    26f6:	f641 62a5 	movw	r2, #7845	; 0x1ea5
    26fa:	f2c0 0200 	movt	r2, #0
    26fe:	4790      	blx	r2
		break;
    2700:	bd08      	pop	{r3, pc}

	case USART0_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART0);
    2702:	f04f 0008 	mov.w	r0, #8
    2706:	f641 63a5 	movw	r3, #7845	; 0x1ea5
    270a:	f2c0 0300 	movt	r3, #0
    270e:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    2710:	f04f 0000 	mov.w	r0, #0
    2714:	f2c4 000e 	movt	r0, #16398	; 0x400e
    2718:	6c02      	ldr	r2, [r0, #64]	; 0x40
	temp_mask |= mask;
    271a:	f042 0104 	orr.w	r1, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    271e:	f04f 0340 	mov.w	r3, #64	; 0x40
    2722:	f6ca 2300 	movt	r3, #43520	; 0xaa00
    2726:	6583      	str	r3, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    2728:	6401      	str	r1, [r0, #64]	; 0x40
    272a:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART1_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART1);
    272c:	f04f 0009 	mov.w	r0, #9
    2730:	f641 63a5 	movw	r3, #7845	; 0x1ea5
    2734:	f2c0 0300 	movt	r3, #0
    2738:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    273a:	f04f 0000 	mov.w	r0, #0
    273e:	f2c4 000e 	movt	r0, #16398	; 0x400e
    2742:	6c01      	ldr	r1, [r0, #64]	; 0x40
	temp_mask |= mask;
    2744:	f041 0304 	orr.w	r3, r1, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    2748:	f04f 0240 	mov.w	r2, #64	; 0x40
    274c:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    2750:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    2752:	6403      	str	r3, [r0, #64]	; 0x40
    2754:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART2_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART2);
    2756:	f04f 000a 	mov.w	r0, #10
    275a:	f641 63a5 	movw	r3, #7845	; 0x1ea5
    275e:	f2c0 0300 	movt	r3, #0
    2762:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    2764:	f04f 0000 	mov.w	r0, #0
    2768:	f2c4 000e 	movt	r0, #16398	; 0x400e
    276c:	6c02      	ldr	r2, [r0, #64]	; 0x40
	temp_mask |= mask;
    276e:	f042 0104 	orr.w	r1, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    2772:	f04f 0340 	mov.w	r3, #64	; 0x40
    2776:	f6ca 2300 	movt	r3, #43520	; 0xaa00
    277a:	6583      	str	r3, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    277c:	6401      	str	r1, [r0, #64]	; 0x40
    277e:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART3_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART3);
    2780:	f04f 000b 	mov.w	r0, #11
    2784:	f641 61a5 	movw	r1, #7845	; 0x1ea5
    2788:	f2c0 0100 	movt	r1, #0
    278c:	4788      	blx	r1
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    278e:	f04f 0000 	mov.w	r0, #0
    2792:	f2c4 000e 	movt	r0, #16398	; 0x400e
    2796:	6c03      	ldr	r3, [r0, #64]	; 0x40
	temp_mask |= mask;
    2798:	f043 0104 	orr.w	r1, r3, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    279c:	f04f 0240 	mov.w	r2, #64	; 0x40
    27a0:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    27a4:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    27a6:	6401      	str	r1, [r0, #64]	; 0x40
    27a8:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case ADCIFE_ADDR:
		sysclk_enable_pba_module(SYSCLK_ADCIFE);
    27aa:	f04f 000c 	mov.w	r0, #12
    27ae:	f641 62a5 	movw	r2, #7845	; 0x1ea5
    27b2:	f2c0 0200 	movt	r2, #0
    27b6:	4790      	blx	r2
		break;
    27b8:	bd08      	pop	{r3, pc}

	case DACC_ADDR:
		sysclk_enable_pba_module(SYSCLK_DACC);
    27ba:	f04f 000d 	mov.w	r0, #13
    27be:	f641 63a5 	movw	r3, #7845	; 0x1ea5
    27c2:	f2c0 0300 	movt	r3, #0
    27c6:	4798      	blx	r3
		break;
    27c8:	bd08      	pop	{r3, pc}

	case ACIFC_ADDR:
		sysclk_enable_pba_module(SYSCLK_ACIFC);
    27ca:	f04f 000e 	mov.w	r0, #14
    27ce:	f641 62a5 	movw	r2, #7845	; 0x1ea5
    27d2:	f2c0 0200 	movt	r2, #0
    27d6:	4790      	blx	r2
		break;
    27d8:	bd08      	pop	{r3, pc}

	case GLOC_ADDR:
		sysclk_enable_pba_module(SYSCLK_GLOC);
    27da:	f04f 000f 	mov.w	r0, #15
    27de:	f641 62a5 	movw	r2, #7845	; 0x1ea5
    27e2:	f2c0 0200 	movt	r2, #0
    27e6:	4790      	blx	r2
		break;
    27e8:	bd08      	pop	{r3, pc}

	case ABDACB_ADDR:
		sysclk_enable_pba_module(SYSCLK_ABDACB);
    27ea:	f04f 0010 	mov.w	r0, #16
    27ee:	f641 61a5 	movw	r1, #7845	; 0x1ea5
    27f2:	f2c0 0100 	movt	r1, #0
    27f6:	4788      	blx	r1
		break;
    27f8:	bd08      	pop	{r3, pc}

	case TRNG_ADDR:
		sysclk_enable_pba_module(SYSCLK_TRNG);
    27fa:	f04f 0011 	mov.w	r0, #17
    27fe:	f641 61a5 	movw	r1, #7845	; 0x1ea5
    2802:	f2c0 0100 	movt	r1, #0
    2806:	4788      	blx	r1
		break;
    2808:	bd08      	pop	{r3, pc}

	case PARC_ADDR:
		sysclk_enable_pba_module(SYSCLK_PARC);
    280a:	f04f 0012 	mov.w	r0, #18
    280e:	f641 63a5 	movw	r3, #7845	; 0x1ea5
    2812:	f2c0 0300 	movt	r3, #0
    2816:	4798      	blx	r3
		break;
    2818:	bd08      	pop	{r3, pc}

	case CATB_ADDR:
		sysclk_enable_pba_module(SYSCLK_CATB);
    281a:	f04f 0013 	mov.w	r0, #19
    281e:	f641 62a5 	movw	r2, #7845	; 0x1ea5
    2822:	f2c0 0200 	movt	r2, #0
    2826:	4790      	blx	r2
		break;
    2828:	bd08      	pop	{r3, pc}

	case TWIM2_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM2);
    282a:	f04f 0015 	mov.w	r0, #21
    282e:	f641 61a5 	movw	r1, #7845	; 0x1ea5
    2832:	f2c0 0100 	movt	r1, #0
    2836:	4788      	blx	r1
		break;
    2838:	bd08      	pop	{r3, pc}

	case TWIM3_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM3);
    283a:	f04f 0016 	mov.w	r0, #22
    283e:	f641 63a5 	movw	r3, #7845	; 0x1ea5
    2842:	f2c0 0300 	movt	r3, #0
    2846:	4798      	blx	r3
		break;
    2848:	bd08      	pop	{r3, pc}

	case LCDCA_ADDR:
		sysclk_enable_pba_module(SYSCLK_LCDCA);
    284a:	f04f 0017 	mov.w	r0, #23
    284e:	f641 62a5 	movw	r2, #7845	; 0x1ea5
    2852:	f2c0 0200 	movt	r2, #0
    2856:	4790      	blx	r2
		break;
    2858:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    285a:	f04f 0001 	mov.w	r0, #1
    285e:	4601      	mov	r1, r0
    2860:	f641 53d1 	movw	r3, #7633	; 0x1dd1
    2864:	f2c0 0300 	movt	r3, #0
    2868:	4798      	blx	r3

	case HFLASHC_ADDR:
		sysclk_enable_hsb_module(SYSCLK_HFLASHC_DATA);
		sysclk_enable_pbb_module(SYSCLK_HFLASHC_REGS);
    286a:	f04f 0000 	mov.w	r0, #0
    286e:	f641 7165 	movw	r1, #8037	; 0x1f65
    2872:	f2c0 0100 	movt	r1, #0
    2876:	4788      	blx	r1
		break;
    2878:	bd08      	pop	{r3, pc}
    287a:	f04f 0001 	mov.w	r0, #1
    287e:	f04f 0102 	mov.w	r1, #2
    2882:	f641 53d1 	movw	r3, #7633	; 0x1dd1
    2886:	f2c0 0300 	movt	r3, #0
    288a:	4798      	blx	r3

	case HCACHE_ADDR:
		sysclk_enable_hsb_module(SYSCLK_HRAMC1_DATA);
		sysclk_enable_pbb_module(SYSCLK_HRAMC1_REGS);
    288c:	f04f 0001 	mov.w	r0, #1
    2890:	f641 7265 	movw	r2, #8037	; 0x1f65
    2894:	f2c0 0200 	movt	r2, #0
    2898:	4790      	blx	r2
		break;
    289a:	bd08      	pop	{r3, pc}

	case HMATRIX_ADDR:
		sysclk_enable_pbb_module(SYSCLK_HMATRIX);
    289c:	f04f 0002 	mov.w	r0, #2
    28a0:	f641 7165 	movw	r1, #8037	; 0x1f65
    28a4:	f2c0 0100 	movt	r1, #0
    28a8:	4788      	blx	r1
		break;
    28aa:	bd08      	pop	{r3, pc}
    28ac:	f04f 0001 	mov.w	r0, #1
    28b0:	f04f 0100 	mov.w	r1, #0
    28b4:	f641 53d1 	movw	r3, #7633	; 0x1dd1
    28b8:	f2c0 0300 	movt	r3, #0
    28bc:	4798      	blx	r3

	case PDCA_ADDR:
		sysclk_enable_hsb_module(SYSCLK_PDCA_HSB);
		sysclk_enable_pbb_module(SYSCLK_PDCA_PB);
    28be:	f04f 0003 	mov.w	r0, #3
    28c2:	f641 7265 	movw	r2, #8037	; 0x1f65
    28c6:	f2c0 0200 	movt	r2, #0
    28ca:	4790      	blx	r2
		break;
    28cc:	bd08      	pop	{r3, pc}
    28ce:	f04f 0001 	mov.w	r0, #1
    28d2:	f04f 0104 	mov.w	r1, #4
    28d6:	f641 52d1 	movw	r2, #7633	; 0x1dd1
    28da:	f2c0 0200 	movt	r2, #0
    28de:	4790      	blx	r2

	case CRCCU_ADDR:
		sysclk_enable_hsb_module(SYSCLK_CRCCU_DATA);
		sysclk_enable_pbb_module(SYSCLK_CRCCU_REGS);
    28e0:	f04f 0004 	mov.w	r0, #4
    28e4:	f641 7165 	movw	r1, #8037	; 0x1f65
    28e8:	f2c0 0100 	movt	r1, #0
    28ec:	4788      	blx	r1
		break;
    28ee:	bd08      	pop	{r3, pc}
    28f0:	f04f 0001 	mov.w	r0, #1
    28f4:	f04f 0103 	mov.w	r1, #3
    28f8:	f641 53d1 	movw	r3, #7633	; 0x1dd1
    28fc:	f2c0 0300 	movt	r3, #0
    2900:	4798      	blx	r3

	case USBC_ADDR:
		sysclk_enable_hsb_module(SYSCLK_USBC_DATA);
		sysclk_enable_pbb_module(SYSCLK_USBC_REGS);
    2902:	f04f 0005 	mov.w	r0, #5
    2906:	f641 7265 	movw	r2, #8037	; 0x1f65
    290a:	f2c0 0200 	movt	r2, #0
    290e:	4790      	blx	r2
		break;
    2910:	bd08      	pop	{r3, pc}

	case PEVC_ADDR:
		sysclk_enable_pbb_module(SYSCLK_PEVC);
    2912:	f04f 0006 	mov.w	r0, #6
    2916:	f641 7165 	movw	r1, #8037	; 0x1f65
    291a:	f2c0 0100 	movt	r1, #0
    291e:	4788      	blx	r1
		break;
    2920:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbc_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_PBC, module_index);
    2922:	f04f 0004 	mov.w	r0, #4
    2926:	f04f 0100 	mov.w	r1, #0
    292a:	f641 53d1 	movw	r3, #7633	; 0x1dd1
    292e:	f2c0 0300 	movt	r3, #0
    2932:	4798      	blx	r3
    2934:	bd08      	pop	{r3, pc}
    2936:	f04f 0004 	mov.w	r0, #4
    293a:	f04f 0101 	mov.w	r1, #1
    293e:	f641 53d1 	movw	r3, #7633	; 0x1dd1
    2942:	f2c0 0300 	movt	r3, #0
    2946:	4798      	blx	r3
    2948:	bd08      	pop	{r3, pc}
    294a:	f04f 0004 	mov.w	r0, #4
    294e:	f04f 0102 	mov.w	r1, #2
    2952:	f641 53d1 	movw	r3, #7633	; 0x1dd1
    2956:	f2c0 0300 	movt	r3, #0
    295a:	4798      	blx	r3
    295c:	bd08      	pop	{r3, pc}
    295e:	f04f 0004 	mov.w	r0, #4
    2962:	f04f 0103 	mov.w	r1, #3
    2966:	f641 52d1 	movw	r2, #7633	; 0x1dd1
    296a:	f2c0 0200 	movt	r2, #0
    296e:	4790      	blx	r2
    2970:	bd08      	pop	{r3, pc}
    2972:	f04f 0004 	mov.w	r0, #4
    2976:	4601      	mov	r1, r0
    2978:	f641 53d1 	movw	r3, #7633	; 0x1dd1
    297c:	f2c0 0300 	movt	r3, #0
    2980:	4798      	blx	r3
    2982:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbd_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_PBD, module_index);
    2984:	f04f 0005 	mov.w	r0, #5
    2988:	f04f 0100 	mov.w	r1, #0
    298c:	f641 52d1 	movw	r2, #7633	; 0x1dd1
    2990:	f2c0 0200 	movt	r2, #0
    2994:	4790      	blx	r2
    2996:	bd08      	pop	{r3, pc}
    2998:	f04f 0005 	mov.w	r0, #5
    299c:	f04f 0101 	mov.w	r1, #1
    29a0:	f641 53d1 	movw	r3, #7633	; 0x1dd1
    29a4:	f2c0 0300 	movt	r3, #0
    29a8:	4798      	blx	r3
    29aa:	bd08      	pop	{r3, pc}
    29ac:	f04f 0005 	mov.w	r0, #5
    29b0:	f04f 0102 	mov.w	r1, #2
    29b4:	f641 52d1 	movw	r2, #7633	; 0x1dd1
    29b8:	f2c0 0200 	movt	r2, #0
    29bc:	4790      	blx	r2
    29be:	bd08      	pop	{r3, pc}
    29c0:	f04f 0005 	mov.w	r0, #5
    29c4:	f04f 0103 	mov.w	r1, #3
    29c8:	f641 53d1 	movw	r3, #7633	; 0x1dd1
    29cc:	f2c0 0300 	movt	r3, #0
    29d0:	4798      	blx	r3
    29d2:	bd08      	pop	{r3, pc}
    29d4:	f04f 0005 	mov.w	r0, #5
    29d8:	f04f 0104 	mov.w	r1, #4
    29dc:	f641 52d1 	movw	r2, #7633	; 0x1dd1
    29e0:	f2c0 0200 	movt	r2, #0
    29e4:	4790      	blx	r2
    29e6:	bd08      	pop	{r3, pc}
    29e8:	f04f 0005 	mov.w	r0, #5
    29ec:	4601      	mov	r1, r0
    29ee:	f641 53d1 	movw	r3, #7633	; 0x1dd1
    29f2:	f2c0 0300 	movt	r3, #0
    29f6:	4798      	blx	r3
    29f8:	bd08      	pop	{r3, pc}
    29fa:	bf00      	nop

000029fc <sysclk_disable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be disabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
    29fc:	b508      	push	{r3, lr}
	switch ((uintptr_t)module) {
    29fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2a02:	f2c4 0307 	movt	r3, #16391	; 0x4007
    2a06:	4298      	cmp	r0, r3
    2a08:	f000 8231 	beq.w	2e6e <sysclk_disable_peripheral_clock+0x472>
    2a0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2a10:	f2c4 0107 	movt	r1, #16391	; 0x4007
    2a14:	4288      	cmp	r0, r1
    2a16:	f200 80bb 	bhi.w	2b90 <sysclk_disable_peripheral_clock+0x194>
    2a1a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2a1e:	f2c4 0202 	movt	r2, #16386	; 0x4002
    2a22:	4290      	cmp	r0, r2
    2a24:	f000 81cb 	beq.w	2dbe <sysclk_disable_peripheral_clock+0x3c2>
    2a28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2a2c:	f2c4 0302 	movt	r3, #16386	; 0x4002
    2a30:	4298      	cmp	r0, r3
    2a32:	d851      	bhi.n	2ad8 <sysclk_disable_peripheral_clock+0xdc>
    2a34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2a38:	f2c4 0101 	movt	r1, #16385	; 0x4001
    2a3c:	4288      	cmp	r0, r1
    2a3e:	f000 8196 	beq.w	2d6e <sysclk_disable_peripheral_clock+0x372>
    2a42:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2a46:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2a4a:	4290      	cmp	r0, r2
    2a4c:	d820      	bhi.n	2a90 <sysclk_disable_peripheral_clock+0x94>
    2a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2a52:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2a56:	4298      	cmp	r0, r3
    2a58:	f000 8171 	beq.w	2d3e <sysclk_disable_peripheral_clock+0x342>
    2a5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2a60:	f2c4 0100 	movt	r1, #16384	; 0x4000
    2a64:	4288      	cmp	r0, r1
    2a66:	d804      	bhi.n	2a72 <sysclk_disable_peripheral_clock+0x76>
    2a68:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    2a6c:	f040 82f3 	bne.w	3056 <sysclk_disable_peripheral_clock+0x65a>
    2a70:	e15d      	b.n	2d2e <sysclk_disable_peripheral_clock+0x332>
    2a72:	f04f 0300 	mov.w	r3, #0
    2a76:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2a7a:	4298      	cmp	r0, r3
    2a7c:	f000 8167 	beq.w	2d4e <sysclk_disable_peripheral_clock+0x352>
    2a80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    2a84:	f2c4 0101 	movt	r1, #16385	; 0x4001
    2a88:	4288      	cmp	r0, r1
    2a8a:	f040 82e4 	bne.w	3056 <sysclk_disable_peripheral_clock+0x65a>
    2a8e:	e166      	b.n	2d5e <sysclk_disable_peripheral_clock+0x362>
    2a90:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    2a94:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2a98:	4290      	cmp	r0, r2
    2a9a:	f000 8178 	beq.w	2d8e <sysclk_disable_peripheral_clock+0x392>
    2a9e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    2aa2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2aa6:	4298      	cmp	r0, r3
    2aa8:	d807      	bhi.n	2aba <sysclk_disable_peripheral_clock+0xbe>
    2aaa:	f44f 4104 	mov.w	r1, #33792	; 0x8400
    2aae:	f2c4 0101 	movt	r1, #16385	; 0x4001
    2ab2:	4288      	cmp	r0, r1
    2ab4:	f040 82cf 	bne.w	3056 <sysclk_disable_peripheral_clock+0x65a>
    2ab8:	e161      	b.n	2d7e <sysclk_disable_peripheral_clock+0x382>
    2aba:	f44f 4344 	mov.w	r3, #50176	; 0xc400
    2abe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2ac2:	4298      	cmp	r0, r3
    2ac4:	f000 816b 	beq.w	2d9e <sysclk_disable_peripheral_clock+0x3a2>
    2ac8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    2acc:	f2c4 0102 	movt	r1, #16386	; 0x4002
    2ad0:	4288      	cmp	r0, r1
    2ad2:	f040 82c0 	bne.w	3056 <sysclk_disable_peripheral_clock+0x65a>
    2ad6:	e16a      	b.n	2dae <sysclk_disable_peripheral_clock+0x3b2>
    2ad8:	f04f 0300 	mov.w	r3, #0
    2adc:	f2c4 0304 	movt	r3, #16388	; 0x4004
    2ae0:	4298      	cmp	r0, r3
    2ae2:	f000 8194 	beq.w	2e0e <sysclk_disable_peripheral_clock+0x412>
    2ae6:	f04f 0100 	mov.w	r1, #0
    2aea:	f2c4 0104 	movt	r1, #16388	; 0x4004
    2aee:	4288      	cmp	r0, r1
    2af0:	d823      	bhi.n	2b3a <sysclk_disable_peripheral_clock+0x13e>
    2af2:	f04f 0200 	mov.w	r2, #0
    2af6:	f2c4 0203 	movt	r2, #16387	; 0x4003
    2afa:	4290      	cmp	r0, r2
    2afc:	f000 816f 	beq.w	2dde <sysclk_disable_peripheral_clock+0x3e2>
    2b00:	f04f 0300 	mov.w	r3, #0
    2b04:	f2c4 0303 	movt	r3, #16387	; 0x4003
    2b08:	4298      	cmp	r0, r3
    2b0a:	d807      	bhi.n	2b1c <sysclk_disable_peripheral_clock+0x120>
    2b0c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    2b10:	f2c4 0102 	movt	r1, #16386	; 0x4002
    2b14:	4288      	cmp	r0, r1
    2b16:	f040 829e 	bne.w	3056 <sysclk_disable_peripheral_clock+0x65a>
    2b1a:	e158      	b.n	2dce <sysclk_disable_peripheral_clock+0x3d2>
    2b1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2b20:	f2c4 0303 	movt	r3, #16387	; 0x4003
    2b24:	4298      	cmp	r0, r3
    2b26:	f000 8162 	beq.w	2dee <sysclk_disable_peripheral_clock+0x3f2>
    2b2a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    2b2e:	f2c4 0103 	movt	r1, #16387	; 0x4003
    2b32:	4288      	cmp	r0, r1
    2b34:	f040 828f 	bne.w	3056 <sysclk_disable_peripheral_clock+0x65a>
    2b38:	e161      	b.n	2dfe <sysclk_disable_peripheral_clock+0x402>
    2b3a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2b3e:	f2c4 0206 	movt	r2, #16390	; 0x4006
    2b42:	4290      	cmp	r0, r2
    2b44:	f000 817b 	beq.w	2e3e <sysclk_disable_peripheral_clock+0x442>
    2b48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2b4c:	f2c4 0306 	movt	r3, #16390	; 0x4006
    2b50:	4298      	cmp	r0, r3
    2b52:	d80e      	bhi.n	2b72 <sysclk_disable_peripheral_clock+0x176>
    2b54:	f04f 0100 	mov.w	r1, #0
    2b58:	f2c4 0106 	movt	r1, #16390	; 0x4006
    2b5c:	4288      	cmp	r0, r1
    2b5e:	f000 815e 	beq.w	2e1e <sysclk_disable_peripheral_clock+0x422>
    2b62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2b66:	f2c4 0206 	movt	r2, #16390	; 0x4006
    2b6a:	4290      	cmp	r0, r2
    2b6c:	f040 8273 	bne.w	3056 <sysclk_disable_peripheral_clock+0x65a>
    2b70:	e15d      	b.n	2e2e <sysclk_disable_peripheral_clock+0x432>
    2b72:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    2b76:	f2c4 0206 	movt	r2, #16390	; 0x4006
    2b7a:	4290      	cmp	r0, r2
    2b7c:	f000 8167 	beq.w	2e4e <sysclk_disable_peripheral_clock+0x452>
    2b80:	f04f 0300 	mov.w	r3, #0
    2b84:	f2c4 0307 	movt	r3, #16391	; 0x4007
    2b88:	4298      	cmp	r0, r3
    2b8a:	f040 8264 	bne.w	3056 <sysclk_disable_peripheral_clock+0x65a>
    2b8e:	e166      	b.n	2e5e <sysclk_disable_peripheral_clock+0x462>
    2b90:	f04f 0300 	mov.w	r3, #0
    2b94:	f2c4 030e 	movt	r3, #16398	; 0x400e
    2b98:	4298      	cmp	r0, r3
    2b9a:	f000 81dc 	beq.w	2f56 <sysclk_disable_peripheral_clock+0x55a>
    2b9e:	f04f 0100 	mov.w	r1, #0
    2ba2:	f2c4 010e 	movt	r1, #16398	; 0x400e
    2ba6:	4288      	cmp	r0, r1
    2ba8:	d85b      	bhi.n	2c62 <sysclk_disable_peripheral_clock+0x266>
    2baa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    2bae:	f2c4 020a 	movt	r2, #16394	; 0x400a
    2bb2:	4290      	cmp	r0, r2
    2bb4:	f000 818c 	beq.w	2ed0 <sysclk_disable_peripheral_clock+0x4d4>
    2bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    2bbc:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2bc0:	4298      	cmp	r0, r3
    2bc2:	d823      	bhi.n	2c0c <sysclk_disable_peripheral_clock+0x210>
    2bc4:	f04f 0100 	mov.w	r1, #0
    2bc8:	f2c4 0108 	movt	r1, #16392	; 0x4008
    2bcc:	4288      	cmp	r0, r1
    2bce:	f000 815e 	beq.w	2e8e <sysclk_disable_peripheral_clock+0x492>
    2bd2:	f04f 0200 	mov.w	r2, #0
    2bd6:	f2c4 0208 	movt	r2, #16392	; 0x4008
    2bda:	4290      	cmp	r0, r2
    2bdc:	d807      	bhi.n	2bee <sysclk_disable_peripheral_clock+0x1f2>
    2bde:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    2be2:	f2c4 0307 	movt	r3, #16391	; 0x4007
    2be6:	4298      	cmp	r0, r3
    2be8:	f040 8235 	bne.w	3056 <sysclk_disable_peripheral_clock+0x65a>
    2bec:	e147      	b.n	2e7e <sysclk_disable_peripheral_clock+0x482>
    2bee:	f04f 0200 	mov.w	r2, #0
    2bf2:	f2c4 020a 	movt	r2, #16394	; 0x400a
    2bf6:	4290      	cmp	r0, r2
    2bf8:	f000 8151 	beq.w	2e9e <sysclk_disable_peripheral_clock+0x4a2>
    2bfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2c00:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2c04:	4298      	cmp	r0, r3
    2c06:	f040 8226 	bne.w	3056 <sysclk_disable_peripheral_clock+0x65a>
    2c0a:	e150      	b.n	2eae <sysclk_disable_peripheral_clock+0x4b2>
    2c0c:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    2c10:	f2c4 010a 	movt	r1, #16394	; 0x400a
    2c14:	4288      	cmp	r0, r1
    2c16:	f000 8185 	beq.w	2f24 <sysclk_disable_peripheral_clock+0x528>
    2c1a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    2c1e:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2c22:	4298      	cmp	r0, r3
    2c24:	d80e      	bhi.n	2c44 <sysclk_disable_peripheral_clock+0x248>
    2c26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    2c2a:	f2c4 020a 	movt	r2, #16394	; 0x400a
    2c2e:	4290      	cmp	r0, r2
    2c30:	f000 8156 	beq.w	2ee0 <sysclk_disable_peripheral_clock+0x4e4>
    2c34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    2c38:	f2c4 010a 	movt	r1, #16394	; 0x400a
    2c3c:	4288      	cmp	r0, r1
    2c3e:	f040 820a 	bne.w	3056 <sysclk_disable_peripheral_clock+0x65a>
    2c42:	e15e      	b.n	2f02 <sysclk_disable_peripheral_clock+0x506>
    2c44:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
    2c48:	f2c4 020a 	movt	r2, #16394	; 0x400a
    2c4c:	4290      	cmp	r0, r2
    2c4e:	f000 817a 	beq.w	2f46 <sysclk_disable_peripheral_clock+0x54a>
    2c52:	f04f 0300 	mov.w	r3, #0
    2c56:	f2c4 030b 	movt	r3, #16395	; 0x400b
    2c5a:	4298      	cmp	r0, r3
    2c5c:	f040 81fb 	bne.w	3056 <sysclk_disable_peripheral_clock+0x65a>
    2c60:	e05b      	b.n	2d1a <sysclk_disable_peripheral_clock+0x31e>
    2c62:	f04f 0300 	mov.w	r3, #0
    2c66:	f2c4 030f 	movt	r3, #16399	; 0x400f
    2c6a:	4298      	cmp	r0, r3
    2c6c:	f000 81a4 	beq.w	2fb8 <sysclk_disable_peripheral_clock+0x5bc>
    2c70:	f04f 0200 	mov.w	r2, #0
    2c74:	f2c4 020f 	movt	r2, #16399	; 0x400f
    2c78:	4290      	cmp	r0, r2
    2c7a:	d823      	bhi.n	2cc4 <sysclk_disable_peripheral_clock+0x2c8>
    2c7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2c80:	f2c4 010e 	movt	r1, #16398	; 0x400e
    2c84:	4288      	cmp	r0, r1
    2c86:	f000 817a 	beq.w	2f7e <sysclk_disable_peripheral_clock+0x582>
    2c8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    2c8e:	f2c4 030e 	movt	r3, #16398	; 0x400e
    2c92:	4298      	cmp	r0, r3
    2c94:	d807      	bhi.n	2ca6 <sysclk_disable_peripheral_clock+0x2aa>
    2c96:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2c9a:	f2c4 020e 	movt	r2, #16398	; 0x400e
    2c9e:	4290      	cmp	r0, r2
    2ca0:	f040 81d9 	bne.w	3056 <sysclk_disable_peripheral_clock+0x65a>
    2ca4:	e161      	b.n	2f6a <sysclk_disable_peripheral_clock+0x56e>
    2ca6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    2caa:	f2c4 010e 	movt	r1, #16398	; 0x400e
    2cae:	4288      	cmp	r0, r1
    2cb0:	f000 816f 	beq.w	2f92 <sysclk_disable_peripheral_clock+0x596>
    2cb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    2cb8:	f2c4 020e 	movt	r2, #16398	; 0x400e
    2cbc:	4290      	cmp	r0, r2
    2cbe:	f040 81ca 	bne.w	3056 <sysclk_disable_peripheral_clock+0x65a>
    2cc2:	e170      	b.n	2fa6 <sysclk_disable_peripheral_clock+0x5aa>
    2cc4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    2cc8:	f2c4 010f 	movt	r1, #16399	; 0x400f
    2ccc:	4288      	cmp	r0, r1
    2cce:	f000 8191 	beq.w	2ff4 <sysclk_disable_peripheral_clock+0x5f8>
    2cd2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    2cd6:	f2c4 020f 	movt	r2, #16399	; 0x400f
    2cda:	4290      	cmp	r0, r2
    2cdc:	d80e      	bhi.n	2cfc <sysclk_disable_peripheral_clock+0x300>
    2cde:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2ce2:	f2c4 030f 	movt	r3, #16399	; 0x400f
    2ce6:	4298      	cmp	r0, r3
    2ce8:	f000 8170 	beq.w	2fcc <sysclk_disable_peripheral_clock+0x5d0>
    2cec:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2cf0:	f2c4 010f 	movt	r1, #16399	; 0x400f
    2cf4:	4288      	cmp	r0, r1
    2cf6:	f040 81ae 	bne.w	3056 <sysclk_disable_peripheral_clock+0x65a>
    2cfa:	e171      	b.n	2fe0 <sysclk_disable_peripheral_clock+0x5e4>
    2cfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    2d00:	f2c4 010f 	movt	r1, #16399	; 0x400f
    2d04:	4288      	cmp	r0, r1
    2d06:	f000 817f 	beq.w	3008 <sysclk_disable_peripheral_clock+0x60c>
    2d0a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
    2d0e:	f2c4 020f 	movt	r2, #16399	; 0x400f
    2d12:	4290      	cmp	r0, r2
    2d14:	f040 819f 	bne.w	3056 <sysclk_disable_peripheral_clock+0x65a>
    2d18:	e180      	b.n	301c <sysclk_disable_peripheral_clock+0x620>
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
    2d1a:	f04f 0001 	mov.w	r0, #1
    2d1e:	f04f 0109 	mov.w	r1, #9
    2d22:	f641 6239 	movw	r2, #7737	; 0x1e39
    2d26:	f2c0 0200 	movt	r2, #0
    2d2a:	4790      	blx	r2
    2d2c:	e17e      	b.n	302c <sysclk_disable_peripheral_clock+0x630>
	case AESA_ADDR:
		sysclk_disable_hsb_module(SYSCLK_AESA_HSB);
		break;

	case IISC_ADDR:
		sysclk_disable_pba_module(SYSCLK_IISC);
    2d2e:	f04f 0000 	mov.w	r0, #0
    2d32:	f641 7205 	movw	r2, #7941	; 0x1f05
    2d36:	f2c0 0200 	movt	r2, #0
    2d3a:	4790      	blx	r2
		break;
    2d3c:	e176      	b.n	302c <sysclk_disable_peripheral_clock+0x630>

	case SPI_ADDR:
		sysclk_disable_pba_module(SYSCLK_SPI);
    2d3e:	f04f 0001 	mov.w	r0, #1
    2d42:	f641 7105 	movw	r1, #7941	; 0x1f05
    2d46:	f2c0 0100 	movt	r1, #0
    2d4a:	4788      	blx	r1
		break;
    2d4c:	e16e      	b.n	302c <sysclk_disable_peripheral_clock+0x630>

	case TC0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TC0);
    2d4e:	f04f 0002 	mov.w	r0, #2
    2d52:	f641 7305 	movw	r3, #7941	; 0x1f05
    2d56:	f2c0 0300 	movt	r3, #0
    2d5a:	4798      	blx	r3
		break;
    2d5c:	e166      	b.n	302c <sysclk_disable_peripheral_clock+0x630>

	case TC1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TC1);
    2d5e:	f04f 0003 	mov.w	r0, #3
    2d62:	f641 7205 	movw	r2, #7941	; 0x1f05
    2d66:	f2c0 0200 	movt	r2, #0
    2d6a:	4790      	blx	r2
		break;
    2d6c:	e15e      	b.n	302c <sysclk_disable_peripheral_clock+0x630>

	case TWIM0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM0);
    2d6e:	f04f 0004 	mov.w	r0, #4
    2d72:	f641 7205 	movw	r2, #7941	; 0x1f05
    2d76:	f2c0 0200 	movt	r2, #0
    2d7a:	4790      	blx	r2
		break;
    2d7c:	e156      	b.n	302c <sysclk_disable_peripheral_clock+0x630>

	case TWIS0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIS0);
    2d7e:	f04f 0005 	mov.w	r0, #5
    2d82:	f641 7205 	movw	r2, #7941	; 0x1f05
    2d86:	f2c0 0200 	movt	r2, #0
    2d8a:	4790      	blx	r2
		break;
    2d8c:	e14e      	b.n	302c <sysclk_disable_peripheral_clock+0x630>

	case TWIM1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM1);
    2d8e:	f04f 0006 	mov.w	r0, #6
    2d92:	f641 7105 	movw	r1, #7941	; 0x1f05
    2d96:	f2c0 0100 	movt	r1, #0
    2d9a:	4788      	blx	r1
		break;
    2d9c:	e146      	b.n	302c <sysclk_disable_peripheral_clock+0x630>

	case TWIS1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIS1);
    2d9e:	f04f 0007 	mov.w	r0, #7
    2da2:	f641 7305 	movw	r3, #7941	; 0x1f05
    2da6:	f2c0 0300 	movt	r3, #0
    2daa:	4798      	blx	r3
		break;
    2dac:	e13e      	b.n	302c <sysclk_disable_peripheral_clock+0x630>

	case USART0_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART0);
    2dae:	f04f 0008 	mov.w	r0, #8
    2db2:	f641 7205 	movw	r2, #7941	; 0x1f05
    2db6:	f2c0 0200 	movt	r2, #0
    2dba:	4790      	blx	r2
		break;
    2dbc:	e136      	b.n	302c <sysclk_disable_peripheral_clock+0x630>

	case USART1_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART1);
    2dbe:	f04f 0009 	mov.w	r0, #9
    2dc2:	f641 7205 	movw	r2, #7941	; 0x1f05
    2dc6:	f2c0 0200 	movt	r2, #0
    2dca:	4790      	blx	r2
		break;
    2dcc:	e12e      	b.n	302c <sysclk_disable_peripheral_clock+0x630>

	case USART2_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART2);
    2dce:	f04f 000a 	mov.w	r0, #10
    2dd2:	f641 7205 	movw	r2, #7941	; 0x1f05
    2dd6:	f2c0 0200 	movt	r2, #0
    2dda:	4790      	blx	r2
		break;
    2ddc:	e126      	b.n	302c <sysclk_disable_peripheral_clock+0x630>

	case USART3_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART3);
    2dde:	f04f 000b 	mov.w	r0, #11
    2de2:	f641 7105 	movw	r1, #7941	; 0x1f05
    2de6:	f2c0 0100 	movt	r1, #0
    2dea:	4788      	blx	r1
		break;
    2dec:	e11e      	b.n	302c <sysclk_disable_peripheral_clock+0x630>

	case ADCIFE_ADDR:
		sysclk_disable_pba_module(SYSCLK_ADCIFE);
    2dee:	f04f 000c 	mov.w	r0, #12
    2df2:	f641 7305 	movw	r3, #7941	; 0x1f05
    2df6:	f2c0 0300 	movt	r3, #0
    2dfa:	4798      	blx	r3
		break;
    2dfc:	e116      	b.n	302c <sysclk_disable_peripheral_clock+0x630>

	case DACC_ADDR:
		sysclk_disable_pba_module(SYSCLK_DACC);
    2dfe:	f04f 000d 	mov.w	r0, #13
    2e02:	f641 7205 	movw	r2, #7941	; 0x1f05
    2e06:	f2c0 0200 	movt	r2, #0
    2e0a:	4790      	blx	r2
		break;
    2e0c:	e10e      	b.n	302c <sysclk_disable_peripheral_clock+0x630>

	case ACIFC_ADDR:
		sysclk_disable_pba_module(SYSCLK_ACIFC);
    2e0e:	f04f 000e 	mov.w	r0, #14
    2e12:	f641 7105 	movw	r1, #7941	; 0x1f05
    2e16:	f2c0 0100 	movt	r1, #0
    2e1a:	4788      	blx	r1
		break;
    2e1c:	e106      	b.n	302c <sysclk_disable_peripheral_clock+0x630>

	case GLOC_ADDR:
		sysclk_disable_pba_module(SYSCLK_GLOC);
    2e1e:	f04f 000f 	mov.w	r0, #15
    2e22:	f641 7105 	movw	r1, #7941	; 0x1f05
    2e26:	f2c0 0100 	movt	r1, #0
    2e2a:	4788      	blx	r1
		break;
    2e2c:	e0fe      	b.n	302c <sysclk_disable_peripheral_clock+0x630>

	case ABDACB_ADDR:
		sysclk_disable_pba_module(SYSCLK_ABDACB);
    2e2e:	f04f 0010 	mov.w	r0, #16
    2e32:	f641 7305 	movw	r3, #7941	; 0x1f05
    2e36:	f2c0 0300 	movt	r3, #0
    2e3a:	4798      	blx	r3
		break;
    2e3c:	e0f6      	b.n	302c <sysclk_disable_peripheral_clock+0x630>

	case TRNG_ADDR:
		sysclk_disable_pba_module(SYSCLK_TRNG);
    2e3e:	f04f 0011 	mov.w	r0, #17
    2e42:	f641 7305 	movw	r3, #7941	; 0x1f05
    2e46:	f2c0 0300 	movt	r3, #0
    2e4a:	4798      	blx	r3
		break;
    2e4c:	e0ee      	b.n	302c <sysclk_disable_peripheral_clock+0x630>

	case PARC_ADDR:
		sysclk_disable_pba_module(SYSCLK_PARC);
    2e4e:	f04f 0012 	mov.w	r0, #18
    2e52:	f641 7205 	movw	r2, #7941	; 0x1f05
    2e56:	f2c0 0200 	movt	r2, #0
    2e5a:	4790      	blx	r2
		break;
    2e5c:	e0e6      	b.n	302c <sysclk_disable_peripheral_clock+0x630>

	case CATB_ADDR:
		sysclk_disable_pba_module(SYSCLK_CATB);
    2e5e:	f04f 0013 	mov.w	r0, #19
    2e62:	f641 7105 	movw	r1, #7941	; 0x1f05
    2e66:	f2c0 0100 	movt	r1, #0
    2e6a:	4788      	blx	r1
		break;
    2e6c:	e0de      	b.n	302c <sysclk_disable_peripheral_clock+0x630>

	case TWIM2_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM2);
    2e6e:	f04f 0015 	mov.w	r0, #21
    2e72:	f641 7105 	movw	r1, #7941	; 0x1f05
    2e76:	f2c0 0100 	movt	r1, #0
    2e7a:	4788      	blx	r1
		break;
    2e7c:	e0d6      	b.n	302c <sysclk_disable_peripheral_clock+0x630>

	case TWIM3_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM3);
    2e7e:	f04f 0016 	mov.w	r0, #22
    2e82:	f641 7105 	movw	r1, #7941	; 0x1f05
    2e86:	f2c0 0100 	movt	r1, #0
    2e8a:	4788      	blx	r1
		break;
    2e8c:	e0ce      	b.n	302c <sysclk_disable_peripheral_clock+0x630>

	case LCDCA_ADDR:
		sysclk_disable_pba_module(SYSCLK_LCDCA);
    2e8e:	f04f 0017 	mov.w	r0, #23
    2e92:	f641 7205 	movw	r2, #7941	; 0x1f05
    2e96:	f2c0 0200 	movt	r2, #0
    2e9a:	4790      	blx	r2
		break;
    2e9c:	e0c6      	b.n	302c <sysclk_disable_peripheral_clock+0x630>

	case HFLASHC_ADDR:
		sysclk_disable_pbb_module(SYSCLK_HFLASHC_REGS);
    2e9e:	f04f 0000 	mov.w	r0, #0
    2ea2:	f641 73c5 	movw	r3, #8133	; 0x1fc5
    2ea6:	f2c0 0300 	movt	r3, #0
    2eaa:	4798      	blx	r3
		break;
    2eac:	e0be      	b.n	302c <sysclk_disable_peripheral_clock+0x630>
    2eae:	f04f 0001 	mov.w	r0, #1
    2eb2:	f04f 0102 	mov.w	r1, #2
    2eb6:	f641 6239 	movw	r2, #7737	; 0x1e39
    2eba:	f2c0 0200 	movt	r2, #0
    2ebe:	4790      	blx	r2

	case HCACHE_ADDR:
		sysclk_disable_hsb_module(SYSCLK_HRAMC1_DATA);
		sysclk_disable_pbb_module(SYSCLK_HRAMC1_REGS);
    2ec0:	f04f 0001 	mov.w	r0, #1
    2ec4:	f641 71c5 	movw	r1, #8133	; 0x1fc5
    2ec8:	f2c0 0100 	movt	r1, #0
    2ecc:	4788      	blx	r1
		break;
    2ece:	e0ad      	b.n	302c <sysclk_disable_peripheral_clock+0x630>

	case HMATRIX_ADDR:
		sysclk_disable_pbb_module(SYSCLK_HMATRIX);
    2ed0:	f04f 0002 	mov.w	r0, #2
    2ed4:	f641 71c5 	movw	r1, #8133	; 0x1fc5
    2ed8:	f2c0 0100 	movt	r1, #0
    2edc:	4788      	blx	r1
		break;
    2ede:	e0a5      	b.n	302c <sysclk_disable_peripheral_clock+0x630>
    2ee0:	f04f 0001 	mov.w	r0, #1
    2ee4:	f04f 0100 	mov.w	r1, #0
    2ee8:	f641 6339 	movw	r3, #7737	; 0x1e39
    2eec:	f2c0 0300 	movt	r3, #0
    2ef0:	4798      	blx	r3

	case PDCA_ADDR:
		sysclk_disable_hsb_module(SYSCLK_PDCA_HSB);
		sysclk_disable_pbb_module(SYSCLK_PDCA_PB);
    2ef2:	f04f 0003 	mov.w	r0, #3
    2ef6:	f641 71c5 	movw	r1, #8133	; 0x1fc5
    2efa:	f2c0 0100 	movt	r1, #0
    2efe:	4788      	blx	r1
		break;
    2f00:	e094      	b.n	302c <sysclk_disable_peripheral_clock+0x630>
    2f02:	f04f 0001 	mov.w	r0, #1
    2f06:	f04f 0104 	mov.w	r1, #4
    2f0a:	f641 6339 	movw	r3, #7737	; 0x1e39
    2f0e:	f2c0 0300 	movt	r3, #0
    2f12:	4798      	blx	r3

	case CRCCU_ADDR:
		sysclk_disable_hsb_module(SYSCLK_CRCCU_DATA);
		sysclk_disable_pbb_module(SYSCLK_CRCCU_REGS);
    2f14:	f04f 0004 	mov.w	r0, #4
    2f18:	f641 72c5 	movw	r2, #8133	; 0x1fc5
    2f1c:	f2c0 0200 	movt	r2, #0
    2f20:	4790      	blx	r2
		break;
    2f22:	e083      	b.n	302c <sysclk_disable_peripheral_clock+0x630>
    2f24:	f04f 0001 	mov.w	r0, #1
    2f28:	f04f 0103 	mov.w	r1, #3
    2f2c:	f641 6339 	movw	r3, #7737	; 0x1e39
    2f30:	f2c0 0300 	movt	r3, #0
    2f34:	4798      	blx	r3

	case USBC_ADDR:
		sysclk_disable_hsb_module(SYSCLK_USBC_DATA);
		sysclk_disable_pbb_module(SYSCLK_USBC_REGS);
    2f36:	f04f 0005 	mov.w	r0, #5
    2f3a:	f641 72c5 	movw	r2, #8133	; 0x1fc5
    2f3e:	f2c0 0200 	movt	r2, #0
    2f42:	4790      	blx	r2
		break;
    2f44:	e072      	b.n	302c <sysclk_disable_peripheral_clock+0x630>

	case PEVC_ADDR:
		sysclk_disable_pbb_module(SYSCLK_PEVC);
    2f46:	f04f 0006 	mov.w	r0, #6
    2f4a:	f641 71c5 	movw	r1, #8133	; 0x1fc5
    2f4e:	f2c0 0100 	movt	r1, #0
    2f52:	4788      	blx	r1
		break;
    2f54:	e06a      	b.n	302c <sysclk_disable_peripheral_clock+0x630>
 * \brief Disable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_disable_pbc_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_PBC, module_index);
    2f56:	f04f 0004 	mov.w	r0, #4
    2f5a:	f04f 0100 	mov.w	r1, #0
    2f5e:	f641 6339 	movw	r3, #7737	; 0x1e39
    2f62:	f2c0 0300 	movt	r3, #0
    2f66:	4798      	blx	r3
    2f68:	e060      	b.n	302c <sysclk_disable_peripheral_clock+0x630>
    2f6a:	f04f 0004 	mov.w	r0, #4
    2f6e:	f04f 0101 	mov.w	r1, #1
    2f72:	f641 6339 	movw	r3, #7737	; 0x1e39
    2f76:	f2c0 0300 	movt	r3, #0
    2f7a:	4798      	blx	r3
    2f7c:	e056      	b.n	302c <sysclk_disable_peripheral_clock+0x630>
    2f7e:	f04f 0004 	mov.w	r0, #4
    2f82:	f04f 0102 	mov.w	r1, #2
    2f86:	f641 6339 	movw	r3, #7737	; 0x1e39
    2f8a:	f2c0 0300 	movt	r3, #0
    2f8e:	4798      	blx	r3
    2f90:	e04c      	b.n	302c <sysclk_disable_peripheral_clock+0x630>
    2f92:	f04f 0004 	mov.w	r0, #4
    2f96:	f04f 0103 	mov.w	r1, #3
    2f9a:	f641 6239 	movw	r2, #7737	; 0x1e39
    2f9e:	f2c0 0200 	movt	r2, #0
    2fa2:	4790      	blx	r2
    2fa4:	e042      	b.n	302c <sysclk_disable_peripheral_clock+0x630>
    2fa6:	f04f 0004 	mov.w	r0, #4
    2faa:	4601      	mov	r1, r0
    2fac:	f641 6339 	movw	r3, #7737	; 0x1e39
    2fb0:	f2c0 0300 	movt	r3, #0
    2fb4:	4798      	blx	r3
    2fb6:	e039      	b.n	302c <sysclk_disable_peripheral_clock+0x630>
 * \brief Disable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_disable_pbd_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_PBD, module_index);
    2fb8:	f04f 0005 	mov.w	r0, #5
    2fbc:	f04f 0100 	mov.w	r1, #0
    2fc0:	f641 6239 	movw	r2, #7737	; 0x1e39
    2fc4:	f2c0 0200 	movt	r2, #0
    2fc8:	4790      	blx	r2
    2fca:	e02f      	b.n	302c <sysclk_disable_peripheral_clock+0x630>
    2fcc:	f04f 0005 	mov.w	r0, #5
    2fd0:	f04f 0101 	mov.w	r1, #1
    2fd4:	f641 6339 	movw	r3, #7737	; 0x1e39
    2fd8:	f2c0 0300 	movt	r3, #0
    2fdc:	4798      	blx	r3
    2fde:	e025      	b.n	302c <sysclk_disable_peripheral_clock+0x630>
    2fe0:	f04f 0005 	mov.w	r0, #5
    2fe4:	f04f 0102 	mov.w	r1, #2
    2fe8:	f641 6239 	movw	r2, #7737	; 0x1e39
    2fec:	f2c0 0200 	movt	r2, #0
    2ff0:	4790      	blx	r2
    2ff2:	e01b      	b.n	302c <sysclk_disable_peripheral_clock+0x630>
    2ff4:	f04f 0005 	mov.w	r0, #5
    2ff8:	f04f 0103 	mov.w	r1, #3
    2ffc:	f641 6339 	movw	r3, #7737	; 0x1e39
    3000:	f2c0 0300 	movt	r3, #0
    3004:	4798      	blx	r3
    3006:	e011      	b.n	302c <sysclk_disable_peripheral_clock+0x630>
    3008:	f04f 0005 	mov.w	r0, #5
    300c:	f04f 0104 	mov.w	r1, #4
    3010:	f641 6239 	movw	r2, #7737	; 0x1e39
    3014:	f2c0 0200 	movt	r2, #0
    3018:	4790      	blx	r2
    301a:	e007      	b.n	302c <sysclk_disable_peripheral_clock+0x630>
    301c:	f04f 0005 	mov.w	r0, #5
    3020:	4601      	mov	r1, r0
    3022:	f641 6339 	movw	r3, #7737	; 0x1e39
    3026:	f2c0 0300 	movt	r3, #0
    302a:	4798      	blx	r3
	}

	// Disable PBA divided clock if possible.
#define PBADIV_CLKSRC_MASK (SYSCLK_TC0 | SYSCLK_TC1 \
		| SYSCLK_USART0 | SYSCLK_USART1 | SYSCLK_USART2 | SYSCLK_USART3)
	if ((PM->PM_PBAMASK & PBADIV_CLKSRC_MASK) == 0) {
    302c:	f04f 0000 	mov.w	r0, #0
    3030:	f2c4 000e 	movt	r0, #16398	; 0x400e
    3034:	6a82      	ldr	r2, [r0, #40]	; 0x28
    3036:	f012 0f0b 	tst.w	r2, #11
    303a:	d10c      	bne.n	3056 <sysclk_disable_peripheral_clock+0x65a>
 */
static inline void sysclk_disable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    303c:	f04f 0300 	mov.w	r3, #0
    3040:	f2c4 030e 	movt	r3, #16398	; 0x400e
    3044:	6c19      	ldr	r1, [r3, #64]	; 0x40
	temp_mask &= ~mask;
    3046:	f021 007f 	bic.w	r0, r1, #127	; 0x7f
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    304a:	f04f 0240 	mov.w	r2, #64	; 0x40
    304e:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    3052:	659a      	str	r2, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    3054:	6418      	str	r0, [r3, #64]	; 0x40
    3056:	bd08      	pop	{r3, pc}

00003058 <sysclk_set_source>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3058:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    305c:	b672      	cpsid	i
    305e:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    3062:	f240 0344 	movw	r3, #68	; 0x44
    3066:	f2c2 0300 	movt	r3, #8192	; 0x2000
    306a:	f04f 0100 	mov.w	r1, #0
    306e:	7019      	strb	r1, [r3, #0]
{
	irqflags_t flags;
	Assert(src <= SYSCLK_SRC_RC1M);

	flags = cpu_irq_save();
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    3070:	460b      	mov	r3, r1
    3072:	f2c4 030e 	movt	r3, #16398	; 0x400e
    3076:	f04f 412a 	mov.w	r1, #2852126720	; 0xaa000000
    307a:	6599      	str	r1, [r3, #88]	; 0x58
		| PM_UNLOCK_ADDR((uint32_t)&PM->PM_MCCTRL - (uint32_t)PM);
	PM->PM_MCCTRL = src;
    307c:	6018      	str	r0, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    307e:	b94a      	cbnz	r2, 3094 <sysclk_set_source+0x3c>
		cpu_irq_enable();
    3080:	f240 0044 	movw	r0, #68	; 0x44
    3084:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3088:	f04f 0201 	mov.w	r2, #1
    308c:	7002      	strb	r2, [r0, #0]
    308e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3092:	b662      	cpsie	i
    3094:	4770      	bx	lr
    3096:	bf00      	nop

00003098 <sysclk_init>:
   genclk_disable(7);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
    3098:	b538      	push	{r3, r4, r5, lr}
	uint32_t ps_value = 0;
	bool is_fwu_enabled = false;

#if CONFIG_HCACHE_ENABLE == 1
	/* Enable HCACHE */
	sysclk_enable_peripheral_clock(HCACHE);
    309a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    309e:	f2c4 040a 	movt	r4, #16394	; 0x400a
    30a2:	4620      	mov	r0, r4
    30a4:	f242 331d 	movw	r3, #8989	; 0x231d
    30a8:	f2c0 0300 	movt	r3, #0
    30ac:	4798      	blx	r3
	HCACHE->HCACHE_CTRL = HCACHE_CTRL_CEN_YES;
    30ae:	f04f 0001 	mov.w	r0, #1
    30b2:	60a0      	str	r0, [r4, #8]
	while (!(HCACHE->HCACHE_SR & HCACHE_SR_CSTS_EN));
    30b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    30b8:	f2c4 020a 	movt	r2, #16394	; 0x400a
    30bc:	68d1      	ldr	r1, [r2, #12]
    30be:	f011 0f01 	tst.w	r1, #1
    30c2:	d0fb      	beq.n	30bc <sysclk_init+0x24>
		sysclk_set_source(SYSCLK_SRC_OSC0);
	}
#endif
#ifdef CONFIG_DFLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_DFLL) {
		dfll_enable_config_defaults(0);
    30c4:	f04f 0000 	mov.w	r0, #0
    30c8:	f641 45bd 	movw	r5, #7357	; 0x1cbd
    30cc:	f2c0 0500 	movt	r5, #0
    30d0:	47a8      	blx	r5
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz(), ps_value, is_fwu_enabled);
    30d2:	f04f 7037 	mov.w	r0, #47972352	; 0x2dc0000
    30d6:	f04f 0100 	mov.w	r1, #0
    30da:	460a      	mov	r2, r1
    30dc:	f243 445d 	movw	r4, #13405	; 0x345d
    30e0:	f2c0 0400 	movt	r4, #0
    30e4:	47a0      	blx	r4
		sysclk_set_source(SYSCLK_SRC_DFLL);
    30e6:	f04f 0003 	mov.w	r0, #3
    30ea:	f243 0359 	movw	r3, #12377	; 0x3059
    30ee:	f2c0 0300 	movt	r3, #0
    30f2:	4798      	blx	r3
	if (!no_halt) {
		bpm_power_scaling_cpu(bpm, ps_value);
		return true;
	}

	return bpm_power_scaling_cpu_failsafe(bpm, ps_value, 240000);
    30f4:	f04f 0000 	mov.w	r0, #0
    30f8:	f2c4 000f 	movt	r0, #16399	; 0x400f
    30fc:	f04f 0100 	mov.w	r1, #0
    3100:	f64a 1280 	movw	r2, #43392	; 0xa980
    3104:	f2c0 0203 	movt	r2, #3
    3108:	f243 2535 	movw	r5, #12853	; 0x3235
    310c:	f2c0 0500 	movt	r5, #0
    3110:	47a8      	blx	r5
		Assert(false);
	}

	/* Automatically switch to low power mode */
	bpm_configure_power_scaling(BPM, ps_value, BPM_PSCM_CPU_NOT_HALT);
	while ((bpm_get_status(BPM) & BPM_SR_PSOK) == 0);
    3112:	f04f 0400 	mov.w	r4, #0
    3116:	f2c4 040f 	movt	r4, #16399	; 0x400f
    311a:	f243 25ad 	movw	r5, #12973	; 0x32ad
    311e:	f2c0 0500 	movt	r5, #0
    3122:	4620      	mov	r0, r4
    3124:	47a8      	blx	r5
    3126:	f010 0f01 	tst.w	r0, #1
    312a:	d0fa      	beq.n	3122 <sysclk_init+0x8a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    312c:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3130:	b672      	cpsid	i
    3132:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    3136:	f240 0244 	movw	r2, #68	; 0x44
    313a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    313e:	f04f 0100 	mov.w	r1, #0
    3142:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3144:	b928      	cbnz	r0, 3152 <sysclk_init+0xba>
		cpu_irq_enable();
    3146:	f04f 0001 	mov.w	r0, #1
    314a:	7010      	strb	r0, [r2, #0]
    314c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3150:	b662      	cpsie	i
    3152:	bd38      	pop	{r3, r4, r5, pc}

00003154 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_disable_pin(pin);\
	} while (0)

void board_init(void)
{
    3154:	b510      	push	{r4, lr}
    3156:	b086      	sub	sp, #24
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	struct wdt_dev_inst wdt_inst;
	struct wdt_config   wdt_cfg;

	wdt_get_config_defaults(&wdt_cfg);
    3158:	4668      	mov	r0, sp
    315a:	f243 5389 	movw	r3, #13705	; 0x3589
    315e:	f2c0 0300 	movt	r3, #0
    3162:	4798      	blx	r3
	wdt_init(&wdt_inst, WDT, &wdt_cfg);
    3164:	a804      	add	r0, sp, #16
    3166:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    316a:	f2c4 010f 	movt	r1, #16399	; 0x400f
    316e:	466a      	mov	r2, sp
    3170:	f243 54a5 	movw	r4, #13733	; 0x35a5
    3174:	f2c0 0400 	movt	r4, #0
    3178:	47a0      	blx	r4
	wdt_disable(&wdt_inst);
    317a:	a804      	add	r0, sp, #16
    317c:	f243 6171 	movw	r1, #13937	; 0x3671
    3180:	f2c0 0100 	movt	r1, #0
    3184:	4788      	blx	r1
	return 1U << (pin & 0x1F);
}

__always_inline static void arch_ioport_init(void)
{
	sysclk_enable_peripheral_clock(GPIO);
    3186:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    318a:	f2c4 040e 	movt	r4, #16398	; 0x400e
    318e:	4620      	mov	r0, r4
    3190:	f242 321d 	movw	r2, #8989	; 0x231d
    3194:	f2c0 0200 	movt	r2, #0
    3198:	4790      	blx	r2

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    319a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
    319e:	f2c4 000e 	movt	r0, #16398	; 0x400e
    31a2:	f04f 0380 	mov.w	r3, #128	; 0x80
    31a6:	6443      	str	r3, [r0, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    31a8:	f8c0 3168 	str.w	r3, [r0, #360]	; 0x168

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    31ac:	6543      	str	r3, [r0, #84]	; 0x54
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    31ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    31b2:	6482      	str	r2, [r0, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    31b4:	f8c0 2164 	str.w	r2, [r0, #356]	; 0x164
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
    31b8:	6742      	str	r2, [r0, #116]	; 0x74

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    31ba:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    31be:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    31c2:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    31c6:	6182      	str	r2, [r0, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    31c8:	6282      	str	r2, [r0, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    31ca:	6382      	str	r2, [r0, #56]	; 0x38
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    31cc:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    31d0:	6781      	str	r1, [r0, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    31d2:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    31d6:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    31da:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    31de:	6181      	str	r1, [r0, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    31e0:	6281      	str	r1, [r0, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    31e2:	6381      	str	r1, [r0, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    31e4:	6081      	str	r1, [r0, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    31e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    31ea:	6783      	str	r3, [r0, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    31ec:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    31f0:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    31f4:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    31f8:	6183      	str	r3, [r0, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    31fa:	6283      	str	r3, [r0, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    31fc:	6383      	str	r3, [r0, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    31fe:	6083      	str	r3, [r0, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    3200:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    3204:	67a0      	str	r0, [r4, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    3206:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    320a:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    320e:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
    3212:	6160      	str	r0, [r4, #20]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    3214:	62a0      	str	r0, [r4, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    3216:	63a0      	str	r0, [r4, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    3218:	60a0      	str	r0, [r4, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    321a:	67a2      	str	r2, [r4, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    321c:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    3220:	f8c4 20c8 	str.w	r2, [r4, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    3224:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
    3228:	6162      	str	r2, [r4, #20]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    322a:	62a2      	str	r2, [r4, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    322c:	63a2      	str	r2, [r4, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    322e:	60a2      	str	r2, [r4, #8]
	ioport_set_pin_peripheral_mode(PIN_PA15D_PARC_PCDATA6, MUX_PA15D_PARC_PCDATA6);
	ioport_set_pin_peripheral_mode(PIN_PA16D_PARC_PCDATA7, MUX_PA16D_PARC_PCDATA7);
	ioport_set_pin_peripheral_mode(PIN_PA18D_PARC_PCEN1, MUX_PA18D_PARC_PCEN1);
	ioport_set_pin_peripheral_mode(PIN_PA19D_PARC_PCEN2, MUX_PA19D_PARC_PCEN2);
#endif
}
    3230:	b006      	add	sp, #24
    3232:	bd10      	pop	{r4, pc}

00003234 <bpm_power_scaling_cpu_failsafe>:
}


bool bpm_power_scaling_cpu_failsafe(Bpm *bpm, uint32_t ps_value,
	uint32_t timeout)
{
    3234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t pmcon = 0;

	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;
    3238:	69c4      	ldr	r4, [r0, #28]

	/* Clear last PS Value & Write new one */
	pmcon &= ~BPM_PMCON_PS_Msk;
    323a:	f024 0503 	bic.w	r5, r4, #3
	pmcon |= BPM_PMCON_PS(ps_value);
    323e:	f045 030c 	orr.w	r3, r5, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3242:	f3ef 8610 	mrs	r6, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3246:	b672      	cpsid	i
    3248:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    324c:	f04f 0500 	mov.w	r5, #0
    3250:	f240 0744 	movw	r7, #68	; 0x44
    3254:	f2c2 0700 	movt	r7, #8192	; 0x2000
    3258:	703d      	strb	r5, [r7, #0]
	uint32_t ctrl, load, val;
	/* Avoid interrupt while flash halt */
	flags = cpu_irq_save();

	/* Save SysTick */
	val = SysTick->VAL;
    325a:	f24e 0410 	movw	r4, #57360	; 0xe010
    325e:	f2ce 0400 	movt	r4, #57344	; 0xe000
    3262:	f8d4 8008 	ldr.w	r8, [r4, #8]
	ctrl = SysTick->CTRL;
    3266:	6827      	ldr	r7, [r4, #0]
	load = SysTick->LOAD;
    3268:	f8d4 9004 	ldr.w	r9, [r4, #4]
	/* Setup SysTick & start counting */
	SysTick->LOAD = timeout;
    326c:	6062      	str	r2, [r4, #4]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    326e:	f04f 0205 	mov.w	r2, #5
    3272:	6022      	str	r2, [r4, #0]
	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;

	/* Clear last PS Value & Write new one */
	pmcon &= ~BPM_PMCON_PS_Msk;
	pmcon |= BPM_PMCON_PS(ps_value);
    3274:	f001 0103 	and.w	r1, r1, #3
	load = SysTick->LOAD;
	/* Setup SysTick & start counting */
	SysTick->LOAD = timeout;
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;

	b_psok = bpm_ps_no_halt_exec(bpm, pmcon);
    3278:	4319      	orrs	r1, r3
    327a:	f240 030d 	movw	r3, #13
    327e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3282:	4798      	blx	r3

	/* Restore SysTick */
	SysTick->CTRL = 0;
    3284:	6025      	str	r5, [r4, #0]
	SysTick->LOAD = load;
    3286:	f8c4 9004 	str.w	r9, [r4, #4]
	SysTick->VAL = val;
    328a:	f8c4 8008 	str.w	r8, [r4, #8]
	SysTick->CTRL = ctrl;
    328e:	6027      	str	r7, [r4, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3290:	b94e      	cbnz	r6, 32a6 <bpm_power_scaling_cpu_failsafe+0x72>
		cpu_irq_enable();
    3292:	f240 0144 	movw	r1, #68	; 0x44
    3296:	f2c2 0100 	movt	r1, #8192	; 0x2000
    329a:	f04f 0201 	mov.w	r2, #1
    329e:	700a      	strb	r2, [r1, #0]
    32a0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    32a4:	b662      	cpsie	i

	cpu_irq_restore(flags);
	return b_psok;
}
    32a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    32aa:	bf00      	nop

000032ac <bpm_get_status>:
	bpm->BPM_ICR = sources;
}

uint32_t bpm_get_status(Bpm *bpm)
{
	return bpm->BPM_SR;
    32ac:	6940      	ldr	r0, [r0, #20]
}
    32ae:	4770      	bx	lr

000032b0 <bpm_sleep>:
{
	return bpm->BPM_VERSION;
}

void bpm_sleep(Bpm *bpm, uint32_t sleep_mode)
{
    32b0:	b410      	push	{r4}
	uint32_t pmcon;

	/* Read PMCON register */
	pmcon = bpm->BPM_PMCON;
    32b2:	69c3      	ldr	r3, [r0, #28]
	pmcon &= ~BPM_PMCON_BKUP;
	pmcon &= ~BPM_PMCON_RET;
	pmcon &= ~BPM_PMCON_SLEEP_Msk;
    32b4:	f423 544c 	bic.w	r4, r3, #13056	; 0x3300

	/* Unlock PMCON register */
	BPM_UNLOCK(PMCON);
    32b8:	f04f 0300 	mov.w	r3, #0
    32bc:	f2c4 030f 	movt	r3, #16399	; 0x400f
    32c0:	f04f 021c 	mov.w	r2, #28
    32c4:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    32c8:	619a      	str	r2, [r3, #24]

	if (sleep_mode == BPM_SM_SLEEP_0) {
    32ca:	2901      	cmp	r1, #1
    32cc:	d109      	bne.n	32e2 <bpm_sleep+0x32>
		pmcon |= BPM_PMCON_SLEEP(0);
		bpm->BPM_PMCON = pmcon;
    32ce:	61c4      	str	r4, [r0, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    32d0:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    32d4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    32d8:	6918      	ldr	r0, [r3, #16]
    32da:	f020 0104 	bic.w	r1, r0, #4
    32de:	6119      	str	r1, [r3, #16]
    32e0:	e050      	b.n	3384 <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_SLEEP_1) {
    32e2:	2902      	cmp	r1, #2
    32e4:	d10b      	bne.n	32fe <bpm_sleep+0x4e>
		pmcon |= BPM_PMCON_SLEEP(1);
    32e6:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
		bpm->BPM_PMCON = pmcon;
    32ea:	61c4      	str	r4, [r0, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    32ec:	f44f 406d 	mov.w	r0, #60672	; 0xed00
    32f0:	f2ce 0000 	movt	r0, #57344	; 0xe000
    32f4:	6901      	ldr	r1, [r0, #16]
    32f6:	f021 0204 	bic.w	r2, r1, #4
    32fa:	6102      	str	r2, [r0, #16]
    32fc:	e042      	b.n	3384 <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_SLEEP_2) {
    32fe:	2903      	cmp	r1, #3
    3300:	d10b      	bne.n	331a <bpm_sleep+0x6a>
		pmcon |= BPM_PMCON_SLEEP(2);
    3302:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
		bpm->BPM_PMCON = pmcon;
    3306:	61c4      	str	r4, [r0, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    3308:	f44f 416d 	mov.w	r1, #60672	; 0xed00
    330c:	f2ce 0100 	movt	r1, #57344	; 0xe000
    3310:	690a      	ldr	r2, [r1, #16]
    3312:	f022 0304 	bic.w	r3, r2, #4
    3316:	610b      	str	r3, [r1, #16]
    3318:	e034      	b.n	3384 <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_SLEEP_3) {
    331a:	2904      	cmp	r1, #4
    331c:	d10b      	bne.n	3336 <bpm_sleep+0x86>
		pmcon |= BPM_PMCON_SLEEP(3);
    331e:	f444 5440 	orr.w	r4, r4, #12288	; 0x3000
		bpm->BPM_PMCON = pmcon;
    3322:	61c4      	str	r4, [r0, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    3324:	f44f 416d 	mov.w	r1, #60672	; 0xed00
    3328:	f2ce 0100 	movt	r1, #57344	; 0xe000
    332c:	690b      	ldr	r3, [r1, #16]
    332e:	f023 0004 	bic.w	r0, r3, #4
    3332:	6108      	str	r0, [r1, #16]
    3334:	e026      	b.n	3384 <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_WAIT) {
    3336:	2905      	cmp	r1, #5
    3338:	d109      	bne.n	334e <bpm_sleep+0x9e>
		bpm->BPM_PMCON = pmcon;
    333a:	61c4      	str	r4, [r0, #28]
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    333c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    3340:	f2ce 0300 	movt	r3, #57344	; 0xe000
    3344:	6918      	ldr	r0, [r3, #16]
    3346:	f040 0204 	orr.w	r2, r0, #4
    334a:	611a      	str	r2, [r3, #16]
    334c:	e01a      	b.n	3384 <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_RET) {
    334e:	2906      	cmp	r1, #6
    3350:	d10b      	bne.n	336a <bpm_sleep+0xba>
		pmcon |= BPM_PMCON_RET;
    3352:	f444 7400 	orr.w	r4, r4, #512	; 0x200
		bpm->BPM_PMCON = pmcon;
    3356:	61c4      	str	r4, [r0, #28]
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    3358:	f44f 406d 	mov.w	r0, #60672	; 0xed00
    335c:	f2ce 0000 	movt	r0, #57344	; 0xe000
    3360:	6902      	ldr	r2, [r0, #16]
    3362:	f042 0104 	orr.w	r1, r2, #4
    3366:	6101      	str	r1, [r0, #16]
    3368:	e00c      	b.n	3384 <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_BACKUP) { 
    336a:	2907      	cmp	r1, #7
    336c:	d11e      	bne.n	33ac <bpm_sleep+0xfc>
		pmcon |= BPM_PMCON_BKUP;
    336e:	f444 7480 	orr.w	r4, r4, #256	; 0x100
		bpm->BPM_PMCON = pmcon;
    3372:	61c4      	str	r4, [r0, #28]
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    3374:	f44f 406d 	mov.w	r0, #60672	; 0xed00
    3378:	f2ce 0000 	movt	r0, #57344	; 0xe000
    337c:	6901      	ldr	r1, [r0, #16]
    337e:	f041 0304 	orr.w	r3, r1, #4
    3382:	6103      	str	r3, [r0, #16]
	} else {
		return;
	}

	/* Wait until vreg is ok. */
	while(!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_VREGOK));
    3384:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3388:	f2c4 020f 	movt	r2, #16399	; 0x400f
    338c:	6953      	ldr	r3, [r2, #20]
    338e:	f413 6f80 	tst.w	r3, #1024	; 0x400
    3392:	d0fb      	beq.n	338c <bpm_sleep+0xdc>
	asm volatile ("wfi");
    3394:	bf30      	wfi
	/* ensure sleep request propagation to flash. */
	asm volatile ("nop");
    3396:	bf00      	nop
	 * masked since we are in the critical section thanks to the previous
	 * set_pri_mask(1). Thus, we need to leave the critical section.
	 * Please note that we should probably use something like
	 * cpu_leave_critical(), using set_pri_mask(0)
	 */
	cpu_irq_enable();
    3398:	f240 0044 	movw	r0, #68	; 0x44
    339c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    33a0:	f04f 0101 	mov.w	r1, #1
    33a4:	7001      	strb	r1, [r0, #0]
    33a6:	f3bf 8f5f 	dmb	sy
    33aa:	b662      	cpsie	i
}
    33ac:	bc10      	pop	{r4}
    33ae:	4770      	bx	lr

000033b0 <flashcalw_set_wait_state>:
 * \param wait_state The number of wait states of flash read accesses: \c 0 to
 *                   \c 1.
 */
void flashcalw_set_wait_state(uint32_t wait_state)
{
	HFLASHC->FLASHCALW_FCR = (HFLASHC->FLASHCALW_FCR & ~FLASHCALW_FCR_FWS)
    33b0:	f04f 0300 	mov.w	r3, #0
    33b4:	f2c4 030a 	movt	r3, #16394	; 0x400a
    33b8:	6819      	ldr	r1, [r3, #0]
    33ba:	f021 0240 	bic.w	r2, r1, #64	; 0x40
			| (wait_state ? FLASHCALW_FCR_FWS_1 :
    33be:	2800      	cmp	r0, #0
    33c0:	bf14      	ite	ne
    33c2:	2040      	movne	r0, #64	; 0x40
    33c4:	2000      	moveq	r0, #0
    33c6:	4310      	orrs	r0, r2
 * \param wait_state The number of wait states of flash read accesses: \c 0 to
 *                   \c 1.
 */
void flashcalw_set_wait_state(uint32_t wait_state)
{
	HFLASHC->FLASHCALW_FCR = (HFLASHC->FLASHCALW_FCR & ~FLASHCALW_FCR_FWS)
    33c8:	f04f 0300 	mov.w	r3, #0
    33cc:	f2c4 030a 	movt	r3, #16394	; 0x400a
    33d0:	6018      	str	r0, [r3, #0]
    33d2:	4770      	bx	lr

000033d4 <flashcalw_is_ready>:
 *
 * \return Whether the FLASHCALW is ready to run a new command.
 */
bool flashcalw_is_ready(void)
{
	return ((HFLASHC->FLASHCALW_FSR & FLASHCALW_FSR_FRDY) != 0);
    33d4:	f04f 0300 	mov.w	r3, #0
    33d8:	f2c4 030a 	movt	r3, #16394	; 0x400a
    33dc:	6898      	ldr	r0, [r3, #8]
}
    33de:	f000 0001 	and.w	r0, r0, #1
    33e2:	4770      	bx	lr

000033e4 <flashcalw_default_wait_until_ready>:
/*! \brief Waits actively until the FLASHCALW is ready to run a new command.
 *
 * This is the default function assigned to \ref flashcalw_wait_until_ready.
 */
void flashcalw_default_wait_until_ready(void)
{
    33e4:	b510      	push	{r4, lr}
	while (!flashcalw_is_ready()) {
    33e6:	f243 34d5 	movw	r4, #13269	; 0x33d5
    33ea:	f2c0 0400 	movt	r4, #0
    33ee:	47a0      	blx	r4
    33f0:	2800      	cmp	r0, #0
    33f2:	d0fc      	beq.n	33ee <flashcalw_default_wait_until_ready+0xa>
	}
}
    33f4:	bd10      	pop	{r4, pc}
    33f6:	bf00      	nop

000033f8 <flashcalw_issue_command>:
 *
 * \note The FLASHCALW error status returned by \ref flashcalw_is_lock_error and
 *       \ref flashcalw_is_programming_error is updated.
 */
void flashcalw_issue_command(uint32_t command, int page_number)
{
    33f8:	b538      	push	{r3, r4, r5, lr}
    33fa:	4605      	mov	r5, r0
    33fc:	460c      	mov	r4, r1
	uint32_t tempo;

	flashcalw_wait_until_ready();
    33fe:	f240 0348 	movw	r3, #72	; 0x48
    3402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3406:	6818      	ldr	r0, [r3, #0]
    3408:	4780      	blx	r0
	tempo = HFLASHC->FLASHCALW_FCMD;
    340a:	f04f 0100 	mov.w	r1, #0
    340e:	f2c4 010a 	movt	r1, #16394	; 0x400a
    3412:	684a      	ldr	r2, [r1, #4]
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
	if (page_number >= 0) {
    3414:	2c00      	cmp	r4, #0
    3416:	db07      	blt.n	3428 <flashcalw_issue_command+0x30>
		tempo = (FLASHCALW_FCMD_KEY_KEY
				| FLASHCALW_FCMD_PAGEN(page_number) | command);
    3418:	f045 4525 	orr.w	r5, r5, #2768240640	; 0xa5000000
    341c:	ea4f 2404 	mov.w	r4, r4, lsl #8
    3420:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	flashcalw_wait_until_ready();
	tempo = HFLASHC->FLASHCALW_FCMD;
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
	if (page_number >= 0) {
		tempo = (FLASHCALW_FCMD_KEY_KEY
    3424:	4325      	orrs	r5, r4
    3426:	e004      	b.n	3432 <flashcalw_issue_command+0x3a>
	uint32_t tempo;

	flashcalw_wait_until_ready();
	tempo = HFLASHC->FLASHCALW_FCMD;
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
    3428:	f022 033f 	bic.w	r3, r2, #63	; 0x3f
	if (page_number >= 0) {
		tempo = (FLASHCALW_FCMD_KEY_KEY
				| FLASHCALW_FCMD_PAGEN(page_number) | command);
	} else {
		tempo |= (FLASHCALW_FCMD_KEY_KEY | command);
    342c:	f043 4025 	orr.w	r0, r3, #2768240640	; 0xa5000000
    3430:	4305      	orrs	r5, r0
	}

	HFLASHC->FLASHCALW_FCMD = tempo;
    3432:	f04f 0100 	mov.w	r1, #0
    3436:	f2c4 010a 	movt	r1, #16394	; 0x400a
    343a:	604d      	str	r5, [r1, #4]
 *          the driver's API which instead presents \ref flashcalw_is_lock_error
 *          and \ref flashcalw_is_programming_error.
 */
static uint32_t flashcalw_get_error_status(void)
{
	return HFLASHC->FLASHCALW_FSR &
    343c:	688a      	ldr	r2, [r1, #8]
    343e:	f002 000c 	and.w	r0, r2, #12
	} else {
		tempo |= (FLASHCALW_FCMD_KEY_KEY | command);
	}

	HFLASHC->FLASHCALW_FCMD = tempo;
	flashcalw_error_status = flashcalw_get_error_status();
    3442:	f640 13d4 	movw	r3, #2516	; 0x9d4
    3446:	f2c2 0300 	movt	r3, #8192	; 0x2000
    344a:	6018      	str	r0, [r3, #0]
	flashcalw_wait_until_ready();
    344c:	f240 0148 	movw	r1, #72	; 0x48
    3450:	f2c2 0100 	movt	r1, #8192	; 0x2000
    3454:	680a      	ldr	r2, [r1, #0]
    3456:	4790      	blx	r2
    3458:	bd38      	pop	{r3, r4, r5, pc}
    345a:	bf00      	nop

0000345c <flashcalw_set_flash_waitstate_and_readmode>:
 * \param ps_value Power Scaling mode value (0, 1)
 * \param is_fwu_enabled (boolean), Is fast wakeup mode enabled or not
 */
void flashcalw_set_flash_waitstate_and_readmode(uint32_t cpu_f_hz,
		uint32_t ps_value, bool is_fwu_enabled)
{
    345c:	b508      	push	{r3, lr}
	}

	/* Enable the high-speed read mode. */
	flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSEN, -1);
#else
	if (ps_value == 0) {
    345e:	2900      	cmp	r1, #0
    3460:	d156      	bne.n	3510 <flashcalw_set_flash_waitstate_and_readmode+0xb4>
		if (cpu_f_hz > FLASH_FREQ_PS0_FWS_0_MAX_FREQ) {
    3462:	f64a 0380 	movw	r3, #43136	; 0xa880
    3466:	f2c0 1312 	movt	r3, #274	; 0x112
    346a:	4298      	cmp	r0, r3
    346c:	d927      	bls.n	34be <flashcalw_set_flash_waitstate_and_readmode+0x62>
			// > 18MHz
			if (cpu_f_hz <= FLASH_FREQ_PS0_FWS_1_MAX_FREQ) {
    346e:	f44f 43a2 	mov.w	r3, #20736	; 0x5100
    3472:	f2c0 2325 	movt	r3, #549	; 0x225
    3476:	4298      	cmp	r0, r3
    3478:	d810      	bhi.n	349c <flashcalw_set_flash_waitstate_and_readmode+0x40>
				// <= 36MHz
				/* Set a wait-state, disable the high-speed read
				 * mode. */
				flashcalw_set_wait_state(1);
    347a:	f04f 0001 	mov.w	r0, #1
    347e:	f243 33b1 	movw	r3, #13233	; 0x33b1
    3482:	f2c0 0300 	movt	r3, #0
    3486:	4798      	blx	r3
				flashcalw_issue_command(
    3488:	f04f 0011 	mov.w	r0, #17
    348c:	f04f 31ff 	mov.w	r1, #4294967295
    3490:	f243 32f9 	movw	r2, #13305	; 0x33f9
    3494:	f2c0 0200 	movt	r2, #0
    3498:	4790      	blx	r2
    349a:	bd08      	pop	{r3, pc}
						FLASHCALW_FCMD_CMD_HSDIS, -1);
			} else {
				// > 36 MHz
				/* Set a wait-state, enable the high-speed read
				mode. */
				flashcalw_set_wait_state(1);
    349c:	f04f 0001 	mov.w	r0, #1
    34a0:	f243 31b1 	movw	r1, #13233	; 0x33b1
    34a4:	f2c0 0100 	movt	r1, #0
    34a8:	4788      	blx	r1
				flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSEN,
    34aa:	f04f 0010 	mov.w	r0, #16
    34ae:	f04f 31ff 	mov.w	r1, #4294967295
    34b2:	f243 32f9 	movw	r2, #13305	; 0x33f9
    34b6:	f2c0 0200 	movt	r2, #0
    34ba:	4790      	blx	r2
    34bc:	bd08      	pop	{r3, pc}
						-1);
			}
		} else { // <= 18MHz
			if((is_fwu_enabled == true) &&
    34be:	b1b2      	cbz	r2, 34ee <flashcalw_set_flash_waitstate_and_readmode+0x92>
    34c0:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
    34c4:	f2c0 01b7 	movt	r1, #183	; 0xb7
    34c8:	4288      	cmp	r0, r1
    34ca:	d810      	bhi.n	34ee <flashcalw_set_flash_waitstate_and_readmode+0x92>
				(cpu_f_hz <= FLASH_FREQ_PS1_FWS_1_FWU_MAX_FREQ))
			{
				// <= 12MHz
				/* Set a wait-state, disable the high-speed read
				mode. */
				flashcalw_set_wait_state(1);
    34cc:	f04f 0001 	mov.w	r0, #1
    34d0:	f243 31b1 	movw	r1, #13233	; 0x33b1
    34d4:	f2c0 0100 	movt	r1, #0
    34d8:	4788      	blx	r1
				flashcalw_issue_command(
    34da:	f04f 0011 	mov.w	r0, #17
    34de:	f04f 31ff 	mov.w	r1, #4294967295
    34e2:	f243 32f9 	movw	r2, #13305	; 0x33f9
    34e6:	f2c0 0200 	movt	r2, #0
    34ea:	4790      	blx	r2
    34ec:	bd08      	pop	{r3, pc}
						FLASHCALW_FCMD_CMD_HSDIS, -1);
			} else {
				/* No wait-state, disable the high-speed read
				mode */
				flashcalw_set_wait_state(0);
    34ee:	f04f 0000 	mov.w	r0, #0
    34f2:	f243 32b1 	movw	r2, #13233	; 0x33b1
    34f6:	f2c0 0200 	movt	r2, #0
    34fa:	4790      	blx	r2
				flashcalw_issue_command(
    34fc:	f04f 0011 	mov.w	r0, #17
    3500:	f04f 31ff 	mov.w	r1, #4294967295
    3504:	f243 33f9 	movw	r3, #13305	; 0x33f9
    3508:	f2c0 0300 	movt	r3, #0
    350c:	4798      	blx	r3
    350e:	bd08      	pop	{r3, pc}
					FLASHCALW_FCMD_CMD_HSDIS, -1);
			}
		}
	} else { /* ps_value == 1 */
		if (cpu_f_hz > FLASH_FREQ_PS0_FWS_0_MAX_FREQ) { /* > 8MHz */
    3510:	f64a 0380 	movw	r3, #43136	; 0xa880
    3514:	f2c0 1312 	movt	r3, #274	; 0x112
    3518:	4298      	cmp	r0, r3
			/* Set a wait-state. */
			flashcalw_set_wait_state(1);
    351a:	bf8c      	ite	hi
    351c:	2001      	movhi	r0, #1
		} else {
			/* No wait-state. */
			flashcalw_set_wait_state(0);
    351e:	2000      	movls	r0, #0
    3520:	f243 31b1 	movw	r1, #13233	; 0x33b1
    3524:	f2c0 0100 	movt	r1, #0
    3528:	4788      	blx	r1
		}

		/* Disable the high-speed read mode. */
		flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSDIS, -1);
    352a:	f04f 0011 	mov.w	r0, #17
    352e:	f04f 31ff 	mov.w	r1, #4294967295
    3532:	f243 32f9 	movw	r2, #13305	; 0x33f9
    3536:	f2c0 0200 	movt	r2, #0
    353a:	4790      	blx	r2
    353c:	bd08      	pop	{r3, pc}
    353e:	bf00      	nop

00003540 <wdt_set_ctrl>:
 *        to the WatchDog Timer key.
 *
 * \param ctrl  Value to set the WatchDog Timer Control register to.
 */
static void wdt_set_ctrl(uint32_t ctrl)
{
    3540:	b082      	sub	sp, #8
	volatile uint32_t dly;

	/* Calculate delay for internal synchronization, see 44.1.2 WDT errata */
	if ((WDT->WDT_CTRL & WDT_CTRL_CSSEL) == WDT_CLK_SRC_RCSYS) {
    3542:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    3546:	f2c4 030f 	movt	r3, #16399	; 0x400f
    354a:	6819      	ldr	r1, [r3, #0]
    354c:	f411 3f00 	tst.w	r1, #131072	; 0x20000
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RCSYS_NOMINAL_HZ);
    3550:	bf0c      	ite	eq
    3552:	f240 3143 	movweq	r1, #835	; 0x343
	} else { /* WDT_CLK_SRC_32K */
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RC32K_NOMINAL_HZ);
    3556:	f44f 6137 	movne.w	r1, #2928	; 0xb70
    355a:	9101      	str	r1, [sp, #4]
	}
	dly >>= 3; /* ~8 cycles for one while loop */
    355c:	9a01      	ldr	r2, [sp, #4]
    355e:	ea4f 03d2 	mov.w	r3, r2, lsr #3
    3562:	9301      	str	r3, [sp, #4]
	while(dly--);
    3564:	9901      	ldr	r1, [sp, #4]
    3566:	f101 32ff 	add.w	r2, r1, #4294967295
    356a:	9201      	str	r2, [sp, #4]
    356c:	2900      	cmp	r1, #0
    356e:	d1f9      	bne.n	3564 <wdt_set_ctrl+0x24>
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_FIRST_KEY);
    3570:	f040 41aa 	orr.w	r1, r0, #1426063360	; 0x55000000
    3574:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    3578:	f2c4 030f 	movt	r3, #16399	; 0x400f
    357c:	6019      	str	r1, [r3, #0]
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_SECOND_KEY);
    357e:	f040 402a 	orr.w	r0, r0, #2852126720	; 0xaa000000
    3582:	6018      	str	r0, [r3, #0]
}
    3584:	b002      	add	sp, #8
    3586:	4770      	bx	lr

00003588 <wdt_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(cfg);

	/* Default configuration values */
	cfg->clk_src = WDT_CLK_SRC_RCSYS;
    3588:	f04f 0300 	mov.w	r3, #0
    358c:	6003      	str	r3, [r0, #0]
	cfg->wdt_mode = WDT_MODE_BASIC;
    358e:	6043      	str	r3, [r0, #4]
	cfg->timeout_period = WDT_PERIOD_131072_CLK;
    3590:	f04f 0210 	mov.w	r2, #16
    3594:	7202      	strb	r2, [r0, #8]
	cfg->window_period = WDT_PERIOD_NONE;
    3596:	7243      	strb	r3, [r0, #9]
	cfg->disable_flash_cali = true;
    3598:	f04f 0101 	mov.w	r1, #1
    359c:	7281      	strb	r1, [r0, #10]
	cfg->disable_wdt_after_reset = true;
    359e:	72c1      	strb	r1, [r0, #11]
	cfg->always_on = false;
    35a0:	7303      	strb	r3, [r0, #12]
    35a2:	4770      	bx	lr

000035a4 <wdt_init>:
 */
bool wdt_init(
		struct wdt_dev_inst *const dev_inst,
		Wdt *const wdt,
		struct wdt_config *const cfg)
{
    35a4:	b538      	push	{r3, r4, r5, lr}
    35a6:	460c      	mov	r4, r1
    35a8:	4615      	mov	r5, r2
	/* Sanity check arguments */
	Assert(dev_inst);
	Assert(wdt);
	Assert(cfg);

	dev_inst->hw_dev = wdt;
    35aa:	6001      	str	r1, [r0, #0]
	dev_inst->wdt_cfg = cfg;
    35ac:	6042      	str	r2, [r0, #4]

	/* Enable APB clock for WDT */
	sysclk_enable_peripheral_clock(wdt);
    35ae:	4608      	mov	r0, r1
    35b0:	f242 331d 	movw	r3, #8989	; 0x231d
    35b4:	f2c0 0300 	movt	r3, #0
    35b8:	4798      	blx	r3

	/* Check SFV bit: if SFV bit is set, Control Register is locked */
	if (wdt->WDT_CTRL & WDT_CTRL_SFV) {
    35ba:	6820      	ldr	r0, [r4, #0]
    35bc:	f010 0f08 	tst.w	r0, #8
    35c0:	d152      	bne.n	3668 <wdt_init+0xc4>
		return false;
	}

	/* Disable the WDT */
	if (wdt->WDT_CTRL & WDT_CTRL_EN) {
    35c2:	6821      	ldr	r1, [r4, #0]
    35c4:	f011 0f01 	tst.w	r1, #1
    35c8:	d00b      	beq.n	35e2 <wdt_init+0x3e>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    35ca:	6822      	ldr	r2, [r4, #0]
    35cc:	f022 0001 	bic.w	r0, r2, #1
    35d0:	f243 5341 	movw	r3, #13633	; 0x3541
    35d4:	f2c0 0300 	movt	r3, #0
    35d8:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    35da:	6820      	ldr	r0, [r4, #0]
    35dc:	f010 0f01 	tst.w	r0, #1
    35e0:	d1fb      	bne.n	35da <wdt_init+0x36>
		}
	}
	/* Disable the WDT clock */
	if (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    35e2:	6821      	ldr	r1, [r4, #0]
    35e4:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    35e8:	d00b      	beq.n	3602 <wdt_init+0x5e>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_CEN);
    35ea:	6822      	ldr	r2, [r4, #0]
    35ec:	f422 3080 	bic.w	r0, r2, #65536	; 0x10000
    35f0:	f243 5341 	movw	r3, #13633	; 0x3541
    35f4:	f2c0 0300 	movt	r3, #0
    35f8:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    35fa:	6820      	ldr	r0, [r4, #0]
    35fc:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    3600:	d1fb      	bne.n	35fa <wdt_init+0x56>
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
    3602:	6869      	ldr	r1, [r5, #4]
    3604:	682a      	ldr	r2, [r5, #0]
    3606:	ea41 0302 	orr.w	r3, r1, r2
			cfg->wdt_mode |
			WDT_CTRL_PSEL(cfg->timeout_period) |
    360a:	7a28      	ldrb	r0, [r5, #8]
    360c:	ea4f 2100 	mov.w	r1, r0, lsl #8
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
			cfg->wdt_mode |
    3610:	f401 52f8 	and.w	r2, r1, #7936	; 0x1f00
    3614:	ea43 0002 	orr.w	r0, r3, r2
			WDT_CTRL_PSEL(cfg->timeout_period) |
			WDT_CTRL_TBAN(cfg->window_period) |
    3618:	7a6b      	ldrb	r3, [r5, #9]
    361a:	ea4f 4183 	mov.w	r1, r3, lsl #18
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
			cfg->wdt_mode |
			WDT_CTRL_PSEL(cfg->timeout_period) |
    361e:	f401 02f8 	and.w	r2, r1, #8126464	; 0x7c0000
    3622:	4310      	orrs	r0, r2
			WDT_CTRL_TBAN(cfg->window_period) |
    3624:	7aab      	ldrb	r3, [r5, #10]
    3626:	2b00      	cmp	r3, #0
    3628:	bf14      	ite	ne
    362a:	2180      	movne	r1, #128	; 0x80
    362c:	2100      	moveq	r1, #0
    362e:	4308      	orrs	r0, r1
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
    3630:	7aed      	ldrb	r5, [r5, #11]
    3632:	2d00      	cmp	r5, #0
    3634:	bf14      	ite	ne
    3636:	2202      	movne	r2, #2
    3638:	2200      	moveq	r2, #0
    363a:	4310      	orrs	r0, r2
    363c:	f243 5541 	movw	r5, #13633	; 0x3541
    3640:	f2c0 0500 	movt	r5, #0
    3644:	47a8      	blx	r5
			WDT_CTRL_PSEL(cfg->timeout_period) |
			WDT_CTRL_TBAN(cfg->window_period) |
			(cfg->disable_flash_cali ? WDT_CTRL_FCD : 0) |
			(cfg->disable_wdt_after_reset ? WDT_CTRL_DAR : 0)
	);
	wdt_set_ctrl(wdt->WDT_CTRL | WDT_CTRL_CEN);
    3646:	6820      	ldr	r0, [r4, #0]
    3648:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
    364c:	47a8      	blx	r5
	while (!(wdt->WDT_CTRL & WDT_CTRL_CEN)) {
    364e:	6823      	ldr	r3, [r4, #0]
    3650:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3654:	d0fb      	beq.n	364e <wdt_init+0xaa>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    3656:	4620      	mov	r0, r4
    3658:	f642 11fd 	movw	r1, #10749	; 0x29fd
    365c:	f2c0 0100 	movt	r1, #0
    3660:	4788      	blx	r1

	return true;
    3662:	f04f 0001 	mov.w	r0, #1
    3666:	bd38      	pop	{r3, r4, r5, pc}
	/* Enable APB clock for WDT */
	sysclk_enable_peripheral_clock(wdt);

	/* Check SFV bit: if SFV bit is set, Control Register is locked */
	if (wdt->WDT_CTRL & WDT_CTRL_SFV) {
		return false;
    3668:	f04f 0000 	mov.w	r0, #0

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);

	return true;
}
    366c:	bd38      	pop	{r3, r4, r5, pc}
    366e:	bf00      	nop

00003670 <wdt_disable>:
 * \brief Disable the WDT module.
 *
 * \param dev_inst    Device structure pointer.
 */
void wdt_disable(struct wdt_dev_inst *const dev_inst)
{
    3670:	b510      	push	{r4, lr}
	Wdt *wdt = dev_inst->hw_dev;
    3672:	6804      	ldr	r4, [r0, #0]

	/* Disable the WDT */
	wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    3674:	6820      	ldr	r0, [r4, #0]
    3676:	f020 0001 	bic.w	r0, r0, #1
    367a:	f243 5341 	movw	r3, #13633	; 0x3541
    367e:	f2c0 0300 	movt	r3, #0
    3682:	4798      	blx	r3
	while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    3684:	6821      	ldr	r1, [r4, #0]
    3686:	f011 0f01 	tst.w	r1, #1
    368a:	d1fb      	bne.n	3684 <wdt_disable+0x14>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    368c:	4620      	mov	r0, r4
    368e:	f642 12fd 	movw	r2, #10749	; 0x29fd
    3692:	f2c0 0200 	movt	r2, #0
    3696:	4790      	blx	r2
    3698:	bd10      	pop	{r4, pc}
    369a:	bf00      	nop

0000369c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    369c:	e7fe      	b.n	369c <Dummy_Handler>
    369e:	bf00      	nop

000036a0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    36a0:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
    36a2:	f240 0300 	movw	r3, #0
    36a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36aa:	f246 2284 	movw	r2, #25220	; 0x6284
    36ae:	f2c0 0200 	movt	r2, #0
    36b2:	429a      	cmp	r2, r3
    36b4:	d003      	beq.n	36be <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
    36b6:	4839      	ldr	r0, [pc, #228]	; (379c <Reset_Handler+0xfc>)
    36b8:	4939      	ldr	r1, [pc, #228]	; (37a0 <Reset_Handler+0x100>)
    36ba:	4281      	cmp	r1, r0
    36bc:	d304      	bcc.n	36c8 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    36be:	4b39      	ldr	r3, [pc, #228]	; (37a4 <Reset_Handler+0x104>)
    36c0:	4a39      	ldr	r2, [pc, #228]	; (37a8 <Reset_Handler+0x108>)
    36c2:	429a      	cmp	r2, r3
    36c4:	d325      	bcc.n	3712 <Reset_Handler+0x72>
    36c6:	e042      	b.n	374e <Reset_Handler+0xae>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
    36c8:	4d38      	ldr	r5, [pc, #224]	; (37ac <Reset_Handler+0x10c>)
    36ca:	4c39      	ldr	r4, [pc, #228]	; (37b0 <Reset_Handler+0x110>)
    36cc:	1b63      	subs	r3, r4, r5
    36ce:	f023 0503 	bic.w	r5, r3, #3
    36d2:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
    36d6:	f240 0200 	movw	r2, #0
    36da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36de:	f246 2184 	movw	r1, #25220	; 0x6284
    36e2:	f2c0 0100 	movt	r1, #0
    36e6:	f105 0004 	add.w	r0, r5, #4
    36ea:	f3c5 0480 	ubfx	r4, r5, #2, #1
    36ee:	585d      	ldr	r5, [r3, r1]
    36f0:	509d      	str	r5, [r3, r2]
    36f2:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    36f6:	4283      	cmp	r3, r0
    36f8:	d146      	bne.n	3788 <Reset_Handler+0xe8>
    36fa:	e7e0      	b.n	36be <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
    36fc:	585d      	ldr	r5, [r3, r1]
    36fe:	509d      	str	r5, [r3, r2]
    3700:	f103 0304 	add.w	r3, r3, #4
    3704:	585c      	ldr	r4, [r3, r1]
    3706:	509c      	str	r4, [r3, r2]
    3708:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    370c:	4283      	cmp	r3, r0
    370e:	d1f5      	bne.n	36fc <Reset_Handler+0x5c>
    3710:	e7d5      	b.n	36be <Reset_Handler+0x1e>
    3712:	4d28      	ldr	r5, [pc, #160]	; (37b4 <Reset_Handler+0x114>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
    3714:	4928      	ldr	r1, [pc, #160]	; (37b8 <Reset_Handler+0x118>)
    3716:	1b48      	subs	r0, r1, r5
    3718:	f020 0403 	bic.w	r4, r0, #3
    371c:	f640 1310 	movw	r3, #2320	; 0x910
    3720:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3724:	18e2      	adds	r2, r4, r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
    3726:	f04f 0100 	mov.w	r1, #0
    372a:	1b50      	subs	r0, r2, r5
    372c:	f1a0 0004 	sub.w	r0, r0, #4
    3730:	f3c0 0480 	ubfx	r4, r0, #2, #1
    3734:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    3738:	4295      	cmp	r5, r2
    373a:	d11e      	bne.n	377a <Reset_Handler+0xda>
    373c:	e007      	b.n	374e <Reset_Handler+0xae>
    373e:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
    3742:	6069      	str	r1, [r5, #4]
    3744:	f105 0508 	add.w	r5, r5, #8
    3748:	6059      	str	r1, [r3, #4]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    374a:	4295      	cmp	r5, r2
    374c:	d1f7      	bne.n	373e <Reset_Handler+0x9e>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) &_sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    374e:	f240 0500 	movw	r5, #0
    3752:	f2c0 0500 	movt	r5, #0
    3756:	f025 027f 	bic.w	r2, r5, #127	; 0x7f
    375a:	f44f 416d 	mov.w	r1, #60672	; 0xed00
    375e:	f2ce 0100 	movt	r1, #57344	; 0xe000
    3762:	608a      	str	r2, [r1, #8]

	/* Initialize the C library */
	__libc_init_array();
    3764:	f643 00d9 	movw	r0, #14553	; 0x38d9
    3768:	f2c0 0000 	movt	r0, #0
    376c:	4780      	blx	r0

	/* Branch to main function */
	main();
    376e:	f641 14bd 	movw	r4, #6589	; 0x19bd
    3772:	f2c0 0400 	movt	r4, #0
    3776:	47a0      	blx	r4
    3778:	e7fe      	b.n	3778 <Reset_Handler+0xd8>
    377a:	2c00      	cmp	r4, #0
    377c:	d0df      	beq.n	373e <Reset_Handler+0x9e>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
    377e:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    3782:	4295      	cmp	r5, r2
    3784:	d1db      	bne.n	373e <Reset_Handler+0x9e>
    3786:	e7e2      	b.n	374e <Reset_Handler+0xae>
    3788:	2c00      	cmp	r4, #0
    378a:	d0b7      	beq.n	36fc <Reset_Handler+0x5c>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
    378c:	585c      	ldr	r4, [r3, r1]
    378e:	509c      	str	r4, [r3, r2]
    3790:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    3794:	4283      	cmp	r3, r0
    3796:	d1b1      	bne.n	36fc <Reset_Handler+0x5c>
    3798:	e791      	b.n	36be <Reset_Handler+0x1e>
    379a:	bf00      	nop
    379c:	20000910 	.word	0x20000910
    37a0:	20000000 	.word	0x20000000
    37a4:	20000aa8 	.word	0x20000aa8
    37a8:	20000910 	.word	0x20000910
    37ac:	20000004 	.word	0x20000004
    37b0:	20000913 	.word	0x20000913
    37b4:	2000090c 	.word	0x2000090c
    37b8:	20000aa3 	.word	0x20000aa3

000037bc <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    37bc:	f640 13d8 	movw	r3, #2520	; 0x9d8
    37c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37c4:	6819      	ldr	r1, [r3, #0]
    37c6:	b941      	cbnz	r1, 37da <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
    37c8:	f640 13d8 	movw	r3, #2520	; 0x9d8
    37cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37d0:	f641 22a8 	movw	r2, #6824	; 0x1aa8
    37d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37d8:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    37da:	f640 11d8 	movw	r1, #2520	; 0x9d8
    37de:	f2c2 0100 	movt	r1, #8192	; 0x2000
    37e2:	680b      	ldr	r3, [r1, #0]

	heap += incr;
    37e4:	1818      	adds	r0, r3, r0
    37e6:	6008      	str	r0, [r1, #0]

	return (caddr_t) prev_heap;
}
    37e8:	4618      	mov	r0, r3
    37ea:	4770      	bx	lr

000037ec <_close>:
}

extern int _close(int file)
{
	return -1;
}
    37ec:	f04f 30ff 	mov.w	r0, #4294967295
    37f0:	4770      	bx	lr
    37f2:	bf00      	nop

000037f4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    37f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    37f8:	604b      	str	r3, [r1, #4]

	return 0;
}
    37fa:	f04f 0000 	mov.w	r0, #0
    37fe:	4770      	bx	lr

00003800 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    3800:	f04f 0001 	mov.w	r0, #1
    3804:	4770      	bx	lr
    3806:	bf00      	nop

00003808 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    3808:	f04f 0000 	mov.w	r0, #0
    380c:	4770      	bx	lr
    380e:	bf00      	nop

00003810 <__register_exitproc>:
    3810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3814:	4698      	mov	r8, r3
    3816:	4b23      	ldr	r3, [pc, #140]	; (38a4 <__register_exitproc+0x94>)
    3818:	681c      	ldr	r4, [r3, #0]
    381a:	4606      	mov	r6, r0
    381c:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    3820:	460f      	mov	r7, r1
    3822:	4691      	mov	r9, r2
    3824:	b918      	cbnz	r0, 382e <__register_exitproc+0x1e>
    3826:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
    382a:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    382e:	6841      	ldr	r1, [r0, #4]
    3830:	291f      	cmp	r1, #31
    3832:	dd16      	ble.n	3862 <__register_exitproc+0x52>
    3834:	481c      	ldr	r0, [pc, #112]	; (38a8 <__register_exitproc+0x98>)
    3836:	b918      	cbnz	r0, 3840 <__register_exitproc+0x30>
    3838:	f04f 30ff 	mov.w	r0, #4294967295
    383c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3840:	f44f 70c8 	mov.w	r0, #400	; 0x190
    3844:	f001 fb84 	bl	4f50 <malloc>
    3848:	2800      	cmp	r0, #0
    384a:	d0f5      	beq.n	3838 <__register_exitproc+0x28>
    384c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    3850:	2500      	movs	r5, #0
    3852:	6045      	str	r5, [r0, #4]
    3854:	6002      	str	r2, [r0, #0]
    3856:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    385a:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
    385e:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
    3862:	b1b6      	cbz	r6, 3892 <__register_exitproc+0x82>
    3864:	6844      	ldr	r4, [r0, #4]
    3866:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    386a:	2201      	movs	r2, #1
    386c:	eb00 0384 	add.w	r3, r0, r4, lsl #2
    3870:	fa02 f204 	lsl.w	r2, r2, r4
    3874:	4311      	orrs	r1, r2
    3876:	2e02      	cmp	r6, #2
    3878:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
    387c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    3880:	461c      	mov	r4, r3
    3882:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
    3886:	d104      	bne.n	3892 <__register_exitproc+0x82>
    3888:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
    388c:	431a      	orrs	r2, r3
    388e:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
    3892:	6841      	ldr	r1, [r0, #4]
    3894:	1c8b      	adds	r3, r1, #2
    3896:	1c4a      	adds	r2, r1, #1
    3898:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    389c:	6042      	str	r2, [r0, #4]
    389e:	2000      	movs	r0, #0
    38a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    38a4:	00006204 	.word	0x00006204
    38a8:	00004f51 	.word	0x00004f51

000038ac <__libc_fini_array>:
    38ac:	b570      	push	{r4, r5, r6, lr}
    38ae:	4b08      	ldr	r3, [pc, #32]	; (38d0 <__libc_fini_array+0x24>)
    38b0:	4c08      	ldr	r4, [pc, #32]	; (38d4 <__libc_fini_array+0x28>)
    38b2:	1ae0      	subs	r0, r4, r3
    38b4:	1084      	asrs	r4, r0, #2
    38b6:	eb03 0684 	add.w	r6, r3, r4, lsl #2
    38ba:	2500      	movs	r5, #0
    38bc:	3d04      	subs	r5, #4
    38be:	b11c      	cbz	r4, 38c8 <__libc_fini_array+0x1c>
    38c0:	5972      	ldr	r2, [r6, r5]
    38c2:	4790      	blx	r2
    38c4:	3c01      	subs	r4, #1
    38c6:	e7f9      	b.n	38bc <__libc_fini_array+0x10>
    38c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    38cc:	f002 bcce 	b.w	626c <_fini>
    38d0:	00006278 	.word	0x00006278
    38d4:	0000627c 	.word	0x0000627c

000038d8 <__libc_init_array>:
    38d8:	b538      	push	{r3, r4, r5, lr}
    38da:	4d0e      	ldr	r5, [pc, #56]	; (3914 <__libc_init_array+0x3c>)
    38dc:	4b0e      	ldr	r3, [pc, #56]	; (3918 <__libc_init_array+0x40>)
    38de:	1ae8      	subs	r0, r5, r3
    38e0:	1085      	asrs	r5, r0, #2
    38e2:	2400      	movs	r4, #0
    38e4:	42ac      	cmp	r4, r5
    38e6:	d005      	beq.n	38f4 <__libc_init_array+0x1c>
    38e8:	490b      	ldr	r1, [pc, #44]	; (3918 <__libc_init_array+0x40>)
    38ea:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
    38ee:	4790      	blx	r2
    38f0:	3401      	adds	r4, #1
    38f2:	e7f7      	b.n	38e4 <__libc_init_array+0xc>
    38f4:	f002 fcb0 	bl	6258 <_init>
    38f8:	4908      	ldr	r1, [pc, #32]	; (391c <__libc_init_array+0x44>)
    38fa:	4a09      	ldr	r2, [pc, #36]	; (3920 <__libc_init_array+0x48>)
    38fc:	1a54      	subs	r4, r2, r1
    38fe:	10a5      	asrs	r5, r4, #2
    3900:	2400      	movs	r4, #0
    3902:	42ac      	cmp	r4, r5
    3904:	d005      	beq.n	3912 <__libc_init_array+0x3a>
    3906:	4b05      	ldr	r3, [pc, #20]	; (391c <__libc_init_array+0x44>)
    3908:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    390c:	4780      	blx	r0
    390e:	3401      	adds	r4, #1
    3910:	e7f7      	b.n	3902 <__libc_init_array+0x2a>
    3912:	bd38      	pop	{r3, r4, r5, pc}
    3914:	00006264 	.word	0x00006264
    3918:	00006264 	.word	0x00006264
    391c:	00006264 	.word	0x00006264
    3920:	0000626c 	.word	0x0000626c

00003924 <iprintf>:
    3924:	b40f      	push	{r0, r1, r2, r3}
    3926:	b507      	push	{r0, r1, r2, lr}
    3928:	4906      	ldr	r1, [pc, #24]	; (3944 <iprintf+0x20>)
    392a:	ab04      	add	r3, sp, #16
    392c:	6808      	ldr	r0, [r1, #0]
    392e:	f853 2b04 	ldr.w	r2, [r3], #4
    3932:	6881      	ldr	r1, [r0, #8]
    3934:	9301      	str	r3, [sp, #4]
    3936:	f000 f911 	bl	3b5c <_vfiprintf_r>
    393a:	e8bd 400e 	ldmia.w	sp!, {r1, r2, r3, lr}
    393e:	b004      	add	sp, #16
    3940:	4770      	bx	lr
    3942:	bf00      	nop
    3944:	20000050 	.word	0x20000050

00003948 <_iprintf_r>:
    3948:	b40e      	push	{r1, r2, r3}
    394a:	b503      	push	{r0, r1, lr}
    394c:	ab03      	add	r3, sp, #12
    394e:	6881      	ldr	r1, [r0, #8]
    3950:	f853 2b04 	ldr.w	r2, [r3], #4
    3954:	9301      	str	r3, [sp, #4]
    3956:	f000 f901 	bl	3b5c <_vfiprintf_r>
    395a:	e8bd 400c 	ldmia.w	sp!, {r2, r3, lr}
    395e:	b003      	add	sp, #12
    3960:	4770      	bx	lr
    3962:	bf00      	nop

00003964 <memset>:
    3964:	1882      	adds	r2, r0, r2
    3966:	4603      	mov	r3, r0
    3968:	4293      	cmp	r3, r2
    396a:	d002      	beq.n	3972 <memset+0xe>
    396c:	f803 1b01 	strb.w	r1, [r3], #1
    3970:	e7fa      	b.n	3968 <memset+0x4>
    3972:	4770      	bx	lr

00003974 <_puts_r>:
    3974:	b530      	push	{r4, r5, lr}
    3976:	4605      	mov	r5, r0
    3978:	b089      	sub	sp, #36	; 0x24
    397a:	4608      	mov	r0, r1
    397c:	460c      	mov	r4, r1
    397e:	f000 f8b1 	bl	3ae4 <strlen>
    3982:	2101      	movs	r1, #1
    3984:	1843      	adds	r3, r0, r1
    3986:	9107      	str	r1, [sp, #28]
    3988:	4911      	ldr	r1, [pc, #68]	; (39d0 <_puts_r+0x5c>)
    398a:	9303      	str	r3, [sp, #12]
    398c:	680b      	ldr	r3, [r1, #0]
    398e:	4a11      	ldr	r2, [pc, #68]	; (39d4 <_puts_r+0x60>)
    3990:	9005      	str	r0, [sp, #20]
    3992:	a804      	add	r0, sp, #16
    3994:	9001      	str	r0, [sp, #4]
    3996:	6898      	ldr	r0, [r3, #8]
    3998:	9206      	str	r2, [sp, #24]
    399a:	2202      	movs	r2, #2
    399c:	9202      	str	r2, [sp, #8]
    399e:	8982      	ldrh	r2, [r0, #12]
    39a0:	9404      	str	r4, [sp, #16]
    39a2:	f402 5100 	and.w	r1, r2, #8192	; 0x2000
    39a6:	b20b      	sxth	r3, r1
    39a8:	b933      	cbnz	r3, 39b8 <_puts_r+0x44>
    39aa:	6e41      	ldr	r1, [r0, #100]	; 0x64
    39ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    39b0:	f421 5300 	bic.w	r3, r1, #8192	; 0x2000
    39b4:	8182      	strh	r2, [r0, #12]
    39b6:	6643      	str	r3, [r0, #100]	; 0x64
    39b8:	4628      	mov	r0, r5
    39ba:	68a9      	ldr	r1, [r5, #8]
    39bc:	aa01      	add	r2, sp, #4
    39be:	f001 f879 	bl	4ab4 <__sfvwrite_r>
    39c2:	2800      	cmp	r0, #0
    39c4:	bf0c      	ite	eq
    39c6:	200a      	moveq	r0, #10
    39c8:	f04f 30ff 	movne.w	r0, #4294967295
    39cc:	b009      	add	sp, #36	; 0x24
    39ce:	bd30      	pop	{r4, r5, pc}
    39d0:	20000050 	.word	0x20000050
    39d4:	0000620a 	.word	0x0000620a

000039d8 <puts>:
    39d8:	4b02      	ldr	r3, [pc, #8]	; (39e4 <puts+0xc>)
    39da:	4601      	mov	r1, r0
    39dc:	6818      	ldr	r0, [r3, #0]
    39de:	f7ff bfc9 	b.w	3974 <_puts_r>
    39e2:	bf00      	nop
    39e4:	20000050 	.word	0x20000050

000039e8 <setbuf>:
    39e8:	2900      	cmp	r1, #0
    39ea:	bf0c      	ite	eq
    39ec:	2202      	moveq	r2, #2
    39ee:	2200      	movne	r2, #0
    39f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    39f4:	f000 b800 	b.w	39f8 <setvbuf>

000039f8 <setvbuf>:
    39f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    39fc:	461d      	mov	r5, r3
    39fe:	4b37      	ldr	r3, [pc, #220]	; (3adc <setvbuf+0xe4>)
    3a00:	4604      	mov	r4, r0
    3a02:	6818      	ldr	r0, [r3, #0]
    3a04:	460e      	mov	r6, r1
    3a06:	4617      	mov	r7, r2
    3a08:	4698      	mov	r8, r3
    3a0a:	b118      	cbz	r0, 3a14 <setvbuf+0x1c>
    3a0c:	6b82      	ldr	r2, [r0, #56]	; 0x38
    3a0e:	b90a      	cbnz	r2, 3a14 <setvbuf+0x1c>
    3a10:	f000 fe5c 	bl	46cc <__sinit>
    3a14:	2f02      	cmp	r7, #2
    3a16:	d85d      	bhi.n	3ad4 <setvbuf+0xdc>
    3a18:	2d00      	cmp	r5, #0
    3a1a:	db5b      	blt.n	3ad4 <setvbuf+0xdc>
    3a1c:	4621      	mov	r1, r4
    3a1e:	f8d8 0000 	ldr.w	r0, [r8]
    3a22:	f000 fd5f 	bl	44e4 <_fflush_r>
    3a26:	89a1      	ldrh	r1, [r4, #12]
    3a28:	f001 0380 	and.w	r3, r1, #128	; 0x80
    3a2c:	2000      	movs	r0, #0
    3a2e:	b21a      	sxth	r2, r3
    3a30:	6060      	str	r0, [r4, #4]
    3a32:	61a0      	str	r0, [r4, #24]
    3a34:	b122      	cbz	r2, 3a40 <setvbuf+0x48>
    3a36:	4829      	ldr	r0, [pc, #164]	; (3adc <setvbuf+0xe4>)
    3a38:	6921      	ldr	r1, [r4, #16]
    3a3a:	6800      	ldr	r0, [r0, #0]
    3a3c:	f000 ff84 	bl	4948 <_free_r>
    3a40:	89a1      	ldrh	r1, [r4, #12]
    3a42:	2f02      	cmp	r7, #2
    3a44:	f021 0383 	bic.w	r3, r1, #131	; 0x83
    3a48:	81a3      	strh	r3, [r4, #12]
    3a4a:	d012      	beq.n	3a72 <setvbuf+0x7a>
    3a4c:	bb36      	cbnz	r6, 3a9c <setvbuf+0xa4>
    3a4e:	2d00      	cmp	r5, #0
    3a50:	bf08      	it	eq
    3a52:	f44f 6580 	moveq.w	r5, #1024	; 0x400
    3a56:	4628      	mov	r0, r5
    3a58:	f001 fa7a 	bl	4f50 <malloc>
    3a5c:	4606      	mov	r6, r0
    3a5e:	b9c8      	cbnz	r0, 3a94 <setvbuf+0x9c>
    3a60:	f44f 6080 	mov.w	r0, #1024	; 0x400
    3a64:	f001 fa74 	bl	4f50 <malloc>
    3a68:	4606      	mov	r6, r0
    3a6a:	b988      	cbnz	r0, 3a90 <setvbuf+0x98>
    3a6c:	f04f 30ff 	mov.w	r0, #4294967295
    3a70:	e000      	b.n	3a74 <setvbuf+0x7c>
    3a72:	2000      	movs	r0, #0
    3a74:	89a1      	ldrh	r1, [r4, #12]
    3a76:	f041 0302 	orr.w	r3, r1, #2
    3a7a:	81a3      	strh	r3, [r4, #12]
    3a7c:	f104 0143 	add.w	r1, r4, #67	; 0x43
    3a80:	2200      	movs	r2, #0
    3a82:	2301      	movs	r3, #1
    3a84:	60a2      	str	r2, [r4, #8]
    3a86:	6021      	str	r1, [r4, #0]
    3a88:	6121      	str	r1, [r4, #16]
    3a8a:	6163      	str	r3, [r4, #20]
    3a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3a90:	f44f 6580 	mov.w	r5, #1024	; 0x400
    3a94:	89a2      	ldrh	r2, [r4, #12]
    3a96:	f042 0080 	orr.w	r0, r2, #128	; 0x80
    3a9a:	81a0      	strh	r0, [r4, #12]
    3a9c:	2f01      	cmp	r7, #1
    3a9e:	d105      	bne.n	3aac <setvbuf+0xb4>
    3aa0:	89a1      	ldrh	r1, [r4, #12]
    3aa2:	426a      	negs	r2, r5
    3aa4:	f041 0301 	orr.w	r3, r1, #1
    3aa8:	81a3      	strh	r3, [r4, #12]
    3aaa:	61a2      	str	r2, [r4, #24]
    3aac:	480b      	ldr	r0, [pc, #44]	; (3adc <setvbuf+0xe4>)
    3aae:	89a2      	ldrh	r2, [r4, #12]
    3ab0:	6801      	ldr	r1, [r0, #0]
    3ab2:	4b0b      	ldr	r3, [pc, #44]	; (3ae0 <setvbuf+0xe8>)
    3ab4:	f002 0008 	and.w	r0, r2, #8
    3ab8:	b200      	sxth	r0, r0
    3aba:	63cb      	str	r3, [r1, #60]	; 0x3c
    3abc:	6026      	str	r6, [r4, #0]
    3abe:	6126      	str	r6, [r4, #16]
    3ac0:	6165      	str	r5, [r4, #20]
    3ac2:	b148      	cbz	r0, 3ad8 <setvbuf+0xe0>
    3ac4:	f012 0f03 	tst.w	r2, #3
    3ac8:	bf18      	it	ne
    3aca:	2500      	movne	r5, #0
    3acc:	60a5      	str	r5, [r4, #8]
    3ace:	2000      	movs	r0, #0
    3ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3ad4:	f04f 30ff 	mov.w	r0, #4294967295
    3ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3adc:	20000050 	.word	0x20000050
    3ae0:	00004641 	.word	0x00004641

00003ae4 <strlen>:
    3ae4:	4603      	mov	r3, r0
    3ae6:	f813 2b01 	ldrb.w	r2, [r3], #1
    3aea:	2a00      	cmp	r2, #0
    3aec:	d1fb      	bne.n	3ae6 <strlen+0x2>
    3aee:	1a18      	subs	r0, r3, r0
    3af0:	3801      	subs	r0, #1
    3af2:	4770      	bx	lr

00003af4 <__sprint_r>:
    3af4:	6893      	ldr	r3, [r2, #8]
    3af6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3afa:	4681      	mov	r9, r0
    3afc:	460f      	mov	r7, r1
    3afe:	4614      	mov	r4, r2
    3b00:	b91b      	cbnz	r3, 3b0a <__sprint_r+0x16>
    3b02:	6053      	str	r3, [r2, #4]
    3b04:	4618      	mov	r0, r3
    3b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3b0a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    3b0c:	049b      	lsls	r3, r3, #18
    3b0e:	d51e      	bpl.n	3b4e <__sprint_r+0x5a>
    3b10:	6815      	ldr	r5, [r2, #0]
    3b12:	68a0      	ldr	r0, [r4, #8]
    3b14:	3508      	adds	r5, #8
    3b16:	b1c8      	cbz	r0, 3b4c <__sprint_r+0x58>
    3b18:	f855 1c04 	ldr.w	r1, [r5, #-4]
    3b1c:	f855 ac08 	ldr.w	sl, [r5, #-8]
    3b20:	ea4f 0891 	mov.w	r8, r1, lsr #2
    3b24:	2600      	movs	r6, #0
    3b26:	4546      	cmp	r6, r8
    3b28:	da09      	bge.n	3b3e <__sprint_r+0x4a>
    3b2a:	4648      	mov	r0, r9
    3b2c:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
    3b30:	463a      	mov	r2, r7
    3b32:	f000 fe47 	bl	47c4 <_fputwc_r>
    3b36:	1c43      	adds	r3, r0, #1
    3b38:	d00b      	beq.n	3b52 <__sprint_r+0x5e>
    3b3a:	3601      	adds	r6, #1
    3b3c:	e7f3      	b.n	3b26 <__sprint_r+0x32>
    3b3e:	68a2      	ldr	r2, [r4, #8]
    3b40:	ea4f 0888 	mov.w	r8, r8, lsl #2
    3b44:	ebc8 0302 	rsb	r3, r8, r2
    3b48:	60a3      	str	r3, [r4, #8]
    3b4a:	e7e2      	b.n	3b12 <__sprint_r+0x1e>
    3b4c:	e001      	b.n	3b52 <__sprint_r+0x5e>
    3b4e:	f000 ffb1 	bl	4ab4 <__sfvwrite_r>
    3b52:	2100      	movs	r1, #0
    3b54:	60a1      	str	r1, [r4, #8]
    3b56:	6061      	str	r1, [r4, #4]
    3b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00003b5c <_vfiprintf_r>:
    3b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b60:	4689      	mov	r9, r1
    3b62:	b0a9      	sub	sp, #164	; 0xa4
    3b64:	4614      	mov	r4, r2
    3b66:	461d      	mov	r5, r3
    3b68:	461e      	mov	r6, r3
    3b6a:	4682      	mov	sl, r0
    3b6c:	b118      	cbz	r0, 3b76 <_vfiprintf_r+0x1a>
    3b6e:	6b83      	ldr	r3, [r0, #56]	; 0x38
    3b70:	b90b      	cbnz	r3, 3b76 <_vfiprintf_r+0x1a>
    3b72:	f000 fdab 	bl	46cc <__sinit>
    3b76:	f8b9 000c 	ldrh.w	r0, [r9, #12]
    3b7a:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
    3b7e:	b211      	sxth	r1, r2
    3b80:	b949      	cbnz	r1, 3b96 <_vfiprintf_r+0x3a>
    3b82:	f440 5300 	orr.w	r3, r0, #8192	; 0x2000
    3b86:	f8d9 0064 	ldr.w	r0, [r9, #100]	; 0x64
    3b8a:	f8a9 300c 	strh.w	r3, [r9, #12]
    3b8e:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
    3b92:	f8c9 2064 	str.w	r2, [r9, #100]	; 0x64
    3b96:	f8b9 100c 	ldrh.w	r1, [r9, #12]
    3b9a:	f001 0308 	and.w	r3, r1, #8
    3b9e:	b218      	sxth	r0, r3
    3ba0:	b148      	cbz	r0, 3bb6 <_vfiprintf_r+0x5a>
    3ba2:	f8d9 2010 	ldr.w	r2, [r9, #16]
    3ba6:	b132      	cbz	r2, 3bb6 <_vfiprintf_r+0x5a>
    3ba8:	f8b9 100c 	ldrh.w	r1, [r9, #12]
    3bac:	f001 031a 	and.w	r3, r1, #26
    3bb0:	2b0a      	cmp	r3, #10
    3bb2:	d116      	bne.n	3be2 <_vfiprintf_r+0x86>
    3bb4:	e009      	b.n	3bca <_vfiprintf_r+0x6e>
    3bb6:	4650      	mov	r0, sl
    3bb8:	4649      	mov	r1, r9
    3bba:	f000 fc27 	bl	440c <__swsetup_r>
    3bbe:	2800      	cmp	r0, #0
    3bc0:	d0f2      	beq.n	3ba8 <_vfiprintf_r+0x4c>
    3bc2:	f04f 32ff 	mov.w	r2, #4294967295
    3bc6:	9203      	str	r2, [sp, #12]
    3bc8:	e3d5      	b.n	4376 <_vfiprintf_r+0x81a>
    3bca:	f9b9 000e 	ldrsh.w	r0, [r9, #14]
    3bce:	2800      	cmp	r0, #0
    3bd0:	db07      	blt.n	3be2 <_vfiprintf_r+0x86>
    3bd2:	4650      	mov	r0, sl
    3bd4:	4649      	mov	r1, r9
    3bd6:	4622      	mov	r2, r4
    3bd8:	462b      	mov	r3, r5
    3bda:	f000 fbd0 	bl	437e <__sbprintf>
    3bde:	9003      	str	r0, [sp, #12]
    3be0:	e3c9      	b.n	4376 <_vfiprintf_r+0x81a>
    3be2:	2200      	movs	r2, #0
    3be4:	ad18      	add	r5, sp, #96	; 0x60
    3be6:	950b      	str	r5, [sp, #44]	; 0x2c
    3be8:	920d      	str	r2, [sp, #52]	; 0x34
    3bea:	920c      	str	r2, [sp, #48]	; 0x30
    3bec:	9401      	str	r4, [sp, #4]
    3bee:	9205      	str	r2, [sp, #20]
    3bf0:	9203      	str	r2, [sp, #12]
    3bf2:	46a8      	mov	r8, r5
    3bf4:	9901      	ldr	r1, [sp, #4]
    3bf6:	460c      	mov	r4, r1
    3bf8:	f811 3b01 	ldrb.w	r3, [r1], #1
    3bfc:	b10b      	cbz	r3, 3c02 <_vfiprintf_r+0xa6>
    3bfe:	2b25      	cmp	r3, #37	; 0x25
    3c00:	d1f9      	bne.n	3bf6 <_vfiprintf_r+0x9a>
    3c02:	9a01      	ldr	r2, [sp, #4]
    3c04:	1aa5      	subs	r5, r4, r2
    3c06:	d019      	beq.n	3c3c <_vfiprintf_r+0xe0>
    3c08:	990c      	ldr	r1, [sp, #48]	; 0x30
    3c0a:	980d      	ldr	r0, [sp, #52]	; 0x34
    3c0c:	1c4b      	adds	r3, r1, #1
    3c0e:	e888 0024 	stmia.w	r8, {r2, r5}
    3c12:	2b07      	cmp	r3, #7
    3c14:	eb00 0205 	add.w	r2, r0, r5
    3c18:	920d      	str	r2, [sp, #52]	; 0x34
    3c1a:	f108 0808 	add.w	r8, r8, #8
    3c1e:	930c      	str	r3, [sp, #48]	; 0x30
    3c20:	dd09      	ble.n	3c36 <_vfiprintf_r+0xda>
    3c22:	4650      	mov	r0, sl
    3c24:	4649      	mov	r1, r9
    3c26:	aa0b      	add	r2, sp, #44	; 0x2c
    3c28:	f7ff ff64 	bl	3af4 <__sprint_r>
    3c2c:	2800      	cmp	r0, #0
    3c2e:	f040 839a 	bne.w	4366 <_vfiprintf_r+0x80a>
    3c32:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    3c36:	9803      	ldr	r0, [sp, #12]
    3c38:	1942      	adds	r2, r0, r5
    3c3a:	9203      	str	r2, [sp, #12]
    3c3c:	7821      	ldrb	r1, [r4, #0]
    3c3e:	2900      	cmp	r1, #0
    3c40:	f000 838a 	beq.w	4358 <_vfiprintf_r+0x7fc>
    3c44:	2200      	movs	r2, #0
    3c46:	3401      	adds	r4, #1
    3c48:	9401      	str	r4, [sp, #4]
    3c4a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3c4e:	f04f 3cff 	mov.w	ip, #4294967295
    3c52:	9204      	str	r2, [sp, #16]
    3c54:	4617      	mov	r7, r2
    3c56:	9801      	ldr	r0, [sp, #4]
    3c58:	f810 3b01 	ldrb.w	r3, [r0], #1
    3c5c:	9001      	str	r0, [sp, #4]
    3c5e:	2b63      	cmp	r3, #99	; 0x63
    3c60:	f000 80b3 	beq.w	3dca <_vfiprintf_r+0x26e>
    3c64:	dc33      	bgt.n	3cce <_vfiprintf_r+0x172>
    3c66:	2b39      	cmp	r3, #57	; 0x39
    3c68:	dc1a      	bgt.n	3ca0 <_vfiprintf_r+0x144>
    3c6a:	2b31      	cmp	r3, #49	; 0x31
    3c6c:	f280 8091 	bge.w	3d92 <_vfiprintf_r+0x236>
    3c70:	2b2b      	cmp	r3, #43	; 0x2b
    3c72:	d101      	bne.n	3c78 <_vfiprintf_r+0x11c>
    3c74:	461a      	mov	r2, r3
    3c76:	e7ee      	b.n	3c56 <_vfiprintf_r+0xfa>
    3c78:	dc0a      	bgt.n	3c90 <_vfiprintf_r+0x134>
    3c7a:	2b23      	cmp	r3, #35	; 0x23
    3c7c:	d055      	beq.n	3d2a <_vfiprintf_r+0x1ce>
    3c7e:	2b2a      	cmp	r3, #42	; 0x2a
    3c80:	d056      	beq.n	3d30 <_vfiprintf_r+0x1d4>
    3c82:	2b20      	cmp	r3, #32
    3c84:	f040 81f7 	bne.w	4076 <_vfiprintf_r+0x51a>
    3c88:	2a00      	cmp	r2, #0
    3c8a:	bf08      	it	eq
    3c8c:	2220      	moveq	r2, #32
    3c8e:	e7e2      	b.n	3c56 <_vfiprintf_r+0xfa>
    3c90:	2b2e      	cmp	r3, #46	; 0x2e
    3c92:	d058      	beq.n	3d46 <_vfiprintf_r+0x1ea>
    3c94:	2b30      	cmp	r3, #48	; 0x30
    3c96:	d079      	beq.n	3d8c <_vfiprintf_r+0x230>
    3c98:	2b2d      	cmp	r3, #45	; 0x2d
    3c9a:	f040 81ec 	bne.w	4076 <_vfiprintf_r+0x51a>
    3c9e:	e04f      	b.n	3d40 <_vfiprintf_r+0x1e4>
    3ca0:	2b4f      	cmp	r3, #79	; 0x4f
    3ca2:	f000 80de 	beq.w	3e62 <_vfiprintf_r+0x306>
    3ca6:	dc07      	bgt.n	3cb8 <_vfiprintf_r+0x15c>
    3ca8:	2b44      	cmp	r3, #68	; 0x44
    3caa:	f040 81e4 	bne.w	4076 <_vfiprintf_r+0x51a>
    3cae:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3cb2:	f047 0710 	orr.w	r7, r7, #16
    3cb6:	e090      	b.n	3dda <_vfiprintf_r+0x27e>
    3cb8:	2b55      	cmp	r3, #85	; 0x55
    3cba:	f000 811f 	beq.w	3efc <_vfiprintf_r+0x3a0>
    3cbe:	2b58      	cmp	r3, #88	; 0x58
    3cc0:	f040 81d9 	bne.w	4076 <_vfiprintf_r+0x51a>
    3cc4:	4daf      	ldr	r5, [pc, #700]	; (3f84 <_vfiprintf_r+0x428>)
    3cc6:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3cca:	9505      	str	r5, [sp, #20]
    3ccc:	e131      	b.n	3f32 <_vfiprintf_r+0x3d6>
    3cce:	2b6f      	cmp	r3, #111	; 0x6f
    3cd0:	f000 80c9 	beq.w	3e66 <_vfiprintf_r+0x30a>
    3cd4:	dc10      	bgt.n	3cf8 <_vfiprintf_r+0x19c>
    3cd6:	2b69      	cmp	r3, #105	; 0x69
    3cd8:	d024      	beq.n	3d24 <_vfiprintf_r+0x1c8>
    3cda:	dc07      	bgt.n	3cec <_vfiprintf_r+0x190>
    3cdc:	2b64      	cmp	r3, #100	; 0x64
    3cde:	d021      	beq.n	3d24 <_vfiprintf_r+0x1c8>
    3ce0:	2b68      	cmp	r3, #104	; 0x68
    3ce2:	f040 81c8 	bne.w	4076 <_vfiprintf_r+0x51a>
    3ce6:	f047 0740 	orr.w	r7, r7, #64	; 0x40
    3cea:	e7b4      	b.n	3c56 <_vfiprintf_r+0xfa>
    3cec:	2b6c      	cmp	r3, #108	; 0x6c
    3cee:	d05f      	beq.n	3db0 <_vfiprintf_r+0x254>
    3cf0:	2b6e      	cmp	r3, #110	; 0x6e
    3cf2:	f040 81c0 	bne.w	4076 <_vfiprintf_r+0x51a>
    3cf6:	e096      	b.n	3e26 <_vfiprintf_r+0x2ca>
    3cf8:	2b73      	cmp	r3, #115	; 0x73
    3cfa:	f000 80df 	beq.w	3ebc <_vfiprintf_r+0x360>
    3cfe:	dc06      	bgt.n	3d0e <_vfiprintf_r+0x1b2>
    3d00:	2b70      	cmp	r3, #112	; 0x70
    3d02:	f000 80cd 	beq.w	3ea0 <_vfiprintf_r+0x344>
    3d06:	2b71      	cmp	r3, #113	; 0x71
    3d08:	f040 81b5 	bne.w	4076 <_vfiprintf_r+0x51a>
    3d0c:	e05a      	b.n	3dc4 <_vfiprintf_r+0x268>
    3d0e:	2b75      	cmp	r3, #117	; 0x75
    3d10:	f000 80f6 	beq.w	3f00 <_vfiprintf_r+0x3a4>
    3d14:	2b78      	cmp	r3, #120	; 0x78
    3d16:	f040 81ae 	bne.w	4076 <_vfiprintf_r+0x51a>
    3d1a:	4d9b      	ldr	r5, [pc, #620]	; (3f88 <_vfiprintf_r+0x42c>)
    3d1c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3d20:	9505      	str	r5, [sp, #20]
    3d22:	e106      	b.n	3f32 <_vfiprintf_r+0x3d6>
    3d24:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3d28:	e057      	b.n	3dda <_vfiprintf_r+0x27e>
    3d2a:	f047 0701 	orr.w	r7, r7, #1
    3d2e:	e792      	b.n	3c56 <_vfiprintf_r+0xfa>
    3d30:	1d33      	adds	r3, r6, #4
    3d32:	6836      	ldr	r6, [r6, #0]
    3d34:	2e00      	cmp	r6, #0
    3d36:	9604      	str	r6, [sp, #16]
    3d38:	da15      	bge.n	3d66 <_vfiprintf_r+0x20a>
    3d3a:	4270      	negs	r0, r6
    3d3c:	9004      	str	r0, [sp, #16]
    3d3e:	461e      	mov	r6, r3
    3d40:	f047 0704 	orr.w	r7, r7, #4
    3d44:	e787      	b.n	3c56 <_vfiprintf_r+0xfa>
    3d46:	9901      	ldr	r1, [sp, #4]
    3d48:	f811 3b01 	ldrb.w	r3, [r1], #1
    3d4c:	2b2a      	cmp	r3, #42	; 0x2a
    3d4e:	9101      	str	r1, [sp, #4]
    3d50:	d10b      	bne.n	3d6a <_vfiprintf_r+0x20e>
    3d52:	f8d6 c000 	ldr.w	ip, [r6]
    3d56:	1d33      	adds	r3, r6, #4
    3d58:	f1bc 0f00 	cmp.w	ip, #0
    3d5c:	da03      	bge.n	3d66 <_vfiprintf_r+0x20a>
    3d5e:	461e      	mov	r6, r3
    3d60:	f04f 3cff 	mov.w	ip, #4294967295
    3d64:	e777      	b.n	3c56 <_vfiprintf_r+0xfa>
    3d66:	461e      	mov	r6, r3
    3d68:	e775      	b.n	3c56 <_vfiprintf_r+0xfa>
    3d6a:	f04f 0c00 	mov.w	ip, #0
    3d6e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    3d72:	2809      	cmp	r0, #9
    3d74:	d807      	bhi.n	3d86 <_vfiprintf_r+0x22a>
    3d76:	9901      	ldr	r1, [sp, #4]
    3d78:	230a      	movs	r3, #10
    3d7a:	fb03 0c0c 	mla	ip, r3, ip, r0
    3d7e:	f811 3b01 	ldrb.w	r3, [r1], #1
    3d82:	9101      	str	r1, [sp, #4]
    3d84:	e7f3      	b.n	3d6e <_vfiprintf_r+0x212>
    3d86:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
    3d8a:	e768      	b.n	3c5e <_vfiprintf_r+0x102>
    3d8c:	f047 0780 	orr.w	r7, r7, #128	; 0x80
    3d90:	e761      	b.n	3c56 <_vfiprintf_r+0xfa>
    3d92:	9801      	ldr	r0, [sp, #4]
    3d94:	2100      	movs	r1, #0
    3d96:	3b30      	subs	r3, #48	; 0x30
    3d98:	240a      	movs	r4, #10
    3d9a:	fb04 3101 	mla	r1, r4, r1, r3
    3d9e:	f810 3b01 	ldrb.w	r3, [r0], #1
    3da2:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
    3da6:	2c09      	cmp	r4, #9
    3da8:	9001      	str	r0, [sp, #4]
    3daa:	d9f4      	bls.n	3d96 <_vfiprintf_r+0x23a>
    3dac:	9104      	str	r1, [sp, #16]
    3dae:	e756      	b.n	3c5e <_vfiprintf_r+0x102>
    3db0:	9901      	ldr	r1, [sp, #4]
    3db2:	780b      	ldrb	r3, [r1, #0]
    3db4:	2b6c      	cmp	r3, #108	; 0x6c
    3db6:	d102      	bne.n	3dbe <_vfiprintf_r+0x262>
    3db8:	1c48      	adds	r0, r1, #1
    3dba:	9001      	str	r0, [sp, #4]
    3dbc:	e002      	b.n	3dc4 <_vfiprintf_r+0x268>
    3dbe:	f047 0710 	orr.w	r7, r7, #16
    3dc2:	e748      	b.n	3c56 <_vfiprintf_r+0xfa>
    3dc4:	f047 0720 	orr.w	r7, r7, #32
    3dc8:	e745      	b.n	3c56 <_vfiprintf_r+0xfa>
    3dca:	6832      	ldr	r2, [r6, #0]
    3dcc:	2500      	movs	r5, #0
    3dce:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    3dd2:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
    3dd6:	3604      	adds	r6, #4
    3dd8:	e157      	b.n	408a <_vfiprintf_r+0x52e>
    3dda:	06ba      	lsls	r2, r7, #26
    3ddc:	d507      	bpl.n	3dee <_vfiprintf_r+0x292>
    3dde:	3607      	adds	r6, #7
    3de0:	f026 0507 	bic.w	r5, r6, #7
    3de4:	f105 0608 	add.w	r6, r5, #8
    3de8:	e9d5 4500 	ldrd	r4, r5, [r5]
    3dec:	e00f      	b.n	3e0e <_vfiprintf_r+0x2b2>
    3dee:	f017 0f10 	tst.w	r7, #16
    3df2:	f106 0104 	add.w	r1, r6, #4
    3df6:	d001      	beq.n	3dfc <_vfiprintf_r+0x2a0>
    3df8:	6832      	ldr	r2, [r6, #0]
    3dfa:	e005      	b.n	3e08 <_vfiprintf_r+0x2ac>
    3dfc:	f017 0f40 	tst.w	r7, #64	; 0x40
    3e00:	6832      	ldr	r2, [r6, #0]
    3e02:	d001      	beq.n	3e08 <_vfiprintf_r+0x2ac>
    3e04:	b214      	sxth	r4, r2
    3e06:	e000      	b.n	3e0a <_vfiprintf_r+0x2ae>
    3e08:	4614      	mov	r4, r2
    3e0a:	17e5      	asrs	r5, r4, #31
    3e0c:	460e      	mov	r6, r1
    3e0e:	2c00      	cmp	r4, #0
    3e10:	f175 0200 	sbcs.w	r2, r5, #0
    3e14:	f280 80ba 	bge.w	3f8c <_vfiprintf_r+0x430>
    3e18:	232d      	movs	r3, #45	; 0x2d
    3e1a:	4264      	negs	r4, r4
    3e1c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    3e20:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    3e24:	e0b2      	b.n	3f8c <_vfiprintf_r+0x430>
    3e26:	f017 0f20 	tst.w	r7, #32
    3e2a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3e2e:	f106 0204 	add.w	r2, r6, #4
    3e32:	d005      	beq.n	3e40 <_vfiprintf_r+0x2e4>
    3e34:	9c03      	ldr	r4, [sp, #12]
    3e36:	6835      	ldr	r5, [r6, #0]
    3e38:	17e0      	asrs	r0, r4, #31
    3e3a:	602c      	str	r4, [r5, #0]
    3e3c:	6068      	str	r0, [r5, #4]
    3e3e:	e004      	b.n	3e4a <_vfiprintf_r+0x2ee>
    3e40:	06fb      	lsls	r3, r7, #27
    3e42:	d504      	bpl.n	3e4e <_vfiprintf_r+0x2f2>
    3e44:	6833      	ldr	r3, [r6, #0]
    3e46:	9903      	ldr	r1, [sp, #12]
    3e48:	6019      	str	r1, [r3, #0]
    3e4a:	4616      	mov	r6, r2
    3e4c:	e6d2      	b.n	3bf4 <_vfiprintf_r+0x98>
    3e4e:	6830      	ldr	r0, [r6, #0]
    3e50:	9c03      	ldr	r4, [sp, #12]
    3e52:	f017 0f40 	tst.w	r7, #64	; 0x40
    3e56:	f106 0604 	add.w	r6, r6, #4
    3e5a:	bf14      	ite	ne
    3e5c:	8004      	strhne	r4, [r0, #0]
    3e5e:	6004      	streq	r4, [r0, #0]
    3e60:	e6c8      	b.n	3bf4 <_vfiprintf_r+0x98>
    3e62:	f047 0710 	orr.w	r7, r7, #16
    3e66:	f017 0020 	ands.w	r0, r7, #32
    3e6a:	d008      	beq.n	3e7e <_vfiprintf_r+0x322>
    3e6c:	1df3      	adds	r3, r6, #7
    3e6e:	f023 0507 	bic.w	r5, r3, #7
    3e72:	f105 0608 	add.w	r6, r5, #8
    3e76:	e9d5 4500 	ldrd	r4, r5, [r5]
    3e7a:	2000      	movs	r0, #0
    3e7c:	e07d      	b.n	3f7a <_vfiprintf_r+0x41e>
    3e7e:	f017 0110 	ands.w	r1, r7, #16
    3e82:	f106 0204 	add.w	r2, r6, #4
    3e86:	d106      	bne.n	3e96 <_vfiprintf_r+0x33a>
    3e88:	f017 0040 	ands.w	r0, r7, #64	; 0x40
    3e8c:	d003      	beq.n	3e96 <_vfiprintf_r+0x33a>
    3e8e:	8834      	ldrh	r4, [r6, #0]
    3e90:	2500      	movs	r5, #0
    3e92:	4616      	mov	r6, r2
    3e94:	e7f1      	b.n	3e7a <_vfiprintf_r+0x31e>
    3e96:	6836      	ldr	r6, [r6, #0]
    3e98:	2500      	movs	r5, #0
    3e9a:	4634      	mov	r4, r6
    3e9c:	4616      	mov	r6, r2
    3e9e:	e06c      	b.n	3f7a <_vfiprintf_r+0x41e>
    3ea0:	4b39      	ldr	r3, [pc, #228]	; (3f88 <_vfiprintf_r+0x42c>)
    3ea2:	6834      	ldr	r4, [r6, #0]
    3ea4:	9305      	str	r3, [sp, #20]
    3ea6:	2130      	movs	r1, #48	; 0x30
    3ea8:	2278      	movs	r2, #120	; 0x78
    3eaa:	2500      	movs	r5, #0
    3eac:	f047 0702 	orr.w	r7, r7, #2
    3eb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    3eb4:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
    3eb8:	3604      	adds	r6, #4
    3eba:	e05d      	b.n	3f78 <_vfiprintf_r+0x41c>
    3ebc:	4631      	mov	r1, r6
    3ebe:	2500      	movs	r5, #0
    3ec0:	f8d1 b000 	ldr.w	fp, [r1]
    3ec4:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
    3ec8:	3604      	adds	r6, #4
    3eca:	45ac      	cmp	ip, r5
    3ecc:	4658      	mov	r0, fp
    3ece:	db11      	blt.n	3ef4 <_vfiprintf_r+0x398>
    3ed0:	4662      	mov	r2, ip
    3ed2:	4629      	mov	r1, r5
    3ed4:	f8cd c000 	str.w	ip, [sp]
    3ed8:	f001 fa4c 	bl	5374 <memchr>
    3edc:	f8dd c000 	ldr.w	ip, [sp]
    3ee0:	2800      	cmp	r0, #0
    3ee2:	f000 80d6 	beq.w	4092 <_vfiprintf_r+0x536>
    3ee6:	ebcb 0400 	rsb	r4, fp, r0
    3eea:	4564      	cmp	r4, ip
    3eec:	f340 80d3 	ble.w	4096 <_vfiprintf_r+0x53a>
    3ef0:	4664      	mov	r4, ip
    3ef2:	e0d0      	b.n	4096 <_vfiprintf_r+0x53a>
    3ef4:	f7ff fdf6 	bl	3ae4 <strlen>
    3ef8:	4604      	mov	r4, r0
    3efa:	e0cc      	b.n	4096 <_vfiprintf_r+0x53a>
    3efc:	f047 0710 	orr.w	r7, r7, #16
    3f00:	06bd      	lsls	r5, r7, #26
    3f02:	d507      	bpl.n	3f14 <_vfiprintf_r+0x3b8>
    3f04:	1df0      	adds	r0, r6, #7
    3f06:	f020 0407 	bic.w	r4, r0, #7
    3f0a:	f104 0608 	add.w	r6, r4, #8
    3f0e:	e9d4 4500 	ldrd	r4, r5, [r4]
    3f12:	e00c      	b.n	3f2e <_vfiprintf_r+0x3d2>
    3f14:	f017 0f10 	tst.w	r7, #16
    3f18:	f106 0304 	add.w	r3, r6, #4
    3f1c:	d103      	bne.n	3f26 <_vfiprintf_r+0x3ca>
    3f1e:	067c      	lsls	r4, r7, #25
    3f20:	d501      	bpl.n	3f26 <_vfiprintf_r+0x3ca>
    3f22:	8834      	ldrh	r4, [r6, #0]
    3f24:	e001      	b.n	3f2a <_vfiprintf_r+0x3ce>
    3f26:	6835      	ldr	r5, [r6, #0]
    3f28:	462c      	mov	r4, r5
    3f2a:	2500      	movs	r5, #0
    3f2c:	461e      	mov	r6, r3
    3f2e:	2001      	movs	r0, #1
    3f30:	e023      	b.n	3f7a <_vfiprintf_r+0x41e>
    3f32:	06b8      	lsls	r0, r7, #26
    3f34:	d507      	bpl.n	3f46 <_vfiprintf_r+0x3ea>
    3f36:	1df4      	adds	r4, r6, #7
    3f38:	f024 0107 	bic.w	r1, r4, #7
    3f3c:	f101 0608 	add.w	r6, r1, #8
    3f40:	e9d1 4500 	ldrd	r4, r5, [r1]
    3f44:	e00c      	b.n	3f60 <_vfiprintf_r+0x404>
    3f46:	f017 0f10 	tst.w	r7, #16
    3f4a:	f106 0004 	add.w	r0, r6, #4
    3f4e:	d103      	bne.n	3f58 <_vfiprintf_r+0x3fc>
    3f50:	0679      	lsls	r1, r7, #25
    3f52:	d501      	bpl.n	3f58 <_vfiprintf_r+0x3fc>
    3f54:	8834      	ldrh	r4, [r6, #0]
    3f56:	e001      	b.n	3f5c <_vfiprintf_r+0x400>
    3f58:	6836      	ldr	r6, [r6, #0]
    3f5a:	4634      	mov	r4, r6
    3f5c:	2500      	movs	r5, #0
    3f5e:	4606      	mov	r6, r0
    3f60:	07fa      	lsls	r2, r7, #31
    3f62:	d509      	bpl.n	3f78 <_vfiprintf_r+0x41c>
    3f64:	ea54 0205 	orrs.w	r2, r4, r5
    3f68:	d006      	beq.n	3f78 <_vfiprintf_r+0x41c>
    3f6a:	2230      	movs	r2, #48	; 0x30
    3f6c:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
    3f70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    3f74:	f047 0702 	orr.w	r7, r7, #2
    3f78:	2002      	movs	r0, #2
    3f7a:	2100      	movs	r1, #0
    3f7c:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    3f80:	e005      	b.n	3f8e <_vfiprintf_r+0x432>
    3f82:	bf00      	nop
    3f84:	0000622c 	.word	0x0000622c
    3f88:	0000623d 	.word	0x0000623d
    3f8c:	2001      	movs	r0, #1
    3f8e:	f1bc 0f00 	cmp.w	ip, #0
    3f92:	bfa8      	it	ge
    3f94:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
    3f98:	ea54 0105 	orrs.w	r1, r4, r5
    3f9c:	d102      	bne.n	3fa4 <_vfiprintf_r+0x448>
    3f9e:	f1bc 0f00 	cmp.w	ip, #0
    3fa2:	d058      	beq.n	4056 <_vfiprintf_r+0x4fa>
    3fa4:	2801      	cmp	r0, #1
    3fa6:	d01d      	beq.n	3fe4 <_vfiprintf_r+0x488>
    3fa8:	2802      	cmp	r0, #2
    3faa:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
    3fae:	d041      	beq.n	4034 <_vfiprintf_r+0x4d8>
    3fb0:	f004 0207 	and.w	r2, r4, #7
    3fb4:	08e4      	lsrs	r4, r4, #3
    3fb6:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
    3fba:	08e9      	lsrs	r1, r5, #3
    3fbc:	4604      	mov	r4, r0
    3fbe:	460d      	mov	r5, r1
    3fc0:	3230      	adds	r2, #48	; 0x30
    3fc2:	ea54 0105 	orrs.w	r1, r4, r5
    3fc6:	469b      	mov	fp, r3
    3fc8:	701a      	strb	r2, [r3, #0]
    3fca:	f103 33ff 	add.w	r3, r3, #4294967295
    3fce:	d1ef      	bne.n	3fb0 <_vfiprintf_r+0x454>
    3fd0:	07f8      	lsls	r0, r7, #31
    3fd2:	465d      	mov	r5, fp
    3fd4:	d54a      	bpl.n	406c <_vfiprintf_r+0x510>
    3fd6:	2a30      	cmp	r2, #48	; 0x30
    3fd8:	d048      	beq.n	406c <_vfiprintf_r+0x510>
    3fda:	2230      	movs	r2, #48	; 0x30
    3fdc:	469b      	mov	fp, r3
    3fde:	f805 2c01 	strb.w	r2, [r5, #-1]
    3fe2:	e043      	b.n	406c <_vfiprintf_r+0x510>
    3fe4:	2d00      	cmp	r5, #0
    3fe6:	bf08      	it	eq
    3fe8:	2c0a      	cmpeq	r4, #10
    3fea:	d203      	bcs.n	3ff4 <_vfiprintf_r+0x498>
    3fec:	3430      	adds	r4, #48	; 0x30
    3fee:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
    3ff2:	e036      	b.n	4062 <_vfiprintf_r+0x506>
    3ff4:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
    3ff8:	9302      	str	r3, [sp, #8]
    3ffa:	4620      	mov	r0, r4
    3ffc:	4629      	mov	r1, r5
    3ffe:	220a      	movs	r2, #10
    4000:	2300      	movs	r3, #0
    4002:	f8cd c000 	str.w	ip, [sp]
    4006:	f001 fd1b 	bl	5a40 <__aeabi_uldivmod>
    400a:	9802      	ldr	r0, [sp, #8]
    400c:	f8dd b008 	ldr.w	fp, [sp, #8]
    4010:	3230      	adds	r2, #48	; 0x30
    4012:	f800 2901 	strb.w	r2, [r0], #-1
    4016:	4629      	mov	r1, r5
    4018:	9002      	str	r0, [sp, #8]
    401a:	220a      	movs	r2, #10
    401c:	4620      	mov	r0, r4
    401e:	2300      	movs	r3, #0
    4020:	f001 fd0e 	bl	5a40 <__aeabi_uldivmod>
    4024:	4604      	mov	r4, r0
    4026:	460d      	mov	r5, r1
    4028:	ea54 0105 	orrs.w	r1, r4, r5
    402c:	f8dd c000 	ldr.w	ip, [sp]
    4030:	d1e3      	bne.n	3ffa <_vfiprintf_r+0x49e>
    4032:	e01b      	b.n	406c <_vfiprintf_r+0x510>
    4034:	f004 000f 	and.w	r0, r4, #15
    4038:	9905      	ldr	r1, [sp, #20]
    403a:	0924      	lsrs	r4, r4, #4
    403c:	5c0a      	ldrb	r2, [r1, r0]
    403e:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
    4042:	0929      	lsrs	r1, r5, #4
    4044:	4604      	mov	r4, r0
    4046:	460d      	mov	r5, r1
    4048:	469b      	mov	fp, r3
    404a:	f803 2901 	strb.w	r2, [r3], #-1
    404e:	ea54 0205 	orrs.w	r2, r4, r5
    4052:	d1ef      	bne.n	4034 <_vfiprintf_r+0x4d8>
    4054:	e00a      	b.n	406c <_vfiprintf_r+0x510>
    4056:	b938      	cbnz	r0, 4068 <_vfiprintf_r+0x50c>
    4058:	07f9      	lsls	r1, r7, #31
    405a:	d505      	bpl.n	4068 <_vfiprintf_r+0x50c>
    405c:	2030      	movs	r0, #48	; 0x30
    405e:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
    4062:	f10d 0b5f 	add.w	fp, sp, #95	; 0x5f
    4066:	e001      	b.n	406c <_vfiprintf_r+0x510>
    4068:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
    406c:	ad18      	add	r5, sp, #96	; 0x60
    406e:	ebcb 0405 	rsb	r4, fp, r5
    4072:	4665      	mov	r5, ip
    4074:	e00f      	b.n	4096 <_vfiprintf_r+0x53a>
    4076:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    407a:	2b00      	cmp	r3, #0
    407c:	f000 816c 	beq.w	4358 <_vfiprintf_r+0x7fc>
    4080:	2500      	movs	r5, #0
    4082:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    4086:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
    408a:	2401      	movs	r4, #1
    408c:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
    4090:	e001      	b.n	4096 <_vfiprintf_r+0x53a>
    4092:	4664      	mov	r4, ip
    4094:	4605      	mov	r5, r0
    4096:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    409a:	42ac      	cmp	r4, r5
    409c:	bfac      	ite	ge
    409e:	4621      	movge	r1, r4
    40a0:	4629      	movlt	r1, r5
    40a2:	9102      	str	r1, [sp, #8]
    40a4:	b113      	cbz	r3, 40ac <_vfiprintf_r+0x550>
    40a6:	9802      	ldr	r0, [sp, #8]
    40a8:	1c42      	adds	r2, r0, #1
    40aa:	9202      	str	r2, [sp, #8]
    40ac:	f017 0102 	ands.w	r1, r7, #2
    40b0:	9106      	str	r1, [sp, #24]
    40b2:	d002      	beq.n	40ba <_vfiprintf_r+0x55e>
    40b4:	9b02      	ldr	r3, [sp, #8]
    40b6:	1c98      	adds	r0, r3, #2
    40b8:	9002      	str	r0, [sp, #8]
    40ba:	f017 0284 	ands.w	r2, r7, #132	; 0x84
    40be:	9207      	str	r2, [sp, #28]
    40c0:	d13a      	bne.n	4138 <_vfiprintf_r+0x5dc>
    40c2:	9904      	ldr	r1, [sp, #16]
    40c4:	9b02      	ldr	r3, [sp, #8]
    40c6:	1acb      	subs	r3, r1, r3
    40c8:	2b00      	cmp	r3, #0
    40ca:	dd35      	ble.n	4138 <_vfiprintf_r+0x5dc>
    40cc:	48a0      	ldr	r0, [pc, #640]	; (4350 <_vfiprintf_r+0x7f4>)
    40ce:	2b10      	cmp	r3, #16
    40d0:	f8c8 0000 	str.w	r0, [r8]
    40d4:	dd1a      	ble.n	410c <_vfiprintf_r+0x5b0>
    40d6:	990c      	ldr	r1, [sp, #48]	; 0x30
    40d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    40da:	2010      	movs	r0, #16
    40dc:	f8c8 0004 	str.w	r0, [r8, #4]
    40e0:	1c48      	adds	r0, r1, #1
    40e2:	3210      	adds	r2, #16
    40e4:	2807      	cmp	r0, #7
    40e6:	920d      	str	r2, [sp, #52]	; 0x34
    40e8:	f108 0808 	add.w	r8, r8, #8
    40ec:	900c      	str	r0, [sp, #48]	; 0x30
    40ee:	dd0b      	ble.n	4108 <_vfiprintf_r+0x5ac>
    40f0:	4650      	mov	r0, sl
    40f2:	4649      	mov	r1, r9
    40f4:	aa0b      	add	r2, sp, #44	; 0x2c
    40f6:	9300      	str	r3, [sp, #0]
    40f8:	f7ff fcfc 	bl	3af4 <__sprint_r>
    40fc:	9b00      	ldr	r3, [sp, #0]
    40fe:	2800      	cmp	r0, #0
    4100:	f040 8131 	bne.w	4366 <_vfiprintf_r+0x80a>
    4104:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    4108:	3b10      	subs	r3, #16
    410a:	e7df      	b.n	40cc <_vfiprintf_r+0x570>
    410c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    410e:	f8c8 3004 	str.w	r3, [r8, #4]
    4112:	18d1      	adds	r1, r2, r3
    4114:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4116:	910d      	str	r1, [sp, #52]	; 0x34
    4118:	1c58      	adds	r0, r3, #1
    411a:	2807      	cmp	r0, #7
    411c:	f108 0808 	add.w	r8, r8, #8
    4120:	900c      	str	r0, [sp, #48]	; 0x30
    4122:	dd09      	ble.n	4138 <_vfiprintf_r+0x5dc>
    4124:	4650      	mov	r0, sl
    4126:	4649      	mov	r1, r9
    4128:	aa0b      	add	r2, sp, #44	; 0x2c
    412a:	f7ff fce3 	bl	3af4 <__sprint_r>
    412e:	2800      	cmp	r0, #0
    4130:	f040 8119 	bne.w	4366 <_vfiprintf_r+0x80a>
    4134:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    4138:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    413c:	b1d2      	cbz	r2, 4174 <_vfiprintf_r+0x618>
    413e:	f10d 0127 	add.w	r1, sp, #39	; 0x27
    4142:	f8c8 1000 	str.w	r1, [r8]
    4146:	990c      	ldr	r1, [sp, #48]	; 0x30
    4148:	980d      	ldr	r0, [sp, #52]	; 0x34
    414a:	2301      	movs	r3, #1
    414c:	f8c8 3004 	str.w	r3, [r8, #4]
    4150:	1c4b      	adds	r3, r1, #1
    4152:	1c42      	adds	r2, r0, #1
    4154:	2b07      	cmp	r3, #7
    4156:	920d      	str	r2, [sp, #52]	; 0x34
    4158:	f108 0808 	add.w	r8, r8, #8
    415c:	930c      	str	r3, [sp, #48]	; 0x30
    415e:	dd09      	ble.n	4174 <_vfiprintf_r+0x618>
    4160:	4650      	mov	r0, sl
    4162:	4649      	mov	r1, r9
    4164:	aa0b      	add	r2, sp, #44	; 0x2c
    4166:	f7ff fcc5 	bl	3af4 <__sprint_r>
    416a:	2800      	cmp	r0, #0
    416c:	f040 80fb 	bne.w	4366 <_vfiprintf_r+0x80a>
    4170:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    4174:	9806      	ldr	r0, [sp, #24]
    4176:	b1c8      	cbz	r0, 41ac <_vfiprintf_r+0x650>
    4178:	aa0a      	add	r2, sp, #40	; 0x28
    417a:	f8c8 2000 	str.w	r2, [r8]
    417e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4180:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4182:	2102      	movs	r1, #2
    4184:	f8c8 1004 	str.w	r1, [r8, #4]
    4188:	1c51      	adds	r1, r2, #1
    418a:	1c98      	adds	r0, r3, #2
    418c:	2907      	cmp	r1, #7
    418e:	900d      	str	r0, [sp, #52]	; 0x34
    4190:	f108 0808 	add.w	r8, r8, #8
    4194:	910c      	str	r1, [sp, #48]	; 0x30
    4196:	dd09      	ble.n	41ac <_vfiprintf_r+0x650>
    4198:	4650      	mov	r0, sl
    419a:	4649      	mov	r1, r9
    419c:	aa0b      	add	r2, sp, #44	; 0x2c
    419e:	f7ff fca9 	bl	3af4 <__sprint_r>
    41a2:	2800      	cmp	r0, #0
    41a4:	f040 80df 	bne.w	4366 <_vfiprintf_r+0x80a>
    41a8:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    41ac:	9b07      	ldr	r3, [sp, #28]
    41ae:	2b80      	cmp	r3, #128	; 0x80
    41b0:	d13a      	bne.n	4228 <_vfiprintf_r+0x6cc>
    41b2:	9804      	ldr	r0, [sp, #16]
    41b4:	9a02      	ldr	r2, [sp, #8]
    41b6:	1a83      	subs	r3, r0, r2
    41b8:	2b00      	cmp	r3, #0
    41ba:	dd35      	ble.n	4228 <_vfiprintf_r+0x6cc>
    41bc:	4965      	ldr	r1, [pc, #404]	; (4354 <_vfiprintf_r+0x7f8>)
    41be:	2b10      	cmp	r3, #16
    41c0:	f8c8 1000 	str.w	r1, [r8]
    41c4:	dd1a      	ble.n	41fc <_vfiprintf_r+0x6a0>
    41c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    41c8:	980d      	ldr	r0, [sp, #52]	; 0x34
    41ca:	2110      	movs	r1, #16
    41cc:	f8c8 1004 	str.w	r1, [r8, #4]
    41d0:	1c51      	adds	r1, r2, #1
    41d2:	3010      	adds	r0, #16
    41d4:	2907      	cmp	r1, #7
    41d6:	900d      	str	r0, [sp, #52]	; 0x34
    41d8:	f108 0808 	add.w	r8, r8, #8
    41dc:	910c      	str	r1, [sp, #48]	; 0x30
    41de:	dd0b      	ble.n	41f8 <_vfiprintf_r+0x69c>
    41e0:	4650      	mov	r0, sl
    41e2:	4649      	mov	r1, r9
    41e4:	aa0b      	add	r2, sp, #44	; 0x2c
    41e6:	9300      	str	r3, [sp, #0]
    41e8:	f7ff fc84 	bl	3af4 <__sprint_r>
    41ec:	9b00      	ldr	r3, [sp, #0]
    41ee:	2800      	cmp	r0, #0
    41f0:	f040 80b9 	bne.w	4366 <_vfiprintf_r+0x80a>
    41f4:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    41f8:	3b10      	subs	r3, #16
    41fa:	e7df      	b.n	41bc <_vfiprintf_r+0x660>
    41fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    41fe:	980d      	ldr	r0, [sp, #52]	; 0x34
    4200:	f8c8 3004 	str.w	r3, [r8, #4]
    4204:	1c51      	adds	r1, r2, #1
    4206:	18c3      	adds	r3, r0, r3
    4208:	2907      	cmp	r1, #7
    420a:	930d      	str	r3, [sp, #52]	; 0x34
    420c:	f108 0808 	add.w	r8, r8, #8
    4210:	910c      	str	r1, [sp, #48]	; 0x30
    4212:	dd09      	ble.n	4228 <_vfiprintf_r+0x6cc>
    4214:	4650      	mov	r0, sl
    4216:	4649      	mov	r1, r9
    4218:	aa0b      	add	r2, sp, #44	; 0x2c
    421a:	f7ff fc6b 	bl	3af4 <__sprint_r>
    421e:	2800      	cmp	r0, #0
    4220:	f040 80a1 	bne.w	4366 <_vfiprintf_r+0x80a>
    4224:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    4228:	1b2d      	subs	r5, r5, r4
    422a:	2d00      	cmp	r5, #0
    422c:	dd32      	ble.n	4294 <_vfiprintf_r+0x738>
    422e:	4849      	ldr	r0, [pc, #292]	; (4354 <_vfiprintf_r+0x7f8>)
    4230:	2d10      	cmp	r5, #16
    4232:	f8c8 0000 	str.w	r0, [r8]
    4236:	dd18      	ble.n	426a <_vfiprintf_r+0x70e>
    4238:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    423a:	980d      	ldr	r0, [sp, #52]	; 0x34
    423c:	1c53      	adds	r3, r2, #1
    423e:	2110      	movs	r1, #16
    4240:	3010      	adds	r0, #16
    4242:	2b07      	cmp	r3, #7
    4244:	f8c8 1004 	str.w	r1, [r8, #4]
    4248:	900d      	str	r0, [sp, #52]	; 0x34
    424a:	f108 0808 	add.w	r8, r8, #8
    424e:	930c      	str	r3, [sp, #48]	; 0x30
    4250:	dd09      	ble.n	4266 <_vfiprintf_r+0x70a>
    4252:	4650      	mov	r0, sl
    4254:	4649      	mov	r1, r9
    4256:	aa0b      	add	r2, sp, #44	; 0x2c
    4258:	f7ff fc4c 	bl	3af4 <__sprint_r>
    425c:	2800      	cmp	r0, #0
    425e:	f040 8082 	bne.w	4366 <_vfiprintf_r+0x80a>
    4262:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    4266:	3d10      	subs	r5, #16
    4268:	e7e1      	b.n	422e <_vfiprintf_r+0x6d2>
    426a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    426c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    426e:	f8c8 5004 	str.w	r5, [r8, #4]
    4272:	1c51      	adds	r1, r2, #1
    4274:	195d      	adds	r5, r3, r5
    4276:	2907      	cmp	r1, #7
    4278:	950d      	str	r5, [sp, #52]	; 0x34
    427a:	f108 0808 	add.w	r8, r8, #8
    427e:	910c      	str	r1, [sp, #48]	; 0x30
    4280:	dd08      	ble.n	4294 <_vfiprintf_r+0x738>
    4282:	4650      	mov	r0, sl
    4284:	4649      	mov	r1, r9
    4286:	aa0b      	add	r2, sp, #44	; 0x2c
    4288:	f7ff fc34 	bl	3af4 <__sprint_r>
    428c:	2800      	cmp	r0, #0
    428e:	d16a      	bne.n	4366 <_vfiprintf_r+0x80a>
    4290:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    4294:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4296:	980d      	ldr	r0, [sp, #52]	; 0x34
    4298:	f8c8 4004 	str.w	r4, [r8, #4]
    429c:	1c51      	adds	r1, r2, #1
    429e:	1904      	adds	r4, r0, r4
    42a0:	2907      	cmp	r1, #7
    42a2:	f8c8 b000 	str.w	fp, [r8]
    42a6:	940d      	str	r4, [sp, #52]	; 0x34
    42a8:	f108 0308 	add.w	r3, r8, #8
    42ac:	910c      	str	r1, [sp, #48]	; 0x30
    42ae:	dd07      	ble.n	42c0 <_vfiprintf_r+0x764>
    42b0:	4650      	mov	r0, sl
    42b2:	4649      	mov	r1, r9
    42b4:	aa0b      	add	r2, sp, #44	; 0x2c
    42b6:	f7ff fc1d 	bl	3af4 <__sprint_r>
    42ba:	2800      	cmp	r0, #0
    42bc:	d153      	bne.n	4366 <_vfiprintf_r+0x80a>
    42be:	ab18      	add	r3, sp, #96	; 0x60
    42c0:	077a      	lsls	r2, r7, #29
    42c2:	d40b      	bmi.n	42dc <_vfiprintf_r+0x780>
    42c4:	9b03      	ldr	r3, [sp, #12]
    42c6:	9a02      	ldr	r2, [sp, #8]
    42c8:	9904      	ldr	r1, [sp, #16]
    42ca:	980d      	ldr	r0, [sp, #52]	; 0x34
    42cc:	428a      	cmp	r2, r1
    42ce:	bfac      	ite	ge
    42d0:	189b      	addge	r3, r3, r2
    42d2:	185b      	addlt	r3, r3, r1
    42d4:	9303      	str	r3, [sp, #12]
    42d6:	2800      	cmp	r0, #0
    42d8:	d035      	beq.n	4346 <_vfiprintf_r+0x7ea>
    42da:	e02e      	b.n	433a <_vfiprintf_r+0x7de>
    42dc:	9c04      	ldr	r4, [sp, #16]
    42de:	9802      	ldr	r0, [sp, #8]
    42e0:	1a24      	subs	r4, r4, r0
    42e2:	2c00      	cmp	r4, #0
    42e4:	ddee      	ble.n	42c4 <_vfiprintf_r+0x768>
    42e6:	4a1a      	ldr	r2, [pc, #104]	; (4350 <_vfiprintf_r+0x7f4>)
    42e8:	2c10      	cmp	r4, #16
    42ea:	601a      	str	r2, [r3, #0]
    42ec:	dd14      	ble.n	4318 <_vfiprintf_r+0x7bc>
    42ee:	980c      	ldr	r0, [sp, #48]	; 0x30
    42f0:	990d      	ldr	r1, [sp, #52]	; 0x34
    42f2:	2210      	movs	r2, #16
    42f4:	605a      	str	r2, [r3, #4]
    42f6:	1c42      	adds	r2, r0, #1
    42f8:	3110      	adds	r1, #16
    42fa:	3308      	adds	r3, #8
    42fc:	2a07      	cmp	r2, #7
    42fe:	910d      	str	r1, [sp, #52]	; 0x34
    4300:	920c      	str	r2, [sp, #48]	; 0x30
    4302:	dd07      	ble.n	4314 <_vfiprintf_r+0x7b8>
    4304:	4650      	mov	r0, sl
    4306:	4649      	mov	r1, r9
    4308:	aa0b      	add	r2, sp, #44	; 0x2c
    430a:	f7ff fbf3 	bl	3af4 <__sprint_r>
    430e:	2800      	cmp	r0, #0
    4310:	d129      	bne.n	4366 <_vfiprintf_r+0x80a>
    4312:	ab18      	add	r3, sp, #96	; 0x60
    4314:	3c10      	subs	r4, #16
    4316:	e7e6      	b.n	42e6 <_vfiprintf_r+0x78a>
    4318:	990c      	ldr	r1, [sp, #48]	; 0x30
    431a:	605c      	str	r4, [r3, #4]
    431c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    431e:	1c48      	adds	r0, r1, #1
    4320:	191c      	adds	r4, r3, r4
    4322:	2807      	cmp	r0, #7
    4324:	940d      	str	r4, [sp, #52]	; 0x34
    4326:	900c      	str	r0, [sp, #48]	; 0x30
    4328:	ddcc      	ble.n	42c4 <_vfiprintf_r+0x768>
    432a:	4650      	mov	r0, sl
    432c:	4649      	mov	r1, r9
    432e:	aa0b      	add	r2, sp, #44	; 0x2c
    4330:	f7ff fbe0 	bl	3af4 <__sprint_r>
    4334:	2800      	cmp	r0, #0
    4336:	d0c5      	beq.n	42c4 <_vfiprintf_r+0x768>
    4338:	e015      	b.n	4366 <_vfiprintf_r+0x80a>
    433a:	4650      	mov	r0, sl
    433c:	4649      	mov	r1, r9
    433e:	aa0b      	add	r2, sp, #44	; 0x2c
    4340:	f7ff fbd8 	bl	3af4 <__sprint_r>
    4344:	b978      	cbnz	r0, 4366 <_vfiprintf_r+0x80a>
    4346:	2500      	movs	r5, #0
    4348:	950c      	str	r5, [sp, #48]	; 0x30
    434a:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    434e:	e451      	b.n	3bf4 <_vfiprintf_r+0x98>
    4350:	0000620c 	.word	0x0000620c
    4354:	0000621c 	.word	0x0000621c
    4358:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    435a:	b122      	cbz	r2, 4366 <_vfiprintf_r+0x80a>
    435c:	4650      	mov	r0, sl
    435e:	4649      	mov	r1, r9
    4360:	aa0b      	add	r2, sp, #44	; 0x2c
    4362:	f7ff fbc7 	bl	3af4 <__sprint_r>
    4366:	f8b9 100c 	ldrh.w	r1, [r9, #12]
    436a:	f001 0040 	and.w	r0, r1, #64	; 0x40
    436e:	b203      	sxth	r3, r0
    4370:	2b00      	cmp	r3, #0
    4372:	f47f ac26 	bne.w	3bc2 <_vfiprintf_r+0x66>
    4376:	9803      	ldr	r0, [sp, #12]
    4378:	b029      	add	sp, #164	; 0xa4
    437a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000437e <__sbprintf>:
    437e:	b570      	push	{r4, r5, r6, lr}
    4380:	460c      	mov	r4, r1
    4382:	8989      	ldrh	r1, [r1, #12]
    4384:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
    4388:	f021 0502 	bic.w	r5, r1, #2
    438c:	6e61      	ldr	r1, [r4, #100]	; 0x64
    438e:	f8ad 500c 	strh.w	r5, [sp, #12]
    4392:	9119      	str	r1, [sp, #100]	; 0x64
    4394:	89e5      	ldrh	r5, [r4, #14]
    4396:	69e1      	ldr	r1, [r4, #28]
    4398:	f8ad 500e 	strh.w	r5, [sp, #14]
    439c:	9107      	str	r1, [sp, #28]
    439e:	6a65      	ldr	r5, [r4, #36]	; 0x24
    43a0:	a91a      	add	r1, sp, #104	; 0x68
    43a2:	9100      	str	r1, [sp, #0]
    43a4:	9104      	str	r1, [sp, #16]
    43a6:	2100      	movs	r1, #0
    43a8:	9509      	str	r5, [sp, #36]	; 0x24
    43aa:	9106      	str	r1, [sp, #24]
    43ac:	f44f 6580 	mov.w	r5, #1024	; 0x400
    43b0:	4669      	mov	r1, sp
    43b2:	9502      	str	r5, [sp, #8]
    43b4:	9505      	str	r5, [sp, #20]
    43b6:	4606      	mov	r6, r0
    43b8:	f7ff fbd0 	bl	3b5c <_vfiprintf_r>
    43bc:	1e05      	subs	r5, r0, #0
    43be:	db07      	blt.n	43d0 <__sbprintf+0x52>
    43c0:	4630      	mov	r0, r6
    43c2:	4669      	mov	r1, sp
    43c4:	f000 f88e 	bl	44e4 <_fflush_r>
    43c8:	2800      	cmp	r0, #0
    43ca:	bf18      	it	ne
    43cc:	f04f 35ff 	movne.w	r5, #4294967295
    43d0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    43d4:	f003 0040 	and.w	r0, r3, #64	; 0x40
    43d8:	b202      	sxth	r2, r0
    43da:	b11a      	cbz	r2, 43e4 <__sbprintf+0x66>
    43dc:	89a1      	ldrh	r1, [r4, #12]
    43de:	f041 0340 	orr.w	r3, r1, #64	; 0x40
    43e2:	81a3      	strh	r3, [r4, #12]
    43e4:	4628      	mov	r0, r5
    43e6:	b01a      	add	sp, #104	; 0x68
    43e8:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
    43ec:	bd70      	pop	{r4, r5, r6, pc}

000043ee <vfiprintf>:
    43ee:	b530      	push	{r4, r5, lr}
    43f0:	4613      	mov	r3, r2
    43f2:	4a05      	ldr	r2, [pc, #20]	; (4408 <vfiprintf+0x1a>)
    43f4:	4605      	mov	r5, r0
    43f6:	460c      	mov	r4, r1
    43f8:	6810      	ldr	r0, [r2, #0]
    43fa:	4629      	mov	r1, r5
    43fc:	4622      	mov	r2, r4
    43fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    4402:	f7ff bbab 	b.w	3b5c <_vfiprintf_r>
    4406:	bf00      	nop
    4408:	20000050 	.word	0x20000050

0000440c <__swsetup_r>:
    440c:	b538      	push	{r3, r4, r5, lr}
    440e:	4b2c      	ldr	r3, [pc, #176]	; (44c0 <__swsetup_r+0xb4>)
    4410:	4605      	mov	r5, r0
    4412:	6818      	ldr	r0, [r3, #0]
    4414:	460c      	mov	r4, r1
    4416:	b118      	cbz	r0, 4420 <__swsetup_r+0x14>
    4418:	6b82      	ldr	r2, [r0, #56]	; 0x38
    441a:	b90a      	cbnz	r2, 4420 <__swsetup_r+0x14>
    441c:	f000 f956 	bl	46cc <__sinit>
    4420:	89a0      	ldrh	r0, [r4, #12]
    4422:	f000 0108 	and.w	r1, r0, #8
    4426:	b20b      	sxth	r3, r1
    4428:	bb0b      	cbnz	r3, 446e <__swsetup_r+0x62>
    442a:	f000 0210 	and.w	r2, r0, #16
    442e:	b211      	sxth	r1, r2
    4430:	b911      	cbnz	r1, 4438 <__swsetup_r+0x2c>
    4432:	f04f 30ff 	mov.w	r0, #4294967295
    4436:	bd38      	pop	{r3, r4, r5, pc}
    4438:	f000 0004 	and.w	r0, r0, #4
    443c:	b203      	sxth	r3, r0
    443e:	b193      	cbz	r3, 4466 <__swsetup_r+0x5a>
    4440:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4442:	b141      	cbz	r1, 4456 <__swsetup_r+0x4a>
    4444:	f104 0240 	add.w	r2, r4, #64	; 0x40
    4448:	4291      	cmp	r1, r2
    444a:	d002      	beq.n	4452 <__swsetup_r+0x46>
    444c:	4628      	mov	r0, r5
    444e:	f000 fa7b 	bl	4948 <_free_r>
    4452:	2100      	movs	r1, #0
    4454:	6321      	str	r1, [r4, #48]	; 0x30
    4456:	89a0      	ldrh	r0, [r4, #12]
    4458:	6921      	ldr	r1, [r4, #16]
    445a:	f020 0324 	bic.w	r3, r0, #36	; 0x24
    445e:	2200      	movs	r2, #0
    4460:	81a3      	strh	r3, [r4, #12]
    4462:	6062      	str	r2, [r4, #4]
    4464:	6021      	str	r1, [r4, #0]
    4466:	89a0      	ldrh	r0, [r4, #12]
    4468:	f040 0308 	orr.w	r3, r0, #8
    446c:	81a3      	strh	r3, [r4, #12]
    446e:	6922      	ldr	r2, [r4, #16]
    4470:	b94a      	cbnz	r2, 4486 <__swsetup_r+0x7a>
    4472:	89a1      	ldrh	r1, [r4, #12]
    4474:	f401 7020 	and.w	r0, r1, #640	; 0x280
    4478:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    447c:	d003      	beq.n	4486 <__swsetup_r+0x7a>
    447e:	4628      	mov	r0, r5
    4480:	4621      	mov	r1, r4
    4482:	f000 fcf9 	bl	4e78 <__smakebuf_r>
    4486:	89a3      	ldrh	r3, [r4, #12]
    4488:	f013 0201 	ands.w	r2, r3, #1
    448c:	d005      	beq.n	449a <__swsetup_r+0x8e>
    448e:	6961      	ldr	r1, [r4, #20]
    4490:	2200      	movs	r2, #0
    4492:	4248      	negs	r0, r1
    4494:	60a2      	str	r2, [r4, #8]
    4496:	61a0      	str	r0, [r4, #24]
    4498:	e007      	b.n	44aa <__swsetup_r+0x9e>
    449a:	f003 0102 	and.w	r1, r3, #2
    449e:	b208      	sxth	r0, r1
    44a0:	b908      	cbnz	r0, 44a6 <__swsetup_r+0x9a>
    44a2:	6963      	ldr	r3, [r4, #20]
    44a4:	e000      	b.n	44a8 <__swsetup_r+0x9c>
    44a6:	4613      	mov	r3, r2
    44a8:	60a3      	str	r3, [r4, #8]
    44aa:	6923      	ldr	r3, [r4, #16]
    44ac:	b933      	cbnz	r3, 44bc <__swsetup_r+0xb0>
    44ae:	89a2      	ldrh	r2, [r4, #12]
    44b0:	f002 0180 	and.w	r1, r2, #128	; 0x80
    44b4:	b208      	sxth	r0, r1
    44b6:	2800      	cmp	r0, #0
    44b8:	d1bb      	bne.n	4432 <__swsetup_r+0x26>
    44ba:	bd38      	pop	{r3, r4, r5, pc}
    44bc:	2000      	movs	r0, #0
    44be:	bd38      	pop	{r3, r4, r5, pc}
    44c0:	20000050 	.word	0x20000050

000044c4 <register_fini>:
    44c4:	4b02      	ldr	r3, [pc, #8]	; (44d0 <register_fini+0xc>)
    44c6:	b113      	cbz	r3, 44ce <register_fini+0xa>
    44c8:	4802      	ldr	r0, [pc, #8]	; (44d4 <register_fini+0x10>)
    44ca:	f000 b805 	b.w	44d8 <atexit>
    44ce:	4770      	bx	lr
    44d0:	00000000 	.word	0x00000000
    44d4:	000038ad 	.word	0x000038ad

000044d8 <atexit>:
    44d8:	4601      	mov	r1, r0
    44da:	2000      	movs	r0, #0
    44dc:	4602      	mov	r2, r0
    44de:	4603      	mov	r3, r0
    44e0:	f7ff b996 	b.w	3810 <__register_exitproc>

000044e4 <_fflush_r>:
    44e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    44e8:	460c      	mov	r4, r1
    44ea:	4605      	mov	r5, r0
    44ec:	b118      	cbz	r0, 44f6 <_fflush_r+0x12>
    44ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
    44f0:	b90b      	cbnz	r3, 44f6 <_fflush_r+0x12>
    44f2:	f000 f8eb 	bl	46cc <__sinit>
    44f6:	89a2      	ldrh	r2, [r4, #12]
    44f8:	b332      	cbz	r2, 4548 <_fflush_r+0x64>
    44fa:	f002 0008 	and.w	r0, r2, #8
    44fe:	b201      	sxth	r1, r0
    4500:	2900      	cmp	r1, #0
    4502:	d162      	bne.n	45ca <_fflush_r+0xe6>
    4504:	6861      	ldr	r1, [r4, #4]
    4506:	f442 6000 	orr.w	r0, r2, #2048	; 0x800
    450a:	2900      	cmp	r1, #0
    450c:	81a0      	strh	r0, [r4, #12]
    450e:	dc02      	bgt.n	4516 <_fflush_r+0x32>
    4510:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4512:	2b00      	cmp	r3, #0
    4514:	dd18      	ble.n	4548 <_fflush_r+0x64>
    4516:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4518:	b1b6      	cbz	r6, 4548 <_fflush_r+0x64>
    451a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    451e:	2000      	movs	r0, #0
    4520:	b212      	sxth	r2, r2
    4522:	682f      	ldr	r7, [r5, #0]
    4524:	6028      	str	r0, [r5, #0]
    4526:	b10a      	cbz	r2, 452c <_fflush_r+0x48>
    4528:	6d22      	ldr	r2, [r4, #80]	; 0x50
    452a:	e010      	b.n	454e <_fflush_r+0x6a>
    452c:	2301      	movs	r3, #1
    452e:	4628      	mov	r0, r5
    4530:	69e1      	ldr	r1, [r4, #28]
    4532:	47b0      	blx	r6
    4534:	4602      	mov	r2, r0
    4536:	3001      	adds	r0, #1
    4538:	d109      	bne.n	454e <_fflush_r+0x6a>
    453a:	6829      	ldr	r1, [r5, #0]
    453c:	b139      	cbz	r1, 454e <_fflush_r+0x6a>
    453e:	291d      	cmp	r1, #29
    4540:	d001      	beq.n	4546 <_fflush_r+0x62>
    4542:	2916      	cmp	r1, #22
    4544:	d14f      	bne.n	45e6 <_fflush_r+0x102>
    4546:	602f      	str	r7, [r5, #0]
    4548:	2000      	movs	r0, #0
    454a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    454e:	89a6      	ldrh	r6, [r4, #12]
    4550:	f006 0104 	and.w	r1, r6, #4
    4554:	b20b      	sxth	r3, r1
    4556:	b12b      	cbz	r3, 4564 <_fflush_r+0x80>
    4558:	6860      	ldr	r0, [r4, #4]
    455a:	6b26      	ldr	r6, [r4, #48]	; 0x30
    455c:	1a12      	subs	r2, r2, r0
    455e:	b10e      	cbz	r6, 4564 <_fflush_r+0x80>
    4560:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    4562:	1a52      	subs	r2, r2, r1
    4564:	69e1      	ldr	r1, [r4, #28]
    4566:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4568:	2300      	movs	r3, #0
    456a:	4628      	mov	r0, r5
    456c:	47b0      	blx	r6
    456e:	1c41      	adds	r1, r0, #1
    4570:	d105      	bne.n	457e <_fflush_r+0x9a>
    4572:	682a      	ldr	r2, [r5, #0]
    4574:	b11a      	cbz	r2, 457e <_fflush_r+0x9a>
    4576:	2a1d      	cmp	r2, #29
    4578:	d001      	beq.n	457e <_fflush_r+0x9a>
    457a:	2a16      	cmp	r2, #22
    457c:	d11f      	bne.n	45be <_fflush_r+0xda>
    457e:	89a3      	ldrh	r3, [r4, #12]
    4580:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
    4584:	2100      	movs	r1, #0
    4586:	81a2      	strh	r2, [r4, #12]
    4588:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    458c:	6922      	ldr	r2, [r4, #16]
    458e:	6061      	str	r1, [r4, #4]
    4590:	b219      	sxth	r1, r3
    4592:	6022      	str	r2, [r4, #0]
    4594:	b121      	cbz	r1, 45a0 <_fflush_r+0xbc>
    4596:	1c42      	adds	r2, r0, #1
    4598:	d101      	bne.n	459e <_fflush_r+0xba>
    459a:	682a      	ldr	r2, [r5, #0]
    459c:	b902      	cbnz	r2, 45a0 <_fflush_r+0xbc>
    459e:	6520      	str	r0, [r4, #80]	; 0x50
    45a0:	6b21      	ldr	r1, [r4, #48]	; 0x30
    45a2:	602f      	str	r7, [r5, #0]
    45a4:	2900      	cmp	r1, #0
    45a6:	d0cf      	beq.n	4548 <_fflush_r+0x64>
    45a8:	f104 0040 	add.w	r0, r4, #64	; 0x40
    45ac:	4281      	cmp	r1, r0
    45ae:	d002      	beq.n	45b6 <_fflush_r+0xd2>
    45b0:	4628      	mov	r0, r5
    45b2:	f000 f9c9 	bl	4948 <_free_r>
    45b6:	2000      	movs	r0, #0
    45b8:	6320      	str	r0, [r4, #48]	; 0x30
    45ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    45be:	89a3      	ldrh	r3, [r4, #12]
    45c0:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    45c4:	81a1      	strh	r1, [r4, #12]
    45c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    45ca:	6926      	ldr	r6, [r4, #16]
    45cc:	2e00      	cmp	r6, #0
    45ce:	d0bb      	beq.n	4548 <_fflush_r+0x64>
    45d0:	0792      	lsls	r2, r2, #30
    45d2:	6823      	ldr	r3, [r4, #0]
    45d4:	bf08      	it	eq
    45d6:	6962      	ldreq	r2, [r4, #20]
    45d8:	6026      	str	r6, [r4, #0]
    45da:	bf18      	it	ne
    45dc:	2200      	movne	r2, #0
    45de:	ebc6 0803 	rsb	r8, r6, r3
    45e2:	60a2      	str	r2, [r4, #8]
    45e4:	e012      	b.n	460c <_fflush_r+0x128>
    45e6:	89a3      	ldrh	r3, [r4, #12]
    45e8:	f043 0040 	orr.w	r0, r3, #64	; 0x40
    45ec:	81a0      	strh	r0, [r4, #12]
    45ee:	f04f 30ff 	mov.w	r0, #4294967295
    45f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    45f6:	6a67      	ldr	r7, [r4, #36]	; 0x24
    45f8:	69e1      	ldr	r1, [r4, #28]
    45fa:	4628      	mov	r0, r5
    45fc:	4632      	mov	r2, r6
    45fe:	4643      	mov	r3, r8
    4600:	47b8      	blx	r7
    4602:	2800      	cmp	r0, #0
    4604:	ddef      	ble.n	45e6 <_fflush_r+0x102>
    4606:	1836      	adds	r6, r6, r0
    4608:	ebc0 0808 	rsb	r8, r0, r8
    460c:	f1b8 0f00 	cmp.w	r8, #0
    4610:	dcf1      	bgt.n	45f6 <_fflush_r+0x112>
    4612:	e799      	b.n	4548 <_fflush_r+0x64>

00004614 <fflush>:
    4614:	4601      	mov	r1, r0
    4616:	b920      	cbnz	r0, 4622 <fflush+0xe>
    4618:	4804      	ldr	r0, [pc, #16]	; (462c <fflush+0x18>)
    461a:	4905      	ldr	r1, [pc, #20]	; (4630 <fflush+0x1c>)
    461c:	6800      	ldr	r0, [r0, #0]
    461e:	f000 bbc5 	b.w	4dac <_fwalk_reent>
    4622:	4b04      	ldr	r3, [pc, #16]	; (4634 <fflush+0x20>)
    4624:	6818      	ldr	r0, [r3, #0]
    4626:	f7ff bf5d 	b.w	44e4 <_fflush_r>
    462a:	bf00      	nop
    462c:	00006204 	.word	0x00006204
    4630:	000044e5 	.word	0x000044e5
    4634:	20000050 	.word	0x20000050

00004638 <__fp_lock>:
    4638:	2000      	movs	r0, #0
    463a:	4770      	bx	lr

0000463c <__fp_unlock>:
    463c:	2000      	movs	r0, #0
    463e:	4770      	bx	lr

00004640 <_cleanup_r>:
    4640:	4901      	ldr	r1, [pc, #4]	; (4648 <_cleanup_r+0x8>)
    4642:	f000 bb92 	b.w	4d6a <_fwalk>
    4646:	bf00      	nop
    4648:	000059a5 	.word	0x000059a5

0000464c <std.isra.0>:
    464c:	2300      	movs	r3, #0
    464e:	b510      	push	{r4, lr}
    4650:	4604      	mov	r4, r0
    4652:	6003      	str	r3, [r0, #0]
    4654:	6043      	str	r3, [r0, #4]
    4656:	6083      	str	r3, [r0, #8]
    4658:	8181      	strh	r1, [r0, #12]
    465a:	6643      	str	r3, [r0, #100]	; 0x64
    465c:	81c2      	strh	r2, [r0, #14]
    465e:	6103      	str	r3, [r0, #16]
    4660:	6143      	str	r3, [r0, #20]
    4662:	6183      	str	r3, [r0, #24]
    4664:	4619      	mov	r1, r3
    4666:	2208      	movs	r2, #8
    4668:	f100 005c 	add.w	r0, r0, #92	; 0x5c
    466c:	f7ff f97a 	bl	3964 <memset>
    4670:	4804      	ldr	r0, [pc, #16]	; (4684 <std.isra.0+0x38>)
    4672:	4905      	ldr	r1, [pc, #20]	; (4688 <std.isra.0+0x3c>)
    4674:	4a05      	ldr	r2, [pc, #20]	; (468c <std.isra.0+0x40>)
    4676:	4b06      	ldr	r3, [pc, #24]	; (4690 <std.isra.0+0x44>)
    4678:	61e4      	str	r4, [r4, #28]
    467a:	6220      	str	r0, [r4, #32]
    467c:	6261      	str	r1, [r4, #36]	; 0x24
    467e:	62a2      	str	r2, [r4, #40]	; 0x28
    4680:	62e3      	str	r3, [r4, #44]	; 0x2c
    4682:	bd10      	pop	{r4, pc}
    4684:	000056d9 	.word	0x000056d9
    4688:	000056ff 	.word	0x000056ff
    468c:	0000573b 	.word	0x0000573b
    4690:	0000575f 	.word	0x0000575f

00004694 <__sfmoreglue>:
    4694:	b570      	push	{r4, r5, r6, lr}
    4696:	2568      	movs	r5, #104	; 0x68
    4698:	434d      	muls	r5, r1
    469a:	460e      	mov	r6, r1
    469c:	f105 010c 	add.w	r1, r5, #12
    46a0:	f000 fc66 	bl	4f70 <_malloc_r>
    46a4:	4604      	mov	r4, r0
    46a6:	b140      	cbz	r0, 46ba <__sfmoreglue+0x26>
    46a8:	f100 000c 	add.w	r0, r0, #12
    46ac:	2100      	movs	r1, #0
    46ae:	e884 0042 	stmia.w	r4, {r1, r6}
    46b2:	60a0      	str	r0, [r4, #8]
    46b4:	462a      	mov	r2, r5
    46b6:	f7ff f955 	bl	3964 <memset>
    46ba:	4620      	mov	r0, r4
    46bc:	bd70      	pop	{r4, r5, r6, pc}

000046be <_cleanup>:
    46be:	4b02      	ldr	r3, [pc, #8]	; (46c8 <_cleanup+0xa>)
    46c0:	6818      	ldr	r0, [r3, #0]
    46c2:	f7ff bfbd 	b.w	4640 <_cleanup_r>
    46c6:	bf00      	nop
    46c8:	00006204 	.word	0x00006204

000046cc <__sinit>:
    46cc:	b538      	push	{r3, r4, r5, lr}
    46ce:	6b83      	ldr	r3, [r0, #56]	; 0x38
    46d0:	4604      	mov	r4, r0
    46d2:	b9eb      	cbnz	r3, 4710 <__sinit+0x44>
    46d4:	4a0f      	ldr	r2, [pc, #60]	; (4714 <__sinit+0x48>)
    46d6:	f8c0 32e0 	str.w	r3, [r0, #736]	; 0x2e0
    46da:	2501      	movs	r5, #1
    46dc:	63c2      	str	r2, [r0, #60]	; 0x3c
    46de:	6385      	str	r5, [r0, #56]	; 0x38
    46e0:	f504 713b 	add.w	r1, r4, #748	; 0x2ec
    46e4:	2003      	movs	r0, #3
    46e6:	461a      	mov	r2, r3
    46e8:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
    46ec:	f8c4 12e8 	str.w	r1, [r4, #744]	; 0x2e8
    46f0:	6860      	ldr	r0, [r4, #4]
    46f2:	2104      	movs	r1, #4
    46f4:	f7ff ffaa 	bl	464c <std.isra.0>
    46f8:	68a0      	ldr	r0, [r4, #8]
    46fa:	2109      	movs	r1, #9
    46fc:	462a      	mov	r2, r5
    46fe:	f7ff ffa5 	bl	464c <std.isra.0>
    4702:	68e0      	ldr	r0, [r4, #12]
    4704:	2112      	movs	r1, #18
    4706:	2202      	movs	r2, #2
    4708:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    470c:	f7ff bf9e 	b.w	464c <std.isra.0>
    4710:	bd38      	pop	{r3, r4, r5, pc}
    4712:	bf00      	nop
    4714:	00004641 	.word	0x00004641

00004718 <__sfp>:
    4718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    471a:	4b1d      	ldr	r3, [pc, #116]	; (4790 <__sfp+0x78>)
    471c:	681e      	ldr	r6, [r3, #0]
    471e:	4607      	mov	r7, r0
    4720:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    4722:	b910      	cbnz	r0, 472a <__sfp+0x12>
    4724:	4630      	mov	r0, r6
    4726:	f7ff ffd1 	bl	46cc <__sinit>
    472a:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
    472e:	68b4      	ldr	r4, [r6, #8]
    4730:	6871      	ldr	r1, [r6, #4]
    4732:	3901      	subs	r1, #1
    4734:	d404      	bmi.n	4740 <__sfp+0x28>
    4736:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    473a:	b185      	cbz	r5, 475e <__sfp+0x46>
    473c:	3468      	adds	r4, #104	; 0x68
    473e:	e7f8      	b.n	4732 <__sfp+0x1a>
    4740:	6832      	ldr	r2, [r6, #0]
    4742:	b10a      	cbz	r2, 4748 <__sfp+0x30>
    4744:	6836      	ldr	r6, [r6, #0]
    4746:	e7f2      	b.n	472e <__sfp+0x16>
    4748:	4638      	mov	r0, r7
    474a:	2104      	movs	r1, #4
    474c:	f7ff ffa2 	bl	4694 <__sfmoreglue>
    4750:	6030      	str	r0, [r6, #0]
    4752:	2800      	cmp	r0, #0
    4754:	d1f6      	bne.n	4744 <__sfp+0x2c>
    4756:	240c      	movs	r4, #12
    4758:	603c      	str	r4, [r7, #0]
    475a:	4604      	mov	r4, r0
    475c:	e015      	b.n	478a <__sfp+0x72>
    475e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4762:	2001      	movs	r0, #1
    4764:	81a0      	strh	r0, [r4, #12]
    4766:	81e3      	strh	r3, [r4, #14]
    4768:	6665      	str	r5, [r4, #100]	; 0x64
    476a:	6025      	str	r5, [r4, #0]
    476c:	60a5      	str	r5, [r4, #8]
    476e:	6065      	str	r5, [r4, #4]
    4770:	6125      	str	r5, [r4, #16]
    4772:	6165      	str	r5, [r4, #20]
    4774:	61a5      	str	r5, [r4, #24]
    4776:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    477a:	4629      	mov	r1, r5
    477c:	2208      	movs	r2, #8
    477e:	f7ff f8f1 	bl	3964 <memset>
    4782:	6325      	str	r5, [r4, #48]	; 0x30
    4784:	6365      	str	r5, [r4, #52]	; 0x34
    4786:	6465      	str	r5, [r4, #68]	; 0x44
    4788:	64a5      	str	r5, [r4, #72]	; 0x48
    478a:	4620      	mov	r0, r4
    478c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    478e:	bf00      	nop
    4790:	00006204 	.word	0x00006204

00004794 <__sfp_lock_acquire>:
    4794:	4770      	bx	lr

00004796 <__sfp_lock_release>:
    4796:	4770      	bx	lr

00004798 <__sinit_lock_acquire>:
    4798:	4770      	bx	lr

0000479a <__sinit_lock_release>:
    479a:	4770      	bx	lr

0000479c <__fp_lock_all>:
    479c:	4b02      	ldr	r3, [pc, #8]	; (47a8 <__fp_lock_all+0xc>)
    479e:	4903      	ldr	r1, [pc, #12]	; (47ac <__fp_lock_all+0x10>)
    47a0:	6818      	ldr	r0, [r3, #0]
    47a2:	f000 bae2 	b.w	4d6a <_fwalk>
    47a6:	bf00      	nop
    47a8:	20000050 	.word	0x20000050
    47ac:	00004639 	.word	0x00004639

000047b0 <__fp_unlock_all>:
    47b0:	4b02      	ldr	r3, [pc, #8]	; (47bc <__fp_unlock_all+0xc>)
    47b2:	4903      	ldr	r1, [pc, #12]	; (47c0 <__fp_unlock_all+0x10>)
    47b4:	6818      	ldr	r0, [r3, #0]
    47b6:	f000 bad8 	b.w	4d6a <_fwalk>
    47ba:	bf00      	nop
    47bc:	20000050 	.word	0x20000050
    47c0:	0000463d 	.word	0x0000463d

000047c4 <_fputwc_r>:
    47c4:	8993      	ldrh	r3, [r2, #12]
    47c6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    47ca:	4614      	mov	r4, r2
    47cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
    47d0:	4680      	mov	r8, r0
    47d2:	b210      	sxth	r0, r2
    47d4:	460e      	mov	r6, r1
    47d6:	b930      	cbnz	r0, 47e6 <_fputwc_r+0x22>
    47d8:	6e67      	ldr	r7, [r4, #100]	; 0x64
    47da:	f443 5100 	orr.w	r1, r3, #8192	; 0x2000
    47de:	f447 5300 	orr.w	r3, r7, #8192	; 0x2000
    47e2:	81a1      	strh	r1, [r4, #12]
    47e4:	6663      	str	r3, [r4, #100]	; 0x64
    47e6:	f000 fb29 	bl	4e3c <__locale_mb_cur_max>
    47ea:	2801      	cmp	r0, #1
    47ec:	d106      	bne.n	47fc <_fputwc_r+0x38>
    47ee:	b12e      	cbz	r6, 47fc <_fputwc_r+0x38>
    47f0:	2eff      	cmp	r6, #255	; 0xff
    47f2:	d803      	bhi.n	47fc <_fputwc_r+0x38>
    47f4:	f88d 6004 	strb.w	r6, [sp, #4]
    47f8:	4607      	mov	r7, r0
    47fa:	e00f      	b.n	481c <_fputwc_r+0x58>
    47fc:	4632      	mov	r2, r6
    47fe:	4640      	mov	r0, r8
    4800:	a901      	add	r1, sp, #4
    4802:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    4806:	f001 f813 	bl	5830 <_wcrtomb_r>
    480a:	1c42      	adds	r2, r0, #1
    480c:	4607      	mov	r7, r0
    480e:	d105      	bne.n	481c <_fputwc_r+0x58>
    4810:	89a2      	ldrh	r2, [r4, #12]
    4812:	f042 0040 	orr.w	r0, r2, #64	; 0x40
    4816:	81a0      	strh	r0, [r4, #12]
    4818:	4638      	mov	r0, r7
    481a:	e031      	b.n	4880 <_fputwc_r+0xbc>
    481c:	2500      	movs	r5, #0
    481e:	42bd      	cmp	r5, r7
    4820:	d02a      	beq.n	4878 <_fputwc_r+0xb4>
    4822:	68a1      	ldr	r1, [r4, #8]
    4824:	1e4a      	subs	r2, r1, #1
    4826:	2a00      	cmp	r2, #0
    4828:	60a2      	str	r2, [r4, #8]
    482a:	ab01      	add	r3, sp, #4
    482c:	da1a      	bge.n	4864 <_fputwc_r+0xa0>
    482e:	69a0      	ldr	r0, [r4, #24]
    4830:	4282      	cmp	r2, r0
    4832:	db0c      	blt.n	484e <_fputwc_r+0x8a>
    4834:	6821      	ldr	r1, [r4, #0]
    4836:	5d5a      	ldrb	r2, [r3, r5]
    4838:	700a      	strb	r2, [r1, #0]
    483a:	6823      	ldr	r3, [r4, #0]
    483c:	7819      	ldrb	r1, [r3, #0]
    483e:	290a      	cmp	r1, #10
    4840:	d003      	beq.n	484a <_fputwc_r+0x86>
    4842:	3301      	adds	r3, #1
    4844:	2200      	movs	r2, #0
    4846:	6023      	str	r3, [r4, #0]
    4848:	e013      	b.n	4872 <_fputwc_r+0xae>
    484a:	4640      	mov	r0, r8
    484c:	e001      	b.n	4852 <_fputwc_r+0x8e>
    484e:	5d59      	ldrb	r1, [r3, r5]
    4850:	4640      	mov	r0, r8
    4852:	4622      	mov	r2, r4
    4854:	f000 ff92 	bl	577c <__swbuf_r>
    4858:	f1b0 31ff 	subs.w	r1, r0, #4294967295
    485c:	4248      	negs	r0, r1
    485e:	eb50 0201 	adcs.w	r2, r0, r1
    4862:	e006      	b.n	4872 <_fputwc_r+0xae>
    4864:	6820      	ldr	r0, [r4, #0]
    4866:	5d59      	ldrb	r1, [r3, r5]
    4868:	7001      	strb	r1, [r0, #0]
    486a:	6822      	ldr	r2, [r4, #0]
    486c:	1c53      	adds	r3, r2, #1
    486e:	6023      	str	r3, [r4, #0]
    4870:	e000      	b.n	4874 <_fputwc_r+0xb0>
    4872:	b91a      	cbnz	r2, 487c <_fputwc_r+0xb8>
    4874:	3501      	adds	r5, #1
    4876:	e7d2      	b.n	481e <_fputwc_r+0x5a>
    4878:	4630      	mov	r0, r6
    487a:	e001      	b.n	4880 <_fputwc_r+0xbc>
    487c:	f04f 30ff 	mov.w	r0, #4294967295
    4880:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

00004884 <fputwc>:
    4884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4886:	4c08      	ldr	r4, [pc, #32]	; (48a8 <fputwc+0x24>)
    4888:	4607      	mov	r7, r0
    488a:	6820      	ldr	r0, [r4, #0]
    488c:	460e      	mov	r6, r1
    488e:	b118      	cbz	r0, 4898 <fputwc+0x14>
    4890:	6b85      	ldr	r5, [r0, #56]	; 0x38
    4892:	b90d      	cbnz	r5, 4898 <fputwc+0x14>
    4894:	f7ff ff1a 	bl	46cc <__sinit>
    4898:	6820      	ldr	r0, [r4, #0]
    489a:	4639      	mov	r1, r7
    489c:	4632      	mov	r2, r6
    489e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    48a2:	f7ff bf8f 	b.w	47c4 <_fputwc_r>
    48a6:	bf00      	nop
    48a8:	20000050 	.word	0x20000050

000048ac <_malloc_trim_r>:
    48ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48ae:	4d23      	ldr	r5, [pc, #140]	; (493c <_malloc_trim_r+0x90>)
    48b0:	460e      	mov	r6, r1
    48b2:	4604      	mov	r4, r0
    48b4:	f000 fd8f 	bl	53d6 <__malloc_lock>
    48b8:	68ab      	ldr	r3, [r5, #8]
    48ba:	685f      	ldr	r7, [r3, #4]
    48bc:	f027 0703 	bic.w	r7, r7, #3
    48c0:	f607 70ef 	addw	r0, r7, #4079	; 0xfef
    48c4:	1b81      	subs	r1, r0, r6
    48c6:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
    48ca:	f022 060f 	bic.w	r6, r2, #15
    48ce:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
    48d2:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
    48d6:	da04      	bge.n	48e2 <_malloc_trim_r+0x36>
    48d8:	4620      	mov	r0, r4
    48da:	f000 fd7d 	bl	53d8 <__malloc_unlock>
    48de:	2000      	movs	r0, #0
    48e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    48e2:	2100      	movs	r1, #0
    48e4:	4620      	mov	r0, r4
    48e6:	f000 fee7 	bl	56b8 <_sbrk_r>
    48ea:	68ab      	ldr	r3, [r5, #8]
    48ec:	19d9      	adds	r1, r3, r7
    48ee:	4288      	cmp	r0, r1
    48f0:	d1f2      	bne.n	48d8 <_malloc_trim_r+0x2c>
    48f2:	4271      	negs	r1, r6
    48f4:	4620      	mov	r0, r4
    48f6:	f000 fedf 	bl	56b8 <_sbrk_r>
    48fa:	3001      	adds	r0, #1
    48fc:	d110      	bne.n	4920 <_malloc_trim_r+0x74>
    48fe:	2100      	movs	r1, #0
    4900:	4620      	mov	r0, r4
    4902:	f000 fed9 	bl	56b8 <_sbrk_r>
    4906:	68ab      	ldr	r3, [r5, #8]
    4908:	1ac2      	subs	r2, r0, r3
    490a:	2a0f      	cmp	r2, #15
    490c:	dde4      	ble.n	48d8 <_malloc_trim_r+0x2c>
    490e:	490c      	ldr	r1, [pc, #48]	; (4940 <_malloc_trim_r+0x94>)
    4910:	6809      	ldr	r1, [r1, #0]
    4912:	1a40      	subs	r0, r0, r1
    4914:	490b      	ldr	r1, [pc, #44]	; (4944 <_malloc_trim_r+0x98>)
    4916:	f042 0201 	orr.w	r2, r2, #1
    491a:	6008      	str	r0, [r1, #0]
    491c:	605a      	str	r2, [r3, #4]
    491e:	e7db      	b.n	48d8 <_malloc_trim_r+0x2c>
    4920:	4b08      	ldr	r3, [pc, #32]	; (4944 <_malloc_trim_r+0x98>)
    4922:	68a8      	ldr	r0, [r5, #8]
    4924:	681a      	ldr	r2, [r3, #0]
    4926:	1bbf      	subs	r7, r7, r6
    4928:	f047 0701 	orr.w	r7, r7, #1
    492c:	6047      	str	r7, [r0, #4]
    492e:	1b96      	subs	r6, r2, r6
    4930:	4620      	mov	r0, r4
    4932:	601e      	str	r6, [r3, #0]
    4934:	f000 fd50 	bl	53d8 <__malloc_unlock>
    4938:	2001      	movs	r0, #1
    493a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    493c:	200004fc 	.word	0x200004fc
    4940:	20000904 	.word	0x20000904
    4944:	200009e0 	.word	0x200009e0

00004948 <_free_r>:
    4948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    494a:	4606      	mov	r6, r0
    494c:	460d      	mov	r5, r1
    494e:	2900      	cmp	r1, #0
    4950:	f000 80a6 	beq.w	4aa0 <_free_r+0x158>
    4954:	f000 fd3f 	bl	53d6 <__malloc_lock>
    4958:	f855 cc04 	ldr.w	ip, [r5, #-4]
    495c:	4f51      	ldr	r7, [pc, #324]	; (4aa4 <_free_r+0x15c>)
    495e:	f1a5 0308 	sub.w	r3, r5, #8
    4962:	f02c 0201 	bic.w	r2, ip, #1
    4966:	189c      	adds	r4, r3, r2
    4968:	68b9      	ldr	r1, [r7, #8]
    496a:	6860      	ldr	r0, [r4, #4]
    496c:	428c      	cmp	r4, r1
    496e:	f020 0003 	bic.w	r0, r0, #3
    4972:	f00c 0101 	and.w	r1, ip, #1
    4976:	d11c      	bne.n	49b2 <_free_r+0x6a>
    4978:	1882      	adds	r2, r0, r2
    497a:	b939      	cbnz	r1, 498c <_free_r+0x44>
    497c:	f855 1c08 	ldr.w	r1, [r5, #-8]
    4980:	1a5b      	subs	r3, r3, r1
    4982:	1852      	adds	r2, r2, r1
    4984:	6898      	ldr	r0, [r3, #8]
    4986:	68d9      	ldr	r1, [r3, #12]
    4988:	60c1      	str	r1, [r0, #12]
    498a:	6088      	str	r0, [r1, #8]
    498c:	4845      	ldr	r0, [pc, #276]	; (4aa4 <_free_r+0x15c>)
    498e:	f042 0101 	orr.w	r1, r2, #1
    4992:	6059      	str	r1, [r3, #4]
    4994:	6083      	str	r3, [r0, #8]
    4996:	4b44      	ldr	r3, [pc, #272]	; (4aa8 <_free_r+0x160>)
    4998:	6819      	ldr	r1, [r3, #0]
    499a:	428a      	cmp	r2, r1
    499c:	d304      	bcc.n	49a8 <_free_r+0x60>
    499e:	4a43      	ldr	r2, [pc, #268]	; (4aac <_free_r+0x164>)
    49a0:	4630      	mov	r0, r6
    49a2:	6811      	ldr	r1, [r2, #0]
    49a4:	f7ff ff82 	bl	48ac <_malloc_trim_r>
    49a8:	4630      	mov	r0, r6
    49aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    49ae:	f000 bd13 	b.w	53d8 <__malloc_unlock>
    49b2:	6060      	str	r0, [r4, #4]
    49b4:	b959      	cbnz	r1, 49ce <_free_r+0x86>
    49b6:	f855 5c08 	ldr.w	r5, [r5, #-8]
    49ba:	1b5b      	subs	r3, r3, r5
    49bc:	1952      	adds	r2, r2, r5
    49be:	689d      	ldr	r5, [r3, #8]
    49c0:	3708      	adds	r7, #8
    49c2:	42bd      	cmp	r5, r7
    49c4:	d005      	beq.n	49d2 <_free_r+0x8a>
    49c6:	68df      	ldr	r7, [r3, #12]
    49c8:	60ef      	str	r7, [r5, #12]
    49ca:	60bd      	str	r5, [r7, #8]
    49cc:	e002      	b.n	49d4 <_free_r+0x8c>
    49ce:	2100      	movs	r1, #0
    49d0:	e000      	b.n	49d4 <_free_r+0x8c>
    49d2:	2101      	movs	r1, #1
    49d4:	1825      	adds	r5, r4, r0
    49d6:	686d      	ldr	r5, [r5, #4]
    49d8:	f015 0f01 	tst.w	r5, #1
    49dc:	d10f      	bne.n	49fe <_free_r+0xb6>
    49de:	1812      	adds	r2, r2, r0
    49e0:	b949      	cbnz	r1, 49f6 <_free_r+0xae>
    49e2:	68a0      	ldr	r0, [r4, #8]
    49e4:	4d32      	ldr	r5, [pc, #200]	; (4ab0 <_free_r+0x168>)
    49e6:	42a8      	cmp	r0, r5
    49e8:	d105      	bne.n	49f6 <_free_r+0xae>
    49ea:	60eb      	str	r3, [r5, #12]
    49ec:	60ab      	str	r3, [r5, #8]
    49ee:	60d8      	str	r0, [r3, #12]
    49f0:	6098      	str	r0, [r3, #8]
    49f2:	2101      	movs	r1, #1
    49f4:	e003      	b.n	49fe <_free_r+0xb6>
    49f6:	68e0      	ldr	r0, [r4, #12]
    49f8:	68a4      	ldr	r4, [r4, #8]
    49fa:	60e0      	str	r0, [r4, #12]
    49fc:	6084      	str	r4, [r0, #8]
    49fe:	f042 0001 	orr.w	r0, r2, #1
    4a02:	6058      	str	r0, [r3, #4]
    4a04:	509a      	str	r2, [r3, r2]
    4a06:	2900      	cmp	r1, #0
    4a08:	d1ce      	bne.n	49a8 <_free_r+0x60>
    4a0a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    4a0e:	d20c      	bcs.n	4a2a <_free_r+0xe2>
    4a10:	4924      	ldr	r1, [pc, #144]	; (4aa4 <_free_r+0x15c>)
    4a12:	08d2      	lsrs	r2, r2, #3
    4a14:	1090      	asrs	r0, r2, #2
    4a16:	2401      	movs	r4, #1
    4a18:	fa04 f400 	lsl.w	r4, r4, r0
    4a1c:	6848      	ldr	r0, [r1, #4]
    4a1e:	4320      	orrs	r0, r4
    4a20:	6048      	str	r0, [r1, #4]
    4a22:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    4a26:	6881      	ldr	r1, [r0, #8]
    4a28:	e035      	b.n	4a96 <_free_r+0x14e>
    4a2a:	0a54      	lsrs	r4, r2, #9
    4a2c:	2c04      	cmp	r4, #4
    4a2e:	d802      	bhi.n	4a36 <_free_r+0xee>
    4a30:	0994      	lsrs	r4, r2, #6
    4a32:	3438      	adds	r4, #56	; 0x38
    4a34:	e016      	b.n	4a64 <_free_r+0x11c>
    4a36:	2c14      	cmp	r4, #20
    4a38:	d801      	bhi.n	4a3e <_free_r+0xf6>
    4a3a:	345b      	adds	r4, #91	; 0x5b
    4a3c:	e012      	b.n	4a64 <_free_r+0x11c>
    4a3e:	2c54      	cmp	r4, #84	; 0x54
    4a40:	d802      	bhi.n	4a48 <_free_r+0x100>
    4a42:	0b14      	lsrs	r4, r2, #12
    4a44:	346e      	adds	r4, #110	; 0x6e
    4a46:	e00d      	b.n	4a64 <_free_r+0x11c>
    4a48:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
    4a4c:	d802      	bhi.n	4a54 <_free_r+0x10c>
    4a4e:	0bd4      	lsrs	r4, r2, #15
    4a50:	3477      	adds	r4, #119	; 0x77
    4a52:	e007      	b.n	4a64 <_free_r+0x11c>
    4a54:	f240 5554 	movw	r5, #1364	; 0x554
    4a58:	42ac      	cmp	r4, r5
    4a5a:	d802      	bhi.n	4a62 <_free_r+0x11a>
    4a5c:	0c94      	lsrs	r4, r2, #18
    4a5e:	347c      	adds	r4, #124	; 0x7c
    4a60:	e000      	b.n	4a64 <_free_r+0x11c>
    4a62:	247e      	movs	r4, #126	; 0x7e
    4a64:	4d0f      	ldr	r5, [pc, #60]	; (4aa4 <_free_r+0x15c>)
    4a66:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    4a6a:	6881      	ldr	r1, [r0, #8]
    4a6c:	4281      	cmp	r1, r0
    4a6e:	d10c      	bne.n	4a8a <_free_r+0x142>
    4a70:	6868      	ldr	r0, [r5, #4]
    4a72:	2201      	movs	r2, #1
    4a74:	10a4      	asrs	r4, r4, #2
    4a76:	fa02 f404 	lsl.w	r4, r2, r4
    4a7a:	ea44 0200 	orr.w	r2, r4, r0
    4a7e:	606a      	str	r2, [r5, #4]
    4a80:	4608      	mov	r0, r1
    4a82:	e008      	b.n	4a96 <_free_r+0x14e>
    4a84:	6889      	ldr	r1, [r1, #8]
    4a86:	4281      	cmp	r1, r0
    4a88:	d004      	beq.n	4a94 <_free_r+0x14c>
    4a8a:	684c      	ldr	r4, [r1, #4]
    4a8c:	f024 0403 	bic.w	r4, r4, #3
    4a90:	42a2      	cmp	r2, r4
    4a92:	d3f7      	bcc.n	4a84 <_free_r+0x13c>
    4a94:	68c8      	ldr	r0, [r1, #12]
    4a96:	60d8      	str	r0, [r3, #12]
    4a98:	6099      	str	r1, [r3, #8]
    4a9a:	6083      	str	r3, [r0, #8]
    4a9c:	60cb      	str	r3, [r1, #12]
    4a9e:	e783      	b.n	49a8 <_free_r+0x60>
    4aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4aa2:	bf00      	nop
    4aa4:	200004fc 	.word	0x200004fc
    4aa8:	20000908 	.word	0x20000908
    4aac:	200009dc 	.word	0x200009dc
    4ab0:	20000504 	.word	0x20000504

00004ab4 <__sfvwrite_r>:
    4ab4:	6893      	ldr	r3, [r2, #8]
    4ab6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4aba:	4606      	mov	r6, r0
    4abc:	460c      	mov	r4, r1
    4abe:	4691      	mov	r9, r2
    4ac0:	b90b      	cbnz	r3, 4ac6 <__sfvwrite_r+0x12>
    4ac2:	2000      	movs	r0, #0
    4ac4:	e14f      	b.n	4d66 <__sfvwrite_r+0x2b2>
    4ac6:	8988      	ldrh	r0, [r1, #12]
    4ac8:	f000 0108 	and.w	r1, r0, #8
    4acc:	b20a      	sxth	r2, r1
    4ace:	b10a      	cbz	r2, 4ad4 <__sfvwrite_r+0x20>
    4ad0:	6923      	ldr	r3, [r4, #16]
    4ad2:	b95b      	cbnz	r3, 4aec <__sfvwrite_r+0x38>
    4ad4:	4630      	mov	r0, r6
    4ad6:	4621      	mov	r1, r4
    4ad8:	f7ff fc98 	bl	440c <__swsetup_r>
    4adc:	b130      	cbz	r0, 4aec <__sfvwrite_r+0x38>
    4ade:	89a1      	ldrh	r1, [r4, #12]
    4ae0:	2209      	movs	r2, #9
    4ae2:	f041 0040 	orr.w	r0, r1, #64	; 0x40
    4ae6:	81a0      	strh	r0, [r4, #12]
    4ae8:	6032      	str	r2, [r6, #0]
    4aea:	e13a      	b.n	4d62 <__sfvwrite_r+0x2ae>
    4aec:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
    4af0:	f8d9 8000 	ldr.w	r8, [r9]
    4af4:	f00a 0c02 	and.w	ip, sl, #2
    4af8:	fa0f f58c 	sxth.w	r5, ip
    4afc:	b315      	cbz	r5, 4b44 <__sfvwrite_r+0x90>
    4afe:	f04f 0a00 	mov.w	sl, #0
    4b02:	4657      	mov	r7, sl
    4b04:	b937      	cbnz	r7, 4b14 <__sfvwrite_r+0x60>
    4b06:	f8d8 a000 	ldr.w	sl, [r8]
    4b0a:	f8d8 7004 	ldr.w	r7, [r8, #4]
    4b0e:	f108 0808 	add.w	r8, r8, #8
    4b12:	e7f7      	b.n	4b04 <__sfvwrite_r+0x50>
    4b14:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    4b18:	bf34      	ite	cc
    4b1a:	463b      	movcc	r3, r7
    4b1c:	f44f 6380 	movcs.w	r3, #1024	; 0x400
    4b20:	4630      	mov	r0, r6
    4b22:	69e1      	ldr	r1, [r4, #28]
    4b24:	6a65      	ldr	r5, [r4, #36]	; 0x24
    4b26:	4652      	mov	r2, sl
    4b28:	47a8      	blx	r5
    4b2a:	2800      	cmp	r0, #0
    4b2c:	f340 8115 	ble.w	4d5a <__sfvwrite_r+0x2a6>
    4b30:	f8d9 1008 	ldr.w	r1, [r9, #8]
    4b34:	4482      	add	sl, r0
    4b36:	1a3f      	subs	r7, r7, r0
    4b38:	1a08      	subs	r0, r1, r0
    4b3a:	f8c9 0008 	str.w	r0, [r9, #8]
    4b3e:	2800      	cmp	r0, #0
    4b40:	d1e0      	bne.n	4b04 <__sfvwrite_r+0x50>
    4b42:	e7be      	b.n	4ac2 <__sfvwrite_r+0xe>
    4b44:	f01a 0a01 	ands.w	sl, sl, #1
    4b48:	d004      	beq.n	4b54 <__sfvwrite_r+0xa0>
    4b4a:	46ab      	mov	fp, r5
    4b4c:	9501      	str	r5, [sp, #4]
    4b4e:	462f      	mov	r7, r5
    4b50:	46aa      	mov	sl, r5
    4b52:	e0c7      	b.n	4ce4 <__sfvwrite_r+0x230>
    4b54:	4655      	mov	r5, sl
    4b56:	b935      	cbnz	r5, 4b66 <__sfvwrite_r+0xb2>
    4b58:	f8d8 a000 	ldr.w	sl, [r8]
    4b5c:	f8d8 5004 	ldr.w	r5, [r8, #4]
    4b60:	f108 0808 	add.w	r8, r8, #8
    4b64:	e7f7      	b.n	4b56 <__sfvwrite_r+0xa2>
    4b66:	89a2      	ldrh	r2, [r4, #12]
    4b68:	f8d4 b008 	ldr.w	fp, [r4, #8]
    4b6c:	f402 7000 	and.w	r0, r2, #512	; 0x200
    4b70:	b203      	sxth	r3, r0
    4b72:	2b00      	cmp	r3, #0
    4b74:	d052      	beq.n	4c1c <__sfvwrite_r+0x168>
    4b76:	455d      	cmp	r5, fp
    4b78:	d340      	bcc.n	4bfc <__sfvwrite_r+0x148>
    4b7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
    4b7e:	d03b      	beq.n	4bf8 <__sfvwrite_r+0x144>
    4b80:	6921      	ldr	r1, [r4, #16]
    4b82:	6827      	ldr	r7, [r4, #0]
    4b84:	6963      	ldr	r3, [r4, #20]
    4b86:	f04f 0b03 	mov.w	fp, #3
    4b8a:	fb0b f303 	mul.w	r3, fp, r3
    4b8e:	2002      	movs	r0, #2
    4b90:	1a7f      	subs	r7, r7, r1
    4b92:	fb93 fcf0 	sdiv	ip, r3, r0
    4b96:	1c7b      	adds	r3, r7, #1
    4b98:	1958      	adds	r0, r3, r5
    4b9a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
    4b9e:	4584      	cmp	ip, r0
    4ba0:	bf28      	it	cs
    4ba2:	4660      	movcs	r0, ip
    4ba4:	b213      	sxth	r3, r2
    4ba6:	9001      	str	r0, [sp, #4]
    4ba8:	4630      	mov	r0, r6
    4baa:	b17b      	cbz	r3, 4bcc <__sfvwrite_r+0x118>
    4bac:	9901      	ldr	r1, [sp, #4]
    4bae:	f000 f9df 	bl	4f70 <_malloc_r>
    4bb2:	4683      	mov	fp, r0
    4bb4:	b198      	cbz	r0, 4bde <__sfvwrite_r+0x12a>
    4bb6:	6921      	ldr	r1, [r4, #16]
    4bb8:	463a      	mov	r2, r7
    4bba:	f000 fbe9 	bl	5390 <memcpy>
    4bbe:	89a1      	ldrh	r1, [r4, #12]
    4bc0:	f421 6090 	bic.w	r0, r1, #1152	; 0x480
    4bc4:	f040 0280 	orr.w	r2, r0, #128	; 0x80
    4bc8:	81a2      	strh	r2, [r4, #12]
    4bca:	e00b      	b.n	4be4 <__sfvwrite_r+0x130>
    4bcc:	9a01      	ldr	r2, [sp, #4]
    4bce:	f000 fc05 	bl	53dc <_realloc_r>
    4bd2:	4683      	mov	fp, r0
    4bd4:	b930      	cbnz	r0, 4be4 <__sfvwrite_r+0x130>
    4bd6:	4630      	mov	r0, r6
    4bd8:	6921      	ldr	r1, [r4, #16]
    4bda:	f7ff feb5 	bl	4948 <_free_r>
    4bde:	230c      	movs	r3, #12
    4be0:	6033      	str	r3, [r6, #0]
    4be2:	e0ba      	b.n	4d5a <__sfvwrite_r+0x2a6>
    4be4:	9901      	ldr	r1, [sp, #4]
    4be6:	f8c4 b010 	str.w	fp, [r4, #16]
    4bea:	eb0b 0307 	add.w	r3, fp, r7
    4bee:	1bcf      	subs	r7, r1, r7
    4bf0:	6023      	str	r3, [r4, #0]
    4bf2:	6161      	str	r1, [r4, #20]
    4bf4:	46ab      	mov	fp, r5
    4bf6:	60a7      	str	r7, [r4, #8]
    4bf8:	455d      	cmp	r5, fp
    4bfa:	d200      	bcs.n	4bfe <__sfvwrite_r+0x14a>
    4bfc:	46ab      	mov	fp, r5
    4bfe:	465a      	mov	r2, fp
    4c00:	4651      	mov	r1, sl
    4c02:	6820      	ldr	r0, [r4, #0]
    4c04:	f000 fbcd 	bl	53a2 <memmove>
    4c08:	68a0      	ldr	r0, [r4, #8]
    4c0a:	6823      	ldr	r3, [r4, #0]
    4c0c:	ebcb 0200 	rsb	r2, fp, r0
    4c10:	eb03 010b 	add.w	r1, r3, fp
    4c14:	60a2      	str	r2, [r4, #8]
    4c16:	6021      	str	r1, [r4, #0]
    4c18:	46ab      	mov	fp, r5
    4c1a:	e02a      	b.n	4c72 <__sfvwrite_r+0x1be>
    4c1c:	6820      	ldr	r0, [r4, #0]
    4c1e:	6921      	ldr	r1, [r4, #16]
    4c20:	4288      	cmp	r0, r1
    4c22:	d90f      	bls.n	4c44 <__sfvwrite_r+0x190>
    4c24:	455d      	cmp	r5, fp
    4c26:	d90d      	bls.n	4c44 <__sfvwrite_r+0x190>
    4c28:	4651      	mov	r1, sl
    4c2a:	465a      	mov	r2, fp
    4c2c:	f000 fbb9 	bl	53a2 <memmove>
    4c30:	6822      	ldr	r2, [r4, #0]
    4c32:	eb02 000b 	add.w	r0, r2, fp
    4c36:	6020      	str	r0, [r4, #0]
    4c38:	4621      	mov	r1, r4
    4c3a:	4630      	mov	r0, r6
    4c3c:	f7ff fc52 	bl	44e4 <_fflush_r>
    4c40:	b1b8      	cbz	r0, 4c72 <__sfvwrite_r+0x1be>
    4c42:	e08a      	b.n	4d5a <__sfvwrite_r+0x2a6>
    4c44:	6963      	ldr	r3, [r4, #20]
    4c46:	429d      	cmp	r5, r3
    4c48:	d308      	bcc.n	4c5c <__sfvwrite_r+0x1a8>
    4c4a:	6a67      	ldr	r7, [r4, #36]	; 0x24
    4c4c:	69e1      	ldr	r1, [r4, #28]
    4c4e:	4630      	mov	r0, r6
    4c50:	4652      	mov	r2, sl
    4c52:	47b8      	blx	r7
    4c54:	f1b0 0b00 	subs.w	fp, r0, #0
    4c58:	dc0b      	bgt.n	4c72 <__sfvwrite_r+0x1be>
    4c5a:	e07e      	b.n	4d5a <__sfvwrite_r+0x2a6>
    4c5c:	4651      	mov	r1, sl
    4c5e:	462a      	mov	r2, r5
    4c60:	f000 fb9f 	bl	53a2 <memmove>
    4c64:	68a2      	ldr	r2, [r4, #8]
    4c66:	6823      	ldr	r3, [r4, #0]
    4c68:	1b50      	subs	r0, r2, r5
    4c6a:	1959      	adds	r1, r3, r5
    4c6c:	46ab      	mov	fp, r5
    4c6e:	60a0      	str	r0, [r4, #8]
    4c70:	6021      	str	r1, [r4, #0]
    4c72:	f8d9 0008 	ldr.w	r0, [r9, #8]
    4c76:	ebcb 0200 	rsb	r2, fp, r0
    4c7a:	44da      	add	sl, fp
    4c7c:	ebcb 0505 	rsb	r5, fp, r5
    4c80:	f8c9 2008 	str.w	r2, [r9, #8]
    4c84:	2a00      	cmp	r2, #0
    4c86:	f47f af66 	bne.w	4b56 <__sfvwrite_r+0xa2>
    4c8a:	e71a      	b.n	4ac2 <__sfvwrite_r+0xe>
    4c8c:	9801      	ldr	r0, [sp, #4]
    4c8e:	2800      	cmp	r0, #0
    4c90:	d032      	beq.n	4cf8 <__sfvwrite_r+0x244>
    4c92:	6820      	ldr	r0, [r4, #0]
    4c94:	6921      	ldr	r1, [r4, #16]
    4c96:	68a5      	ldr	r5, [r4, #8]
    4c98:	f8d4 e014 	ldr.w	lr, [r4, #20]
    4c9c:	45d3      	cmp	fp, sl
    4c9e:	bf34      	ite	cc
    4ca0:	465b      	movcc	r3, fp
    4ca2:	4653      	movcs	r3, sl
    4ca4:	4288      	cmp	r0, r1
    4ca6:	d937      	bls.n	4d18 <__sfvwrite_r+0x264>
    4ca8:	4475      	add	r5, lr
    4caa:	42ab      	cmp	r3, r5
    4cac:	dd34      	ble.n	4d18 <__sfvwrite_r+0x264>
    4cae:	4639      	mov	r1, r7
    4cb0:	462a      	mov	r2, r5
    4cb2:	f000 fb76 	bl	53a2 <memmove>
    4cb6:	6820      	ldr	r0, [r4, #0]
    4cb8:	1943      	adds	r3, r0, r5
    4cba:	6023      	str	r3, [r4, #0]
    4cbc:	4630      	mov	r0, r6
    4cbe:	4621      	mov	r1, r4
    4cc0:	f7ff fc10 	bl	44e4 <_fflush_r>
    4cc4:	2800      	cmp	r0, #0
    4cc6:	d148      	bne.n	4d5a <__sfvwrite_r+0x2a6>
    4cc8:	ebbb 0b05 	subs.w	fp, fp, r5
    4ccc:	d03d      	beq.n	4d4a <__sfvwrite_r+0x296>
    4cce:	f8d9 2008 	ldr.w	r2, [r9, #8]
    4cd2:	197f      	adds	r7, r7, r5
    4cd4:	ebc5 0a0a 	rsb	sl, r5, sl
    4cd8:	1b55      	subs	r5, r2, r5
    4cda:	f8c9 5008 	str.w	r5, [r9, #8]
    4cde:	2d00      	cmp	r5, #0
    4ce0:	f43f aeef 	beq.w	4ac2 <__sfvwrite_r+0xe>
    4ce4:	f1ba 0f00 	cmp.w	sl, #0
    4ce8:	d1d0      	bne.n	4c8c <__sfvwrite_r+0x1d8>
    4cea:	2100      	movs	r1, #0
    4cec:	e898 0480 	ldmia.w	r8, {r7, sl}
    4cf0:	9101      	str	r1, [sp, #4]
    4cf2:	f108 0808 	add.w	r8, r8, #8
    4cf6:	e7f5      	b.n	4ce4 <__sfvwrite_r+0x230>
    4cf8:	4638      	mov	r0, r7
    4cfa:	210a      	movs	r1, #10
    4cfc:	4652      	mov	r2, sl
    4cfe:	f000 fb39 	bl	5374 <memchr>
    4d02:	b120      	cbz	r0, 4d0e <__sfvwrite_r+0x25a>
    4d04:	f100 0101 	add.w	r1, r0, #1
    4d08:	ebc7 0b01 	rsb	fp, r7, r1
    4d0c:	e001      	b.n	4d12 <__sfvwrite_r+0x25e>
    4d0e:	f10a 0b01 	add.w	fp, sl, #1
    4d12:	2201      	movs	r2, #1
    4d14:	9201      	str	r2, [sp, #4]
    4d16:	e7bc      	b.n	4c92 <__sfvwrite_r+0x1de>
    4d18:	4573      	cmp	r3, lr
    4d1a:	db08      	blt.n	4d2e <__sfvwrite_r+0x27a>
    4d1c:	6a65      	ldr	r5, [r4, #36]	; 0x24
    4d1e:	69e1      	ldr	r1, [r4, #28]
    4d20:	4630      	mov	r0, r6
    4d22:	463a      	mov	r2, r7
    4d24:	4673      	mov	r3, lr
    4d26:	47a8      	blx	r5
    4d28:	1e05      	subs	r5, r0, #0
    4d2a:	dccd      	bgt.n	4cc8 <__sfvwrite_r+0x214>
    4d2c:	e015      	b.n	4d5a <__sfvwrite_r+0x2a6>
    4d2e:	461a      	mov	r2, r3
    4d30:	4639      	mov	r1, r7
    4d32:	9300      	str	r3, [sp, #0]
    4d34:	f000 fb35 	bl	53a2 <memmove>
    4d38:	9b00      	ldr	r3, [sp, #0]
    4d3a:	6825      	ldr	r5, [r4, #0]
    4d3c:	68a0      	ldr	r0, [r4, #8]
    4d3e:	18e9      	adds	r1, r5, r3
    4d40:	1ac2      	subs	r2, r0, r3
    4d42:	60a2      	str	r2, [r4, #8]
    4d44:	6021      	str	r1, [r4, #0]
    4d46:	461d      	mov	r5, r3
    4d48:	e7be      	b.n	4cc8 <__sfvwrite_r+0x214>
    4d4a:	4630      	mov	r0, r6
    4d4c:	4621      	mov	r1, r4
    4d4e:	f7ff fbc9 	bl	44e4 <_fflush_r>
    4d52:	b910      	cbnz	r0, 4d5a <__sfvwrite_r+0x2a6>
    4d54:	f8cd b004 	str.w	fp, [sp, #4]
    4d58:	e7b9      	b.n	4cce <__sfvwrite_r+0x21a>
    4d5a:	89a2      	ldrh	r2, [r4, #12]
    4d5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
    4d60:	81a3      	strh	r3, [r4, #12]
    4d62:	f04f 30ff 	mov.w	r0, #4294967295
    4d66:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00004d6a <_fwalk>:
    4d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d6e:	4604      	mov	r4, r0
    4d70:	4688      	mov	r8, r1
    4d72:	f7ff fd0f 	bl	4794 <__sfp_lock_acquire>
    4d76:	f504 7438 	add.w	r4, r4, #736	; 0x2e0
    4d7a:	2600      	movs	r6, #0
    4d7c:	b18c      	cbz	r4, 4da2 <_fwalk+0x38>
    4d7e:	68a5      	ldr	r5, [r4, #8]
    4d80:	6867      	ldr	r7, [r4, #4]
    4d82:	3f01      	subs	r7, #1
    4d84:	d40b      	bmi.n	4d9e <_fwalk+0x34>
    4d86:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
    4d8a:	b133      	cbz	r3, 4d9a <_fwalk+0x30>
    4d8c:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
    4d90:	1c43      	adds	r3, r0, #1
    4d92:	d002      	beq.n	4d9a <_fwalk+0x30>
    4d94:	4628      	mov	r0, r5
    4d96:	47c0      	blx	r8
    4d98:	4306      	orrs	r6, r0
    4d9a:	3568      	adds	r5, #104	; 0x68
    4d9c:	e7f1      	b.n	4d82 <_fwalk+0x18>
    4d9e:	6824      	ldr	r4, [r4, #0]
    4da0:	e7ec      	b.n	4d7c <_fwalk+0x12>
    4da2:	f7ff fcf8 	bl	4796 <__sfp_lock_release>
    4da6:	4630      	mov	r0, r6
    4da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004dac <_fwalk_reent>:
    4dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4db0:	4680      	mov	r8, r0
    4db2:	4689      	mov	r9, r1
    4db4:	f7ff fcee 	bl	4794 <__sfp_lock_acquire>
    4db8:	f508 7438 	add.w	r4, r8, #736	; 0x2e0
    4dbc:	2600      	movs	r6, #0
    4dbe:	b194      	cbz	r4, 4de6 <_fwalk_reent+0x3a>
    4dc0:	68a5      	ldr	r5, [r4, #8]
    4dc2:	6867      	ldr	r7, [r4, #4]
    4dc4:	3f01      	subs	r7, #1
    4dc6:	d40c      	bmi.n	4de2 <_fwalk_reent+0x36>
    4dc8:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
    4dcc:	b13b      	cbz	r3, 4dde <_fwalk_reent+0x32>
    4dce:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
    4dd2:	1c43      	adds	r3, r0, #1
    4dd4:	d003      	beq.n	4dde <_fwalk_reent+0x32>
    4dd6:	4640      	mov	r0, r8
    4dd8:	4629      	mov	r1, r5
    4dda:	47c8      	blx	r9
    4ddc:	4306      	orrs	r6, r0
    4dde:	3568      	adds	r5, #104	; 0x68
    4de0:	e7f0      	b.n	4dc4 <_fwalk_reent+0x18>
    4de2:	6824      	ldr	r4, [r4, #0]
    4de4:	e7eb      	b.n	4dbe <_fwalk_reent+0x12>
    4de6:	f7ff fcd6 	bl	4796 <__sfp_lock_release>
    4dea:	4630      	mov	r0, r6
    4dec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00004df0 <_setlocale_r>:
    4df0:	b510      	push	{r4, lr}
    4df2:	4614      	mov	r4, r2
    4df4:	b90a      	cbnz	r2, 4dfa <_setlocale_r+0xa>
    4df6:	480c      	ldr	r0, [pc, #48]	; (4e28 <_setlocale_r+0x38>)
    4df8:	bd10      	pop	{r4, pc}
    4dfa:	4610      	mov	r0, r2
    4dfc:	490b      	ldr	r1, [pc, #44]	; (4e2c <_setlocale_r+0x3c>)
    4dfe:	f000 fcb2 	bl	5766 <strcmp>
    4e02:	2800      	cmp	r0, #0
    4e04:	d0f7      	beq.n	4df6 <_setlocale_r+0x6>
    4e06:	4620      	mov	r0, r4
    4e08:	4907      	ldr	r1, [pc, #28]	; (4e28 <_setlocale_r+0x38>)
    4e0a:	f000 fcac 	bl	5766 <strcmp>
    4e0e:	2800      	cmp	r0, #0
    4e10:	d0f1      	beq.n	4df6 <_setlocale_r+0x6>
    4e12:	4620      	mov	r0, r4
    4e14:	4906      	ldr	r1, [pc, #24]	; (4e30 <_setlocale_r+0x40>)
    4e16:	f000 fca6 	bl	5766 <strcmp>
    4e1a:	4b03      	ldr	r3, [pc, #12]	; (4e28 <_setlocale_r+0x38>)
    4e1c:	2800      	cmp	r0, #0
    4e1e:	bf0c      	ite	eq
    4e20:	4618      	moveq	r0, r3
    4e22:	2000      	movne	r0, #0
    4e24:	bd10      	pop	{r4, pc}
    4e26:	bf00      	nop
    4e28:	00006208 	.word	0x00006208
    4e2c:	0000624e 	.word	0x0000624e
    4e30:	0000620b 	.word	0x0000620b

00004e34 <__locale_charset>:
    4e34:	4800      	ldr	r0, [pc, #0]	; (4e38 <__locale_charset+0x4>)
    4e36:	4770      	bx	lr
    4e38:	20000480 	.word	0x20000480

00004e3c <__locale_mb_cur_max>:
    4e3c:	4b01      	ldr	r3, [pc, #4]	; (4e44 <__locale_mb_cur_max+0x8>)
    4e3e:	6a18      	ldr	r0, [r3, #32]
    4e40:	4770      	bx	lr
    4e42:	bf00      	nop
    4e44:	20000480 	.word	0x20000480

00004e48 <__locale_msgcharset>:
    4e48:	4800      	ldr	r0, [pc, #0]	; (4e4c <__locale_msgcharset+0x4>)
    4e4a:	4770      	bx	lr
    4e4c:	200004a4 	.word	0x200004a4

00004e50 <__locale_cjk_lang>:
    4e50:	2000      	movs	r0, #0
    4e52:	4770      	bx	lr

00004e54 <_localeconv_r>:
    4e54:	4800      	ldr	r0, [pc, #0]	; (4e58 <_localeconv_r+0x4>)
    4e56:	4770      	bx	lr
    4e58:	200004c4 	.word	0x200004c4

00004e5c <setlocale>:
    4e5c:	460a      	mov	r2, r1
    4e5e:	4903      	ldr	r1, [pc, #12]	; (4e6c <setlocale+0x10>)
    4e60:	4603      	mov	r3, r0
    4e62:	6808      	ldr	r0, [r1, #0]
    4e64:	4619      	mov	r1, r3
    4e66:	f7ff bfc3 	b.w	4df0 <_setlocale_r>
    4e6a:	bf00      	nop
    4e6c:	20000050 	.word	0x20000050

00004e70 <localeconv>:
    4e70:	4800      	ldr	r0, [pc, #0]	; (4e74 <localeconv+0x4>)
    4e72:	4770      	bx	lr
    4e74:	200004c4 	.word	0x200004c4

00004e78 <__smakebuf_r>:
    4e78:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e7a:	898b      	ldrh	r3, [r1, #12]
    4e7c:	460c      	mov	r4, r1
    4e7e:	f003 0102 	and.w	r1, r3, #2
    4e82:	b20a      	sxth	r2, r1
    4e84:	b091      	sub	sp, #68	; 0x44
    4e86:	4606      	mov	r6, r0
    4e88:	2a00      	cmp	r2, #0
    4e8a:	d13f      	bne.n	4f0c <__smakebuf_r+0x94>
    4e8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    4e90:	2900      	cmp	r1, #0
    4e92:	da0d      	bge.n	4eb0 <__smakebuf_r+0x38>
    4e94:	89a7      	ldrh	r7, [r4, #12]
    4e96:	f007 0280 	and.w	r2, r7, #128	; 0x80
    4e9a:	f447 6300 	orr.w	r3, r7, #2048	; 0x800
    4e9e:	b210      	sxth	r0, r2
    4ea0:	2800      	cmp	r0, #0
    4ea2:	bf0c      	ite	eq
    4ea4:	f44f 6580 	moveq.w	r5, #1024	; 0x400
    4ea8:	2540      	movne	r5, #64	; 0x40
    4eaa:	81a3      	strh	r3, [r4, #12]
    4eac:	2700      	movs	r7, #0
    4eae:	e020      	b.n	4ef2 <__smakebuf_r+0x7a>
    4eb0:	aa01      	add	r2, sp, #4
    4eb2:	f000 fd7f 	bl	59b4 <_fstat_r>
    4eb6:	2800      	cmp	r0, #0
    4eb8:	dbec      	blt.n	4e94 <__smakebuf_r+0x1c>
    4eba:	9802      	ldr	r0, [sp, #8]
    4ebc:	f400 4570 	and.w	r5, r0, #61440	; 0xf000
    4ec0:	f5b5 5300 	subs.w	r3, r5, #8192	; 0x2000
    4ec4:	425f      	negs	r7, r3
    4ec6:	415f      	adcs	r7, r3
    4ec8:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    4ecc:	d10b      	bne.n	4ee6 <__smakebuf_r+0x6e>
    4ece:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    4ed0:	4a1d      	ldr	r2, [pc, #116]	; (4f48 <__smakebuf_r+0xd0>)
    4ed2:	4291      	cmp	r1, r2
    4ed4:	d107      	bne.n	4ee6 <__smakebuf_r+0x6e>
    4ed6:	89a3      	ldrh	r3, [r4, #12]
    4ed8:	f44f 6580 	mov.w	r5, #1024	; 0x400
    4edc:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
    4ee0:	81a1      	strh	r1, [r4, #12]
    4ee2:	64e5      	str	r5, [r4, #76]	; 0x4c
    4ee4:	e005      	b.n	4ef2 <__smakebuf_r+0x7a>
    4ee6:	89a0      	ldrh	r0, [r4, #12]
    4ee8:	f440 6500 	orr.w	r5, r0, #2048	; 0x800
    4eec:	81a5      	strh	r5, [r4, #12]
    4eee:	f44f 6580 	mov.w	r5, #1024	; 0x400
    4ef2:	4630      	mov	r0, r6
    4ef4:	4629      	mov	r1, r5
    4ef6:	f000 f83b 	bl	4f70 <_malloc_r>
    4efa:	b970      	cbnz	r0, 4f1a <__smakebuf_r+0xa2>
    4efc:	89a3      	ldrh	r3, [r4, #12]
    4efe:	f403 7200 	and.w	r2, r3, #512	; 0x200
    4f02:	b210      	sxth	r0, r2
    4f04:	b9e8      	cbnz	r0, 4f42 <__smakebuf_r+0xca>
    4f06:	f043 0102 	orr.w	r1, r3, #2
    4f0a:	81a1      	strh	r1, [r4, #12]
    4f0c:	f104 0343 	add.w	r3, r4, #67	; 0x43
    4f10:	2201      	movs	r2, #1
    4f12:	6023      	str	r3, [r4, #0]
    4f14:	6123      	str	r3, [r4, #16]
    4f16:	6162      	str	r2, [r4, #20]
    4f18:	e013      	b.n	4f42 <__smakebuf_r+0xca>
    4f1a:	89a2      	ldrh	r2, [r4, #12]
    4f1c:	490b      	ldr	r1, [pc, #44]	; (4f4c <__smakebuf_r+0xd4>)
    4f1e:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    4f22:	63f1      	str	r1, [r6, #60]	; 0x3c
    4f24:	81a3      	strh	r3, [r4, #12]
    4f26:	6020      	str	r0, [r4, #0]
    4f28:	6120      	str	r0, [r4, #16]
    4f2a:	6165      	str	r5, [r4, #20]
    4f2c:	b14f      	cbz	r7, 4f42 <__smakebuf_r+0xca>
    4f2e:	4630      	mov	r0, r6
    4f30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    4f34:	f000 fd50 	bl	59d8 <_isatty_r>
    4f38:	b118      	cbz	r0, 4f42 <__smakebuf_r+0xca>
    4f3a:	89a0      	ldrh	r0, [r4, #12]
    4f3c:	f040 0101 	orr.w	r1, r0, #1
    4f40:	81a1      	strh	r1, [r4, #12]
    4f42:	b011      	add	sp, #68	; 0x44
    4f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f46:	bf00      	nop
    4f48:	0000573b 	.word	0x0000573b
    4f4c:	00004641 	.word	0x00004641

00004f50 <malloc>:
    4f50:	4b02      	ldr	r3, [pc, #8]	; (4f5c <malloc+0xc>)
    4f52:	4601      	mov	r1, r0
    4f54:	6818      	ldr	r0, [r3, #0]
    4f56:	f000 b80b 	b.w	4f70 <_malloc_r>
    4f5a:	bf00      	nop
    4f5c:	20000050 	.word	0x20000050

00004f60 <free>:
    4f60:	4b02      	ldr	r3, [pc, #8]	; (4f6c <free+0xc>)
    4f62:	4601      	mov	r1, r0
    4f64:	6818      	ldr	r0, [r3, #0]
    4f66:	f7ff bcef 	b.w	4948 <_free_r>
    4f6a:	bf00      	nop
    4f6c:	20000050 	.word	0x20000050

00004f70 <_malloc_r>:
    4f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4f74:	f101 040b 	add.w	r4, r1, #11
    4f78:	2c16      	cmp	r4, #22
    4f7a:	4606      	mov	r6, r0
    4f7c:	d903      	bls.n	4f86 <_malloc_r+0x16>
    4f7e:	f034 0407 	bics.w	r4, r4, #7
    4f82:	d501      	bpl.n	4f88 <_malloc_r+0x18>
    4f84:	e002      	b.n	4f8c <_malloc_r+0x1c>
    4f86:	2410      	movs	r4, #16
    4f88:	428c      	cmp	r4, r1
    4f8a:	d202      	bcs.n	4f92 <_malloc_r+0x22>
    4f8c:	250c      	movs	r5, #12
    4f8e:	6035      	str	r5, [r6, #0]
    4f90:	e1d9      	b.n	5346 <_malloc_r+0x3d6>
    4f92:	4630      	mov	r0, r6
    4f94:	f000 fa1f 	bl	53d6 <__malloc_lock>
    4f98:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
    4f9c:	d214      	bcs.n	4fc8 <_malloc_r+0x58>
    4f9e:	4da0      	ldr	r5, [pc, #640]	; (5220 <_malloc_r+0x2b0>)
    4fa0:	08e1      	lsrs	r1, r4, #3
    4fa2:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
    4fa6:	68c5      	ldr	r5, [r0, #12]
    4fa8:	4285      	cmp	r5, r0
    4faa:	d105      	bne.n	4fb8 <_malloc_r+0x48>
    4fac:	f105 0308 	add.w	r3, r5, #8
    4fb0:	696d      	ldr	r5, [r5, #20]
    4fb2:	1c8a      	adds	r2, r1, #2
    4fb4:	429d      	cmp	r5, r3
    4fb6:	d044      	beq.n	5042 <_malloc_r+0xd2>
    4fb8:	68e8      	ldr	r0, [r5, #12]
    4fba:	68a9      	ldr	r1, [r5, #8]
    4fbc:	686a      	ldr	r2, [r5, #4]
    4fbe:	60c8      	str	r0, [r1, #12]
    4fc0:	f022 0303 	bic.w	r3, r2, #3
    4fc4:	6081      	str	r1, [r0, #8]
    4fc6:	e059      	b.n	507c <_malloc_r+0x10c>
    4fc8:	0a62      	lsrs	r2, r4, #9
    4fca:	d101      	bne.n	4fd0 <_malloc_r+0x60>
    4fcc:	08e2      	lsrs	r2, r4, #3
    4fce:	e01b      	b.n	5008 <_malloc_r+0x98>
    4fd0:	2a04      	cmp	r2, #4
    4fd2:	d802      	bhi.n	4fda <_malloc_r+0x6a>
    4fd4:	09a2      	lsrs	r2, r4, #6
    4fd6:	3238      	adds	r2, #56	; 0x38
    4fd8:	e016      	b.n	5008 <_malloc_r+0x98>
    4fda:	2a14      	cmp	r2, #20
    4fdc:	d801      	bhi.n	4fe2 <_malloc_r+0x72>
    4fde:	325b      	adds	r2, #91	; 0x5b
    4fe0:	e012      	b.n	5008 <_malloc_r+0x98>
    4fe2:	2a54      	cmp	r2, #84	; 0x54
    4fe4:	d802      	bhi.n	4fec <_malloc_r+0x7c>
    4fe6:	0b22      	lsrs	r2, r4, #12
    4fe8:	326e      	adds	r2, #110	; 0x6e
    4fea:	e00d      	b.n	5008 <_malloc_r+0x98>
    4fec:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    4ff0:	d802      	bhi.n	4ff8 <_malloc_r+0x88>
    4ff2:	0be2      	lsrs	r2, r4, #15
    4ff4:	3277      	adds	r2, #119	; 0x77
    4ff6:	e007      	b.n	5008 <_malloc_r+0x98>
    4ff8:	f240 5354 	movw	r3, #1364	; 0x554
    4ffc:	429a      	cmp	r2, r3
    4ffe:	d802      	bhi.n	5006 <_malloc_r+0x96>
    5000:	0ca2      	lsrs	r2, r4, #18
    5002:	327c      	adds	r2, #124	; 0x7c
    5004:	e000      	b.n	5008 <_malloc_r+0x98>
    5006:	227e      	movs	r2, #126	; 0x7e
    5008:	4885      	ldr	r0, [pc, #532]	; (5220 <_malloc_r+0x2b0>)
    500a:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
    500e:	68dd      	ldr	r5, [r3, #12]
    5010:	429d      	cmp	r5, r3
    5012:	d015      	beq.n	5040 <_malloc_r+0xd0>
    5014:	6869      	ldr	r1, [r5, #4]
    5016:	f021 0103 	bic.w	r1, r1, #3
    501a:	1b08      	subs	r0, r1, r4
    501c:	280f      	cmp	r0, #15
    501e:	dd01      	ble.n	5024 <_malloc_r+0xb4>
    5020:	3a01      	subs	r2, #1
    5022:	e00d      	b.n	5040 <_malloc_r+0xd0>
    5024:	2800      	cmp	r0, #0
    5026:	db09      	blt.n	503c <_malloc_r+0xcc>
    5028:	68eb      	ldr	r3, [r5, #12]
    502a:	68aa      	ldr	r2, [r5, #8]
    502c:	60d3      	str	r3, [r2, #12]
    502e:	609a      	str	r2, [r3, #8]
    5030:	186b      	adds	r3, r5, r1
    5032:	685a      	ldr	r2, [r3, #4]
    5034:	f042 0001 	orr.w	r0, r2, #1
    5038:	6058      	str	r0, [r3, #4]
    503a:	e190      	b.n	535e <_malloc_r+0x3ee>
    503c:	68ed      	ldr	r5, [r5, #12]
    503e:	e7e7      	b.n	5010 <_malloc_r+0xa0>
    5040:	3201      	adds	r2, #1
    5042:	4977      	ldr	r1, [pc, #476]	; (5220 <_malloc_r+0x2b0>)
    5044:	690d      	ldr	r5, [r1, #16]
    5046:	f101 0708 	add.w	r7, r1, #8
    504a:	42bd      	cmp	r5, r7
    504c:	d068      	beq.n	5120 <_malloc_r+0x1b0>
    504e:	6868      	ldr	r0, [r5, #4]
    5050:	f020 0303 	bic.w	r3, r0, #3
    5054:	1b18      	subs	r0, r3, r4
    5056:	280f      	cmp	r0, #15
    5058:	dd0c      	ble.n	5074 <_malloc_r+0x104>
    505a:	192b      	adds	r3, r5, r4
    505c:	614b      	str	r3, [r1, #20]
    505e:	610b      	str	r3, [r1, #16]
    5060:	f044 0401 	orr.w	r4, r4, #1
    5064:	f040 0101 	orr.w	r1, r0, #1
    5068:	606c      	str	r4, [r5, #4]
    506a:	60df      	str	r7, [r3, #12]
    506c:	609f      	str	r7, [r3, #8]
    506e:	6059      	str	r1, [r3, #4]
    5070:	5018      	str	r0, [r3, r0]
    5072:	e174      	b.n	535e <_malloc_r+0x3ee>
    5074:	2800      	cmp	r0, #0
    5076:	614f      	str	r7, [r1, #20]
    5078:	610f      	str	r7, [r1, #16]
    507a:	db01      	blt.n	5080 <_malloc_r+0x110>
    507c:	18eb      	adds	r3, r5, r3
    507e:	e7d8      	b.n	5032 <_malloc_r+0xc2>
    5080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    5084:	d20f      	bcs.n	50a6 <_malloc_r+0x136>
    5086:	08db      	lsrs	r3, r3, #3
    5088:	1098      	asrs	r0, r3, #2
    508a:	2701      	movs	r7, #1
    508c:	fa07 f700 	lsl.w	r7, r7, r0
    5090:	6848      	ldr	r0, [r1, #4]
    5092:	4307      	orrs	r7, r0
    5094:	604f      	str	r7, [r1, #4]
    5096:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    509a:	60e9      	str	r1, [r5, #12]
    509c:	688b      	ldr	r3, [r1, #8]
    509e:	60ab      	str	r3, [r5, #8]
    50a0:	60dd      	str	r5, [r3, #12]
    50a2:	608d      	str	r5, [r1, #8]
    50a4:	e03c      	b.n	5120 <_malloc_r+0x1b0>
    50a6:	0a58      	lsrs	r0, r3, #9
    50a8:	2804      	cmp	r0, #4
    50aa:	d802      	bhi.n	50b2 <_malloc_r+0x142>
    50ac:	0998      	lsrs	r0, r3, #6
    50ae:	3038      	adds	r0, #56	; 0x38
    50b0:	e016      	b.n	50e0 <_malloc_r+0x170>
    50b2:	2814      	cmp	r0, #20
    50b4:	d801      	bhi.n	50ba <_malloc_r+0x14a>
    50b6:	305b      	adds	r0, #91	; 0x5b
    50b8:	e012      	b.n	50e0 <_malloc_r+0x170>
    50ba:	2854      	cmp	r0, #84	; 0x54
    50bc:	d802      	bhi.n	50c4 <_malloc_r+0x154>
    50be:	0b18      	lsrs	r0, r3, #12
    50c0:	306e      	adds	r0, #110	; 0x6e
    50c2:	e00d      	b.n	50e0 <_malloc_r+0x170>
    50c4:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
    50c8:	d802      	bhi.n	50d0 <_malloc_r+0x160>
    50ca:	0bd8      	lsrs	r0, r3, #15
    50cc:	3077      	adds	r0, #119	; 0x77
    50ce:	e007      	b.n	50e0 <_malloc_r+0x170>
    50d0:	f240 5754 	movw	r7, #1364	; 0x554
    50d4:	42b8      	cmp	r0, r7
    50d6:	d802      	bhi.n	50de <_malloc_r+0x16e>
    50d8:	0c98      	lsrs	r0, r3, #18
    50da:	307c      	adds	r0, #124	; 0x7c
    50dc:	e000      	b.n	50e0 <_malloc_r+0x170>
    50de:	207e      	movs	r0, #126	; 0x7e
    50e0:	f8df e13c 	ldr.w	lr, [pc, #316]	; 5220 <_malloc_r+0x2b0>
    50e4:	eb0e 07c0 	add.w	r7, lr, r0, lsl #3
    50e8:	68b9      	ldr	r1, [r7, #8]
    50ea:	42b9      	cmp	r1, r7
    50ec:	d10e      	bne.n	510c <_malloc_r+0x19c>
    50ee:	1087      	asrs	r7, r0, #2
    50f0:	2301      	movs	r3, #1
    50f2:	fa03 f007 	lsl.w	r0, r3, r7
    50f6:	f8de 7004 	ldr.w	r7, [lr, #4]
    50fa:	ea40 0307 	orr.w	r3, r0, r7
    50fe:	f8ce 3004 	str.w	r3, [lr, #4]
    5102:	4608      	mov	r0, r1
    5104:	e008      	b.n	5118 <_malloc_r+0x1a8>
    5106:	6889      	ldr	r1, [r1, #8]
    5108:	42b9      	cmp	r1, r7
    510a:	d004      	beq.n	5116 <_malloc_r+0x1a6>
    510c:	6848      	ldr	r0, [r1, #4]
    510e:	f020 0003 	bic.w	r0, r0, #3
    5112:	4283      	cmp	r3, r0
    5114:	d3f7      	bcc.n	5106 <_malloc_r+0x196>
    5116:	68c8      	ldr	r0, [r1, #12]
    5118:	60e8      	str	r0, [r5, #12]
    511a:	60a9      	str	r1, [r5, #8]
    511c:	60cd      	str	r5, [r1, #12]
    511e:	6085      	str	r5, [r0, #8]
    5120:	4f3f      	ldr	r7, [pc, #252]	; (5220 <_malloc_r+0x2b0>)
    5122:	1095      	asrs	r5, r2, #2
    5124:	2001      	movs	r0, #1
    5126:	6879      	ldr	r1, [r7, #4]
    5128:	fa00 f305 	lsl.w	r3, r0, r5
    512c:	428b      	cmp	r3, r1
    512e:	d85d      	bhi.n	51ec <_malloc_r+0x27c>
    5130:	420b      	tst	r3, r1
    5132:	d105      	bne.n	5140 <_malloc_r+0x1d0>
    5134:	f022 0203 	bic.w	r2, r2, #3
    5138:	005b      	lsls	r3, r3, #1
    513a:	3204      	adds	r2, #4
    513c:	420b      	tst	r3, r1
    513e:	d0fb      	beq.n	5138 <_malloc_r+0x1c8>
    5140:	4d37      	ldr	r5, [pc, #220]	; (5220 <_malloc_r+0x2b0>)
    5142:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
    5146:	4677      	mov	r7, lr
    5148:	4610      	mov	r0, r2
    514a:	68fd      	ldr	r5, [r7, #12]
    514c:	42bd      	cmp	r5, r7
    514e:	d02d      	beq.n	51ac <_malloc_r+0x23c>
    5150:	6869      	ldr	r1, [r5, #4]
    5152:	f021 0c03 	bic.w	ip, r1, #3
    5156:	ebc4 010c 	rsb	r1, r4, ip
    515a:	290f      	cmp	r1, #15
    515c:	dd13      	ble.n	5186 <_malloc_r+0x216>
    515e:	192b      	adds	r3, r5, r4
    5160:	f044 0401 	orr.w	r4, r4, #1
    5164:	68ea      	ldr	r2, [r5, #12]
    5166:	606c      	str	r4, [r5, #4]
    5168:	f855 0f08 	ldr.w	r0, [r5, #8]!
    516c:	5059      	str	r1, [r3, r1]
    516e:	60c2      	str	r2, [r0, #12]
    5170:	6090      	str	r0, [r2, #8]
    5172:	4a2b      	ldr	r2, [pc, #172]	; (5220 <_malloc_r+0x2b0>)
    5174:	f041 0001 	orr.w	r0, r1, #1
    5178:	6153      	str	r3, [r2, #20]
    517a:	6113      	str	r3, [r2, #16]
    517c:	3208      	adds	r2, #8
    517e:	60da      	str	r2, [r3, #12]
    5180:	609a      	str	r2, [r3, #8]
    5182:	6058      	str	r0, [r3, #4]
    5184:	e00c      	b.n	51a0 <_malloc_r+0x230>
    5186:	2900      	cmp	r1, #0
    5188:	db0e      	blt.n	51a8 <_malloc_r+0x238>
    518a:	eb05 000c 	add.w	r0, r5, ip
    518e:	68e9      	ldr	r1, [r5, #12]
    5190:	6842      	ldr	r2, [r0, #4]
    5192:	f042 0301 	orr.w	r3, r2, #1
    5196:	6043      	str	r3, [r0, #4]
    5198:	f855 0f08 	ldr.w	r0, [r5, #8]!
    519c:	60c1      	str	r1, [r0, #12]
    519e:	6088      	str	r0, [r1, #8]
    51a0:	4630      	mov	r0, r6
    51a2:	f000 f919 	bl	53d8 <__malloc_unlock>
    51a6:	e0de      	b.n	5366 <_malloc_r+0x3f6>
    51a8:	68ed      	ldr	r5, [r5, #12]
    51aa:	e7cf      	b.n	514c <_malloc_r+0x1dc>
    51ac:	3001      	adds	r0, #1
    51ae:	0781      	lsls	r1, r0, #30
    51b0:	f105 0708 	add.w	r7, r5, #8
    51b4:	d1c9      	bne.n	514a <_malloc_r+0x1da>
    51b6:	4671      	mov	r1, lr
    51b8:	0795      	lsls	r5, r2, #30
    51ba:	d105      	bne.n	51c8 <_malloc_r+0x258>
    51bc:	4a18      	ldr	r2, [pc, #96]	; (5220 <_malloc_r+0x2b0>)
    51be:	6855      	ldr	r5, [r2, #4]
    51c0:	ea25 0503 	bic.w	r5, r5, r3
    51c4:	6055      	str	r5, [r2, #4]
    51c6:	e005      	b.n	51d4 <_malloc_r+0x264>
    51c8:	f1a1 0708 	sub.w	r7, r1, #8
    51cc:	6809      	ldr	r1, [r1, #0]
    51ce:	3a01      	subs	r2, #1
    51d0:	42b9      	cmp	r1, r7
    51d2:	d0f1      	beq.n	51b8 <_malloc_r+0x248>
    51d4:	4f12      	ldr	r7, [pc, #72]	; (5220 <_malloc_r+0x2b0>)
    51d6:	687f      	ldr	r7, [r7, #4]
    51d8:	005b      	lsls	r3, r3, #1
    51da:	42bb      	cmp	r3, r7
    51dc:	d806      	bhi.n	51ec <_malloc_r+0x27c>
    51de:	b12b      	cbz	r3, 51ec <_malloc_r+0x27c>
    51e0:	4602      	mov	r2, r0
    51e2:	423b      	tst	r3, r7
    51e4:	d1ac      	bne.n	5140 <_malloc_r+0x1d0>
    51e6:	3204      	adds	r2, #4
    51e8:	005b      	lsls	r3, r3, #1
    51ea:	e7fa      	b.n	51e2 <_malloc_r+0x272>
    51ec:	4b0c      	ldr	r3, [pc, #48]	; (5220 <_malloc_r+0x2b0>)
    51ee:	689f      	ldr	r7, [r3, #8]
    51f0:	6878      	ldr	r0, [r7, #4]
    51f2:	f020 0903 	bic.w	r9, r0, #3
    51f6:	45a1      	cmp	r9, r4
    51f8:	4619      	mov	r1, r3
    51fa:	d304      	bcc.n	5206 <_malloc_r+0x296>
    51fc:	ebc4 0009 	rsb	r0, r4, r9
    5200:	280f      	cmp	r0, #15
    5202:	f300 80a2 	bgt.w	534a <_malloc_r+0x3da>
    5206:	4a07      	ldr	r2, [pc, #28]	; (5224 <_malloc_r+0x2b4>)
    5208:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
    520c:	6815      	ldr	r5, [r2, #0]
    520e:	3301      	adds	r3, #1
    5210:	eb07 0a09 	add.w	sl, r7, r9
    5214:	eb04 0805 	add.w	r8, r4, r5
    5218:	d106      	bne.n	5228 <_malloc_r+0x2b8>
    521a:	f108 0810 	add.w	r8, r8, #16
    521e:	e00b      	b.n	5238 <_malloc_r+0x2c8>
    5220:	200004fc 	.word	0x200004fc
    5224:	200009dc 	.word	0x200009dc
    5228:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
    522c:	f100 010f 	add.w	r1, r0, #15
    5230:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
    5234:	f022 080f 	bic.w	r8, r2, #15
    5238:	4630      	mov	r0, r6
    523a:	4641      	mov	r1, r8
    523c:	f000 fa3c 	bl	56b8 <_sbrk_r>
    5240:	1c42      	adds	r2, r0, #1
    5242:	4605      	mov	r5, r0
    5244:	d071      	beq.n	532a <_malloc_r+0x3ba>
    5246:	4550      	cmp	r0, sl
    5248:	d202      	bcs.n	5250 <_malloc_r+0x2e0>
    524a:	4b48      	ldr	r3, [pc, #288]	; (536c <_malloc_r+0x3fc>)
    524c:	429f      	cmp	r7, r3
    524e:	d16c      	bne.n	532a <_malloc_r+0x3ba>
    5250:	4847      	ldr	r0, [pc, #284]	; (5370 <_malloc_r+0x400>)
    5252:	4a46      	ldr	r2, [pc, #280]	; (536c <_malloc_r+0x3fc>)
    5254:	6841      	ldr	r1, [r0, #4]
    5256:	4555      	cmp	r5, sl
    5258:	eb08 0301 	add.w	r3, r8, r1
    525c:	6043      	str	r3, [r0, #4]
    525e:	d107      	bne.n	5270 <_malloc_r+0x300>
    5260:	0529      	lsls	r1, r5, #20
    5262:	d105      	bne.n	5270 <_malloc_r+0x300>
    5264:	6895      	ldr	r5, [r2, #8]
    5266:	44c8      	add	r8, r9
    5268:	f048 0001 	orr.w	r0, r8, #1
    526c:	6068      	str	r0, [r5, #4]
    526e:	e051      	b.n	5314 <_malloc_r+0x3a4>
    5270:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
    5274:	1c42      	adds	r2, r0, #1
    5276:	d103      	bne.n	5280 <_malloc_r+0x310>
    5278:	4a3c      	ldr	r2, [pc, #240]	; (536c <_malloc_r+0x3fc>)
    527a:	f8c2 5408 	str.w	r5, [r2, #1032]	; 0x408
    527e:	e005      	b.n	528c <_malloc_r+0x31c>
    5280:	ebca 0a05 	rsb	sl, sl, r5
    5284:	eb03 010a 	add.w	r1, r3, sl
    5288:	4b39      	ldr	r3, [pc, #228]	; (5370 <_malloc_r+0x400>)
    528a:	6059      	str	r1, [r3, #4]
    528c:	f015 0007 	ands.w	r0, r5, #7
    5290:	bf1c      	itt	ne
    5292:	f1c0 0008 	rsbne	r0, r0, #8
    5296:	182d      	addne	r5, r5, r0
    5298:	eb05 0c08 	add.w	ip, r5, r8
    529c:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
    52a0:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
    52a4:	eba1 581e 	sub.w	r8, r1, lr, lsr #20
    52a8:	4641      	mov	r1, r8
    52aa:	4630      	mov	r0, r6
    52ac:	f000 fa04 	bl	56b8 <_sbrk_r>
    52b0:	4a2f      	ldr	r2, [pc, #188]	; (5370 <_malloc_r+0x400>)
    52b2:	1c43      	adds	r3, r0, #1
    52b4:	6853      	ldr	r3, [r2, #4]
    52b6:	bf08      	it	eq
    52b8:	f04f 0800 	moveq.w	r8, #0
    52bc:	eb08 0103 	add.w	r1, r8, r3
    52c0:	bf08      	it	eq
    52c2:	4628      	moveq	r0, r5
    52c4:	6051      	str	r1, [r2, #4]
    52c6:	1b40      	subs	r0, r0, r5
    52c8:	4a28      	ldr	r2, [pc, #160]	; (536c <_malloc_r+0x3fc>)
    52ca:	eb00 0308 	add.w	r3, r0, r8
    52ce:	f043 0101 	orr.w	r1, r3, #1
    52d2:	4297      	cmp	r7, r2
    52d4:	6095      	str	r5, [r2, #8]
    52d6:	6069      	str	r1, [r5, #4]
    52d8:	d01c      	beq.n	5314 <_malloc_r+0x3a4>
    52da:	f1b9 0f0f 	cmp.w	r9, #15
    52de:	d802      	bhi.n	52e6 <_malloc_r+0x376>
    52e0:	2201      	movs	r2, #1
    52e2:	606a      	str	r2, [r5, #4]
    52e4:	e021      	b.n	532a <_malloc_r+0x3ba>
    52e6:	687d      	ldr	r5, [r7, #4]
    52e8:	f1a9 090c 	sub.w	r9, r9, #12
    52ec:	f029 0907 	bic.w	r9, r9, #7
    52f0:	eb07 0309 	add.w	r3, r7, r9
    52f4:	f005 0201 	and.w	r2, r5, #1
    52f8:	2105      	movs	r1, #5
    52fa:	ea49 0002 	orr.w	r0, r9, r2
    52fe:	f1b9 0f0f 	cmp.w	r9, #15
    5302:	6078      	str	r0, [r7, #4]
    5304:	6059      	str	r1, [r3, #4]
    5306:	6099      	str	r1, [r3, #8]
    5308:	d904      	bls.n	5314 <_malloc_r+0x3a4>
    530a:	4630      	mov	r0, r6
    530c:	f107 0108 	add.w	r1, r7, #8
    5310:	f7ff fb1a 	bl	4948 <_free_r>
    5314:	4a16      	ldr	r2, [pc, #88]	; (5370 <_malloc_r+0x400>)
    5316:	6853      	ldr	r3, [r2, #4]
    5318:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    531a:	6b15      	ldr	r5, [r2, #48]	; 0x30
    531c:	428b      	cmp	r3, r1
    531e:	bf88      	it	hi
    5320:	62d3      	strhi	r3, [r2, #44]	; 0x2c
    5322:	42ab      	cmp	r3, r5
    5324:	bf84      	itt	hi
    5326:	4d12      	ldrhi	r5, [pc, #72]	; (5370 <_malloc_r+0x400>)
    5328:	632b      	strhi	r3, [r5, #48]	; 0x30
    532a:	4810      	ldr	r0, [pc, #64]	; (536c <_malloc_r+0x3fc>)
    532c:	6882      	ldr	r2, [r0, #8]
    532e:	6853      	ldr	r3, [r2, #4]
    5330:	f023 0103 	bic.w	r1, r3, #3
    5334:	42a1      	cmp	r1, r4
    5336:	ebc4 0001 	rsb	r0, r4, r1
    533a:	d301      	bcc.n	5340 <_malloc_r+0x3d0>
    533c:	280f      	cmp	r0, #15
    533e:	dc04      	bgt.n	534a <_malloc_r+0x3da>
    5340:	4630      	mov	r0, r6
    5342:	f000 f849 	bl	53d8 <__malloc_unlock>
    5346:	2500      	movs	r5, #0
    5348:	e00d      	b.n	5366 <_malloc_r+0x3f6>
    534a:	4a08      	ldr	r2, [pc, #32]	; (536c <_malloc_r+0x3fc>)
    534c:	6895      	ldr	r5, [r2, #8]
    534e:	f044 0301 	orr.w	r3, r4, #1
    5352:	192c      	adds	r4, r5, r4
    5354:	f040 0101 	orr.w	r1, r0, #1
    5358:	606b      	str	r3, [r5, #4]
    535a:	6094      	str	r4, [r2, #8]
    535c:	6061      	str	r1, [r4, #4]
    535e:	4630      	mov	r0, r6
    5360:	f000 f83a 	bl	53d8 <__malloc_unlock>
    5364:	3508      	adds	r5, #8
    5366:	4628      	mov	r0, r5
    5368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    536c:	200004fc 	.word	0x200004fc
    5370:	200009dc 	.word	0x200009dc

00005374 <memchr>:
    5374:	b510      	push	{r4, lr}
    5376:	b2c9      	uxtb	r1, r1
    5378:	4603      	mov	r3, r0
    537a:	1882      	adds	r2, r0, r2
    537c:	4293      	cmp	r3, r2
    537e:	4618      	mov	r0, r3
    5380:	d004      	beq.n	538c <memchr+0x18>
    5382:	7804      	ldrb	r4, [r0, #0]
    5384:	3301      	adds	r3, #1
    5386:	428c      	cmp	r4, r1
    5388:	d1f8      	bne.n	537c <memchr+0x8>
    538a:	e000      	b.n	538e <memchr+0x1a>
    538c:	2000      	movs	r0, #0
    538e:	bd10      	pop	{r4, pc}

00005390 <memcpy>:
    5390:	b510      	push	{r4, lr}
    5392:	2300      	movs	r3, #0
    5394:	4293      	cmp	r3, r2
    5396:	d003      	beq.n	53a0 <memcpy+0x10>
    5398:	5ccc      	ldrb	r4, [r1, r3]
    539a:	54c4      	strb	r4, [r0, r3]
    539c:	3301      	adds	r3, #1
    539e:	e7f9      	b.n	5394 <memcpy+0x4>
    53a0:	bd10      	pop	{r4, pc}

000053a2 <memmove>:
    53a2:	4281      	cmp	r1, r0
    53a4:	b570      	push	{r4, r5, r6, lr}
    53a6:	d20e      	bcs.n	53c6 <memmove+0x24>
    53a8:	188c      	adds	r4, r1, r2
    53aa:	42a0      	cmp	r0, r4
    53ac:	d20b      	bcs.n	53c6 <memmove+0x24>
    53ae:	1885      	adds	r5, r0, r2
    53b0:	4613      	mov	r3, r2
    53b2:	f113 33ff 	adds.w	r3, r3, #4294967295
    53b6:	d305      	bcc.n	53c4 <memmove+0x22>
    53b8:	4251      	negs	r1, r2
    53ba:	1866      	adds	r6, r4, r1
    53bc:	1869      	adds	r1, r5, r1
    53be:	5cf6      	ldrb	r6, [r6, r3]
    53c0:	54ce      	strb	r6, [r1, r3]
    53c2:	e7f6      	b.n	53b2 <memmove+0x10>
    53c4:	bd70      	pop	{r4, r5, r6, pc}
    53c6:	2300      	movs	r3, #0
    53c8:	4293      	cmp	r3, r2
    53ca:	d003      	beq.n	53d4 <memmove+0x32>
    53cc:	5ccc      	ldrb	r4, [r1, r3]
    53ce:	54c4      	strb	r4, [r0, r3]
    53d0:	3301      	adds	r3, #1
    53d2:	e7f9      	b.n	53c8 <memmove+0x26>
    53d4:	bd70      	pop	{r4, r5, r6, pc}

000053d6 <__malloc_lock>:
    53d6:	4770      	bx	lr

000053d8 <__malloc_unlock>:
    53d8:	4770      	bx	lr
	...

000053dc <_realloc_r>:
    53dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    53e0:	4681      	mov	r9, r0
    53e2:	4616      	mov	r6, r2
    53e4:	460c      	mov	r4, r1
    53e6:	b921      	cbnz	r1, 53f2 <_realloc_r+0x16>
    53e8:	4611      	mov	r1, r2
    53ea:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    53ee:	f7ff bdbf 	b.w	4f70 <_malloc_r>
    53f2:	f7ff fff0 	bl	53d6 <__malloc_lock>
    53f6:	f106 070b 	add.w	r7, r6, #11
    53fa:	f854 5c04 	ldr.w	r5, [r4, #-4]
    53fe:	2f16      	cmp	r7, #22
    5400:	f1a4 0b08 	sub.w	fp, r4, #8
    5404:	f025 0803 	bic.w	r8, r5, #3
    5408:	d903      	bls.n	5412 <_realloc_r+0x36>
    540a:	f037 0707 	bics.w	r7, r7, #7
    540e:	d501      	bpl.n	5414 <_realloc_r+0x38>
    5410:	e002      	b.n	5418 <_realloc_r+0x3c>
    5412:	2710      	movs	r7, #16
    5414:	42b7      	cmp	r7, r6
    5416:	d204      	bcs.n	5422 <_realloc_r+0x46>
    5418:	200c      	movs	r0, #12
    541a:	f8c9 0000 	str.w	r0, [r9]
    541e:	2600      	movs	r6, #0
    5420:	e145      	b.n	56ae <_realloc_r+0x2d2>
    5422:	45b8      	cmp	r8, r7
    5424:	f280 811a 	bge.w	565c <_realloc_r+0x280>
    5428:	4aa2      	ldr	r2, [pc, #648]	; (56b4 <_realloc_r+0x2d8>)
    542a:	6891      	ldr	r1, [r2, #8]
    542c:	eb0b 0308 	add.w	r3, fp, r8
    5430:	428b      	cmp	r3, r1
    5432:	d006      	beq.n	5442 <_realloc_r+0x66>
    5434:	6858      	ldr	r0, [r3, #4]
    5436:	f020 0201 	bic.w	r2, r0, #1
    543a:	1898      	adds	r0, r3, r2
    543c:	6842      	ldr	r2, [r0, #4]
    543e:	07d0      	lsls	r0, r2, #31
    5440:	d426      	bmi.n	5490 <_realloc_r+0xb4>
    5442:	685a      	ldr	r2, [r3, #4]
    5444:	428b      	cmp	r3, r1
    5446:	f022 0003 	bic.w	r0, r2, #3
    544a:	eb00 0a08 	add.w	sl, r0, r8
    544e:	d118      	bne.n	5482 <_realloc_r+0xa6>
    5450:	f107 0210 	add.w	r2, r7, #16
    5454:	4592      	cmp	sl, r2
    5456:	db1d      	blt.n	5494 <_realloc_r+0xb8>
    5458:	eb0b 0507 	add.w	r5, fp, r7
    545c:	ebc7 0a0a 	rsb	sl, r7, sl
    5460:	f04a 0101 	orr.w	r1, sl, #1
    5464:	6069      	str	r1, [r5, #4]
    5466:	f854 2c04 	ldr.w	r2, [r4, #-4]
    546a:	4e92      	ldr	r6, [pc, #584]	; (56b4 <_realloc_r+0x2d8>)
    546c:	f002 0301 	and.w	r3, r2, #1
    5470:	431f      	orrs	r7, r3
    5472:	60b5      	str	r5, [r6, #8]
    5474:	f844 7c04 	str.w	r7, [r4, #-4]
    5478:	4648      	mov	r0, r9
    547a:	f7ff ffad 	bl	53d8 <__malloc_unlock>
    547e:	4626      	mov	r6, r4
    5480:	e115      	b.n	56ae <_realloc_r+0x2d2>
    5482:	45ba      	cmp	sl, r7
    5484:	db06      	blt.n	5494 <_realloc_r+0xb8>
    5486:	68dd      	ldr	r5, [r3, #12]
    5488:	689e      	ldr	r6, [r3, #8]
    548a:	60f5      	str	r5, [r6, #12]
    548c:	60ae      	str	r6, [r5, #8]
    548e:	e0e6      	b.n	565e <_realloc_r+0x282>
    5490:	2000      	movs	r0, #0
    5492:	4603      	mov	r3, r0
    5494:	07ea      	lsls	r2, r5, #31
    5496:	f100 8091 	bmi.w	55bc <_realloc_r+0x1e0>
    549a:	f854 5c08 	ldr.w	r5, [r4, #-8]
    549e:	ebc5 050b 	rsb	r5, r5, fp
    54a2:	686a      	ldr	r2, [r5, #4]
    54a4:	f022 0203 	bic.w	r2, r2, #3
    54a8:	2b00      	cmp	r3, #0
    54aa:	d051      	beq.n	5550 <_realloc_r+0x174>
    54ac:	eb02 0a08 	add.w	sl, r2, r8
    54b0:	428b      	cmp	r3, r1
    54b2:	4482      	add	sl, r0
    54b4:	d145      	bne.n	5542 <_realloc_r+0x166>
    54b6:	f107 0310 	add.w	r3, r7, #16
    54ba:	459a      	cmp	sl, r3
    54bc:	db48      	blt.n	5550 <_realloc_r+0x174>
    54be:	462e      	mov	r6, r5
    54c0:	68e9      	ldr	r1, [r5, #12]
    54c2:	f856 3f08 	ldr.w	r3, [r6, #8]!
    54c6:	f1a8 0204 	sub.w	r2, r8, #4
    54ca:	2a24      	cmp	r2, #36	; 0x24
    54cc:	60d9      	str	r1, [r3, #12]
    54ce:	608b      	str	r3, [r1, #8]
    54d0:	d825      	bhi.n	551e <_realloc_r+0x142>
    54d2:	2a13      	cmp	r2, #19
    54d4:	d91b      	bls.n	550e <_realloc_r+0x132>
    54d6:	6821      	ldr	r1, [r4, #0]
    54d8:	60a9      	str	r1, [r5, #8]
    54da:	6863      	ldr	r3, [r4, #4]
    54dc:	2a1b      	cmp	r2, #27
    54de:	60eb      	str	r3, [r5, #12]
    54e0:	d803      	bhi.n	54ea <_realloc_r+0x10e>
    54e2:	f105 0010 	add.w	r0, r5, #16
    54e6:	3408      	adds	r4, #8
    54e8:	e012      	b.n	5510 <_realloc_r+0x134>
    54ea:	68a0      	ldr	r0, [r4, #8]
    54ec:	6128      	str	r0, [r5, #16]
    54ee:	68e1      	ldr	r1, [r4, #12]
    54f0:	2a24      	cmp	r2, #36	; 0x24
    54f2:	6169      	str	r1, [r5, #20]
    54f4:	d003      	beq.n	54fe <_realloc_r+0x122>
    54f6:	f105 0018 	add.w	r0, r5, #24
    54fa:	3410      	adds	r4, #16
    54fc:	e008      	b.n	5510 <_realloc_r+0x134>
    54fe:	6922      	ldr	r2, [r4, #16]
    5500:	61aa      	str	r2, [r5, #24]
    5502:	6963      	ldr	r3, [r4, #20]
    5504:	f105 0020 	add.w	r0, r5, #32
    5508:	61eb      	str	r3, [r5, #28]
    550a:	3418      	adds	r4, #24
    550c:	e000      	b.n	5510 <_realloc_r+0x134>
    550e:	4630      	mov	r0, r6
    5510:	6821      	ldr	r1, [r4, #0]
    5512:	6001      	str	r1, [r0, #0]
    5514:	6862      	ldr	r2, [r4, #4]
    5516:	6042      	str	r2, [r0, #4]
    5518:	68a3      	ldr	r3, [r4, #8]
    551a:	6083      	str	r3, [r0, #8]
    551c:	e003      	b.n	5526 <_realloc_r+0x14a>
    551e:	4630      	mov	r0, r6
    5520:	4621      	mov	r1, r4
    5522:	f7ff ff3e 	bl	53a2 <memmove>
    5526:	19e8      	adds	r0, r5, r7
    5528:	ebc7 0a0a 	rsb	sl, r7, sl
    552c:	f04a 0201 	orr.w	r2, sl, #1
    5530:	6042      	str	r2, [r0, #4]
    5532:	686b      	ldr	r3, [r5, #4]
    5534:	495f      	ldr	r1, [pc, #380]	; (56b4 <_realloc_r+0x2d8>)
    5536:	6088      	str	r0, [r1, #8]
    5538:	f003 0001 	and.w	r0, r3, #1
    553c:	4307      	orrs	r7, r0
    553e:	606f      	str	r7, [r5, #4]
    5540:	e088      	b.n	5654 <_realloc_r+0x278>
    5542:	45ba      	cmp	sl, r7
    5544:	db04      	blt.n	5550 <_realloc_r+0x174>
    5546:	68d9      	ldr	r1, [r3, #12]
    5548:	6898      	ldr	r0, [r3, #8]
    554a:	60c1      	str	r1, [r0, #12]
    554c:	6088      	str	r0, [r1, #8]
    554e:	e003      	b.n	5558 <_realloc_r+0x17c>
    5550:	eb02 0a08 	add.w	sl, r2, r8
    5554:	45ba      	cmp	sl, r7
    5556:	db31      	blt.n	55bc <_realloc_r+0x1e0>
    5558:	4628      	mov	r0, r5
    555a:	68eb      	ldr	r3, [r5, #12]
    555c:	f850 1f08 	ldr.w	r1, [r0, #8]!
    5560:	f1a8 0204 	sub.w	r2, r8, #4
    5564:	2a24      	cmp	r2, #36	; 0x24
    5566:	60cb      	str	r3, [r1, #12]
    5568:	6099      	str	r1, [r3, #8]
    556a:	d823      	bhi.n	55b4 <_realloc_r+0x1d8>
    556c:	2a13      	cmp	r2, #19
    556e:	d91a      	bls.n	55a6 <_realloc_r+0x1ca>
    5570:	6820      	ldr	r0, [r4, #0]
    5572:	60a8      	str	r0, [r5, #8]
    5574:	6866      	ldr	r6, [r4, #4]
    5576:	2a1b      	cmp	r2, #27
    5578:	60ee      	str	r6, [r5, #12]
    557a:	d803      	bhi.n	5584 <_realloc_r+0x1a8>
    557c:	f105 0010 	add.w	r0, r5, #16
    5580:	3408      	adds	r4, #8
    5582:	e010      	b.n	55a6 <_realloc_r+0x1ca>
    5584:	68a3      	ldr	r3, [r4, #8]
    5586:	612b      	str	r3, [r5, #16]
    5588:	68e1      	ldr	r1, [r4, #12]
    558a:	2a24      	cmp	r2, #36	; 0x24
    558c:	6169      	str	r1, [r5, #20]
    558e:	d003      	beq.n	5598 <_realloc_r+0x1bc>
    5590:	f105 0018 	add.w	r0, r5, #24
    5594:	3410      	adds	r4, #16
    5596:	e006      	b.n	55a6 <_realloc_r+0x1ca>
    5598:	6922      	ldr	r2, [r4, #16]
    559a:	61aa      	str	r2, [r5, #24]
    559c:	6960      	ldr	r0, [r4, #20]
    559e:	3418      	adds	r4, #24
    55a0:	61e8      	str	r0, [r5, #28]
    55a2:	f105 0020 	add.w	r0, r5, #32
    55a6:	6826      	ldr	r6, [r4, #0]
    55a8:	6006      	str	r6, [r0, #0]
    55aa:	6863      	ldr	r3, [r4, #4]
    55ac:	6043      	str	r3, [r0, #4]
    55ae:	68a1      	ldr	r1, [r4, #8]
    55b0:	6081      	str	r1, [r0, #8]
    55b2:	e055      	b.n	5660 <_realloc_r+0x284>
    55b4:	4621      	mov	r1, r4
    55b6:	f7ff fef4 	bl	53a2 <memmove>
    55ba:	e051      	b.n	5660 <_realloc_r+0x284>
    55bc:	4631      	mov	r1, r6
    55be:	4648      	mov	r0, r9
    55c0:	f7ff fcd6 	bl	4f70 <_malloc_r>
    55c4:	4606      	mov	r6, r0
    55c6:	2800      	cmp	r0, #0
    55c8:	d044      	beq.n	5654 <_realloc_r+0x278>
    55ca:	f854 1c04 	ldr.w	r1, [r4, #-4]
    55ce:	f021 0301 	bic.w	r3, r1, #1
    55d2:	f1a0 0208 	sub.w	r2, r0, #8
    55d6:	eb0b 0103 	add.w	r1, fp, r3
    55da:	428a      	cmp	r2, r1
    55dc:	d106      	bne.n	55ec <_realloc_r+0x210>
    55de:	f850 6c04 	ldr.w	r6, [r0, #-4]
    55e2:	f026 0503 	bic.w	r5, r6, #3
    55e6:	eb05 0a08 	add.w	sl, r5, r8
    55ea:	e038      	b.n	565e <_realloc_r+0x282>
    55ec:	f1a8 0204 	sub.w	r2, r8, #4
    55f0:	2a24      	cmp	r2, #36	; 0x24
    55f2:	d828      	bhi.n	5646 <_realloc_r+0x26a>
    55f4:	2a13      	cmp	r2, #19
    55f6:	d91e      	bls.n	5636 <_realloc_r+0x25a>
    55f8:	6823      	ldr	r3, [r4, #0]
    55fa:	6003      	str	r3, [r0, #0]
    55fc:	6861      	ldr	r1, [r4, #4]
    55fe:	2a1b      	cmp	r2, #27
    5600:	6041      	str	r1, [r0, #4]
    5602:	d804      	bhi.n	560e <_realloc_r+0x232>
    5604:	f100 0008 	add.w	r0, r0, #8
    5608:	f104 0208 	add.w	r2, r4, #8
    560c:	e014      	b.n	5638 <_realloc_r+0x25c>
    560e:	68a0      	ldr	r0, [r4, #8]
    5610:	60b0      	str	r0, [r6, #8]
    5612:	68e3      	ldr	r3, [r4, #12]
    5614:	2a24      	cmp	r2, #36	; 0x24
    5616:	60f3      	str	r3, [r6, #12]
    5618:	d004      	beq.n	5624 <_realloc_r+0x248>
    561a:	f106 0010 	add.w	r0, r6, #16
    561e:	f104 0210 	add.w	r2, r4, #16
    5622:	e009      	b.n	5638 <_realloc_r+0x25c>
    5624:	6922      	ldr	r2, [r4, #16]
    5626:	6132      	str	r2, [r6, #16]
    5628:	6961      	ldr	r1, [r4, #20]
    562a:	f106 0018 	add.w	r0, r6, #24
    562e:	6171      	str	r1, [r6, #20]
    5630:	f104 0218 	add.w	r2, r4, #24
    5634:	e000      	b.n	5638 <_realloc_r+0x25c>
    5636:	4622      	mov	r2, r4
    5638:	6813      	ldr	r3, [r2, #0]
    563a:	6003      	str	r3, [r0, #0]
    563c:	6851      	ldr	r1, [r2, #4]
    563e:	6041      	str	r1, [r0, #4]
    5640:	6892      	ldr	r2, [r2, #8]
    5642:	6082      	str	r2, [r0, #8]
    5644:	e002      	b.n	564c <_realloc_r+0x270>
    5646:	4621      	mov	r1, r4
    5648:	f7ff feab 	bl	53a2 <memmove>
    564c:	4648      	mov	r0, r9
    564e:	4621      	mov	r1, r4
    5650:	f7ff f97a 	bl	4948 <_free_r>
    5654:	4648      	mov	r0, r9
    5656:	f7ff febf 	bl	53d8 <__malloc_unlock>
    565a:	e028      	b.n	56ae <_realloc_r+0x2d2>
    565c:	46c2      	mov	sl, r8
    565e:	465d      	mov	r5, fp
    5660:	ebc7 000a 	rsb	r0, r7, sl
    5664:	280f      	cmp	r0, #15
    5666:	686a      	ldr	r2, [r5, #4]
    5668:	d911      	bls.n	568e <_realloc_r+0x2b2>
    566a:	19e9      	adds	r1, r5, r7
    566c:	f002 0601 	and.w	r6, r2, #1
    5670:	4337      	orrs	r7, r6
    5672:	f040 0301 	orr.w	r3, r0, #1
    5676:	1808      	adds	r0, r1, r0
    5678:	606f      	str	r7, [r5, #4]
    567a:	604b      	str	r3, [r1, #4]
    567c:	6842      	ldr	r2, [r0, #4]
    567e:	f042 0601 	orr.w	r6, r2, #1
    5682:	6046      	str	r6, [r0, #4]
    5684:	3108      	adds	r1, #8
    5686:	4648      	mov	r0, r9
    5688:	f7ff f95e 	bl	4948 <_free_r>
    568c:	e00a      	b.n	56a4 <_realloc_r+0x2c8>
    568e:	f002 0601 	and.w	r6, r2, #1
    5692:	eb05 010a 	add.w	r1, r5, sl
    5696:	ea4a 0306 	orr.w	r3, sl, r6
    569a:	606b      	str	r3, [r5, #4]
    569c:	6848      	ldr	r0, [r1, #4]
    569e:	f040 0201 	orr.w	r2, r0, #1
    56a2:	604a      	str	r2, [r1, #4]
    56a4:	4648      	mov	r0, r9
    56a6:	f7ff fe97 	bl	53d8 <__malloc_unlock>
    56aa:	f105 0608 	add.w	r6, r5, #8
    56ae:	4630      	mov	r0, r6
    56b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    56b4:	200004fc 	.word	0x200004fc

000056b8 <_sbrk_r>:
    56b8:	b538      	push	{r3, r4, r5, lr}
    56ba:	4c06      	ldr	r4, [pc, #24]	; (56d4 <_sbrk_r+0x1c>)
    56bc:	2300      	movs	r3, #0
    56be:	4605      	mov	r5, r0
    56c0:	4608      	mov	r0, r1
    56c2:	6023      	str	r3, [r4, #0]
    56c4:	f7fe f87a 	bl	37bc <_sbrk>
    56c8:	1c43      	adds	r3, r0, #1
    56ca:	d102      	bne.n	56d2 <_sbrk_r+0x1a>
    56cc:	6821      	ldr	r1, [r4, #0]
    56ce:	b101      	cbz	r1, 56d2 <_sbrk_r+0x1a>
    56d0:	6029      	str	r1, [r5, #0]
    56d2:	bd38      	pop	{r3, r4, r5, pc}
    56d4:	20000aa4 	.word	0x20000aa4

000056d8 <__sread>:
    56d8:	b510      	push	{r4, lr}
    56da:	460c      	mov	r4, r1
    56dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    56e0:	f000 f99c 	bl	5a1c <_read_r>
    56e4:	2800      	cmp	r0, #0
    56e6:	db03      	blt.n	56f0 <__sread+0x18>
    56e8:	6d22      	ldr	r2, [r4, #80]	; 0x50
    56ea:	1813      	adds	r3, r2, r0
    56ec:	6523      	str	r3, [r4, #80]	; 0x50
    56ee:	bd10      	pop	{r4, pc}
    56f0:	89a3      	ldrh	r3, [r4, #12]
    56f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
    56f6:	81a1      	strh	r1, [r4, #12]
    56f8:	bd10      	pop	{r4, pc}

000056fa <__seofread>:
    56fa:	2000      	movs	r0, #0
    56fc:	4770      	bx	lr

000056fe <__swrite>:
    56fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5702:	461d      	mov	r5, r3
    5704:	898b      	ldrh	r3, [r1, #12]
    5706:	460c      	mov	r4, r1
    5708:	f403 7180 	and.w	r1, r3, #256	; 0x100
    570c:	4616      	mov	r6, r2
    570e:	b20a      	sxth	r2, r1
    5710:	4607      	mov	r7, r0
    5712:	b12a      	cbz	r2, 5720 <__swrite+0x22>
    5714:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    5718:	2200      	movs	r2, #0
    571a:	2302      	movs	r3, #2
    571c:	f000 f96c 	bl	59f8 <_lseek_r>
    5720:	89a0      	ldrh	r0, [r4, #12]
    5722:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    5726:	f420 5380 	bic.w	r3, r0, #4096	; 0x1000
    572a:	81a3      	strh	r3, [r4, #12]
    572c:	4638      	mov	r0, r7
    572e:	4632      	mov	r2, r6
    5730:	462b      	mov	r3, r5
    5732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5736:	f000 b8d1 	b.w	58dc <_write_r>

0000573a <__sseek>:
    573a:	b510      	push	{r4, lr}
    573c:	460c      	mov	r4, r1
    573e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5742:	f000 f959 	bl	59f8 <_lseek_r>
    5746:	1c43      	adds	r3, r0, #1
    5748:	89a3      	ldrh	r3, [r4, #12]
    574a:	d103      	bne.n	5754 <__sseek+0x1a>
    574c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    5750:	81a2      	strh	r2, [r4, #12]
    5752:	bd10      	pop	{r4, pc}
    5754:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
    5758:	81a1      	strh	r1, [r4, #12]
    575a:	6520      	str	r0, [r4, #80]	; 0x50
    575c:	bd10      	pop	{r4, pc}

0000575e <__sclose>:
    575e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5762:	f000 b8cd 	b.w	5900 <_close_r>

00005766 <strcmp>:
    5766:	f810 2b01 	ldrb.w	r2, [r0], #1
    576a:	f811 3b01 	ldrb.w	r3, [r1], #1
    576e:	2a01      	cmp	r2, #1
    5770:	bf28      	it	cs
    5772:	429a      	cmpcs	r2, r3
    5774:	d0f7      	beq.n	5766 <strcmp>
    5776:	eba2 0003 	sub.w	r0, r2, r3
    577a:	4770      	bx	lr

0000577c <__swbuf_r>:
    577c:	b570      	push	{r4, r5, r6, lr}
    577e:	460d      	mov	r5, r1
    5780:	4614      	mov	r4, r2
    5782:	4606      	mov	r6, r0
    5784:	b118      	cbz	r0, 578e <__swbuf_r+0x12>
    5786:	6b83      	ldr	r3, [r0, #56]	; 0x38
    5788:	b90b      	cbnz	r3, 578e <__swbuf_r+0x12>
    578a:	f7fe ff9f 	bl	46cc <__sinit>
    578e:	89a1      	ldrh	r1, [r4, #12]
    5790:	69a0      	ldr	r0, [r4, #24]
    5792:	f001 0208 	and.w	r2, r1, #8
    5796:	b213      	sxth	r3, r2
    5798:	60a0      	str	r0, [r4, #8]
    579a:	b10b      	cbz	r3, 57a0 <__swbuf_r+0x24>
    579c:	6920      	ldr	r0, [r4, #16]
    579e:	b958      	cbnz	r0, 57b8 <__swbuf_r+0x3c>
    57a0:	4630      	mov	r0, r6
    57a2:	4621      	mov	r1, r4
    57a4:	f7fe fe32 	bl	440c <__swsetup_r>
    57a8:	b130      	cbz	r0, 57b8 <__swbuf_r+0x3c>
    57aa:	89a5      	ldrh	r5, [r4, #12]
    57ac:	2009      	movs	r0, #9
    57ae:	f045 0140 	orr.w	r1, r5, #64	; 0x40
    57b2:	81a1      	strh	r1, [r4, #12]
    57b4:	6030      	str	r0, [r6, #0]
    57b6:	e017      	b.n	57e8 <__swbuf_r+0x6c>
    57b8:	89a1      	ldrh	r1, [r4, #12]
    57ba:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
    57be:	b213      	sxth	r3, r2
    57c0:	b2ed      	uxtb	r5, r5
    57c2:	b933      	cbnz	r3, 57d2 <__swbuf_r+0x56>
    57c4:	f441 5000 	orr.w	r0, r1, #8192	; 0x2000
    57c8:	6e61      	ldr	r1, [r4, #100]	; 0x64
    57ca:	81a0      	strh	r0, [r4, #12]
    57cc:	f421 5200 	bic.w	r2, r1, #8192	; 0x2000
    57d0:	6662      	str	r2, [r4, #100]	; 0x64
    57d2:	6820      	ldr	r0, [r4, #0]
    57d4:	6923      	ldr	r3, [r4, #16]
    57d6:	6961      	ldr	r1, [r4, #20]
    57d8:	1ac0      	subs	r0, r0, r3
    57da:	4288      	cmp	r0, r1
    57dc:	db07      	blt.n	57ee <__swbuf_r+0x72>
    57de:	4630      	mov	r0, r6
    57e0:	4621      	mov	r1, r4
    57e2:	f7fe fe7f 	bl	44e4 <_fflush_r>
    57e6:	b110      	cbz	r0, 57ee <__swbuf_r+0x72>
    57e8:	f04f 35ff 	mov.w	r5, #4294967295
    57ec:	e015      	b.n	581a <__swbuf_r+0x9e>
    57ee:	68a2      	ldr	r2, [r4, #8]
    57f0:	6821      	ldr	r1, [r4, #0]
    57f2:	1e53      	subs	r3, r2, #1
    57f4:	60a3      	str	r3, [r4, #8]
    57f6:	f801 5b01 	strb.w	r5, [r1], #1
    57fa:	6962      	ldr	r2, [r4, #20]
    57fc:	6021      	str	r1, [r4, #0]
    57fe:	3001      	adds	r0, #1
    5800:	4290      	cmp	r0, r2
    5802:	d004      	beq.n	580e <__swbuf_r+0x92>
    5804:	89a3      	ldrh	r3, [r4, #12]
    5806:	07db      	lsls	r3, r3, #31
    5808:	d507      	bpl.n	581a <__swbuf_r+0x9e>
    580a:	2d0a      	cmp	r5, #10
    580c:	d105      	bne.n	581a <__swbuf_r+0x9e>
    580e:	4630      	mov	r0, r6
    5810:	4621      	mov	r1, r4
    5812:	f7fe fe67 	bl	44e4 <_fflush_r>
    5816:	2800      	cmp	r0, #0
    5818:	d1e6      	bne.n	57e8 <__swbuf_r+0x6c>
    581a:	4628      	mov	r0, r5
    581c:	bd70      	pop	{r4, r5, r6, pc}

0000581e <__swbuf>:
    581e:	460a      	mov	r2, r1
    5820:	4902      	ldr	r1, [pc, #8]	; (582c <__swbuf+0xe>)
    5822:	4603      	mov	r3, r0
    5824:	6808      	ldr	r0, [r1, #0]
    5826:	4619      	mov	r1, r3
    5828:	f7ff bfa8 	b.w	577c <__swbuf_r>
    582c:	20000050 	.word	0x20000050

00005830 <_wcrtomb_r>:
    5830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5834:	461d      	mov	r5, r3
    5836:	4b10      	ldr	r3, [pc, #64]	; (5878 <_wcrtomb_r+0x48>)
    5838:	b086      	sub	sp, #24
    583a:	4604      	mov	r4, r0
    583c:	4690      	mov	r8, r2
    583e:	460e      	mov	r6, r1
    5840:	681f      	ldr	r7, [r3, #0]
    5842:	b939      	cbnz	r1, 5854 <_wcrtomb_r+0x24>
    5844:	f7ff faf6 	bl	4e34 <__locale_charset>
    5848:	9500      	str	r5, [sp, #0]
    584a:	4603      	mov	r3, r0
    584c:	a903      	add	r1, sp, #12
    584e:	4620      	mov	r0, r4
    5850:	4632      	mov	r2, r6
    5852:	e006      	b.n	5862 <_wcrtomb_r+0x32>
    5854:	f7ff faee 	bl	4e34 <__locale_charset>
    5858:	9500      	str	r5, [sp, #0]
    585a:	4603      	mov	r3, r0
    585c:	4631      	mov	r1, r6
    585e:	4620      	mov	r0, r4
    5860:	4642      	mov	r2, r8
    5862:	47b8      	blx	r7
    5864:	1c43      	adds	r3, r0, #1
    5866:	d103      	bne.n	5870 <_wcrtomb_r+0x40>
    5868:	2100      	movs	r1, #0
    586a:	228a      	movs	r2, #138	; 0x8a
    586c:	6029      	str	r1, [r5, #0]
    586e:	6022      	str	r2, [r4, #0]
    5870:	b006      	add	sp, #24
    5872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5876:	bf00      	nop
    5878:	2000090c 	.word	0x2000090c

0000587c <wcrtomb>:
    587c:	b530      	push	{r4, r5, lr}
    587e:	4613      	mov	r3, r2
    5880:	4a04      	ldr	r2, [pc, #16]	; (5894 <wcrtomb+0x18>)
    5882:	4605      	mov	r5, r0
    5884:	460c      	mov	r4, r1
    5886:	6810      	ldr	r0, [r2, #0]
    5888:	4629      	mov	r1, r5
    588a:	4622      	mov	r2, r4
    588c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    5890:	f7ff bfce 	b.w	5830 <_wcrtomb_r>
    5894:	20000050 	.word	0x20000050

00005898 <__ascii_wctomb>:
    5898:	b149      	cbz	r1, 58ae <__ascii_wctomb+0x16>
    589a:	2aff      	cmp	r2, #255	; 0xff
    589c:	d904      	bls.n	58a8 <__ascii_wctomb+0x10>
    589e:	238a      	movs	r3, #138	; 0x8a
    58a0:	6003      	str	r3, [r0, #0]
    58a2:	f04f 30ff 	mov.w	r0, #4294967295
    58a6:	4770      	bx	lr
    58a8:	700a      	strb	r2, [r1, #0]
    58aa:	2001      	movs	r0, #1
    58ac:	4770      	bx	lr
    58ae:	4608      	mov	r0, r1
    58b0:	4770      	bx	lr

000058b2 <_wctomb_r>:
    58b2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    58b6:	4698      	mov	r8, r3
    58b8:	4b07      	ldr	r3, [pc, #28]	; (58d8 <_wctomb_r+0x26>)
    58ba:	4605      	mov	r5, r0
    58bc:	460f      	mov	r7, r1
    58be:	4616      	mov	r6, r2
    58c0:	681c      	ldr	r4, [r3, #0]
    58c2:	f7ff fab7 	bl	4e34 <__locale_charset>
    58c6:	f8cd 8000 	str.w	r8, [sp]
    58ca:	4603      	mov	r3, r0
    58cc:	4639      	mov	r1, r7
    58ce:	4628      	mov	r0, r5
    58d0:	4632      	mov	r2, r6
    58d2:	47a0      	blx	r4
    58d4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    58d8:	2000090c 	.word	0x2000090c

000058dc <_write_r>:
    58dc:	b538      	push	{r3, r4, r5, lr}
    58de:	4c07      	ldr	r4, [pc, #28]	; (58fc <_write_r+0x20>)
    58e0:	4605      	mov	r5, r0
    58e2:	2000      	movs	r0, #0
    58e4:	6020      	str	r0, [r4, #0]
    58e6:	4608      	mov	r0, r1
    58e8:	4611      	mov	r1, r2
    58ea:	461a      	mov	r2, r3
    58ec:	f7fb f998 	bl	c20 <_write>
    58f0:	1c43      	adds	r3, r0, #1
    58f2:	d102      	bne.n	58fa <_write_r+0x1e>
    58f4:	6823      	ldr	r3, [r4, #0]
    58f6:	b103      	cbz	r3, 58fa <_write_r+0x1e>
    58f8:	602b      	str	r3, [r5, #0]
    58fa:	bd38      	pop	{r3, r4, r5, pc}
    58fc:	20000aa4 	.word	0x20000aa4

00005900 <_close_r>:
    5900:	b538      	push	{r3, r4, r5, lr}
    5902:	4c06      	ldr	r4, [pc, #24]	; (591c <_close_r+0x1c>)
    5904:	2300      	movs	r3, #0
    5906:	4605      	mov	r5, r0
    5908:	4608      	mov	r0, r1
    590a:	6023      	str	r3, [r4, #0]
    590c:	f7fd ff6e 	bl	37ec <_close>
    5910:	1c43      	adds	r3, r0, #1
    5912:	d102      	bne.n	591a <_close_r+0x1a>
    5914:	6821      	ldr	r1, [r4, #0]
    5916:	b101      	cbz	r1, 591a <_close_r+0x1a>
    5918:	6029      	str	r1, [r5, #0]
    591a:	bd38      	pop	{r3, r4, r5, pc}
    591c:	20000aa4 	.word	0x20000aa4

00005920 <_fclose_r>:
    5920:	b570      	push	{r4, r5, r6, lr}
    5922:	4605      	mov	r5, r0
    5924:	460c      	mov	r4, r1
    5926:	2900      	cmp	r1, #0
    5928:	d039      	beq.n	599e <_fclose_r+0x7e>
    592a:	f7fe ff33 	bl	4794 <__sfp_lock_acquire>
    592e:	b125      	cbz	r5, 593a <_fclose_r+0x1a>
    5930:	6bab      	ldr	r3, [r5, #56]	; 0x38
    5932:	b913      	cbnz	r3, 593a <_fclose_r+0x1a>
    5934:	4628      	mov	r0, r5
    5936:	f7fe fec9 	bl	46cc <__sinit>
    593a:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
    593e:	b35e      	cbz	r6, 5998 <_fclose_r+0x78>
    5940:	4628      	mov	r0, r5
    5942:	4621      	mov	r1, r4
    5944:	f7fe fdce 	bl	44e4 <_fflush_r>
    5948:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    594a:	4606      	mov	r6, r0
    594c:	b13a      	cbz	r2, 595e <_fclose_r+0x3e>
    594e:	4628      	mov	r0, r5
    5950:	69e1      	ldr	r1, [r4, #28]
    5952:	4790      	blx	r2
    5954:	ea36 0620 	bics.w	r6, r6, r0, asr #32
    5958:	bf28      	it	cs
    595a:	f04f 36ff 	movcs.w	r6, #4294967295
    595e:	89a0      	ldrh	r0, [r4, #12]
    5960:	f000 0180 	and.w	r1, r0, #128	; 0x80
    5964:	b20b      	sxth	r3, r1
    5966:	b11b      	cbz	r3, 5970 <_fclose_r+0x50>
    5968:	4628      	mov	r0, r5
    596a:	6921      	ldr	r1, [r4, #16]
    596c:	f7fe ffec 	bl	4948 <_free_r>
    5970:	6b21      	ldr	r1, [r4, #48]	; 0x30
    5972:	b141      	cbz	r1, 5986 <_fclose_r+0x66>
    5974:	f104 0240 	add.w	r2, r4, #64	; 0x40
    5978:	4291      	cmp	r1, r2
    597a:	d002      	beq.n	5982 <_fclose_r+0x62>
    597c:	4628      	mov	r0, r5
    597e:	f7fe ffe3 	bl	4948 <_free_r>
    5982:	2000      	movs	r0, #0
    5984:	6320      	str	r0, [r4, #48]	; 0x30
    5986:	6c61      	ldr	r1, [r4, #68]	; 0x44
    5988:	b121      	cbz	r1, 5994 <_fclose_r+0x74>
    598a:	4628      	mov	r0, r5
    598c:	f7fe ffdc 	bl	4948 <_free_r>
    5990:	2100      	movs	r1, #0
    5992:	6461      	str	r1, [r4, #68]	; 0x44
    5994:	2300      	movs	r3, #0
    5996:	81a3      	strh	r3, [r4, #12]
    5998:	f7fe fefd 	bl	4796 <__sfp_lock_release>
    599c:	e000      	b.n	59a0 <_fclose_r+0x80>
    599e:	460e      	mov	r6, r1
    59a0:	4630      	mov	r0, r6
    59a2:	bd70      	pop	{r4, r5, r6, pc}

000059a4 <fclose>:
    59a4:	4b02      	ldr	r3, [pc, #8]	; (59b0 <fclose+0xc>)
    59a6:	4601      	mov	r1, r0
    59a8:	6818      	ldr	r0, [r3, #0]
    59aa:	f7ff bfb9 	b.w	5920 <_fclose_r>
    59ae:	bf00      	nop
    59b0:	20000050 	.word	0x20000050

000059b4 <_fstat_r>:
    59b4:	b538      	push	{r3, r4, r5, lr}
    59b6:	4c07      	ldr	r4, [pc, #28]	; (59d4 <_fstat_r+0x20>)
    59b8:	2300      	movs	r3, #0
    59ba:	4605      	mov	r5, r0
    59bc:	4608      	mov	r0, r1
    59be:	4611      	mov	r1, r2
    59c0:	6023      	str	r3, [r4, #0]
    59c2:	f7fd ff17 	bl	37f4 <_fstat>
    59c6:	1c43      	adds	r3, r0, #1
    59c8:	d102      	bne.n	59d0 <_fstat_r+0x1c>
    59ca:	6821      	ldr	r1, [r4, #0]
    59cc:	b101      	cbz	r1, 59d0 <_fstat_r+0x1c>
    59ce:	6029      	str	r1, [r5, #0]
    59d0:	bd38      	pop	{r3, r4, r5, pc}
    59d2:	bf00      	nop
    59d4:	20000aa4 	.word	0x20000aa4

000059d8 <_isatty_r>:
    59d8:	b538      	push	{r3, r4, r5, lr}
    59da:	4c06      	ldr	r4, [pc, #24]	; (59f4 <_isatty_r+0x1c>)
    59dc:	2300      	movs	r3, #0
    59de:	4605      	mov	r5, r0
    59e0:	4608      	mov	r0, r1
    59e2:	6023      	str	r3, [r4, #0]
    59e4:	f7fd ff0c 	bl	3800 <_isatty>
    59e8:	1c43      	adds	r3, r0, #1
    59ea:	d102      	bne.n	59f2 <_isatty_r+0x1a>
    59ec:	6821      	ldr	r1, [r4, #0]
    59ee:	b101      	cbz	r1, 59f2 <_isatty_r+0x1a>
    59f0:	6029      	str	r1, [r5, #0]
    59f2:	bd38      	pop	{r3, r4, r5, pc}
    59f4:	20000aa4 	.word	0x20000aa4

000059f8 <_lseek_r>:
    59f8:	b538      	push	{r3, r4, r5, lr}
    59fa:	4c07      	ldr	r4, [pc, #28]	; (5a18 <_lseek_r+0x20>)
    59fc:	4605      	mov	r5, r0
    59fe:	2000      	movs	r0, #0
    5a00:	6020      	str	r0, [r4, #0]
    5a02:	4608      	mov	r0, r1
    5a04:	4611      	mov	r1, r2
    5a06:	461a      	mov	r2, r3
    5a08:	f7fd fefe 	bl	3808 <_lseek>
    5a0c:	1c43      	adds	r3, r0, #1
    5a0e:	d102      	bne.n	5a16 <_lseek_r+0x1e>
    5a10:	6823      	ldr	r3, [r4, #0]
    5a12:	b103      	cbz	r3, 5a16 <_lseek_r+0x1e>
    5a14:	602b      	str	r3, [r5, #0]
    5a16:	bd38      	pop	{r3, r4, r5, pc}
    5a18:	20000aa4 	.word	0x20000aa4

00005a1c <_read_r>:
    5a1c:	b538      	push	{r3, r4, r5, lr}
    5a1e:	4c07      	ldr	r4, [pc, #28]	; (5a3c <_read_r+0x20>)
    5a20:	4605      	mov	r5, r0
    5a22:	2000      	movs	r0, #0
    5a24:	6020      	str	r0, [r4, #0]
    5a26:	4608      	mov	r0, r1
    5a28:	4611      	mov	r1, r2
    5a2a:	461a      	mov	r2, r3
    5a2c:	f7fb f8b4 	bl	b98 <_read>
    5a30:	1c43      	adds	r3, r0, #1
    5a32:	d102      	bne.n	5a3a <_read_r+0x1e>
    5a34:	6823      	ldr	r3, [r4, #0]
    5a36:	b103      	cbz	r3, 5a3a <_read_r+0x1e>
    5a38:	602b      	str	r3, [r5, #0]
    5a3a:	bd38      	pop	{r3, r4, r5, pc}
    5a3c:	20000aa4 	.word	0x20000aa4

00005a40 <__aeabi_uldivmod>:
    5a40:	b94b      	cbnz	r3, 5a56 <__aeabi_uldivmod+0x16>
    5a42:	b942      	cbnz	r2, 5a56 <__aeabi_uldivmod+0x16>
    5a44:	2900      	cmp	r1, #0
    5a46:	bf08      	it	eq
    5a48:	2800      	cmpeq	r0, #0
    5a4a:	d002      	beq.n	5a52 <__aeabi_uldivmod+0x12>
    5a4c:	f04f 31ff 	mov.w	r1, #4294967295
    5a50:	4608      	mov	r0, r1
    5a52:	f000 b837 	b.w	5ac4 <__aeabi_idiv0>
    5a56:	b082      	sub	sp, #8
    5a58:	46ec      	mov	ip, sp
    5a5a:	e92d 5000 	stmdb	sp!, {ip, lr}
    5a5e:	f000 f81b 	bl	5a98 <__gnu_uldivmod_helper>
    5a62:	f8dd e004 	ldr.w	lr, [sp, #4]
    5a66:	b002      	add	sp, #8
    5a68:	bc0c      	pop	{r2, r3}
    5a6a:	4770      	bx	lr

00005a6c <__gnu_ldivmod_helper>:
    5a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a6e:	4616      	mov	r6, r2
    5a70:	4604      	mov	r4, r0
    5a72:	460d      	mov	r5, r1
    5a74:	461f      	mov	r7, r3
    5a76:	f000 f827 	bl	5ac8 <__divdi3>
    5a7a:	fb06 f301 	mul.w	r3, r6, r1
    5a7e:	fb00 3707 	mla	r7, r0, r7, r3
    5a82:	fba6 2300 	umull	r2, r3, r6, r0
    5a86:	18fb      	adds	r3, r7, r3
    5a88:	1aa2      	subs	r2, r4, r2
    5a8a:	eb65 0303 	sbc.w	r3, r5, r3
    5a8e:	9c06      	ldr	r4, [sp, #24]
    5a90:	e9c4 2300 	strd	r2, r3, [r4]
    5a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5a96:	bf00      	nop

00005a98 <__gnu_uldivmod_helper>:
    5a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a9a:	4616      	mov	r6, r2
    5a9c:	4604      	mov	r4, r0
    5a9e:	460d      	mov	r5, r1
    5aa0:	461f      	mov	r7, r3
    5aa2:	f000 f96f 	bl	5d84 <__udivdi3>
    5aa6:	fb00 f707 	mul.w	r7, r0, r7
    5aaa:	fba0 2306 	umull	r2, r3, r0, r6
    5aae:	fb06 7701 	mla	r7, r6, r1, r7
    5ab2:	18fb      	adds	r3, r7, r3
    5ab4:	1aa2      	subs	r2, r4, r2
    5ab6:	eb65 0303 	sbc.w	r3, r5, r3
    5aba:	9c06      	ldr	r4, [sp, #24]
    5abc:	e9c4 2300 	strd	r2, r3, [r4]
    5ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5ac2:	bf00      	nop

00005ac4 <__aeabi_idiv0>:
    5ac4:	4770      	bx	lr
    5ac6:	bf00      	nop

00005ac8 <__divdi3>:
    5ac8:	2900      	cmp	r1, #0
    5aca:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5ace:	461d      	mov	r5, r3
    5ad0:	f2c0 809d 	blt.w	5c0e <__divdi3+0x146>
    5ad4:	2400      	movs	r4, #0
    5ad6:	2d00      	cmp	r5, #0
    5ad8:	f2c0 8094 	blt.w	5c04 <__divdi3+0x13c>
    5adc:	4680      	mov	r8, r0
    5ade:	460f      	mov	r7, r1
    5ae0:	4694      	mov	ip, r2
    5ae2:	461e      	mov	r6, r3
    5ae4:	bbe3      	cbnz	r3, 5b60 <__divdi3+0x98>
    5ae6:	428a      	cmp	r2, r1
    5ae8:	d955      	bls.n	5b96 <__divdi3+0xce>
    5aea:	fab2 f782 	clz	r7, r2
    5aee:	b147      	cbz	r7, 5b02 <__divdi3+0x3a>
    5af0:	f1c7 0520 	rsb	r5, r7, #32
    5af4:	fa20 f605 	lsr.w	r6, r0, r5
    5af8:	fa01 f107 	lsl.w	r1, r1, r7
    5afc:	40ba      	lsls	r2, r7
    5afe:	4331      	orrs	r1, r6
    5b00:	40b8      	lsls	r0, r7
    5b02:	0c17      	lsrs	r7, r2, #16
    5b04:	fbb1 f6f7 	udiv	r6, r1, r7
    5b08:	0c03      	lsrs	r3, r0, #16
    5b0a:	fa1f fc82 	uxth.w	ip, r2
    5b0e:	fb07 1116 	mls	r1, r7, r6, r1
    5b12:	fb0c f506 	mul.w	r5, ip, r6
    5b16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    5b1a:	429d      	cmp	r5, r3
    5b1c:	d908      	bls.n	5b30 <__divdi3+0x68>
    5b1e:	1e71      	subs	r1, r6, #1
    5b20:	189b      	adds	r3, r3, r2
    5b22:	f080 8113 	bcs.w	5d4c <__divdi3+0x284>
    5b26:	429d      	cmp	r5, r3
    5b28:	f240 8110 	bls.w	5d4c <__divdi3+0x284>
    5b2c:	3e02      	subs	r6, #2
    5b2e:	189b      	adds	r3, r3, r2
    5b30:	1b59      	subs	r1, r3, r5
    5b32:	fbb1 f5f7 	udiv	r5, r1, r7
    5b36:	fb07 1315 	mls	r3, r7, r5, r1
    5b3a:	b280      	uxth	r0, r0
    5b3c:	fb0c fc05 	mul.w	ip, ip, r5
    5b40:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
    5b44:	458c      	cmp	ip, r1
    5b46:	d907      	bls.n	5b58 <__divdi3+0x90>
    5b48:	1e6b      	subs	r3, r5, #1
    5b4a:	188a      	adds	r2, r1, r2
    5b4c:	f080 8100 	bcs.w	5d50 <__divdi3+0x288>
    5b50:	4594      	cmp	ip, r2
    5b52:	f240 80fd 	bls.w	5d50 <__divdi3+0x288>
    5b56:	3d02      	subs	r5, #2
    5b58:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
    5b5c:	2500      	movs	r5, #0
    5b5e:	e003      	b.n	5b68 <__divdi3+0xa0>
    5b60:	428b      	cmp	r3, r1
    5b62:	d90c      	bls.n	5b7e <__divdi3+0xb6>
    5b64:	2500      	movs	r5, #0
    5b66:	4629      	mov	r1, r5
    5b68:	460a      	mov	r2, r1
    5b6a:	462b      	mov	r3, r5
    5b6c:	b114      	cbz	r4, 5b74 <__divdi3+0xac>
    5b6e:	4252      	negs	r2, r2
    5b70:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    5b74:	4610      	mov	r0, r2
    5b76:	4619      	mov	r1, r3
    5b78:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5b7c:	4770      	bx	lr
    5b7e:	fab3 f583 	clz	r5, r3
    5b82:	2d00      	cmp	r5, #0
    5b84:	f040 8087 	bne.w	5c96 <__divdi3+0x1ce>
    5b88:	428b      	cmp	r3, r1
    5b8a:	d301      	bcc.n	5b90 <__divdi3+0xc8>
    5b8c:	4282      	cmp	r2, r0
    5b8e:	d8ea      	bhi.n	5b66 <__divdi3+0x9e>
    5b90:	2500      	movs	r5, #0
    5b92:	2101      	movs	r1, #1
    5b94:	e7e8      	b.n	5b68 <__divdi3+0xa0>
    5b96:	b912      	cbnz	r2, 5b9e <__divdi3+0xd6>
    5b98:	2601      	movs	r6, #1
    5b9a:	fbb6 f2f2 	udiv	r2, r6, r2
    5b9e:	fab2 f682 	clz	r6, r2
    5ba2:	2e00      	cmp	r6, #0
    5ba4:	d139      	bne.n	5c1a <__divdi3+0x152>
    5ba6:	1a8e      	subs	r6, r1, r2
    5ba8:	0c13      	lsrs	r3, r2, #16
    5baa:	fa1f fc82 	uxth.w	ip, r2
    5bae:	2501      	movs	r5, #1
    5bb0:	fbb6 f7f3 	udiv	r7, r6, r3
    5bb4:	fb03 6117 	mls	r1, r3, r7, r6
    5bb8:	ea4f 4910 	mov.w	r9, r0, lsr #16
    5bbc:	fb0c f807 	mul.w	r8, ip, r7
    5bc0:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
    5bc4:	45b0      	cmp	r8, r6
    5bc6:	d906      	bls.n	5bd6 <__divdi3+0x10e>
    5bc8:	1e79      	subs	r1, r7, #1
    5bca:	18b6      	adds	r6, r6, r2
    5bcc:	d202      	bcs.n	5bd4 <__divdi3+0x10c>
    5bce:	45b0      	cmp	r8, r6
    5bd0:	f200 80d3 	bhi.w	5d7a <__divdi3+0x2b2>
    5bd4:	460f      	mov	r7, r1
    5bd6:	ebc8 0606 	rsb	r6, r8, r6
    5bda:	fbb6 f1f3 	udiv	r1, r6, r3
    5bde:	fb03 6311 	mls	r3, r3, r1, r6
    5be2:	b280      	uxth	r0, r0
    5be4:	fb0c fc01 	mul.w	ip, ip, r1
    5be8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    5bec:	459c      	cmp	ip, r3
    5bee:	d906      	bls.n	5bfe <__divdi3+0x136>
    5bf0:	1e4e      	subs	r6, r1, #1
    5bf2:	189a      	adds	r2, r3, r2
    5bf4:	d202      	bcs.n	5bfc <__divdi3+0x134>
    5bf6:	4594      	cmp	ip, r2
    5bf8:	f200 80c2 	bhi.w	5d80 <__divdi3+0x2b8>
    5bfc:	4631      	mov	r1, r6
    5bfe:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
    5c02:	e7b1      	b.n	5b68 <__divdi3+0xa0>
    5c04:	43e4      	mvns	r4, r4
    5c06:	4252      	negs	r2, r2
    5c08:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    5c0c:	e766      	b.n	5adc <__divdi3+0x14>
    5c0e:	4240      	negs	r0, r0
    5c10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    5c14:	f04f 34ff 	mov.w	r4, #4294967295
    5c18:	e75d      	b.n	5ad6 <__divdi3+0xe>
    5c1a:	40b2      	lsls	r2, r6
    5c1c:	f1c6 0920 	rsb	r9, r6, #32
    5c20:	fa21 f709 	lsr.w	r7, r1, r9
    5c24:	fa20 f509 	lsr.w	r5, r0, r9
    5c28:	0c13      	lsrs	r3, r2, #16
    5c2a:	fa01 f106 	lsl.w	r1, r1, r6
    5c2e:	fbb7 f8f3 	udiv	r8, r7, r3
    5c32:	ea45 0901 	orr.w	r9, r5, r1
    5c36:	fa1f fc82 	uxth.w	ip, r2
    5c3a:	fb03 7718 	mls	r7, r3, r8, r7
    5c3e:	ea4f 4119 	mov.w	r1, r9, lsr #16
    5c42:	fb0c f508 	mul.w	r5, ip, r8
    5c46:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
    5c4a:	40b0      	lsls	r0, r6
    5c4c:	42bd      	cmp	r5, r7
    5c4e:	d90a      	bls.n	5c66 <__divdi3+0x19e>
    5c50:	18bf      	adds	r7, r7, r2
    5c52:	f108 36ff 	add.w	r6, r8, #4294967295
    5c56:	f080 808e 	bcs.w	5d76 <__divdi3+0x2ae>
    5c5a:	42bd      	cmp	r5, r7
    5c5c:	f240 808b 	bls.w	5d76 <__divdi3+0x2ae>
    5c60:	f1a8 0802 	sub.w	r8, r8, #2
    5c64:	18bf      	adds	r7, r7, r2
    5c66:	1b79      	subs	r1, r7, r5
    5c68:	fbb1 f5f3 	udiv	r5, r1, r3
    5c6c:	fb03 1715 	mls	r7, r3, r5, r1
    5c70:	fa1f f989 	uxth.w	r9, r9
    5c74:	fb0c f605 	mul.w	r6, ip, r5
    5c78:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
    5c7c:	428e      	cmp	r6, r1
    5c7e:	d906      	bls.n	5c8e <__divdi3+0x1c6>
    5c80:	1e6f      	subs	r7, r5, #1
    5c82:	1889      	adds	r1, r1, r2
    5c84:	d271      	bcs.n	5d6a <__divdi3+0x2a2>
    5c86:	428e      	cmp	r6, r1
    5c88:	d96f      	bls.n	5d6a <__divdi3+0x2a2>
    5c8a:	3d02      	subs	r5, #2
    5c8c:	1889      	adds	r1, r1, r2
    5c8e:	1b8e      	subs	r6, r1, r6
    5c90:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
    5c94:	e78c      	b.n	5bb0 <__divdi3+0xe8>
    5c96:	f1c5 0120 	rsb	r1, r5, #32
    5c9a:	fa22 f301 	lsr.w	r3, r2, r1
    5c9e:	fa06 f605 	lsl.w	r6, r6, r5
    5ca2:	431e      	orrs	r6, r3
    5ca4:	fa27 f201 	lsr.w	r2, r7, r1
    5ca8:	ea4f 4916 	mov.w	r9, r6, lsr #16
    5cac:	fa07 f705 	lsl.w	r7, r7, r5
    5cb0:	fa20 f101 	lsr.w	r1, r0, r1
    5cb4:	fbb2 f8f9 	udiv	r8, r2, r9
    5cb8:	430f      	orrs	r7, r1
    5cba:	0c3b      	lsrs	r3, r7, #16
    5cbc:	fa1f fa86 	uxth.w	sl, r6
    5cc0:	fb09 2218 	mls	r2, r9, r8, r2
    5cc4:	fb0a fb08 	mul.w	fp, sl, r8
    5cc8:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    5ccc:	4593      	cmp	fp, r2
    5cce:	fa0c fc05 	lsl.w	ip, ip, r5
    5cd2:	d908      	bls.n	5ce6 <__divdi3+0x21e>
    5cd4:	1992      	adds	r2, r2, r6
    5cd6:	f108 31ff 	add.w	r1, r8, #4294967295
    5cda:	d24a      	bcs.n	5d72 <__divdi3+0x2aa>
    5cdc:	4593      	cmp	fp, r2
    5cde:	d948      	bls.n	5d72 <__divdi3+0x2aa>
    5ce0:	f1a8 0802 	sub.w	r8, r8, #2
    5ce4:	1992      	adds	r2, r2, r6
    5ce6:	ebcb 0302 	rsb	r3, fp, r2
    5cea:	fbb3 f1f9 	udiv	r1, r3, r9
    5cee:	fb09 3211 	mls	r2, r9, r1, r3
    5cf2:	b2bf      	uxth	r7, r7
    5cf4:	fb0a fa01 	mul.w	sl, sl, r1
    5cf8:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
    5cfc:	459a      	cmp	sl, r3
    5cfe:	d906      	bls.n	5d0e <__divdi3+0x246>
    5d00:	1e4a      	subs	r2, r1, #1
    5d02:	199b      	adds	r3, r3, r6
    5d04:	d233      	bcs.n	5d6e <__divdi3+0x2a6>
    5d06:	459a      	cmp	sl, r3
    5d08:	d931      	bls.n	5d6e <__divdi3+0x2a6>
    5d0a:	3902      	subs	r1, #2
    5d0c:	199b      	adds	r3, r3, r6
    5d0e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
    5d12:	0c0f      	lsrs	r7, r1, #16
    5d14:	fa1f f88c 	uxth.w	r8, ip
    5d18:	fb08 f607 	mul.w	r6, r8, r7
    5d1c:	b28a      	uxth	r2, r1
    5d1e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
    5d22:	fb08 f802 	mul.w	r8, r8, r2
    5d26:	fb0c 6202 	mla	r2, ip, r2, r6
    5d2a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
    5d2e:	fb0c fc07 	mul.w	ip, ip, r7
    5d32:	4296      	cmp	r6, r2
    5d34:	bf88      	it	hi
    5d36:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
    5d3a:	ebca 0303 	rsb	r3, sl, r3
    5d3e:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
    5d42:	4563      	cmp	r3, ip
    5d44:	d30e      	bcc.n	5d64 <__divdi3+0x29c>
    5d46:	d005      	beq.n	5d54 <__divdi3+0x28c>
    5d48:	2500      	movs	r5, #0
    5d4a:	e70d      	b.n	5b68 <__divdi3+0xa0>
    5d4c:	460e      	mov	r6, r1
    5d4e:	e6ef      	b.n	5b30 <__divdi3+0x68>
    5d50:	461d      	mov	r5, r3
    5d52:	e701      	b.n	5b58 <__divdi3+0x90>
    5d54:	fa1f f888 	uxth.w	r8, r8
    5d58:	fa00 f005 	lsl.w	r0, r0, r5
    5d5c:	eb08 4502 	add.w	r5, r8, r2, lsl #16
    5d60:	42a8      	cmp	r0, r5
    5d62:	d2f1      	bcs.n	5d48 <__divdi3+0x280>
    5d64:	3901      	subs	r1, #1
    5d66:	2500      	movs	r5, #0
    5d68:	e6fe      	b.n	5b68 <__divdi3+0xa0>
    5d6a:	463d      	mov	r5, r7
    5d6c:	e78f      	b.n	5c8e <__divdi3+0x1c6>
    5d6e:	4611      	mov	r1, r2
    5d70:	e7cd      	b.n	5d0e <__divdi3+0x246>
    5d72:	4688      	mov	r8, r1
    5d74:	e7b7      	b.n	5ce6 <__divdi3+0x21e>
    5d76:	46b0      	mov	r8, r6
    5d78:	e775      	b.n	5c66 <__divdi3+0x19e>
    5d7a:	3f02      	subs	r7, #2
    5d7c:	18b6      	adds	r6, r6, r2
    5d7e:	e72a      	b.n	5bd6 <__divdi3+0x10e>
    5d80:	3902      	subs	r1, #2
    5d82:	e73c      	b.n	5bfe <__divdi3+0x136>

00005d84 <__udivdi3>:
    5d84:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    5d88:	4614      	mov	r4, r2
    5d8a:	4605      	mov	r5, r0
    5d8c:	460e      	mov	r6, r1
    5d8e:	2b00      	cmp	r3, #0
    5d90:	d13d      	bne.n	5e0e <__udivdi3+0x8a>
    5d92:	428a      	cmp	r2, r1
    5d94:	d949      	bls.n	5e2a <__udivdi3+0xa6>
    5d96:	fab2 f782 	clz	r7, r2
    5d9a:	b147      	cbz	r7, 5dae <__udivdi3+0x2a>
    5d9c:	f1c7 0120 	rsb	r1, r7, #32
    5da0:	fa20 f201 	lsr.w	r2, r0, r1
    5da4:	fa06 f607 	lsl.w	r6, r6, r7
    5da8:	40bc      	lsls	r4, r7
    5daa:	4316      	orrs	r6, r2
    5dac:	40bd      	lsls	r5, r7
    5dae:	0c22      	lsrs	r2, r4, #16
    5db0:	fbb6 f0f2 	udiv	r0, r6, r2
    5db4:	0c2f      	lsrs	r7, r5, #16
    5db6:	b2a1      	uxth	r1, r4
    5db8:	fb02 6610 	mls	r6, r2, r0, r6
    5dbc:	fb01 f300 	mul.w	r3, r1, r0
    5dc0:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    5dc4:	42b3      	cmp	r3, r6
    5dc6:	d908      	bls.n	5dda <__udivdi3+0x56>
    5dc8:	1e47      	subs	r7, r0, #1
    5dca:	1936      	adds	r6, r6, r4
    5dcc:	f080 80f8 	bcs.w	5fc0 <__udivdi3+0x23c>
    5dd0:	42b3      	cmp	r3, r6
    5dd2:	f240 80f5 	bls.w	5fc0 <__udivdi3+0x23c>
    5dd6:	3802      	subs	r0, #2
    5dd8:	1936      	adds	r6, r6, r4
    5dda:	1af6      	subs	r6, r6, r3
    5ddc:	fbb6 f3f2 	udiv	r3, r6, r2
    5de0:	fb02 6213 	mls	r2, r2, r3, r6
    5de4:	b2ad      	uxth	r5, r5
    5de6:	fb01 f103 	mul.w	r1, r1, r3
    5dea:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
    5dee:	4291      	cmp	r1, r2
    5df0:	d907      	bls.n	5e02 <__udivdi3+0x7e>
    5df2:	1e5e      	subs	r6, r3, #1
    5df4:	1912      	adds	r2, r2, r4
    5df6:	f080 80e5 	bcs.w	5fc4 <__udivdi3+0x240>
    5dfa:	4291      	cmp	r1, r2
    5dfc:	f240 80e2 	bls.w	5fc4 <__udivdi3+0x240>
    5e00:	3b02      	subs	r3, #2
    5e02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    5e06:	2100      	movs	r1, #0
    5e08:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    5e0c:	4770      	bx	lr
    5e0e:	428b      	cmp	r3, r1
    5e10:	d843      	bhi.n	5e9a <__udivdi3+0x116>
    5e12:	fab3 f483 	clz	r4, r3
    5e16:	2c00      	cmp	r4, #0
    5e18:	d142      	bne.n	5ea0 <__udivdi3+0x11c>
    5e1a:	428b      	cmp	r3, r1
    5e1c:	d302      	bcc.n	5e24 <__udivdi3+0xa0>
    5e1e:	4282      	cmp	r2, r0
    5e20:	f200 80df 	bhi.w	5fe2 <__udivdi3+0x25e>
    5e24:	2100      	movs	r1, #0
    5e26:	2001      	movs	r0, #1
    5e28:	e7ee      	b.n	5e08 <__udivdi3+0x84>
    5e2a:	b912      	cbnz	r2, 5e32 <__udivdi3+0xae>
    5e2c:	2701      	movs	r7, #1
    5e2e:	fbb7 f4f2 	udiv	r4, r7, r2
    5e32:	fab4 f284 	clz	r2, r4
    5e36:	2a00      	cmp	r2, #0
    5e38:	f040 8088 	bne.w	5f4c <__udivdi3+0x1c8>
    5e3c:	1b0a      	subs	r2, r1, r4
    5e3e:	0c23      	lsrs	r3, r4, #16
    5e40:	b2a7      	uxth	r7, r4
    5e42:	2101      	movs	r1, #1
    5e44:	fbb2 f6f3 	udiv	r6, r2, r3
    5e48:	fb03 2216 	mls	r2, r3, r6, r2
    5e4c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
    5e50:	fb07 f006 	mul.w	r0, r7, r6
    5e54:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
    5e58:	4290      	cmp	r0, r2
    5e5a:	d907      	bls.n	5e6c <__udivdi3+0xe8>
    5e5c:	1912      	adds	r2, r2, r4
    5e5e:	f106 3cff 	add.w	ip, r6, #4294967295
    5e62:	d202      	bcs.n	5e6a <__udivdi3+0xe6>
    5e64:	4290      	cmp	r0, r2
    5e66:	f200 80ce 	bhi.w	6006 <__udivdi3+0x282>
    5e6a:	4666      	mov	r6, ip
    5e6c:	1a12      	subs	r2, r2, r0
    5e6e:	fbb2 f0f3 	udiv	r0, r2, r3
    5e72:	fb03 2310 	mls	r3, r3, r0, r2
    5e76:	b2ad      	uxth	r5, r5
    5e78:	fb07 f700 	mul.w	r7, r7, r0
    5e7c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
    5e80:	429f      	cmp	r7, r3
    5e82:	d907      	bls.n	5e94 <__udivdi3+0x110>
    5e84:	1e42      	subs	r2, r0, #1
    5e86:	191b      	adds	r3, r3, r4
    5e88:	f080 809e 	bcs.w	5fc8 <__udivdi3+0x244>
    5e8c:	429f      	cmp	r7, r3
    5e8e:	f240 809b 	bls.w	5fc8 <__udivdi3+0x244>
    5e92:	3802      	subs	r0, #2
    5e94:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    5e98:	e7b6      	b.n	5e08 <__udivdi3+0x84>
    5e9a:	2100      	movs	r1, #0
    5e9c:	4608      	mov	r0, r1
    5e9e:	e7b3      	b.n	5e08 <__udivdi3+0x84>
    5ea0:	f1c4 0620 	rsb	r6, r4, #32
    5ea4:	fa22 f506 	lsr.w	r5, r2, r6
    5ea8:	fa03 f304 	lsl.w	r3, r3, r4
    5eac:	432b      	orrs	r3, r5
    5eae:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    5eb2:	fa21 f506 	lsr.w	r5, r1, r6
    5eb6:	fa01 f104 	lsl.w	r1, r1, r4
    5eba:	fa20 f606 	lsr.w	r6, r0, r6
    5ebe:	fbb5 f7fc 	udiv	r7, r5, ip
    5ec2:	ea46 0a01 	orr.w	sl, r6, r1
    5ec6:	fa1f f883 	uxth.w	r8, r3
    5eca:	fb0c 5517 	mls	r5, ip, r7, r5
    5ece:	ea4f 411a 	mov.w	r1, sl, lsr #16
    5ed2:	fb08 f907 	mul.w	r9, r8, r7
    5ed6:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
    5eda:	45a9      	cmp	r9, r5
    5edc:	fa02 f204 	lsl.w	r2, r2, r4
    5ee0:	d903      	bls.n	5eea <__udivdi3+0x166>
    5ee2:	1e7e      	subs	r6, r7, #1
    5ee4:	18ed      	adds	r5, r5, r3
    5ee6:	d37f      	bcc.n	5fe8 <__udivdi3+0x264>
    5ee8:	4637      	mov	r7, r6
    5eea:	ebc9 0105 	rsb	r1, r9, r5
    5eee:	fbb1 f6fc 	udiv	r6, r1, ip
    5ef2:	fb0c 1516 	mls	r5, ip, r6, r1
    5ef6:	fa1f fa8a 	uxth.w	sl, sl
    5efa:	fb08 f806 	mul.w	r8, r8, r6
    5efe:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
    5f02:	4588      	cmp	r8, r1
    5f04:	d903      	bls.n	5f0e <__udivdi3+0x18a>
    5f06:	1e75      	subs	r5, r6, #1
    5f08:	18c9      	adds	r1, r1, r3
    5f0a:	d373      	bcc.n	5ff4 <__udivdi3+0x270>
    5f0c:	462e      	mov	r6, r5
    5f0e:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
    5f12:	0c37      	lsrs	r7, r6, #16
    5f14:	fa1f fc82 	uxth.w	ip, r2
    5f18:	fb0c f507 	mul.w	r5, ip, r7
    5f1c:	0c12      	lsrs	r2, r2, #16
    5f1e:	b2b3      	uxth	r3, r6
    5f20:	fb0c fc03 	mul.w	ip, ip, r3
    5f24:	fb02 5303 	mla	r3, r2, r3, r5
    5f28:	eb03 431c 	add.w	r3, r3, ip, lsr #16
    5f2c:	fb02 f207 	mul.w	r2, r2, r7
    5f30:	429d      	cmp	r5, r3
    5f32:	bf88      	it	hi
    5f34:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
    5f38:	ebc8 0101 	rsb	r1, r8, r1
    5f3c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    5f40:	4291      	cmp	r1, r2
    5f42:	d34b      	bcc.n	5fdc <__udivdi3+0x258>
    5f44:	d042      	beq.n	5fcc <__udivdi3+0x248>
    5f46:	4630      	mov	r0, r6
    5f48:	2100      	movs	r1, #0
    5f4a:	e75d      	b.n	5e08 <__udivdi3+0x84>
    5f4c:	4094      	lsls	r4, r2
    5f4e:	f1c2 0520 	rsb	r5, r2, #32
    5f52:	fa21 f605 	lsr.w	r6, r1, r5
    5f56:	0c23      	lsrs	r3, r4, #16
    5f58:	fa20 f705 	lsr.w	r7, r0, r5
    5f5c:	fa01 f102 	lsl.w	r1, r1, r2
    5f60:	fbb6 fcf3 	udiv	ip, r6, r3
    5f64:	4339      	orrs	r1, r7
    5f66:	0c0d      	lsrs	r5, r1, #16
    5f68:	b2a7      	uxth	r7, r4
    5f6a:	fb03 661c 	mls	r6, r3, ip, r6
    5f6e:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    5f72:	fb07 f80c 	mul.w	r8, r7, ip
    5f76:	45b0      	cmp	r8, r6
    5f78:	fa00 f502 	lsl.w	r5, r0, r2
    5f7c:	d908      	bls.n	5f90 <__udivdi3+0x20c>
    5f7e:	1936      	adds	r6, r6, r4
    5f80:	f10c 30ff 	add.w	r0, ip, #4294967295
    5f84:	d23d      	bcs.n	6002 <__udivdi3+0x27e>
    5f86:	45b0      	cmp	r8, r6
    5f88:	d93b      	bls.n	6002 <__udivdi3+0x27e>
    5f8a:	f1ac 0c02 	sub.w	ip, ip, #2
    5f8e:	1936      	adds	r6, r6, r4
    5f90:	ebc8 0206 	rsb	r2, r8, r6
    5f94:	fbb2 f0f3 	udiv	r0, r2, r3
    5f98:	fb03 2610 	mls	r6, r3, r0, r2
    5f9c:	b28a      	uxth	r2, r1
    5f9e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
    5fa2:	fb07 f100 	mul.w	r1, r7, r0
    5fa6:	4291      	cmp	r1, r2
    5fa8:	d906      	bls.n	5fb8 <__udivdi3+0x234>
    5faa:	1e46      	subs	r6, r0, #1
    5fac:	1912      	adds	r2, r2, r4
    5fae:	d226      	bcs.n	5ffe <__udivdi3+0x27a>
    5fb0:	4291      	cmp	r1, r2
    5fb2:	d924      	bls.n	5ffe <__udivdi3+0x27a>
    5fb4:	3802      	subs	r0, #2
    5fb6:	1912      	adds	r2, r2, r4
    5fb8:	1a52      	subs	r2, r2, r1
    5fba:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
    5fbe:	e741      	b.n	5e44 <__udivdi3+0xc0>
    5fc0:	4638      	mov	r0, r7
    5fc2:	e70a      	b.n	5dda <__udivdi3+0x56>
    5fc4:	4633      	mov	r3, r6
    5fc6:	e71c      	b.n	5e02 <__udivdi3+0x7e>
    5fc8:	4610      	mov	r0, r2
    5fca:	e763      	b.n	5e94 <__udivdi3+0x110>
    5fcc:	fa1f fc8c 	uxth.w	ip, ip
    5fd0:	fa00 f004 	lsl.w	r0, r0, r4
    5fd4:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
    5fd8:	4298      	cmp	r0, r3
    5fda:	d2b4      	bcs.n	5f46 <__udivdi3+0x1c2>
    5fdc:	1e70      	subs	r0, r6, #1
    5fde:	2100      	movs	r1, #0
    5fe0:	e712      	b.n	5e08 <__udivdi3+0x84>
    5fe2:	4621      	mov	r1, r4
    5fe4:	4620      	mov	r0, r4
    5fe6:	e70f      	b.n	5e08 <__udivdi3+0x84>
    5fe8:	45a9      	cmp	r9, r5
    5fea:	f67f af7d 	bls.w	5ee8 <__udivdi3+0x164>
    5fee:	3f02      	subs	r7, #2
    5ff0:	18ed      	adds	r5, r5, r3
    5ff2:	e77a      	b.n	5eea <__udivdi3+0x166>
    5ff4:	4588      	cmp	r8, r1
    5ff6:	d989      	bls.n	5f0c <__udivdi3+0x188>
    5ff8:	3e02      	subs	r6, #2
    5ffa:	18c9      	adds	r1, r1, r3
    5ffc:	e787      	b.n	5f0e <__udivdi3+0x18a>
    5ffe:	4630      	mov	r0, r6
    6000:	e7da      	b.n	5fb8 <__udivdi3+0x234>
    6002:	4684      	mov	ip, r0
    6004:	e7c4      	b.n	5f90 <__udivdi3+0x20c>
    6006:	3e02      	subs	r6, #2
    6008:	1912      	adds	r2, r2, r4
    600a:	e72f      	b.n	5e6c <__udivdi3+0xe8>

0000600c <default_settings>:
    600c:	043a d040 1412 8032 1617 0418 0219 7b1a     :.@...2........{
    601c:	0603 000c 003e 0070 0071 1172 0073 02a2     ....>.p.q.r.s...
    602c:	0111 207a 1c7b 287c 3c7d 557e 687f 7680     ..z {.|(}<~U.h.v
    603c:	8081 8882 8f83 9684 a385 af86 c487 d788     ................
    604c:	e889 e013 0000 0010 000d 2014 05a5 07ab     ........... ....
    605c:	7524 6325 a526 789f 68a0 03a1 dfa6 dfa7     $u%c&..x.h......
    606c:	f0a8 90a9 94aa e513 610e 4b0f 0216 271e     .........a.K...'
    607c:	0221 9122 0729 0b33 0b35 1d37 7138 2a39     !.".).3.5.7.8q9*
    608c:	783c 404d 204e 0c69 606b 1974 4f8d 008e     <xM@N i.k`t..O..
    609c:	008f 0090 0091 0092 0096 809a 84b0 0cb1     ................
    60ac:	0eb2 82b3 0ab8 1443 f044 3445 5846 2847     ......C.D.E4FXG(
    60bc:	3a48 8859 885a 445b 675c 495d 0e5e 0464     H:Y.Z.[D\g]I^.d.
    60cc:	2065 0566 0494 0895 0a6c 556d 116e 9f6f     e f.....l.mUn.o.
    60dc:	406a 4001 4002 e713 0215 804f 8050 0051     j@.@.@....O.P.Q.
    60ec:	2252 5e53 8054 9e58 0841 003f 0575 e176     R"S^T.X.A.?.u.v.
    60fc:	004c 0177 c23d 094b 60c9 3841 4056 1134     L.w.=.K..`A8V@4.
    610c:	023b 89a4 0096 3097 2098 3099 849a 299b     ;......0. .0...)
    611c:	039c 4c9d 3f9e 0478 0179 f0c8 0f79 00c8     ...L.?x.y...y...
    612c:	1079 7ec8 0a79 80c8 0b79 01c8 0c79 0fc8     y..~y...y...y...
    613c:	0d79 20c8 0979 80c8 0279 c0c8 0379 40c8     y.. y...y...y..@
    614c:	0579 30c8 2679 0309 0055 4056 423b 0000     y..0y&..U.V@;B..
    615c:	6e49 6169 696c 6973 676e 4920 4332 0d0a     Inialising I2C..
    616c:	0000 0000 6e49 6169 696c 6973 676e 4320     ....Inialising C
    617c:	6d61 7265 0a61 000d 6553 2074 6970 206e     amera...Set pin 
    618c:	6163 6c6c 6162 6b63 6620 6961 756c 6572     callback failure
    619c:	0d21 000a 0d0a 430a 6d61 7265 2061 7041     !......Camera Ap
    61ac:	0a70 000d 7453 7261 2074 6353 6e61 2e2e     p...Start Scan..
    61bc:	0a2e 000d 6e49 7469 6169 696c 6573 7320     ....Initialise s
    61cc:	6375 6563 7373 0d0a 0000 0000 6e49 7469     uccess......Init
    61dc:	6169 696c 6573 6620 6961 0a6c 000d 0000     ialise fail.....
    61ec:	6547 2074 6d49 6761 2165 0d0a 0000 0000     Get Image!......
    61fc:	6f44 656e 0a21 000d                         Done!...

00006204 <_global_impure_ptr>:
    6204:	0058 2000 0043 000a                         X.. C...

0000620c <blanks.6678>:
    620c:	2020 2020 2020 2020 2020 2020 2020 2020                     

0000621c <zeroes.6679>:
    621c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
    622c:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
    623c:	3000 3231 3433 3635 3837 6139 6362 6564     .0123456789abcde
    624c:	0066 4f50 4953 0058 002e 0000               f.POSIX.....

00006258 <_init>:
    6258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    625a:	bf00      	nop
    625c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    625e:	bc08      	pop	{r3}
    6260:	469e      	mov	lr, r3
    6262:	4770      	bx	lr

00006264 <__init_array_start>:
    6264:	000044c5 	.word	0x000044c5

00006268 <__frame_dummy_init_array_entry>:
    6268:	000001f9                                ....

0000626c <_fini>:
    626c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    626e:	bf00      	nop
    6270:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6272:	bc08      	pop	{r3}
    6274:	469e      	mov	lr, r3
    6276:	4770      	bx	lr

00006278 <__fini_array_start>:
    6278:	000001d1 	.word	0x000001d1

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <bpm_ps_no_halt_exec>:
 */
RAMFUNC bool bpm_ps_no_halt_exec(Bpm *bpm, uint32_t pmcon)
{
	bool b_psok = false;
	bool b_timeout = false;
	BPM_UNLOCK(PMCON);
2000000c:	f04f 0300 	mov.w	r3, #0
20000010:	f2c4 030f 	movt	r3, #16399	; 0x400f
20000014:	f04f 021c 	mov.w	r2, #28
20000018:	f6ca 2200 	movt	r2, #43520	; 0xaa00
2000001c:	619a      	str	r2, [r3, #24]
	bpm->BPM_PMCON = pmcon;
2000001e:	61c1      	str	r1, [r0, #28]
	do {
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
20000020:	f04f 0100 	mov.w	r1, #0
20000024:	f2c4 010f 	movt	r1, #16399	; 0x400f
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
20000028:	f24e 0210 	movw	r2, #57360	; 0xe010
2000002c:	f2ce 0200 	movt	r2, #57344	; 0xe000
	bool b_psok = false;
	bool b_timeout = false;
	BPM_UNLOCK(PMCON);
	bpm->BPM_PMCON = pmcon;
	do {
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
20000030:	6948      	ldr	r0, [r1, #20]
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
20000032:	6813      	ldr	r3, [r2, #0]
20000034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
	} while (!b_psok && !b_timeout);
20000038:	f010 0001 	ands.w	r0, r0, #1
2000003c:	d101      	bne.n	20000042 <bpm_ps_no_halt_exec+0x36>
2000003e:	2b00      	cmp	r3, #0
20000040:	d0f6      	beq.n	20000030 <bpm_ps_no_halt_exec+0x24>
	return b_psok;
}
20000042:	4770      	bx	lr

20000044 <g_interrupt_enabled>:
20000044:	0001 0000                                   ....

20000048 <flashcalw_wait_until_ready>:
20000048:	33e5 0000 0000 0000                         .3......

20000050 <_impure_ptr>:
20000050:	0058 2000 0000 0000                         X.. ....

20000058 <impure_data>:
20000058:	0000 0000 0344 2000 03ac 2000 0414 2000     ....D.. ... ... 
	...
2000008c:	6208 0000 0000 0000 0000 0000 0000 0000     .b..............
	...
20000100:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000110:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000480 <lc_ctype_charset>:
20000480:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

200004a0 <__mb_cur_max>:
200004a0:	0001 0000                                   ....

200004a4 <lc_message_charset>:
200004a4:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

200004c4 <lconv>:
200004c4:	6254 0000 620b 0000 620b 0000 620b 0000     Tb...b...b...b..
200004d4:	620b 0000 620b 0000 620b 0000 620b 0000     .b...b...b...b..
200004e4:	620b 0000 620b 0000 ffff ffff ffff ffff     .b...b..........
200004f4:	ffff ffff ffff 0000                         ........

200004fc <__malloc_av_>:
	...
20000504:	04fc 2000 04fc 2000 0504 2000 0504 2000     ... ... ... ... 
20000514:	050c 2000 050c 2000 0514 2000 0514 2000     ... ... ... ... 
20000524:	051c 2000 051c 2000 0524 2000 0524 2000     ... ... $.. $.. 
20000534:	052c 2000 052c 2000 0534 2000 0534 2000     ,.. ,.. 4.. 4.. 
20000544:	053c 2000 053c 2000 0544 2000 0544 2000     <.. <.. D.. D.. 
20000554:	054c 2000 054c 2000 0554 2000 0554 2000     L.. L.. T.. T.. 
20000564:	055c 2000 055c 2000 0564 2000 0564 2000     \.. \.. d.. d.. 
20000574:	056c 2000 056c 2000 0574 2000 0574 2000     l.. l.. t.. t.. 
20000584:	057c 2000 057c 2000 0584 2000 0584 2000     |.. |.. ... ... 
20000594:	058c 2000 058c 2000 0594 2000 0594 2000     ... ... ... ... 
200005a4:	059c 2000 059c 2000 05a4 2000 05a4 2000     ... ... ... ... 
200005b4:	05ac 2000 05ac 2000 05b4 2000 05b4 2000     ... ... ... ... 
200005c4:	05bc 2000 05bc 2000 05c4 2000 05c4 2000     ... ... ... ... 
200005d4:	05cc 2000 05cc 2000 05d4 2000 05d4 2000     ... ... ... ... 
200005e4:	05dc 2000 05dc 2000 05e4 2000 05e4 2000     ... ... ... ... 
200005f4:	05ec 2000 05ec 2000 05f4 2000 05f4 2000     ... ... ... ... 
20000604:	05fc 2000 05fc 2000 0604 2000 0604 2000     ... ... ... ... 
20000614:	060c 2000 060c 2000 0614 2000 0614 2000     ... ... ... ... 
20000624:	061c 2000 061c 2000 0624 2000 0624 2000     ... ... $.. $.. 
20000634:	062c 2000 062c 2000 0634 2000 0634 2000     ,.. ,.. 4.. 4.. 
20000644:	063c 2000 063c 2000 0644 2000 0644 2000     <.. <.. D.. D.. 
20000654:	064c 2000 064c 2000 0654 2000 0654 2000     L.. L.. T.. T.. 
20000664:	065c 2000 065c 2000 0664 2000 0664 2000     \.. \.. d.. d.. 
20000674:	066c 2000 066c 2000 0674 2000 0674 2000     l.. l.. t.. t.. 
20000684:	067c 2000 067c 2000 0684 2000 0684 2000     |.. |.. ... ... 
20000694:	068c 2000 068c 2000 0694 2000 0694 2000     ... ... ... ... 
200006a4:	069c 2000 069c 2000 06a4 2000 06a4 2000     ... ... ... ... 
200006b4:	06ac 2000 06ac 2000 06b4 2000 06b4 2000     ... ... ... ... 
200006c4:	06bc 2000 06bc 2000 06c4 2000 06c4 2000     ... ... ... ... 
200006d4:	06cc 2000 06cc 2000 06d4 2000 06d4 2000     ... ... ... ... 
200006e4:	06dc 2000 06dc 2000 06e4 2000 06e4 2000     ... ... ... ... 
200006f4:	06ec 2000 06ec 2000 06f4 2000 06f4 2000     ... ... ... ... 
20000704:	06fc 2000 06fc 2000 0704 2000 0704 2000     ... ... ... ... 
20000714:	070c 2000 070c 2000 0714 2000 0714 2000     ... ... ... ... 
20000724:	071c 2000 071c 2000 0724 2000 0724 2000     ... ... $.. $.. 
20000734:	072c 2000 072c 2000 0734 2000 0734 2000     ,.. ,.. 4.. 4.. 
20000744:	073c 2000 073c 2000 0744 2000 0744 2000     <.. <.. D.. D.. 
20000754:	074c 2000 074c 2000 0754 2000 0754 2000     L.. L.. T.. T.. 
20000764:	075c 2000 075c 2000 0764 2000 0764 2000     \.. \.. d.. d.. 
20000774:	076c 2000 076c 2000 0774 2000 0774 2000     l.. l.. t.. t.. 
20000784:	077c 2000 077c 2000 0784 2000 0784 2000     |.. |.. ... ... 
20000794:	078c 2000 078c 2000 0794 2000 0794 2000     ... ... ... ... 
200007a4:	079c 2000 079c 2000 07a4 2000 07a4 2000     ... ... ... ... 
200007b4:	07ac 2000 07ac 2000 07b4 2000 07b4 2000     ... ... ... ... 
200007c4:	07bc 2000 07bc 2000 07c4 2000 07c4 2000     ... ... ... ... 
200007d4:	07cc 2000 07cc 2000 07d4 2000 07d4 2000     ... ... ... ... 
200007e4:	07dc 2000 07dc 2000 07e4 2000 07e4 2000     ... ... ... ... 
200007f4:	07ec 2000 07ec 2000 07f4 2000 07f4 2000     ... ... ... ... 
20000804:	07fc 2000 07fc 2000 0804 2000 0804 2000     ... ... ... ... 
20000814:	080c 2000 080c 2000 0814 2000 0814 2000     ... ... ... ... 
20000824:	081c 2000 081c 2000 0824 2000 0824 2000     ... ... $.. $.. 
20000834:	082c 2000 082c 2000 0834 2000 0834 2000     ,.. ,.. 4.. 4.. 
20000844:	083c 2000 083c 2000 0844 2000 0844 2000     <.. <.. D.. D.. 
20000854:	084c 2000 084c 2000 0854 2000 0854 2000     L.. L.. T.. T.. 
20000864:	085c 2000 085c 2000 0864 2000 0864 2000     \.. \.. d.. d.. 
20000874:	086c 2000 086c 2000 0874 2000 0874 2000     l.. l.. t.. t.. 
20000884:	087c 2000 087c 2000 0884 2000 0884 2000     |.. |.. ... ... 
20000894:	088c 2000 088c 2000 0894 2000 0894 2000     ... ... ... ... 
200008a4:	089c 2000 089c 2000 08a4 2000 08a4 2000     ... ... ... ... 
200008b4:	08ac 2000 08ac 2000 08b4 2000 08b4 2000     ... ... ... ... 
200008c4:	08bc 2000 08bc 2000 08c4 2000 08c4 2000     ... ... ... ... 
200008d4:	08cc 2000 08cc 2000 08d4 2000 08d4 2000     ... ... ... ... 
200008e4:	08dc 2000 08dc 2000 08e4 2000 08e4 2000     ... ... ... ... 
200008f4:	08ec 2000 08ec 2000 08f4 2000 08f4 2000     ... ... ... ... 

20000904 <__malloc_sbrk_base>:
20000904:	ffff ffff                                   ....

20000908 <__malloc_trim_threshold>:
20000908:	0000 0002                                   ....

2000090c <__wctomb>:
2000090c:	5899 0000                                   .X..
