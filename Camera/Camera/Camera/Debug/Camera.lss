
Camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000782c  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000782c  0000782c  0000f82c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000918  20000000  00007834  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000198  20000918  0000814c  00010918  2**2
                  ALLOC
  4 .stack        00001000  20000ab0  000082e4  00010918  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00010918  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  00010942  2**0
                  CONTENTS, READONLY
  7 .debug_info   000371da  00000000  00000000  000109b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000098a6  00000000  00000000  00047b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001410  00000000  00000000  00051438  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000fe0  00000000  00000000  00052848  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0003201e  00000000  00000000  00053828  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001ca13  00000000  00000000  00085846  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000e6606  00000000  00000000  000a2259  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002c24  00000000  00000000  00188860  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00011739  00000000  00000000  0018b484  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20001ab0 	.word	0x20001ab0
       4:	000038c9 	.word	0x000038c9
       8:	000038c5 	.word	0x000038c5
       c:	000038c5 	.word	0x000038c5
      10:	000038c5 	.word	0x000038c5
      14:	000038c5 	.word	0x000038c5
      18:	000038c5 	.word	0x000038c5
	...
      2c:	000038c5 	.word	0x000038c5
      30:	000038c5 	.word	0x000038c5
      34:	00000000 	.word	0x00000000
      38:	000038c5 	.word	0x000038c5
      3c:	000038c5 	.word	0x000038c5
      40:	000038c5 	.word	0x000038c5
      44:	00000dad 	.word	0x00000dad
      48:	00000dc1 	.word	0x00000dc1
      4c:	00000dd5 	.word	0x00000dd5
      50:	00000de9 	.word	0x00000de9
      54:	00000dfd 	.word	0x00000dfd
      58:	00000e11 	.word	0x00000e11
      5c:	00000e25 	.word	0x00000e25
      60:	00000e39 	.word	0x00000e39
      64:	00000e4d 	.word	0x00000e4d
      68:	00000e61 	.word	0x00000e61
      6c:	00000e75 	.word	0x00000e75
      70:	00000e89 	.word	0x00000e89
      74:	00000e9d 	.word	0x00000e9d
      78:	00000eb1 	.word	0x00000eb1
      7c:	00000ec5 	.word	0x00000ec5
      80:	00000ed9 	.word	0x00000ed9
      84:	000038c5 	.word	0x000038c5
      88:	000038c5 	.word	0x000038c5
      8c:	000038c5 	.word	0x000038c5
      90:	000038c5 	.word	0x000038c5
      94:	000038c5 	.word	0x000038c5
      98:	000038c5 	.word	0x000038c5
      9c:	000038c5 	.word	0x000038c5
      a0:	000038c5 	.word	0x000038c5
      a4:	0000042d 	.word	0x0000042d
      a8:	00000445 	.word	0x00000445
      ac:	0000045d 	.word	0x0000045d
      b0:	00000475 	.word	0x00000475
      b4:	0000048d 	.word	0x0000048d
      b8:	000004a5 	.word	0x000004a5
      bc:	000004bd 	.word	0x000004bd
      c0:	000004d5 	.word	0x000004d5
      c4:	000004ed 	.word	0x000004ed
      c8:	00000505 	.word	0x00000505
      cc:	0000051d 	.word	0x0000051d
      d0:	00000535 	.word	0x00000535
      d4:	000038c5 	.word	0x000038c5
      d8:	000038c5 	.word	0x000038c5
      dc:	000038c5 	.word	0x000038c5
      e0:	000038c5 	.word	0x000038c5
      e4:	000038c5 	.word	0x000038c5
      e8:	000038c5 	.word	0x000038c5
      ec:	000038c5 	.word	0x000038c5
      f0:	000038c5 	.word	0x000038c5
      f4:	000038c5 	.word	0x000038c5
      f8:	000038c5 	.word	0x000038c5
      fc:	000038c5 	.word	0x000038c5
     100:	000038c5 	.word	0x000038c5
     104:	000038c5 	.word	0x000038c5
     108:	000038c5 	.word	0x000038c5
     10c:	000038c5 	.word	0x000038c5
     110:	000038c5 	.word	0x000038c5
     114:	000038c5 	.word	0x000038c5
     118:	000038c5 	.word	0x000038c5
     11c:	000038c5 	.word	0x000038c5
     120:	000038c5 	.word	0x000038c5
     124:	000038c5 	.word	0x000038c5
     128:	000038c5 	.word	0x000038c5
     12c:	000038c5 	.word	0x000038c5
     130:	000038c5 	.word	0x000038c5
     134:	00001681 	.word	0x00001681
     138:	000038c5 	.word	0x000038c5
     13c:	00001699 	.word	0x00001699
     140:	000038c5 	.word	0x000038c5
     144:	000038c5 	.word	0x000038c5
     148:	000038c5 	.word	0x000038c5
     14c:	000038c5 	.word	0x000038c5
     150:	000038c5 	.word	0x000038c5
     154:	000038c5 	.word	0x000038c5
     158:	000038c5 	.word	0x000038c5
     15c:	000038c5 	.word	0x000038c5
     160:	000038c5 	.word	0x000038c5
     164:	000038c5 	.word	0x000038c5
     168:	000038c5 	.word	0x000038c5
     16c:	000038c5 	.word	0x000038c5
     170:	000038c5 	.word	0x000038c5
     174:	000016b1 	.word	0x000016b1
     178:	000016c9 	.word	0x000016c9
     17c:	000038c5 	.word	0x000038c5

00000180 <deregister_tm_clones>:
     180:	b508      	push	{r3, lr}
     182:	4805      	ldr	r0, [pc, #20]	; (198 <deregister_tm_clones+0x18>)
     184:	4b05      	ldr	r3, [pc, #20]	; (19c <deregister_tm_clones+0x1c>)
     186:	1a19      	subs	r1, r3, r0
     188:	2906      	cmp	r1, #6
     18a:	d800      	bhi.n	18e <deregister_tm_clones+0xe>
     18c:	bd08      	pop	{r3, pc}
     18e:	4a04      	ldr	r2, [pc, #16]	; (1a0 <deregister_tm_clones+0x20>)
     190:	2a00      	cmp	r2, #0
     192:	d0fb      	beq.n	18c <deregister_tm_clones+0xc>
     194:	4790      	blx	r2
     196:	e7f9      	b.n	18c <deregister_tm_clones+0xc>
     198:	00007834 	.word	0x00007834
     19c:	00007837 	.word	0x00007837
     1a0:	00000000 	.word	0x00000000

000001a4 <register_tm_clones>:
     1a4:	b508      	push	{r3, lr}
     1a6:	4807      	ldr	r0, [pc, #28]	; (1c4 <register_tm_clones+0x20>)
     1a8:	4b07      	ldr	r3, [pc, #28]	; (1c8 <register_tm_clones+0x24>)
     1aa:	1a19      	subs	r1, r3, r0
     1ac:	108a      	asrs	r2, r1, #2
     1ae:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
     1b2:	1059      	asrs	r1, r3, #1
     1b4:	d100      	bne.n	1b8 <register_tm_clones+0x14>
     1b6:	bd08      	pop	{r3, pc}
     1b8:	4a04      	ldr	r2, [pc, #16]	; (1cc <register_tm_clones+0x28>)
     1ba:	2a00      	cmp	r2, #0
     1bc:	d0fb      	beq.n	1b6 <register_tm_clones+0x12>
     1be:	4790      	blx	r2
     1c0:	e7f9      	b.n	1b6 <register_tm_clones+0x12>
     1c2:	bf00      	nop
     1c4:	00007834 	.word	0x00007834
     1c8:	00007834 	.word	0x00007834
     1cc:	00000000 	.word	0x00000000

000001d0 <__do_global_dtors_aux>:
     1d0:	b510      	push	{r4, lr}
     1d2:	4c06      	ldr	r4, [pc, #24]	; (1ec <__do_global_dtors_aux+0x1c>)
     1d4:	7823      	ldrb	r3, [r4, #0]
     1d6:	b943      	cbnz	r3, 1ea <__do_global_dtors_aux+0x1a>
     1d8:	f7ff ffd2 	bl	180 <deregister_tm_clones>
     1dc:	4804      	ldr	r0, [pc, #16]	; (1f0 <__do_global_dtors_aux+0x20>)
     1de:	b110      	cbz	r0, 1e6 <__do_global_dtors_aux+0x16>
     1e0:	4804      	ldr	r0, [pc, #16]	; (1f4 <__do_global_dtors_aux+0x24>)
     1e2:	f3af 8000 	nop.w
     1e6:	2101      	movs	r1, #1
     1e8:	7021      	strb	r1, [r4, #0]
     1ea:	bd10      	pop	{r4, pc}
     1ec:	20000918 	.word	0x20000918
     1f0:	00000000 	.word	0x00000000
     1f4:	00007834 	.word	0x00007834

000001f8 <frame_dummy>:
     1f8:	b508      	push	{r3, lr}
     1fa:	4b08      	ldr	r3, [pc, #32]	; (21c <frame_dummy+0x24>)
     1fc:	b11b      	cbz	r3, 206 <frame_dummy+0xe>
     1fe:	4808      	ldr	r0, [pc, #32]	; (220 <frame_dummy+0x28>)
     200:	4908      	ldr	r1, [pc, #32]	; (224 <frame_dummy+0x2c>)
     202:	f3af 8000 	nop.w
     206:	4808      	ldr	r0, [pc, #32]	; (228 <frame_dummy+0x30>)
     208:	6801      	ldr	r1, [r0, #0]
     20a:	b111      	cbz	r1, 212 <frame_dummy+0x1a>
     20c:	4a07      	ldr	r2, [pc, #28]	; (22c <frame_dummy+0x34>)
     20e:	b102      	cbz	r2, 212 <frame_dummy+0x1a>
     210:	4790      	blx	r2
     212:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     216:	f7ff bfc5 	b.w	1a4 <register_tm_clones>
     21a:	bf00      	nop
     21c:	00000000 	.word	0x00000000
     220:	00007834 	.word	0x00007834
     224:	2000091c 	.word	0x2000091c
     228:	00007834 	.word	0x00007834
     22c:	00000000 	.word	0x00000000

00000230 <events_get_config_defaults>:
 *
 *  \param config    Configuration structure to initialize to default values.
 */
void events_get_config_defaults(struct events_conf *const config)
{
	config->igf_divider = EVENT_IGF_DIVIDER_1024;
     230:	f04f 030a 	mov.w	r3, #10
     234:	7003      	strb	r3, [r0, #0]
     236:	4770      	bx	lr

00000238 <events_init>:
 * \brief Initialize the events module.
 *
 *  \param config    Configuration structure to initialize to default values.
 */
void events_init(struct events_conf *const config)
{
     238:	b538      	push	{r3, r4, r5, lr}
     23a:	4605      	mov	r5, r0
	/* Enable clock for PEVC module */
	sysclk_enable_peripheral_clock(PEVC);
     23c:	f44f 44c0 	mov.w	r4, #24576	; 0x6000
     240:	f2c4 040a 	movt	r4, #16394	; 0x400a
     244:	4620      	mov	r0, r4
     246:	f242 433d 	movw	r3, #9277	; 0x243d
     24a:	f2c0 0300 	movt	r3, #0
     24e:	4798      	blx	r3
 * \note As stated in the datasheet, there is one divider value for
 * all EVS instance.
 */
static inline void events_set_igf_divider(enum events_igf_divider divider)
{
	PEVC->PEVC_IGFDR = PEVC_IGFDR_IGFDR(divider);
     250:	7828      	ldrb	r0, [r5, #0]
     252:	f000 010f 	and.w	r1, r0, #15
     256:	f8c4 1300 	str.w	r1, [r4, #768]	; 0x300
     25a:	bd38      	pop	{r3, r4, r5, pc}

0000025c <events_ch_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->channel_id = EVENT_CHANNEL_N;
     25c:	f04f 0313 	mov.w	r3, #19
     260:	6003      	str	r3, [r0, #0]
	config->generator_id = EVENT_GENERATOR_N;
     262:	f04f 011f 	mov.w	r1, #31
     266:	6041      	str	r1, [r0, #4]
	config->shaper_enable = false;
     268:	f04f 0200 	mov.w	r2, #0
     26c:	7202      	strb	r2, [r0, #8]
	config->igf_edge = EVENT_IGF_EDGE_NONE;
     26e:	7242      	strb	r2, [r0, #9]
     270:	4770      	bx	lr
     272:	bf00      	nop

00000274 <events_ch_configure>:
 *
 * \param channel_id  Channel ID.
 */
static inline void events_ch_disable(uint32_t channel_id)
{
	PEVC->PEVC_CHDR = PEVC_CHDR_CHD(PEVC_CHDR_CHD_1 << channel_id);
     274:	6803      	ldr	r3, [r0, #0]
     276:	f04f 0201 	mov.w	r2, #1
     27a:	fa02 f203 	lsl.w	r2, r2, r3
     27e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
     282:	f2c4 030a 	movt	r3, #16394	; 0x400a
     286:	609a      	str	r2, [r3, #8]

	/* Disable the channel first */
	events_ch_disable(config->channel_id);

	/* Configure the event channel */
	PEVC->PEVC_CHMX[config->channel_id].PEVC_CHMX =
     288:	6802      	ldr	r2, [r0, #0]
		PEVC_CHMX_EVMX(config->generator_id);
     28a:	6841      	ldr	r1, [r0, #4]
     28c:	f001 013f 	and.w	r1, r1, #63	; 0x3f

	/* Disable the channel first */
	events_ch_disable(config->channel_id);

	/* Configure the event channel */
	PEVC->PEVC_CHMX[config->channel_id].PEVC_CHMX =
     290:	f102 0240 	add.w	r2, r2, #64	; 0x40
     294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		PEVC_CHMX_EVMX(config->generator_id);
	if (config->shaper_enable) {
		evs_val |= PEVC_EVS_EN;
     298:	7a03      	ldrb	r3, [r0, #8]
	} else {
		evs_val &= (~PEVC_EVS_EN);
	}
	switch (config->igf_edge) {
     29a:	7a42      	ldrb	r2, [r0, #9]
     29c:	2a02      	cmp	r2, #2
     29e:	d006      	beq.n	2ae <events_ch_configure+0x3a>
     2a0:	2a03      	cmp	r2, #3
     2a2:	d007      	beq.n	2b4 <events_ch_configure+0x40>
     2a4:	2a01      	cmp	r2, #1
     2a6:	d107      	bne.n	2b8 <events_ch_configure+0x44>
	case EVENT_IGF_EDGE_RISING:
		evs_val |= PEVC_EVS_IGFR_1;
     2a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
		break;
     2ac:	e004      	b.n	2b8 <events_ch_configure+0x44>
	case EVENT_IGF_EDGE_FALLING:
		evs_val |= PEVC_EVS_IGFF_1;
     2ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		break;
     2b2:	e001      	b.n	2b8 <events_ch_configure+0x44>
	case EVENT_IGF_EDGE_BOTH:
		evs_val |= (PEVC_EVS_IGFR_1 | PEVC_EVS_IGFF_1);
     2b4:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
		break;
	case EVENT_IGF_EDGE_NONE:
	default:
		break;
	}
	PEVC->PEVC_EVS[config->generator_id].PEVC_EVS = evs_val;
     2b8:	6840      	ldr	r0, [r0, #4]
     2ba:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
     2be:	f2c4 010a 	movt	r1, #16394	; 0x400a
     2c2:	f100 0080 	add.w	r0, r0, #128	; 0x80
     2c6:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
     2ca:	4770      	bx	lr

000002cc <gpio_common_handler>:

/**
 * Common GPIO handler.
 */
static void gpio_common_handler(uint32_t port_id, uint32_t port_mask)
{
     2cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     2d0:	4606      	mov	r6, r0
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[port_id]);
     2d2:	ea4f 2340 	mov.w	r3, r0, lsl #9
     2d6:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
     2da:	f500 2261 	add.w	r2, r0, #921600	; 0xe1000
	uint32_t i;
	uint32_t int_flags;
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;
     2de:	f8d2 90d0 	ldr.w	r9, [r2, #208]	; 0xd0
	gpio_port->GPIO_IFRC = (int_flags & port_mask);
     2e2:	ea01 0109 	and.w	r1, r1, r9
     2e6:	f8c2 10d8 	str.w	r1, [r2, #216]	; 0xd8

	for (i = 0; i < gpio_nb_sources; i++) {
     2ea:	f640 1334 	movw	r3, #2356	; 0x934
     2ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
     2f2:	6818      	ldr	r0, [r3, #0]
     2f4:	b318      	cbz	r0, 33e <gpio_common_handler+0x72>
     2f6:	f04f 0400 	mov.w	r4, #0
     2fa:	4625      	mov	r5, r4
		pin = gpio_int_sources[i].pin;
     2fc:	f640 1738 	movw	r7, #2360	; 0x938
     300:	f2c2 0700 	movt	r7, #8192	; 0x2000
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
     304:	f04f 0a01 	mov.w	sl, #1
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;
	gpio_port->GPIO_IFRC = (int_flags & port_mask);

	for (i = 0; i < gpio_nb_sources; i++) {
     308:	f640 1834 	movw	r8, #2356	; 0x934
     30c:	f2c2 0800 	movt	r8, #8192	; 0x2000
		pin = gpio_int_sources[i].pin;
     310:	59e2      	ldr	r2, [r4, r7]
		if ((ioport_pin_to_port_id(pin) == port_id) &&
     312:	ebb6 1f52 	cmp.w	r6, r2, lsr #5
     316:	d10a      	bne.n	32e <gpio_common_handler+0x62>
     318:	f002 011f 	and.w	r1, r2, #31
     31c:	fa0a f301 	lsl.w	r3, sl, r1
     320:	ea13 0f09 	tst.w	r3, r9
     324:	d003      	beq.n	32e <gpio_common_handler+0x62>
}

/**
 * Common GPIO handler.
 */
static void gpio_common_handler(uint32_t port_id, uint32_t port_mask)
     326:	1938      	adds	r0, r7, r4

	for (i = 0; i < gpio_nb_sources; i++) {
		pin = gpio_int_sources[i].pin;
		if ((ioport_pin_to_port_id(pin) == port_id) &&
				(ioport_pin_to_mask(pin) & int_flags)) {
			if (gpio_int_sources[i].callback != NULL) {
     328:	6842      	ldr	r2, [r0, #4]
     32a:	b102      	cbz	r2, 32e <gpio_common_handler+0x62>
				gpio_int_sources[i].callback();
     32c:	4790      	blx	r2
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;
	gpio_port->GPIO_IFRC = (int_flags & port_mask);

	for (i = 0; i < gpio_nb_sources; i++) {
     32e:	f105 0501 	add.w	r5, r5, #1
     332:	f104 0408 	add.w	r4, r4, #8
     336:	f8d8 1000 	ldr.w	r1, [r8]
     33a:	42a9      	cmp	r1, r5
     33c:	d8e8      	bhi.n	310 <gpio_common_handler+0x44>
     33e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     342:	bf00      	nop

00000344 <gpio_set_pin_callback>:
 * \retval \c false Wrong parameters or exceeding maximum number of interrupt
 *                  sources has been defined.
 */
bool gpio_set_pin_callback(ioport_pin_t pin, gpio_pin_callback_t callback,
		uint8_t irq_level)
{
     344:	b470      	push	{r4, r5, r6}
	int8_t i;
	int8_t irq_line;

	if (gpio_nb_sources >= GPIO_MAX_INTERRUPT_SOURCES) {
     346:	f640 1334 	movw	r3, #2356	; 0x934
     34a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     34e:	681b      	ldr	r3, [r3, #0]
     350:	2b05      	cmp	r3, #5
     352:	d866      	bhi.n	422 <gpio_set_pin_callback+0xde>
     354:	f000 041f 	and.w	r4, r0, #31
     358:	f04f 0501 	mov.w	r5, #1
     35c:	fa05 f604 	lsl.w	r6, r5, r4
	 *
	 * \note Grouping interrupt generators into groups of eight, four
	 * different interrupt handlers can be installed for each GPIO port.
	 */
	for (i = 0; i < 4; i++) {
		if (ioport_pin_to_mask(pin) & (GPIO_INT_GROUP_MASK << (i * 8))) {
     360:	f016 0fff 	tst.w	r6, #255	; 0xff
     364:	d112      	bne.n	38c <gpio_set_pin_callback+0x48>
     366:	f416 4f7f 	tst.w	r6, #65280	; 0xff00
     36a:	d109      	bne.n	380 <gpio_set_pin_callback+0x3c>
     36c:	f416 0f7f 	tst.w	r6, #16711680	; 0xff0000
     370:	d109      	bne.n	386 <gpio_set_pin_callback+0x42>
     372:	f006 447f 	and.w	r4, r6, #4278190080	; 0xff000000
     376:	2c00      	cmp	r4, #0
     378:	bf0c      	ite	eq
     37a:	2604      	moveq	r6, #4
     37c:	2603      	movne	r6, #3
     37e:	e007      	b.n	390 <gpio_set_pin_callback+0x4c>
	 * Get IRQ line for the given pin.
	 *
	 * \note Grouping interrupt generators into groups of eight, four
	 * different interrupt handlers can be installed for each GPIO port.
	 */
	for (i = 0; i < 4; i++) {
     380:	f04f 0601 	mov.w	r6, #1
     384:	e004      	b.n	390 <gpio_set_pin_callback+0x4c>
     386:	f04f 0602 	mov.w	r6, #2
     38a:	e001      	b.n	390 <gpio_set_pin_callback+0x4c>
		if (ioport_pin_to_mask(pin) & (GPIO_INT_GROUP_MASK << (i * 8))) {
     38c:	f04f 0600 	mov.w	r6, #0
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
     390:	ea4f 1550 	mov.w	r5, r0, lsr #5
			break;
		}
	}
	irq_line = GPIO_0_IRQn + ioport_pin_to_port_id(pin) * 4 + i;
     394:	eb06 0485 	add.w	r4, r6, r5, lsl #2
     398:	f104 0419 	add.w	r4, r4, #25
     39c:	b2e4      	uxtb	r4, r4

	gpio_int_sources[gpio_nb_sources].pin = pin;
     39e:	f640 1638 	movw	r6, #2360	; 0x938
     3a2:	f2c2 0600 	movt	r6, #8192	; 0x2000
     3a6:	f846 0033 	str.w	r0, [r6, r3, lsl #3]
	gpio_int_sources[gpio_nb_sources].callback = callback;
     3aa:	eb06 00c3 	add.w	r0, r6, r3, lsl #3
     3ae:	6041      	str	r1, [r0, #4]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     3b0:	b263      	sxtb	r3, r4
     3b2:	ea4f 1153 	mov.w	r1, r3, lsr #5
     3b6:	f004 061f 	and.w	r6, r4, #31
     3ba:	f04f 0501 	mov.w	r5, #1
     3be:	fa05 f006 	lsl.w	r0, r5, r6
     3c2:	f44f 4561 	mov.w	r5, #57600	; 0xe100
     3c6:	f2ce 0500 	movt	r5, #57344	; 0xe000
     3ca:	f101 0660 	add.w	r6, r1, #96	; 0x60
     3ce:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
     3d2:	2b00      	cmp	r3, #0
     3d4:	da0b      	bge.n	3ee <gpio_set_pin_callback+0xaa>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
     3d6:	f004 040f 	and.w	r4, r4, #15
     3da:	ea4f 1202 	mov.w	r2, r2, lsl #4
     3de:	b2d2      	uxtb	r2, r2
     3e0:	f64e 43fc 	movw	r3, #60668	; 0xecfc
     3e4:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3e8:	18e3      	adds	r3, r4, r3
     3ea:	761a      	strb	r2, [r3, #24]
     3ec:	e008      	b.n	400 <gpio_set_pin_callback+0xbc>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
     3ee:	ea4f 1202 	mov.w	r2, r2, lsl #4
     3f2:	b2d2      	uxtb	r2, r2
     3f4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
     3f8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
     3fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
     400:	f44f 4261 	mov.w	r2, #57600	; 0xe100
     404:	f2ce 0200 	movt	r2, #57344	; 0xe000
     408:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	NVIC_ClearPendingIRQ((IRQn_Type)irq_line);
	NVIC_SetPriority((IRQn_Type)irq_line, irq_level);
	NVIC_EnableIRQ((IRQn_Type)irq_line);

	gpio_nb_sources++;
     40c:	f640 1134 	movw	r1, #2356	; 0x934
     410:	f2c2 0100 	movt	r1, #8192	; 0x2000
     414:	6808      	ldr	r0, [r1, #0]
     416:	f100 0001 	add.w	r0, r0, #1
     41a:	6008      	str	r0, [r1, #0]

	return true;
     41c:	f04f 0001 	mov.w	r0, #1
     420:	e001      	b.n	426 <gpio_set_pin_callback+0xe2>
{
	int8_t i;
	int8_t irq_line;

	if (gpio_nb_sources >= GPIO_MAX_INTERRUPT_SOURCES) {
		return false;
     422:	f04f 0000 	mov.w	r0, #0
	NVIC_EnableIRQ((IRQn_Type)irq_line);

	gpio_nb_sources++;

	return true;
}
     426:	bc70      	pop	{r4, r5, r6}
     428:	4770      	bx	lr
     42a:	bf00      	nop

0000042c <GPIO_0_Handler>:

/**
 * GPIO handler 0 (PA 0..7)
 */
void GPIO_0_Handler(void)
{
     42c:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, GPIO_INT_GROUP_MASK);
     42e:	f04f 0000 	mov.w	r0, #0
     432:	f04f 01ff 	mov.w	r1, #255	; 0xff
     436:	f240 23cd 	movw	r3, #717	; 0x2cd
     43a:	f2c0 0300 	movt	r3, #0
     43e:	4798      	blx	r3
     440:	bd08      	pop	{r3, pc}
     442:	bf00      	nop

00000444 <GPIO_1_Handler>:

/**
 * GPIO handler 1 (PA 8..15)
 */
void GPIO_1_Handler(void)
{
     444:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 8));
     446:	f04f 0000 	mov.w	r0, #0
     44a:	f44f 417f 	mov.w	r1, #65280	; 0xff00
     44e:	f240 23cd 	movw	r3, #717	; 0x2cd
     452:	f2c0 0300 	movt	r3, #0
     456:	4798      	blx	r3
     458:	bd08      	pop	{r3, pc}
     45a:	bf00      	nop

0000045c <GPIO_2_Handler>:

/**
 * GPIO handler 2 (PA 16..23)
 */
void GPIO_2_Handler(void)
{
     45c:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 16));
     45e:	f04f 0000 	mov.w	r0, #0
     462:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
     466:	f240 23cd 	movw	r3, #717	; 0x2cd
     46a:	f2c0 0300 	movt	r3, #0
     46e:	4798      	blx	r3
     470:	bd08      	pop	{r3, pc}
     472:	bf00      	nop

00000474 <GPIO_3_Handler>:

/**
 * GPIO handler 3 (PA 24..31)
 */
void GPIO_3_Handler(void)
{
     474:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 23));
     476:	f04f 0000 	mov.w	r0, #0
     47a:	f04f 41ff 	mov.w	r1, #2139095040	; 0x7f800000
     47e:	f240 23cd 	movw	r3, #717	; 0x2cd
     482:	f2c0 0300 	movt	r3, #0
     486:	4798      	blx	r3
     488:	bd08      	pop	{r3, pc}
     48a:	bf00      	nop

0000048c <GPIO_4_Handler>:

/**
 * GPIO handler 4 (PB 0..7)
 */
void GPIO_4_Handler(void)
{
     48c:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, GPIO_INT_GROUP_MASK);
     48e:	f04f 0001 	mov.w	r0, #1
     492:	f04f 01ff 	mov.w	r1, #255	; 0xff
     496:	f240 23cd 	movw	r3, #717	; 0x2cd
     49a:	f2c0 0300 	movt	r3, #0
     49e:	4798      	blx	r3
     4a0:	bd08      	pop	{r3, pc}
     4a2:	bf00      	nop

000004a4 <GPIO_5_Handler>:

/**
 * GPIO handler 5 (PB 8..15)
 */
void GPIO_5_Handler(void)
{
     4a4:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 8));
     4a6:	f04f 0001 	mov.w	r0, #1
     4aa:	f44f 417f 	mov.w	r1, #65280	; 0xff00
     4ae:	f240 23cd 	movw	r3, #717	; 0x2cd
     4b2:	f2c0 0300 	movt	r3, #0
     4b6:	4798      	blx	r3
     4b8:	bd08      	pop	{r3, pc}
     4ba:	bf00      	nop

000004bc <GPIO_6_Handler>:

/**
 * GPIO handler 6 (PB 16..23)
 */
void GPIO_6_Handler(void)
{
     4bc:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 16));
     4be:	f04f 0001 	mov.w	r0, #1
     4c2:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
     4c6:	f240 23cd 	movw	r3, #717	; 0x2cd
     4ca:	f2c0 0300 	movt	r3, #0
     4ce:	4798      	blx	r3
     4d0:	bd08      	pop	{r3, pc}
     4d2:	bf00      	nop

000004d4 <GPIO_7_Handler>:

/**
 * GPIO handler 7 (PB 24..31)
 */
void GPIO_7_Handler(void)
{
     4d4:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 24));
     4d6:	f04f 0001 	mov.w	r0, #1
     4da:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
     4de:	f240 23cd 	movw	r3, #717	; 0x2cd
     4e2:	f2c0 0300 	movt	r3, #0
     4e6:	4798      	blx	r3
     4e8:	bd08      	pop	{r3, pc}
     4ea:	bf00      	nop

000004ec <GPIO_8_Handler>:

/**
 * GPIO handler 8 (PC 0..7)
 */
void GPIO_8_Handler(void)
{
     4ec:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, GPIO_INT_GROUP_MASK);
     4ee:	f04f 0002 	mov.w	r0, #2
     4f2:	f04f 01ff 	mov.w	r1, #255	; 0xff
     4f6:	f240 23cd 	movw	r3, #717	; 0x2cd
     4fa:	f2c0 0300 	movt	r3, #0
     4fe:	4798      	blx	r3
     500:	bd08      	pop	{r3, pc}
     502:	bf00      	nop

00000504 <GPIO_9_Handler>:

/**
 * GPIO handler 9 (PC 8..15)
 */
void GPIO_9_Handler(void)
{
     504:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 8));
     506:	f04f 0002 	mov.w	r0, #2
     50a:	f44f 417f 	mov.w	r1, #65280	; 0xff00
     50e:	f240 23cd 	movw	r3, #717	; 0x2cd
     512:	f2c0 0300 	movt	r3, #0
     516:	4798      	blx	r3
     518:	bd08      	pop	{r3, pc}
     51a:	bf00      	nop

0000051c <GPIO_10_Handler>:

/**
 * GPIO handler 10 (PC 16..23)
 */
void GPIO_10_Handler(void)
{
     51c:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 16));
     51e:	f04f 0002 	mov.w	r0, #2
     522:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
     526:	f240 23cd 	movw	r3, #717	; 0x2cd
     52a:	f2c0 0300 	movt	r3, #0
     52e:	4798      	blx	r3
     530:	bd08      	pop	{r3, pc}
     532:	bf00      	nop

00000534 <GPIO_11_Handler>:

/**
 * GPIO handler 11 (PC 24..31)
 */
void GPIO_11_Handler(void)
{
     534:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 24));
     536:	f04f 0002 	mov.w	r0, #2
     53a:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
     53e:	f240 23cd 	movw	r3, #717	; 0x2cd
     542:	f2c0 0300 	movt	r3, #0
     546:	4798      	blx	r3
     548:	bd08      	pop	{r3, pc}
     54a:	bf00      	nop

0000054c <tc_init>:
 * This is because the setting forces TIOB to be an input even if the
 * external event trigger has not been enabled with \c TC_CMR_ENETRG, and
 * thus prevents normal operation of TIOB.
 */
void tc_init(Tc *p_tc, uint32_t ul_channel, uint32_t ul_mode)
{
     54c:	b410      	push	{r4}
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
     54e:	ea4f 1181 	mov.w	r1, r1, lsl #6
     552:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
     554:	f04f 0402 	mov.w	r4, #2
     558:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
     55a:	f04f 30ff 	mov.w	r0, #4294967295
     55e:	6298      	str	r0, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
     560:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
     562:	605a      	str	r2, [r3, #4]
}
     564:	bc10      	pop	{r4}
     566:	4770      	bx	lr

00000568 <tc_start>:
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
     568:	ea4f 1181 	mov.w	r1, r1, lsl #6
     56c:	f04f 0305 	mov.w	r3, #5
     570:	5043      	str	r3, [r0, r1]
     572:	4770      	bx	lr

00000574 <tc_write_ra>:
		uint32_t ul_value)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
     574:	eb00 1181 	add.w	r1, r0, r1, lsl #6
     578:	614a      	str	r2, [r1, #20]
     57a:	4770      	bx	lr

0000057c <tc_write_rc>:
		uint32_t ul_value)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
     57c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
     580:	61ca      	str	r2, [r1, #28]
     582:	4770      	bx	lr

00000584 <VSYNC_Callback>:
	return arch_ioport_port_to_base(port)->GPIO_PVR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	arch_ioport_pin_to_base(pin)->GPIO_OVRT = arch_ioport_pin_to_mask(pin);
     584:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
     588:	f2c4 030e 	movt	r3, #16398	; 0x400e
     58c:	f04f 0280 	mov.w	r2, #128	; 0x80
     590:	65da      	str	r2, [r3, #92]	; 0x5c
}

static void VSYNC_Callback(void)
{
	LED_Toggle(LED0);
	if (VSYNC_Count==1)//start a frame read
     592:	f640 202c 	movw	r0, #2604	; 0xa2c
     596:	f2c2 0000 	movt	r0, #8192	; 0x2000
     59a:	6801      	ldr	r1, [r0, #0]
     59c:	2901      	cmp	r1, #1
     59e:	d10f      	bne.n	5c0 <VSYNC_Callback+0x3c>

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     5a0:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
     5a4:	f2c4 000e 	movt	r0, #16398	; 0x400e
     5a8:	f04f 0104 	mov.w	r1, #4
     5ac:	6541      	str	r1, [r0, #84]	; 0x54
	{
		/*xprintf(PSTR("WEN Set\n"));*/
		FIFO_WEN_SET;
		VSYNC_Count++;
     5ae:	f640 232c 	movw	r3, #2604	; 0xa2c
     5b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     5b6:	681a      	ldr	r2, [r3, #0]
     5b8:	f102 0201 	add.w	r2, r2, #1
     5bc:	601a      	str	r2, [r3, #0]
     5be:	4770      	bx	lr
	}
	else if (VSYNC_Count==2)//end a frame read
     5c0:	f640 232c 	movw	r3, #2604	; 0xa2c
     5c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     5c8:	681a      	ldr	r2, [r3, #0]
     5ca:	2a02      	cmp	r2, #2
     5cc:	d107      	bne.n	5de <VSYNC_Callback+0x5a>
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     5ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
     5d2:	f2c4 030e 	movt	r3, #16398	; 0x400e
     5d6:	f04f 0204 	mov.w	r2, #4
     5da:	659a      	str	r2, [r3, #88]	; 0x58
     5dc:	4770      	bx	lr
		FIFO_WEN_CLR;
		/*xprintf(PSTR("WEN Clear\n"));*/
	}
	else
	{
		VSYNC_Count = 0;//wait for a read to be started
     5de:	f640 202c 	movw	r0, #2604	; 0xa2c
     5e2:	f2c2 0000 	movt	r0, #8192	; 0x2000
     5e6:	f04f 0100 	mov.w	r1, #0
     5ea:	6001      	str	r1, [r0, #0]
     5ec:	4770      	bx	lr
     5ee:	bf00      	nop

000005f0 <write_twi>:
 * \brief Write the data pattern to the target.
 *
 * \return STATUS_OK   if all bytes were written, error code otherwise.
 */
static status_code_t write_twi(unsigned char regID, unsigned char regDat)
{
     5f0:	b508      	push	{r3, lr}
	/* TWI chip address to communicate with */
	packet_tx.chip = OV7670_ADDR;
     5f2:	f640 2334 	movw	r3, #2612	; 0xa34
     5f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
     5fa:	f04f 0221 	mov.w	r2, #33	; 0x21
     5fe:	601a      	str	r2, [r3, #0]
	/* TWI address/commands to issue to the other chip (node) */
	packet_tx.addr[0] = regID; //(VIRTUALMEM_ADDR >> 16) & 0xFF;
     600:	7118      	strb	r0, [r3, #4]
	packet_tx.addr[1] = (VIRTUALMEM_ADDR >> 8) & 0xFF;
     602:	f04f 0000 	mov.w	r0, #0
     606:	7158      	strb	r0, [r3, #5]
	/* Length of the TWI data address segment (1-3 bytes) */
	packet_tx.addr_length = 1;
     608:	f04f 0201 	mov.w	r2, #1
     60c:	71da      	strb	r2, [r3, #7]
	/* Where to find the data to be written */
	write_data[0] = regDat;
     60e:	f640 1068 	movw	r0, #2408	; 0x968
     612:	f2c2 0000 	movt	r0, #8192	; 0x2000
     616:	7001      	strb	r1, [r0, #0]
	packet_tx.buffer = (void *) write_data;
     618:	6098      	str	r0, [r3, #8]
	/* How many bytes do we want to write */
	packet_tx.length = PATTERN_TEST_LENGTH;
     61a:	60da      	str	r2, [r3, #12]
	//printf("Writing data to TARGET\r\n");
	/* Write data to TARGET */
	return twi_master_write(OV7670_TWI, &packet_tx);
     61c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     620:	f2c4 0001 	movt	r0, #16385	; 0x4001
     624:	4619      	mov	r1, r3
     626:	f241 3331 	movw	r3, #4913	; 0x1331
     62a:	f2c0 0300 	movt	r3, #0
     62e:	4798      	blx	r3
}
     630:	bd08      	pop	{r3, pc}
     632:	bf00      	nop

00000634 <FIFO_init>:


//Initial FIFO
unsigned char FIFO_init(void)
{
     634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
     638:	f44f 5490 	mov.w	r4, #4608	; 0x1200
     63c:	f2c4 040e 	movt	r4, #16398	; 0x400e
     640:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
     644:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
     648:	f8c4 a168 	str.w	sl, [r4, #360]	; 0x168

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
     64c:	f04f 0602 	mov.w	r6, #2
     650:	6466      	str	r6, [r4, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
     652:	f8c4 6168 	str.w	r6, [r4, #360]	; 0x168

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
     656:	4655      	mov	r5, sl
     658:	f2c4 050e 	movt	r5, #16398	; 0x400e
     65c:	f04f 0920 	mov.w	r9, #32
     660:	f8c5 9044 	str.w	r9, [r5, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
     664:	f8c5 9168 	str.w	r9, [r5, #360]	; 0x168

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
     668:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
     66c:	f2c4 030e 	movt	r3, #16398	; 0x400e
     670:	f04f 0204 	mov.w	r2, #4
     674:	645a      	str	r2, [r3, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
     676:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
     67a:	f04f 0701 	mov.w	r7, #1
     67e:	6467      	str	r7, [r4, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
     680:	f8c4 7168 	str.w	r7, [r4, #360]	; 0x168
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
     684:	649f      	str	r7, [r3, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
     686:	f8c3 7164 	str.w	r7, [r3, #356]	; 0x164
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
     68a:	649e      	str	r6, [r3, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
     68c:	f8c3 6164 	str.w	r6, [r3, #356]	; 0x164
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
     690:	f04f 0108 	mov.w	r1, #8
     694:	6499      	str	r1, [r3, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
     696:	f8c3 1164 	str.w	r1, [r3, #356]	; 0x164
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
     69a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     69e:	6498      	str	r0, [r3, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
     6a0:	f8c3 0164 	str.w	r0, [r3, #356]	; 0x164
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
     6a4:	f04f 0110 	mov.w	r1, #16
     6a8:	64a9      	str	r1, [r5, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
     6aa:	f8c5 1164 	str.w	r1, [r5, #356]	; 0x164
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
     6ae:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
     6b2:	64a8      	str	r0, [r5, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
     6b4:	f8c5 0164 	str.w	r0, [r5, #356]	; 0x164
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
     6b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
     6bc:	64a9      	str	r1, [r5, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
     6be:	f8c5 1164 	str.w	r1, [r5, #356]	; 0x164
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
     6c2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
     6c6:	64a0      	str	r0, [r4, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
     6c8:	f8c4 0164 	str.w	r0, [r4, #356]	; 0x164
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     6cc:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
     6d0:	65a6      	str	r6, [r4, #88]	; 0x58
     6d2:	f8c5 9058 	str.w	r9, [r5, #88]	; 0x58

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     6d6:	6567      	str	r7, [r4, #84]	; 0x54
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     6d8:	659a      	str	r2, [r3, #88]	; 0x58
	FIFO_WRST_CLR;
	FIFO_RCLK_CLR;
	FIFO_nOE_CLR;
	FIFO_nRRST_SET;
	FIFO_WEN_CLR;
	delay_us(10);
     6da:	f04f 0005 	mov.w	r0, #5
     6de:	f240 0801 	movw	r8, #1
     6e2:	f2c2 0800 	movt	r8, #8192	; 0x2000
     6e6:	47c0      	blx	r8

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     6e8:	6566      	str	r6, [r4, #84]	; 0x54
	FIFO_RCLK_SET;
	delay_us(10);
     6ea:	f04f 0005 	mov.w	r0, #5
     6ee:	47c0      	blx	r8
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     6f0:	65a6      	str	r6, [r4, #88]	; 0x58
     6f2:	65a7      	str	r7, [r4, #88]	; 0x58
	FIFO_RCLK_CLR;
	FIFO_nRRST_CLR;
	delay_us(10);
     6f4:	f04f 0005 	mov.w	r0, #5
     6f8:	47c0      	blx	r8

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     6fa:	6566      	str	r6, [r4, #84]	; 0x54
	FIFO_RCLK_SET;
	delay_us(10);
     6fc:	f04f 0005 	mov.w	r0, #5
     700:	47c0      	blx	r8
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     702:	65a6      	str	r6, [r4, #88]	; 0x58

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     704:	6567      	str	r7, [r4, #84]	; 0x54
	FIFO_RCLK_CLR;
	FIFO_nRRST_SET;
	delay_us(10);
     706:	f04f 0005 	mov.w	r0, #5
     70a:	47c0      	blx	r8
     70c:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
     710:	f8c5 9054 	str.w	r9, [r5, #84]	; 0x54
	FIFO_WRST_SET;
	FIFO_nOE_SET;
	return STATUS_OK; //okay
}
     714:	f04f 0000 	mov.w	r0, #0
     718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000071c <OV7670_init>:
}



unsigned char OV7670_init(void)
{
     71c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     720:	b089      	sub	sp, #36	; 0x24
	uint8_t temp;
	status_code_t status;
	VSYNC_Count = 0;
     722:	f04f 0400 	mov.w	r4, #0
     726:	f640 232c 	movw	r3, #2604	; 0xa2c
     72a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     72e:	601c      	str	r4, [r3, #0]
	printf("Inialising I2C\n\r");
     730:	f247 5070 	movw	r0, #30064	; 0x7570
     734:	f2c0 0000 	movt	r0, #0
     738:	f643 364d 	movw	r6, #15181	; 0x3b4d
     73c:	f2c0 0600 	movt	r6, #0
     740:	47b0      	blx	r6
uint32_t cpu_speed = 0;

static status_code_t init_twi(void)
{
	/* Set TWIM options */
	cpu_speed = sysclk_get_peripheral_bus_hz(OV7670_TWI);
     742:	f44f 4500 	mov.w	r5, #32768	; 0x8000
     746:	f2c4 0501 	movt	r5, #16385	; 0x4001
     74a:	4628      	mov	r0, r5
     74c:	f242 1141 	movw	r1, #8513	; 0x2141
     750:	f2c0 0100 	movt	r1, #0
     754:	4788      	blx	r1
     756:	f640 126c 	movw	r2, #2412	; 0x96c
     75a:	f2c2 0200 	movt	r2, #8192	; 0x2000
     75e:	6010      	str	r0, [r2, #0]
	struct twim_config opts = {
     760:	9002      	str	r0, [sp, #8]
     762:	f248 60a0 	movw	r0, #34464	; 0x86a0
     766:	f2c0 0001 	movt	r0, #1
     76a:	9003      	str	r0, [sp, #12]
     76c:	9404      	str	r4, [sp, #16]
     76e:	f88d 4014 	strb.w	r4, [sp, #20]
     772:	f88d 4015 	strb.w	r4, [sp, #21]
     776:	f88d 4016 	strb.w	r4, [sp, #22]
     77a:	f88d 4017 	strb.w	r4, [sp, #23]
     77e:	f88d 4018 	strb.w	r4, [sp, #24]
     782:	f88d 4019 	strb.w	r4, [sp, #25]
     786:	f88d 401a 	strb.w	r4, [sp, #26]
     78a:	f88d 401b 	strb.w	r4, [sp, #27]
     78e:	f88d 401c 	strb.w	r4, [sp, #28]
     792:	f88d 401d 	strb.w	r4, [sp, #29]
     796:	f88d 401e 	strb.w	r4, [sp, #30]
     79a:	f88d 401f 	strb.w	r4, [sp, #31]
		.hs_clock_drive_strength_low = 0,
		.hs_data_slew_limit = 0,
		.hs_data_drive_strength_low = 0,
	};
	/* Initialize the TWIM Module */
	twim_set_callback(OV7670_TWI, 0, twim_default_callback, 1);
     79e:	4628      	mov	r0, r5
     7a0:	4621      	mov	r1, r4
     7a2:	f640 7225 	movw	r2, #3877	; 0xf25
     7a6:	f2c0 0200 	movt	r2, #0
     7aa:	f04f 0301 	mov.w	r3, #1
     7ae:	f241 5481 	movw	r4, #5505	; 0x1581
     7b2:	f2c0 0400 	movt	r4, #0
     7b6:	47a0      	blx	r4

	return twim_set_config(OV7670_TWI, &opts);
     7b8:	4628      	mov	r0, r5
     7ba:	a902      	add	r1, sp, #8
     7bc:	f241 2315 	movw	r3, #4629	; 0x1215
     7c0:	f2c0 0300 	movt	r3, #0
     7c4:	4798      	blx	r3
	uint8_t temp;
	status_code_t status;
	VSYNC_Count = 0;
	printf("Inialising I2C\n\r");
	init_twi();
	printf("Inialising Camera\n\r");
     7c6:	f247 5084 	movw	r0, #30084	; 0x7584
     7ca:	f2c0 0000 	movt	r0, #0
     7ce:	47b0      	blx	r6

	status = write_twi(OV_COM7,0x80);
     7d0:	f04f 0012 	mov.w	r0, #18
     7d4:	f04f 0180 	mov.w	r1, #128	; 0x80
     7d8:	f240 52f1 	movw	r2, #1521	; 0x5f1
     7dc:	f2c0 0200 	movt	r2, #0
     7e0:	4790      	blx	r2
	if(STATUS_OK != status)
     7e2:	2800      	cmp	r0, #0
     7e4:	f040 80a9 	bne.w	93a <OV7670_init+0x21e>
		return STATUS_ERR_DENIED;
	delay_ms(10);
     7e8:	f241 00be 	movw	r0, #4286	; 0x10be
     7ec:	f240 0601 	movw	r6, #1
     7f0:	f2c2 0600 	movt	r6, #8192	; 0x2000
     7f4:	47b0      	blx	r6
     7f6:	f247 4420 	movw	r4, #29728	; 0x7420
     7fa:	f2c0 0400 	movt	r4, #0
	events_ch_enable(PEVC_ID_USER_PDCA_0);
}



unsigned char OV7670_init(void)
     7fe:	f504 79a7 	add.w	r9, r4, #334	; 0x14e
		return STATUS_ERR_DENIED;
	delay_ms(10);
	
	for(temp = 0; temp < SETTINGS_LENGTH; temp++)
	{
		if( STATUS_OK != write_twi(default_settings[temp][0], default_settings[temp][1] ))
     802:	f240 56f1 	movw	r6, #1521	; 0x5f1
     806:	f2c0 0600 	movt	r6, #0
		{
			return STATUS_ERR_DENIED;
		}
		delay_ms(1);
     80a:	f240 18ad 	movw	r8, #429	; 0x1ad
     80e:	f240 0701 	movw	r7, #1
     812:	f2c2 0700 	movt	r7, #8192	; 0x2000
		return STATUS_ERR_DENIED;
	delay_ms(10);
	
	for(temp = 0; temp < SETTINGS_LENGTH; temp++)
	{
		if( STATUS_OK != write_twi(default_settings[temp][0], default_settings[temp][1] ))
     816:	7820      	ldrb	r0, [r4, #0]
     818:	7861      	ldrb	r1, [r4, #1]
     81a:	47b0      	blx	r6
     81c:	2800      	cmp	r0, #0
     81e:	f000 8094 	beq.w	94a <OV7670_init+0x22e>
     822:	e08d      	b.n	940 <OV7670_init+0x224>
     824:	7820      	ldrb	r0, [r4, #0]
     826:	7861      	ldrb	r1, [r4, #1]
     828:	47b0      	blx	r6
     82a:	2800      	cmp	r0, #0
     82c:	f040 8088 	bne.w	940 <OV7670_init+0x224>
		{
			return STATUS_ERR_DENIED;
		}
		delay_ms(1);
     830:	4640      	mov	r0, r8
     832:	47b8      	blx	r7
     834:	f104 0502 	add.w	r5, r4, #2
		return STATUS_ERR_DENIED;
	delay_ms(10);
	
	for(temp = 0; temp < SETTINGS_LENGTH; temp++)
	{
		if( STATUS_OK != write_twi(default_settings[temp][0], default_settings[temp][1] ))
     838:	78a0      	ldrb	r0, [r4, #2]
     83a:	7869      	ldrb	r1, [r5, #1]
     83c:	47b0      	blx	r6
     83e:	2800      	cmp	r0, #0
     840:	f000 8088 	beq.w	954 <OV7670_init+0x238>
     844:	e07c      	b.n	940 <OV7670_init+0x224>
		{
			return STATUS_ERR_DENIED;
		}
		delay_ms(1);
	}
	FIFO_init();
     846:	f240 6135 	movw	r1, #1589	; 0x635
     84a:	f2c0 0100 	movt	r1, #0
     84e:	4788      	blx	r1
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
     850:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
     854:	f2c4 000e 	movt	r0, #16398	; 0x400e
     858:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
     85c:	6483      	str	r3, [r0, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
     85e:	f8c0 3164 	str.w	r3, [r0, #356]	; 0x164
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
     862:	6743      	str	r3, [r0, #116]	; 0x74

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
     864:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
	}
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
     868:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
     86c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
     870:	6183      	str	r3, [r0, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
     872:	6283      	str	r3, [r0, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
     874:	6383      	str	r3, [r0, #56]	; 0x38
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (pin_sense & 0x01) {
		base->GPIO_IMR0S = mask;
	} else {
		base->GPIO_IMR0C = mask;
     876:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
	}

	if (pin_sense & 0x02) {
		base->GPIO_IMR1S = mask;
     87a:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
	/* Configure push button 0 to trigger an interrupt on falling edge */
	ioport_set_pin_dir(OV7670_VSYNC_PIN, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(OV7670_VSYNC_PIN, IOPORT_MODE_PULLUP | IOPORT_MODE_GLITCH_FILTER);
	ioport_set_pin_sense_mode(OV7670_VSYNC_PIN, IOPORT_SENSE_FALLING);
	if (!gpio_set_pin_callback(OV7670_VSYNC_PIN, VSYNC_Callback, 1)) {
     87e:	f04f 0059 	mov.w	r0, #89	; 0x59
     882:	f240 5185 	movw	r1, #1413	; 0x585
     886:	f2c0 0100 	movt	r1, #0
     88a:	f04f 0201 	mov.w	r2, #1
     88e:	f240 3345 	movw	r3, #837	; 0x345
     892:	f2c0 0300 	movt	r3, #0
     896:	4798      	blx	r3
     898:	b958      	cbnz	r0, 8b2 <OV7670_init+0x196>
		printf("Set pin callback failure!\r\n");
     89a:	f247 5098 	movw	r0, #30104	; 0x7598
     89e:	f2c0 0000 	movt	r0, #0
     8a2:	f643 334d 	movw	r3, #15181	; 0x3b4d
     8a6:	f2c0 0300 	movt	r3, #0
     8aa:	4798      	blx	r3
		return STATUS_ERR_DENIED;
     8ac:	f04f 001c 	mov.w	r0, #28
     8b0:	e048      	b.n	944 <OV7670_init+0x228>
 * \param pin The pin number.
 */
static inline void gpio_enable_pin_interrupt(ioport_pin_t pin)
{
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[ioport_pin_to_port_id(pin)]);
	gpio_port->GPIO_IERS = ioport_pin_to_mask(pin);
     8b2:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
     8b6:	f2c4 050e 	movt	r5, #16398	; 0x400e
     8ba:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
     8be:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
     8c2:	676c      	str	r4, [r5, #116]	; 0x74

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
     8c4:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
     8c8:	f8c5 40c8 	str.w	r4, [r5, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
     8cc:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
     8d0:	61ac      	str	r4, [r5, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
     8d2:	626c      	str	r4, [r5, #36]	; 0x24

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
     8d4:	63ac      	str	r4, [r5, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
     8d6:	60ac      	str	r4, [r5, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (pin_sense & 0x01) {
		base->GPIO_IMR0S = mask;
	} else {
		base->GPIO_IMR0C = mask;
     8d8:	f8c5 40a8 	str.w	r4, [r5, #168]	; 0xa8
	}

	if (pin_sense & 0x02) {
		base->GPIO_IMR1S = mask;
     8dc:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
 * \param pin The pin number.
 */
static inline void gpio_enable_pin_periph_event(ioport_pin_t pin)
{
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[ioport_pin_to_port_id(pin)]);
	gpio_port->GPIO_EVERS = ioport_pin_to_mask(pin);
     8e0:	f8c5 4184 	str.w	r4, [r5, #388]	; 0x184
}
static void init_pevc(void)
{
	/* Set input glitch filter divider to 0x0A (2^10) */
	struct events_conf config;
	events_get_config_defaults(&config);
     8e4:	a801      	add	r0, sp, #4
     8e6:	f240 2231 	movw	r2, #561	; 0x231
     8ea:	f2c0 0200 	movt	r2, #0
     8ee:	4790      	blx	r2
	events_init(&config);
     8f0:	a801      	add	r0, sp, #4
     8f2:	f240 2139 	movw	r1, #569	; 0x239
     8f6:	f2c0 0100 	movt	r1, #0
     8fa:	4788      	blx	r1
	 * - Generator: PAD_EVT 1
	 * - User: PDCA - channel 0 transfer one word
	 * - Enable falling edge detection for EVS
	 */
	struct events_ch_conf ch_config;
	events_ch_get_config_defaults(&ch_config);
     8fc:	a802      	add	r0, sp, #8
     8fe:	f240 235d 	movw	r3, #605	; 0x25d
     902:	f2c0 0300 	movt	r3, #0
     906:	4798      	blx	r3
	ch_config.channel_id = PEVC_ID_USER_PDCA_0;
     908:	f04f 0500 	mov.w	r5, #0
     90c:	9502      	str	r5, [sp, #8]
	ch_config.generator_id = PEVC_ID_GEN_PAD_1;
     90e:	f04f 0401 	mov.w	r4, #1
     912:	9403      	str	r4, [sp, #12]
	ch_config.shaper_enable = true;
     914:	f88d 4010 	strb.w	r4, [sp, #16]
	ch_config.igf_edge = EVENT_IGF_EDGE_FALLING;
     918:	f04f 0002 	mov.w	r0, #2
     91c:	f88d 0011 	strb.w	r0, [sp, #17]
	events_ch_configure(&ch_config);
     920:	a802      	add	r0, sp, #8
     922:	f240 2275 	movw	r2, #629	; 0x275
     926:	f2c0 0200 	movt	r2, #0
     92a:	4790      	blx	r2
 *
 * \param channel_id  Channel ID.
 */
static inline void events_ch_enable(uint32_t channel_id)
{
	PEVC->PEVC_CHER = PEVC_CHER_CHE(PEVC_CHER_CHE_1 << channel_id);
     92c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
     930:	f2c4 010a 	movt	r1, #16394	; 0x400a
     934:	604c      	str	r4, [r1, #4]
	ioport_disable_pin(OV7670_VSYNC_EVENT);
	ioport_set_pin_sense_mode(OV7670_VSYNC_EVENT, IOPORT_SENSE_FALLING);
	gpio_enable_pin_periph_event(OV7670_VSYNC_EVENT);
	init_pevc();
	
	return STATUS_OK;
     936:	4628      	mov	r0, r5
     938:	e004      	b.n	944 <OV7670_init+0x228>
	init_twi();
	printf("Inialising Camera\n\r");

	status = write_twi(OV_COM7,0x80);
	if(STATUS_OK != status)
		return STATUS_ERR_DENIED;
     93a:	f04f 001c 	mov.w	r0, #28
     93e:	e001      	b.n	944 <OV7670_init+0x228>
	
	for(temp = 0; temp < SETTINGS_LENGTH; temp++)
	{
		if( STATUS_OK != write_twi(default_settings[temp][0], default_settings[temp][1] ))
		{
			return STATUS_ERR_DENIED;
     940:	f04f 001c 	mov.w	r0, #28
	ioport_set_pin_sense_mode(OV7670_VSYNC_EVENT, IOPORT_SENSE_FALLING);
	gpio_enable_pin_periph_event(OV7670_VSYNC_EVENT);
	init_pevc();
	
	return STATUS_OK;
}
     944:	b009      	add	sp, #36	; 0x24
     946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	{
		if( STATUS_OK != write_twi(default_settings[temp][0], default_settings[temp][1] ))
		{
			return STATUS_ERR_DENIED;
		}
		delay_ms(1);
     94a:	4640      	mov	r0, r8
     94c:	47b8      	blx	r7
     94e:	f104 0402 	add.w	r4, r4, #2
     952:	e767      	b.n	824 <OV7670_init+0x108>
     954:	4640      	mov	r0, r8
     956:	47b8      	blx	r7
     958:	f105 0402 	add.w	r4, r5, #2
	status = write_twi(OV_COM7,0x80);
	if(STATUS_OK != status)
		return STATUS_ERR_DENIED;
	delay_ms(10);
	
	for(temp = 0; temp < SETTINGS_LENGTH; temp++)
     95c:	454c      	cmp	r4, r9
     95e:	f47f af61 	bne.w	824 <OV7670_init+0x108>
     962:	e770      	b.n	846 <OV7670_init+0x12a>

00000964 <LoadImageToBuffer>:
	}
}

/** starts the VSYNC state machine off */
void LoadImageToBuffer( void )
{
     964:	b570      	push	{r4, r5, r6, lr}
	while(VSYNC_Count != 0); //wait for any frame to be written to complete
     966:	f640 222c 	movw	r2, #2604	; 0xa2c
     96a:	f2c2 0200 	movt	r2, #8192	; 0x2000
     96e:	6813      	ldr	r3, [r2, #0]
     970:	2b00      	cmp	r3, #0
     972:	d1fc      	bne.n	96e <LoadImageToBuffer+0xa>
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     974:	f44f 5490 	mov.w	r4, #4608	; 0x1200
     978:	f2c4 040e 	movt	r4, #16398	; 0x400e
     97c:	f44f 5680 	mov.w	r6, #4096	; 0x1000
     980:	65a6      	str	r6, [r4, #88]	; 0x58
	FIFO_WRST_CLR;//Reset the write pointer
	delay_ms(1);//wait a few clock cycles of the internal oscillator
     982:	f240 10ad 	movw	r0, #429	; 0x1ad
     986:	f240 0501 	movw	r5, #1
     98a:	f2c2 0500 	movt	r5, #8192	; 0x2000
     98e:	47a8      	blx	r5

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     990:	6566      	str	r6, [r4, #84]	; 0x54
	FIFO_WRST_SET;
	delay_ms(1);
     992:	f240 10ad 	movw	r0, #429	; 0x1ad
     996:	47a8      	blx	r5
	VSYNC_Count = 1;
     998:	f640 202c 	movw	r0, #2604	; 0xa2c
     99c:	f2c2 0000 	movt	r0, #8192	; 0x2000
     9a0:	f04f 0101 	mov.w	r1, #1
     9a4:	6001      	str	r1, [r0, #0]
     9a6:	bd70      	pop	{r4, r5, r6, pc}

000009a8 <FIFO_TO_AVR>:
}

//Write one pixel in AVR
uint16_t FIFO_TO_AVR(void)
{
     9a8:	b410      	push	{r4}
     9aa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     9ae:	f2c4 030e 	movt	r3, #16398	; 0x400e
     9b2:	f04f 0102 	mov.w	r1, #2
     9b6:	6559      	str	r1, [r3, #84]	; 0x54
	base->GPIO_OVRC = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->GPIO_PVR & arch_ioport_pin_to_mask(pin);
     9b8:	6e1c      	ldr	r4, [r3, #96]	; 0x60
     9ba:	f3c4 3440 	ubfx	r4, r4, #13, #1
     9be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     9c2:	f2c4 020e 	movt	r2, #16398	; 0x400e
     9c6:	6e10      	ldr	r0, [r2, #96]	; 0x60
     9c8:	f3c0 5080 	ubfx	r0, r0, #22, #1
	//@todo work out a more efficient way of doing this... 
	FIFO_RCLK_SET;
	//data = FIFO_AVR_PINP;
	data |= ioport_get_pin_level(OV7670_D7);//get it and shift it up
	data <<= 1;
	data |= ioport_get_pin_level(OV7670_D6);//get it and shift it up
     9cc:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
     9d0:	6e14      	ldr	r4, [r2, #96]	; 0x60
     9d2:	f3c4 5440 	ubfx	r4, r4, #21, #1
	data <<= 1;
	data |= ioport_get_pin_level(OV7670_D5);//get it and shift it up
     9d6:	ea44 0040 	orr.w	r0, r4, r0, lsl #1
     9da:	6e12      	ldr	r2, [r2, #96]	; 0x60
     9dc:	f3c2 1400 	ubfx	r4, r2, #4, #1
	data <<= 1;
	data |= ioport_get_pin_level(OV7670_D4);//get it and shift it up
     9e0:	ea44 0040 	orr.w	r0, r4, r0, lsl #1
     9e4:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
     9e8:	f2c4 020e 	movt	r2, #16398	; 0x400e
     9ec:	6e14      	ldr	r4, [r2, #96]	; 0x60
     9ee:	f3c4 7480 	ubfx	r4, r4, #30, #1
	data <<= 1;
	data |= ioport_get_pin_level(OV7670_D3);//get it and shift it up
     9f2:	ea44 0040 	orr.w	r0, r4, r0, lsl #1
     9f6:	6e14      	ldr	r4, [r2, #96]	; 0x60
     9f8:	f3c4 04c0 	ubfx	r4, r4, #3, #1
	data <<= 1;
	data |= ioport_get_pin_level(OV7670_D2);//get it and shift it up
     9fc:	ea44 0040 	orr.w	r0, r4, r0, lsl #1
     a00:	6e14      	ldr	r4, [r2, #96]	; 0x60
     a02:	f3c4 0440 	ubfx	r4, r4, #1, #1
	data <<= 1;
	data |= ioport_get_pin_level(OV7670_D1);//get it and shift it up
     a06:	ea44 0040 	orr.w	r0, r4, r0, lsl #1
     a0a:	6e12      	ldr	r2, [r2, #96]	; 0x60
     a0c:	f002 0201 	and.w	r2, r2, #1
	data <<= 1;
	data |= ioport_get_pin_level(OV7670_D0);//get it and shift it up
     a10:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
	data <<= 1;
     a14:	ea4f 0240 	mov.w	r2, r0, lsl #1
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     a18:	6599      	str	r1, [r3, #88]	; 0x58

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     a1a:	6559      	str	r1, [r3, #84]	; 0x54
	base->GPIO_OVRC = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->GPIO_PVR & arch_ioport_pin_to_mask(pin);
     a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	FIFO_RCLK_CLR;
	FIFO_RCLK_SET;
	//data |= FIFO_AVR_PINP;
	if (ioport_get_pin_level(OV7670_D7))//get it and shift it up
     a1e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
		data |= 1;
     a22:	bf18      	it	ne
     a24:	f042 0201 	orrne.w	r2, r2, #1
	data <<= 1;
     a28:	ea4f 0142 	mov.w	r1, r2, lsl #1
     a2c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
     a30:	f2c4 000e 	movt	r0, #16398	; 0x400e
     a34:	6e02      	ldr	r2, [r0, #96]	; 0x60
	if (ioport_get_pin_level(OV7670_D6))//get it and shift it up
     a36:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
		data |= 1;
     a3a:	bf1c      	itt	ne
     a3c:	f041 0101 	orrne.w	r1, r1, #1
     a40:	b289      	uxthne	r1, r1
	data <<= 1;
     a42:	ea4f 0341 	mov.w	r3, r1, lsl #1
     a46:	b299      	uxth	r1, r3
     a48:	f44f 5080 	mov.w	r0, #4096	; 0x1000
     a4c:	f2c4 000e 	movt	r0, #16398	; 0x400e
     a50:	6e02      	ldr	r2, [r0, #96]	; 0x60
	if (ioport_get_pin_level(OV7670_D5))//get it and shift it up
     a52:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
		data |= 1;
     a56:	bf18      	it	ne
     a58:	f041 0101 	orrne.w	r1, r1, #1
	data <<= 1;
     a5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
     a60:	b299      	uxth	r1, r3
     a62:	f44f 5080 	mov.w	r0, #4096	; 0x1000
     a66:	f2c4 000e 	movt	r0, #16398	; 0x400e
     a6a:	6e02      	ldr	r2, [r0, #96]	; 0x60
	if (ioport_get_pin_level(OV7670_D4))//get it and shift it up
     a6c:	f012 0f10 	tst.w	r2, #16
		data |= 1;
     a70:	bf18      	it	ne
     a72:	f041 0101 	orrne.w	r1, r1, #1
	data <<= 1;
     a76:	ea4f 0341 	mov.w	r3, r1, lsl #1
     a7a:	b299      	uxth	r1, r3
     a7c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
     a80:	f2c4 000e 	movt	r0, #16398	; 0x400e
     a84:	6e02      	ldr	r2, [r0, #96]	; 0x60
	if (ioport_get_pin_level(OV7670_D3))//get it and shift it up
     a86:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
		data |= 1;
     a8a:	bf18      	it	ne
     a8c:	f041 0101 	orrne.w	r1, r1, #1
	data <<= 1;
     a90:	ea4f 0341 	mov.w	r3, r1, lsl #1
     a94:	b299      	uxth	r1, r3
     a96:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
     a9a:	f2c4 000e 	movt	r0, #16398	; 0x400e
     a9e:	6e02      	ldr	r2, [r0, #96]	; 0x60
	if (ioport_get_pin_level(OV7670_D2))//get it and shift it up
     aa0:	f012 0f08 	tst.w	r2, #8
		data |= 1;
     aa4:	bf18      	it	ne
     aa6:	f041 0101 	orrne.w	r1, r1, #1
	data <<= 1;
     aaa:	ea4f 0341 	mov.w	r3, r1, lsl #1
     aae:	b299      	uxth	r1, r3
     ab0:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
     ab4:	f2c4 000e 	movt	r0, #16398	; 0x400e
     ab8:	6e02      	ldr	r2, [r0, #96]	; 0x60
	if (ioport_get_pin_level(OV7670_D1))//get it and shift it up
     aba:	f012 0f02 	tst.w	r2, #2
		data |= 1;
     abe:	bf18      	it	ne
     ac0:	f041 0101 	orrne.w	r1, r1, #1
	data <<= 1;
     ac4:	ea4f 0341 	mov.w	r3, r1, lsl #1
     ac8:	b298      	uxth	r0, r3
     aca:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
     ace:	f2c4 010e 	movt	r1, #16398	; 0x400e
     ad2:	6e0a      	ldr	r2, [r1, #96]	; 0x60
	if (ioport_get_pin_level(OV7670_D0))//get it and shift it up
     ad4:	f012 0f01 	tst.w	r2, #1
		data |= 1;
     ad8:	bf18      	it	ne
     ada:	f040 0001 	orrne.w	r0, r0, #1
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     ade:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     ae2:	f2c4 030e 	movt	r3, #16398	; 0x400e
     ae6:	f04f 0102 	mov.w	r1, #2
     aea:	6599      	str	r1, [r3, #88]	; 0x58
	//	FIFO_RCLK_CLR;
	//	FIFO_RCLK_SET;
	//	FIFO_RCLK_CLR;

	return(data);
}
     aec:	bc10      	pop	{r4}
     aee:	4770      	bx	lr

00000af0 <GetImageIfAvailiable>:
}


//Reads all data from the buffer if an image has been written
uint8_t GetImageIfAvailiable( int offset )
{
     af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     af4:	b083      	sub	sp, #12
	if (VSYNC_Count == 2)//if one full frame has elapsed.
     af6:	f640 232c 	movw	r3, #2604	; 0xa2c
     afa:	f2c2 0300 	movt	r3, #8192	; 0x2000
     afe:	6819      	ldr	r1, [r3, #0]
     b00:	2902      	cmp	r1, #2
		// 		xprintf(PSTR("Closing File: %d\n"), f_close(&File[0]));
		return STATUS_OK; //Success!
	}
	else
	{
		return STATUS_ERR_BUSY;// No image available
     b02:	bf18      	it	ne
     b04:	2019      	movne	r0, #25


//Reads all data from the buffer if an image has been written
uint8_t GetImageIfAvailiable( int offset )
{
	if (VSYNC_Count == 2)//if one full frame has elapsed.
     b06:	d17e      	bne.n	c06 <GetImageIfAvailiable+0x116>
     b08:	f44f 5090 	mov.w	r0, #4608	; 0x1200
     b0c:	f2c4 000e 	movt	r0, #16398	; 0x400e
     b10:	f04f 0201 	mov.w	r2, #1
     b14:	6582      	str	r2, [r0, #88]	; 0x58

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     b16:	f04f 0402 	mov.w	r4, #2
     b1a:	6544      	str	r4, [r0, #84]	; 0x54
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     b1c:	6584      	str	r4, [r0, #88]	; 0x58

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     b1e:	6542      	str	r2, [r0, #84]	; 0x54
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     b20:	f44f 5580 	mov.w	r5, #4096	; 0x1000
     b24:	f2c4 050e 	movt	r5, #16398	; 0x400e
     b28:	f04f 0620 	mov.w	r6, #32
     b2c:	65ae      	str	r6, [r5, #88]	; 0x58
		FIFO_nRRST_CLR; //Reset Read Pointer
		FIFO_RCLK_SET;
		FIFO_RCLK_CLR;
		FIFO_nRRST_SET;
		FIFO_nOE_CLR;
		delay_ms(1);
     b2e:	f240 10ad 	movw	r0, #429	; 0x1ad
     b32:	f240 0701 	movw	r7, #1
     b36:	f2c2 0700 	movt	r7, #8192	; 0x2000
     b3a:	47b8      	blx	r7
		/** @ashleyjr - this is where the reading occurs
			It's broken down into rows and colums and it reads L/R; U/D.
			I've set it to send the raw values up the UART for now.
			I'm also not certain on the endianness...*/
		for(;;){
			usart_getchar(BOARD_USART,&Check);
     b3c:	f44f 4400 	mov.w	r4, #32768	; 0x8000
     b40:	f2c4 0402 	movt	r4, #16386	; 0x4002
     b44:	f241 75e9 	movw	r5, #6121	; 0x17e9
     b48:	f2c0 0500 	movt	r5, #0
     b4c:	4620      	mov	r0, r4
     b4e:	f10d 0106 	add.w	r1, sp, #6
     b52:	47a8      	blx	r5
			if(Check == 'S') break;
     b54:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     b58:	2b53      	cmp	r3, #83	; 0x53
     b5a:	d1f7      	bne.n	b4c <GetImageIfAvailiable+0x5c>
     b5c:	e022      	b.n	ba4 <GetImageIfAvailiable+0xb4>
		}
		for (j=HEIGHT; j > 0; j--) //Read all data
		{
			for (i=0; i < WIDTH; i++)
			{
				Temp=FIFO_TO_AVR();
     b5e:	47c0      	blx	r8
     b60:	4683      	mov	fp, r0
				usart_putchar(BOARD_USART, Temp);
     b62:	4620      	mov	r0, r4
     b64:	4659      	mov	r1, fp
     b66:	47b8      	blx	r7
				usart_putchar(BOARD_USART, (Temp >> 8));
     b68:	4620      	mov	r0, r4
     b6a:	f3cb 210f 	ubfx	r1, fp, #8, #16
     b6e:	47b8      	blx	r7
				for(;;){
					usart_getchar(BOARD_USART,&Check);
     b70:	4620      	mov	r0, r4
     b72:	f10d 0106 	add.w	r1, sp, #6
     b76:	47a8      	blx	r5
					if(Check == 'P') break;
     b78:	f8bd 1006 	ldrh.w	r1, [sp, #6]
     b7c:	2950      	cmp	r1, #80	; 0x50
     b7e:	d1f7      	bne.n	b70 <GetImageIfAvailiable+0x80>
			usart_getchar(BOARD_USART,&Check);
			if(Check == 'S') break;
		}
		for (j=HEIGHT; j > 0; j--) //Read all data
		{
			for (i=0; i < WIDTH; i++)
     b80:	3e01      	subs	r6, #1
     b82:	d1ec      	bne.n	b5e <GetImageIfAvailiable+0x6e>
					usart_getchar(BOARD_USART,&Check);
					if(Check == 'P') break;
				}
			}
			for(;;){
				usart_getchar(BOARD_USART,&Check);
     b84:	f241 75e9 	movw	r5, #6121	; 0x17e9
     b88:	f2c0 0500 	movt	r5, #0
     b8c:	4620      	mov	r0, r4
     b8e:	f10d 0106 	add.w	r1, sp, #6
     b92:	47a8      	blx	r5
				if(Check == 'L') break;
     b94:	f8bd 0006 	ldrh.w	r0, [sp, #6]
     b98:	284c      	cmp	r0, #76	; 0x4c
     b9a:	d1f7      	bne.n	b8c <GetImageIfAvailiable+0x9c>
			I'm also not certain on the endianness...*/
		for(;;){
			usart_getchar(BOARD_USART,&Check);
			if(Check == 'S') break;
		}
		for (j=HEIGHT; j > 0; j--) //Read all data
     b9c:	f1b9 0901 	subs.w	r9, r9, #1
     ba0:	d110      	bne.n	bc4 <GetImageIfAvailiable+0xd4>
     ba2:	e015      	b.n	bd0 <GetImageIfAvailiable+0xe0>
			It's broken down into rows and colums and it reads L/R; U/D.
			I've set it to send the raw values up the UART for now.
			I'm also not certain on the endianness...*/
		for(;;){
			usart_getchar(BOARD_USART,&Check);
			if(Check == 'S') break;
     ba4:	f04f 09f0 	mov.w	r9, #240	; 0xf0
}


//Reads all data from the buffer if an image has been written
uint8_t GetImageIfAvailiable( int offset )
{
     ba8:	f44f 7aa0 	mov.w	sl, #320	; 0x140
		}
		for (j=HEIGHT; j > 0; j--) //Read all data
		{
			for (i=0; i < WIDTH; i++)
			{
				Temp=FIFO_TO_AVR();
     bac:	f640 18a9 	movw	r8, #2473	; 0x9a9
     bb0:	f2c0 0800 	movt	r8, #0
				usart_putchar(BOARD_USART, Temp);
     bb4:	f44f 4400 	mov.w	r4, #32768	; 0x8000
     bb8:	f2c4 0402 	movt	r4, #16386	; 0x4002
     bbc:	f241 77b1 	movw	r7, #6065	; 0x17b1
     bc0:	f2c0 0700 	movt	r7, #0
}


//Reads all data from the buffer if an image has been written
uint8_t GetImageIfAvailiable( int offset )
{
     bc4:	4656      	mov	r6, sl
			{
				Temp=FIFO_TO_AVR();
				usart_putchar(BOARD_USART, Temp);
				usart_putchar(BOARD_USART, (Temp >> 8));
				for(;;){
					usart_getchar(BOARD_USART,&Check);
     bc6:	f241 75e9 	movw	r5, #6121	; 0x17e9
     bca:	f2c0 0500 	movt	r5, #0
     bce:	e7c6      	b.n	b5e <GetImageIfAvailiable+0x6e>
     bd0:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bd4:	f2c4 030e 	movt	r3, #16398	; 0x400e
     bd8:	f04f 0201 	mov.w	r2, #1
     bdc:	659a      	str	r2, [r3, #88]	; 0x58

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     bde:	f04f 0102 	mov.w	r1, #2
     be2:	6559      	str	r1, [r3, #84]	; 0x54
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     be4:	6599      	str	r1, [r3, #88]	; 0x58

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     be6:	655a      	str	r2, [r3, #84]	; 0x54
     be8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
     bec:	f2c4 000e 	movt	r0, #16398	; 0x400e
     bf0:	f04f 0320 	mov.w	r3, #32
     bf4:	6543      	str	r3, [r0, #84]	; 0x54
		FIFO_nRRST_CLR; //Reset Read Pointer
		FIFO_RCLK_SET;
		FIFO_RCLK_CLR;
		FIFO_nRRST_SET;
		FIFO_nOE_SET;
		VSYNC_Count = 0; //No image present in buffer
     bf6:	f04f 0000 	mov.w	r0, #0
     bfa:	f640 222c 	movw	r2, #2604	; 0xa2c
     bfe:	f2c2 0200 	movt	r2, #8192	; 0x2000
     c02:	6010      	str	r0, [r2, #0]
     c04:	e7ff      	b.n	c06 <GetImageIfAvailiable+0x116>
	}
	else
	{
		return STATUS_ERR_BUSY;// No image available
	}
}
     c06:	b003      	add	sp, #12
     c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000c0c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     c10:	460c      	mov	r4, r1
     c12:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     c14:	bb48      	cbnz	r0, c6a <_read+0x5e>
		return -1;
	}

	for (; len > 0; --len) {
     c16:	2a00      	cmp	r2, #0
     c18:	dd2b      	ble.n	c72 <_read+0x66>

int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
     c1a:	188f      	adds	r7, r1, r2
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
     c1c:	f640 2658 	movw	r6, #2648	; 0xa58
     c20:	f2c2 0600 	movt	r6, #8192	; 0x2000
     c24:	f640 2550 	movw	r5, #2640	; 0xa50
     c28:	f2c2 0500 	movt	r5, #8192	; 0x2000
     c2c:	ea6f 0901 	mvn.w	r9, r1
     c30:	eb07 0009 	add.w	r0, r7, r9
     c34:	f000 0901 	and.w	r9, r0, #1
     c38:	6830      	ldr	r0, [r6, #0]
     c3a:	682b      	ldr	r3, [r5, #0]
     c3c:	4798      	blx	r3
		ptr++;
     c3e:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     c42:	42bc      	cmp	r4, r7
     c44:	d119      	bne.n	c7a <_read+0x6e>
     c46:	e00d      	b.n	c64 <_read+0x58>
		ptr_get(stdio_base, ptr);
     c48:	6830      	ldr	r0, [r6, #0]
     c4a:	682b      	ldr	r3, [r5, #0]
     c4c:	4621      	mov	r1, r4
     c4e:	4798      	blx	r3
		ptr++;
     c50:	f104 0401 	add.w	r4, r4, #1
     c54:	4621      	mov	r1, r4
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
     c56:	6830      	ldr	r0, [r6, #0]
     c58:	682a      	ldr	r2, [r5, #0]
     c5a:	4790      	blx	r2
		ptr++;
     c5c:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     c60:	42bc      	cmp	r4, r7
     c62:	d1f1      	bne.n	c48 <_read+0x3c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
     c64:	4640      	mov	r0, r8
     c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
     c6a:	f04f 30ff 	mov.w	r0, #4294967295
     c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	for (; len > 0; --len) {
     c72:	f04f 0000 	mov.w	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
     c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     c7a:	f1b9 0f00 	cmp.w	r9, #0
     c7e:	d0e3      	beq.n	c48 <_read+0x3c>
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
     c80:	6830      	ldr	r0, [r6, #0]
     c82:	682a      	ldr	r2, [r5, #0]
     c84:	4621      	mov	r1, r4
     c86:	4790      	blx	r2
		ptr++;
     c88:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     c8c:	42bc      	cmp	r4, r7
     c8e:	d1db      	bne.n	c48 <_read+0x3c>
     c90:	e7e8      	b.n	c64 <_read+0x58>
     c92:	bf00      	nop

00000c94 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
     c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     c98:	460d      	mov	r5, r1
     c9a:	4690      	mov	r8, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     c9c:	f100 30ff 	add.w	r0, r0, #4294967295
     ca0:	2802      	cmp	r0, #2
     ca2:	d824      	bhi.n	cee <_write+0x5a>
		return -1;
	}

	for (; len != 0; --len) {
     ca4:	b332      	cbz	r2, cf4 <_write+0x60>
		if (ptr_put(stdio_base, *ptr++) < 0) {
     ca6:	f640 2658 	movw	r6, #2648	; 0xa58
     caa:	f2c2 0600 	movt	r6, #8192	; 0x2000
     cae:	f640 2754 	movw	r7, #2644	; 0xa54
     cb2:	f2c2 0700 	movt	r7, #8192	; 0x2000
     cb6:	f04f 0400 	mov.w	r4, #0
     cba:	f102 39ff 	add.w	r9, r2, #4294967295
     cbe:	f009 0901 	and.w	r9, r9, #1
     cc2:	6830      	ldr	r0, [r6, #0]
     cc4:	683b      	ldr	r3, [r7, #0]
     cc6:	5d09      	ldrb	r1, [r1, r4]
     cc8:	4798      	blx	r3
     cca:	42a0      	cmp	r0, r4
     ccc:	da1a      	bge.n	d04 <_write+0x70>
     cce:	e014      	b.n	cfa <_write+0x66>
     cd0:	6830      	ldr	r0, [r6, #0]
     cd2:	683b      	ldr	r3, [r7, #0]
     cd4:	5d29      	ldrb	r1, [r5, r4]
     cd6:	4798      	blx	r3
     cd8:	2800      	cmp	r0, #0
     cda:	db0e      	blt.n	cfa <_write+0x66>
			return -1;
		}
		++nChars;
     cdc:	f104 0401 	add.w	r4, r4, #1
	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
     ce0:	6830      	ldr	r0, [r6, #0]
     ce2:	683a      	ldr	r2, [r7, #0]
     ce4:	5d29      	ldrb	r1, [r5, r4]
     ce6:	4790      	blx	r2
     ce8:	2800      	cmp	r0, #0
     cea:	da1d      	bge.n	d28 <_write+0x94>
     cec:	e005      	b.n	cfa <_write+0x66>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
     cee:	f04f 34ff 	mov.w	r4, #4294967295
     cf2:	e004      	b.n	cfe <_write+0x6a>
	}

	for (; len != 0; --len) {
     cf4:	f04f 0400 	mov.w	r4, #0
     cf8:	e001      	b.n	cfe <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
     cfa:	f04f 34ff 	mov.w	r4, #4294967295
		}
		++nChars;
	}
	return nChars;
}
     cfe:	4620      	mov	r0, r4
     d00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
     d04:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     d08:	45a0      	cmp	r8, r4
     d0a:	d0f8      	beq.n	cfe <_write+0x6a>
     d0c:	f1b9 0f00 	cmp.w	r9, #0
     d10:	d0de      	beq.n	cd0 <_write+0x3c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
     d12:	6830      	ldr	r0, [r6, #0]
     d14:	683a      	ldr	r2, [r7, #0]
     d16:	5d29      	ldrb	r1, [r5, r4]
     d18:	4790      	blx	r2
     d1a:	2800      	cmp	r0, #0
     d1c:	dbed      	blt.n	cfa <_write+0x66>
			return -1;
		}
		++nChars;
     d1e:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     d22:	45a0      	cmp	r8, r4
     d24:	d1d4      	bne.n	cd0 <_write+0x3c>
     d26:	e7ea      	b.n	cfe <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
     d28:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     d2c:	45a0      	cmp	r8, r4
     d2e:	d1cf      	bne.n	cd0 <_write+0x3c>
     d30:	e7e5      	b.n	cfe <_write+0x6a>
     d32:	bf00      	nop

00000d34 <pdca_channel_get_handler>:
 */
volatile PdcaChannel *pdca_channel_get_handler(pdca_channel_num_t
		pdca_ch_number)
{
	if (pdca_ch_number >= PDCA_NUMBER_OF_CHANNELS)
		pdca_ch_number = 0;
     d34:	280f      	cmp	r0, #15
     d36:	bf88      	it	hi
     d38:	2000      	movhi	r0, #0

	/* Get the correct channel pointer */
	volatile PdcaChannel *pdca_channel =
     d3a:	ea4f 1080 	mov.w	r0, r0, lsl #6
     d3e:	f100 4180 	add.w	r1, r0, #1073741824	; 0x40000000
			&(PDCA->PDCA_CHANNEL[pdca_ch_number]);

	return pdca_channel;
}
     d42:	f501 2022 	add.w	r0, r1, #663552	; 0xa2000
     d46:	4770      	bx	lr

00000d48 <pdca_get_channel_status>:
 *
 * \return 1 if channel transfer is enabled, else 0
 */
enum pdca_channel_status
		pdca_get_channel_status(pdca_channel_num_t pdca_ch_number)
{
     d48:	b508      	push	{r3, lr}
	/* Get the correct channel pointer */
	volatile PdcaChannel *pdca_channel =
     d4a:	f640 5335 	movw	r3, #3381	; 0xd35
     d4e:	f2c0 0300 	movt	r3, #0
     d52:	4798      	blx	r3
			pdca_channel_get_handler(pdca_ch_number);
	uint32_t status = pdca_channel->PDCA_SR;
     d54:	69c1      	ldr	r1, [r0, #28]
	uint32_t intflag = pdca_channel->PDCA_ISR;
     d56:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	if ((status & PDCA_SR_TEN) == PDCA_SR_TEN) {
     d58:	f011 0f01 	tst.w	r1, #1
     d5c:	d00c      	beq.n	d78 <pdca_get_channel_status+0x30>
		if ((intflag & PDCA_ISR_TERR) == PDCA_ISR_TERR) {
     d5e:	f010 0f04 	tst.w	r0, #4
     d62:	d10c      	bne.n	d7e <pdca_get_channel_status+0x36>
			return PDCA_CH_TRANSFER_ERROR;
		} else if ((intflag & PDCA_ISR_TRC) == PDCA_ISR_TRC) {
     d64:	f010 0f02 	tst.w	r0, #2
     d68:	d10c      	bne.n	d84 <pdca_get_channel_status+0x3c>
			return PDCA_CH_TRANSFER_COMPLETED;
		} else if ((intflag & PDCA_ISR_RCZ) == PDCA_ISR_RCZ) {
     d6a:	f000 0201 	and.w	r2, r0, #1
			return PDCA_CH_COUNTER_RELOAD_IS_ZERO;
     d6e:	2a00      	cmp	r2, #0
     d70:	bf0c      	ite	eq
     d72:	2001      	moveq	r0, #1
     d74:	2002      	movne	r0, #2
     d76:	bd08      	pop	{r3, pc}
		}
		return PDCA_CH_BUSY;
	} else {
		return PDCA_CH_FREE;
     d78:	f04f 0000 	mov.w	r0, #0
     d7c:	bd08      	pop	{r3, pc}
	uint32_t status = pdca_channel->PDCA_SR;
	uint32_t intflag = pdca_channel->PDCA_ISR;

	if ((status & PDCA_SR_TEN) == PDCA_SR_TEN) {
		if ((intflag & PDCA_ISR_TERR) == PDCA_ISR_TERR) {
			return PDCA_CH_TRANSFER_ERROR;
     d7e:	f04f 0004 	mov.w	r0, #4
     d82:	bd08      	pop	{r3, pc}
		} else if ((intflag & PDCA_ISR_TRC) == PDCA_ISR_TRC) {
			return PDCA_CH_TRANSFER_COMPLETED;
     d84:	f04f 0003 	mov.w	r0, #3
		}
		return PDCA_CH_BUSY;
	} else {
		return PDCA_CH_FREE;
	}
}
     d88:	bd08      	pop	{r3, pc}
     d8a:	bf00      	nop

00000d8c <pdca_channel_interrupt>:
 * pdca_channel_set_callback() function.
 *
 * \param pdca_ch_number PDCA channel number to handle interrupt for
 */
static void pdca_channel_interrupt(const pdca_channel_num_t pdca_ch_number)
{
     d8c:	b510      	push	{r4, lr}
     d8e:	4604      	mov	r4, r0
	enum pdca_channel_status status;

	status = pdca_get_channel_status(pdca_ch_number);
     d90:	f640 5349 	movw	r3, #3401	; 0xd49
     d94:	f2c0 0300 	movt	r3, #0
     d98:	4798      	blx	r3

	if (pdca_callback_pointer[pdca_ch_number]) {
     d9a:	f640 215c 	movw	r1, #2652	; 0xa5c
     d9e:	f2c2 0100 	movt	r1, #8192	; 0x2000
     da2:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
     da6:	b102      	cbz	r2, daa <pdca_channel_interrupt+0x1e>
		pdca_callback_pointer[pdca_ch_number] (status);
     da8:	4790      	blx	r2
     daa:	bd10      	pop	{r4, pc}

00000dac <PDCA_0_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 0.
 */
void PDCA_0_Handler(void)
{
     dac:	b508      	push	{r3, lr}
	pdca_channel_interrupt(0);
     dae:	f04f 0000 	mov.w	r0, #0
     db2:	f640 538d 	movw	r3, #3469	; 0xd8d
     db6:	f2c0 0300 	movt	r3, #0
     dba:	4798      	blx	r3
     dbc:	bd08      	pop	{r3, pc}
     dbe:	bf00      	nop

00000dc0 <PDCA_1_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 1.
 */
void PDCA_1_Handler(void)
{
     dc0:	b508      	push	{r3, lr}
	pdca_channel_interrupt(1);
     dc2:	f04f 0001 	mov.w	r0, #1
     dc6:	f640 538d 	movw	r3, #3469	; 0xd8d
     dca:	f2c0 0300 	movt	r3, #0
     dce:	4798      	blx	r3
     dd0:	bd08      	pop	{r3, pc}
     dd2:	bf00      	nop

00000dd4 <PDCA_2_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 2.
 */
void PDCA_2_Handler(void)
{
     dd4:	b508      	push	{r3, lr}
	pdca_channel_interrupt(2);
     dd6:	f04f 0002 	mov.w	r0, #2
     dda:	f640 538d 	movw	r3, #3469	; 0xd8d
     dde:	f2c0 0300 	movt	r3, #0
     de2:	4798      	blx	r3
     de4:	bd08      	pop	{r3, pc}
     de6:	bf00      	nop

00000de8 <PDCA_3_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 3.
 */
void PDCA_3_Handler(void)
{
     de8:	b508      	push	{r3, lr}
	pdca_channel_interrupt(3);
     dea:	f04f 0003 	mov.w	r0, #3
     dee:	f640 538d 	movw	r3, #3469	; 0xd8d
     df2:	f2c0 0300 	movt	r3, #0
     df6:	4798      	blx	r3
     df8:	bd08      	pop	{r3, pc}
     dfa:	bf00      	nop

00000dfc <PDCA_4_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 4.
 */
void PDCA_4_Handler(void)
{
     dfc:	b508      	push	{r3, lr}
	pdca_channel_interrupt(4);
     dfe:	f04f 0004 	mov.w	r0, #4
     e02:	f640 538d 	movw	r3, #3469	; 0xd8d
     e06:	f2c0 0300 	movt	r3, #0
     e0a:	4798      	blx	r3
     e0c:	bd08      	pop	{r3, pc}
     e0e:	bf00      	nop

00000e10 <PDCA_5_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 5.
 */
void PDCA_5_Handler(void)
{
     e10:	b508      	push	{r3, lr}
	pdca_channel_interrupt(5);
     e12:	f04f 0005 	mov.w	r0, #5
     e16:	f640 538d 	movw	r3, #3469	; 0xd8d
     e1a:	f2c0 0300 	movt	r3, #0
     e1e:	4798      	blx	r3
     e20:	bd08      	pop	{r3, pc}
     e22:	bf00      	nop

00000e24 <PDCA_6_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 6.
 */
void PDCA_6_Handler(void)
{
     e24:	b508      	push	{r3, lr}
	pdca_channel_interrupt(6);
     e26:	f04f 0006 	mov.w	r0, #6
     e2a:	f640 538d 	movw	r3, #3469	; 0xd8d
     e2e:	f2c0 0300 	movt	r3, #0
     e32:	4798      	blx	r3
     e34:	bd08      	pop	{r3, pc}
     e36:	bf00      	nop

00000e38 <PDCA_7_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 7.
 */
void PDCA_7_Handler(void)
{
     e38:	b508      	push	{r3, lr}
	pdca_channel_interrupt(7);
     e3a:	f04f 0007 	mov.w	r0, #7
     e3e:	f640 538d 	movw	r3, #3469	; 0xd8d
     e42:	f2c0 0300 	movt	r3, #0
     e46:	4798      	blx	r3
     e48:	bd08      	pop	{r3, pc}
     e4a:	bf00      	nop

00000e4c <PDCA_8_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 8.
 */
void PDCA_8_Handler(void)
{
     e4c:	b508      	push	{r3, lr}
	pdca_channel_interrupt(8);
     e4e:	f04f 0008 	mov.w	r0, #8
     e52:	f640 538d 	movw	r3, #3469	; 0xd8d
     e56:	f2c0 0300 	movt	r3, #0
     e5a:	4798      	blx	r3
     e5c:	bd08      	pop	{r3, pc}
     e5e:	bf00      	nop

00000e60 <PDCA_9_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 9.
 */
void PDCA_9_Handler(void)
{
     e60:	b508      	push	{r3, lr}
	pdca_channel_interrupt(9);
     e62:	f04f 0009 	mov.w	r0, #9
     e66:	f640 538d 	movw	r3, #3469	; 0xd8d
     e6a:	f2c0 0300 	movt	r3, #0
     e6e:	4798      	blx	r3
     e70:	bd08      	pop	{r3, pc}
     e72:	bf00      	nop

00000e74 <PDCA_10_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 10.
 */
void PDCA_10_Handler(void)
{
     e74:	b508      	push	{r3, lr}
	pdca_channel_interrupt(10);
     e76:	f04f 000a 	mov.w	r0, #10
     e7a:	f640 538d 	movw	r3, #3469	; 0xd8d
     e7e:	f2c0 0300 	movt	r3, #0
     e82:	4798      	blx	r3
     e84:	bd08      	pop	{r3, pc}
     e86:	bf00      	nop

00000e88 <PDCA_11_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 11.
 */
void PDCA_11_Handler(void)
{
     e88:	b508      	push	{r3, lr}
	pdca_channel_interrupt(11);
     e8a:	f04f 000b 	mov.w	r0, #11
     e8e:	f640 538d 	movw	r3, #3469	; 0xd8d
     e92:	f2c0 0300 	movt	r3, #0
     e96:	4798      	blx	r3
     e98:	bd08      	pop	{r3, pc}
     e9a:	bf00      	nop

00000e9c <PDCA_12_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 12.
 */
void PDCA_12_Handler(void)
{
     e9c:	b508      	push	{r3, lr}
	pdca_channel_interrupt(12);
     e9e:	f04f 000c 	mov.w	r0, #12
     ea2:	f640 538d 	movw	r3, #3469	; 0xd8d
     ea6:	f2c0 0300 	movt	r3, #0
     eaa:	4798      	blx	r3
     eac:	bd08      	pop	{r3, pc}
     eae:	bf00      	nop

00000eb0 <PDCA_13_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 13.
 */
void PDCA_13_Handler(void)
{
     eb0:	b508      	push	{r3, lr}
	pdca_channel_interrupt(13);
     eb2:	f04f 000d 	mov.w	r0, #13
     eb6:	f640 538d 	movw	r3, #3469	; 0xd8d
     eba:	f2c0 0300 	movt	r3, #0
     ebe:	4798      	blx	r3
     ec0:	bd08      	pop	{r3, pc}
     ec2:	bf00      	nop

00000ec4 <PDCA_14_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 14.
 */
void PDCA_14_Handler(void)
{
     ec4:	b508      	push	{r3, lr}
	pdca_channel_interrupt(14);
     ec6:	f04f 000e 	mov.w	r0, #14
     eca:	f640 538d 	movw	r3, #3469	; 0xd8d
     ece:	f2c0 0300 	movt	r3, #0
     ed2:	4798      	blx	r3
     ed4:	bd08      	pop	{r3, pc}
     ed6:	bf00      	nop

00000ed8 <PDCA_15_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 15.
 */
void PDCA_15_Handler(void)
{
     ed8:	b508      	push	{r3, lr}
	pdca_channel_interrupt(15);
     eda:	f04f 000f 	mov.w	r0, #15
     ede:	f640 538d 	movw	r3, #3469	; 0xd8d
     ee2:	f2c0 0300 	movt	r3, #0
     ee6:	4798      	blx	r3
     ee8:	bd08      	pop	{r3, pc}
     eea:	bf00      	nop

00000eec <find_twim_channel_num>:
 * \return      TWIM channel number
 */
static uint32_t find_twim_channel_num(Twim *twim)
{
#if defined(ID_TWIM3)
	if (twim == TWIM3) {
     eec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
     ef0:	f2c4 0307 	movt	r3, #16391	; 0x4007
     ef4:	4298      	cmp	r0, r3
     ef6:	d00e      	beq.n	f16 <find_twim_channel_num+0x2a>
		return 3;
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
     ef8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     efc:	f2c4 0107 	movt	r1, #16391	; 0x4007
     f00:	4288      	cmp	r0, r1
     f02:	d00b      	beq.n	f1c <find_twim_channel_num+0x30>
		return 2;
	}
#endif
#if defined(ID_TWIM1)
	if (twim == TWIM1) {
     f04:	f44f 4240 	mov.w	r2, #49152	; 0xc000
     f08:	f2c4 0201 	movt	r2, #16385	; 0x4001
     f0c:	4290      	cmp	r0, r2
     f0e:	bf14      	ite	ne
     f10:	2000      	movne	r0, #0
     f12:	2001      	moveq	r0, #1
     f14:	4770      	bx	lr
 */
static uint32_t find_twim_channel_num(Twim *twim)
{
#if defined(ID_TWIM3)
	if (twim == TWIM3) {
		return 3;
     f16:	f04f 0003 	mov.w	r0, #3
     f1a:	4770      	bx	lr
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
		return 2;
     f1c:	f04f 0002 	mov.w	r0, #2
		return 0;
	}
#endif

	return 0;
}
     f20:	4770      	bx	lr
     f22:	bf00      	nop

00000f24 <twim_default_callback>:

/**
 * \brief TWIM default callback function
 */
void twim_default_callback(Twim *twim)
{
     f24:	b510      	push	{r4, lr}
     f26:	4604      	mov	r4, r0
	/* Get masked status register value */
	uint32_t twim_ch = find_twim_channel_num(twim);
     f28:	f640 63ed 	movw	r3, #3821	; 0xeed
     f2c:	f2c0 0300 	movt	r3, #0
     f30:	4798      	blx	r3
	uint32_t status = twim->TWIM_SR;
     f32:	69e1      	ldr	r1, [r4, #28]
	status &= twim_it_mask[twim_ch];
     f34:	f640 12a4 	movw	r2, #2468	; 0x9a4
     f38:	f2c2 0200 	movt	r2, #8192	; 0x2000
     f3c:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
     f40:	4019      	ands	r1, r3
	/* this is a NACK */
	if (status & TWIM_SR_STD_MASK) {
     f42:	f411 6fa0 	tst.w	r1, #1280	; 0x500
     f46:	d01a      	beq.n	f7e <twim_default_callback+0x5a>
		/*
		 * If we get a nak, clear the valid bit in cmdr,
		 * otherwise the command will be resent.
		 */
		transfer_status[twim_ch] = (status & TWIM_IER_ANAK) ?
     f48:	f401 7380 	and.w	r3, r1, #256	; 0x100
     f4c:	2b00      	cmp	r3, #0
     f4e:	bf0c      	ite	eq
     f50:	21fe      	moveq	r1, #254	; 0xfe
     f52:	21fc      	movne	r1, #252	; 0xfc
     f54:	f640 1290 	movw	r2, #2448	; 0x990
     f58:	f2c2 0200 	movt	r2, #8192	; 0x2000
     f5c:	5411      	strb	r1, [r2, r0]
				TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim->TWIM_CMDR &= ~TWIM_CMDR_VALID;
     f5e:	68e3      	ldr	r3, [r4, #12]
     f60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
     f64:	60e1      	str	r1, [r4, #12]
		twim->TWIM_SCR = ~0UL;
     f66:	f04f 32ff 	mov.w	r2, #4294967295
     f6a:	62e2      	str	r2, [r4, #44]	; 0x2c
		twim->TWIM_IDR = ~0UL;
     f6c:	6262      	str	r2, [r4, #36]	; 0x24
		twim_next[twim_ch] = false;
     f6e:	f640 13b4 	movw	r3, #2484	; 0x9b4
     f72:	f2c2 0300 	movt	r3, #8192	; 0x2000
     f76:	f04f 0100 	mov.w	r1, #0
     f7a:	5419      	strb	r1, [r3, r0]
     f7c:	bd10      	pop	{r4, pc}
	}
	/* This is a RXRDY */
	else if (status & TWIM_SR_RXRDY) {
     f7e:	f011 0f01 	tst.w	r1, #1
     f82:	d032      	beq.n	fea <twim_default_callback+0xc6>
		/* Get data from Receive Holding Register */
		*twim_rx_data[twim_ch] = twim->TWIM_RHR;
     f84:	f640 1270 	movw	r2, #2416	; 0x970
     f88:	f2c2 0200 	movt	r2, #8192	; 0x2000
     f8c:	6961      	ldr	r1, [r4, #20]
     f8e:	b2c9      	uxtb	r1, r1
     f90:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
     f94:	f803 1b01 	strb.w	r1, [r3], #1
		twim_rx_data[twim_ch]++;
     f98:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
		/* Decrease received bytes number */
		twim_rx_nb_bytes[twim_ch]--;
     f9c:	f640 1180 	movw	r1, #2432	; 0x980
     fa0:	f2c2 0100 	movt	r1, #8192	; 0x2000
     fa4:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
     fa8:	f102 33ff 	add.w	r3, r2, #4294967295
     fac:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
		/* Receive complete */
		if (twim_rx_nb_bytes[twim_ch] == 0) {
     fb0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
     fb4:	2900      	cmp	r1, #0
     fb6:	d17c      	bne.n	10b2 <__stack_size__+0xb2>
			/* Finish the receive operation */
			twim->TWIM_IDR = TWIM_IDR_RXRDY;
     fb8:	f04f 0201 	mov.w	r2, #1
     fbc:	6262      	str	r2, [r4, #36]	; 0x24
			/* Set busy to false */
			twim_next[twim_ch] = false;
     fbe:	f640 13b4 	movw	r3, #2484	; 0x9b4
     fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     fc6:	f04f 0100 	mov.w	r1, #0
     fca:	5419      	strb	r1, [r3, r0]
#if TWIM_LOW_POWER_ENABLE
			twim->TWIM_SCR = TWIM_SCR_CCOMP;
     fcc:	f04f 0208 	mov.w	r2, #8
     fd0:	62e2      	str	r2, [r4, #44]	; 0x2c
			twim->TWIM_IER = TWIM_IER_CCOMP;
     fd2:	6222      	str	r2, [r4, #32]
			twim_it_mask[twim_ch] |= TWIM_IER_CCOMP;
     fd4:	f640 13a4 	movw	r3, #2468	; 0x9a4
     fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     fdc:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
     fe0:	f041 0208 	orr.w	r2, r1, #8
     fe4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
     fe8:	bd10      	pop	{r4, pc}
#endif
		}
	}
	/* This is a TXRDY */
	else if (status & TWIM_SR_TXRDY) {
     fea:	f011 0f02 	tst.w	r1, #2
     fee:	d059      	beq.n	10a4 <__stack_size__+0xa4>
		/* No more bytes to transmit */
		if (twim_tx_nb_bytes[twim_ch] == 0) {
     ff0:	f640 11c8 	movw	r1, #2504	; 0x9c8
     ff4:	f2c2 0100 	movt	r1, #8192	; 0x2000
     ff8:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
     ffc:	b9c2      	cbnz	r2, 1030 <__stack_size__+0x30>
			/* Finish the receive operation */
			twim->TWIM_IDR = TWIM_IDR_TXRDY;
     ffe:	f04f 0202 	mov.w	r2, #2
    1002:	6262      	str	r2, [r4, #36]	; 0x24
			/* Set busy to false */
			twim_next[twim_ch] = false;
    1004:	f640 11b4 	movw	r1, #2484	; 0x9b4
    1008:	f2c2 0100 	movt	r1, #8192	; 0x2000
    100c:	f04f 0300 	mov.w	r3, #0
    1010:	540b      	strb	r3, [r1, r0]
#if TWIM_LOW_POWER_ENABLE
			twim->TWIM_SCR = TWIM_SCR_CCOMP;
    1012:	f04f 0208 	mov.w	r2, #8
    1016:	62e2      	str	r2, [r4, #44]	; 0x2c
			twim->TWIM_IER = TWIM_IER_CCOMP;
    1018:	6222      	str	r2, [r4, #32]
			twim_it_mask[twim_ch] |= TWIM_IER_CCOMP;
    101a:	f640 11a4 	movw	r1, #2468	; 0x9a4
    101e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1022:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
    1026:	f043 0208 	orr.w	r2, r3, #8
    102a:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
    102e:	bd10      	pop	{r4, pc}
#endif
		} else {
			/* Put the byte in the Transmit Holding Register */
			twim->TWIM_THR = *twim_tx_data[twim_ch]++;
    1030:	f640 1294 	movw	r2, #2452	; 0x994
    1034:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1038:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    103c:	f813 1b01 	ldrb.w	r1, [r3], #1
    1040:	61a1      	str	r1, [r4, #24]
    1042:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
			/* Decrease transmitted bytes number */
			twim_tx_nb_bytes[twim_ch]--;
    1046:	f640 13c8 	movw	r3, #2504	; 0x9c8
    104a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    104e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    1052:	f102 31ff 	add.w	r1, r2, #4294967295
    1056:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
			if (twim_tx_nb_bytes[twim_ch] == 0) {
    105a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    105e:	bb43      	cbnz	r3, 10b2 <__stack_size__+0xb2>
				/* Check for next transfer */
				if (twim_next[twim_ch]) {
    1060:	f640 12b4 	movw	r2, #2484	; 0x9b4
    1064:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1068:	5c11      	ldrb	r1, [r2, r0]
    106a:	b311      	cbz	r1, 10b2 <__stack_size__+0xb2>
					twim_next[twim_ch] = false;
    106c:	f640 13b4 	movw	r3, #2484	; 0x9b4
    1070:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1074:	f04f 0200 	mov.w	r2, #0
    1078:	541a      	strb	r2, [r3, r0]
					twim_tx_nb_bytes[twim_ch] = twim_package[twim_ch]->length;
    107a:	f640 11b8 	movw	r1, #2488	; 0x9b8
    107e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1082:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
    1086:	68d9      	ldr	r1, [r3, #12]
    1088:	f640 12c8 	movw	r2, #2504	; 0x9c8
    108c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1090:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
					twim_tx_data[twim_ch] = twim_package[twim_ch]->buffer;
    1094:	6899      	ldr	r1, [r3, #8]
    1096:	f640 1394 	movw	r3, #2452	; 0x994
    109a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    109e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    10a2:	bd10      	pop	{r4, pc}
				}
			}
		}
	}
#if TWIM_LOW_POWER_ENABLE
	else if (status & TWIM_SR_CCOMP) {
    10a4:	f011 0f08 	tst.w	r1, #8
    10a8:	d003      	beq.n	10b2 <__stack_size__+0xb2>
		twim->TWIM_SCR = TWIM_SCR_CCOMP;
    10aa:	f04f 0008 	mov.w	r0, #8
    10ae:	62e0      	str	r0, [r4, #44]	; 0x2c
		twim->TWIM_IDR = TWIM_IDR_CCOMP;
    10b0:	6260      	str	r0, [r4, #36]	; 0x24
    10b2:	bd10      	pop	{r4, pc}

000010b4 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
    10b4:	b470      	push	{r4, r5, r6}
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);
    10b6:	fbb2 f2f1 	udiv	r2, r2, r1
    10ba:	ea4f 0252 	mov.w	r2, r2, lsr #1

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    10be:	2aff      	cmp	r2, #255	; 0xff
    10c0:	d91e      	bls.n	1100 <twim_set_speed+0x4c>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
    10c2:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    10c6:	2aff      	cmp	r2, #255	; 0xff
    10c8:	d935      	bls.n	1136 <twim_set_speed+0x82>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
    10ca:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    10ce:	2aff      	cmp	r2, #255	; 0xff
    10d0:	d934      	bls.n	113c <twim_set_speed+0x88>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
    10d2:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    10d6:	2aff      	cmp	r2, #255	; 0xff
    10d8:	d933      	bls.n	1142 <twim_set_speed+0x8e>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
    10da:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    10de:	2aff      	cmp	r2, #255	; 0xff
    10e0:	d932      	bls.n	1148 <twim_set_speed+0x94>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
    10e2:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    10e6:	2aff      	cmp	r2, #255	; 0xff
    10e8:	d931      	bls.n	114e <twim_set_speed+0x9a>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
    10ea:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    10ee:	2aff      	cmp	r2, #255	; 0xff
    10f0:	d930      	bls.n	1154 <twim_set_speed+0xa0>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
    10f2:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    10f6:	2aff      	cmp	r2, #255	; 0xff
    10f8:	d92f      	bls.n	115a <twim_set_speed+0xa6>
		/* divide f_prescaled value */
		f_prescaled /= 2;
	}

	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
    10fa:	f04f 00f8 	mov.w	r0, #248	; 0xf8
    10fe:	e018      	b.n	1132 <twim_set_speed+0x7e>
 */
status_code_t twim_set_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
    1100:	f04f 0600 	mov.w	r6, #0
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
    1104:	ea4f 0152 	mov.w	r1, r2, lsr #1
    1108:	b2cd      	uxtb	r5, r1
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
			| TWIM_CWGR_STASTO(f_prescaled);
    110a:	ea4f 4402 	mov.w	r4, r2, lsl #16
    110e:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
    1112:	432c      	orrs	r4, r5
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
    1114:	ea4f 6303 	mov.w	r3, r3, lsl #24
    1118:	f003 6570 	and.w	r5, r3, #251658240	; 0xf000000
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_CWGR_EXP(cwgr_exp)
    111c:	432c      	orrs	r4, r5
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
    111e:	1a52      	subs	r2, r2, r1
    1120:	ea4f 6102 	mov.w	r1, r2, lsl #24
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
    1124:	ea44 4311 	orr.w	r3, r4, r1, lsr #16
			| TWIM_CWGR_STASTO(f_prescaled);
    1128:	ea43 7206 	orr.w	r2, r3, r6, lsl #28
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
    112c:	6042      	str	r2, [r0, #4]
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
			| TWIM_CWGR_STASTO(f_prescaled);

	return STATUS_OK;
    112e:	f04f 0000 	mov.w	r0, #0
    1132:	b240      	sxtb	r0, r0
    1134:	e014      	b.n	1160 <twim_set_speed+0xac>
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
		/* increase clock divider */
		cwgr_exp++;
    1136:	f04f 0601 	mov.w	r6, #1
    113a:	e7e3      	b.n	1104 <twim_set_speed+0x50>
    113c:	f04f 0602 	mov.w	r6, #2
    1140:	e7e0      	b.n	1104 <twim_set_speed+0x50>
    1142:	f04f 0603 	mov.w	r6, #3
    1146:	e7dd      	b.n	1104 <twim_set_speed+0x50>
    1148:	f04f 0604 	mov.w	r6, #4
    114c:	e7da      	b.n	1104 <twim_set_speed+0x50>
    114e:	f04f 0605 	mov.w	r6, #5
    1152:	e7d7      	b.n	1104 <twim_set_speed+0x50>
    1154:	f04f 0606 	mov.w	r6, #6
    1158:	e7d4      	b.n	1104 <twim_set_speed+0x50>
    115a:	f04f 0607 	mov.w	r6, #7
    115e:	e7d1      	b.n	1104 <twim_set_speed+0x50>
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
			| TWIM_CWGR_STASTO(f_prescaled);

	return STATUS_OK;
}
    1160:	bc70      	pop	{r4, r5, r6}
    1162:	4770      	bx	lr

00001164 <twim_set_hsmode_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_hsmode_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
    1164:	b470      	push	{r4, r5, r6}
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);
    1166:	fbb2 f2f1 	udiv	r2, r2, r1
    116a:	ea4f 0252 	mov.w	r2, r2, lsr #1

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    116e:	2aff      	cmp	r2, #255	; 0xff
    1170:	d91e      	bls.n	11b0 <twim_set_hsmode_speed+0x4c>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
    1172:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    1176:	2aff      	cmp	r2, #255	; 0xff
    1178:	d935      	bls.n	11e6 <twim_set_hsmode_speed+0x82>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
    117a:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    117e:	2aff      	cmp	r2, #255	; 0xff
    1180:	d934      	bls.n	11ec <twim_set_hsmode_speed+0x88>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
    1182:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    1186:	2aff      	cmp	r2, #255	; 0xff
    1188:	d933      	bls.n	11f2 <twim_set_hsmode_speed+0x8e>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
    118a:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    118e:	2aff      	cmp	r2, #255	; 0xff
    1190:	d932      	bls.n	11f8 <twim_set_hsmode_speed+0x94>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
    1192:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    1196:	2aff      	cmp	r2, #255	; 0xff
    1198:	d931      	bls.n	11fe <twim_set_hsmode_speed+0x9a>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
    119a:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    119e:	2aff      	cmp	r2, #255	; 0xff
    11a0:	d930      	bls.n	1204 <twim_set_hsmode_speed+0xa0>
		/* increase clock divider */
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
    11a2:	ea4f 0252 	mov.w	r2, r2, lsr #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    11a6:	2aff      	cmp	r2, #255	; 0xff
    11a8:	d92f      	bls.n	120a <twim_set_hsmode_speed+0xa6>
		/* divide f_prescaled value */
		f_prescaled /= 2;
	}

	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
    11aa:	f04f 00f8 	mov.w	r0, #248	; 0xf8
    11ae:	e018      	b.n	11e2 <twim_set_hsmode_speed+0x7e>
 */
status_code_t twim_set_hsmode_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
    11b0:	f04f 0600 	mov.w	r6, #0
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
    11b4:	ea4f 0152 	mov.w	r1, r2, lsr #1
    11b8:	b2cd      	uxtb	r5, r1
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
			| TWIM_HSCWGR_STASTO(f_prescaled);
    11ba:	ea4f 4402 	mov.w	r4, r2, lsl #16
    11be:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
    11c2:	432c      	orrs	r4, r5
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
    11c4:	ea4f 6303 	mov.w	r3, r3, lsl #24
    11c8:	f003 6570 	and.w	r5, r3, #251658240	; 0xf000000
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_HSCWGR_EXP(cwgr_exp)
    11cc:	432c      	orrs	r4, r5
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
    11ce:	1a52      	subs	r2, r2, r1
    11d0:	ea4f 6102 	mov.w	r1, r2, lsl #24
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
    11d4:	ea44 4311 	orr.w	r3, r4, r1, lsr #16
			| TWIM_HSCWGR_STASTO(f_prescaled);
    11d8:	ea43 7206 	orr.w	r2, r3, r6, lsl #28
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
    11dc:	6382      	str	r2, [r0, #56]	; 0x38
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
			| TWIM_HSCWGR_STASTO(f_prescaled);

	return STATUS_OK;
    11de:	f04f 0000 	mov.w	r0, #0
    11e2:	b240      	sxtb	r0, r0
    11e4:	e014      	b.n	1210 <twim_set_hsmode_speed+0xac>
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
		/* increase clock divider */
		cwgr_exp++;
    11e6:	f04f 0601 	mov.w	r6, #1
    11ea:	e7e3      	b.n	11b4 <twim_set_hsmode_speed+0x50>
    11ec:	f04f 0602 	mov.w	r6, #2
    11f0:	e7e0      	b.n	11b4 <twim_set_hsmode_speed+0x50>
    11f2:	f04f 0603 	mov.w	r6, #3
    11f6:	e7dd      	b.n	11b4 <twim_set_hsmode_speed+0x50>
    11f8:	f04f 0604 	mov.w	r6, #4
    11fc:	e7da      	b.n	11b4 <twim_set_hsmode_speed+0x50>
    11fe:	f04f 0605 	mov.w	r6, #5
    1202:	e7d7      	b.n	11b4 <twim_set_hsmode_speed+0x50>
    1204:	f04f 0606 	mov.w	r6, #6
    1208:	e7d4      	b.n	11b4 <twim_set_hsmode_speed+0x50>
    120a:	f04f 0607 	mov.w	r6, #7
    120e:	e7d1      	b.n	11b4 <twim_set_hsmode_speed+0x50>
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
			| TWIM_HSCWGR_STASTO(f_prescaled);

	return STATUS_OK;
}
    1210:	bc70      	pop	{r4, r5, r6}
    1212:	4770      	bx	lr

00001214 <twim_set_config>:
 *
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_config(Twim *twim, struct twim_config *config)
{
    1214:	b570      	push	{r4, r5, r6, lr}
    1216:	4605      	mov	r5, r0
    1218:	460c      	mov	r4, r1
	sysclk_enable_peripheral_clock(twim);
    121a:	f242 433d 	movw	r3, #9277	; 0x243d
    121e:	f2c0 0300 	movt	r3, #0
    1222:	4798      	blx	r3
	/* Enable master transfer */
	twim->TWIM_CR = TWIM_CR_MEN;
    1224:	f04f 0001 	mov.w	r0, #1
    1228:	6028      	str	r0, [r5, #0]
	/* Reset TWI */
	twim->TWIM_CR = TWIM_CR_SWRST;
    122a:	f04f 0180 	mov.w	r1, #128	; 0x80
    122e:	6029      	str	r1, [r5, #0]
	/* Clear SR */
	twim->TWIM_SCR = ~0UL;
    1230:	f04f 32ff 	mov.w	r2, #4294967295
    1234:	62ea      	str	r2, [r5, #44]	; 0x2c

	if (config->smbus) {
    1236:	7ba3      	ldrb	r3, [r4, #14]
    1238:	b12b      	cbz	r3, 1246 <twim_set_config+0x32>
		/* Enable SMBUS Transfer */
		twim->TWIM_CR = TWIM_CR_SMEN;
    123a:	f04f 0010 	mov.w	r0, #16
    123e:	6028      	str	r0, [r5, #0]
		twim->TWIM_SMBTR = (uint32_t) -1;
    1240:	f04f 31ff 	mov.w	r1, #4294967295
    1244:	60a9      	str	r1, [r5, #8]
	}

	/* Select the speed */
	if (config->speed) {
    1246:	6861      	ldr	r1, [r4, #4]
    1248:	b149      	cbz	r1, 125e <twim_set_config+0x4a>
		if (twim_set_speed(twim, config->speed, config->twim_clk,
    124a:	4628      	mov	r0, r5
    124c:	6822      	ldr	r2, [r4, #0]
    124e:	7b23      	ldrb	r3, [r4, #12]
    1250:	f241 06b5 	movw	r6, #4277	; 0x10b5
    1254:	f2c0 0600 	movt	r6, #0
    1258:	47b0      	blx	r6
    125a:	2800      	cmp	r0, #0
    125c:	d15d      	bne.n	131a <twim_set_config+0x106>
				config->data_setup_cycles) != STATUS_OK) {
			return ERR_INVALID_ARG;
		}
	}
	if (config->hsmode_speed) {
    125e:	68a1      	ldr	r1, [r4, #8]
    1260:	b149      	cbz	r1, 1276 <twim_set_config+0x62>
		if (twim_set_hsmode_speed(twim, config->hsmode_speed, config->twim_clk,
    1262:	4628      	mov	r0, r5
    1264:	6822      	ldr	r2, [r4, #0]
    1266:	7b63      	ldrb	r3, [r4, #13]
    1268:	f241 1665 	movw	r6, #4453	; 0x1165
    126c:	f2c0 0600 	movt	r6, #0
    1270:	47b0      	blx	r6
    1272:	2800      	cmp	r0, #0
    1274:	d154      	bne.n	1320 <twim_set_config+0x10c>
		}
	}

	/* Set clock and data slew rate */
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
			TWIM_SRR_FILTER(2) : TWIM_SRR_FILTER(3))
    1276:	f244 233f 	movw	r3, #16959	; 0x423f
    127a:	f2c0 030f 	movt	r3, #15
    127e:	6862      	ldr	r2, [r4, #4]
    1280:	429a      	cmp	r2, r3
    1282:	bf8c      	ite	hi
    1284:	f04f 5240 	movhi.w	r2, #805306368	; 0x30000000
    1288:	f04f 5200 	movls.w	r2, #536870912	; 0x20000000
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
    128c:	7c60      	ldrb	r0, [r4, #17]
    128e:	ea4f 2100 	mov.w	r1, r0, lsl #8
    1292:	f401 7140 	and.w	r1, r1, #768	; 0x300
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
    1296:	7ca3      	ldrb	r3, [r4, #18]
    1298:	f003 0007 	and.w	r0, r3, #7

	/* Set clock and data slew rate */
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
			TWIM_SRR_FILTER(2) : TWIM_SRR_FILTER(3))
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
    129c:	4301      	orrs	r1, r0
    129e:	7c23      	ldrb	r3, [r4, #16]
    12a0:	ea4f 4003 	mov.w	r0, r3, lsl #16
    12a4:	f400 20e0 	and.w	r0, r0, #458752	; 0x70000
	}

	/* Set clock and data slew rate */
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
			TWIM_SRR_FILTER(2) : TWIM_SRR_FILTER(3))
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
    12a8:	7be3      	ldrb	r3, [r4, #15]
    12aa:	ea4f 6303 	mov.w	r3, r3, lsl #24
    12ae:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
    12b2:	4318      	orrs	r0, r3
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
    12b4:	4301      	orrs	r1, r0
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
    12b6:	4311      	orrs	r1, r2
			return ERR_INVALID_ARG;
		}
	}

	/* Set clock and data slew rate */
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
    12b8:	63e9      	str	r1, [r5, #60]	; 0x3c
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
			| TWIM_HSSRR_CLSLEW(config->hs_clock_slew_limit)
			| TWIM_HSSRR_CLDRIVEL(config->hs_clock_drive_strength_low)
			| TWIM_HSSRR_CLDRIVEH(config->hs_clock_drive_strength_high)
			| TWIM_HSSRR_DASLEW(config->hs_data_slew_limit)
			| TWIM_HSSRR_DADRIVEL(config->hs_data_drive_strength_low);
    12ba:	7de2      	ldrb	r2, [r4, #23]
    12bc:	f002 0307 	and.w	r3, r2, #7
    12c0:	f043 5080 	orr.w	r0, r3, #268435456	; 0x10000000
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
			| TWIM_HSSRR_CLSLEW(config->hs_clock_slew_limit)
			| TWIM_HSSRR_CLDRIVEL(config->hs_clock_drive_strength_low)
    12c4:	7d61      	ldrb	r1, [r4, #21]
    12c6:	ea4f 4201 	mov.w	r2, r1, lsl #16
    12ca:	f402 21e0 	and.w	r1, r2, #458752	; 0x70000
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
			| TWIM_HSSRR_CLSLEW(config->hs_clock_slew_limit)
    12ce:	7ce3      	ldrb	r3, [r4, #19]
    12d0:	ea4f 6203 	mov.w	r2, r3, lsl #24
    12d4:	f002 7340 	and.w	r3, r2, #50331648	; 0x3000000
			| TWIM_HSSRR_CLDRIVEL(config->hs_clock_drive_strength_low)
    12d8:	ea41 0203 	orr.w	r2, r1, r3
			| TWIM_HSSRR_CLDRIVEH(config->hs_clock_drive_strength_high)
    12dc:	7d21      	ldrb	r1, [r4, #20]
    12de:	ea4f 5301 	mov.w	r3, r1, lsl #20
    12e2:	f403 1140 	and.w	r1, r3, #3145728	; 0x300000
    12e6:	430a      	orrs	r2, r1
			| TWIM_HSSRR_DASLEW(config->hs_data_slew_limit)
    12e8:	7da3      	ldrb	r3, [r4, #22]
    12ea:	ea4f 2103 	mov.w	r1, r3, lsl #8
    12ee:	f401 7340 	and.w	r3, r1, #768	; 0x300
    12f2:	431a      	orrs	r2, r3
			| TWIM_HSSRR_DADRIVEL(config->hs_data_drive_strength_low);
    12f4:	4310      	orrs	r0, r2
			TWIM_SRR_FILTER(2) : TWIM_SRR_FILTER(3))
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
    12f6:	6428      	str	r0, [r5, #64]	; 0x40
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    12f8:	f640 2148 	movw	r1, #2632	; 0xa48
    12fc:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1300:	f04f 0300 	mov.w	r3, #0
    1304:	700b      	strb	r3, [r1, #0]
    1306:	704b      	strb	r3, [r1, #1]
    1308:	708b      	strb	r3, [r1, #2]
    130a:	70cb      	strb	r3, [r1, #3]
    130c:	710b      	strb	r3, [r1, #4]
    130e:	714b      	strb	r3, [r1, #5]
    1310:	718b      	strb	r3, [r1, #6]
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    1312:	f04f 0201 	mov.w	r2, #1
    1316:	71ca      	strb	r2, [r1, #7]

#if TWIM_LOW_POWER_ENABLE
	sleepmgr_init();
#endif

	return STATUS_OK;
    1318:	e004      	b.n	1324 <twim_set_config+0x110>

	/* Select the speed */
	if (config->speed) {
		if (twim_set_speed(twim, config->speed, config->twim_clk,
				config->data_setup_cycles) != STATUS_OK) {
			return ERR_INVALID_ARG;
    131a:	f04f 03f8 	mov.w	r3, #248	; 0xf8
    131e:	e001      	b.n	1324 <twim_set_config+0x110>
		}
	}
	if (config->hsmode_speed) {
		if (twim_set_hsmode_speed(twim, config->hsmode_speed, config->twim_clk,
				config->hsmode_data_setup_cycles) != STATUS_OK) {
			return ERR_INVALID_ARG;
    1320:	f04f 03f8 	mov.w	r3, #248	; 0xf8
#if TWIM_LOW_POWER_ENABLE
	sleepmgr_init();
#endif

	return STATUS_OK;
}
    1324:	b258      	sxtb	r0, r3
    1326:	bd70      	pop	{r4, r5, r6, pc}

00001328 <twim_enable_interrupt>:
 * \param interrupt_source  The TWI interrupt to be enabled
 */
void twim_enable_interrupt(Twim *twim, uint32_t interrupt_source)
{
	/* Set the interrupt flags */
	twim->TWIM_IER = interrupt_source;
    1328:	6201      	str	r1, [r0, #32]
    132a:	4770      	bx	lr

0000132c <twim_get_status>:
 *
 * \param twim   Base address of the TWIM
 */
uint32_t twim_get_status(Twim *twim)
{
	return twim->TWIM_SR;
    132c:	69c0      	ldr	r0, [r0, #28]
}
    132e:	4770      	bx	lr

00001330 <twi_master_write>:
 *
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twi_master_write(Twim *twim, struct twim_package *package)
{
    1330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1334:	4606      	mov	r6, r0
    1336:	460c      	mov	r4, r1
	uint32_t twim_ch = find_twim_channel_num(twim);
    1338:	f640 63ed 	movw	r3, #3821	; 0xeed
    133c:	f2c0 0300 	movt	r3, #0
    1340:	4798      	blx	r3
    1342:	4605      	mov	r5, r0

	/* Reset the TWIM module to clear the THR register */
	twim->TWIM_CR = TWIM_CR_MEN;
    1344:	f04f 0001 	mov.w	r0, #1
    1348:	6030      	str	r0, [r6, #0]
	twim->TWIM_CR = TWIM_CR_SWRST;
    134a:	f04f 0180 	mov.w	r1, #128	; 0x80
    134e:	6031      	str	r1, [r6, #0]
	twim->TWIM_CR = TWIM_CR_MDIS;
    1350:	f04f 0202 	mov.w	r2, #2
    1354:	6032      	str	r2, [r6, #0]
	/* Clear the interrupt flags */
	twim->TWIM_IDR = ~0UL;
    1356:	f04f 37ff 	mov.w	r7, #4294967295
    135a:	6277      	str	r7, [r6, #36]	; 0x24
	/* Clear the status flags */
	twim->TWIM_SCR = ~0UL;
    135c:	62f7      	str	r7, [r6, #44]	; 0x2c
	/* Initialize bus transfer status */
	transfer_status[twim_ch] = TWI_SUCCESS;
    135e:	f04f 0300 	mov.w	r3, #0
    1362:	f640 1090 	movw	r0, #2448	; 0x990
    1366:	f2c2 0000 	movt	r0, #8192	; 0x2000
    136a:	5543      	strb	r3, [r0, r5]
	/* Mask NACK and TXRDY interrupts */
	twim_it_mask[twim_ch] = TWIM_IER_STD_MASK | TWIM_IER_TXRDY;
    136c:	f640 12a4 	movw	r2, #2468	; 0x9a4
    1370:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1374:	f240 5102 	movw	r1, #1282	; 0x502
    1378:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
	/* Set next transfer to false */
	twim_next[twim_ch] = false;
    137c:	f640 17b4 	movw	r7, #2484	; 0x9b4
    1380:	f2c2 0700 	movt	r7, #8192	; 0x2000
    1384:	557b      	strb	r3, [r7, r5]

	/* Check if internal address access is performed */
	if (package->addr_length) {
    1386:	79e3      	ldrb	r3, [r4, #7]
    1388:	b1db      	cbz	r3, 13c2 <twi_master_write+0x92>
		/* Selection of first valid byte of the address */
		twim_tx_data[twim_ch] = package->addr;
    138a:	f104 0004 	add.w	r0, r4, #4
    138e:	f640 1294 	movw	r2, #2452	; 0x994
    1392:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1396:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
		/* Set the number of bytes to transmit */
		twim_tx_nb_bytes[twim_ch] = package->addr_length;
    139a:	f640 11c8 	movw	r1, #2504	; 0x9c8
    139e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    13a2:	f841 3025 	str.w	r3, [r1, r5, lsl #2]
		/* Set next transfer to true */
		twim_next[twim_ch] = true;
    13a6:	f640 13b4 	movw	r3, #2484	; 0x9b4
    13aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    13ae:	f04f 0701 	mov.w	r7, #1
    13b2:	555f      	strb	r7, [r3, r5]
		/* Set the number of bytes & address for next transfer */
		twim_package[twim_ch] = package;
    13b4:	f640 10b8 	movw	r0, #2488	; 0x9b8
    13b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    13bc:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
    13c0:	e00d      	b.n	13de <twi_master_write+0xae>
	} else {
		/* Get a pointer to applicative data */
		twim_tx_data[twim_ch] = package->buffer;
    13c2:	68a0      	ldr	r0, [r4, #8]
    13c4:	f640 1294 	movw	r2, #2452	; 0x994
    13c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    13cc:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
		/* Get a copy of nb bytes to write */
		twim_tx_nb_bytes[twim_ch] = package->length;
    13d0:	68e1      	ldr	r1, [r4, #12]
    13d2:	f640 17c8 	movw	r7, #2504	; 0x9c8
    13d6:	f2c2 0700 	movt	r7, #8192	; 0x2000
    13da:	f847 1025 	str.w	r1, [r7, r5, lsl #2]
	}

	/* Initiate the transfer to send the data */
	twim->TWIM_CMDR = (package->high_speed ? (TWIM_CMDR_HS |
			TWIM_CMDR_HSMCODE(package->high_speed_code)) : 0)
			| TWIM_CMDR_SADR(package->chip)
    13de:	7c62      	ldrb	r2, [r4, #17]
    13e0:	b13a      	cbz	r2, 13f2 <twi_master_write+0xc2>
		twim_tx_nb_bytes[twim_ch] = package->length;
	}

	/* Initiate the transfer to send the data */
	twim->TWIM_CMDR = (package->high_speed ? (TWIM_CMDR_HS |
			TWIM_CMDR_HSMCODE(package->high_speed_code)) : 0)
    13e2:	7ca3      	ldrb	r3, [r4, #18]
    13e4:	ea4f 7703 	mov.w	r7, r3, lsl #28
    13e8:	f007 40e0 	and.w	r0, r7, #1879048192	; 0x70000000
			| TWIM_CMDR_SADR(package->chip)
    13ec:	f040 6180 	orr.w	r1, r0, #67108864	; 0x4000000
    13f0:	e001      	b.n	13f6 <twi_master_write+0xc6>
    13f2:	f04f 0100 	mov.w	r1, #0
    13f6:	6822      	ldr	r2, [r4, #0]
    13f8:	f240 73fe 	movw	r3, #2046	; 0x7fe
    13fc:	ea03 0742 	and.w	r7, r3, r2, lsl #1
			| TWIM_CMDR_NBYTES(package->length + package->addr_length)
    1400:	79e0      	ldrb	r0, [r4, #7]
    1402:	68e2      	ldr	r2, [r4, #12]
    1404:	1883      	adds	r3, r0, r2
    1406:	ea4f 4003 	mov.w	r0, r3, lsl #16
    140a:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
			| TWIM_CMDR_VALID
			| TWIM_CMDR_START
			| TWIM_CMDR_STOP
			| (package->ten_bit ? TWIM_CMDR_TENBIT : 0);
    140e:	7c24      	ldrb	r4, [r4, #16]
    1410:	2c00      	cmp	r4, #0
    1412:	bf14      	ite	ne
    1414:	f44f 6200 	movne.w	r2, #2048	; 0x800
    1418:	2200      	moveq	r2, #0
	}

	/* Initiate the transfer to send the data */
	twim->TWIM_CMDR = (package->high_speed ? (TWIM_CMDR_HS |
			TWIM_CMDR_HSMCODE(package->high_speed_code)) : 0)
			| TWIM_CMDR_SADR(package->chip)
    141a:	f447 4760 	orr.w	r7, r7, #57344	; 0xe000
			| TWIM_CMDR_NBYTES(package->length + package->addr_length)
    141e:	4307      	orrs	r7, r0
			| TWIM_CMDR_VALID
			| TWIM_CMDR_START
			| TWIM_CMDR_STOP
			| (package->ten_bit ? TWIM_CMDR_TENBIT : 0);
    1420:	430f      	orrs	r7, r1
    1422:	4317      	orrs	r7, r2
		/* Get a copy of nb bytes to write */
		twim_tx_nb_bytes[twim_ch] = package->length;
	}

	/* Initiate the transfer to send the data */
	twim->TWIM_CMDR = (package->high_speed ? (TWIM_CMDR_HS |
    1424:	60f7      	str	r7, [r6, #12]
			| TWIM_CMDR_START
			| TWIM_CMDR_STOP
			| (package->ten_bit ? TWIM_CMDR_TENBIT : 0);

	/* Update IMR through IER */
	twim->TWIM_IER = twim_it_mask[twim_ch];
    1426:	f640 11a4 	movw	r1, #2468	; 0x9a4
    142a:	f2c2 0100 	movt	r1, #8192	; 0x2000
    142e:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
    1432:	6233      	str	r3, [r6, #32]
	/* Enable master transfer */
	twim->TWIM_CR = TWIM_CR_MEN;
    1434:	f04f 0001 	mov.w	r0, #1
    1438:	6030      	str	r0, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    143a:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    143e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1440:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1444:	f240 0244 	movw	r2, #68	; 0x44
    1448:	f2c2 0200 	movt	r2, #8192	; 0x2000
    144c:	f04f 0700 	mov.w	r7, #0
    1450:	7017      	strb	r7, [r2, #0]
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1452:	f640 2348 	movw	r3, #2632	; 0xa48
    1456:	f2c2 0300 	movt	r3, #8192	; 0x2000
    145a:	7899      	ldrb	r1, [r3, #2]
    145c:	f101 0101 	add.w	r1, r1, #1
    1460:	7099      	strb	r1, [r3, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1462:	2c00      	cmp	r4, #0
    1464:	d138      	bne.n	14d8 <twi_master_write+0x1a8>
		cpu_irq_enable();
    1466:	f240 0044 	movw	r0, #68	; 0x44
    146a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    146e:	f04f 0401 	mov.w	r4, #1
    1472:	7004      	strb	r4, [r0, #0]
    1474:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1478:	b662      	cpsie	i
    147a:	e02d      	b.n	14d8 <twi_master_write+0x1a8>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    147c:	b672      	cpsid	i
    147e:	f3bf 8f5f 	dmb	sy
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    1482:	f04f 0300 	mov.w	r3, #0
    1486:	7023      	strb	r3, [r4, #0]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    1488:	f640 2148 	movw	r1, #2632	; 0xa48
    148c:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1490:	7808      	ldrb	r0, [r1, #0]
    1492:	b968      	cbnz	r0, 14b0 <twi_master_write+0x180>
    1494:	f640 2348 	movw	r3, #2632	; 0xa48
    1498:	f2c2 0300 	movt	r3, #8192	; 0x2000
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
    149c:	f04f 0100 	mov.w	r1, #0
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    14a0:	f101 0101 	add.w	r1, r1, #1
    14a4:	b2c9      	uxtb	r1, r1

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    14a6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    14aa:	2a00      	cmp	r2, #0
    14ac:	d0f8      	beq.n	14a0 <twi_master_write+0x170>
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    14ae:	b931      	cbnz	r1, 14be <twi_master_write+0x18e>
		cpu_irq_enable();
    14b0:	f04f 0101 	mov.w	r1, #1
    14b4:	7021      	strb	r1, [r4, #0]
    14b6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    14ba:	b662      	cpsie	i
    14bc:	e01c      	b.n	14f8 <twi_master_write+0x1c8>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    14be:	b672      	cpsid	i
    14c0:	f3bf 8f5f 	dmb	sy

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
    14c4:	f04f 0000 	mov.w	r0, #0
    14c8:	7020      	strb	r0, [r4, #0]

	/* Enter the sleep mode. */
	bpm_sleep(BPM, sleep_mode);
    14ca:	4648      	mov	r0, r9
    14cc:	f243 43d9 	movw	r3, #13529	; 0x34d9
    14d0:	f2c0 0300 	movt	r3, #0
    14d4:	4798      	blx	r3
    14d6:	e00f      	b.n	14f8 <twi_master_write+0x1c8>
	/* Send data */
#if TWIM_LOW_POWER_ENABLE
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_1);
	while (!(transfer_status[twim_ch])
    14d8:	f640 1790 	movw	r7, #2448	; 0x990
    14dc:	f2c2 0700 	movt	r7, #8192	; 0x2000
			&& !(twim_get_status(twim) & TWIM_SR_IDLE)) {
    14e0:	f241 382d 	movw	r8, #4909	; 0x132d
    14e4:	f2c0 0800 	movt	r8, #0
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    14e8:	f240 0444 	movw	r4, #68	; 0x44
    14ec:	f2c2 0400 	movt	r4, #8192	; 0x2000
    14f0:	f04f 0900 	mov.w	r9, #0
    14f4:	f2c4 090f 	movt	r9, #16399	; 0x400f
	/* Enable master transfer */
	twim->TWIM_CR = TWIM_CR_MEN;
	/* Send data */
#if TWIM_LOW_POWER_ENABLE
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_1);
	while (!(transfer_status[twim_ch])
    14f8:	5d7a      	ldrb	r2, [r7, r5]
    14fa:	b922      	cbnz	r2, 1506 <twi_master_write+0x1d6>
			&& !(twim_get_status(twim) & TWIM_SR_IDLE)) {
    14fc:	4630      	mov	r0, r6
    14fe:	47c0      	blx	r8
    1500:	f010 0f10 	tst.w	r0, #16
    1504:	d0ba      	beq.n	147c <twi_master_write+0x14c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1506:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    150a:	b672      	cpsid	i
    150c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1510:	f240 0344 	movw	r3, #68	; 0x44
    1514:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1518:	f04f 0100 	mov.w	r1, #0
    151c:	7019      	strb	r1, [r3, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    151e:	f640 2248 	movw	r2, #2632	; 0xa48
    1522:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1526:	7893      	ldrb	r3, [r2, #2]
    1528:	f103 31ff 	add.w	r1, r3, #4294967295
    152c:	7091      	strb	r1, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    152e:	b948      	cbnz	r0, 1544 <twi_master_write+0x214>
		cpu_irq_enable();
    1530:	f240 0044 	movw	r0, #68	; 0x44
    1534:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1538:	f04f 0201 	mov.w	r2, #1
    153c:	7002      	strb	r2, [r0, #0]
    153e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1542:	b662      	cpsie	i
			&& !(twim_get_status(twim) & TWIM_SR_IDLE)) {
	}
#endif

	/* Disable master transfer */
	twim->TWIM_CR = TWIM_CR_MDIS;
    1544:	f04f 0302 	mov.w	r3, #2
    1548:	6033      	str	r3, [r6, #0]
	/* Check for nack */
	if (transfer_status[twim_ch] == TWI_RECEIVE_NACK
    154a:	f640 1190 	movw	r1, #2448	; 0x990
    154e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1552:	5d48      	ldrb	r0, [r1, r5]
    1554:	b242      	sxtb	r2, r0
    1556:	f112 0f04 	cmn.w	r2, #4
    155a:	d00b      	beq.n	1574 <twi_master_write+0x244>
			|| transfer_status[twim_ch] == TWI_ARBITRATION_LOST) {
    155c:	f640 1390 	movw	r3, #2448	; 0x990
    1560:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1564:	5d59      	ldrb	r1, [r3, r5]
    1566:	b248      	sxtb	r0, r1
		return ERR_IO_ERROR;
    1568:	f110 0f02 	cmn.w	r0, #2
    156c:	bf0c      	ite	eq
    156e:	22ff      	moveq	r2, #255	; 0xff
    1570:	2200      	movne	r2, #0
    1572:	e001      	b.n	1578 <twi_master_write+0x248>
    1574:	f04f 02ff 	mov.w	r2, #255	; 0xff
	}
	return STATUS_OK;
}
    1578:	b250      	sxtb	r0, r2
    157a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    157e:	bf00      	nop

00001580 <twim_set_callback>:
 * \param callback   Callback function pointer
 * \param irq_level  Interrupt level
 */
void twim_set_callback(Twim *twim, uint32_t interrupt_source,
	twim_callback_t callback, uint8_t irq_level)
{
    1580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1584:	4604      	mov	r4, r0
    1586:	460e      	mov	r6, r1
    1588:	4690      	mov	r8, r2
    158a:	461f      	mov	r7, r3
	uint32_t twim_ch = find_twim_channel_num(twim);
    158c:	f640 63ed 	movw	r3, #3821	; 0xeed
    1590:	f2c0 0300 	movt	r3, #0
    1594:	4798      	blx	r3
	uint32_t irq_line = 0;

#if defined(ID_TWIM3)
	if (twim == TWIM3) {
    1596:	f44f 4540 	mov.w	r5, #49152	; 0xc000
    159a:	f2c4 0507 	movt	r5, #16391	; 0x4007
    159e:	42ac      	cmp	r4, r5
    15a0:	d00e      	beq.n	15c0 <twim_set_callback+0x40>
		irq_line = TWIM3_IRQn;
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
    15a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    15a6:	f2c4 0107 	movt	r1, #16391	; 0x4007
    15aa:	428c      	cmp	r4, r1
    15ac:	d011      	beq.n	15d2 <twim_set_callback+0x52>
		irq_line = TWIM2_IRQn;
	}
#endif
#if defined(ID_TWIM1)
	if (twim == TWIM1) {
    15ae:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    15b2:	f2c4 0201 	movt	r2, #16385	; 0x4001
    15b6:	4294      	cmp	r4, r2
    15b8:	d04f      	beq.n	165a <twim_set_callback+0xda>
 */
void twim_set_callback(Twim *twim, uint32_t interrupt_source,
	twim_callback_t callback, uint8_t irq_level)
{
	uint32_t twim_ch = find_twim_channel_num(twim);
	uint32_t irq_line = 0;
    15ba:	f04f 0500 	mov.w	r5, #0
    15be:	e001      	b.n	15c4 <twim_set_callback+0x44>

#if defined(ID_TWIM3)
	if (twim == TWIM3) {
		irq_line = TWIM3_IRQn;
    15c0:	f04f 054e 	mov.w	r5, #78	; 0x4e
	if (twim == TWIM1) {
		irq_line = TWIM1_IRQn;
	}
#endif
#if defined(ID_TWIM0)
	if (twim == TWIM0) {
    15c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    15c8:	f2c4 0101 	movt	r1, #16385	; 0x4001
    15cc:	428c      	cmp	r4, r1
    15ce:	d102      	bne.n	15d6 <twim_set_callback+0x56>
    15d0:	e030      	b.n	1634 <twim_set_callback+0xb4>
		irq_line = TWIM3_IRQn;
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
		irq_line = TWIM2_IRQn;
    15d2:	f04f 054d 	mov.w	r5, #77	; 0x4d
#if defined(ID_TWIM0)
	if (twim == TWIM0) {
		irq_line = TWIM0_IRQn;
	}
#endif
	twim_callback_pointer[twim_ch] = callback;
    15d6:	f640 239c 	movw	r3, #2716	; 0xa9c
    15da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    15de:	f843 8020 	str.w	r8, [r3, r0, lsl #2]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    15e2:	462a      	mov	r2, r5
    15e4:	ea4f 1055 	mov.w	r0, r5, lsr #5
    15e8:	f005 051f 	and.w	r5, r5, #31
    15ec:	f04f 0101 	mov.w	r1, #1
    15f0:	fa01 f505 	lsl.w	r5, r1, r5
    15f4:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    15f8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    15fc:	f100 0160 	add.w	r1, r0, #96	; 0x60
    1600:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    1604:	ea4f 1707 	mov.w	r7, r7, lsl #4
    1608:	b2ff      	uxtb	r7, r7
    160a:	f102 4360 	add.w	r3, r2, #3758096384	; 0xe0000000
    160e:	f503 4161 	add.w	r1, r3, #57600	; 0xe100
    1612:	f881 7300 	strb.w	r7, [r1, #768]	; 0x300
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
    1616:	f44f 4261 	mov.w	r2, #57600	; 0xe100
    161a:	f2ce 0200 	movt	r2, #57344	; 0xe000
    161e:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
	NVIC_ClearPendingIRQ((IRQn_Type)irq_line);
	NVIC_SetPriority((IRQn_Type)irq_line, irq_level);
	NVIC_EnableIRQ((IRQn_Type)irq_line);
	twim_enable_interrupt(twim, interrupt_source);
    1622:	4620      	mov	r0, r4
    1624:	4631      	mov	r1, r6
    1626:	f241 3329 	movw	r3, #4905	; 0x1329
    162a:	f2c0 0300 	movt	r3, #0
    162e:	4798      	blx	r3
    1630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#if defined(ID_TWIM0)
	if (twim == TWIM0) {
		irq_line = TWIM0_IRQn;
	}
#endif
	twim_callback_pointer[twim_ch] = callback;
    1634:	f640 229c 	movw	r2, #2716	; 0xa9c
    1638:	f2c2 0200 	movt	r2, #8192	; 0x2000
    163c:	f842 8020 	str.w	r8, [r2, r0, lsl #2]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    1640:	f44f 4061 	mov.w	r0, #57600	; 0xe100
    1644:	f2ce 0000 	movt	r0, #57344	; 0xe000
    1648:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
    164c:	f8c0 5184 	str.w	r5, [r0, #388]	; 0x184
    1650:	f04f 0001 	mov.w	r0, #1
    1654:	f04f 023d 	mov.w	r2, #61	; 0x3d
    1658:	e7d4      	b.n	1604 <twim_set_callback+0x84>
    165a:	f640 239c 	movw	r3, #2716	; 0xa9c
    165e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1662:	f843 8020 	str.w	r8, [r3, r0, lsl #2]
    1666:	f44f 4061 	mov.w	r0, #57600	; 0xe100
    166a:	f2ce 0000 	movt	r0, #57344	; 0xe000
    166e:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
    1672:	f8c0 5184 	str.w	r5, [r0, #388]	; 0x184
    1676:	f04f 0001 	mov.w	r0, #1
    167a:	f04f 023f 	mov.w	r2, #63	; 0x3f
    167e:	e7c1      	b.n	1604 <twim_set_callback+0x84>

00001680 <TWIM0_Handler>:
	twim_enable_interrupt(twim, interrupt_source);
}

#if defined(ID_TWIM0)
void TWIM0_Handler(void)
{
    1680:	b508      	push	{r3, lr}
	twim_callback_pointer[0](TWIM0);
    1682:	f640 239c 	movw	r3, #2716	; 0xa9c
    1686:	f2c2 0300 	movt	r3, #8192	; 0x2000
    168a:	6819      	ldr	r1, [r3, #0]
    168c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    1690:	f2c4 0001 	movt	r0, #16385	; 0x4001
    1694:	4788      	blx	r1
    1696:	bd08      	pop	{r3, pc}

00001698 <TWIM1_Handler>:
}
#endif

#if defined(ID_TWIM1)
void TWIM1_Handler(void)
{
    1698:	b508      	push	{r3, lr}
	twim_callback_pointer[1](TWIM1);
    169a:	f640 239c 	movw	r3, #2716	; 0xa9c
    169e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    16a2:	6859      	ldr	r1, [r3, #4]
    16a4:	f44f 4040 	mov.w	r0, #49152	; 0xc000
    16a8:	f2c4 0001 	movt	r0, #16385	; 0x4001
    16ac:	4788      	blx	r1
    16ae:	bd08      	pop	{r3, pc}

000016b0 <TWIM2_Handler>:
}
#endif

#if defined(ID_TWIM2)
void TWIM2_Handler(void)
{
    16b0:	b508      	push	{r3, lr}
	twim_callback_pointer[2](TWIM2);
    16b2:	f640 239c 	movw	r3, #2716	; 0xa9c
    16b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    16ba:	6899      	ldr	r1, [r3, #8]
    16bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    16c0:	f2c4 0007 	movt	r0, #16391	; 0x4007
    16c4:	4788      	blx	r1
    16c6:	bd08      	pop	{r3, pc}

000016c8 <TWIM3_Handler>:
}
#endif

#if defined(ID_TWIM3)
void TWIM3_Handler(void)
{
    16c8:	b508      	push	{r3, lr}
	twim_callback_pointer[3](TWIM3);
    16ca:	f640 239c 	movw	r3, #2716	; 0xa9c
    16ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    16d2:	68d9      	ldr	r1, [r3, #12]
    16d4:	f44f 4040 	mov.w	r0, #49152	; 0xc000
    16d8:	f2c4 0007 	movt	r0, #16391	; 0x4007
    16dc:	4788      	blx	r1
    16de:	bd08      	pop	{r3, pc}

000016e0 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
    16e0:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
    16e2:	ea4f 1301 	mov.w	r3, r1, lsl #4
    16e6:	4293      	cmp	r3, r2
    16e8:	d910      	bls.n	170c <usart_set_async_baudrate+0x2c>
    16ea:	e020      	b.n	172e <usart_set_async_baudrate+0x4e>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
    16ec:	6841      	ldr	r1, [r0, #4]
    16ee:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
    16f2:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
    16f4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    16f8:	6202      	str	r2, [r0, #32]

	return 0;
    16fa:	f04f 0000 	mov.w	r0, #0
    16fe:	e029      	b.n	1754 <usart_set_async_baudrate+0x74>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
    1700:	f04f 0001 	mov.w	r0, #1
    1704:	e026      	b.n	1754 <usart_set_async_baudrate+0x74>
    1706:	f04f 0001 	mov.w	r0, #1
    170a:	e023      	b.n	1754 <usart_set_async_baudrate+0x74>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
    170c:	ea4f 04c2 	mov.w	r4, r2, lsl #3
    1710:	eb04 0253 	add.w	r2, r4, r3, lsr #1
    1714:	fbb2 f3f3 	udiv	r3, r2, r3
	cd = cd_fp >> 3;
    1718:	ea4f 02d3 	mov.w	r2, r3, lsr #3
	fp = cd_fp & 0x07;
    171c:	f003 0307 	and.w	r3, r3, #7
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
    1720:	f102 34ff 	add.w	r4, r2, #4294967295
    1724:	f64f 71fe 	movw	r1, #65534	; 0xfffe
    1728:	428c      	cmp	r4, r1
    172a:	d9e3      	bls.n	16f4 <usart_set_async_baudrate+0x14>
    172c:	e7e8      	b.n	1700 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
    172e:	ea4f 01c1 	mov.w	r1, r1, lsl #3
    1732:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    1736:	eb02 0451 	add.w	r4, r2, r1, lsr #1
    173a:	fbb4 f3f1 	udiv	r3, r4, r1
	cd = cd_fp >> 3;
    173e:	ea4f 02d3 	mov.w	r2, r3, lsr #3
	fp = cd_fp & 0x07;
    1742:	f003 0307 	and.w	r3, r3, #7
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
    1746:	f102 34ff 	add.w	r4, r2, #4294967295
    174a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
    174e:	428c      	cmp	r4, r1
    1750:	d9cc      	bls.n	16ec <usart_set_async_baudrate+0xc>
    1752:	e7d8      	b.n	1706 <usart_set_async_baudrate+0x26>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
    1754:	bc10      	pop	{r4}
    1756:	4770      	bx	lr

00001758 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
    1758:	f04f 0340 	mov.w	r3, #64	; 0x40
    175c:	6003      	str	r3, [r0, #0]
    175e:	4770      	bx	lr

00001760 <usart_reset_tx>:
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
    1760:	f04f 0388 	mov.w	r3, #136	; 0x88
    1764:	6003      	str	r3, [r0, #0]
    1766:	4770      	bx	lr

00001768 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
    1768:	f04f 0310 	mov.w	r3, #16
    176c:	6003      	str	r3, [r0, #0]
    176e:	4770      	bx	lr

00001770 <usart_reset_rx>:
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
    1770:	f04f 0324 	mov.w	r3, #36	; 0x24
    1774:	6003      	str	r3, [r0, #0]
    1776:	4770      	bx	lr

00001778 <usart_reset_status>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
    1778:	f44f 7380 	mov.w	r3, #256	; 0x100
    177c:	6003      	str	r3, [r0, #0]
    177e:	4770      	bx	lr

00001780 <usart_drive_DTR_pin_high>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_DTRDIS;
    1780:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    1784:	6003      	str	r3, [r0, #0]
    1786:	4770      	bx	lr

00001788 <usart_drive_RTS_pin_high>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
    1788:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    178c:	6003      	str	r3, [r0, #0]
    178e:	4770      	bx	lr

00001790 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
    1790:	6943      	ldr	r3, [r0, #20]
    1792:	f013 0f02 	tst.w	r3, #2
    1796:	d007      	beq.n	17a8 <usart_write+0x18>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
    1798:	ea4f 51c1 	mov.w	r1, r1, lsl #23
    179c:	ea4f 52d1 	mov.w	r2, r1, lsr #23
    17a0:	61c2      	str	r2, [r0, #28]
	return 0;
    17a2:	f04f 0000 	mov.w	r0, #0
    17a6:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
    17a8:	f04f 0001 	mov.w	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
    17ac:	4770      	bx	lr
    17ae:	bf00      	nop

000017b0 <usart_putchar>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
    17b0:	6943      	ldr	r3, [r0, #20]
    17b2:	f013 0f02 	tst.w	r3, #2
    17b6:	d0fb      	beq.n	17b0 <usart_putchar>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
    17b8:	ea4f 51c1 	mov.w	r1, r1, lsl #23
    17bc:	ea4f 52d1 	mov.w	r2, r1, lsr #23
    17c0:	61c2      	str	r2, [r0, #28]

	return 0;
}
    17c2:	f04f 0000 	mov.w	r0, #0
    17c6:	4770      	bx	lr

000017c8 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
    17c8:	6943      	ldr	r3, [r0, #20]
    17ca:	f013 0f01 	tst.w	r3, #1
    17ce:	d008      	beq.n	17e2 <usart_read+0x1a>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
    17d0:	6980      	ldr	r0, [r0, #24]
    17d2:	ea4f 52c0 	mov.w	r2, r0, lsl #23
    17d6:	ea4f 53d2 	mov.w	r3, r2, lsr #23
    17da:	600b      	str	r3, [r1, #0]

	return 0;
    17dc:	f04f 0000 	mov.w	r0, #0
    17e0:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
    17e2:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
    17e6:	4770      	bx	lr

000017e8 <usart_getchar>:
 * \retval 1 on failure.
 */
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
	/* Wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
    17e8:	6943      	ldr	r3, [r0, #20]
    17ea:	f013 0f01 	tst.w	r3, #1
    17ee:	d0fb      	beq.n	17e8 <usart_getchar>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
    17f0:	6980      	ldr	r0, [r0, #24]
    17f2:	ea4f 52c0 	mov.w	r2, r0, lsl #23
    17f6:	ea4f 53d2 	mov.w	r3, r2, lsr #23
    17fa:	600b      	str	r3, [r1, #0]

	return 0;
}
    17fc:	f04f 0000 	mov.w	r0, #0
    1800:	4770      	bx	lr
    1802:	bf00      	nop

00001804 <usart_disable_writeprotect>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
    1804:	f44f 4382 	mov.w	r3, #16640	; 0x4100
    1808:	f2c5 5353 	movt	r3, #21843	; 0x5553
    180c:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
    1810:	4770      	bx	lr
    1812:	bf00      	nop

00001814 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
    1814:	b510      	push	{r4, lr}
    1816:	4604      	mov	r4, r0
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
    1818:	f641 0305 	movw	r3, #6149	; 0x1805
    181c:	f2c0 0300 	movt	r3, #0
    1820:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
    1822:	f04f 0000 	mov.w	r0, #0
    1826:	6060      	str	r0, [r4, #4]
	p_usart->US_RTOR = 0;
    1828:	6260      	str	r0, [r4, #36]	; 0x24
	p_usart->US_TTGR = 0;
    182a:	62a0      	str	r0, [r4, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
    182c:	4620      	mov	r0, r4
    182e:	f241 7161 	movw	r1, #5985	; 0x1761
    1832:	f2c0 0100 	movt	r1, #0
    1836:	4788      	blx	r1
	usart_reset_rx(p_usart);
    1838:	4620      	mov	r0, r4
    183a:	f241 7271 	movw	r2, #6001	; 0x1771
    183e:	f2c0 0200 	movt	r2, #0
    1842:	4790      	blx	r2
	/* Reset status bits. */
	usart_reset_status(p_usart);
    1844:	4620      	mov	r0, r4
    1846:	f241 7379 	movw	r3, #6009	; 0x1779
    184a:	f2c0 0300 	movt	r3, #0
    184e:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
    1850:	4620      	mov	r0, r4
    1852:	f241 7189 	movw	r1, #6025	; 0x1789
    1856:	f2c0 0100 	movt	r1, #0
    185a:	4788      	blx	r1
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
    185c:	4620      	mov	r0, r4
    185e:	f241 7281 	movw	r2, #6017	; 0x1781
    1862:	f2c0 0200 	movt	r2, #0
    1866:	4790      	blx	r2
    1868:	bd10      	pop	{r4, pc}
    186a:	bf00      	nop

0000186c <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
    186c:	b570      	push	{r4, r5, r6, lr}
    186e:	4605      	mov	r5, r0
    1870:	460c      	mov	r4, r1
    1872:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
    1874:	f641 0315 	movw	r3, #6165	; 0x1815
    1878:	f2c0 0300 	movt	r3, #0
    187c:	4798      	blx	r3

	ul_reg_val = 0;
    187e:	f640 10d8 	movw	r0, #2520	; 0x9d8
    1882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1886:	f04f 0100 	mov.w	r1, #0
    188a:	6001      	str	r1, [r0, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
    188c:	b1cc      	cbz	r4, 18c2 <usart_init_rs232+0x56>
    188e:	4628      	mov	r0, r5
    1890:	6821      	ldr	r1, [r4, #0]
    1892:	4632      	mov	r2, r6
    1894:	f241 63e1 	movw	r3, #5857	; 0x16e1
    1898:	f2c0 0300 	movt	r3, #0
    189c:	4798      	blx	r3
    189e:	b998      	cbnz	r0, 18c8 <usart_init_rs232+0x5c>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
    18a0:	68a2      	ldr	r2, [r4, #8]
    18a2:	6861      	ldr	r1, [r4, #4]
    18a4:	ea42 0301 	orr.w	r3, r2, r1
    18a8:	6922      	ldr	r2, [r4, #16]
    18aa:	4313      	orrs	r3, r2
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
    18ac:	68e1      	ldr	r1, [r4, #12]
    18ae:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
    18b0:	f640 12d8 	movw	r2, #2520	; 0x9d8
    18b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    18b8:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
    18ba:	6869      	ldr	r1, [r5, #4]
    18bc:	430b      	orrs	r3, r1
    18be:	606b      	str	r3, [r5, #4]

	return 0;
    18c0:	bd70      	pop	{r4, r5, r6, pc}

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
    18c2:	f04f 0001 	mov.w	r0, #1
    18c6:	bd70      	pop	{r4, r5, r6, pc}
    18c8:	f04f 0001 	mov.w	r0, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
    18cc:	bd70      	pop	{r4, r5, r6, pc}
    18ce:	bf00      	nop

000018d0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
    18d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    18d2:	b083      	sub	sp, #12
    18d4:	4604      	mov	r4, r0
    18d6:	460d      	mov	r5, r1
	uint32_t val = 0;
    18d8:	f04f 0300 	mov.w	r3, #0
    18dc:	9301      	str	r3, [sp, #4]
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
    18de:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    18e2:	f2c4 0002 	movt	r0, #16386	; 0x4002
    18e6:	4284      	cmp	r4, r0
    18e8:	d10f      	bne.n	190a <usart_serial_getchar+0x3a>
		while (usart_read(p_usart, &val));
    18ea:	f44f 4680 	mov.w	r6, #16384	; 0x4000
    18ee:	f2c4 0602 	movt	r6, #16386	; 0x4002
    18f2:	f241 77c9 	movw	r7, #6089	; 0x17c9
    18f6:	f2c0 0700 	movt	r7, #0
    18fa:	4630      	mov	r0, r6
    18fc:	a901      	add	r1, sp, #4
    18fe:	47b8      	blx	r7
    1900:	2800      	cmp	r0, #0
    1902:	d1fa      	bne.n	18fa <usart_serial_getchar+0x2a>
		*data = (uint8_t)(val & 0xFF);
    1904:	9901      	ldr	r1, [sp, #4]
    1906:	7029      	strb	r1, [r5, #0]
    1908:	e02b      	b.n	1962 <usart_serial_getchar+0x92>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
    190a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    190e:	f2c4 0102 	movt	r1, #16386	; 0x4002
    1912:	428c      	cmp	r4, r1
    1914:	d10f      	bne.n	1936 <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
    1916:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    191a:	f2c4 0402 	movt	r4, #16386	; 0x4002
    191e:	f241 76c9 	movw	r6, #6089	; 0x17c9
    1922:	f2c0 0600 	movt	r6, #0
    1926:	4620      	mov	r0, r4
    1928:	a901      	add	r1, sp, #4
    192a:	47b0      	blx	r6
    192c:	2800      	cmp	r0, #0
    192e:	d1fa      	bne.n	1926 <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
    1930:	9801      	ldr	r0, [sp, #4]
    1932:	7028      	strb	r0, [r5, #0]
    1934:	e02a      	b.n	198c <usart_serial_getchar+0xbc>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
    1936:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    193a:	f2c4 0202 	movt	r2, #16386	; 0x4002
    193e:	4294      	cmp	r4, r2
    1940:	d10f      	bne.n	1962 <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
    1942:	f44f 4440 	mov.w	r4, #49152	; 0xc000
    1946:	f2c4 0402 	movt	r4, #16386	; 0x4002
    194a:	f241 76c9 	movw	r6, #6089	; 0x17c9
    194e:	f2c0 0600 	movt	r6, #0
    1952:	4620      	mov	r0, r4
    1954:	a901      	add	r1, sp, #4
    1956:	47b0      	blx	r6
    1958:	2800      	cmp	r0, #0
    195a:	d1fa      	bne.n	1952 <usart_serial_getchar+0x82>
		*data = (uint8_t)(val & 0xFF);
    195c:	9b01      	ldr	r3, [sp, #4]
    195e:	702b      	strb	r3, [r5, #0]
    1960:	e014      	b.n	198c <usart_serial_getchar+0xbc>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
    1962:	f04f 0200 	mov.w	r2, #0
    1966:	f2c4 0203 	movt	r2, #16387	; 0x4003
    196a:	4294      	cmp	r4, r2
    196c:	d10e      	bne.n	198c <usart_serial_getchar+0xbc>
		while (usart_read(p_usart, &val));
    196e:	f04f 0400 	mov.w	r4, #0
    1972:	f2c4 0403 	movt	r4, #16387	; 0x4003
    1976:	f241 76c9 	movw	r6, #6089	; 0x17c9
    197a:	f2c0 0600 	movt	r6, #0
    197e:	4620      	mov	r0, r4
    1980:	a901      	add	r1, sp, #4
    1982:	47b0      	blx	r6
    1984:	2800      	cmp	r0, #0
    1986:	d1fa      	bne.n	197e <usart_serial_getchar+0xae>
		*data = (uint8_t)(val & 0xFF);
    1988:	9b01      	ldr	r3, [sp, #4]
    198a:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
    198c:	b003      	add	sp, #12
    198e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001990 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
    1990:	b570      	push	{r4, r5, r6, lr}
    1992:	460c      	mov	r4, r1
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
    1994:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    1998:	f2c4 0302 	movt	r3, #16386	; 0x4002
    199c:	4298      	cmp	r0, r3
    199e:	d10f      	bne.n	19c0 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
    19a0:	f44f 4580 	mov.w	r5, #16384	; 0x4000
    19a4:	f2c4 0502 	movt	r5, #16386	; 0x4002
    19a8:	f241 7691 	movw	r6, #6033	; 0x1791
    19ac:	f2c0 0600 	movt	r6, #0
    19b0:	4628      	mov	r0, r5
    19b2:	4621      	mov	r1, r4
    19b4:	47b0      	blx	r6
    19b6:	2800      	cmp	r0, #0
    19b8:	d1fa      	bne.n	19b0 <usart_serial_putchar+0x20>
		return 1;
    19ba:	f04f 0001 	mov.w	r0, #1
    19be:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
    19c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    19c4:	f2c4 0102 	movt	r1, #16386	; 0x4002
    19c8:	4288      	cmp	r0, r1
    19ca:	d10f      	bne.n	19ec <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
    19cc:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    19d0:	f2c4 0502 	movt	r5, #16386	; 0x4002
    19d4:	f241 7691 	movw	r6, #6033	; 0x1791
    19d8:	f2c0 0600 	movt	r6, #0
    19dc:	4628      	mov	r0, r5
    19de:	4621      	mov	r1, r4
    19e0:	47b0      	blx	r6
    19e2:	2800      	cmp	r0, #0
    19e4:	d1fa      	bne.n	19dc <usart_serial_putchar+0x4c>
		return 1;
    19e6:	f04f 0001 	mov.w	r0, #1
    19ea:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
    19ec:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    19f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
    19f4:	4290      	cmp	r0, r2
    19f6:	d10f      	bne.n	1a18 <usart_serial_putchar+0x88>
		while (usart_write(p_usart, c)!=0);
    19f8:	f44f 4540 	mov.w	r5, #49152	; 0xc000
    19fc:	f2c4 0502 	movt	r5, #16386	; 0x4002
    1a00:	f241 7691 	movw	r6, #6033	; 0x1791
    1a04:	f2c0 0600 	movt	r6, #0
    1a08:	4628      	mov	r0, r5
    1a0a:	4621      	mov	r1, r4
    1a0c:	47b0      	blx	r6
    1a0e:	2800      	cmp	r0, #0
    1a10:	d1fa      	bne.n	1a08 <usart_serial_putchar+0x78>
		return 1;
    1a12:	f04f 0001 	mov.w	r0, #1
    1a16:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
    1a18:	f04f 0300 	mov.w	r3, #0
    1a1c:	f2c4 0303 	movt	r3, #16387	; 0x4003
    1a20:	4298      	cmp	r0, r3
    1a22:	d10f      	bne.n	1a44 <usart_serial_putchar+0xb4>
		while (usart_write(p_usart, c)!=0);
    1a24:	f04f 0500 	mov.w	r5, #0
    1a28:	f2c4 0503 	movt	r5, #16387	; 0x4003
    1a2c:	f241 7691 	movw	r6, #6033	; 0x1791
    1a30:	f2c0 0600 	movt	r6, #0
    1a34:	4628      	mov	r0, r5
    1a36:	4621      	mov	r1, r4
    1a38:	47b0      	blx	r6
    1a3a:	2800      	cmp	r0, #0
    1a3c:	d1fa      	bne.n	1a34 <usart_serial_putchar+0xa4>
		return 1;
    1a3e:	f04f 0001 	mov.w	r0, #1
    1a42:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
    1a44:	f04f 0000 	mov.w	r0, #0
}
    1a48:	bd70      	pop	{r4, r5, r6, pc}
    1a4a:	bf00      	nop

00001a4c <servo_move_xaxis>:
	
}


void servo_move_xaxis(uint32_t dutycycle)
{
    1a4c:	b570      	push	{r4, r5, r6, lr}
    1a4e:	4605      	mov	r5, r0
	uint32_t ra, rc;
	/* Configure waveform frequency and duty cycle. */
	rc = (sysclk_get_peripheral_bus_hz(TC) /
    1a50:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    1a54:	f2c4 0401 	movt	r4, #16385	; 0x4001
    1a58:	4620      	mov	r0, r4
    1a5a:	f242 1341 	movw	r3, #8513	; 0x2141
    1a5e:	f2c0 0300 	movt	r3, #0
    1a62:	4798      	blx	r3
    1a64:	f247 3191 	movw	r1, #29585	; 0x7391
    1a68:	f6c5 519f 	movt	r1, #23967	; 0x5d9f
    1a6c:	fba1 1600 	umull	r1, r6, r1, r0
    1a70:	ea4f 2616 	mov.w	r6, r6, lsr #8
			CLOCK_DIV /
			SERVO_FREQ);
	tc_write_rc(TC, TC_CHANNEL_WAVEFORM, rc);
    1a74:	4620      	mov	r0, r4
    1a76:	f04f 0102 	mov.w	r1, #2
    1a7a:	4632      	mov	r2, r6
    1a7c:	f240 537d 	movw	r3, #1405	; 0x57d
    1a80:	f2c0 0300 	movt	r3, #0
    1a84:	4798      	blx	r3
	ra = (100 - dutycycle) * rc / 100;
    1a86:	f1c5 0064 	rsb	r0, r5, #100	; 0x64
    1a8a:	fb00 f606 	mul.w	r6, r0, r6
    1a8e:	f248 521f 	movw	r2, #34079	; 0x851f
    1a92:	f2c5 12eb 	movt	r2, #20971	; 0x51eb
    1a96:	fba2 1306 	umull	r1, r3, r2, r6
	tc_write_ra(TC, TC_CHANNEL_WAVEFORM, ra);
    1a9a:	4620      	mov	r0, r4
    1a9c:	f04f 0102 	mov.w	r1, #2
    1aa0:	ea4f 1253 	mov.w	r2, r3, lsr #5
    1aa4:	f240 5375 	movw	r3, #1397	; 0x575
    1aa8:	f2c0 0300 	movt	r3, #0
    1aac:	4798      	blx	r3

	/* Enable TC TC_CHANNEL_WAVEFORM. */
	
	printf("Start waveform: Frequency = %d Hz,Duty Cycle = %2d%%\n\r",
    1aae:	f247 50b4 	movw	r0, #30132	; 0x75b4
    1ab2:	f2c0 0000 	movt	r0, #0
    1ab6:	f44f 71af 	mov.w	r1, #350	; 0x15e
    1aba:	462a      	mov	r2, r5
    1abc:	f643 334d 	movw	r3, #15181	; 0x3b4d
    1ac0:	f2c0 0300 	movt	r3, #0
    1ac4:	4798      	blx	r3
    1ac6:	bd70      	pop	{r4, r5, r6, pc}

00001ac8 <servo_move_yaxis>:
			SERVO_FREQ,
			dutycycle);
}

void servo_move_yaxis(uint32_t dutycycle)
{
    1ac8:	b570      	push	{r4, r5, r6, lr}
    1aca:	4605      	mov	r5, r0
	uint32_t ra1, rc1;
	/* Configure waveform frequency and duty cycle. */
	rc1 = (sysclk_get_peripheral_bus_hz(TC) /
    1acc:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    1ad0:	f2c4 0401 	movt	r4, #16385	; 0x4001
    1ad4:	4620      	mov	r0, r4
    1ad6:	f242 1341 	movw	r3, #8513	; 0x2141
    1ada:	f2c0 0300 	movt	r3, #0
    1ade:	4798      	blx	r3
    1ae0:	f247 3191 	movw	r1, #29585	; 0x7391
    1ae4:	f6c5 519f 	movt	r1, #23967	; 0x5d9f
    1ae8:	fba1 1600 	umull	r1, r6, r1, r0
    1aec:	ea4f 2616 	mov.w	r6, r6, lsr #8
	CLOCK_DIV /
	SERVO_FREQ);
	tc_write_rc(TC, TC_CHANNEL_WAVEFORMYAXIS, rc1);
    1af0:	4620      	mov	r0, r4
    1af2:	f04f 0100 	mov.w	r1, #0
    1af6:	4632      	mov	r2, r6
    1af8:	f240 537d 	movw	r3, #1405	; 0x57d
    1afc:	f2c0 0300 	movt	r3, #0
    1b00:	4798      	blx	r3
	ra1 = (100 - dutycycle) * rc1 / 100;
    1b02:	f1c5 0064 	rsb	r0, r5, #100	; 0x64
    1b06:	fb00 f606 	mul.w	r6, r0, r6
    1b0a:	f248 521f 	movw	r2, #34079	; 0x851f
    1b0e:	f2c5 12eb 	movt	r2, #20971	; 0x51eb
    1b12:	fba2 1306 	umull	r1, r3, r2, r6
	tc_write_ra(TC, TC_CHANNEL_WAVEFORMYAXIS, ra1);
    1b16:	4620      	mov	r0, r4
    1b18:	f04f 0100 	mov.w	r1, #0
    1b1c:	ea4f 1253 	mov.w	r2, r3, lsr #5
    1b20:	f240 5375 	movw	r3, #1397	; 0x575
    1b24:	f2c0 0300 	movt	r3, #0
    1b28:	4798      	blx	r3

	/* Enable TC TC_CHANNEL_WAVEFORM. */
	
	printf("Start waveform: Frequency = %d Hz,Duty Cycle = %2d%%\n\r",
    1b2a:	f247 50b4 	movw	r0, #30132	; 0x75b4
    1b2e:	f2c0 0000 	movt	r0, #0
    1b32:	f44f 71af 	mov.w	r1, #350	; 0x15e
    1b36:	462a      	mov	r2, r5
    1b38:	f643 334d 	movw	r3, #15181	; 0x3b4d
    1b3c:	f2c0 0300 	movt	r3, #0
    1b40:	4798      	blx	r3
    1b42:	bd70      	pop	{r4, r5, r6, pc}

00001b44 <main>:
 * \brief Application entry point for usart_serial example.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
    1b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b48:	b089      	sub	sp, #36	; 0x24
	status_code_t status, dutycycle1, dutycycle2;
	uint8_t addr, key;
	/* Initialize the SAM system. */
	sysclk_init();
    1b4a:	f243 2395 	movw	r3, #12949	; 0x3295
    1b4e:	f2c0 0300 	movt	r3, #0
    1b52:	4798      	blx	r3
	board_init();
    1b54:	f243 307d 	movw	r0, #13181	; 0x337d
    1b58:	f2c0 0000 	movt	r0, #0
    1b5c:	4780      	blx	r0
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    1b5e:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    1b62:	f2c4 0402 	movt	r4, #16386	; 0x4002
    1b66:	f640 2158 	movw	r1, #2648	; 0xa58
    1b6a:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1b6e:	600c      	str	r4, [r1, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1b70:	f640 2554 	movw	r5, #2644	; 0xa54
    1b74:	f2c2 0500 	movt	r5, #8192	; 0x2000
    1b78:	f641 1291 	movw	r2, #6545	; 0x1991
    1b7c:	f2c0 0200 	movt	r2, #0
    1b80:	602a      	str	r2, [r5, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1b82:	f640 2650 	movw	r6, #2640	; 0xa50
    1b86:	f2c2 0600 	movt	r6, #8192	; 0x2000
    1b8a:	f641 07d1 	movw	r7, #6353	; 0x18d1
    1b8e:	f2c0 0700 	movt	r7, #0
    1b92:	6037      	str	r7, [r6, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
    1b94:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
    1b98:	9301      	str	r3, [sp, #4]
	usart_settings.char_length = opt->charlength;
    1b9a:	f04f 00c0 	mov.w	r0, #192	; 0xc0
    1b9e:	9002      	str	r0, [sp, #8]
	usart_settings.parity_type = opt->paritytype;
    1ba0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    1ba4:	9103      	str	r1, [sp, #12]
	usart_settings.stop_bits= opt->stopbits;
    1ba6:	f04f 0500 	mov.w	r5, #0
    1baa:	9504      	str	r5, [sp, #16]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
    1bac:	9505      	str	r5, [sp, #20]
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_hz());
#endif
#if (SAM4L)
		sysclk_enable_peripheral_clock(p_usart);
    1bae:	4620      	mov	r0, r4
    1bb0:	f242 483d 	movw	r8, #9277	; 0x243d
    1bb4:	f2c0 0800 	movt	r8, #0
    1bb8:	47c0      	blx	r8
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
    1bba:	4620      	mov	r0, r4
    1bbc:	f242 1241 	movw	r2, #8513	; 0x2141
    1bc0:	f2c0 0200 	movt	r2, #0
    1bc4:	4790      	blx	r2
    1bc6:	4602      	mov	r2, r0
    1bc8:	4620      	mov	r0, r4
    1bca:	a901      	add	r1, sp, #4
    1bcc:	f641 066d 	movw	r6, #6253	; 0x186d
    1bd0:	f2c0 0600 	movt	r6, #0
    1bd4:	47b0      	blx	r6
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
    1bd6:	4620      	mov	r0, r4
    1bd8:	f241 7759 	movw	r7, #5977	; 0x1759
    1bdc:	f2c0 0700 	movt	r7, #0
    1be0:	47b8      	blx	r7
		usart_enable_rx(p_usart);
    1be2:	4620      	mov	r0, r4
    1be4:	f241 7469 	movw	r4, #5993	; 0x1769
    1be8:	f2c0 0400 	movt	r4, #0
    1bec:	47a0      	blx	r4
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    1bee:	f240 0650 	movw	r6, #80	; 0x50
    1bf2:	f2c2 0600 	movt	r6, #8192	; 0x2000
    1bf6:	6833      	ldr	r3, [r6, #0]
    1bf8:	6898      	ldr	r0, [r3, #8]
    1bfa:	4629      	mov	r1, r5
    1bfc:	f643 4751 	movw	r7, #15441	; 0x3c51
    1c00:	f2c0 0700 	movt	r7, #0
    1c04:	47b8      	blx	r7
	setbuf(stdin, NULL);
    1c06:	6830      	ldr	r0, [r6, #0]
    1c08:	6840      	ldr	r0, [r0, #4]
    1c0a:	4629      	mov	r1, r5
    1c0c:	47b8      	blx	r7
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    1c0e:	f44f 54a0 	mov.w	r4, #5120	; 0x1400
    1c12:	f2c4 040e 	movt	r4, #16398	; 0x400e
    1c16:	f04f 0110 	mov.w	r1, #16
    1c1a:	67a1      	str	r1, [r4, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    1c1c:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    1c20:	f8c4 10c8 	str.w	r1, [r4, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    1c24:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
    1c28:	6161      	str	r1, [r4, #20]
	} else {
		base->GPIO_PMR0C = mask;
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
    1c2a:	6261      	str	r1, [r4, #36]	; 0x24

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    1c2c:	63a1      	str	r1, [r4, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    1c2e:	60a1      	str	r1, [r4, #8]
	/* Configure PIO Pins for TC */
	ioport_set_pin_mode(PIN_TC_WAVEFORM, PIN_TC_WAVEFORM_MUX);
	/* Disable IO to enable peripheral mode) */
	ioport_disable_pin(PIN_TC_WAVEFORM);
	/* Configure the PMC to enable the TC module. */
	sysclk_enable_peripheral_clock(ID_TC_WAVEFORM);
    1c30:	f44f 4680 	mov.w	r6, #16384	; 0x4000
    1c34:	f2c4 0601 	movt	r6, #16385	; 0x4001
    1c38:	4630      	mov	r0, r6
    1c3a:	47c0      	blx	r8

	/* Init TC to waveform mode. */
	tc_init(TC, TC_CHANNEL_WAVEFORM,
    1c3c:	f24c 0701 	movw	r7, #49153	; 0xc001
    1c40:	f2c0 0709 	movt	r7, #9
    1c44:	4630      	mov	r0, r6
    1c46:	f04f 0102 	mov.w	r1, #2
    1c4a:	463a      	mov	r2, r7
    1c4c:	f240 5a4d 	movw	sl, #1357	; 0x54d
    1c50:	f2c0 0a00 	movt	sl, #0
    1c54:	47d0      	blx	sl
			| TC_CMR_WAVE /* Waveform mode is enabled */
			| TC_CMR_ACPA_SET /* RA Compare Effect: set */
			| TC_CMR_ACPC_CLEAR /* RC Compare Effect: clear */
			| TC_CMR_CPCTRG /* UP mode with automatic trigger on RC Compare */
	);
	tc_start(TC, TC_CHANNEL_WAVEFORM);
    1c56:	4630      	mov	r0, r6
    1c58:	f04f 0102 	mov.w	r1, #2
    1c5c:	f240 5969 	movw	r9, #1385	; 0x569
    1c60:	f2c0 0900 	movt	r9, #0
    1c64:	47c8      	blx	r9
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    1c66:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1c6a:	67a2      	str	r2, [r4, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    1c6c:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    1c70:	f8c4 20c8 	str.w	r2, [r4, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    1c74:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    1c78:	61a2      	str	r2, [r4, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    1c7a:	62a2      	str	r2, [r4, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    1c7c:	63a2      	str	r2, [r4, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    1c7e:	60a2      	str	r2, [r4, #8]
	/* Configure PIO Pins for TC */
	ioport_set_pin_mode(PIN_TC_WAVEFORMYAXIS, PIN_TC_WAVEFORM_MUXYAXIS);
	/* Disable IO to enable peripheral mode) */
	ioport_disable_pin(PIN_TC_WAVEFORMYAXIS);
	/* Configure the PMC to enable the TC module. */
	sysclk_enable_peripheral_clock(ID_TC_WAVEFORM);
    1c80:	4630      	mov	r0, r6
    1c82:	47c0      	blx	r8

	/* Init TC to waveform mode. */
	tc_init(TC, TC_CHANNEL_WAVEFORMYAXIS,
    1c84:	4630      	mov	r0, r6
    1c86:	4629      	mov	r1, r5
    1c88:	463a      	mov	r2, r7
    1c8a:	47d0      	blx	sl
	| TC_CMR_WAVE /* Waveform mode is enabled */
	| TC_CMR_ACPA_SET /* RA Compare Effect: set */
	| TC_CMR_ACPC_CLEAR /* RC Compare Effect: clear */
	| TC_CMR_CPCTRG /* UP mode with automatic trigger on RC Compare */
	);
	tc_start(TC, TC_CHANNEL_WAVEFORMYAXIS);
    1c8c:	4630      	mov	r0, r6
    1c8e:	4629      	mov	r1, r5
    1c90:	47c8      	blx	r9
	//init_twi();
	/* Configure UART for debug message output. */
	configure_console();
	tc_waveform_initialize();
	/* Output example information. */
	puts("\n\r\nCamera App\n\r");
    1c92:	f247 50ec 	movw	r0, #30188	; 0x75ec
    1c96:	f2c0 0000 	movt	r0, #0
    1c9a:	f643 4301 	movw	r3, #15361	; 0x3c01
    1c9e:	f2c0 0300 	movt	r3, #0
    1ca2:	4798      	blx	r3

	
	
	dutycycle1 = 50; //set to the middle
	dutycycle2 = 50;
	servo_move_xaxis(dutycycle1);
    1ca4:	f04f 0032 	mov.w	r0, #50	; 0x32
    1ca8:	f641 264d 	movw	r6, #6733	; 0x1a4d
    1cac:	f2c0 0600 	movt	r6, #0
    1cb0:	47b0      	blx	r6
	servo_move_yaxis(dutycycle2);
    1cb2:	f04f 0032 	mov.w	r0, #50	; 0x32
    1cb6:	f641 24c9 	movw	r4, #6857	; 0x1ac9
    1cba:	f2c0 0400 	movt	r4, #0
    1cbe:	47a0      	blx	r4
	dutycycle);
}

static inline void servo_stop_xaxis()
{
	servo_move_xaxis(0);
    1cc0:	4628      	mov	r0, r5
    1cc2:	47b0      	blx	r6
}

static inline void servo_stop_yaxis()
{
	servo_move_yaxis(0);
    1cc4:	4628      	mov	r0, r5
    1cc6:	47a0      	blx	r4
	servo_move_xaxis(dutycycle1);
	servo_move_yaxis(dutycycle2);
	servo_stop_xaxis();
	servo_stop_yaxis();
	
	if (STATUS_OK == OV7670_init())
    1cc8:	f240 751d 	movw	r5, #1821	; 0x71d
    1ccc:	f2c0 0500 	movt	r5, #0
    1cd0:	47a8      	blx	r5
    1cd2:	b948      	cbnz	r0, 1ce8 <main+0x1a4>
	{
		printf("Initialise success\n\r");
    1cd4:	f247 50fc 	movw	r0, #30204	; 0x75fc
    1cd8:	f2c0 0000 	movt	r0, #0
    1cdc:	f643 374d 	movw	r7, #15181	; 0x3b4d
    1ce0:	f2c0 0700 	movt	r7, #0
    1ce4:	47b8      	blx	r7
    1ce6:	e008      	b.n	1cfa <main+0x1b6>
	}
	else
	{
		printf("Initialise fail\n\r");
    1ce8:	f247 6014 	movw	r0, #30228	; 0x7614
    1cec:	f2c0 0000 	movt	r0, #0
    1cf0:	f643 314d 	movw	r1, #15181	; 0x3b4d
    1cf4:	f2c0 0100 	movt	r1, #0
    1cf8:	4788      	blx	r1
 * \brief Application entry point for usart_serial example.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
    1cfa:	f04f 0632 	mov.w	r6, #50	; 0x32
    1cfe:	4637      	mov	r7, r6
		printf("Initialise fail\n\r");
	}
	
	
	while (1) {
		scanf("%c", (char *)&key);
    1d00:	f247 6528 	movw	r5, #30248	; 0x7628
    1d04:	f2c0 0500 	movt	r5, #0
    1d08:	f643 4411 	movw	r4, #15377	; 0x3c11
    1d0c:	f2c0 0400 	movt	r4, #0

		switch (key) 
		{
			case 'h':
				printf("Help\n\r----\n\nw,a,s,d - move camera\n\rp - take photo\n\r");
    1d10:	f247 692c 	movw	r9, #30252	; 0x762c
    1d14:	f2c0 0900 	movt	r9, #0
    1d18:	f643 384d 	movw	r8, #15181	; 0x3b4d
    1d1c:	f2c0 0800 	movt	r8, #0
		printf("Initialise fail\n\r");
	}
	
	
	while (1) {
		scanf("%c", (char *)&key);
    1d20:	4628      	mov	r0, r5
    1d22:	f10d 011f 	add.w	r1, sp, #31
    1d26:	47a0      	blx	r4

		switch (key) 
    1d28:	f89d 101f 	ldrb.w	r1, [sp, #31]
    1d2c:	f1a1 0061 	sub.w	r0, r1, #97	; 0x61
    1d30:	2816      	cmp	r0, #22
    1d32:	f200 80af 	bhi.w	1e94 <main+0x350>
    1d36:	e8df f000 	tbb	[pc, r0]
    1d3a:	ad0f      	.short	0xad0f
    1d3c:	adad30ad 	.word	0xadad30ad
    1d40:	adad0cad 	.word	0xadad0cad
    1d44:	adadadad 	.word	0xadadadad
    1d48:	adad93ad 	.word	0xadad93ad
    1d4c:	adadad72 	.word	0xadadad72
    1d50:	51          	.byte	0x51
    1d51:	00          	.byte	0x00
		{
			case 'h':
				printf("Help\n\r----\n\nw,a,s,d - move camera\n\rp - take photo\n\r");
    1d52:	4648      	mov	r0, r9
    1d54:	47c0      	blx	r8
				break;
    1d56:	e7e3      	b.n	1d20 <main+0x1dc>
			case 'a':
				dutycycle1 += SERVO_STEP;
    1d58:	f107 0705 	add.w	r7, r7, #5
    1d5c:	b2f8      	uxtb	r0, r7
				if(dutycycle1 < 20)
    1d5e:	b242      	sxtb	r2, r0
    1d60:	2a13      	cmp	r2, #19
    1d62:	dd05      	ble.n	1d70 <main+0x22c>
    1d64:	4613      	mov	r3, r2
    1d66:	2b64      	cmp	r3, #100	; 0x64
    1d68:	bfa8      	it	ge
    1d6a:	2364      	movge	r3, #100	; 0x64
    1d6c:	b2df      	uxtb	r7, r3
    1d6e:	e001      	b.n	1d74 <main+0x230>
				{
					dutycycle1 = 20;
    1d70:	f04f 0714 	mov.w	r7, #20
				else if (dutycycle1 >100)
				{
					dutycycle1 = 100;
				}
			
				servo_move_xaxis(dutycycle1);
    1d74:	b278      	sxtb	r0, r7
    1d76:	f641 2a4d 	movw	sl, #6733	; 0x1a4d
    1d7a:	f2c0 0a00 	movt	sl, #0
    1d7e:	47d0      	blx	sl
				delay_ms(500);
    1d80:	f244 500e 	movw	r0, #17678	; 0x450e
    1d84:	f2c0 0003 	movt	r0, #3
    1d88:	f240 0101 	movw	r1, #1
    1d8c:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1d90:	4788      	blx	r1
	dutycycle);
}

static inline void servo_stop_xaxis()
{
	servo_move_xaxis(0);
    1d92:	f04f 0000 	mov.w	r0, #0
    1d96:	47d0      	blx	sl
    1d98:	e7c2      	b.n	1d20 <main+0x1dc>
				servo_move_xaxis(dutycycle1);
				delay_ms(500);
				servo_stop_xaxis();
				break;
			case 'd':
				dutycycle1 -= SERVO_STEP;
    1d9a:	f1a7 0705 	sub.w	r7, r7, #5
    1d9e:	b2ff      	uxtb	r7, r7
				if(dutycycle1 < 20)
    1da0:	b27a      	sxtb	r2, r7
    1da2:	2a13      	cmp	r2, #19
    1da4:	dd05      	ble.n	1db2 <main+0x26e>
    1da6:	4613      	mov	r3, r2
    1da8:	2b64      	cmp	r3, #100	; 0x64
    1daa:	bfa8      	it	ge
    1dac:	2364      	movge	r3, #100	; 0x64
    1dae:	b2df      	uxtb	r7, r3
    1db0:	e001      	b.n	1db6 <main+0x272>
				{
					dutycycle1 = 20;
    1db2:	f04f 0714 	mov.w	r7, #20
				}
				else if (dutycycle1 >100)
				{
					dutycycle1 = 100;
				}
				servo_move_xaxis(dutycycle1);
    1db6:	b278      	sxtb	r0, r7
    1db8:	f641 2b4d 	movw	fp, #6733	; 0x1a4d
    1dbc:	f2c0 0b00 	movt	fp, #0
    1dc0:	47d8      	blx	fp
				delay_ms(500);
    1dc2:	f244 500e 	movw	r0, #17678	; 0x450e
    1dc6:	f2c0 0003 	movt	r0, #3
    1dca:	f240 0101 	movw	r1, #1
    1dce:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1dd2:	4788      	blx	r1
	dutycycle);
}

static inline void servo_stop_xaxis()
{
	servo_move_xaxis(0);
    1dd4:	f04f 0000 	mov.w	r0, #0
    1dd8:	47d8      	blx	fp
    1dda:	e7a1      	b.n	1d20 <main+0x1dc>
				delay_ms(500);
				servo_stop_xaxis();
				break;
			
			case 'w':
				dutycycle2 += SERVO_STEP;
    1ddc:	f106 0605 	add.w	r6, r6, #5
    1de0:	b2f2      	uxtb	r2, r6
				if(dutycycle2 < 20)
    1de2:	b253      	sxtb	r3, r2
    1de4:	2b13      	cmp	r3, #19
    1de6:	dd05      	ble.n	1df4 <main+0x2b0>
    1de8:	461e      	mov	r6, r3
    1dea:	2e64      	cmp	r6, #100	; 0x64
    1dec:	bfa8      	it	ge
    1dee:	2664      	movge	r6, #100	; 0x64
    1df0:	b2f6      	uxtb	r6, r6
    1df2:	e001      	b.n	1df8 <main+0x2b4>
				{
					dutycycle2 = 20;
    1df4:	f04f 0614 	mov.w	r6, #20
				}
				else if (dutycycle2 >100)
				{
					dutycycle2 = 100;
				}
				servo_move_yaxis(dutycycle2);
    1df8:	b270      	sxtb	r0, r6
    1dfa:	f641 2bc9 	movw	fp, #6857	; 0x1ac9
    1dfe:	f2c0 0b00 	movt	fp, #0
    1e02:	47d8      	blx	fp
				delay_ms(500);
    1e04:	f244 500e 	movw	r0, #17678	; 0x450e
    1e08:	f2c0 0003 	movt	r0, #3
    1e0c:	f240 0101 	movw	r1, #1
    1e10:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1e14:	4788      	blx	r1
	servo_move_xaxis(0);
}

static inline void servo_stop_yaxis()
{
	servo_move_yaxis(0);
    1e16:	f04f 0000 	mov.w	r0, #0
    1e1a:	47d8      	blx	fp
    1e1c:	e780      	b.n	1d20 <main+0x1dc>
				delay_ms(500);
				servo_stop_yaxis();
				break;
				
			case 's':
				dutycycle2 -= SERVO_STEP;
    1e1e:	f1a6 0605 	sub.w	r6, r6, #5
    1e22:	b2f0      	uxtb	r0, r6
				if(dutycycle2 < 20)
    1e24:	b242      	sxtb	r2, r0
    1e26:	2a13      	cmp	r2, #19
    1e28:	dd05      	ble.n	1e36 <main+0x2f2>
    1e2a:	4613      	mov	r3, r2
    1e2c:	2b64      	cmp	r3, #100	; 0x64
    1e2e:	bfa8      	it	ge
    1e30:	2364      	movge	r3, #100	; 0x64
    1e32:	b2de      	uxtb	r6, r3
    1e34:	e001      	b.n	1e3a <main+0x2f6>
				{
					dutycycle2 = 20;
    1e36:	f04f 0614 	mov.w	r6, #20
				}
				else if (dutycycle2 >100)
				{
					dutycycle2 = 100;
				}
				servo_move_yaxis(dutycycle2);
    1e3a:	b270      	sxtb	r0, r6
    1e3c:	f641 2ac9 	movw	sl, #6857	; 0x1ac9
    1e40:	f2c0 0a00 	movt	sl, #0
    1e44:	47d0      	blx	sl
				delay_ms(500);
    1e46:	f244 500e 	movw	r0, #17678	; 0x450e
    1e4a:	f2c0 0003 	movt	r0, #3
    1e4e:	f240 0101 	movw	r1, #1
    1e52:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1e56:	4788      	blx	r1
	servo_move_xaxis(0);
}

static inline void servo_stop_yaxis()
{
	servo_move_yaxis(0);
    1e58:	f04f 0000 	mov.w	r0, #0
    1e5c:	47d0      	blx	sl
    1e5e:	e75f      	b.n	1d20 <main+0x1dc>
				delay_ms(500);
				servo_stop_yaxis();
				break;
			
			case 'p':
				printf("Get Image!\n\r");
    1e60:	f247 6060 	movw	r0, #30304	; 0x7660
    1e64:	f2c0 0000 	movt	r0, #0
    1e68:	47c0      	blx	r8
				LoadImageToBuffer();
    1e6a:	f640 1065 	movw	r0, #2405	; 0x965
    1e6e:	f2c0 0000 	movt	r0, #0
    1e72:	4780      	blx	r0
				while ( STATUS_ERR_BUSY == GetImageIfAvailiable(0));
    1e74:	f04f 0b00 	mov.w	fp, #0
    1e78:	f640 2af1 	movw	sl, #2801	; 0xaf1
    1e7c:	f2c0 0a00 	movt	sl, #0
    1e80:	4658      	mov	r0, fp
    1e82:	47d0      	blx	sl
    1e84:	2819      	cmp	r0, #25
    1e86:	d0fb      	beq.n	1e80 <main+0x33c>
				printf("Done!\n\r");
    1e88:	f247 6070 	movw	r0, #30320	; 0x7670
    1e8c:	f2c0 0000 	movt	r0, #0
    1e90:	47c0      	blx	r8
				break;
    1e92:	e745      	b.n	1d20 <main+0x1dc>
		default:
			printf("Key 0x%02x pressed\n\r", key);
    1e94:	f247 6078 	movw	r0, #30328	; 0x7678
    1e98:	f2c0 0000 	movt	r0, #0
    1e9c:	47c0      	blx	r8
			break;
    1e9e:	e73f      	b.n	1d20 <main+0x1dc>

00001ea0 <osc_priv_enable_osc0>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1ea0:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1ea4:	b672      	cpsid	i
    1ea6:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1eaa:	f240 0344 	movw	r3, #68	; 0x44
    1eae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1eb2:	f04f 0200 	mov.w	r2, #0
    1eb6:	701a      	strb	r2, [r3, #0]
void osc_priv_enable_osc0(void)
{
	irqflags_t flags;

	flags = cpu_irq_save();
	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAu)
    1eb8:	f44f 6000 	mov.w	r0, #2048	; 0x800
    1ebc:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1ec0:	f04f 0320 	mov.w	r3, #32
    1ec4:	f6ca 2300 	movt	r3, #43520	; 0xaa00
    1ec8:	6183      	str	r3, [r0, #24]
		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_OSCCTRL0 - (uint32_t)SCIF);
	SCIF->SCIF_OSCCTRL0 =
    1eca:	f240 3207 	movw	r2, #775	; 0x307
    1ece:	f2c0 0201 	movt	r2, #1
    1ed2:	6202      	str	r2, [r0, #32]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1ed4:	b949      	cbnz	r1, 1eea <osc_priv_enable_osc0+0x4a>
		cpu_irq_enable();
    1ed6:	f240 0144 	movw	r1, #68	; 0x44
    1eda:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1ede:	f04f 0001 	mov.w	r0, #1
    1ee2:	7008      	strb	r0, [r1, #0]
    1ee4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1ee8:	b662      	cpsie	i
    1eea:	4770      	bx	lr

00001eec <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(uint32_t bus_id, uint32_t module_index)
{
    1eec:	b430      	push	{r4, r5}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1eee:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1ef2:	b672      	cpsid	i
    1ef4:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1ef8:	f240 0344 	movw	r3, #68	; 0x44
    1efc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1f00:	f04f 0200 	mov.w	r2, #0
    1f04:	701a      	strb	r2, [r3, #0]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
    1f06:	f04f 0320 	mov.w	r3, #32
    1f0a:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1f0e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
	mask |= 1U << module_index;
    1f12:	f04f 0501 	mov.w	r5, #1
    1f16:	fa05 f101 	lsl.w	r1, r5, r1
    1f1a:	4311      	orrs	r1, r2
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
    1f1c:	f100 0208 	add.w	r2, r0, #8
    1f20:	ea4f 6502 	mov.w	r5, r2, lsl #24
    1f24:	ea4f 5295 	mov.w	r2, r5, lsr #22
	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
	mask |= 1U << module_index;
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    1f28:	f042 452a 	orr.w	r5, r2, #2852126720	; 0xaa000000
    1f2c:	f04f 0200 	mov.w	r2, #0
    1f30:	f2c4 020e 	movt	r2, #16398	; 0x400e
    1f34:	6595      	str	r5, [r2, #88]	; 0x58
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
	*(&PM->PM_CPUMASK + bus_id) = mask;
    1f36:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1f3a:	b94c      	cbnz	r4, 1f50 <sysclk_priv_enable_module+0x64>
		cpu_irq_enable();
    1f3c:	f240 0044 	movw	r0, #68	; 0x44
    1f40:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1f44:	f04f 0301 	mov.w	r3, #1
    1f48:	7003      	strb	r3, [r0, #0]
    1f4a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1f4e:	b662      	cpsie	i

	cpu_irq_restore(flags);
}
    1f50:	bc30      	pop	{r4, r5}
    1f52:	4770      	bx	lr

00001f54 <sysclk_priv_disable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be disabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_disable_module(uint32_t bus_id, uint32_t module_index)
{
    1f54:	b430      	push	{r4, r5}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1f56:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1f5a:	b672      	cpsid	i
    1f5c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1f60:	f240 0344 	movw	r3, #68	; 0x44
    1f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1f68:	f04f 0200 	mov.w	r2, #0
    1f6c:	701a      	strb	r2, [r3, #0]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Disable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
    1f6e:	f04f 0320 	mov.w	r3, #32
    1f72:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1f76:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
	mask &= ~(1U << module_index);
    1f7a:	f04f 0501 	mov.w	r5, #1
    1f7e:	fa05 f101 	lsl.w	r1, r5, r1
    1f82:	ea22 0101 	bic.w	r1, r2, r1
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
    1f86:	f100 0208 	add.w	r2, r0, #8
    1f8a:	ea4f 6502 	mov.w	r5, r2, lsl #24
    1f8e:	ea4f 5295 	mov.w	r2, r5, lsr #22
	flags = cpu_irq_save();

	/* Disable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
	mask &= ~(1U << module_index);
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    1f92:	f042 452a 	orr.w	r5, r2, #2852126720	; 0xaa000000
    1f96:	f04f 0200 	mov.w	r2, #0
    1f9a:	f2c4 020e 	movt	r2, #16398	; 0x400e
    1f9e:	6595      	str	r5, [r2, #88]	; 0x58
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
	*(&PM->PM_CPUMASK + bus_id) = mask;
    1fa0:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1fa4:	b94c      	cbnz	r4, 1fba <sysclk_priv_disable_module+0x66>
		cpu_irq_enable();
    1fa6:	f240 0044 	movw	r0, #68	; 0x44
    1faa:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1fae:	f04f 0301 	mov.w	r3, #1
    1fb2:	7003      	strb	r3, [r0, #0]
    1fb4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1fb8:	b662      	cpsie	i

	cpu_irq_restore(flags);
}
    1fba:	bc30      	pop	{r4, r5}
    1fbc:	4770      	bx	lr
    1fbe:	bf00      	nop

00001fc0 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_enable_pba_module(uint32_t module_index)
{
    1fc0:	b538      	push	{r3, r4, r5, lr}
    1fc2:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1fc4:	f3ef 8510 	mrs	r5, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1fc8:	b672      	cpsid	i
    1fca:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1fce:	f240 0344 	movw	r3, #68	; 0x44
    1fd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1fd6:	f04f 0200 	mov.w	r2, #0
    1fda:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (PM->PM_PBAMASK == 0) {
    1fdc:	4610      	mov	r0, r2
    1fde:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1fe2:	6a81      	ldr	r1, [r0, #40]	; 0x28
    1fe4:	b941      	cbnz	r1, 1ff8 <sysclk_enable_pba_module+0x38>
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    1fe6:	f04f 0001 	mov.w	r0, #1
    1fea:	f04f 0105 	mov.w	r1, #5
    1fee:	f641 63ed 	movw	r3, #7917	; 0x1eed
    1ff2:	f2c0 0300 	movt	r3, #0
    1ff6:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1ff8:	b94d      	cbnz	r5, 200e <sysclk_enable_pba_module+0x4e>
		cpu_irq_enable();
    1ffa:	f240 0044 	movw	r0, #68	; 0x44
    1ffe:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2002:	f04f 0201 	mov.w	r2, #1
    2006:	7002      	strb	r2, [r0, #0]
    2008:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    200c:	b662      	cpsie	i
	}

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBA, module_index);
    200e:	f04f 0002 	mov.w	r0, #2
    2012:	4621      	mov	r1, r4
    2014:	f641 63ed 	movw	r3, #7917	; 0x1eed
    2018:	f2c0 0300 	movt	r3, #0
    201c:	4798      	blx	r3
    201e:	bd38      	pop	{r3, r4, r5, pc}

00002020 <sysclk_disable_pba_module>:
/**
 * \brief Disable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_disable_pba_module(uint32_t module_index)
{
    2020:	b510      	push	{r4, lr}
    2022:	4601      	mov	r1, r0
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBA, module_index);
    2024:	f04f 0002 	mov.w	r0, #2
    2028:	f641 7355 	movw	r3, #8021	; 0x1f55
    202c:	f2c0 0300 	movt	r3, #0
    2030:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2032:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2036:	b672      	cpsid	i
    2038:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    203c:	f240 0044 	movw	r0, #68	; 0x44
    2040:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2044:	f04f 0200 	mov.w	r2, #0
    2048:	7002      	strb	r2, [r0, #0]

	/* Disable the bridge if possible */
	flags = cpu_irq_save();

	if (PM->PM_PBAMASK == 0) {
    204a:	4611      	mov	r1, r2
    204c:	f2c4 010e 	movt	r1, #16398	; 0x400e
    2050:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    2052:	b943      	cbnz	r3, 2066 <sysclk_disable_pba_module+0x46>
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
    2054:	f04f 0001 	mov.w	r0, #1
    2058:	f04f 0105 	mov.w	r1, #5
    205c:	f641 7255 	movw	r2, #8021	; 0x1f55
    2060:	f2c0 0200 	movt	r2, #0
    2064:	4790      	blx	r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2066:	b94c      	cbnz	r4, 207c <sysclk_disable_pba_module+0x5c>
		cpu_irq_enable();
    2068:	f240 0044 	movw	r0, #68	; 0x44
    206c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2070:	f04f 0101 	mov.w	r1, #1
    2074:	7001      	strb	r1, [r0, #0]
    2076:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    207a:	b662      	cpsie	i
    207c:	bd10      	pop	{r4, pc}
    207e:	bf00      	nop

00002080 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(uint32_t module_index)
{
    2080:	b538      	push	{r3, r4, r5, lr}
    2082:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2084:	f3ef 8510 	mrs	r5, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2088:	b672      	cpsid	i
    208a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    208e:	f240 0344 	movw	r3, #68	; 0x44
    2092:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2096:	f04f 0200 	mov.w	r2, #0
    209a:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (PM->PM_PBBMASK == 0) {
    209c:	4610      	mov	r0, r2
    209e:	f2c4 000e 	movt	r0, #16398	; 0x400e
    20a2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    20a4:	b941      	cbnz	r1, 20b8 <sysclk_enable_pbb_module+0x38>
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    20a6:	f04f 0001 	mov.w	r0, #1
    20aa:	f04f 0106 	mov.w	r1, #6
    20ae:	f641 63ed 	movw	r3, #7917	; 0x1eed
    20b2:	f2c0 0300 	movt	r3, #0
    20b6:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    20b8:	b94d      	cbnz	r5, 20ce <sysclk_enable_pbb_module+0x4e>
		cpu_irq_enable();
    20ba:	f240 0044 	movw	r0, #68	; 0x44
    20be:	f2c2 0000 	movt	r0, #8192	; 0x2000
    20c2:	f04f 0201 	mov.w	r2, #1
    20c6:	7002      	strb	r2, [r0, #0]
    20c8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    20cc:	b662      	cpsie	i
	}

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBB, module_index);
    20ce:	f04f 0003 	mov.w	r0, #3
    20d2:	4621      	mov	r1, r4
    20d4:	f641 63ed 	movw	r3, #7917	; 0x1eed
    20d8:	f2c0 0300 	movt	r3, #0
    20dc:	4798      	blx	r3
    20de:	bd38      	pop	{r3, r4, r5, pc}

000020e0 <sysclk_disable_pbb_module>:
/**
 * \brief Disable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_disable_pbb_module(uint32_t module_index)
{
    20e0:	b510      	push	{r4, lr}
    20e2:	4601      	mov	r1, r0
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBB, module_index);
    20e4:	f04f 0003 	mov.w	r0, #3
    20e8:	f641 7355 	movw	r3, #8021	; 0x1f55
    20ec:	f2c0 0300 	movt	r3, #0
    20f0:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    20f2:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    20f6:	b672      	cpsid	i
    20f8:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    20fc:	f240 0044 	movw	r0, #68	; 0x44
    2100:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2104:	f04f 0200 	mov.w	r2, #0
    2108:	7002      	strb	r2, [r0, #0]

	/* Disable the bridge if possible */
	flags = cpu_irq_save();

	if (PM->PM_PBBMASK == 0) {
    210a:	4611      	mov	r1, r2
    210c:	f2c4 010e 	movt	r1, #16398	; 0x400e
    2110:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    2112:	b943      	cbnz	r3, 2126 <sysclk_disable_pbb_module+0x46>
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
    2114:	f04f 0001 	mov.w	r0, #1
    2118:	f04f 0106 	mov.w	r1, #6
    211c:	f641 7255 	movw	r2, #8021	; 0x1f55
    2120:	f2c0 0200 	movt	r2, #0
    2124:	4790      	blx	r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2126:	b94c      	cbnz	r4, 213c <sysclk_disable_pbb_module+0x5c>
		cpu_irq_enable();
    2128:	f240 0044 	movw	r0, #68	; 0x44
    212c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2130:	f04f 0101 	mov.w	r1, #1
    2134:	7001      	strb	r1, [r0, #0]
    2136:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    213a:	b662      	cpsie	i
    213c:	bd10      	pop	{r4, pc}
    213e:	bf00      	nop

00002140 <sysclk_get_peripheral_bus_hz>:
 * \return Frequency of the bus attached to the specified peripheral, in Hz.
 */
uint32_t sysclk_get_peripheral_bus_hz(const volatile void *module)
{
	/* Fallthroughs intended for modules sharing the same peripheral bus. */
	switch ((uintptr_t)module) {
    2140:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2144:	f2c4 0307 	movt	r3, #16391	; 0x4007
    2148:	4298      	cmp	r0, r3
    214a:	f000 816f 	beq.w	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    214e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2152:	f2c4 0107 	movt	r1, #16391	; 0x4007
    2156:	4288      	cmp	r0, r1
    2158:	f200 80bb 	bhi.w	22d2 <sysclk_get_peripheral_bus_hz+0x192>
    215c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2160:	f2c4 0202 	movt	r2, #16386	; 0x4002
    2164:	4290      	cmp	r0, r2
    2166:	f000 8161 	beq.w	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    216a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    216e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    2172:	4298      	cmp	r0, r3
    2174:	d851      	bhi.n	221a <sysclk_get_peripheral_bus_hz+0xda>
    2176:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    217a:	f2c4 0101 	movt	r1, #16385	; 0x4001
    217e:	4288      	cmp	r0, r1
    2180:	f000 8154 	beq.w	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    2184:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2188:	f2c4 0201 	movt	r2, #16385	; 0x4001
    218c:	4290      	cmp	r0, r2
    218e:	d820      	bhi.n	21d2 <sysclk_get_peripheral_bus_hz+0x92>
    2190:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2194:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2198:	4298      	cmp	r0, r3
    219a:	f000 8147 	beq.w	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    219e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    21a2:	f2c4 0100 	movt	r1, #16384	; 0x4000
    21a6:	4288      	cmp	r0, r1
    21a8:	d804      	bhi.n	21b4 <sysclk_get_peripheral_bus_hz+0x74>
    21aa:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    21ae:	f040 8142 	bne.w	2436 <sysclk_get_peripheral_bus_hz+0x2f6>
    21b2:	e13b      	b.n	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    21b4:	f04f 0200 	mov.w	r2, #0
    21b8:	f2c4 0201 	movt	r2, #16385	; 0x4001
    21bc:	4290      	cmp	r0, r2
    21be:	f000 8135 	beq.w	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    21c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    21c6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21ca:	4298      	cmp	r0, r3
    21cc:	f040 8133 	bne.w	2436 <sysclk_get_peripheral_bus_hz+0x2f6>
    21d0:	e12c      	b.n	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    21d2:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    21d6:	f2c4 0101 	movt	r1, #16385	; 0x4001
    21da:	4288      	cmp	r0, r1
    21dc:	f000 8126 	beq.w	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    21e0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    21e4:	f2c4 0201 	movt	r2, #16385	; 0x4001
    21e8:	4290      	cmp	r0, r2
    21ea:	d807      	bhi.n	21fc <sysclk_get_peripheral_bus_hz+0xbc>
    21ec:	f44f 4304 	mov.w	r3, #33792	; 0x8400
    21f0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21f4:	4298      	cmp	r0, r3
    21f6:	f040 811e 	bne.w	2436 <sysclk_get_peripheral_bus_hz+0x2f6>
    21fa:	e117      	b.n	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    21fc:	f44f 4144 	mov.w	r1, #50176	; 0xc400
    2200:	f2c4 0101 	movt	r1, #16385	; 0x4001
    2204:	4288      	cmp	r0, r1
    2206:	f000 8111 	beq.w	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    220a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    220e:	f2c4 0202 	movt	r2, #16386	; 0x4002
    2212:	4290      	cmp	r0, r2
    2214:	f040 810f 	bne.w	2436 <sysclk_get_peripheral_bus_hz+0x2f6>
    2218:	e108      	b.n	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    221a:	f04f 0300 	mov.w	r3, #0
    221e:	f2c4 0304 	movt	r3, #16388	; 0x4004
    2222:	4298      	cmp	r0, r3
    2224:	f000 8102 	beq.w	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    2228:	f04f 0100 	mov.w	r1, #0
    222c:	f2c4 0104 	movt	r1, #16388	; 0x4004
    2230:	4288      	cmp	r0, r1
    2232:	d823      	bhi.n	227c <sysclk_get_peripheral_bus_hz+0x13c>
    2234:	f04f 0200 	mov.w	r2, #0
    2238:	f2c4 0203 	movt	r2, #16387	; 0x4003
    223c:	4290      	cmp	r0, r2
    223e:	f000 80f5 	beq.w	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    2242:	f04f 0300 	mov.w	r3, #0
    2246:	f2c4 0303 	movt	r3, #16387	; 0x4003
    224a:	4298      	cmp	r0, r3
    224c:	d807      	bhi.n	225e <sysclk_get_peripheral_bus_hz+0x11e>
    224e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    2252:	f2c4 0102 	movt	r1, #16386	; 0x4002
    2256:	4288      	cmp	r0, r1
    2258:	f040 80ed 	bne.w	2436 <sysclk_get_peripheral_bus_hz+0x2f6>
    225c:	e0e6      	b.n	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    225e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2262:	f2c4 0203 	movt	r2, #16387	; 0x4003
    2266:	4290      	cmp	r0, r2
    2268:	f000 80e0 	beq.w	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    226c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    2270:	f2c4 0303 	movt	r3, #16387	; 0x4003
    2274:	4298      	cmp	r0, r3
    2276:	f040 80de 	bne.w	2436 <sysclk_get_peripheral_bus_hz+0x2f6>
    227a:	e0d7      	b.n	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    227c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2280:	f2c4 0106 	movt	r1, #16390	; 0x4006
    2284:	4288      	cmp	r0, r1
    2286:	f000 80d1 	beq.w	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    228a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    228e:	f2c4 0206 	movt	r2, #16390	; 0x4006
    2292:	4290      	cmp	r0, r2
    2294:	d80e      	bhi.n	22b4 <sysclk_get_peripheral_bus_hz+0x174>
    2296:	f04f 0300 	mov.w	r3, #0
    229a:	f2c4 0306 	movt	r3, #16390	; 0x4006
    229e:	4298      	cmp	r0, r3
    22a0:	f000 80c4 	beq.w	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    22a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    22a8:	f2c4 0106 	movt	r1, #16390	; 0x4006
    22ac:	4288      	cmp	r0, r1
    22ae:	f040 80c2 	bne.w	2436 <sysclk_get_peripheral_bus_hz+0x2f6>
    22b2:	e0bb      	b.n	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    22b4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    22b8:	f2c4 0206 	movt	r2, #16390	; 0x4006
    22bc:	4290      	cmp	r0, r2
    22be:	f000 80b5 	beq.w	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    22c2:	f04f 0300 	mov.w	r3, #0
    22c6:	f2c4 0307 	movt	r3, #16391	; 0x4007
    22ca:	4298      	cmp	r0, r3
    22cc:	f040 80b3 	bne.w	2436 <sysclk_get_peripheral_bus_hz+0x2f6>
    22d0:	e0ac      	b.n	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    22d2:	f04f 0100 	mov.w	r1, #0
    22d6:	f2c4 010e 	movt	r1, #16398	; 0x400e
    22da:	4288      	cmp	r0, r1
    22dc:	f000 80a6 	beq.w	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    22e0:	f04f 0200 	mov.w	r2, #0
    22e4:	f2c4 020e 	movt	r2, #16398	; 0x400e
    22e8:	4290      	cmp	r0, r2
    22ea:	d84e      	bhi.n	238a <sysclk_get_peripheral_bus_hz+0x24a>
    22ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    22f0:	f2c4 030a 	movt	r3, #16394	; 0x400a
    22f4:	4298      	cmp	r0, r3
    22f6:	f000 8099 	beq.w	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    22fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    22fe:	f2c4 010a 	movt	r1, #16394	; 0x400a
    2302:	4288      	cmp	r0, r1
    2304:	d821      	bhi.n	234a <sysclk_get_peripheral_bus_hz+0x20a>
    2306:	f04f 0200 	mov.w	r2, #0
    230a:	f2c4 0208 	movt	r2, #16392	; 0x4008
    230e:	4290      	cmp	r0, r2
    2310:	f000 808c 	beq.w	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    2314:	f04f 0300 	mov.w	r3, #0
    2318:	f2c4 0308 	movt	r3, #16392	; 0x4008
    231c:	4298      	cmp	r0, r3
    231e:	d807      	bhi.n	2330 <sysclk_get_peripheral_bus_hz+0x1f0>
    2320:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    2324:	f2c4 0107 	movt	r1, #16391	; 0x4007
    2328:	4288      	cmp	r0, r1
    232a:	f040 8084 	bne.w	2436 <sysclk_get_peripheral_bus_hz+0x2f6>
    232e:	e07d      	b.n	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    2330:	f04f 0200 	mov.w	r2, #0
    2334:	f2c4 020a 	movt	r2, #16394	; 0x400a
    2338:	4290      	cmp	r0, r2
    233a:	d077      	beq.n	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    233c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2340:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2344:	4298      	cmp	r0, r3
    2346:	d176      	bne.n	2436 <sysclk_get_peripheral_bus_hz+0x2f6>
    2348:	e070      	b.n	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    234a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    234e:	f2c4 010a 	movt	r1, #16394	; 0x400a
    2352:	4288      	cmp	r0, r1
    2354:	d06a      	beq.n	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    2356:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    235a:	f2c4 020a 	movt	r2, #16394	; 0x400a
    235e:	4290      	cmp	r0, r2
    2360:	d806      	bhi.n	2370 <sysclk_get_peripheral_bus_hz+0x230>
    2362:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    2366:	f2c4 030a 	movt	r3, #16394	; 0x400a
    236a:	4298      	cmp	r0, r3
    236c:	d163      	bne.n	2436 <sysclk_get_peripheral_bus_hz+0x2f6>
    236e:	e05d      	b.n	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    2370:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    2374:	f2c4 010a 	movt	r1, #16394	; 0x400a
    2378:	4288      	cmp	r0, r1
    237a:	d057      	beq.n	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    237c:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
    2380:	f2c4 020a 	movt	r2, #16394	; 0x400a
    2384:	4290      	cmp	r0, r2
    2386:	d156      	bne.n	2436 <sysclk_get_peripheral_bus_hz+0x2f6>
    2388:	e050      	b.n	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    238a:	f04f 0300 	mov.w	r3, #0
    238e:	f2c4 030f 	movt	r3, #16399	; 0x400f
    2392:	4298      	cmp	r0, r3
    2394:	d04a      	beq.n	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    2396:	f04f 0100 	mov.w	r1, #0
    239a:	f2c4 010f 	movt	r1, #16399	; 0x400f
    239e:	4288      	cmp	r0, r1
    23a0:	d81f      	bhi.n	23e2 <sysclk_get_peripheral_bus_hz+0x2a2>
    23a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    23a6:	f2c4 020e 	movt	r2, #16398	; 0x400e
    23aa:	4290      	cmp	r0, r2
    23ac:	d03e      	beq.n	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    23ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
    23b2:	f2c4 030e 	movt	r3, #16398	; 0x400e
    23b6:	4298      	cmp	r0, r3
    23b8:	d806      	bhi.n	23c8 <sysclk_get_peripheral_bus_hz+0x288>
    23ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
    23be:	f2c4 010e 	movt	r1, #16398	; 0x400e
    23c2:	4288      	cmp	r0, r1
    23c4:	d137      	bne.n	2436 <sysclk_get_peripheral_bus_hz+0x2f6>
    23c6:	e031      	b.n	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    23c8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    23cc:	f2c4 020e 	movt	r2, #16398	; 0x400e
    23d0:	4290      	cmp	r0, r2
    23d2:	d02b      	beq.n	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    23d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    23d8:	f2c4 030e 	movt	r3, #16398	; 0x400e
    23dc:	4298      	cmp	r0, r3
    23de:	d12a      	bne.n	2436 <sysclk_get_peripheral_bus_hz+0x2f6>
    23e0:	e024      	b.n	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    23e2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    23e6:	f2c4 010f 	movt	r1, #16399	; 0x400f
    23ea:	4288      	cmp	r0, r1
    23ec:	d01e      	beq.n	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    23ee:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    23f2:	f2c4 020f 	movt	r2, #16399	; 0x400f
    23f6:	4290      	cmp	r0, r2
    23f8:	d80c      	bhi.n	2414 <sysclk_get_peripheral_bus_hz+0x2d4>
    23fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    23fe:	f2c4 030f 	movt	r3, #16399	; 0x400f
    2402:	4298      	cmp	r0, r3
    2404:	d012      	beq.n	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    2406:	f44f 6100 	mov.w	r1, #2048	; 0x800
    240a:	f2c4 010f 	movt	r1, #16399	; 0x400f
    240e:	4288      	cmp	r0, r1
    2410:	d111      	bne.n	2436 <sysclk_get_peripheral_bus_hz+0x2f6>
    2412:	e00b      	b.n	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    2414:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    2418:	f2c4 020f 	movt	r2, #16399	; 0x400f
    241c:	4290      	cmp	r0, r2
    241e:	d005      	beq.n	242c <sysclk_get_peripheral_bus_hz+0x2ec>
    2420:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    2424:	f2c4 030f 	movt	r3, #16399	; 0x400f
    2428:	4298      	cmp	r0, r3
    242a:	d104      	bne.n	2436 <sysclk_get_peripheral_bus_hz+0x2f6>
	case PARC_ADDR:
	case CATB_ADDR:
	case TWIM2_ADDR:
	case TWIM3_ADDR:
	case LCDCA_ADDR:
		return sysclk_get_pba_hz();
    242c:	f648 5080 	movw	r0, #36224	; 0x8d80
    2430:	f2c0 005b 	movt	r0, #91	; 0x5b
    2434:	4770      	bx	lr
	case PICOUART_ADDR:
		return sysclk_get_pbd_hz();

	default:
		Assert(false);
		return 0;
    2436:	f04f 0000 	mov.w	r0, #0
	}
}
    243a:	4770      	bx	lr

0000243c <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
    243c:	b508      	push	{r3, lr}
	switch ((uintptr_t)module) {
    243e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2442:	f2c4 0307 	movt	r3, #16391	; 0x4007
    2446:	4298      	cmp	r0, r3
    2448:	f000 827f 	beq.w	294a <sysclk_enable_peripheral_clock+0x50e>
    244c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2450:	f2c4 0107 	movt	r1, #16391	; 0x4007
    2454:	4288      	cmp	r0, r1
    2456:	f200 80bb 	bhi.w	25d0 <sysclk_enable_peripheral_clock+0x194>
    245a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    245e:	f2c4 0202 	movt	r2, #16386	; 0x4002
    2462:	4290      	cmp	r0, r2
    2464:	f000 81f2 	beq.w	284c <sysclk_enable_peripheral_clock+0x410>
    2468:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    246c:	f2c4 0302 	movt	r3, #16386	; 0x4002
    2470:	4298      	cmp	r0, r3
    2472:	d851      	bhi.n	2518 <sysclk_enable_peripheral_clock+0xdc>
    2474:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2478:	f2c4 0101 	movt	r1, #16385	; 0x4001
    247c:	4288      	cmp	r0, r1
    247e:	f000 81b0 	beq.w	27e2 <sysclk_enable_peripheral_clock+0x3a6>
    2482:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2486:	f2c4 0201 	movt	r2, #16385	; 0x4001
    248a:	4290      	cmp	r0, r2
    248c:	d820      	bhi.n	24d0 <sysclk_enable_peripheral_clock+0x94>
    248e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2492:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2496:	4298      	cmp	r0, r3
    2498:	f000 8171 	beq.w	277e <sysclk_enable_peripheral_clock+0x342>
    249c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    24a0:	f2c4 0100 	movt	r1, #16384	; 0x4000
    24a4:	4288      	cmp	r0, r1
    24a6:	d804      	bhi.n	24b2 <sysclk_enable_peripheral_clock+0x76>
    24a8:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    24ac:	f040 8334 	bne.w	2b18 <sysclk_enable_peripheral_clock+0x6dc>
    24b0:	e15d      	b.n	276e <sysclk_enable_peripheral_clock+0x332>
    24b2:	f04f 0300 	mov.w	r3, #0
    24b6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    24ba:	4298      	cmp	r0, r3
    24bc:	f000 8167 	beq.w	278e <sysclk_enable_peripheral_clock+0x352>
    24c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    24c4:	f2c4 0101 	movt	r1, #16385	; 0x4001
    24c8:	4288      	cmp	r0, r1
    24ca:	f040 8325 	bne.w	2b18 <sysclk_enable_peripheral_clock+0x6dc>
    24ce:	e173      	b.n	27b8 <sysclk_enable_peripheral_clock+0x37c>
    24d0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    24d4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    24d8:	4298      	cmp	r0, r3
    24da:	f000 8192 	beq.w	2802 <sysclk_enable_peripheral_clock+0x3c6>
    24de:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    24e2:	f2c4 0201 	movt	r2, #16385	; 0x4001
    24e6:	4290      	cmp	r0, r2
    24e8:	d807      	bhi.n	24fa <sysclk_enable_peripheral_clock+0xbe>
    24ea:	f44f 4104 	mov.w	r1, #33792	; 0x8400
    24ee:	f2c4 0101 	movt	r1, #16385	; 0x4001
    24f2:	4288      	cmp	r0, r1
    24f4:	f040 8310 	bne.w	2b18 <sysclk_enable_peripheral_clock+0x6dc>
    24f8:	e17b      	b.n	27f2 <sysclk_enable_peripheral_clock+0x3b6>
    24fa:	f44f 4244 	mov.w	r2, #50176	; 0xc400
    24fe:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2502:	4290      	cmp	r0, r2
    2504:	f000 8185 	beq.w	2812 <sysclk_enable_peripheral_clock+0x3d6>
    2508:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    250c:	f2c4 0102 	movt	r1, #16386	; 0x4002
    2510:	4288      	cmp	r0, r1
    2512:	f040 8301 	bne.w	2b18 <sysclk_enable_peripheral_clock+0x6dc>
    2516:	e184      	b.n	2822 <sysclk_enable_peripheral_clock+0x3e6>
    2518:	f04f 0200 	mov.w	r2, #0
    251c:	f2c4 0204 	movt	r2, #16388	; 0x4004
    2520:	4290      	cmp	r0, r2
    2522:	f000 81e2 	beq.w	28ea <sysclk_enable_peripheral_clock+0x4ae>
    2526:	f04f 0100 	mov.w	r1, #0
    252a:	f2c4 0104 	movt	r1, #16388	; 0x4004
    252e:	4288      	cmp	r0, r1
    2530:	d823      	bhi.n	257a <sysclk_enable_peripheral_clock+0x13e>
    2532:	f04f 0300 	mov.w	r3, #0
    2536:	f2c4 0303 	movt	r3, #16387	; 0x4003
    253a:	4298      	cmp	r0, r3
    253c:	f000 81b0 	beq.w	28a0 <sysclk_enable_peripheral_clock+0x464>
    2540:	f04f 0200 	mov.w	r2, #0
    2544:	f2c4 0203 	movt	r2, #16387	; 0x4003
    2548:	4290      	cmp	r0, r2
    254a:	d807      	bhi.n	255c <sysclk_enable_peripheral_clock+0x120>
    254c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    2550:	f2c4 0102 	movt	r1, #16386	; 0x4002
    2554:	4288      	cmp	r0, r1
    2556:	f040 82df 	bne.w	2b18 <sysclk_enable_peripheral_clock+0x6dc>
    255a:	e18c      	b.n	2876 <sysclk_enable_peripheral_clock+0x43a>
    255c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2560:	f2c4 0203 	movt	r2, #16387	; 0x4003
    2564:	4290      	cmp	r0, r2
    2566:	f000 81b0 	beq.w	28ca <sysclk_enable_peripheral_clock+0x48e>
    256a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    256e:	f2c4 0103 	movt	r1, #16387	; 0x4003
    2572:	4288      	cmp	r0, r1
    2574:	f040 82d0 	bne.w	2b18 <sysclk_enable_peripheral_clock+0x6dc>
    2578:	e1af      	b.n	28da <sysclk_enable_peripheral_clock+0x49e>
    257a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    257e:	f2c4 0306 	movt	r3, #16390	; 0x4006
    2582:	4298      	cmp	r0, r3
    2584:	f000 81c9 	beq.w	291a <sysclk_enable_peripheral_clock+0x4de>
    2588:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    258c:	f2c4 0106 	movt	r1, #16390	; 0x4006
    2590:	4288      	cmp	r0, r1
    2592:	d80e      	bhi.n	25b2 <sysclk_enable_peripheral_clock+0x176>
    2594:	f04f 0200 	mov.w	r2, #0
    2598:	f2c4 0206 	movt	r2, #16390	; 0x4006
    259c:	4290      	cmp	r0, r2
    259e:	f000 81ac 	beq.w	28fa <sysclk_enable_peripheral_clock+0x4be>
    25a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    25a6:	f2c4 0306 	movt	r3, #16390	; 0x4006
    25aa:	4298      	cmp	r0, r3
    25ac:	f040 82b4 	bne.w	2b18 <sysclk_enable_peripheral_clock+0x6dc>
    25b0:	e1ab      	b.n	290a <sysclk_enable_peripheral_clock+0x4ce>
    25b2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    25b6:	f2c4 0306 	movt	r3, #16390	; 0x4006
    25ba:	4298      	cmp	r0, r3
    25bc:	f000 81b5 	beq.w	292a <sysclk_enable_peripheral_clock+0x4ee>
    25c0:	f04f 0100 	mov.w	r1, #0
    25c4:	f2c4 0107 	movt	r1, #16391	; 0x4007
    25c8:	4288      	cmp	r0, r1
    25ca:	f040 82a5 	bne.w	2b18 <sysclk_enable_peripheral_clock+0x6dc>
    25ce:	e1b4      	b.n	293a <sysclk_enable_peripheral_clock+0x4fe>
    25d0:	f04f 0100 	mov.w	r1, #0
    25d4:	f2c4 010e 	movt	r1, #16398	; 0x400e
    25d8:	4288      	cmp	r0, r1
    25da:	f000 8232 	beq.w	2a42 <sysclk_enable_peripheral_clock+0x606>
    25de:	f04f 0300 	mov.w	r3, #0
    25e2:	f2c4 030e 	movt	r3, #16398	; 0x400e
    25e6:	4298      	cmp	r0, r3
    25e8:	d85b      	bhi.n	26a2 <sysclk_enable_peripheral_clock+0x266>
    25ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    25ee:	f2c4 020a 	movt	r2, #16394	; 0x400a
    25f2:	4290      	cmp	r0, r2
    25f4:	f000 81e2 	beq.w	29bc <sysclk_enable_peripheral_clock+0x580>
    25f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    25fc:	f2c4 010a 	movt	r1, #16394	; 0x400a
    2600:	4288      	cmp	r0, r1
    2602:	d823      	bhi.n	264c <sysclk_enable_peripheral_clock+0x210>
    2604:	f04f 0300 	mov.w	r3, #0
    2608:	f2c4 0308 	movt	r3, #16392	; 0x4008
    260c:	4298      	cmp	r0, r3
    260e:	f000 81ac 	beq.w	296a <sysclk_enable_peripheral_clock+0x52e>
    2612:	f04f 0200 	mov.w	r2, #0
    2616:	f2c4 0208 	movt	r2, #16392	; 0x4008
    261a:	4290      	cmp	r0, r2
    261c:	d807      	bhi.n	262e <sysclk_enable_peripheral_clock+0x1f2>
    261e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    2622:	f2c4 0107 	movt	r1, #16391	; 0x4007
    2626:	4288      	cmp	r0, r1
    2628:	f040 8276 	bne.w	2b18 <sysclk_enable_peripheral_clock+0x6dc>
    262c:	e195      	b.n	295a <sysclk_enable_peripheral_clock+0x51e>
    262e:	f04f 0200 	mov.w	r2, #0
    2632:	f2c4 020a 	movt	r2, #16394	; 0x400a
    2636:	4290      	cmp	r0, r2
    2638:	f000 819f 	beq.w	297a <sysclk_enable_peripheral_clock+0x53e>
    263c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    2640:	f2c4 010a 	movt	r1, #16394	; 0x400a
    2644:	4288      	cmp	r0, r1
    2646:	f040 8267 	bne.w	2b18 <sysclk_enable_peripheral_clock+0x6dc>
    264a:	e1a6      	b.n	299a <sysclk_enable_peripheral_clock+0x55e>
    264c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    2650:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2654:	4298      	cmp	r0, r3
    2656:	f000 81db 	beq.w	2a10 <sysclk_enable_peripheral_clock+0x5d4>
    265a:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    265e:	f2c4 010a 	movt	r1, #16394	; 0x400a
    2662:	4288      	cmp	r0, r1
    2664:	d80e      	bhi.n	2684 <sysclk_enable_peripheral_clock+0x248>
    2666:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    266a:	f2c4 020a 	movt	r2, #16394	; 0x400a
    266e:	4290      	cmp	r0, r2
    2670:	f000 81ac 	beq.w	29cc <sysclk_enable_peripheral_clock+0x590>
    2674:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    2678:	f2c4 030a 	movt	r3, #16394	; 0x400a
    267c:	4298      	cmp	r0, r3
    267e:	f040 824b 	bne.w	2b18 <sysclk_enable_peripheral_clock+0x6dc>
    2682:	e1b4      	b.n	29ee <sysclk_enable_peripheral_clock+0x5b2>
    2684:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
    2688:	f2c4 010a 	movt	r1, #16394	; 0x400a
    268c:	4288      	cmp	r0, r1
    268e:	f000 81d0 	beq.w	2a32 <sysclk_enable_peripheral_clock+0x5f6>
    2692:	f04f 0300 	mov.w	r3, #0
    2696:	f2c4 030b 	movt	r3, #16395	; 0x400b
    269a:	4298      	cmp	r0, r3
    269c:	f040 823c 	bne.w	2b18 <sysclk_enable_peripheral_clock+0x6dc>
    26a0:	e05b      	b.n	275a <sysclk_enable_peripheral_clock+0x31e>
    26a2:	f04f 0300 	mov.w	r3, #0
    26a6:	f2c4 030f 	movt	r3, #16399	; 0x400f
    26aa:	4298      	cmp	r0, r3
    26ac:	f000 81fa 	beq.w	2aa4 <sysclk_enable_peripheral_clock+0x668>
    26b0:	f04f 0200 	mov.w	r2, #0
    26b4:	f2c4 020f 	movt	r2, #16399	; 0x400f
    26b8:	4290      	cmp	r0, r2
    26ba:	d823      	bhi.n	2704 <sysclk_enable_peripheral_clock+0x2c8>
    26bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    26c0:	f2c4 010e 	movt	r1, #16398	; 0x400e
    26c4:	4288      	cmp	r0, r1
    26c6:	f000 81d0 	beq.w	2a6a <sysclk_enable_peripheral_clock+0x62e>
    26ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
    26ce:	f2c4 030e 	movt	r3, #16398	; 0x400e
    26d2:	4298      	cmp	r0, r3
    26d4:	d807      	bhi.n	26e6 <sysclk_enable_peripheral_clock+0x2aa>
    26d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    26da:	f2c4 020e 	movt	r2, #16398	; 0x400e
    26de:	4290      	cmp	r0, r2
    26e0:	f040 821a 	bne.w	2b18 <sysclk_enable_peripheral_clock+0x6dc>
    26e4:	e1b7      	b.n	2a56 <sysclk_enable_peripheral_clock+0x61a>
    26e6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    26ea:	f2c4 010e 	movt	r1, #16398	; 0x400e
    26ee:	4288      	cmp	r0, r1
    26f0:	f000 81c5 	beq.w	2a7e <sysclk_enable_peripheral_clock+0x642>
    26f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    26f8:	f2c4 020e 	movt	r2, #16398	; 0x400e
    26fc:	4290      	cmp	r0, r2
    26fe:	f040 820b 	bne.w	2b18 <sysclk_enable_peripheral_clock+0x6dc>
    2702:	e1c6      	b.n	2a92 <sysclk_enable_peripheral_clock+0x656>
    2704:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    2708:	f2c4 010f 	movt	r1, #16399	; 0x400f
    270c:	4288      	cmp	r0, r1
    270e:	f000 81e7 	beq.w	2ae0 <sysclk_enable_peripheral_clock+0x6a4>
    2712:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    2716:	f2c4 020f 	movt	r2, #16399	; 0x400f
    271a:	4290      	cmp	r0, r2
    271c:	d80e      	bhi.n	273c <sysclk_enable_peripheral_clock+0x300>
    271e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2722:	f2c4 030f 	movt	r3, #16399	; 0x400f
    2726:	4298      	cmp	r0, r3
    2728:	f000 81c6 	beq.w	2ab8 <sysclk_enable_peripheral_clock+0x67c>
    272c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2730:	f2c4 010f 	movt	r1, #16399	; 0x400f
    2734:	4288      	cmp	r0, r1
    2736:	f040 81ef 	bne.w	2b18 <sysclk_enable_peripheral_clock+0x6dc>
    273a:	e1c7      	b.n	2acc <sysclk_enable_peripheral_clock+0x690>
    273c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    2740:	f2c4 010f 	movt	r1, #16399	; 0x400f
    2744:	4288      	cmp	r0, r1
    2746:	f000 81d5 	beq.w	2af4 <sysclk_enable_peripheral_clock+0x6b8>
    274a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
    274e:	f2c4 020f 	movt	r2, #16399	; 0x400f
    2752:	4290      	cmp	r0, r2
    2754:	f040 81e0 	bne.w	2b18 <sysclk_enable_peripheral_clock+0x6dc>
    2758:	e1d6      	b.n	2b08 <sysclk_enable_peripheral_clock+0x6cc>
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    275a:	f04f 0001 	mov.w	r0, #1
    275e:	f04f 0109 	mov.w	r1, #9
    2762:	f641 62ed 	movw	r2, #7917	; 0x1eed
    2766:	f2c0 0200 	movt	r2, #0
    276a:	4790      	blx	r2
    276c:	bd08      	pop	{r3, pc}
	case AESA_ADDR:
		sysclk_enable_hsb_module(SYSCLK_AESA_HSB);
		break;

	case IISC_ADDR:
		sysclk_enable_pba_module(SYSCLK_IISC);
    276e:	f04f 0000 	mov.w	r0, #0
    2772:	f641 72c1 	movw	r2, #8129	; 0x1fc1
    2776:	f2c0 0200 	movt	r2, #0
    277a:	4790      	blx	r2
		break;
    277c:	bd08      	pop	{r3, pc}

	case SPI_ADDR:
		sysclk_enable_pba_module(SYSCLK_SPI);
    277e:	f04f 0001 	mov.w	r0, #1
    2782:	f641 71c1 	movw	r1, #8129	; 0x1fc1
    2786:	f2c0 0100 	movt	r1, #0
    278a:	4788      	blx	r1
		break;
    278c:	bd08      	pop	{r3, pc}

	case TC0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TC0);
    278e:	f04f 0002 	mov.w	r0, #2
    2792:	f641 73c1 	movw	r3, #8129	; 0x1fc1
    2796:	f2c0 0300 	movt	r3, #0
    279a:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    279c:	f04f 0000 	mov.w	r0, #0
    27a0:	f2c4 000e 	movt	r0, #16398	; 0x400e
    27a4:	6c01      	ldr	r1, [r0, #64]	; 0x40
	temp_mask |= mask;
    27a6:	f041 0355 	orr.w	r3, r1, #85	; 0x55
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    27aa:	f04f 0240 	mov.w	r2, #64	; 0x40
    27ae:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    27b2:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    27b4:	6403      	str	r3, [r0, #64]	; 0x40
    27b6:	bd08      	pop	{r3, pc}
			| PBA_DIVMASK_TIMER_CLOCK5
			);
		break;

	case TC1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TC1);
    27b8:	f04f 0003 	mov.w	r0, #3
    27bc:	f641 72c1 	movw	r2, #8129	; 0x1fc1
    27c0:	f2c0 0200 	movt	r2, #0
    27c4:	4790      	blx	r2
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    27c6:	f04f 0000 	mov.w	r0, #0
    27ca:	f2c4 000e 	movt	r0, #16398	; 0x400e
    27ce:	6c03      	ldr	r3, [r0, #64]	; 0x40
	temp_mask |= mask;
    27d0:	f043 0155 	orr.w	r1, r3, #85	; 0x55
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    27d4:	f04f 0240 	mov.w	r2, #64	; 0x40
    27d8:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    27dc:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    27de:	6401      	str	r1, [r0, #64]	; 0x40
    27e0:	bd08      	pop	{r3, pc}
			| PBA_DIVMASK_TIMER_CLOCK5
			);
		break;

	case TWIM0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM0);
    27e2:	f04f 0004 	mov.w	r0, #4
    27e6:	f641 73c1 	movw	r3, #8129	; 0x1fc1
    27ea:	f2c0 0300 	movt	r3, #0
    27ee:	4798      	blx	r3
		break;
    27f0:	bd08      	pop	{r3, pc}

	case TWIS0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIS0);
    27f2:	f04f 0005 	mov.w	r0, #5
    27f6:	f641 73c1 	movw	r3, #8129	; 0x1fc1
    27fa:	f2c0 0300 	movt	r3, #0
    27fe:	4798      	blx	r3
		break;
    2800:	bd08      	pop	{r3, pc}

	case TWIM1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM1);
    2802:	f04f 0006 	mov.w	r0, #6
    2806:	f641 71c1 	movw	r1, #8129	; 0x1fc1
    280a:	f2c0 0100 	movt	r1, #0
    280e:	4788      	blx	r1
		break;
    2810:	bd08      	pop	{r3, pc}

	case TWIS1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIS1);
    2812:	f04f 0007 	mov.w	r0, #7
    2816:	f641 72c1 	movw	r2, #8129	; 0x1fc1
    281a:	f2c0 0200 	movt	r2, #0
    281e:	4790      	blx	r2
		break;
    2820:	bd08      	pop	{r3, pc}

	case USART0_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART0);
    2822:	f04f 0008 	mov.w	r0, #8
    2826:	f641 73c1 	movw	r3, #8129	; 0x1fc1
    282a:	f2c0 0300 	movt	r3, #0
    282e:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    2830:	f04f 0000 	mov.w	r0, #0
    2834:	f2c4 000e 	movt	r0, #16398	; 0x400e
    2838:	6c02      	ldr	r2, [r0, #64]	; 0x40
	temp_mask |= mask;
    283a:	f042 0104 	orr.w	r1, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    283e:	f04f 0340 	mov.w	r3, #64	; 0x40
    2842:	f6ca 2300 	movt	r3, #43520	; 0xaa00
    2846:	6583      	str	r3, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    2848:	6401      	str	r1, [r0, #64]	; 0x40
    284a:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART1_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART1);
    284c:	f04f 0009 	mov.w	r0, #9
    2850:	f641 73c1 	movw	r3, #8129	; 0x1fc1
    2854:	f2c0 0300 	movt	r3, #0
    2858:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    285a:	f04f 0000 	mov.w	r0, #0
    285e:	f2c4 000e 	movt	r0, #16398	; 0x400e
    2862:	6c01      	ldr	r1, [r0, #64]	; 0x40
	temp_mask |= mask;
    2864:	f041 0304 	orr.w	r3, r1, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    2868:	f04f 0240 	mov.w	r2, #64	; 0x40
    286c:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    2870:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    2872:	6403      	str	r3, [r0, #64]	; 0x40
    2874:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART2_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART2);
    2876:	f04f 000a 	mov.w	r0, #10
    287a:	f641 73c1 	movw	r3, #8129	; 0x1fc1
    287e:	f2c0 0300 	movt	r3, #0
    2882:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    2884:	f04f 0000 	mov.w	r0, #0
    2888:	f2c4 000e 	movt	r0, #16398	; 0x400e
    288c:	6c02      	ldr	r2, [r0, #64]	; 0x40
	temp_mask |= mask;
    288e:	f042 0104 	orr.w	r1, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    2892:	f04f 0340 	mov.w	r3, #64	; 0x40
    2896:	f6ca 2300 	movt	r3, #43520	; 0xaa00
    289a:	6583      	str	r3, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    289c:	6401      	str	r1, [r0, #64]	; 0x40
    289e:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART3_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART3);
    28a0:	f04f 000b 	mov.w	r0, #11
    28a4:	f641 71c1 	movw	r1, #8129	; 0x1fc1
    28a8:	f2c0 0100 	movt	r1, #0
    28ac:	4788      	blx	r1
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    28ae:	f04f 0000 	mov.w	r0, #0
    28b2:	f2c4 000e 	movt	r0, #16398	; 0x400e
    28b6:	6c03      	ldr	r3, [r0, #64]	; 0x40
	temp_mask |= mask;
    28b8:	f043 0104 	orr.w	r1, r3, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    28bc:	f04f 0240 	mov.w	r2, #64	; 0x40
    28c0:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    28c4:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    28c6:	6401      	str	r1, [r0, #64]	; 0x40
    28c8:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case ADCIFE_ADDR:
		sysclk_enable_pba_module(SYSCLK_ADCIFE);
    28ca:	f04f 000c 	mov.w	r0, #12
    28ce:	f641 72c1 	movw	r2, #8129	; 0x1fc1
    28d2:	f2c0 0200 	movt	r2, #0
    28d6:	4790      	blx	r2
		break;
    28d8:	bd08      	pop	{r3, pc}

	case DACC_ADDR:
		sysclk_enable_pba_module(SYSCLK_DACC);
    28da:	f04f 000d 	mov.w	r0, #13
    28de:	f641 73c1 	movw	r3, #8129	; 0x1fc1
    28e2:	f2c0 0300 	movt	r3, #0
    28e6:	4798      	blx	r3
		break;
    28e8:	bd08      	pop	{r3, pc}

	case ACIFC_ADDR:
		sysclk_enable_pba_module(SYSCLK_ACIFC);
    28ea:	f04f 000e 	mov.w	r0, #14
    28ee:	f641 72c1 	movw	r2, #8129	; 0x1fc1
    28f2:	f2c0 0200 	movt	r2, #0
    28f6:	4790      	blx	r2
		break;
    28f8:	bd08      	pop	{r3, pc}

	case GLOC_ADDR:
		sysclk_enable_pba_module(SYSCLK_GLOC);
    28fa:	f04f 000f 	mov.w	r0, #15
    28fe:	f641 72c1 	movw	r2, #8129	; 0x1fc1
    2902:	f2c0 0200 	movt	r2, #0
    2906:	4790      	blx	r2
		break;
    2908:	bd08      	pop	{r3, pc}

	case ABDACB_ADDR:
		sysclk_enable_pba_module(SYSCLK_ABDACB);
    290a:	f04f 0010 	mov.w	r0, #16
    290e:	f641 71c1 	movw	r1, #8129	; 0x1fc1
    2912:	f2c0 0100 	movt	r1, #0
    2916:	4788      	blx	r1
		break;
    2918:	bd08      	pop	{r3, pc}

	case TRNG_ADDR:
		sysclk_enable_pba_module(SYSCLK_TRNG);
    291a:	f04f 0011 	mov.w	r0, #17
    291e:	f641 71c1 	movw	r1, #8129	; 0x1fc1
    2922:	f2c0 0100 	movt	r1, #0
    2926:	4788      	blx	r1
		break;
    2928:	bd08      	pop	{r3, pc}

	case PARC_ADDR:
		sysclk_enable_pba_module(SYSCLK_PARC);
    292a:	f04f 0012 	mov.w	r0, #18
    292e:	f641 73c1 	movw	r3, #8129	; 0x1fc1
    2932:	f2c0 0300 	movt	r3, #0
    2936:	4798      	blx	r3
		break;
    2938:	bd08      	pop	{r3, pc}

	case CATB_ADDR:
		sysclk_enable_pba_module(SYSCLK_CATB);
    293a:	f04f 0013 	mov.w	r0, #19
    293e:	f641 72c1 	movw	r2, #8129	; 0x1fc1
    2942:	f2c0 0200 	movt	r2, #0
    2946:	4790      	blx	r2
		break;
    2948:	bd08      	pop	{r3, pc}

	case TWIM2_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM2);
    294a:	f04f 0015 	mov.w	r0, #21
    294e:	f641 71c1 	movw	r1, #8129	; 0x1fc1
    2952:	f2c0 0100 	movt	r1, #0
    2956:	4788      	blx	r1
		break;
    2958:	bd08      	pop	{r3, pc}

	case TWIM3_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM3);
    295a:	f04f 0016 	mov.w	r0, #22
    295e:	f641 73c1 	movw	r3, #8129	; 0x1fc1
    2962:	f2c0 0300 	movt	r3, #0
    2966:	4798      	blx	r3
		break;
    2968:	bd08      	pop	{r3, pc}

	case LCDCA_ADDR:
		sysclk_enable_pba_module(SYSCLK_LCDCA);
    296a:	f04f 0017 	mov.w	r0, #23
    296e:	f641 72c1 	movw	r2, #8129	; 0x1fc1
    2972:	f2c0 0200 	movt	r2, #0
    2976:	4790      	blx	r2
		break;
    2978:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    297a:	f04f 0001 	mov.w	r0, #1
    297e:	4601      	mov	r1, r0
    2980:	f641 63ed 	movw	r3, #7917	; 0x1eed
    2984:	f2c0 0300 	movt	r3, #0
    2988:	4798      	blx	r3

	case HFLASHC_ADDR:
		sysclk_enable_hsb_module(SYSCLK_HFLASHC_DATA);
		sysclk_enable_pbb_module(SYSCLK_HFLASHC_REGS);
    298a:	f04f 0000 	mov.w	r0, #0
    298e:	f242 0181 	movw	r1, #8321	; 0x2081
    2992:	f2c0 0100 	movt	r1, #0
    2996:	4788      	blx	r1
		break;
    2998:	bd08      	pop	{r3, pc}
    299a:	f04f 0001 	mov.w	r0, #1
    299e:	f04f 0102 	mov.w	r1, #2
    29a2:	f641 63ed 	movw	r3, #7917	; 0x1eed
    29a6:	f2c0 0300 	movt	r3, #0
    29aa:	4798      	blx	r3

	case HCACHE_ADDR:
		sysclk_enable_hsb_module(SYSCLK_HRAMC1_DATA);
		sysclk_enable_pbb_module(SYSCLK_HRAMC1_REGS);
    29ac:	f04f 0001 	mov.w	r0, #1
    29b0:	f242 0281 	movw	r2, #8321	; 0x2081
    29b4:	f2c0 0200 	movt	r2, #0
    29b8:	4790      	blx	r2
		break;
    29ba:	bd08      	pop	{r3, pc}

	case HMATRIX_ADDR:
		sysclk_enable_pbb_module(SYSCLK_HMATRIX);
    29bc:	f04f 0002 	mov.w	r0, #2
    29c0:	f242 0181 	movw	r1, #8321	; 0x2081
    29c4:	f2c0 0100 	movt	r1, #0
    29c8:	4788      	blx	r1
		break;
    29ca:	bd08      	pop	{r3, pc}
    29cc:	f04f 0001 	mov.w	r0, #1
    29d0:	f04f 0100 	mov.w	r1, #0
    29d4:	f641 63ed 	movw	r3, #7917	; 0x1eed
    29d8:	f2c0 0300 	movt	r3, #0
    29dc:	4798      	blx	r3

	case PDCA_ADDR:
		sysclk_enable_hsb_module(SYSCLK_PDCA_HSB);
		sysclk_enable_pbb_module(SYSCLK_PDCA_PB);
    29de:	f04f 0003 	mov.w	r0, #3
    29e2:	f242 0281 	movw	r2, #8321	; 0x2081
    29e6:	f2c0 0200 	movt	r2, #0
    29ea:	4790      	blx	r2
		break;
    29ec:	bd08      	pop	{r3, pc}
    29ee:	f04f 0001 	mov.w	r0, #1
    29f2:	f04f 0104 	mov.w	r1, #4
    29f6:	f641 62ed 	movw	r2, #7917	; 0x1eed
    29fa:	f2c0 0200 	movt	r2, #0
    29fe:	4790      	blx	r2

	case CRCCU_ADDR:
		sysclk_enable_hsb_module(SYSCLK_CRCCU_DATA);
		sysclk_enable_pbb_module(SYSCLK_CRCCU_REGS);
    2a00:	f04f 0004 	mov.w	r0, #4
    2a04:	f242 0181 	movw	r1, #8321	; 0x2081
    2a08:	f2c0 0100 	movt	r1, #0
    2a0c:	4788      	blx	r1
		break;
    2a0e:	bd08      	pop	{r3, pc}
    2a10:	f04f 0001 	mov.w	r0, #1
    2a14:	f04f 0103 	mov.w	r1, #3
    2a18:	f641 63ed 	movw	r3, #7917	; 0x1eed
    2a1c:	f2c0 0300 	movt	r3, #0
    2a20:	4798      	blx	r3

	case USBC_ADDR:
		sysclk_enable_hsb_module(SYSCLK_USBC_DATA);
		sysclk_enable_pbb_module(SYSCLK_USBC_REGS);
    2a22:	f04f 0005 	mov.w	r0, #5
    2a26:	f242 0281 	movw	r2, #8321	; 0x2081
    2a2a:	f2c0 0200 	movt	r2, #0
    2a2e:	4790      	blx	r2
		break;
    2a30:	bd08      	pop	{r3, pc}

	case PEVC_ADDR:
		sysclk_enable_pbb_module(SYSCLK_PEVC);
    2a32:	f04f 0006 	mov.w	r0, #6
    2a36:	f242 0181 	movw	r1, #8321	; 0x2081
    2a3a:	f2c0 0100 	movt	r1, #0
    2a3e:	4788      	blx	r1
		break;
    2a40:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbc_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_PBC, module_index);
    2a42:	f04f 0004 	mov.w	r0, #4
    2a46:	f04f 0100 	mov.w	r1, #0
    2a4a:	f641 63ed 	movw	r3, #7917	; 0x1eed
    2a4e:	f2c0 0300 	movt	r3, #0
    2a52:	4798      	blx	r3
    2a54:	bd08      	pop	{r3, pc}
    2a56:	f04f 0004 	mov.w	r0, #4
    2a5a:	f04f 0101 	mov.w	r1, #1
    2a5e:	f641 63ed 	movw	r3, #7917	; 0x1eed
    2a62:	f2c0 0300 	movt	r3, #0
    2a66:	4798      	blx	r3
    2a68:	bd08      	pop	{r3, pc}
    2a6a:	f04f 0004 	mov.w	r0, #4
    2a6e:	f04f 0102 	mov.w	r1, #2
    2a72:	f641 63ed 	movw	r3, #7917	; 0x1eed
    2a76:	f2c0 0300 	movt	r3, #0
    2a7a:	4798      	blx	r3
    2a7c:	bd08      	pop	{r3, pc}
    2a7e:	f04f 0004 	mov.w	r0, #4
    2a82:	f04f 0103 	mov.w	r1, #3
    2a86:	f641 62ed 	movw	r2, #7917	; 0x1eed
    2a8a:	f2c0 0200 	movt	r2, #0
    2a8e:	4790      	blx	r2
    2a90:	bd08      	pop	{r3, pc}
    2a92:	f04f 0004 	mov.w	r0, #4
    2a96:	4601      	mov	r1, r0
    2a98:	f641 63ed 	movw	r3, #7917	; 0x1eed
    2a9c:	f2c0 0300 	movt	r3, #0
    2aa0:	4798      	blx	r3
    2aa2:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbd_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_PBD, module_index);
    2aa4:	f04f 0005 	mov.w	r0, #5
    2aa8:	f04f 0100 	mov.w	r1, #0
    2aac:	f641 62ed 	movw	r2, #7917	; 0x1eed
    2ab0:	f2c0 0200 	movt	r2, #0
    2ab4:	4790      	blx	r2
    2ab6:	bd08      	pop	{r3, pc}
    2ab8:	f04f 0005 	mov.w	r0, #5
    2abc:	f04f 0101 	mov.w	r1, #1
    2ac0:	f641 63ed 	movw	r3, #7917	; 0x1eed
    2ac4:	f2c0 0300 	movt	r3, #0
    2ac8:	4798      	blx	r3
    2aca:	bd08      	pop	{r3, pc}
    2acc:	f04f 0005 	mov.w	r0, #5
    2ad0:	f04f 0102 	mov.w	r1, #2
    2ad4:	f641 62ed 	movw	r2, #7917	; 0x1eed
    2ad8:	f2c0 0200 	movt	r2, #0
    2adc:	4790      	blx	r2
    2ade:	bd08      	pop	{r3, pc}
    2ae0:	f04f 0005 	mov.w	r0, #5
    2ae4:	f04f 0103 	mov.w	r1, #3
    2ae8:	f641 63ed 	movw	r3, #7917	; 0x1eed
    2aec:	f2c0 0300 	movt	r3, #0
    2af0:	4798      	blx	r3
    2af2:	bd08      	pop	{r3, pc}
    2af4:	f04f 0005 	mov.w	r0, #5
    2af8:	f04f 0104 	mov.w	r1, #4
    2afc:	f641 62ed 	movw	r2, #7917	; 0x1eed
    2b00:	f2c0 0200 	movt	r2, #0
    2b04:	4790      	blx	r2
    2b06:	bd08      	pop	{r3, pc}
    2b08:	f04f 0005 	mov.w	r0, #5
    2b0c:	4601      	mov	r1, r0
    2b0e:	f641 63ed 	movw	r3, #7917	; 0x1eed
    2b12:	f2c0 0300 	movt	r3, #0
    2b16:	4798      	blx	r3
    2b18:	bd08      	pop	{r3, pc}
    2b1a:	bf00      	nop

00002b1c <sysclk_disable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be disabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
    2b1c:	b508      	push	{r3, lr}
	switch ((uintptr_t)module) {
    2b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2b22:	f2c4 0307 	movt	r3, #16391	; 0x4007
    2b26:	4298      	cmp	r0, r3
    2b28:	f000 8231 	beq.w	2f8e <sysclk_disable_peripheral_clock+0x472>
    2b2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2b30:	f2c4 0107 	movt	r1, #16391	; 0x4007
    2b34:	4288      	cmp	r0, r1
    2b36:	f200 80bb 	bhi.w	2cb0 <sysclk_disable_peripheral_clock+0x194>
    2b3a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2b3e:	f2c4 0202 	movt	r2, #16386	; 0x4002
    2b42:	4290      	cmp	r0, r2
    2b44:	f000 81cb 	beq.w	2ede <sysclk_disable_peripheral_clock+0x3c2>
    2b48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2b4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
    2b50:	4298      	cmp	r0, r3
    2b52:	d851      	bhi.n	2bf8 <sysclk_disable_peripheral_clock+0xdc>
    2b54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2b58:	f2c4 0101 	movt	r1, #16385	; 0x4001
    2b5c:	4288      	cmp	r0, r1
    2b5e:	f000 8196 	beq.w	2e8e <sysclk_disable_peripheral_clock+0x372>
    2b62:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2b66:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2b6a:	4290      	cmp	r0, r2
    2b6c:	d820      	bhi.n	2bb0 <sysclk_disable_peripheral_clock+0x94>
    2b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2b72:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2b76:	4298      	cmp	r0, r3
    2b78:	f000 8171 	beq.w	2e5e <sysclk_disable_peripheral_clock+0x342>
    2b7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2b80:	f2c4 0100 	movt	r1, #16384	; 0x4000
    2b84:	4288      	cmp	r0, r1
    2b86:	d804      	bhi.n	2b92 <sysclk_disable_peripheral_clock+0x76>
    2b88:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    2b8c:	f040 82f3 	bne.w	3176 <sysclk_disable_peripheral_clock+0x65a>
    2b90:	e15d      	b.n	2e4e <sysclk_disable_peripheral_clock+0x332>
    2b92:	f04f 0300 	mov.w	r3, #0
    2b96:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2b9a:	4298      	cmp	r0, r3
    2b9c:	f000 8167 	beq.w	2e6e <sysclk_disable_peripheral_clock+0x352>
    2ba0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    2ba4:	f2c4 0101 	movt	r1, #16385	; 0x4001
    2ba8:	4288      	cmp	r0, r1
    2baa:	f040 82e4 	bne.w	3176 <sysclk_disable_peripheral_clock+0x65a>
    2bae:	e166      	b.n	2e7e <sysclk_disable_peripheral_clock+0x362>
    2bb0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    2bb4:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2bb8:	4290      	cmp	r0, r2
    2bba:	f000 8178 	beq.w	2eae <sysclk_disable_peripheral_clock+0x392>
    2bbe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    2bc2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2bc6:	4298      	cmp	r0, r3
    2bc8:	d807      	bhi.n	2bda <sysclk_disable_peripheral_clock+0xbe>
    2bca:	f44f 4104 	mov.w	r1, #33792	; 0x8400
    2bce:	f2c4 0101 	movt	r1, #16385	; 0x4001
    2bd2:	4288      	cmp	r0, r1
    2bd4:	f040 82cf 	bne.w	3176 <sysclk_disable_peripheral_clock+0x65a>
    2bd8:	e161      	b.n	2e9e <sysclk_disable_peripheral_clock+0x382>
    2bda:	f44f 4344 	mov.w	r3, #50176	; 0xc400
    2bde:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2be2:	4298      	cmp	r0, r3
    2be4:	f000 816b 	beq.w	2ebe <sysclk_disable_peripheral_clock+0x3a2>
    2be8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    2bec:	f2c4 0102 	movt	r1, #16386	; 0x4002
    2bf0:	4288      	cmp	r0, r1
    2bf2:	f040 82c0 	bne.w	3176 <sysclk_disable_peripheral_clock+0x65a>
    2bf6:	e16a      	b.n	2ece <sysclk_disable_peripheral_clock+0x3b2>
    2bf8:	f04f 0300 	mov.w	r3, #0
    2bfc:	f2c4 0304 	movt	r3, #16388	; 0x4004
    2c00:	4298      	cmp	r0, r3
    2c02:	f000 8194 	beq.w	2f2e <sysclk_disable_peripheral_clock+0x412>
    2c06:	f04f 0100 	mov.w	r1, #0
    2c0a:	f2c4 0104 	movt	r1, #16388	; 0x4004
    2c0e:	4288      	cmp	r0, r1
    2c10:	d823      	bhi.n	2c5a <sysclk_disable_peripheral_clock+0x13e>
    2c12:	f04f 0200 	mov.w	r2, #0
    2c16:	f2c4 0203 	movt	r2, #16387	; 0x4003
    2c1a:	4290      	cmp	r0, r2
    2c1c:	f000 816f 	beq.w	2efe <sysclk_disable_peripheral_clock+0x3e2>
    2c20:	f04f 0300 	mov.w	r3, #0
    2c24:	f2c4 0303 	movt	r3, #16387	; 0x4003
    2c28:	4298      	cmp	r0, r3
    2c2a:	d807      	bhi.n	2c3c <sysclk_disable_peripheral_clock+0x120>
    2c2c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    2c30:	f2c4 0102 	movt	r1, #16386	; 0x4002
    2c34:	4288      	cmp	r0, r1
    2c36:	f040 829e 	bne.w	3176 <sysclk_disable_peripheral_clock+0x65a>
    2c3a:	e158      	b.n	2eee <sysclk_disable_peripheral_clock+0x3d2>
    2c3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2c40:	f2c4 0303 	movt	r3, #16387	; 0x4003
    2c44:	4298      	cmp	r0, r3
    2c46:	f000 8162 	beq.w	2f0e <sysclk_disable_peripheral_clock+0x3f2>
    2c4a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    2c4e:	f2c4 0103 	movt	r1, #16387	; 0x4003
    2c52:	4288      	cmp	r0, r1
    2c54:	f040 828f 	bne.w	3176 <sysclk_disable_peripheral_clock+0x65a>
    2c58:	e161      	b.n	2f1e <sysclk_disable_peripheral_clock+0x402>
    2c5a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2c5e:	f2c4 0206 	movt	r2, #16390	; 0x4006
    2c62:	4290      	cmp	r0, r2
    2c64:	f000 817b 	beq.w	2f5e <sysclk_disable_peripheral_clock+0x442>
    2c68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2c6c:	f2c4 0306 	movt	r3, #16390	; 0x4006
    2c70:	4298      	cmp	r0, r3
    2c72:	d80e      	bhi.n	2c92 <sysclk_disable_peripheral_clock+0x176>
    2c74:	f04f 0100 	mov.w	r1, #0
    2c78:	f2c4 0106 	movt	r1, #16390	; 0x4006
    2c7c:	4288      	cmp	r0, r1
    2c7e:	f000 815e 	beq.w	2f3e <sysclk_disable_peripheral_clock+0x422>
    2c82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2c86:	f2c4 0206 	movt	r2, #16390	; 0x4006
    2c8a:	4290      	cmp	r0, r2
    2c8c:	f040 8273 	bne.w	3176 <sysclk_disable_peripheral_clock+0x65a>
    2c90:	e15d      	b.n	2f4e <sysclk_disable_peripheral_clock+0x432>
    2c92:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    2c96:	f2c4 0206 	movt	r2, #16390	; 0x4006
    2c9a:	4290      	cmp	r0, r2
    2c9c:	f000 8167 	beq.w	2f6e <sysclk_disable_peripheral_clock+0x452>
    2ca0:	f04f 0300 	mov.w	r3, #0
    2ca4:	f2c4 0307 	movt	r3, #16391	; 0x4007
    2ca8:	4298      	cmp	r0, r3
    2caa:	f040 8264 	bne.w	3176 <sysclk_disable_peripheral_clock+0x65a>
    2cae:	e166      	b.n	2f7e <sysclk_disable_peripheral_clock+0x462>
    2cb0:	f04f 0300 	mov.w	r3, #0
    2cb4:	f2c4 030e 	movt	r3, #16398	; 0x400e
    2cb8:	4298      	cmp	r0, r3
    2cba:	f000 81dc 	beq.w	3076 <sysclk_disable_peripheral_clock+0x55a>
    2cbe:	f04f 0100 	mov.w	r1, #0
    2cc2:	f2c4 010e 	movt	r1, #16398	; 0x400e
    2cc6:	4288      	cmp	r0, r1
    2cc8:	d85b      	bhi.n	2d82 <sysclk_disable_peripheral_clock+0x266>
    2cca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    2cce:	f2c4 020a 	movt	r2, #16394	; 0x400a
    2cd2:	4290      	cmp	r0, r2
    2cd4:	f000 818c 	beq.w	2ff0 <sysclk_disable_peripheral_clock+0x4d4>
    2cd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    2cdc:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2ce0:	4298      	cmp	r0, r3
    2ce2:	d823      	bhi.n	2d2c <sysclk_disable_peripheral_clock+0x210>
    2ce4:	f04f 0100 	mov.w	r1, #0
    2ce8:	f2c4 0108 	movt	r1, #16392	; 0x4008
    2cec:	4288      	cmp	r0, r1
    2cee:	f000 815e 	beq.w	2fae <sysclk_disable_peripheral_clock+0x492>
    2cf2:	f04f 0200 	mov.w	r2, #0
    2cf6:	f2c4 0208 	movt	r2, #16392	; 0x4008
    2cfa:	4290      	cmp	r0, r2
    2cfc:	d807      	bhi.n	2d0e <sysclk_disable_peripheral_clock+0x1f2>
    2cfe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    2d02:	f2c4 0307 	movt	r3, #16391	; 0x4007
    2d06:	4298      	cmp	r0, r3
    2d08:	f040 8235 	bne.w	3176 <sysclk_disable_peripheral_clock+0x65a>
    2d0c:	e147      	b.n	2f9e <sysclk_disable_peripheral_clock+0x482>
    2d0e:	f04f 0200 	mov.w	r2, #0
    2d12:	f2c4 020a 	movt	r2, #16394	; 0x400a
    2d16:	4290      	cmp	r0, r2
    2d18:	f000 8151 	beq.w	2fbe <sysclk_disable_peripheral_clock+0x4a2>
    2d1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2d20:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2d24:	4298      	cmp	r0, r3
    2d26:	f040 8226 	bne.w	3176 <sysclk_disable_peripheral_clock+0x65a>
    2d2a:	e150      	b.n	2fce <sysclk_disable_peripheral_clock+0x4b2>
    2d2c:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    2d30:	f2c4 010a 	movt	r1, #16394	; 0x400a
    2d34:	4288      	cmp	r0, r1
    2d36:	f000 8185 	beq.w	3044 <sysclk_disable_peripheral_clock+0x528>
    2d3a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    2d3e:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2d42:	4298      	cmp	r0, r3
    2d44:	d80e      	bhi.n	2d64 <sysclk_disable_peripheral_clock+0x248>
    2d46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    2d4a:	f2c4 020a 	movt	r2, #16394	; 0x400a
    2d4e:	4290      	cmp	r0, r2
    2d50:	f000 8156 	beq.w	3000 <sysclk_disable_peripheral_clock+0x4e4>
    2d54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    2d58:	f2c4 010a 	movt	r1, #16394	; 0x400a
    2d5c:	4288      	cmp	r0, r1
    2d5e:	f040 820a 	bne.w	3176 <sysclk_disable_peripheral_clock+0x65a>
    2d62:	e15e      	b.n	3022 <sysclk_disable_peripheral_clock+0x506>
    2d64:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
    2d68:	f2c4 020a 	movt	r2, #16394	; 0x400a
    2d6c:	4290      	cmp	r0, r2
    2d6e:	f000 817a 	beq.w	3066 <sysclk_disable_peripheral_clock+0x54a>
    2d72:	f04f 0300 	mov.w	r3, #0
    2d76:	f2c4 030b 	movt	r3, #16395	; 0x400b
    2d7a:	4298      	cmp	r0, r3
    2d7c:	f040 81fb 	bne.w	3176 <sysclk_disable_peripheral_clock+0x65a>
    2d80:	e05b      	b.n	2e3a <sysclk_disable_peripheral_clock+0x31e>
    2d82:	f04f 0300 	mov.w	r3, #0
    2d86:	f2c4 030f 	movt	r3, #16399	; 0x400f
    2d8a:	4298      	cmp	r0, r3
    2d8c:	f000 81a4 	beq.w	30d8 <sysclk_disable_peripheral_clock+0x5bc>
    2d90:	f04f 0200 	mov.w	r2, #0
    2d94:	f2c4 020f 	movt	r2, #16399	; 0x400f
    2d98:	4290      	cmp	r0, r2
    2d9a:	d823      	bhi.n	2de4 <sysclk_disable_peripheral_clock+0x2c8>
    2d9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2da0:	f2c4 010e 	movt	r1, #16398	; 0x400e
    2da4:	4288      	cmp	r0, r1
    2da6:	f000 817a 	beq.w	309e <sysclk_disable_peripheral_clock+0x582>
    2daa:	f44f 6300 	mov.w	r3, #2048	; 0x800
    2dae:	f2c4 030e 	movt	r3, #16398	; 0x400e
    2db2:	4298      	cmp	r0, r3
    2db4:	d807      	bhi.n	2dc6 <sysclk_disable_peripheral_clock+0x2aa>
    2db6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2dba:	f2c4 020e 	movt	r2, #16398	; 0x400e
    2dbe:	4290      	cmp	r0, r2
    2dc0:	f040 81d9 	bne.w	3176 <sysclk_disable_peripheral_clock+0x65a>
    2dc4:	e161      	b.n	308a <sysclk_disable_peripheral_clock+0x56e>
    2dc6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    2dca:	f2c4 010e 	movt	r1, #16398	; 0x400e
    2dce:	4288      	cmp	r0, r1
    2dd0:	f000 816f 	beq.w	30b2 <sysclk_disable_peripheral_clock+0x596>
    2dd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    2dd8:	f2c4 020e 	movt	r2, #16398	; 0x400e
    2ddc:	4290      	cmp	r0, r2
    2dde:	f040 81ca 	bne.w	3176 <sysclk_disable_peripheral_clock+0x65a>
    2de2:	e170      	b.n	30c6 <sysclk_disable_peripheral_clock+0x5aa>
    2de4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    2de8:	f2c4 010f 	movt	r1, #16399	; 0x400f
    2dec:	4288      	cmp	r0, r1
    2dee:	f000 8191 	beq.w	3114 <sysclk_disable_peripheral_clock+0x5f8>
    2df2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    2df6:	f2c4 020f 	movt	r2, #16399	; 0x400f
    2dfa:	4290      	cmp	r0, r2
    2dfc:	d80e      	bhi.n	2e1c <sysclk_disable_peripheral_clock+0x300>
    2dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2e02:	f2c4 030f 	movt	r3, #16399	; 0x400f
    2e06:	4298      	cmp	r0, r3
    2e08:	f000 8170 	beq.w	30ec <sysclk_disable_peripheral_clock+0x5d0>
    2e0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2e10:	f2c4 010f 	movt	r1, #16399	; 0x400f
    2e14:	4288      	cmp	r0, r1
    2e16:	f040 81ae 	bne.w	3176 <sysclk_disable_peripheral_clock+0x65a>
    2e1a:	e171      	b.n	3100 <sysclk_disable_peripheral_clock+0x5e4>
    2e1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    2e20:	f2c4 010f 	movt	r1, #16399	; 0x400f
    2e24:	4288      	cmp	r0, r1
    2e26:	f000 817f 	beq.w	3128 <sysclk_disable_peripheral_clock+0x60c>
    2e2a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
    2e2e:	f2c4 020f 	movt	r2, #16399	; 0x400f
    2e32:	4290      	cmp	r0, r2
    2e34:	f040 819f 	bne.w	3176 <sysclk_disable_peripheral_clock+0x65a>
    2e38:	e180      	b.n	313c <sysclk_disable_peripheral_clock+0x620>
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
    2e3a:	f04f 0001 	mov.w	r0, #1
    2e3e:	f04f 0109 	mov.w	r1, #9
    2e42:	f641 7255 	movw	r2, #8021	; 0x1f55
    2e46:	f2c0 0200 	movt	r2, #0
    2e4a:	4790      	blx	r2
    2e4c:	e17e      	b.n	314c <sysclk_disable_peripheral_clock+0x630>
	case AESA_ADDR:
		sysclk_disable_hsb_module(SYSCLK_AESA_HSB);
		break;

	case IISC_ADDR:
		sysclk_disable_pba_module(SYSCLK_IISC);
    2e4e:	f04f 0000 	mov.w	r0, #0
    2e52:	f242 0221 	movw	r2, #8225	; 0x2021
    2e56:	f2c0 0200 	movt	r2, #0
    2e5a:	4790      	blx	r2
		break;
    2e5c:	e176      	b.n	314c <sysclk_disable_peripheral_clock+0x630>

	case SPI_ADDR:
		sysclk_disable_pba_module(SYSCLK_SPI);
    2e5e:	f04f 0001 	mov.w	r0, #1
    2e62:	f242 0121 	movw	r1, #8225	; 0x2021
    2e66:	f2c0 0100 	movt	r1, #0
    2e6a:	4788      	blx	r1
		break;
    2e6c:	e16e      	b.n	314c <sysclk_disable_peripheral_clock+0x630>

	case TC0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TC0);
    2e6e:	f04f 0002 	mov.w	r0, #2
    2e72:	f242 0321 	movw	r3, #8225	; 0x2021
    2e76:	f2c0 0300 	movt	r3, #0
    2e7a:	4798      	blx	r3
		break;
    2e7c:	e166      	b.n	314c <sysclk_disable_peripheral_clock+0x630>

	case TC1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TC1);
    2e7e:	f04f 0003 	mov.w	r0, #3
    2e82:	f242 0221 	movw	r2, #8225	; 0x2021
    2e86:	f2c0 0200 	movt	r2, #0
    2e8a:	4790      	blx	r2
		break;
    2e8c:	e15e      	b.n	314c <sysclk_disable_peripheral_clock+0x630>

	case TWIM0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM0);
    2e8e:	f04f 0004 	mov.w	r0, #4
    2e92:	f242 0221 	movw	r2, #8225	; 0x2021
    2e96:	f2c0 0200 	movt	r2, #0
    2e9a:	4790      	blx	r2
		break;
    2e9c:	e156      	b.n	314c <sysclk_disable_peripheral_clock+0x630>

	case TWIS0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIS0);
    2e9e:	f04f 0005 	mov.w	r0, #5
    2ea2:	f242 0221 	movw	r2, #8225	; 0x2021
    2ea6:	f2c0 0200 	movt	r2, #0
    2eaa:	4790      	blx	r2
		break;
    2eac:	e14e      	b.n	314c <sysclk_disable_peripheral_clock+0x630>

	case TWIM1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM1);
    2eae:	f04f 0006 	mov.w	r0, #6
    2eb2:	f242 0121 	movw	r1, #8225	; 0x2021
    2eb6:	f2c0 0100 	movt	r1, #0
    2eba:	4788      	blx	r1
		break;
    2ebc:	e146      	b.n	314c <sysclk_disable_peripheral_clock+0x630>

	case TWIS1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIS1);
    2ebe:	f04f 0007 	mov.w	r0, #7
    2ec2:	f242 0321 	movw	r3, #8225	; 0x2021
    2ec6:	f2c0 0300 	movt	r3, #0
    2eca:	4798      	blx	r3
		break;
    2ecc:	e13e      	b.n	314c <sysclk_disable_peripheral_clock+0x630>

	case USART0_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART0);
    2ece:	f04f 0008 	mov.w	r0, #8
    2ed2:	f242 0221 	movw	r2, #8225	; 0x2021
    2ed6:	f2c0 0200 	movt	r2, #0
    2eda:	4790      	blx	r2
		break;
    2edc:	e136      	b.n	314c <sysclk_disable_peripheral_clock+0x630>

	case USART1_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART1);
    2ede:	f04f 0009 	mov.w	r0, #9
    2ee2:	f242 0221 	movw	r2, #8225	; 0x2021
    2ee6:	f2c0 0200 	movt	r2, #0
    2eea:	4790      	blx	r2
		break;
    2eec:	e12e      	b.n	314c <sysclk_disable_peripheral_clock+0x630>

	case USART2_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART2);
    2eee:	f04f 000a 	mov.w	r0, #10
    2ef2:	f242 0221 	movw	r2, #8225	; 0x2021
    2ef6:	f2c0 0200 	movt	r2, #0
    2efa:	4790      	blx	r2
		break;
    2efc:	e126      	b.n	314c <sysclk_disable_peripheral_clock+0x630>

	case USART3_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART3);
    2efe:	f04f 000b 	mov.w	r0, #11
    2f02:	f242 0121 	movw	r1, #8225	; 0x2021
    2f06:	f2c0 0100 	movt	r1, #0
    2f0a:	4788      	blx	r1
		break;
    2f0c:	e11e      	b.n	314c <sysclk_disable_peripheral_clock+0x630>

	case ADCIFE_ADDR:
		sysclk_disable_pba_module(SYSCLK_ADCIFE);
    2f0e:	f04f 000c 	mov.w	r0, #12
    2f12:	f242 0321 	movw	r3, #8225	; 0x2021
    2f16:	f2c0 0300 	movt	r3, #0
    2f1a:	4798      	blx	r3
		break;
    2f1c:	e116      	b.n	314c <sysclk_disable_peripheral_clock+0x630>

	case DACC_ADDR:
		sysclk_disable_pba_module(SYSCLK_DACC);
    2f1e:	f04f 000d 	mov.w	r0, #13
    2f22:	f242 0221 	movw	r2, #8225	; 0x2021
    2f26:	f2c0 0200 	movt	r2, #0
    2f2a:	4790      	blx	r2
		break;
    2f2c:	e10e      	b.n	314c <sysclk_disable_peripheral_clock+0x630>

	case ACIFC_ADDR:
		sysclk_disable_pba_module(SYSCLK_ACIFC);
    2f2e:	f04f 000e 	mov.w	r0, #14
    2f32:	f242 0121 	movw	r1, #8225	; 0x2021
    2f36:	f2c0 0100 	movt	r1, #0
    2f3a:	4788      	blx	r1
		break;
    2f3c:	e106      	b.n	314c <sysclk_disable_peripheral_clock+0x630>

	case GLOC_ADDR:
		sysclk_disable_pba_module(SYSCLK_GLOC);
    2f3e:	f04f 000f 	mov.w	r0, #15
    2f42:	f242 0121 	movw	r1, #8225	; 0x2021
    2f46:	f2c0 0100 	movt	r1, #0
    2f4a:	4788      	blx	r1
		break;
    2f4c:	e0fe      	b.n	314c <sysclk_disable_peripheral_clock+0x630>

	case ABDACB_ADDR:
		sysclk_disable_pba_module(SYSCLK_ABDACB);
    2f4e:	f04f 0010 	mov.w	r0, #16
    2f52:	f242 0321 	movw	r3, #8225	; 0x2021
    2f56:	f2c0 0300 	movt	r3, #0
    2f5a:	4798      	blx	r3
		break;
    2f5c:	e0f6      	b.n	314c <sysclk_disable_peripheral_clock+0x630>

	case TRNG_ADDR:
		sysclk_disable_pba_module(SYSCLK_TRNG);
    2f5e:	f04f 0011 	mov.w	r0, #17
    2f62:	f242 0321 	movw	r3, #8225	; 0x2021
    2f66:	f2c0 0300 	movt	r3, #0
    2f6a:	4798      	blx	r3
		break;
    2f6c:	e0ee      	b.n	314c <sysclk_disable_peripheral_clock+0x630>

	case PARC_ADDR:
		sysclk_disable_pba_module(SYSCLK_PARC);
    2f6e:	f04f 0012 	mov.w	r0, #18
    2f72:	f242 0221 	movw	r2, #8225	; 0x2021
    2f76:	f2c0 0200 	movt	r2, #0
    2f7a:	4790      	blx	r2
		break;
    2f7c:	e0e6      	b.n	314c <sysclk_disable_peripheral_clock+0x630>

	case CATB_ADDR:
		sysclk_disable_pba_module(SYSCLK_CATB);
    2f7e:	f04f 0013 	mov.w	r0, #19
    2f82:	f242 0121 	movw	r1, #8225	; 0x2021
    2f86:	f2c0 0100 	movt	r1, #0
    2f8a:	4788      	blx	r1
		break;
    2f8c:	e0de      	b.n	314c <sysclk_disable_peripheral_clock+0x630>

	case TWIM2_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM2);
    2f8e:	f04f 0015 	mov.w	r0, #21
    2f92:	f242 0121 	movw	r1, #8225	; 0x2021
    2f96:	f2c0 0100 	movt	r1, #0
    2f9a:	4788      	blx	r1
		break;
    2f9c:	e0d6      	b.n	314c <sysclk_disable_peripheral_clock+0x630>

	case TWIM3_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM3);
    2f9e:	f04f 0016 	mov.w	r0, #22
    2fa2:	f242 0121 	movw	r1, #8225	; 0x2021
    2fa6:	f2c0 0100 	movt	r1, #0
    2faa:	4788      	blx	r1
		break;
    2fac:	e0ce      	b.n	314c <sysclk_disable_peripheral_clock+0x630>

	case LCDCA_ADDR:
		sysclk_disable_pba_module(SYSCLK_LCDCA);
    2fae:	f04f 0017 	mov.w	r0, #23
    2fb2:	f242 0221 	movw	r2, #8225	; 0x2021
    2fb6:	f2c0 0200 	movt	r2, #0
    2fba:	4790      	blx	r2
		break;
    2fbc:	e0c6      	b.n	314c <sysclk_disable_peripheral_clock+0x630>

	case HFLASHC_ADDR:
		sysclk_disable_pbb_module(SYSCLK_HFLASHC_REGS);
    2fbe:	f04f 0000 	mov.w	r0, #0
    2fc2:	f242 03e1 	movw	r3, #8417	; 0x20e1
    2fc6:	f2c0 0300 	movt	r3, #0
    2fca:	4798      	blx	r3
		break;
    2fcc:	e0be      	b.n	314c <sysclk_disable_peripheral_clock+0x630>
    2fce:	f04f 0001 	mov.w	r0, #1
    2fd2:	f04f 0102 	mov.w	r1, #2
    2fd6:	f641 7255 	movw	r2, #8021	; 0x1f55
    2fda:	f2c0 0200 	movt	r2, #0
    2fde:	4790      	blx	r2

	case HCACHE_ADDR:
		sysclk_disable_hsb_module(SYSCLK_HRAMC1_DATA);
		sysclk_disable_pbb_module(SYSCLK_HRAMC1_REGS);
    2fe0:	f04f 0001 	mov.w	r0, #1
    2fe4:	f242 01e1 	movw	r1, #8417	; 0x20e1
    2fe8:	f2c0 0100 	movt	r1, #0
    2fec:	4788      	blx	r1
		break;
    2fee:	e0ad      	b.n	314c <sysclk_disable_peripheral_clock+0x630>

	case HMATRIX_ADDR:
		sysclk_disable_pbb_module(SYSCLK_HMATRIX);
    2ff0:	f04f 0002 	mov.w	r0, #2
    2ff4:	f242 01e1 	movw	r1, #8417	; 0x20e1
    2ff8:	f2c0 0100 	movt	r1, #0
    2ffc:	4788      	blx	r1
		break;
    2ffe:	e0a5      	b.n	314c <sysclk_disable_peripheral_clock+0x630>
    3000:	f04f 0001 	mov.w	r0, #1
    3004:	f04f 0100 	mov.w	r1, #0
    3008:	f641 7355 	movw	r3, #8021	; 0x1f55
    300c:	f2c0 0300 	movt	r3, #0
    3010:	4798      	blx	r3

	case PDCA_ADDR:
		sysclk_disable_hsb_module(SYSCLK_PDCA_HSB);
		sysclk_disable_pbb_module(SYSCLK_PDCA_PB);
    3012:	f04f 0003 	mov.w	r0, #3
    3016:	f242 01e1 	movw	r1, #8417	; 0x20e1
    301a:	f2c0 0100 	movt	r1, #0
    301e:	4788      	blx	r1
		break;
    3020:	e094      	b.n	314c <sysclk_disable_peripheral_clock+0x630>
    3022:	f04f 0001 	mov.w	r0, #1
    3026:	f04f 0104 	mov.w	r1, #4
    302a:	f641 7355 	movw	r3, #8021	; 0x1f55
    302e:	f2c0 0300 	movt	r3, #0
    3032:	4798      	blx	r3

	case CRCCU_ADDR:
		sysclk_disable_hsb_module(SYSCLK_CRCCU_DATA);
		sysclk_disable_pbb_module(SYSCLK_CRCCU_REGS);
    3034:	f04f 0004 	mov.w	r0, #4
    3038:	f242 02e1 	movw	r2, #8417	; 0x20e1
    303c:	f2c0 0200 	movt	r2, #0
    3040:	4790      	blx	r2
		break;
    3042:	e083      	b.n	314c <sysclk_disable_peripheral_clock+0x630>
    3044:	f04f 0001 	mov.w	r0, #1
    3048:	f04f 0103 	mov.w	r1, #3
    304c:	f641 7355 	movw	r3, #8021	; 0x1f55
    3050:	f2c0 0300 	movt	r3, #0
    3054:	4798      	blx	r3

	case USBC_ADDR:
		sysclk_disable_hsb_module(SYSCLK_USBC_DATA);
		sysclk_disable_pbb_module(SYSCLK_USBC_REGS);
    3056:	f04f 0005 	mov.w	r0, #5
    305a:	f242 02e1 	movw	r2, #8417	; 0x20e1
    305e:	f2c0 0200 	movt	r2, #0
    3062:	4790      	blx	r2
		break;
    3064:	e072      	b.n	314c <sysclk_disable_peripheral_clock+0x630>

	case PEVC_ADDR:
		sysclk_disable_pbb_module(SYSCLK_PEVC);
    3066:	f04f 0006 	mov.w	r0, #6
    306a:	f242 01e1 	movw	r1, #8417	; 0x20e1
    306e:	f2c0 0100 	movt	r1, #0
    3072:	4788      	blx	r1
		break;
    3074:	e06a      	b.n	314c <sysclk_disable_peripheral_clock+0x630>
 * \brief Disable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_disable_pbc_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_PBC, module_index);
    3076:	f04f 0004 	mov.w	r0, #4
    307a:	f04f 0100 	mov.w	r1, #0
    307e:	f641 7355 	movw	r3, #8021	; 0x1f55
    3082:	f2c0 0300 	movt	r3, #0
    3086:	4798      	blx	r3
    3088:	e060      	b.n	314c <sysclk_disable_peripheral_clock+0x630>
    308a:	f04f 0004 	mov.w	r0, #4
    308e:	f04f 0101 	mov.w	r1, #1
    3092:	f641 7355 	movw	r3, #8021	; 0x1f55
    3096:	f2c0 0300 	movt	r3, #0
    309a:	4798      	blx	r3
    309c:	e056      	b.n	314c <sysclk_disable_peripheral_clock+0x630>
    309e:	f04f 0004 	mov.w	r0, #4
    30a2:	f04f 0102 	mov.w	r1, #2
    30a6:	f641 7355 	movw	r3, #8021	; 0x1f55
    30aa:	f2c0 0300 	movt	r3, #0
    30ae:	4798      	blx	r3
    30b0:	e04c      	b.n	314c <sysclk_disable_peripheral_clock+0x630>
    30b2:	f04f 0004 	mov.w	r0, #4
    30b6:	f04f 0103 	mov.w	r1, #3
    30ba:	f641 7255 	movw	r2, #8021	; 0x1f55
    30be:	f2c0 0200 	movt	r2, #0
    30c2:	4790      	blx	r2
    30c4:	e042      	b.n	314c <sysclk_disable_peripheral_clock+0x630>
    30c6:	f04f 0004 	mov.w	r0, #4
    30ca:	4601      	mov	r1, r0
    30cc:	f641 7355 	movw	r3, #8021	; 0x1f55
    30d0:	f2c0 0300 	movt	r3, #0
    30d4:	4798      	blx	r3
    30d6:	e039      	b.n	314c <sysclk_disable_peripheral_clock+0x630>
 * \brief Disable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_disable_pbd_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_PBD, module_index);
    30d8:	f04f 0005 	mov.w	r0, #5
    30dc:	f04f 0100 	mov.w	r1, #0
    30e0:	f641 7255 	movw	r2, #8021	; 0x1f55
    30e4:	f2c0 0200 	movt	r2, #0
    30e8:	4790      	blx	r2
    30ea:	e02f      	b.n	314c <sysclk_disable_peripheral_clock+0x630>
    30ec:	f04f 0005 	mov.w	r0, #5
    30f0:	f04f 0101 	mov.w	r1, #1
    30f4:	f641 7355 	movw	r3, #8021	; 0x1f55
    30f8:	f2c0 0300 	movt	r3, #0
    30fc:	4798      	blx	r3
    30fe:	e025      	b.n	314c <sysclk_disable_peripheral_clock+0x630>
    3100:	f04f 0005 	mov.w	r0, #5
    3104:	f04f 0102 	mov.w	r1, #2
    3108:	f641 7255 	movw	r2, #8021	; 0x1f55
    310c:	f2c0 0200 	movt	r2, #0
    3110:	4790      	blx	r2
    3112:	e01b      	b.n	314c <sysclk_disable_peripheral_clock+0x630>
    3114:	f04f 0005 	mov.w	r0, #5
    3118:	f04f 0103 	mov.w	r1, #3
    311c:	f641 7355 	movw	r3, #8021	; 0x1f55
    3120:	f2c0 0300 	movt	r3, #0
    3124:	4798      	blx	r3
    3126:	e011      	b.n	314c <sysclk_disable_peripheral_clock+0x630>
    3128:	f04f 0005 	mov.w	r0, #5
    312c:	f04f 0104 	mov.w	r1, #4
    3130:	f641 7255 	movw	r2, #8021	; 0x1f55
    3134:	f2c0 0200 	movt	r2, #0
    3138:	4790      	blx	r2
    313a:	e007      	b.n	314c <sysclk_disable_peripheral_clock+0x630>
    313c:	f04f 0005 	mov.w	r0, #5
    3140:	4601      	mov	r1, r0
    3142:	f641 7355 	movw	r3, #8021	; 0x1f55
    3146:	f2c0 0300 	movt	r3, #0
    314a:	4798      	blx	r3
	}

	// Disable PBA divided clock if possible.
#define PBADIV_CLKSRC_MASK (SYSCLK_TC0 | SYSCLK_TC1 \
		| SYSCLK_USART0 | SYSCLK_USART1 | SYSCLK_USART2 | SYSCLK_USART3)
	if ((PM->PM_PBAMASK & PBADIV_CLKSRC_MASK) == 0) {
    314c:	f04f 0000 	mov.w	r0, #0
    3150:	f2c4 000e 	movt	r0, #16398	; 0x400e
    3154:	6a82      	ldr	r2, [r0, #40]	; 0x28
    3156:	f012 0f0b 	tst.w	r2, #11
    315a:	d10c      	bne.n	3176 <sysclk_disable_peripheral_clock+0x65a>
 */
static inline void sysclk_disable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    315c:	f04f 0300 	mov.w	r3, #0
    3160:	f2c4 030e 	movt	r3, #16398	; 0x400e
    3164:	6c19      	ldr	r1, [r3, #64]	; 0x40
	temp_mask &= ~mask;
    3166:	f021 007f 	bic.w	r0, r1, #127	; 0x7f
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    316a:	f04f 0240 	mov.w	r2, #64	; 0x40
    316e:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    3172:	659a      	str	r2, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    3174:	6418      	str	r0, [r3, #64]	; 0x40
    3176:	bd08      	pop	{r3, pc}

00003178 <sysclk_set_prescalers>:
 * \param pbd_shift The PBD clock will be divided by \f$2^{pbd\_shift}\f$
 */
void sysclk_set_prescalers(uint32_t cpu_shift,
		uint32_t pba_shift, uint32_t pbb_shift,
		uint32_t pbc_shift, uint32_t pbd_shift)
{
    3178:	b4f0      	push	{r4, r5, r6, r7}
    317a:	9c04      	ldr	r4, [sp, #16]
	Assert(cpu_shift <= pba_shift);
	Assert(cpu_shift <= pbb_shift);
	Assert(cpu_shift <= pbc_shift);
	Assert(cpu_shift <= pbd_shift);

	if (cpu_shift > 0) {
    317c:	b130      	cbz	r0, 318c <sysclk_set_prescalers+0x14>
		cpu_cksel = (PM_CPUSEL_CPUSEL(cpu_shift - 1))
    317e:	f100 36ff 	add.w	r6, r0, #4294967295
    3182:	f006 0707 	and.w	r7, r6, #7
    3186:	f047 0080 	orr.w	r0, r7, #128	; 0x80
    318a:	e001      	b.n	3190 <sysclk_set_prescalers+0x18>
void sysclk_set_prescalers(uint32_t cpu_shift,
		uint32_t pba_shift, uint32_t pbb_shift,
		uint32_t pbc_shift, uint32_t pbd_shift)
{
	irqflags_t flags;
	uint32_t   cpu_cksel = 0;
    318c:	f04f 0000 	mov.w	r0, #0
	if (cpu_shift > 0) {
		cpu_cksel = (PM_CPUSEL_CPUSEL(cpu_shift - 1))
				| PM_CPUSEL_CPUDIV;
	}

	if (pba_shift > 0) {
    3190:	b131      	cbz	r1, 31a0 <sysclk_set_prescalers+0x28>
		pba_cksel = (PM_PBASEL_PBSEL(pba_shift - 1))
    3192:	f101 35ff 	add.w	r5, r1, #4294967295
    3196:	f005 0607 	and.w	r6, r5, #7
    319a:	f046 0180 	orr.w	r1, r6, #128	; 0x80
    319e:	e001      	b.n	31a4 <sysclk_set_prescalers+0x2c>
		uint32_t pba_shift, uint32_t pbb_shift,
		uint32_t pbc_shift, uint32_t pbd_shift)
{
	irqflags_t flags;
	uint32_t   cpu_cksel = 0;
	uint32_t   pba_cksel = 0;
    31a0:	f04f 0100 	mov.w	r1, #0
	if (pba_shift > 0) {
		pba_cksel = (PM_PBASEL_PBSEL(pba_shift - 1))
				| PM_PBASEL_PBDIV;
	}

	if (pbb_shift > 0) {
    31a4:	b132      	cbz	r2, 31b4 <sysclk_set_prescalers+0x3c>
		pbb_cksel = (PM_PBBSEL_PBSEL(pbb_shift - 1))
    31a6:	f102 37ff 	add.w	r7, r2, #4294967295
    31aa:	f007 0507 	and.w	r5, r7, #7
    31ae:	f045 0280 	orr.w	r2, r5, #128	; 0x80
    31b2:	e001      	b.n	31b8 <sysclk_set_prescalers+0x40>
		uint32_t pbc_shift, uint32_t pbd_shift)
{
	irqflags_t flags;
	uint32_t   cpu_cksel = 0;
	uint32_t   pba_cksel = 0;
	uint32_t   pbb_cksel = 0;
    31b4:	f04f 0200 	mov.w	r2, #0
	if (pbb_shift > 0) {
		pbb_cksel = (PM_PBBSEL_PBSEL(pbb_shift - 1))
				| PM_PBBSEL_PBDIV;
	}

	if (pbc_shift > 0) {
    31b8:	b133      	cbz	r3, 31c8 <sysclk_set_prescalers+0x50>
		pbc_cksel = (PM_PBCSEL_PBSEL(pbc_shift - 1))
    31ba:	f103 36ff 	add.w	r6, r3, #4294967295
    31be:	f006 0707 	and.w	r7, r6, #7
    31c2:	f047 0380 	orr.w	r3, r7, #128	; 0x80
    31c6:	e001      	b.n	31cc <sysclk_set_prescalers+0x54>
{
	irqflags_t flags;
	uint32_t   cpu_cksel = 0;
	uint32_t   pba_cksel = 0;
	uint32_t   pbb_cksel = 0;
	uint32_t   pbc_cksel = 0;
    31c8:	f04f 0300 	mov.w	r3, #0
	if (pbc_shift > 0) {
		pbc_cksel = (PM_PBCSEL_PBSEL(pbc_shift - 1))
				| PM_PBCSEL_PBDIV;
	}

	if (pbd_shift > 0) {
    31cc:	b134      	cbz	r4, 31dc <sysclk_set_prescalers+0x64>
		pbd_cksel = (PM_PBDSEL_PBSEL(pbd_shift - 1))
    31ce:	f104 34ff 	add.w	r4, r4, #4294967295
    31d2:	f004 0507 	and.w	r5, r4, #7
    31d6:	f045 0780 	orr.w	r7, r5, #128	; 0x80
    31da:	e001      	b.n	31e0 <sysclk_set_prescalers+0x68>
	irqflags_t flags;
	uint32_t   cpu_cksel = 0;
	uint32_t   pba_cksel = 0;
	uint32_t   pbb_cksel = 0;
	uint32_t   pbc_cksel = 0;
	uint32_t   pbd_cksel = 0;
    31dc:	f04f 0700 	mov.w	r7, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    31e0:	f3ef 8610 	mrs	r6, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    31e4:	b672      	cpsid	i
    31e6:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    31ea:	f240 0444 	movw	r4, #68	; 0x44
    31ee:	f2c2 0400 	movt	r4, #8192	; 0x2000
    31f2:	f04f 0500 	mov.w	r5, #0
    31f6:	7025      	strb	r5, [r4, #0]
				| PM_PBDSEL_PBDIV;
	}

	flags = cpu_irq_save();

	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    31f8:	462c      	mov	r4, r5
    31fa:	f2c4 040e 	movt	r4, #16398	; 0x400e
    31fe:	f04f 0504 	mov.w	r5, #4
    3202:	f6ca 2500 	movt	r5, #43520	; 0xaa00
    3206:	65a5      	str	r5, [r4, #88]	; 0x58
		| PM_UNLOCK_ADDR((uint32_t)&PM->PM_CPUSEL - (uint32_t)PM);
	PM->PM_CPUSEL = cpu_cksel;
    3208:	6060      	str	r0, [r4, #4]

	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    320a:	f04f 000c 	mov.w	r0, #12
    320e:	f6ca 2000 	movt	r0, #43520	; 0xaa00
    3212:	65a0      	str	r0, [r4, #88]	; 0x58
		| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBASEL - (uint32_t)PM);
	PM->PM_PBASEL = pba_cksel;
    3214:	60e1      	str	r1, [r4, #12]

	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    3216:	f04f 0110 	mov.w	r1, #16
    321a:	f6ca 2100 	movt	r1, #43520	; 0xaa00
    321e:	65a1      	str	r1, [r4, #88]	; 0x58
		| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBBSEL - (uint32_t)PM);
	PM->PM_PBBSEL = pbb_cksel;
    3220:	6122      	str	r2, [r4, #16]

	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    3222:	f04f 0214 	mov.w	r2, #20
    3226:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    322a:	65a2      	str	r2, [r4, #88]	; 0x58
		| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBCSEL - (uint32_t)PM);
	PM->PM_PBCSEL = pbc_cksel;
    322c:	6163      	str	r3, [r4, #20]

	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    322e:	f04f 0318 	mov.w	r3, #24
    3232:	f6ca 2300 	movt	r3, #43520	; 0xaa00
    3236:	65a3      	str	r3, [r4, #88]	; 0x58
		| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBDSEL - (uint32_t)PM);
	PM->PM_PBDSEL = pbd_cksel;
    3238:	61a7      	str	r7, [r4, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    323a:	b94e      	cbnz	r6, 3250 <sysclk_set_prescalers+0xd8>
		cpu_irq_enable();
    323c:	f240 0044 	movw	r0, #68	; 0x44
    3240:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3244:	f04f 0101 	mov.w	r1, #1
    3248:	7001      	strb	r1, [r0, #0]
    324a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    324e:	b662      	cpsie	i

	cpu_irq_restore(flags);
}
    3250:	bcf0      	pop	{r4, r5, r6, r7}
    3252:	4770      	bx	lr

00003254 <sysclk_set_source>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3254:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3258:	b672      	cpsid	i
    325a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    325e:	f240 0344 	movw	r3, #68	; 0x44
    3262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3266:	f04f 0100 	mov.w	r1, #0
    326a:	7019      	strb	r1, [r3, #0]
{
	irqflags_t flags;
	Assert(src <= SYSCLK_SRC_RC1M);

	flags = cpu_irq_save();
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    326c:	460b      	mov	r3, r1
    326e:	f2c4 030e 	movt	r3, #16398	; 0x400e
    3272:	f04f 412a 	mov.w	r1, #2852126720	; 0xaa000000
    3276:	6599      	str	r1, [r3, #88]	; 0x58
		| PM_UNLOCK_ADDR((uint32_t)&PM->PM_MCCTRL - (uint32_t)PM);
	PM->PM_MCCTRL = src;
    3278:	6018      	str	r0, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    327a:	b94a      	cbnz	r2, 3290 <sysclk_set_source+0x3c>
		cpu_irq_enable();
    327c:	f240 0044 	movw	r0, #68	; 0x44
    3280:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3284:	f04f 0201 	mov.w	r2, #1
    3288:	7002      	strb	r2, [r0, #0]
    328a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    328e:	b662      	cpsie	i
    3290:	4770      	bx	lr
    3292:	bf00      	nop

00003294 <sysclk_init>:
   genclk_disable(7);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
    3294:	b530      	push	{r4, r5, lr}
    3296:	b083      	sub	sp, #12
	uint32_t ps_value = 0;
	bool is_fwu_enabled = false;

#if CONFIG_HCACHE_ENABLE == 1
	/* Enable HCACHE */
	sysclk_enable_peripheral_clock(HCACHE);
    3298:	f44f 6480 	mov.w	r4, #1024	; 0x400
    329c:	f2c4 040a 	movt	r4, #16394	; 0x400a
    32a0:	4620      	mov	r0, r4
    32a2:	f242 433d 	movw	r3, #9277	; 0x243d
    32a6:	f2c0 0300 	movt	r3, #0
    32aa:	4798      	blx	r3
	HCACHE->HCACHE_CTRL = HCACHE_CTRL_CEN_YES;
    32ac:	f04f 0001 	mov.w	r0, #1
    32b0:	60a0      	str	r0, [r4, #8]
	while (!(HCACHE->HCACHE_SR & HCACHE_SR_CSTS_EN));
    32b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    32b6:	f2c4 020a 	movt	r2, #16394	; 0x400a
    32ba:	68d1      	ldr	r1, [r2, #12]
    32bc:	f011 0f01 	tst.w	r1, #1
    32c0:	d0fb      	beq.n	32ba <sysclk_init+0x26>

	/* Set up system clock dividers if different from defaults */
	if ((CONFIG_SYSCLK_CPU_DIV > 0) || (CONFIG_SYSCLK_PBA_DIV > 0) ||
			(CONFIG_SYSCLK_PBB_DIV > 0) || (CONFIG_SYSCLK_PBC_DIV > 0) ||
			(CONFIG_SYSCLK_PBD_DIV > 0)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_CPU_DIV,
    32c2:	f04f 0301 	mov.w	r3, #1
    32c6:	9300      	str	r3, [sp, #0]
    32c8:	4618      	mov	r0, r3
    32ca:	4619      	mov	r1, r3
    32cc:	461a      	mov	r2, r3
    32ce:	f243 1579 	movw	r5, #12665	; 0x3179
    32d2:	f2c0 0500 	movt	r5, #0
    32d6:	47a8      	blx	r5
static inline void osc_enable(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		osc_priv_enable_osc0();
    32d8:	f641 64a1 	movw	r4, #7841	; 0x1ea1
    32dc:	f2c0 0400 	movt	r4, #0
    32e0:	47a0      	blx	r4
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
    32e2:	f44f 6000 	mov.w	r0, #2048	; 0x800
    32e6:	f2c4 000e 	movt	r0, #16398	; 0x400e
    32ea:	6943      	ldr	r3, [r0, #20]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    32ec:	f013 0f01 	tst.w	r3, #1
    32f0:	d0fb      	beq.n	32ea <sysclk_init+0x56>
#ifdef BOARD_OSC0_HZ
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_OSC0) {
		osc_enable(OSC_ID_OSC0);
		osc_wait_ready(OSC_ID_OSC0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz(), ps_value, is_fwu_enabled);
    32f2:	f648 5080 	movw	r0, #36224	; 0x8d80
    32f6:	f2c0 005b 	movt	r0, #91	; 0x5b
    32fa:	f04f 0101 	mov.w	r1, #1
    32fe:	f04f 0200 	mov.w	r2, #0
    3302:	f243 6585 	movw	r5, #13957	; 0x3685
    3306:	f2c0 0500 	movt	r5, #0
    330a:	47a8      	blx	r5
		sysclk_set_source(SYSCLK_SRC_OSC0);
    330c:	f04f 0001 	mov.w	r0, #1
    3310:	f243 2255 	movw	r2, #12885	; 0x3255
    3314:	f2c0 0200 	movt	r2, #0
    3318:	4790      	blx	r2
	if (!no_halt) {
		bpm_power_scaling_cpu(bpm, ps_value);
		return true;
	}

	return bpm_power_scaling_cpu_failsafe(bpm, ps_value, 240000);
    331a:	f04f 0000 	mov.w	r0, #0
    331e:	f2c4 000f 	movt	r0, #16399	; 0x400f
    3322:	f04f 0101 	mov.w	r1, #1
    3326:	f64a 1280 	movw	r2, #43392	; 0xa980
    332a:	f2c0 0203 	movt	r2, #3
    332e:	f243 445d 	movw	r4, #13405	; 0x345d
    3332:	f2c0 0400 	movt	r4, #0
    3336:	47a0      	blx	r4
		Assert(false);
	}

	/* Automatically switch to low power mode */
	bpm_configure_power_scaling(BPM, ps_value, BPM_PSCM_CPU_NOT_HALT);
	while ((bpm_get_status(BPM) & BPM_SR_PSOK) == 0);
    3338:	f04f 0400 	mov.w	r4, #0
    333c:	f2c4 040f 	movt	r4, #16399	; 0x400f
    3340:	f243 45d5 	movw	r5, #13525	; 0x34d5
    3344:	f2c0 0500 	movt	r5, #0
    3348:	4620      	mov	r0, r4
    334a:	47a8      	blx	r5
    334c:	f010 0f01 	tst.w	r0, #1
    3350:	d0fa      	beq.n	3348 <sysclk_init+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3352:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3356:	b672      	cpsid	i
    3358:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    335c:	f240 0244 	movw	r2, #68	; 0x44
    3360:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3364:	f04f 0100 	mov.w	r1, #0
    3368:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    336a:	b928      	cbnz	r0, 3378 <sysclk_init+0xe4>
		cpu_irq_enable();
    336c:	f04f 0001 	mov.w	r0, #1
    3370:	7010      	strb	r0, [r2, #0]
    3372:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3376:	b662      	cpsie	i

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
    3378:	b003      	add	sp, #12
    337a:	bd30      	pop	{r4, r5, pc}

0000337c <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_disable_pin(pin);\
	} while (0)

void board_init(void)
{
    337c:	b510      	push	{r4, lr}
    337e:	b086      	sub	sp, #24
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	struct wdt_dev_inst wdt_inst;
	struct wdt_config   wdt_cfg;

	wdt_get_config_defaults(&wdt_cfg);
    3380:	4668      	mov	r0, sp
    3382:	f243 73b1 	movw	r3, #14257	; 0x37b1
    3386:	f2c0 0300 	movt	r3, #0
    338a:	4798      	blx	r3
	wdt_init(&wdt_inst, WDT, &wdt_cfg);
    338c:	a804      	add	r0, sp, #16
    338e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    3392:	f2c4 010f 	movt	r1, #16399	; 0x400f
    3396:	466a      	mov	r2, sp
    3398:	f243 74cd 	movw	r4, #14285	; 0x37cd
    339c:	f2c0 0400 	movt	r4, #0
    33a0:	47a0      	blx	r4
	wdt_disable(&wdt_inst);
    33a2:	a804      	add	r0, sp, #16
    33a4:	f643 0199 	movw	r1, #14489	; 0x3899
    33a8:	f2c0 0100 	movt	r1, #0
    33ac:	4788      	blx	r1
	return 1U << (pin & 0x1F);
}

__always_inline static void arch_ioport_init(void)
{
	sysclk_enable_peripheral_clock(GPIO);
    33ae:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    33b2:	f2c4 040e 	movt	r4, #16398	; 0x400e
    33b6:	4620      	mov	r0, r4
    33b8:	f242 423d 	movw	r2, #9277	; 0x243d
    33bc:	f2c0 0200 	movt	r2, #0
    33c0:	4790      	blx	r2

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    33c2:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
    33c6:	f2c4 000e 	movt	r0, #16398	; 0x400e
    33ca:	f04f 0380 	mov.w	r3, #128	; 0x80
    33ce:	6443      	str	r3, [r0, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    33d0:	f8c0 3168 	str.w	r3, [r0, #360]	; 0x168

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    33d4:	6543      	str	r3, [r0, #84]	; 0x54
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    33d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    33da:	6482      	str	r2, [r0, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    33dc:	f8c0 2164 	str.w	r2, [r0, #356]	; 0x164
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
    33e0:	6742      	str	r2, [r0, #116]	; 0x74

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    33e2:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    33e6:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    33ea:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    33ee:	6182      	str	r2, [r0, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    33f0:	6282      	str	r2, [r0, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    33f2:	6382      	str	r2, [r0, #56]	; 0x38
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    33f4:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    33f8:	6781      	str	r1, [r0, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    33fa:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    33fe:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    3402:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    3406:	6181      	str	r1, [r0, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    3408:	6281      	str	r1, [r0, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    340a:	6381      	str	r1, [r0, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    340c:	6081      	str	r1, [r0, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    340e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    3412:	6783      	str	r3, [r0, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    3414:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    3418:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    341c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    3420:	6183      	str	r3, [r0, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    3422:	6283      	str	r3, [r0, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    3424:	6383      	str	r3, [r0, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    3426:	6083      	str	r3, [r0, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    3428:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    342c:	67a0      	str	r0, [r4, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    342e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    3432:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    3436:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
    343a:	6160      	str	r0, [r4, #20]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    343c:	62a0      	str	r0, [r4, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    343e:	63a0      	str	r0, [r4, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    3440:	60a0      	str	r0, [r4, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    3442:	67a2      	str	r2, [r4, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    3444:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    3448:	f8c4 20c8 	str.w	r2, [r4, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    344c:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
    3450:	6162      	str	r2, [r4, #20]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    3452:	62a2      	str	r2, [r4, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    3454:	63a2      	str	r2, [r4, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    3456:	60a2      	str	r2, [r4, #8]
	ioport_set_pin_peripheral_mode(PIN_PA15D_PARC_PCDATA6, MUX_PA15D_PARC_PCDATA6);
	ioport_set_pin_peripheral_mode(PIN_PA16D_PARC_PCDATA7, MUX_PA16D_PARC_PCDATA7);
	ioport_set_pin_peripheral_mode(PIN_PA18D_PARC_PCEN1, MUX_PA18D_PARC_PCEN1);
	ioport_set_pin_peripheral_mode(PIN_PA19D_PARC_PCEN2, MUX_PA19D_PARC_PCEN2);
#endif
}
    3458:	b006      	add	sp, #24
    345a:	bd10      	pop	{r4, pc}

0000345c <bpm_power_scaling_cpu_failsafe>:
}


bool bpm_power_scaling_cpu_failsafe(Bpm *bpm, uint32_t ps_value,
	uint32_t timeout)
{
    345c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t pmcon = 0;

	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;
    3460:	69c4      	ldr	r4, [r0, #28]

	/* Clear last PS Value & Write new one */
	pmcon &= ~BPM_PMCON_PS_Msk;
    3462:	f024 0503 	bic.w	r5, r4, #3
	pmcon |= BPM_PMCON_PS(ps_value);
    3466:	f045 030c 	orr.w	r3, r5, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    346a:	f3ef 8610 	mrs	r6, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    346e:	b672      	cpsid	i
    3470:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    3474:	f04f 0500 	mov.w	r5, #0
    3478:	f240 0744 	movw	r7, #68	; 0x44
    347c:	f2c2 0700 	movt	r7, #8192	; 0x2000
    3480:	703d      	strb	r5, [r7, #0]
	uint32_t ctrl, load, val;
	/* Avoid interrupt while flash halt */
	flags = cpu_irq_save();

	/* Save SysTick */
	val = SysTick->VAL;
    3482:	f24e 0410 	movw	r4, #57360	; 0xe010
    3486:	f2ce 0400 	movt	r4, #57344	; 0xe000
    348a:	f8d4 8008 	ldr.w	r8, [r4, #8]
	ctrl = SysTick->CTRL;
    348e:	6827      	ldr	r7, [r4, #0]
	load = SysTick->LOAD;
    3490:	f8d4 9004 	ldr.w	r9, [r4, #4]
	/* Setup SysTick & start counting */
	SysTick->LOAD = timeout;
    3494:	6062      	str	r2, [r4, #4]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    3496:	f04f 0205 	mov.w	r2, #5
    349a:	6022      	str	r2, [r4, #0]
	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;

	/* Clear last PS Value & Write new one */
	pmcon &= ~BPM_PMCON_PS_Msk;
	pmcon |= BPM_PMCON_PS(ps_value);
    349c:	f001 0103 	and.w	r1, r1, #3
	load = SysTick->LOAD;
	/* Setup SysTick & start counting */
	SysTick->LOAD = timeout;
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;

	b_psok = bpm_ps_no_halt_exec(bpm, pmcon);
    34a0:	4319      	orrs	r1, r3
    34a2:	f240 030d 	movw	r3, #13
    34a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34aa:	4798      	blx	r3

	/* Restore SysTick */
	SysTick->CTRL = 0;
    34ac:	6025      	str	r5, [r4, #0]
	SysTick->LOAD = load;
    34ae:	f8c4 9004 	str.w	r9, [r4, #4]
	SysTick->VAL = val;
    34b2:	f8c4 8008 	str.w	r8, [r4, #8]
	SysTick->CTRL = ctrl;
    34b6:	6027      	str	r7, [r4, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    34b8:	b94e      	cbnz	r6, 34ce <bpm_power_scaling_cpu_failsafe+0x72>
		cpu_irq_enable();
    34ba:	f240 0144 	movw	r1, #68	; 0x44
    34be:	f2c2 0100 	movt	r1, #8192	; 0x2000
    34c2:	f04f 0201 	mov.w	r2, #1
    34c6:	700a      	strb	r2, [r1, #0]
    34c8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    34cc:	b662      	cpsie	i

	cpu_irq_restore(flags);
	return b_psok;
}
    34ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    34d2:	bf00      	nop

000034d4 <bpm_get_status>:
	bpm->BPM_ICR = sources;
}

uint32_t bpm_get_status(Bpm *bpm)
{
	return bpm->BPM_SR;
    34d4:	6940      	ldr	r0, [r0, #20]
}
    34d6:	4770      	bx	lr

000034d8 <bpm_sleep>:
{
	return bpm->BPM_VERSION;
}

void bpm_sleep(Bpm *bpm, uint32_t sleep_mode)
{
    34d8:	b410      	push	{r4}
	uint32_t pmcon;

	/* Read PMCON register */
	pmcon = bpm->BPM_PMCON;
    34da:	69c3      	ldr	r3, [r0, #28]
	pmcon &= ~BPM_PMCON_BKUP;
	pmcon &= ~BPM_PMCON_RET;
	pmcon &= ~BPM_PMCON_SLEEP_Msk;
    34dc:	f423 544c 	bic.w	r4, r3, #13056	; 0x3300

	/* Unlock PMCON register */
	BPM_UNLOCK(PMCON);
    34e0:	f04f 0300 	mov.w	r3, #0
    34e4:	f2c4 030f 	movt	r3, #16399	; 0x400f
    34e8:	f04f 021c 	mov.w	r2, #28
    34ec:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    34f0:	619a      	str	r2, [r3, #24]

	if (sleep_mode == BPM_SM_SLEEP_0) {
    34f2:	2901      	cmp	r1, #1
    34f4:	d109      	bne.n	350a <bpm_sleep+0x32>
		pmcon |= BPM_PMCON_SLEEP(0);
		bpm->BPM_PMCON = pmcon;
    34f6:	61c4      	str	r4, [r0, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    34f8:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    34fc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    3500:	6918      	ldr	r0, [r3, #16]
    3502:	f020 0104 	bic.w	r1, r0, #4
    3506:	6119      	str	r1, [r3, #16]
    3508:	e050      	b.n	35ac <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_SLEEP_1) {
    350a:	2902      	cmp	r1, #2
    350c:	d10b      	bne.n	3526 <bpm_sleep+0x4e>
		pmcon |= BPM_PMCON_SLEEP(1);
    350e:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
		bpm->BPM_PMCON = pmcon;
    3512:	61c4      	str	r4, [r0, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    3514:	f44f 406d 	mov.w	r0, #60672	; 0xed00
    3518:	f2ce 0000 	movt	r0, #57344	; 0xe000
    351c:	6901      	ldr	r1, [r0, #16]
    351e:	f021 0204 	bic.w	r2, r1, #4
    3522:	6102      	str	r2, [r0, #16]
    3524:	e042      	b.n	35ac <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_SLEEP_2) {
    3526:	2903      	cmp	r1, #3
    3528:	d10b      	bne.n	3542 <bpm_sleep+0x6a>
		pmcon |= BPM_PMCON_SLEEP(2);
    352a:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
		bpm->BPM_PMCON = pmcon;
    352e:	61c4      	str	r4, [r0, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    3530:	f44f 416d 	mov.w	r1, #60672	; 0xed00
    3534:	f2ce 0100 	movt	r1, #57344	; 0xe000
    3538:	690a      	ldr	r2, [r1, #16]
    353a:	f022 0304 	bic.w	r3, r2, #4
    353e:	610b      	str	r3, [r1, #16]
    3540:	e034      	b.n	35ac <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_SLEEP_3) {
    3542:	2904      	cmp	r1, #4
    3544:	d10b      	bne.n	355e <bpm_sleep+0x86>
		pmcon |= BPM_PMCON_SLEEP(3);
    3546:	f444 5440 	orr.w	r4, r4, #12288	; 0x3000
		bpm->BPM_PMCON = pmcon;
    354a:	61c4      	str	r4, [r0, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    354c:	f44f 416d 	mov.w	r1, #60672	; 0xed00
    3550:	f2ce 0100 	movt	r1, #57344	; 0xe000
    3554:	690b      	ldr	r3, [r1, #16]
    3556:	f023 0004 	bic.w	r0, r3, #4
    355a:	6108      	str	r0, [r1, #16]
    355c:	e026      	b.n	35ac <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_WAIT) {
    355e:	2905      	cmp	r1, #5
    3560:	d109      	bne.n	3576 <bpm_sleep+0x9e>
		bpm->BPM_PMCON = pmcon;
    3562:	61c4      	str	r4, [r0, #28]
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    3564:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    3568:	f2ce 0300 	movt	r3, #57344	; 0xe000
    356c:	6918      	ldr	r0, [r3, #16]
    356e:	f040 0204 	orr.w	r2, r0, #4
    3572:	611a      	str	r2, [r3, #16]
    3574:	e01a      	b.n	35ac <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_RET) {
    3576:	2906      	cmp	r1, #6
    3578:	d10b      	bne.n	3592 <bpm_sleep+0xba>
		pmcon |= BPM_PMCON_RET;
    357a:	f444 7400 	orr.w	r4, r4, #512	; 0x200
		bpm->BPM_PMCON = pmcon;
    357e:	61c4      	str	r4, [r0, #28]
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    3580:	f44f 406d 	mov.w	r0, #60672	; 0xed00
    3584:	f2ce 0000 	movt	r0, #57344	; 0xe000
    3588:	6902      	ldr	r2, [r0, #16]
    358a:	f042 0104 	orr.w	r1, r2, #4
    358e:	6101      	str	r1, [r0, #16]
    3590:	e00c      	b.n	35ac <bpm_sleep+0xd4>
	} else if (sleep_mode == BPM_SM_BACKUP) { 
    3592:	2907      	cmp	r1, #7
    3594:	d11e      	bne.n	35d4 <bpm_sleep+0xfc>
		pmcon |= BPM_PMCON_BKUP;
    3596:	f444 7480 	orr.w	r4, r4, #256	; 0x100
		bpm->BPM_PMCON = pmcon;
    359a:	61c4      	str	r4, [r0, #28]
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    359c:	f44f 406d 	mov.w	r0, #60672	; 0xed00
    35a0:	f2ce 0000 	movt	r0, #57344	; 0xe000
    35a4:	6901      	ldr	r1, [r0, #16]
    35a6:	f041 0304 	orr.w	r3, r1, #4
    35aa:	6103      	str	r3, [r0, #16]
	} else {
		return;
	}

	/* Wait until vreg is ok. */
	while(!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_VREGOK));
    35ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    35b0:	f2c4 020f 	movt	r2, #16399	; 0x400f
    35b4:	6953      	ldr	r3, [r2, #20]
    35b6:	f413 6f80 	tst.w	r3, #1024	; 0x400
    35ba:	d0fb      	beq.n	35b4 <bpm_sleep+0xdc>
	asm volatile ("wfi");
    35bc:	bf30      	wfi
	/* ensure sleep request propagation to flash. */
	asm volatile ("nop");
    35be:	bf00      	nop
	 * masked since we are in the critical section thanks to the previous
	 * set_pri_mask(1). Thus, we need to leave the critical section.
	 * Please note that we should probably use something like
	 * cpu_leave_critical(), using set_pri_mask(0)
	 */
	cpu_irq_enable();
    35c0:	f240 0044 	movw	r0, #68	; 0x44
    35c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    35c8:	f04f 0101 	mov.w	r1, #1
    35cc:	7001      	strb	r1, [r0, #0]
    35ce:	f3bf 8f5f 	dmb	sy
    35d2:	b662      	cpsie	i
}
    35d4:	bc10      	pop	{r4}
    35d6:	4770      	bx	lr

000035d8 <flashcalw_set_wait_state>:
 * \param wait_state The number of wait states of flash read accesses: \c 0 to
 *                   \c 1.
 */
void flashcalw_set_wait_state(uint32_t wait_state)
{
	HFLASHC->FLASHCALW_FCR = (HFLASHC->FLASHCALW_FCR & ~FLASHCALW_FCR_FWS)
    35d8:	f04f 0300 	mov.w	r3, #0
    35dc:	f2c4 030a 	movt	r3, #16394	; 0x400a
    35e0:	6819      	ldr	r1, [r3, #0]
    35e2:	f021 0240 	bic.w	r2, r1, #64	; 0x40
			| (wait_state ? FLASHCALW_FCR_FWS_1 :
    35e6:	2800      	cmp	r0, #0
    35e8:	bf14      	ite	ne
    35ea:	2040      	movne	r0, #64	; 0x40
    35ec:	2000      	moveq	r0, #0
    35ee:	4310      	orrs	r0, r2
 * \param wait_state The number of wait states of flash read accesses: \c 0 to
 *                   \c 1.
 */
void flashcalw_set_wait_state(uint32_t wait_state)
{
	HFLASHC->FLASHCALW_FCR = (HFLASHC->FLASHCALW_FCR & ~FLASHCALW_FCR_FWS)
    35f0:	f04f 0300 	mov.w	r3, #0
    35f4:	f2c4 030a 	movt	r3, #16394	; 0x400a
    35f8:	6018      	str	r0, [r3, #0]
    35fa:	4770      	bx	lr

000035fc <flashcalw_is_ready>:
 *
 * \return Whether the FLASHCALW is ready to run a new command.
 */
bool flashcalw_is_ready(void)
{
	return ((HFLASHC->FLASHCALW_FSR & FLASHCALW_FSR_FRDY) != 0);
    35fc:	f04f 0300 	mov.w	r3, #0
    3600:	f2c4 030a 	movt	r3, #16394	; 0x400a
    3604:	6898      	ldr	r0, [r3, #8]
}
    3606:	f000 0001 	and.w	r0, r0, #1
    360a:	4770      	bx	lr

0000360c <flashcalw_default_wait_until_ready>:
/*! \brief Waits actively until the FLASHCALW is ready to run a new command.
 *
 * This is the default function assigned to \ref flashcalw_wait_until_ready.
 */
void flashcalw_default_wait_until_ready(void)
{
    360c:	b510      	push	{r4, lr}
	while (!flashcalw_is_ready()) {
    360e:	f243 54fd 	movw	r4, #13821	; 0x35fd
    3612:	f2c0 0400 	movt	r4, #0
    3616:	47a0      	blx	r4
    3618:	2800      	cmp	r0, #0
    361a:	d0fc      	beq.n	3616 <flashcalw_default_wait_until_ready+0xa>
	}
}
    361c:	bd10      	pop	{r4, pc}
    361e:	bf00      	nop

00003620 <flashcalw_issue_command>:
 *
 * \note The FLASHCALW error status returned by \ref flashcalw_is_lock_error and
 *       \ref flashcalw_is_programming_error is updated.
 */
void flashcalw_issue_command(uint32_t command, int page_number)
{
    3620:	b538      	push	{r3, r4, r5, lr}
    3622:	4605      	mov	r5, r0
    3624:	460c      	mov	r4, r1
	uint32_t tempo;

	flashcalw_wait_until_ready();
    3626:	f240 0348 	movw	r3, #72	; 0x48
    362a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    362e:	6818      	ldr	r0, [r3, #0]
    3630:	4780      	blx	r0
	tempo = HFLASHC->FLASHCALW_FCMD;
    3632:	f04f 0100 	mov.w	r1, #0
    3636:	f2c4 010a 	movt	r1, #16394	; 0x400a
    363a:	684a      	ldr	r2, [r1, #4]
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
	if (page_number >= 0) {
    363c:	2c00      	cmp	r4, #0
    363e:	db07      	blt.n	3650 <flashcalw_issue_command+0x30>
		tempo = (FLASHCALW_FCMD_KEY_KEY
				| FLASHCALW_FCMD_PAGEN(page_number) | command);
    3640:	f045 4525 	orr.w	r5, r5, #2768240640	; 0xa5000000
    3644:	ea4f 2404 	mov.w	r4, r4, lsl #8
    3648:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	flashcalw_wait_until_ready();
	tempo = HFLASHC->FLASHCALW_FCMD;
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
	if (page_number >= 0) {
		tempo = (FLASHCALW_FCMD_KEY_KEY
    364c:	4325      	orrs	r5, r4
    364e:	e004      	b.n	365a <flashcalw_issue_command+0x3a>
	uint32_t tempo;

	flashcalw_wait_until_ready();
	tempo = HFLASHC->FLASHCALW_FCMD;
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
    3650:	f022 033f 	bic.w	r3, r2, #63	; 0x3f
	if (page_number >= 0) {
		tempo = (FLASHCALW_FCMD_KEY_KEY
				| FLASHCALW_FCMD_PAGEN(page_number) | command);
	} else {
		tempo |= (FLASHCALW_FCMD_KEY_KEY | command);
    3654:	f043 4025 	orr.w	r0, r3, #2768240640	; 0xa5000000
    3658:	4305      	orrs	r5, r0
	}

	HFLASHC->FLASHCALW_FCMD = tempo;
    365a:	f04f 0100 	mov.w	r1, #0
    365e:	f2c4 010a 	movt	r1, #16394	; 0x400a
    3662:	604d      	str	r5, [r1, #4]
 *          the driver's API which instead presents \ref flashcalw_is_lock_error
 *          and \ref flashcalw_is_programming_error.
 */
static uint32_t flashcalw_get_error_status(void)
{
	return HFLASHC->FLASHCALW_FSR &
    3664:	688a      	ldr	r2, [r1, #8]
    3666:	f002 000c 	and.w	r0, r2, #12
	} else {
		tempo |= (FLASHCALW_FCMD_KEY_KEY | command);
	}

	HFLASHC->FLASHCALW_FCMD = tempo;
	flashcalw_error_status = flashcalw_get_error_status();
    366a:	f640 13dc 	movw	r3, #2524	; 0x9dc
    366e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3672:	6018      	str	r0, [r3, #0]
	flashcalw_wait_until_ready();
    3674:	f240 0148 	movw	r1, #72	; 0x48
    3678:	f2c2 0100 	movt	r1, #8192	; 0x2000
    367c:	680a      	ldr	r2, [r1, #0]
    367e:	4790      	blx	r2
    3680:	bd38      	pop	{r3, r4, r5, pc}
    3682:	bf00      	nop

00003684 <flashcalw_set_flash_waitstate_and_readmode>:
 * \param ps_value Power Scaling mode value (0, 1)
 * \param is_fwu_enabled (boolean), Is fast wakeup mode enabled or not
 */
void flashcalw_set_flash_waitstate_and_readmode(uint32_t cpu_f_hz,
		uint32_t ps_value, bool is_fwu_enabled)
{
    3684:	b508      	push	{r3, lr}
	}

	/* Enable the high-speed read mode. */
	flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSEN, -1);
#else
	if (ps_value == 0) {
    3686:	2900      	cmp	r1, #0
    3688:	d156      	bne.n	3738 <flashcalw_set_flash_waitstate_and_readmode+0xb4>
		if (cpu_f_hz > FLASH_FREQ_PS0_FWS_0_MAX_FREQ) {
    368a:	f64a 0380 	movw	r3, #43136	; 0xa880
    368e:	f2c0 1312 	movt	r3, #274	; 0x112
    3692:	4298      	cmp	r0, r3
    3694:	d927      	bls.n	36e6 <flashcalw_set_flash_waitstate_and_readmode+0x62>
			// > 18MHz
			if (cpu_f_hz <= FLASH_FREQ_PS0_FWS_1_MAX_FREQ) {
    3696:	f44f 43a2 	mov.w	r3, #20736	; 0x5100
    369a:	f2c0 2325 	movt	r3, #549	; 0x225
    369e:	4298      	cmp	r0, r3
    36a0:	d810      	bhi.n	36c4 <flashcalw_set_flash_waitstate_and_readmode+0x40>
				// <= 36MHz
				/* Set a wait-state, disable the high-speed read
				 * mode. */
				flashcalw_set_wait_state(1);
    36a2:	f04f 0001 	mov.w	r0, #1
    36a6:	f243 53d9 	movw	r3, #13785	; 0x35d9
    36aa:	f2c0 0300 	movt	r3, #0
    36ae:	4798      	blx	r3
				flashcalw_issue_command(
    36b0:	f04f 0011 	mov.w	r0, #17
    36b4:	f04f 31ff 	mov.w	r1, #4294967295
    36b8:	f243 6221 	movw	r2, #13857	; 0x3621
    36bc:	f2c0 0200 	movt	r2, #0
    36c0:	4790      	blx	r2
    36c2:	bd08      	pop	{r3, pc}
						FLASHCALW_FCMD_CMD_HSDIS, -1);
			} else {
				// > 36 MHz
				/* Set a wait-state, enable the high-speed read
				mode. */
				flashcalw_set_wait_state(1);
    36c4:	f04f 0001 	mov.w	r0, #1
    36c8:	f243 51d9 	movw	r1, #13785	; 0x35d9
    36cc:	f2c0 0100 	movt	r1, #0
    36d0:	4788      	blx	r1
				flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSEN,
    36d2:	f04f 0010 	mov.w	r0, #16
    36d6:	f04f 31ff 	mov.w	r1, #4294967295
    36da:	f243 6221 	movw	r2, #13857	; 0x3621
    36de:	f2c0 0200 	movt	r2, #0
    36e2:	4790      	blx	r2
    36e4:	bd08      	pop	{r3, pc}
						-1);
			}
		} else { // <= 18MHz
			if((is_fwu_enabled == true) &&
    36e6:	b1b2      	cbz	r2, 3716 <flashcalw_set_flash_waitstate_and_readmode+0x92>
    36e8:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
    36ec:	f2c0 01b7 	movt	r1, #183	; 0xb7
    36f0:	4288      	cmp	r0, r1
    36f2:	d810      	bhi.n	3716 <flashcalw_set_flash_waitstate_and_readmode+0x92>
				(cpu_f_hz <= FLASH_FREQ_PS1_FWS_1_FWU_MAX_FREQ))
			{
				// <= 12MHz
				/* Set a wait-state, disable the high-speed read
				mode. */
				flashcalw_set_wait_state(1);
    36f4:	f04f 0001 	mov.w	r0, #1
    36f8:	f243 51d9 	movw	r1, #13785	; 0x35d9
    36fc:	f2c0 0100 	movt	r1, #0
    3700:	4788      	blx	r1
				flashcalw_issue_command(
    3702:	f04f 0011 	mov.w	r0, #17
    3706:	f04f 31ff 	mov.w	r1, #4294967295
    370a:	f243 6221 	movw	r2, #13857	; 0x3621
    370e:	f2c0 0200 	movt	r2, #0
    3712:	4790      	blx	r2
    3714:	bd08      	pop	{r3, pc}
						FLASHCALW_FCMD_CMD_HSDIS, -1);
			} else {
				/* No wait-state, disable the high-speed read
				mode */
				flashcalw_set_wait_state(0);
    3716:	f04f 0000 	mov.w	r0, #0
    371a:	f243 52d9 	movw	r2, #13785	; 0x35d9
    371e:	f2c0 0200 	movt	r2, #0
    3722:	4790      	blx	r2
				flashcalw_issue_command(
    3724:	f04f 0011 	mov.w	r0, #17
    3728:	f04f 31ff 	mov.w	r1, #4294967295
    372c:	f243 6321 	movw	r3, #13857	; 0x3621
    3730:	f2c0 0300 	movt	r3, #0
    3734:	4798      	blx	r3
    3736:	bd08      	pop	{r3, pc}
					FLASHCALW_FCMD_CMD_HSDIS, -1);
			}
		}
	} else { /* ps_value == 1 */
		if (cpu_f_hz > FLASH_FREQ_PS0_FWS_0_MAX_FREQ) { /* > 8MHz */
    3738:	f64a 0380 	movw	r3, #43136	; 0xa880
    373c:	f2c0 1312 	movt	r3, #274	; 0x112
    3740:	4298      	cmp	r0, r3
			/* Set a wait-state. */
			flashcalw_set_wait_state(1);
    3742:	bf8c      	ite	hi
    3744:	2001      	movhi	r0, #1
		} else {
			/* No wait-state. */
			flashcalw_set_wait_state(0);
    3746:	2000      	movls	r0, #0
    3748:	f243 51d9 	movw	r1, #13785	; 0x35d9
    374c:	f2c0 0100 	movt	r1, #0
    3750:	4788      	blx	r1
		}

		/* Disable the high-speed read mode. */
		flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSDIS, -1);
    3752:	f04f 0011 	mov.w	r0, #17
    3756:	f04f 31ff 	mov.w	r1, #4294967295
    375a:	f243 6221 	movw	r2, #13857	; 0x3621
    375e:	f2c0 0200 	movt	r2, #0
    3762:	4790      	blx	r2
    3764:	bd08      	pop	{r3, pc}
    3766:	bf00      	nop

00003768 <wdt_set_ctrl>:
 *        to the WatchDog Timer key.
 *
 * \param ctrl  Value to set the WatchDog Timer Control register to.
 */
static void wdt_set_ctrl(uint32_t ctrl)
{
    3768:	b082      	sub	sp, #8
	volatile uint32_t dly;

	/* Calculate delay for internal synchronization, see 44.1.2 WDT errata */
	if ((WDT->WDT_CTRL & WDT_CTRL_CSSEL) == WDT_CLK_SRC_RCSYS) {
    376a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    376e:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3772:	6819      	ldr	r1, [r3, #0]
    3774:	f411 3f00 	tst.w	r1, #131072	; 0x20000
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RCSYS_NOMINAL_HZ);
    3778:	bf0c      	ite	eq
    377a:	2169      	moveq	r1, #105	; 0x69
	} else { /* WDT_CLK_SRC_32K */
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RC32K_NOMINAL_HZ);
    377c:	f240 116f 	movwne	r1, #367	; 0x16f
    3780:	9101      	str	r1, [sp, #4]
	}
	dly >>= 3; /* ~8 cycles for one while loop */
    3782:	9a01      	ldr	r2, [sp, #4]
    3784:	ea4f 03d2 	mov.w	r3, r2, lsr #3
    3788:	9301      	str	r3, [sp, #4]
	while(dly--);
    378a:	9901      	ldr	r1, [sp, #4]
    378c:	f101 32ff 	add.w	r2, r1, #4294967295
    3790:	9201      	str	r2, [sp, #4]
    3792:	2900      	cmp	r1, #0
    3794:	d1f9      	bne.n	378a <wdt_set_ctrl+0x22>
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_FIRST_KEY);
    3796:	f040 41aa 	orr.w	r1, r0, #1426063360	; 0x55000000
    379a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    379e:	f2c4 030f 	movt	r3, #16399	; 0x400f
    37a2:	6019      	str	r1, [r3, #0]
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_SECOND_KEY);
    37a4:	f040 402a 	orr.w	r0, r0, #2852126720	; 0xaa000000
    37a8:	6018      	str	r0, [r3, #0]
}
    37aa:	b002      	add	sp, #8
    37ac:	4770      	bx	lr
    37ae:	bf00      	nop

000037b0 <wdt_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(cfg);

	/* Default configuration values */
	cfg->clk_src = WDT_CLK_SRC_RCSYS;
    37b0:	f04f 0300 	mov.w	r3, #0
    37b4:	6003      	str	r3, [r0, #0]
	cfg->wdt_mode = WDT_MODE_BASIC;
    37b6:	6043      	str	r3, [r0, #4]
	cfg->timeout_period = WDT_PERIOD_131072_CLK;
    37b8:	f04f 0210 	mov.w	r2, #16
    37bc:	7202      	strb	r2, [r0, #8]
	cfg->window_period = WDT_PERIOD_NONE;
    37be:	7243      	strb	r3, [r0, #9]
	cfg->disable_flash_cali = true;
    37c0:	f04f 0101 	mov.w	r1, #1
    37c4:	7281      	strb	r1, [r0, #10]
	cfg->disable_wdt_after_reset = true;
    37c6:	72c1      	strb	r1, [r0, #11]
	cfg->always_on = false;
    37c8:	7303      	strb	r3, [r0, #12]
    37ca:	4770      	bx	lr

000037cc <wdt_init>:
 */
bool wdt_init(
		struct wdt_dev_inst *const dev_inst,
		Wdt *const wdt,
		struct wdt_config *const cfg)
{
    37cc:	b538      	push	{r3, r4, r5, lr}
    37ce:	460c      	mov	r4, r1
    37d0:	4615      	mov	r5, r2
	/* Sanity check arguments */
	Assert(dev_inst);
	Assert(wdt);
	Assert(cfg);

	dev_inst->hw_dev = wdt;
    37d2:	6001      	str	r1, [r0, #0]
	dev_inst->wdt_cfg = cfg;
    37d4:	6042      	str	r2, [r0, #4]

	/* Enable APB clock for WDT */
	sysclk_enable_peripheral_clock(wdt);
    37d6:	4608      	mov	r0, r1
    37d8:	f242 433d 	movw	r3, #9277	; 0x243d
    37dc:	f2c0 0300 	movt	r3, #0
    37e0:	4798      	blx	r3

	/* Check SFV bit: if SFV bit is set, Control Register is locked */
	if (wdt->WDT_CTRL & WDT_CTRL_SFV) {
    37e2:	6820      	ldr	r0, [r4, #0]
    37e4:	f010 0f08 	tst.w	r0, #8
    37e8:	d152      	bne.n	3890 <wdt_init+0xc4>
		return false;
	}

	/* Disable the WDT */
	if (wdt->WDT_CTRL & WDT_CTRL_EN) {
    37ea:	6821      	ldr	r1, [r4, #0]
    37ec:	f011 0f01 	tst.w	r1, #1
    37f0:	d00b      	beq.n	380a <wdt_init+0x3e>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    37f2:	6822      	ldr	r2, [r4, #0]
    37f4:	f022 0001 	bic.w	r0, r2, #1
    37f8:	f243 7369 	movw	r3, #14185	; 0x3769
    37fc:	f2c0 0300 	movt	r3, #0
    3800:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    3802:	6820      	ldr	r0, [r4, #0]
    3804:	f010 0f01 	tst.w	r0, #1
    3808:	d1fb      	bne.n	3802 <wdt_init+0x36>
		}
	}
	/* Disable the WDT clock */
	if (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    380a:	6821      	ldr	r1, [r4, #0]
    380c:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    3810:	d00b      	beq.n	382a <wdt_init+0x5e>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_CEN);
    3812:	6822      	ldr	r2, [r4, #0]
    3814:	f422 3080 	bic.w	r0, r2, #65536	; 0x10000
    3818:	f243 7369 	movw	r3, #14185	; 0x3769
    381c:	f2c0 0300 	movt	r3, #0
    3820:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    3822:	6820      	ldr	r0, [r4, #0]
    3824:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    3828:	d1fb      	bne.n	3822 <wdt_init+0x56>
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
    382a:	6869      	ldr	r1, [r5, #4]
    382c:	682a      	ldr	r2, [r5, #0]
    382e:	ea41 0302 	orr.w	r3, r1, r2
			cfg->wdt_mode |
			WDT_CTRL_PSEL(cfg->timeout_period) |
    3832:	7a28      	ldrb	r0, [r5, #8]
    3834:	ea4f 2100 	mov.w	r1, r0, lsl #8
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
			cfg->wdt_mode |
    3838:	f401 52f8 	and.w	r2, r1, #7936	; 0x1f00
    383c:	ea43 0002 	orr.w	r0, r3, r2
			WDT_CTRL_PSEL(cfg->timeout_period) |
			WDT_CTRL_TBAN(cfg->window_period) |
    3840:	7a6b      	ldrb	r3, [r5, #9]
    3842:	ea4f 4183 	mov.w	r1, r3, lsl #18
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
			cfg->wdt_mode |
			WDT_CTRL_PSEL(cfg->timeout_period) |
    3846:	f401 02f8 	and.w	r2, r1, #8126464	; 0x7c0000
    384a:	4310      	orrs	r0, r2
			WDT_CTRL_TBAN(cfg->window_period) |
    384c:	7aab      	ldrb	r3, [r5, #10]
    384e:	2b00      	cmp	r3, #0
    3850:	bf14      	ite	ne
    3852:	2180      	movne	r1, #128	; 0x80
    3854:	2100      	moveq	r1, #0
    3856:	4308      	orrs	r0, r1
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
    3858:	7aed      	ldrb	r5, [r5, #11]
    385a:	2d00      	cmp	r5, #0
    385c:	bf14      	ite	ne
    385e:	2202      	movne	r2, #2
    3860:	2200      	moveq	r2, #0
    3862:	4310      	orrs	r0, r2
    3864:	f243 7569 	movw	r5, #14185	; 0x3769
    3868:	f2c0 0500 	movt	r5, #0
    386c:	47a8      	blx	r5
			WDT_CTRL_PSEL(cfg->timeout_period) |
			WDT_CTRL_TBAN(cfg->window_period) |
			(cfg->disable_flash_cali ? WDT_CTRL_FCD : 0) |
			(cfg->disable_wdt_after_reset ? WDT_CTRL_DAR : 0)
	);
	wdt_set_ctrl(wdt->WDT_CTRL | WDT_CTRL_CEN);
    386e:	6820      	ldr	r0, [r4, #0]
    3870:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
    3874:	47a8      	blx	r5
	while (!(wdt->WDT_CTRL & WDT_CTRL_CEN)) {
    3876:	6823      	ldr	r3, [r4, #0]
    3878:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    387c:	d0fb      	beq.n	3876 <wdt_init+0xaa>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    387e:	4620      	mov	r0, r4
    3880:	f642 311d 	movw	r1, #11037	; 0x2b1d
    3884:	f2c0 0100 	movt	r1, #0
    3888:	4788      	blx	r1

	return true;
    388a:	f04f 0001 	mov.w	r0, #1
    388e:	bd38      	pop	{r3, r4, r5, pc}
	/* Enable APB clock for WDT */
	sysclk_enable_peripheral_clock(wdt);

	/* Check SFV bit: if SFV bit is set, Control Register is locked */
	if (wdt->WDT_CTRL & WDT_CTRL_SFV) {
		return false;
    3890:	f04f 0000 	mov.w	r0, #0

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);

	return true;
}
    3894:	bd38      	pop	{r3, r4, r5, pc}
    3896:	bf00      	nop

00003898 <wdt_disable>:
 * \brief Disable the WDT module.
 *
 * \param dev_inst    Device structure pointer.
 */
void wdt_disable(struct wdt_dev_inst *const dev_inst)
{
    3898:	b510      	push	{r4, lr}
	Wdt *wdt = dev_inst->hw_dev;
    389a:	6804      	ldr	r4, [r0, #0]

	/* Disable the WDT */
	wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    389c:	6820      	ldr	r0, [r4, #0]
    389e:	f020 0001 	bic.w	r0, r0, #1
    38a2:	f243 7369 	movw	r3, #14185	; 0x3769
    38a6:	f2c0 0300 	movt	r3, #0
    38aa:	4798      	blx	r3
	while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    38ac:	6821      	ldr	r1, [r4, #0]
    38ae:	f011 0f01 	tst.w	r1, #1
    38b2:	d1fb      	bne.n	38ac <wdt_disable+0x14>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    38b4:	4620      	mov	r0, r4
    38b6:	f642 321d 	movw	r2, #11037	; 0x2b1d
    38ba:	f2c0 0200 	movt	r2, #0
    38be:	4790      	blx	r2
    38c0:	bd10      	pop	{r4, pc}
    38c2:	bf00      	nop

000038c4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    38c4:	e7fe      	b.n	38c4 <Dummy_Handler>
    38c6:	bf00      	nop

000038c8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    38c8:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
    38ca:	f240 0300 	movw	r3, #0
    38ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38d2:	f647 0234 	movw	r2, #30772	; 0x7834
    38d6:	f2c0 0200 	movt	r2, #0
    38da:	429a      	cmp	r2, r3
    38dc:	d003      	beq.n	38e6 <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
    38de:	4839      	ldr	r0, [pc, #228]	; (39c4 <Reset_Handler+0xfc>)
    38e0:	4939      	ldr	r1, [pc, #228]	; (39c8 <Reset_Handler+0x100>)
    38e2:	4281      	cmp	r1, r0
    38e4:	d304      	bcc.n	38f0 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    38e6:	4b39      	ldr	r3, [pc, #228]	; (39cc <Reset_Handler+0x104>)
    38e8:	4a39      	ldr	r2, [pc, #228]	; (39d0 <Reset_Handler+0x108>)
    38ea:	429a      	cmp	r2, r3
    38ec:	d325      	bcc.n	393a <Reset_Handler+0x72>
    38ee:	e042      	b.n	3976 <Reset_Handler+0xae>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
    38f0:	4d38      	ldr	r5, [pc, #224]	; (39d4 <Reset_Handler+0x10c>)
    38f2:	4c39      	ldr	r4, [pc, #228]	; (39d8 <Reset_Handler+0x110>)
    38f4:	1b63      	subs	r3, r4, r5
    38f6:	f023 0503 	bic.w	r5, r3, #3
    38fa:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
    38fe:	f240 0200 	movw	r2, #0
    3902:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3906:	f647 0134 	movw	r1, #30772	; 0x7834
    390a:	f2c0 0100 	movt	r1, #0
    390e:	f105 0004 	add.w	r0, r5, #4
    3912:	f3c5 0480 	ubfx	r4, r5, #2, #1
    3916:	585d      	ldr	r5, [r3, r1]
    3918:	509d      	str	r5, [r3, r2]
    391a:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    391e:	4283      	cmp	r3, r0
    3920:	d146      	bne.n	39b0 <Reset_Handler+0xe8>
    3922:	e7e0      	b.n	38e6 <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
    3924:	585d      	ldr	r5, [r3, r1]
    3926:	509d      	str	r5, [r3, r2]
    3928:	f103 0304 	add.w	r3, r3, #4
    392c:	585c      	ldr	r4, [r3, r1]
    392e:	509c      	str	r4, [r3, r2]
    3930:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    3934:	4283      	cmp	r3, r0
    3936:	d1f5      	bne.n	3924 <Reset_Handler+0x5c>
    3938:	e7d5      	b.n	38e6 <Reset_Handler+0x1e>
    393a:	4d28      	ldr	r5, [pc, #160]	; (39dc <Reset_Handler+0x114>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
    393c:	4928      	ldr	r1, [pc, #160]	; (39e0 <Reset_Handler+0x118>)
    393e:	1b48      	subs	r0, r1, r5
    3940:	f020 0403 	bic.w	r4, r0, #3
    3944:	f640 1318 	movw	r3, #2328	; 0x918
    3948:	f2c2 0300 	movt	r3, #8192	; 0x2000
    394c:	18e2      	adds	r2, r4, r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
    394e:	f04f 0100 	mov.w	r1, #0
    3952:	1b50      	subs	r0, r2, r5
    3954:	f1a0 0004 	sub.w	r0, r0, #4
    3958:	f3c0 0480 	ubfx	r4, r0, #2, #1
    395c:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    3960:	4295      	cmp	r5, r2
    3962:	d11e      	bne.n	39a2 <Reset_Handler+0xda>
    3964:	e007      	b.n	3976 <Reset_Handler+0xae>
    3966:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
    396a:	6069      	str	r1, [r5, #4]
    396c:	f105 0508 	add.w	r5, r5, #8
    3970:	6059      	str	r1, [r3, #4]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    3972:	4295      	cmp	r5, r2
    3974:	d1f7      	bne.n	3966 <Reset_Handler+0x9e>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) &_sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3976:	f240 0500 	movw	r5, #0
    397a:	f2c0 0500 	movt	r5, #0
    397e:	f025 027f 	bic.w	r2, r5, #127	; 0x7f
    3982:	f44f 416d 	mov.w	r1, #60672	; 0xed00
    3986:	f2ce 0100 	movt	r1, #57344	; 0xe000
    398a:	608a      	str	r2, [r1, #8]

	/* Initialize the C library */
	__libc_init_array();
    398c:	f643 3001 	movw	r0, #15105	; 0x3b01
    3990:	f2c0 0000 	movt	r0, #0
    3994:	4780      	blx	r0

	/* Branch to main function */
	main();
    3996:	f641 3445 	movw	r4, #6981	; 0x1b45
    399a:	f2c0 0400 	movt	r4, #0
    399e:	47a0      	blx	r4
    39a0:	e7fe      	b.n	39a0 <Reset_Handler+0xd8>
    39a2:	2c00      	cmp	r4, #0
    39a4:	d0df      	beq.n	3966 <Reset_Handler+0x9e>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
    39a6:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    39aa:	4295      	cmp	r5, r2
    39ac:	d1db      	bne.n	3966 <Reset_Handler+0x9e>
    39ae:	e7e2      	b.n	3976 <Reset_Handler+0xae>
    39b0:	2c00      	cmp	r4, #0
    39b2:	d0b7      	beq.n	3924 <Reset_Handler+0x5c>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
    39b4:	585c      	ldr	r4, [r3, r1]
    39b6:	509c      	str	r4, [r3, r2]
    39b8:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    39bc:	4283      	cmp	r3, r0
    39be:	d1b1      	bne.n	3924 <Reset_Handler+0x5c>
    39c0:	e791      	b.n	38e6 <Reset_Handler+0x1e>
    39c2:	bf00      	nop
    39c4:	20000918 	.word	0x20000918
    39c8:	20000000 	.word	0x20000000
    39cc:	20000ab0 	.word	0x20000ab0
    39d0:	20000918 	.word	0x20000918
    39d4:	20000004 	.word	0x20000004
    39d8:	2000091b 	.word	0x2000091b
    39dc:	20000914 	.word	0x20000914
    39e0:	20000aab 	.word	0x20000aab

000039e4 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    39e4:	f640 13e0 	movw	r3, #2528	; 0x9e0
    39e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39ec:	6819      	ldr	r1, [r3, #0]
    39ee:	b941      	cbnz	r1, 3a02 <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
    39f0:	f640 13e0 	movw	r3, #2528	; 0x9e0
    39f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39f8:	f641 22b0 	movw	r2, #6832	; 0x1ab0
    39fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a00:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    3a02:	f640 11e0 	movw	r1, #2528	; 0x9e0
    3a06:	f2c2 0100 	movt	r1, #8192	; 0x2000
    3a0a:	680b      	ldr	r3, [r1, #0]

	heap += incr;
    3a0c:	1818      	adds	r0, r3, r0
    3a0e:	6008      	str	r0, [r1, #0]

	return (caddr_t) prev_heap;
}
    3a10:	4618      	mov	r0, r3
    3a12:	4770      	bx	lr

00003a14 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    3a14:	f04f 30ff 	mov.w	r0, #4294967295
    3a18:	4770      	bx	lr
    3a1a:	bf00      	nop

00003a1c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    3a1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    3a20:	604b      	str	r3, [r1, #4]

	return 0;
}
    3a22:	f04f 0000 	mov.w	r0, #0
    3a26:	4770      	bx	lr

00003a28 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    3a28:	f04f 0001 	mov.w	r0, #1
    3a2c:	4770      	bx	lr
    3a2e:	bf00      	nop

00003a30 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    3a30:	f04f 0000 	mov.w	r0, #0
    3a34:	4770      	bx	lr
    3a36:	bf00      	nop

00003a38 <__register_exitproc>:
    3a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3a3c:	4698      	mov	r8, r3
    3a3e:	4b23      	ldr	r3, [pc, #140]	; (3acc <__register_exitproc+0x94>)
    3a40:	681c      	ldr	r4, [r3, #0]
    3a42:	4606      	mov	r6, r0
    3a44:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    3a48:	460f      	mov	r7, r1
    3a4a:	4691      	mov	r9, r2
    3a4c:	b918      	cbnz	r0, 3a56 <__register_exitproc+0x1e>
    3a4e:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
    3a52:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    3a56:	6841      	ldr	r1, [r0, #4]
    3a58:	291f      	cmp	r1, #31
    3a5a:	dd16      	ble.n	3a8a <__register_exitproc+0x52>
    3a5c:	481c      	ldr	r0, [pc, #112]	; (3ad0 <__register_exitproc+0x98>)
    3a5e:	b918      	cbnz	r0, 3a68 <__register_exitproc+0x30>
    3a60:	f04f 30ff 	mov.w	r0, #4294967295
    3a64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3a68:	f44f 70c8 	mov.w	r0, #400	; 0x190
    3a6c:	f002 f81e 	bl	5aac <malloc>
    3a70:	2800      	cmp	r0, #0
    3a72:	d0f5      	beq.n	3a60 <__register_exitproc+0x28>
    3a74:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    3a78:	2500      	movs	r5, #0
    3a7a:	6045      	str	r5, [r0, #4]
    3a7c:	6002      	str	r2, [r0, #0]
    3a7e:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    3a82:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
    3a86:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
    3a8a:	b1b6      	cbz	r6, 3aba <__register_exitproc+0x82>
    3a8c:	6844      	ldr	r4, [r0, #4]
    3a8e:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    3a92:	2201      	movs	r2, #1
    3a94:	eb00 0384 	add.w	r3, r0, r4, lsl #2
    3a98:	fa02 f204 	lsl.w	r2, r2, r4
    3a9c:	4311      	orrs	r1, r2
    3a9e:	2e02      	cmp	r6, #2
    3aa0:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
    3aa4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    3aa8:	461c      	mov	r4, r3
    3aaa:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
    3aae:	d104      	bne.n	3aba <__register_exitproc+0x82>
    3ab0:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
    3ab4:	431a      	orrs	r2, r3
    3ab6:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
    3aba:	6841      	ldr	r1, [r0, #4]
    3abc:	1c8b      	adds	r3, r1, #2
    3abe:	1c4a      	adds	r2, r1, #1
    3ac0:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    3ac4:	6042      	str	r2, [r0, #4]
    3ac6:	2000      	movs	r0, #0
    3ac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3acc:	00007690 	.word	0x00007690
    3ad0:	00005aad 	.word	0x00005aad

00003ad4 <__libc_fini_array>:
    3ad4:	b570      	push	{r4, r5, r6, lr}
    3ad6:	4b08      	ldr	r3, [pc, #32]	; (3af8 <__libc_fini_array+0x24>)
    3ad8:	4c08      	ldr	r4, [pc, #32]	; (3afc <__libc_fini_array+0x28>)
    3ada:	1ae0      	subs	r0, r4, r3
    3adc:	1084      	asrs	r4, r0, #2
    3ade:	eb03 0684 	add.w	r6, r3, r4, lsl #2
    3ae2:	2500      	movs	r5, #0
    3ae4:	3d04      	subs	r5, #4
    3ae6:	b11c      	cbz	r4, 3af0 <__libc_fini_array+0x1c>
    3ae8:	5972      	ldr	r2, [r6, r5]
    3aea:	4790      	blx	r2
    3aec:	3c01      	subs	r4, #1
    3aee:	e7f9      	b.n	3ae4 <__libc_fini_array+0x10>
    3af0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3af4:	f003 be92 	b.w	781c <_fini>
    3af8:	00007828 	.word	0x00007828
    3afc:	0000782c 	.word	0x0000782c

00003b00 <__libc_init_array>:
    3b00:	b538      	push	{r3, r4, r5, lr}
    3b02:	4d0e      	ldr	r5, [pc, #56]	; (3b3c <__libc_init_array+0x3c>)
    3b04:	4b0e      	ldr	r3, [pc, #56]	; (3b40 <__libc_init_array+0x40>)
    3b06:	1ae8      	subs	r0, r5, r3
    3b08:	1085      	asrs	r5, r0, #2
    3b0a:	2400      	movs	r4, #0
    3b0c:	42ac      	cmp	r4, r5
    3b0e:	d005      	beq.n	3b1c <__libc_init_array+0x1c>
    3b10:	490b      	ldr	r1, [pc, #44]	; (3b40 <__libc_init_array+0x40>)
    3b12:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
    3b16:	4790      	blx	r2
    3b18:	3401      	adds	r4, #1
    3b1a:	e7f7      	b.n	3b0c <__libc_init_array+0xc>
    3b1c:	f003 fe74 	bl	7808 <_init>
    3b20:	4908      	ldr	r1, [pc, #32]	; (3b44 <__libc_init_array+0x44>)
    3b22:	4a09      	ldr	r2, [pc, #36]	; (3b48 <__libc_init_array+0x48>)
    3b24:	1a54      	subs	r4, r2, r1
    3b26:	10a5      	asrs	r5, r4, #2
    3b28:	2400      	movs	r4, #0
    3b2a:	42ac      	cmp	r4, r5
    3b2c:	d005      	beq.n	3b3a <__libc_init_array+0x3a>
    3b2e:	4b05      	ldr	r3, [pc, #20]	; (3b44 <__libc_init_array+0x44>)
    3b30:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    3b34:	4780      	blx	r0
    3b36:	3401      	adds	r4, #1
    3b38:	e7f7      	b.n	3b2a <__libc_init_array+0x2a>
    3b3a:	bd38      	pop	{r3, r4, r5, pc}
    3b3c:	00007814 	.word	0x00007814
    3b40:	00007814 	.word	0x00007814
    3b44:	00007814 	.word	0x00007814
    3b48:	0000781c 	.word	0x0000781c

00003b4c <iprintf>:
    3b4c:	b40f      	push	{r0, r1, r2, r3}
    3b4e:	b507      	push	{r0, r1, r2, lr}
    3b50:	4906      	ldr	r1, [pc, #24]	; (3b6c <iprintf+0x20>)
    3b52:	ab04      	add	r3, sp, #16
    3b54:	6808      	ldr	r0, [r1, #0]
    3b56:	f853 2b04 	ldr.w	r2, [r3], #4
    3b5a:	6881      	ldr	r1, [r0, #8]
    3b5c:	9301      	str	r3, [sp, #4]
    3b5e:	f000 f931 	bl	3dc4 <_vfiprintf_r>
    3b62:	e8bd 400e 	ldmia.w	sp!, {r1, r2, r3, lr}
    3b66:	b004      	add	sp, #16
    3b68:	4770      	bx	lr
    3b6a:	bf00      	nop
    3b6c:	20000050 	.word	0x20000050

00003b70 <_iprintf_r>:
    3b70:	b40e      	push	{r1, r2, r3}
    3b72:	b503      	push	{r0, r1, lr}
    3b74:	ab03      	add	r3, sp, #12
    3b76:	6881      	ldr	r1, [r0, #8]
    3b78:	f853 2b04 	ldr.w	r2, [r3], #4
    3b7c:	9301      	str	r3, [sp, #4]
    3b7e:	f000 f921 	bl	3dc4 <_vfiprintf_r>
    3b82:	e8bd 400c 	ldmia.w	sp!, {r2, r3, lr}
    3b86:	b003      	add	sp, #12
    3b88:	4770      	bx	lr
    3b8a:	bf00      	nop

00003b8c <memset>:
    3b8c:	1882      	adds	r2, r0, r2
    3b8e:	4603      	mov	r3, r0
    3b90:	4293      	cmp	r3, r2
    3b92:	d002      	beq.n	3b9a <memset+0xe>
    3b94:	f803 1b01 	strb.w	r1, [r3], #1
    3b98:	e7fa      	b.n	3b90 <memset+0x4>
    3b9a:	4770      	bx	lr

00003b9c <_puts_r>:
    3b9c:	b530      	push	{r4, r5, lr}
    3b9e:	4605      	mov	r5, r0
    3ba0:	b089      	sub	sp, #36	; 0x24
    3ba2:	4608      	mov	r0, r1
    3ba4:	460c      	mov	r4, r1
    3ba6:	f000 f8d1 	bl	3d4c <strlen>
    3baa:	2101      	movs	r1, #1
    3bac:	1843      	adds	r3, r0, r1
    3bae:	9107      	str	r1, [sp, #28]
    3bb0:	4911      	ldr	r1, [pc, #68]	; (3bf8 <_puts_r+0x5c>)
    3bb2:	9303      	str	r3, [sp, #12]
    3bb4:	680b      	ldr	r3, [r1, #0]
    3bb6:	4a11      	ldr	r2, [pc, #68]	; (3bfc <_puts_r+0x60>)
    3bb8:	9005      	str	r0, [sp, #20]
    3bba:	a804      	add	r0, sp, #16
    3bbc:	9001      	str	r0, [sp, #4]
    3bbe:	6898      	ldr	r0, [r3, #8]
    3bc0:	9206      	str	r2, [sp, #24]
    3bc2:	2202      	movs	r2, #2
    3bc4:	9202      	str	r2, [sp, #8]
    3bc6:	8982      	ldrh	r2, [r0, #12]
    3bc8:	9404      	str	r4, [sp, #16]
    3bca:	f402 5100 	and.w	r1, r2, #8192	; 0x2000
    3bce:	b20b      	sxth	r3, r1
    3bd0:	b933      	cbnz	r3, 3be0 <_puts_r+0x44>
    3bd2:	6e41      	ldr	r1, [r0, #100]	; 0x64
    3bd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    3bd8:	f421 5300 	bic.w	r3, r1, #8192	; 0x2000
    3bdc:	8182      	strh	r2, [r0, #12]
    3bde:	6643      	str	r3, [r0, #100]	; 0x64
    3be0:	4628      	mov	r0, r5
    3be2:	68a9      	ldr	r1, [r5, #8]
    3be4:	aa01      	add	r2, sp, #4
    3be6:	f001 fd05 	bl	55f4 <__sfvwrite_r>
    3bea:	2800      	cmp	r0, #0
    3bec:	bf0c      	ite	eq
    3bee:	200a      	moveq	r0, #10
    3bf0:	f04f 30ff 	movne.w	r0, #4294967295
    3bf4:	b009      	add	sp, #36	; 0x24
    3bf6:	bd30      	pop	{r4, r5, pc}
    3bf8:	20000050 	.word	0x20000050
    3bfc:	00007696 	.word	0x00007696

00003c00 <puts>:
    3c00:	4b02      	ldr	r3, [pc, #8]	; (3c0c <puts+0xc>)
    3c02:	4601      	mov	r1, r0
    3c04:	6818      	ldr	r0, [r3, #0]
    3c06:	f7ff bfc9 	b.w	3b9c <_puts_r>
    3c0a:	bf00      	nop
    3c0c:	20000050 	.word	0x20000050

00003c10 <scanf>:
    3c10:	b40f      	push	{r0, r1, r2, r3}
    3c12:	b507      	push	{r0, r1, r2, lr}
    3c14:	4906      	ldr	r1, [pc, #24]	; (3c30 <scanf+0x20>)
    3c16:	ab04      	add	r3, sp, #16
    3c18:	6808      	ldr	r0, [r1, #0]
    3c1a:	f853 2b04 	ldr.w	r2, [r3], #4
    3c1e:	6841      	ldr	r1, [r0, #4]
    3c20:	9301      	str	r3, [sp, #4]
    3c22:	f000 fd27 	bl	4674 <__svfscanf_r>
    3c26:	e8bd 400e 	ldmia.w	sp!, {r1, r2, r3, lr}
    3c2a:	b004      	add	sp, #16
    3c2c:	4770      	bx	lr
    3c2e:	bf00      	nop
    3c30:	20000050 	.word	0x20000050

00003c34 <_scanf_r>:
    3c34:	b40e      	push	{r1, r2, r3}
    3c36:	b503      	push	{r0, r1, lr}
    3c38:	ab03      	add	r3, sp, #12
    3c3a:	6841      	ldr	r1, [r0, #4]
    3c3c:	f853 2b04 	ldr.w	r2, [r3], #4
    3c40:	9301      	str	r3, [sp, #4]
    3c42:	f000 fd17 	bl	4674 <__svfscanf_r>
    3c46:	e8bd 400c 	ldmia.w	sp!, {r2, r3, lr}
    3c4a:	b003      	add	sp, #12
    3c4c:	4770      	bx	lr
    3c4e:	bf00      	nop

00003c50 <setbuf>:
    3c50:	2900      	cmp	r1, #0
    3c52:	bf0c      	ite	eq
    3c54:	2202      	moveq	r2, #2
    3c56:	2200      	movne	r2, #0
    3c58:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3c5c:	f000 b800 	b.w	3c60 <setvbuf>

00003c60 <setvbuf>:
    3c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3c64:	461d      	mov	r5, r3
    3c66:	4b37      	ldr	r3, [pc, #220]	; (3d44 <setvbuf+0xe4>)
    3c68:	4604      	mov	r4, r0
    3c6a:	6818      	ldr	r0, [r3, #0]
    3c6c:	460e      	mov	r6, r1
    3c6e:	4617      	mov	r7, r2
    3c70:	4698      	mov	r8, r3
    3c72:	b118      	cbz	r0, 3c7c <setvbuf+0x1c>
    3c74:	6b82      	ldr	r2, [r0, #56]	; 0x38
    3c76:	b90a      	cbnz	r2, 3c7c <setvbuf+0x1c>
    3c78:	f001 fa6a 	bl	5150 <__sinit>
    3c7c:	2f02      	cmp	r7, #2
    3c7e:	d85d      	bhi.n	3d3c <setvbuf+0xdc>
    3c80:	2d00      	cmp	r5, #0
    3c82:	db5b      	blt.n	3d3c <setvbuf+0xdc>
    3c84:	4621      	mov	r1, r4
    3c86:	f8d8 0000 	ldr.w	r0, [r8]
    3c8a:	f001 f96d 	bl	4f68 <_fflush_r>
    3c8e:	89a1      	ldrh	r1, [r4, #12]
    3c90:	f001 0380 	and.w	r3, r1, #128	; 0x80
    3c94:	2000      	movs	r0, #0
    3c96:	b21a      	sxth	r2, r3
    3c98:	6060      	str	r0, [r4, #4]
    3c9a:	61a0      	str	r0, [r4, #24]
    3c9c:	b122      	cbz	r2, 3ca8 <setvbuf+0x48>
    3c9e:	4829      	ldr	r0, [pc, #164]	; (3d44 <setvbuf+0xe4>)
    3ca0:	6921      	ldr	r1, [r4, #16]
    3ca2:	6800      	ldr	r0, [r0, #0]
    3ca4:	f001 fbf0 	bl	5488 <_free_r>
    3ca8:	89a1      	ldrh	r1, [r4, #12]
    3caa:	2f02      	cmp	r7, #2
    3cac:	f021 0383 	bic.w	r3, r1, #131	; 0x83
    3cb0:	81a3      	strh	r3, [r4, #12]
    3cb2:	d012      	beq.n	3cda <setvbuf+0x7a>
    3cb4:	bb36      	cbnz	r6, 3d04 <setvbuf+0xa4>
    3cb6:	2d00      	cmp	r5, #0
    3cb8:	bf08      	it	eq
    3cba:	f44f 6580 	moveq.w	r5, #1024	; 0x400
    3cbe:	4628      	mov	r0, r5
    3cc0:	f001 fef4 	bl	5aac <malloc>
    3cc4:	4606      	mov	r6, r0
    3cc6:	b9c8      	cbnz	r0, 3cfc <setvbuf+0x9c>
    3cc8:	f44f 6080 	mov.w	r0, #1024	; 0x400
    3ccc:	f001 feee 	bl	5aac <malloc>
    3cd0:	4606      	mov	r6, r0
    3cd2:	b988      	cbnz	r0, 3cf8 <setvbuf+0x98>
    3cd4:	f04f 30ff 	mov.w	r0, #4294967295
    3cd8:	e000      	b.n	3cdc <setvbuf+0x7c>
    3cda:	2000      	movs	r0, #0
    3cdc:	89a1      	ldrh	r1, [r4, #12]
    3cde:	f041 0302 	orr.w	r3, r1, #2
    3ce2:	81a3      	strh	r3, [r4, #12]
    3ce4:	f104 0143 	add.w	r1, r4, #67	; 0x43
    3ce8:	2200      	movs	r2, #0
    3cea:	2301      	movs	r3, #1
    3cec:	60a2      	str	r2, [r4, #8]
    3cee:	6021      	str	r1, [r4, #0]
    3cf0:	6121      	str	r1, [r4, #16]
    3cf2:	6163      	str	r3, [r4, #20]
    3cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3cf8:	f44f 6580 	mov.w	r5, #1024	; 0x400
    3cfc:	89a2      	ldrh	r2, [r4, #12]
    3cfe:	f042 0080 	orr.w	r0, r2, #128	; 0x80
    3d02:	81a0      	strh	r0, [r4, #12]
    3d04:	2f01      	cmp	r7, #1
    3d06:	d105      	bne.n	3d14 <setvbuf+0xb4>
    3d08:	89a1      	ldrh	r1, [r4, #12]
    3d0a:	426a      	negs	r2, r5
    3d0c:	f041 0301 	orr.w	r3, r1, #1
    3d10:	81a3      	strh	r3, [r4, #12]
    3d12:	61a2      	str	r2, [r4, #24]
    3d14:	480b      	ldr	r0, [pc, #44]	; (3d44 <setvbuf+0xe4>)
    3d16:	89a2      	ldrh	r2, [r4, #12]
    3d18:	6801      	ldr	r1, [r0, #0]
    3d1a:	4b0b      	ldr	r3, [pc, #44]	; (3d48 <setvbuf+0xe8>)
    3d1c:	f002 0008 	and.w	r0, r2, #8
    3d20:	b200      	sxth	r0, r0
    3d22:	63cb      	str	r3, [r1, #60]	; 0x3c
    3d24:	6026      	str	r6, [r4, #0]
    3d26:	6126      	str	r6, [r4, #16]
    3d28:	6165      	str	r5, [r4, #20]
    3d2a:	b148      	cbz	r0, 3d40 <setvbuf+0xe0>
    3d2c:	f012 0f03 	tst.w	r2, #3
    3d30:	bf18      	it	ne
    3d32:	2500      	movne	r5, #0
    3d34:	60a5      	str	r5, [r4, #8]
    3d36:	2000      	movs	r0, #0
    3d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3d3c:	f04f 30ff 	mov.w	r0, #4294967295
    3d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3d44:	20000050 	.word	0x20000050
    3d48:	000050c5 	.word	0x000050c5

00003d4c <strlen>:
    3d4c:	4603      	mov	r3, r0
    3d4e:	f813 2b01 	ldrb.w	r2, [r3], #1
    3d52:	2a00      	cmp	r2, #0
    3d54:	d1fb      	bne.n	3d4e <strlen+0x2>
    3d56:	1a18      	subs	r0, r3, r0
    3d58:	3801      	subs	r0, #1
    3d5a:	4770      	bx	lr

00003d5c <__sprint_r>:
    3d5c:	6893      	ldr	r3, [r2, #8]
    3d5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3d62:	4681      	mov	r9, r0
    3d64:	460f      	mov	r7, r1
    3d66:	4614      	mov	r4, r2
    3d68:	b91b      	cbnz	r3, 3d72 <__sprint_r+0x16>
    3d6a:	6053      	str	r3, [r2, #4]
    3d6c:	4618      	mov	r0, r3
    3d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3d72:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    3d74:	049b      	lsls	r3, r3, #18
    3d76:	d51e      	bpl.n	3db6 <__sprint_r+0x5a>
    3d78:	6815      	ldr	r5, [r2, #0]
    3d7a:	68a0      	ldr	r0, [r4, #8]
    3d7c:	3508      	adds	r5, #8
    3d7e:	b1c8      	cbz	r0, 3db4 <__sprint_r+0x58>
    3d80:	f855 1c04 	ldr.w	r1, [r5, #-4]
    3d84:	f855 ac08 	ldr.w	sl, [r5, #-8]
    3d88:	ea4f 0891 	mov.w	r8, r1, lsr #2
    3d8c:	2600      	movs	r6, #0
    3d8e:	4546      	cmp	r6, r8
    3d90:	da09      	bge.n	3da6 <__sprint_r+0x4a>
    3d92:	4648      	mov	r0, r9
    3d94:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
    3d98:	463a      	mov	r2, r7
    3d9a:	f001 fa55 	bl	5248 <_fputwc_r>
    3d9e:	1c43      	adds	r3, r0, #1
    3da0:	d00b      	beq.n	3dba <__sprint_r+0x5e>
    3da2:	3601      	adds	r6, #1
    3da4:	e7f3      	b.n	3d8e <__sprint_r+0x32>
    3da6:	68a2      	ldr	r2, [r4, #8]
    3da8:	ea4f 0888 	mov.w	r8, r8, lsl #2
    3dac:	ebc8 0302 	rsb	r3, r8, r2
    3db0:	60a3      	str	r3, [r4, #8]
    3db2:	e7e2      	b.n	3d7a <__sprint_r+0x1e>
    3db4:	e001      	b.n	3dba <__sprint_r+0x5e>
    3db6:	f001 fc1d 	bl	55f4 <__sfvwrite_r>
    3dba:	2100      	movs	r1, #0
    3dbc:	60a1      	str	r1, [r4, #8]
    3dbe:	6061      	str	r1, [r4, #4]
    3dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00003dc4 <_vfiprintf_r>:
    3dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3dc8:	4689      	mov	r9, r1
    3dca:	b0a9      	sub	sp, #164	; 0xa4
    3dcc:	4614      	mov	r4, r2
    3dce:	461d      	mov	r5, r3
    3dd0:	461e      	mov	r6, r3
    3dd2:	4682      	mov	sl, r0
    3dd4:	b118      	cbz	r0, 3dde <_vfiprintf_r+0x1a>
    3dd6:	6b83      	ldr	r3, [r0, #56]	; 0x38
    3dd8:	b90b      	cbnz	r3, 3dde <_vfiprintf_r+0x1a>
    3dda:	f001 f9b9 	bl	5150 <__sinit>
    3dde:	f8b9 000c 	ldrh.w	r0, [r9, #12]
    3de2:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
    3de6:	b211      	sxth	r1, r2
    3de8:	b949      	cbnz	r1, 3dfe <_vfiprintf_r+0x3a>
    3dea:	f440 5300 	orr.w	r3, r0, #8192	; 0x2000
    3dee:	f8d9 0064 	ldr.w	r0, [r9, #100]	; 0x64
    3df2:	f8a9 300c 	strh.w	r3, [r9, #12]
    3df6:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
    3dfa:	f8c9 2064 	str.w	r2, [r9, #100]	; 0x64
    3dfe:	f8b9 100c 	ldrh.w	r1, [r9, #12]
    3e02:	f001 0308 	and.w	r3, r1, #8
    3e06:	b218      	sxth	r0, r3
    3e08:	b148      	cbz	r0, 3e1e <_vfiprintf_r+0x5a>
    3e0a:	f8d9 2010 	ldr.w	r2, [r9, #16]
    3e0e:	b132      	cbz	r2, 3e1e <_vfiprintf_r+0x5a>
    3e10:	f8b9 100c 	ldrh.w	r1, [r9, #12]
    3e14:	f001 031a 	and.w	r3, r1, #26
    3e18:	2b0a      	cmp	r3, #10
    3e1a:	d116      	bne.n	3e4a <_vfiprintf_r+0x86>
    3e1c:	e009      	b.n	3e32 <_vfiprintf_r+0x6e>
    3e1e:	4650      	mov	r0, sl
    3e20:	4649      	mov	r1, r9
    3e22:	f001 f835 	bl	4e90 <__swsetup_r>
    3e26:	2800      	cmp	r0, #0
    3e28:	d0f2      	beq.n	3e10 <_vfiprintf_r+0x4c>
    3e2a:	f04f 32ff 	mov.w	r2, #4294967295
    3e2e:	9203      	str	r2, [sp, #12]
    3e30:	e3d5      	b.n	45de <_vfiprintf_r+0x81a>
    3e32:	f9b9 000e 	ldrsh.w	r0, [r9, #14]
    3e36:	2800      	cmp	r0, #0
    3e38:	db07      	blt.n	3e4a <_vfiprintf_r+0x86>
    3e3a:	4650      	mov	r0, sl
    3e3c:	4649      	mov	r1, r9
    3e3e:	4622      	mov	r2, r4
    3e40:	462b      	mov	r3, r5
    3e42:	f000 fbd0 	bl	45e6 <__sbprintf>
    3e46:	9003      	str	r0, [sp, #12]
    3e48:	e3c9      	b.n	45de <_vfiprintf_r+0x81a>
    3e4a:	2200      	movs	r2, #0
    3e4c:	ad18      	add	r5, sp, #96	; 0x60
    3e4e:	950b      	str	r5, [sp, #44]	; 0x2c
    3e50:	920d      	str	r2, [sp, #52]	; 0x34
    3e52:	920c      	str	r2, [sp, #48]	; 0x30
    3e54:	9401      	str	r4, [sp, #4]
    3e56:	9205      	str	r2, [sp, #20]
    3e58:	9203      	str	r2, [sp, #12]
    3e5a:	46a8      	mov	r8, r5
    3e5c:	9901      	ldr	r1, [sp, #4]
    3e5e:	460c      	mov	r4, r1
    3e60:	f811 3b01 	ldrb.w	r3, [r1], #1
    3e64:	b10b      	cbz	r3, 3e6a <_vfiprintf_r+0xa6>
    3e66:	2b25      	cmp	r3, #37	; 0x25
    3e68:	d1f9      	bne.n	3e5e <_vfiprintf_r+0x9a>
    3e6a:	9a01      	ldr	r2, [sp, #4]
    3e6c:	1aa5      	subs	r5, r4, r2
    3e6e:	d019      	beq.n	3ea4 <_vfiprintf_r+0xe0>
    3e70:	990c      	ldr	r1, [sp, #48]	; 0x30
    3e72:	980d      	ldr	r0, [sp, #52]	; 0x34
    3e74:	1c4b      	adds	r3, r1, #1
    3e76:	e888 0024 	stmia.w	r8, {r2, r5}
    3e7a:	2b07      	cmp	r3, #7
    3e7c:	eb00 0205 	add.w	r2, r0, r5
    3e80:	920d      	str	r2, [sp, #52]	; 0x34
    3e82:	f108 0808 	add.w	r8, r8, #8
    3e86:	930c      	str	r3, [sp, #48]	; 0x30
    3e88:	dd09      	ble.n	3e9e <_vfiprintf_r+0xda>
    3e8a:	4650      	mov	r0, sl
    3e8c:	4649      	mov	r1, r9
    3e8e:	aa0b      	add	r2, sp, #44	; 0x2c
    3e90:	f7ff ff64 	bl	3d5c <__sprint_r>
    3e94:	2800      	cmp	r0, #0
    3e96:	f040 839a 	bne.w	45ce <_vfiprintf_r+0x80a>
    3e9a:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    3e9e:	9803      	ldr	r0, [sp, #12]
    3ea0:	1942      	adds	r2, r0, r5
    3ea2:	9203      	str	r2, [sp, #12]
    3ea4:	7821      	ldrb	r1, [r4, #0]
    3ea6:	2900      	cmp	r1, #0
    3ea8:	f000 838a 	beq.w	45c0 <_vfiprintf_r+0x7fc>
    3eac:	2200      	movs	r2, #0
    3eae:	3401      	adds	r4, #1
    3eb0:	9401      	str	r4, [sp, #4]
    3eb2:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3eb6:	f04f 3cff 	mov.w	ip, #4294967295
    3eba:	9204      	str	r2, [sp, #16]
    3ebc:	4617      	mov	r7, r2
    3ebe:	9801      	ldr	r0, [sp, #4]
    3ec0:	f810 3b01 	ldrb.w	r3, [r0], #1
    3ec4:	9001      	str	r0, [sp, #4]
    3ec6:	2b63      	cmp	r3, #99	; 0x63
    3ec8:	f000 80b3 	beq.w	4032 <_vfiprintf_r+0x26e>
    3ecc:	dc33      	bgt.n	3f36 <_vfiprintf_r+0x172>
    3ece:	2b39      	cmp	r3, #57	; 0x39
    3ed0:	dc1a      	bgt.n	3f08 <_vfiprintf_r+0x144>
    3ed2:	2b31      	cmp	r3, #49	; 0x31
    3ed4:	f280 8091 	bge.w	3ffa <_vfiprintf_r+0x236>
    3ed8:	2b2b      	cmp	r3, #43	; 0x2b
    3eda:	d101      	bne.n	3ee0 <_vfiprintf_r+0x11c>
    3edc:	461a      	mov	r2, r3
    3ede:	e7ee      	b.n	3ebe <_vfiprintf_r+0xfa>
    3ee0:	dc0a      	bgt.n	3ef8 <_vfiprintf_r+0x134>
    3ee2:	2b23      	cmp	r3, #35	; 0x23
    3ee4:	d055      	beq.n	3f92 <_vfiprintf_r+0x1ce>
    3ee6:	2b2a      	cmp	r3, #42	; 0x2a
    3ee8:	d056      	beq.n	3f98 <_vfiprintf_r+0x1d4>
    3eea:	2b20      	cmp	r3, #32
    3eec:	f040 81f7 	bne.w	42de <_vfiprintf_r+0x51a>
    3ef0:	2a00      	cmp	r2, #0
    3ef2:	bf08      	it	eq
    3ef4:	2220      	moveq	r2, #32
    3ef6:	e7e2      	b.n	3ebe <_vfiprintf_r+0xfa>
    3ef8:	2b2e      	cmp	r3, #46	; 0x2e
    3efa:	d058      	beq.n	3fae <_vfiprintf_r+0x1ea>
    3efc:	2b30      	cmp	r3, #48	; 0x30
    3efe:	d079      	beq.n	3ff4 <_vfiprintf_r+0x230>
    3f00:	2b2d      	cmp	r3, #45	; 0x2d
    3f02:	f040 81ec 	bne.w	42de <_vfiprintf_r+0x51a>
    3f06:	e04f      	b.n	3fa8 <_vfiprintf_r+0x1e4>
    3f08:	2b4f      	cmp	r3, #79	; 0x4f
    3f0a:	f000 80de 	beq.w	40ca <_vfiprintf_r+0x306>
    3f0e:	dc07      	bgt.n	3f20 <_vfiprintf_r+0x15c>
    3f10:	2b44      	cmp	r3, #68	; 0x44
    3f12:	f040 81e4 	bne.w	42de <_vfiprintf_r+0x51a>
    3f16:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3f1a:	f047 0710 	orr.w	r7, r7, #16
    3f1e:	e090      	b.n	4042 <_vfiprintf_r+0x27e>
    3f20:	2b55      	cmp	r3, #85	; 0x55
    3f22:	f000 811f 	beq.w	4164 <_vfiprintf_r+0x3a0>
    3f26:	2b58      	cmp	r3, #88	; 0x58
    3f28:	f040 81d9 	bne.w	42de <_vfiprintf_r+0x51a>
    3f2c:	4daf      	ldr	r5, [pc, #700]	; (41ec <_vfiprintf_r+0x428>)
    3f2e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3f32:	9505      	str	r5, [sp, #20]
    3f34:	e131      	b.n	419a <_vfiprintf_r+0x3d6>
    3f36:	2b6f      	cmp	r3, #111	; 0x6f
    3f38:	f000 80c9 	beq.w	40ce <_vfiprintf_r+0x30a>
    3f3c:	dc10      	bgt.n	3f60 <_vfiprintf_r+0x19c>
    3f3e:	2b69      	cmp	r3, #105	; 0x69
    3f40:	d024      	beq.n	3f8c <_vfiprintf_r+0x1c8>
    3f42:	dc07      	bgt.n	3f54 <_vfiprintf_r+0x190>
    3f44:	2b64      	cmp	r3, #100	; 0x64
    3f46:	d021      	beq.n	3f8c <_vfiprintf_r+0x1c8>
    3f48:	2b68      	cmp	r3, #104	; 0x68
    3f4a:	f040 81c8 	bne.w	42de <_vfiprintf_r+0x51a>
    3f4e:	f047 0740 	orr.w	r7, r7, #64	; 0x40
    3f52:	e7b4      	b.n	3ebe <_vfiprintf_r+0xfa>
    3f54:	2b6c      	cmp	r3, #108	; 0x6c
    3f56:	d05f      	beq.n	4018 <_vfiprintf_r+0x254>
    3f58:	2b6e      	cmp	r3, #110	; 0x6e
    3f5a:	f040 81c0 	bne.w	42de <_vfiprintf_r+0x51a>
    3f5e:	e096      	b.n	408e <_vfiprintf_r+0x2ca>
    3f60:	2b73      	cmp	r3, #115	; 0x73
    3f62:	f000 80df 	beq.w	4124 <_vfiprintf_r+0x360>
    3f66:	dc06      	bgt.n	3f76 <_vfiprintf_r+0x1b2>
    3f68:	2b70      	cmp	r3, #112	; 0x70
    3f6a:	f000 80cd 	beq.w	4108 <_vfiprintf_r+0x344>
    3f6e:	2b71      	cmp	r3, #113	; 0x71
    3f70:	f040 81b5 	bne.w	42de <_vfiprintf_r+0x51a>
    3f74:	e05a      	b.n	402c <_vfiprintf_r+0x268>
    3f76:	2b75      	cmp	r3, #117	; 0x75
    3f78:	f000 80f6 	beq.w	4168 <_vfiprintf_r+0x3a4>
    3f7c:	2b78      	cmp	r3, #120	; 0x78
    3f7e:	f040 81ae 	bne.w	42de <_vfiprintf_r+0x51a>
    3f82:	4d9b      	ldr	r5, [pc, #620]	; (41f0 <_vfiprintf_r+0x42c>)
    3f84:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3f88:	9505      	str	r5, [sp, #20]
    3f8a:	e106      	b.n	419a <_vfiprintf_r+0x3d6>
    3f8c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3f90:	e057      	b.n	4042 <_vfiprintf_r+0x27e>
    3f92:	f047 0701 	orr.w	r7, r7, #1
    3f96:	e792      	b.n	3ebe <_vfiprintf_r+0xfa>
    3f98:	1d33      	adds	r3, r6, #4
    3f9a:	6836      	ldr	r6, [r6, #0]
    3f9c:	2e00      	cmp	r6, #0
    3f9e:	9604      	str	r6, [sp, #16]
    3fa0:	da15      	bge.n	3fce <_vfiprintf_r+0x20a>
    3fa2:	4270      	negs	r0, r6
    3fa4:	9004      	str	r0, [sp, #16]
    3fa6:	461e      	mov	r6, r3
    3fa8:	f047 0704 	orr.w	r7, r7, #4
    3fac:	e787      	b.n	3ebe <_vfiprintf_r+0xfa>
    3fae:	9901      	ldr	r1, [sp, #4]
    3fb0:	f811 3b01 	ldrb.w	r3, [r1], #1
    3fb4:	2b2a      	cmp	r3, #42	; 0x2a
    3fb6:	9101      	str	r1, [sp, #4]
    3fb8:	d10b      	bne.n	3fd2 <_vfiprintf_r+0x20e>
    3fba:	f8d6 c000 	ldr.w	ip, [r6]
    3fbe:	1d33      	adds	r3, r6, #4
    3fc0:	f1bc 0f00 	cmp.w	ip, #0
    3fc4:	da03      	bge.n	3fce <_vfiprintf_r+0x20a>
    3fc6:	461e      	mov	r6, r3
    3fc8:	f04f 3cff 	mov.w	ip, #4294967295
    3fcc:	e777      	b.n	3ebe <_vfiprintf_r+0xfa>
    3fce:	461e      	mov	r6, r3
    3fd0:	e775      	b.n	3ebe <_vfiprintf_r+0xfa>
    3fd2:	f04f 0c00 	mov.w	ip, #0
    3fd6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    3fda:	2809      	cmp	r0, #9
    3fdc:	d807      	bhi.n	3fee <_vfiprintf_r+0x22a>
    3fde:	9901      	ldr	r1, [sp, #4]
    3fe0:	230a      	movs	r3, #10
    3fe2:	fb03 0c0c 	mla	ip, r3, ip, r0
    3fe6:	f811 3b01 	ldrb.w	r3, [r1], #1
    3fea:	9101      	str	r1, [sp, #4]
    3fec:	e7f3      	b.n	3fd6 <_vfiprintf_r+0x212>
    3fee:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
    3ff2:	e768      	b.n	3ec6 <_vfiprintf_r+0x102>
    3ff4:	f047 0780 	orr.w	r7, r7, #128	; 0x80
    3ff8:	e761      	b.n	3ebe <_vfiprintf_r+0xfa>
    3ffa:	9801      	ldr	r0, [sp, #4]
    3ffc:	2100      	movs	r1, #0
    3ffe:	3b30      	subs	r3, #48	; 0x30
    4000:	240a      	movs	r4, #10
    4002:	fb04 3101 	mla	r1, r4, r1, r3
    4006:	f810 3b01 	ldrb.w	r3, [r0], #1
    400a:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
    400e:	2c09      	cmp	r4, #9
    4010:	9001      	str	r0, [sp, #4]
    4012:	d9f4      	bls.n	3ffe <_vfiprintf_r+0x23a>
    4014:	9104      	str	r1, [sp, #16]
    4016:	e756      	b.n	3ec6 <_vfiprintf_r+0x102>
    4018:	9901      	ldr	r1, [sp, #4]
    401a:	780b      	ldrb	r3, [r1, #0]
    401c:	2b6c      	cmp	r3, #108	; 0x6c
    401e:	d102      	bne.n	4026 <_vfiprintf_r+0x262>
    4020:	1c48      	adds	r0, r1, #1
    4022:	9001      	str	r0, [sp, #4]
    4024:	e002      	b.n	402c <_vfiprintf_r+0x268>
    4026:	f047 0710 	orr.w	r7, r7, #16
    402a:	e748      	b.n	3ebe <_vfiprintf_r+0xfa>
    402c:	f047 0720 	orr.w	r7, r7, #32
    4030:	e745      	b.n	3ebe <_vfiprintf_r+0xfa>
    4032:	6832      	ldr	r2, [r6, #0]
    4034:	2500      	movs	r5, #0
    4036:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    403a:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
    403e:	3604      	adds	r6, #4
    4040:	e157      	b.n	42f2 <_vfiprintf_r+0x52e>
    4042:	06ba      	lsls	r2, r7, #26
    4044:	d507      	bpl.n	4056 <_vfiprintf_r+0x292>
    4046:	3607      	adds	r6, #7
    4048:	f026 0507 	bic.w	r5, r6, #7
    404c:	f105 0608 	add.w	r6, r5, #8
    4050:	e9d5 4500 	ldrd	r4, r5, [r5]
    4054:	e00f      	b.n	4076 <_vfiprintf_r+0x2b2>
    4056:	f017 0f10 	tst.w	r7, #16
    405a:	f106 0104 	add.w	r1, r6, #4
    405e:	d001      	beq.n	4064 <_vfiprintf_r+0x2a0>
    4060:	6832      	ldr	r2, [r6, #0]
    4062:	e005      	b.n	4070 <_vfiprintf_r+0x2ac>
    4064:	f017 0f40 	tst.w	r7, #64	; 0x40
    4068:	6832      	ldr	r2, [r6, #0]
    406a:	d001      	beq.n	4070 <_vfiprintf_r+0x2ac>
    406c:	b214      	sxth	r4, r2
    406e:	e000      	b.n	4072 <_vfiprintf_r+0x2ae>
    4070:	4614      	mov	r4, r2
    4072:	17e5      	asrs	r5, r4, #31
    4074:	460e      	mov	r6, r1
    4076:	2c00      	cmp	r4, #0
    4078:	f175 0200 	sbcs.w	r2, r5, #0
    407c:	f280 80ba 	bge.w	41f4 <_vfiprintf_r+0x430>
    4080:	232d      	movs	r3, #45	; 0x2d
    4082:	4264      	negs	r4, r4
    4084:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    4088:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    408c:	e0b2      	b.n	41f4 <_vfiprintf_r+0x430>
    408e:	f017 0f20 	tst.w	r7, #32
    4092:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    4096:	f106 0204 	add.w	r2, r6, #4
    409a:	d005      	beq.n	40a8 <_vfiprintf_r+0x2e4>
    409c:	9c03      	ldr	r4, [sp, #12]
    409e:	6835      	ldr	r5, [r6, #0]
    40a0:	17e0      	asrs	r0, r4, #31
    40a2:	602c      	str	r4, [r5, #0]
    40a4:	6068      	str	r0, [r5, #4]
    40a6:	e004      	b.n	40b2 <_vfiprintf_r+0x2ee>
    40a8:	06fb      	lsls	r3, r7, #27
    40aa:	d504      	bpl.n	40b6 <_vfiprintf_r+0x2f2>
    40ac:	6833      	ldr	r3, [r6, #0]
    40ae:	9903      	ldr	r1, [sp, #12]
    40b0:	6019      	str	r1, [r3, #0]
    40b2:	4616      	mov	r6, r2
    40b4:	e6d2      	b.n	3e5c <_vfiprintf_r+0x98>
    40b6:	6830      	ldr	r0, [r6, #0]
    40b8:	9c03      	ldr	r4, [sp, #12]
    40ba:	f017 0f40 	tst.w	r7, #64	; 0x40
    40be:	f106 0604 	add.w	r6, r6, #4
    40c2:	bf14      	ite	ne
    40c4:	8004      	strhne	r4, [r0, #0]
    40c6:	6004      	streq	r4, [r0, #0]
    40c8:	e6c8      	b.n	3e5c <_vfiprintf_r+0x98>
    40ca:	f047 0710 	orr.w	r7, r7, #16
    40ce:	f017 0020 	ands.w	r0, r7, #32
    40d2:	d008      	beq.n	40e6 <_vfiprintf_r+0x322>
    40d4:	1df3      	adds	r3, r6, #7
    40d6:	f023 0507 	bic.w	r5, r3, #7
    40da:	f105 0608 	add.w	r6, r5, #8
    40de:	e9d5 4500 	ldrd	r4, r5, [r5]
    40e2:	2000      	movs	r0, #0
    40e4:	e07d      	b.n	41e2 <_vfiprintf_r+0x41e>
    40e6:	f017 0110 	ands.w	r1, r7, #16
    40ea:	f106 0204 	add.w	r2, r6, #4
    40ee:	d106      	bne.n	40fe <_vfiprintf_r+0x33a>
    40f0:	f017 0040 	ands.w	r0, r7, #64	; 0x40
    40f4:	d003      	beq.n	40fe <_vfiprintf_r+0x33a>
    40f6:	8834      	ldrh	r4, [r6, #0]
    40f8:	2500      	movs	r5, #0
    40fa:	4616      	mov	r6, r2
    40fc:	e7f1      	b.n	40e2 <_vfiprintf_r+0x31e>
    40fe:	6836      	ldr	r6, [r6, #0]
    4100:	2500      	movs	r5, #0
    4102:	4634      	mov	r4, r6
    4104:	4616      	mov	r6, r2
    4106:	e06c      	b.n	41e2 <_vfiprintf_r+0x41e>
    4108:	4b39      	ldr	r3, [pc, #228]	; (41f0 <_vfiprintf_r+0x42c>)
    410a:	6834      	ldr	r4, [r6, #0]
    410c:	9305      	str	r3, [sp, #20]
    410e:	2130      	movs	r1, #48	; 0x30
    4110:	2278      	movs	r2, #120	; 0x78
    4112:	2500      	movs	r5, #0
    4114:	f047 0702 	orr.w	r7, r7, #2
    4118:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    411c:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
    4120:	3604      	adds	r6, #4
    4122:	e05d      	b.n	41e0 <_vfiprintf_r+0x41c>
    4124:	4631      	mov	r1, r6
    4126:	2500      	movs	r5, #0
    4128:	f8d1 b000 	ldr.w	fp, [r1]
    412c:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
    4130:	3604      	adds	r6, #4
    4132:	45ac      	cmp	ip, r5
    4134:	4658      	mov	r0, fp
    4136:	db11      	blt.n	415c <_vfiprintf_r+0x398>
    4138:	4662      	mov	r2, ip
    413a:	4629      	mov	r1, r5
    413c:	f8cd c000 	str.w	ip, [sp]
    4140:	f001 ff26 	bl	5f90 <memchr>
    4144:	f8dd c000 	ldr.w	ip, [sp]
    4148:	2800      	cmp	r0, #0
    414a:	f000 80d6 	beq.w	42fa <_vfiprintf_r+0x536>
    414e:	ebcb 0400 	rsb	r4, fp, r0
    4152:	4564      	cmp	r4, ip
    4154:	f340 80d3 	ble.w	42fe <_vfiprintf_r+0x53a>
    4158:	4664      	mov	r4, ip
    415a:	e0d0      	b.n	42fe <_vfiprintf_r+0x53a>
    415c:	f7ff fdf6 	bl	3d4c <strlen>
    4160:	4604      	mov	r4, r0
    4162:	e0cc      	b.n	42fe <_vfiprintf_r+0x53a>
    4164:	f047 0710 	orr.w	r7, r7, #16
    4168:	06bd      	lsls	r5, r7, #26
    416a:	d507      	bpl.n	417c <_vfiprintf_r+0x3b8>
    416c:	1df0      	adds	r0, r6, #7
    416e:	f020 0407 	bic.w	r4, r0, #7
    4172:	f104 0608 	add.w	r6, r4, #8
    4176:	e9d4 4500 	ldrd	r4, r5, [r4]
    417a:	e00c      	b.n	4196 <_vfiprintf_r+0x3d2>
    417c:	f017 0f10 	tst.w	r7, #16
    4180:	f106 0304 	add.w	r3, r6, #4
    4184:	d103      	bne.n	418e <_vfiprintf_r+0x3ca>
    4186:	067c      	lsls	r4, r7, #25
    4188:	d501      	bpl.n	418e <_vfiprintf_r+0x3ca>
    418a:	8834      	ldrh	r4, [r6, #0]
    418c:	e001      	b.n	4192 <_vfiprintf_r+0x3ce>
    418e:	6835      	ldr	r5, [r6, #0]
    4190:	462c      	mov	r4, r5
    4192:	2500      	movs	r5, #0
    4194:	461e      	mov	r6, r3
    4196:	2001      	movs	r0, #1
    4198:	e023      	b.n	41e2 <_vfiprintf_r+0x41e>
    419a:	06b8      	lsls	r0, r7, #26
    419c:	d507      	bpl.n	41ae <_vfiprintf_r+0x3ea>
    419e:	1df4      	adds	r4, r6, #7
    41a0:	f024 0107 	bic.w	r1, r4, #7
    41a4:	f101 0608 	add.w	r6, r1, #8
    41a8:	e9d1 4500 	ldrd	r4, r5, [r1]
    41ac:	e00c      	b.n	41c8 <_vfiprintf_r+0x404>
    41ae:	f017 0f10 	tst.w	r7, #16
    41b2:	f106 0004 	add.w	r0, r6, #4
    41b6:	d103      	bne.n	41c0 <_vfiprintf_r+0x3fc>
    41b8:	0679      	lsls	r1, r7, #25
    41ba:	d501      	bpl.n	41c0 <_vfiprintf_r+0x3fc>
    41bc:	8834      	ldrh	r4, [r6, #0]
    41be:	e001      	b.n	41c4 <_vfiprintf_r+0x400>
    41c0:	6836      	ldr	r6, [r6, #0]
    41c2:	4634      	mov	r4, r6
    41c4:	2500      	movs	r5, #0
    41c6:	4606      	mov	r6, r0
    41c8:	07fa      	lsls	r2, r7, #31
    41ca:	d509      	bpl.n	41e0 <_vfiprintf_r+0x41c>
    41cc:	ea54 0205 	orrs.w	r2, r4, r5
    41d0:	d006      	beq.n	41e0 <_vfiprintf_r+0x41c>
    41d2:	2230      	movs	r2, #48	; 0x30
    41d4:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
    41d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    41dc:	f047 0702 	orr.w	r7, r7, #2
    41e0:	2002      	movs	r0, #2
    41e2:	2100      	movs	r1, #0
    41e4:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    41e8:	e005      	b.n	41f6 <_vfiprintf_r+0x432>
    41ea:	bf00      	nop
    41ec:	000076b8 	.word	0x000076b8
    41f0:	000076c9 	.word	0x000076c9
    41f4:	2001      	movs	r0, #1
    41f6:	f1bc 0f00 	cmp.w	ip, #0
    41fa:	bfa8      	it	ge
    41fc:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
    4200:	ea54 0105 	orrs.w	r1, r4, r5
    4204:	d102      	bne.n	420c <_vfiprintf_r+0x448>
    4206:	f1bc 0f00 	cmp.w	ip, #0
    420a:	d058      	beq.n	42be <_vfiprintf_r+0x4fa>
    420c:	2801      	cmp	r0, #1
    420e:	d01d      	beq.n	424c <_vfiprintf_r+0x488>
    4210:	2802      	cmp	r0, #2
    4212:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
    4216:	d041      	beq.n	429c <_vfiprintf_r+0x4d8>
    4218:	f004 0207 	and.w	r2, r4, #7
    421c:	08e4      	lsrs	r4, r4, #3
    421e:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
    4222:	08e9      	lsrs	r1, r5, #3
    4224:	4604      	mov	r4, r0
    4226:	460d      	mov	r5, r1
    4228:	3230      	adds	r2, #48	; 0x30
    422a:	ea54 0105 	orrs.w	r1, r4, r5
    422e:	469b      	mov	fp, r3
    4230:	701a      	strb	r2, [r3, #0]
    4232:	f103 33ff 	add.w	r3, r3, #4294967295
    4236:	d1ef      	bne.n	4218 <_vfiprintf_r+0x454>
    4238:	07f8      	lsls	r0, r7, #31
    423a:	465d      	mov	r5, fp
    423c:	d54a      	bpl.n	42d4 <_vfiprintf_r+0x510>
    423e:	2a30      	cmp	r2, #48	; 0x30
    4240:	d048      	beq.n	42d4 <_vfiprintf_r+0x510>
    4242:	2230      	movs	r2, #48	; 0x30
    4244:	469b      	mov	fp, r3
    4246:	f805 2c01 	strb.w	r2, [r5, #-1]
    424a:	e043      	b.n	42d4 <_vfiprintf_r+0x510>
    424c:	2d00      	cmp	r5, #0
    424e:	bf08      	it	eq
    4250:	2c0a      	cmpeq	r4, #10
    4252:	d203      	bcs.n	425c <_vfiprintf_r+0x498>
    4254:	3430      	adds	r4, #48	; 0x30
    4256:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
    425a:	e036      	b.n	42ca <_vfiprintf_r+0x506>
    425c:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
    4260:	9302      	str	r3, [sp, #8]
    4262:	4620      	mov	r0, r4
    4264:	4629      	mov	r1, r5
    4266:	220a      	movs	r2, #10
    4268:	2300      	movs	r3, #0
    426a:	f8cd c000 	str.w	ip, [sp]
    426e:	f002 fdf1 	bl	6e54 <__aeabi_uldivmod>
    4272:	9802      	ldr	r0, [sp, #8]
    4274:	f8dd b008 	ldr.w	fp, [sp, #8]
    4278:	3230      	adds	r2, #48	; 0x30
    427a:	f800 2901 	strb.w	r2, [r0], #-1
    427e:	4629      	mov	r1, r5
    4280:	9002      	str	r0, [sp, #8]
    4282:	220a      	movs	r2, #10
    4284:	4620      	mov	r0, r4
    4286:	2300      	movs	r3, #0
    4288:	f002 fde4 	bl	6e54 <__aeabi_uldivmod>
    428c:	4604      	mov	r4, r0
    428e:	460d      	mov	r5, r1
    4290:	ea54 0105 	orrs.w	r1, r4, r5
    4294:	f8dd c000 	ldr.w	ip, [sp]
    4298:	d1e3      	bne.n	4262 <_vfiprintf_r+0x49e>
    429a:	e01b      	b.n	42d4 <_vfiprintf_r+0x510>
    429c:	f004 000f 	and.w	r0, r4, #15
    42a0:	9905      	ldr	r1, [sp, #20]
    42a2:	0924      	lsrs	r4, r4, #4
    42a4:	5c0a      	ldrb	r2, [r1, r0]
    42a6:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
    42aa:	0929      	lsrs	r1, r5, #4
    42ac:	4604      	mov	r4, r0
    42ae:	460d      	mov	r5, r1
    42b0:	469b      	mov	fp, r3
    42b2:	f803 2901 	strb.w	r2, [r3], #-1
    42b6:	ea54 0205 	orrs.w	r2, r4, r5
    42ba:	d1ef      	bne.n	429c <_vfiprintf_r+0x4d8>
    42bc:	e00a      	b.n	42d4 <_vfiprintf_r+0x510>
    42be:	b938      	cbnz	r0, 42d0 <_vfiprintf_r+0x50c>
    42c0:	07f9      	lsls	r1, r7, #31
    42c2:	d505      	bpl.n	42d0 <_vfiprintf_r+0x50c>
    42c4:	2030      	movs	r0, #48	; 0x30
    42c6:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
    42ca:	f10d 0b5f 	add.w	fp, sp, #95	; 0x5f
    42ce:	e001      	b.n	42d4 <_vfiprintf_r+0x510>
    42d0:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
    42d4:	ad18      	add	r5, sp, #96	; 0x60
    42d6:	ebcb 0405 	rsb	r4, fp, r5
    42da:	4665      	mov	r5, ip
    42dc:	e00f      	b.n	42fe <_vfiprintf_r+0x53a>
    42de:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    42e2:	2b00      	cmp	r3, #0
    42e4:	f000 816c 	beq.w	45c0 <_vfiprintf_r+0x7fc>
    42e8:	2500      	movs	r5, #0
    42ea:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    42ee:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
    42f2:	2401      	movs	r4, #1
    42f4:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
    42f8:	e001      	b.n	42fe <_vfiprintf_r+0x53a>
    42fa:	4664      	mov	r4, ip
    42fc:	4605      	mov	r5, r0
    42fe:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    4302:	42ac      	cmp	r4, r5
    4304:	bfac      	ite	ge
    4306:	4621      	movge	r1, r4
    4308:	4629      	movlt	r1, r5
    430a:	9102      	str	r1, [sp, #8]
    430c:	b113      	cbz	r3, 4314 <_vfiprintf_r+0x550>
    430e:	9802      	ldr	r0, [sp, #8]
    4310:	1c42      	adds	r2, r0, #1
    4312:	9202      	str	r2, [sp, #8]
    4314:	f017 0102 	ands.w	r1, r7, #2
    4318:	9106      	str	r1, [sp, #24]
    431a:	d002      	beq.n	4322 <_vfiprintf_r+0x55e>
    431c:	9b02      	ldr	r3, [sp, #8]
    431e:	1c98      	adds	r0, r3, #2
    4320:	9002      	str	r0, [sp, #8]
    4322:	f017 0284 	ands.w	r2, r7, #132	; 0x84
    4326:	9207      	str	r2, [sp, #28]
    4328:	d13a      	bne.n	43a0 <_vfiprintf_r+0x5dc>
    432a:	9904      	ldr	r1, [sp, #16]
    432c:	9b02      	ldr	r3, [sp, #8]
    432e:	1acb      	subs	r3, r1, r3
    4330:	2b00      	cmp	r3, #0
    4332:	dd35      	ble.n	43a0 <_vfiprintf_r+0x5dc>
    4334:	48a0      	ldr	r0, [pc, #640]	; (45b8 <_vfiprintf_r+0x7f4>)
    4336:	2b10      	cmp	r3, #16
    4338:	f8c8 0000 	str.w	r0, [r8]
    433c:	dd1a      	ble.n	4374 <_vfiprintf_r+0x5b0>
    433e:	990c      	ldr	r1, [sp, #48]	; 0x30
    4340:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4342:	2010      	movs	r0, #16
    4344:	f8c8 0004 	str.w	r0, [r8, #4]
    4348:	1c48      	adds	r0, r1, #1
    434a:	3210      	adds	r2, #16
    434c:	2807      	cmp	r0, #7
    434e:	920d      	str	r2, [sp, #52]	; 0x34
    4350:	f108 0808 	add.w	r8, r8, #8
    4354:	900c      	str	r0, [sp, #48]	; 0x30
    4356:	dd0b      	ble.n	4370 <_vfiprintf_r+0x5ac>
    4358:	4650      	mov	r0, sl
    435a:	4649      	mov	r1, r9
    435c:	aa0b      	add	r2, sp, #44	; 0x2c
    435e:	9300      	str	r3, [sp, #0]
    4360:	f7ff fcfc 	bl	3d5c <__sprint_r>
    4364:	9b00      	ldr	r3, [sp, #0]
    4366:	2800      	cmp	r0, #0
    4368:	f040 8131 	bne.w	45ce <_vfiprintf_r+0x80a>
    436c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    4370:	3b10      	subs	r3, #16
    4372:	e7df      	b.n	4334 <_vfiprintf_r+0x570>
    4374:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4376:	f8c8 3004 	str.w	r3, [r8, #4]
    437a:	18d1      	adds	r1, r2, r3
    437c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    437e:	910d      	str	r1, [sp, #52]	; 0x34
    4380:	1c58      	adds	r0, r3, #1
    4382:	2807      	cmp	r0, #7
    4384:	f108 0808 	add.w	r8, r8, #8
    4388:	900c      	str	r0, [sp, #48]	; 0x30
    438a:	dd09      	ble.n	43a0 <_vfiprintf_r+0x5dc>
    438c:	4650      	mov	r0, sl
    438e:	4649      	mov	r1, r9
    4390:	aa0b      	add	r2, sp, #44	; 0x2c
    4392:	f7ff fce3 	bl	3d5c <__sprint_r>
    4396:	2800      	cmp	r0, #0
    4398:	f040 8119 	bne.w	45ce <_vfiprintf_r+0x80a>
    439c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    43a0:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    43a4:	b1d2      	cbz	r2, 43dc <_vfiprintf_r+0x618>
    43a6:	f10d 0127 	add.w	r1, sp, #39	; 0x27
    43aa:	f8c8 1000 	str.w	r1, [r8]
    43ae:	990c      	ldr	r1, [sp, #48]	; 0x30
    43b0:	980d      	ldr	r0, [sp, #52]	; 0x34
    43b2:	2301      	movs	r3, #1
    43b4:	f8c8 3004 	str.w	r3, [r8, #4]
    43b8:	1c4b      	adds	r3, r1, #1
    43ba:	1c42      	adds	r2, r0, #1
    43bc:	2b07      	cmp	r3, #7
    43be:	920d      	str	r2, [sp, #52]	; 0x34
    43c0:	f108 0808 	add.w	r8, r8, #8
    43c4:	930c      	str	r3, [sp, #48]	; 0x30
    43c6:	dd09      	ble.n	43dc <_vfiprintf_r+0x618>
    43c8:	4650      	mov	r0, sl
    43ca:	4649      	mov	r1, r9
    43cc:	aa0b      	add	r2, sp, #44	; 0x2c
    43ce:	f7ff fcc5 	bl	3d5c <__sprint_r>
    43d2:	2800      	cmp	r0, #0
    43d4:	f040 80fb 	bne.w	45ce <_vfiprintf_r+0x80a>
    43d8:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    43dc:	9806      	ldr	r0, [sp, #24]
    43de:	b1c8      	cbz	r0, 4414 <_vfiprintf_r+0x650>
    43e0:	aa0a      	add	r2, sp, #40	; 0x28
    43e2:	f8c8 2000 	str.w	r2, [r8]
    43e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    43e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    43ea:	2102      	movs	r1, #2
    43ec:	f8c8 1004 	str.w	r1, [r8, #4]
    43f0:	1c51      	adds	r1, r2, #1
    43f2:	1c98      	adds	r0, r3, #2
    43f4:	2907      	cmp	r1, #7
    43f6:	900d      	str	r0, [sp, #52]	; 0x34
    43f8:	f108 0808 	add.w	r8, r8, #8
    43fc:	910c      	str	r1, [sp, #48]	; 0x30
    43fe:	dd09      	ble.n	4414 <_vfiprintf_r+0x650>
    4400:	4650      	mov	r0, sl
    4402:	4649      	mov	r1, r9
    4404:	aa0b      	add	r2, sp, #44	; 0x2c
    4406:	f7ff fca9 	bl	3d5c <__sprint_r>
    440a:	2800      	cmp	r0, #0
    440c:	f040 80df 	bne.w	45ce <_vfiprintf_r+0x80a>
    4410:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    4414:	9b07      	ldr	r3, [sp, #28]
    4416:	2b80      	cmp	r3, #128	; 0x80
    4418:	d13a      	bne.n	4490 <_vfiprintf_r+0x6cc>
    441a:	9804      	ldr	r0, [sp, #16]
    441c:	9a02      	ldr	r2, [sp, #8]
    441e:	1a83      	subs	r3, r0, r2
    4420:	2b00      	cmp	r3, #0
    4422:	dd35      	ble.n	4490 <_vfiprintf_r+0x6cc>
    4424:	4965      	ldr	r1, [pc, #404]	; (45bc <_vfiprintf_r+0x7f8>)
    4426:	2b10      	cmp	r3, #16
    4428:	f8c8 1000 	str.w	r1, [r8]
    442c:	dd1a      	ble.n	4464 <_vfiprintf_r+0x6a0>
    442e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4430:	980d      	ldr	r0, [sp, #52]	; 0x34
    4432:	2110      	movs	r1, #16
    4434:	f8c8 1004 	str.w	r1, [r8, #4]
    4438:	1c51      	adds	r1, r2, #1
    443a:	3010      	adds	r0, #16
    443c:	2907      	cmp	r1, #7
    443e:	900d      	str	r0, [sp, #52]	; 0x34
    4440:	f108 0808 	add.w	r8, r8, #8
    4444:	910c      	str	r1, [sp, #48]	; 0x30
    4446:	dd0b      	ble.n	4460 <_vfiprintf_r+0x69c>
    4448:	4650      	mov	r0, sl
    444a:	4649      	mov	r1, r9
    444c:	aa0b      	add	r2, sp, #44	; 0x2c
    444e:	9300      	str	r3, [sp, #0]
    4450:	f7ff fc84 	bl	3d5c <__sprint_r>
    4454:	9b00      	ldr	r3, [sp, #0]
    4456:	2800      	cmp	r0, #0
    4458:	f040 80b9 	bne.w	45ce <_vfiprintf_r+0x80a>
    445c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    4460:	3b10      	subs	r3, #16
    4462:	e7df      	b.n	4424 <_vfiprintf_r+0x660>
    4464:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4466:	980d      	ldr	r0, [sp, #52]	; 0x34
    4468:	f8c8 3004 	str.w	r3, [r8, #4]
    446c:	1c51      	adds	r1, r2, #1
    446e:	18c3      	adds	r3, r0, r3
    4470:	2907      	cmp	r1, #7
    4472:	930d      	str	r3, [sp, #52]	; 0x34
    4474:	f108 0808 	add.w	r8, r8, #8
    4478:	910c      	str	r1, [sp, #48]	; 0x30
    447a:	dd09      	ble.n	4490 <_vfiprintf_r+0x6cc>
    447c:	4650      	mov	r0, sl
    447e:	4649      	mov	r1, r9
    4480:	aa0b      	add	r2, sp, #44	; 0x2c
    4482:	f7ff fc6b 	bl	3d5c <__sprint_r>
    4486:	2800      	cmp	r0, #0
    4488:	f040 80a1 	bne.w	45ce <_vfiprintf_r+0x80a>
    448c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    4490:	1b2d      	subs	r5, r5, r4
    4492:	2d00      	cmp	r5, #0
    4494:	dd32      	ble.n	44fc <_vfiprintf_r+0x738>
    4496:	4849      	ldr	r0, [pc, #292]	; (45bc <_vfiprintf_r+0x7f8>)
    4498:	2d10      	cmp	r5, #16
    449a:	f8c8 0000 	str.w	r0, [r8]
    449e:	dd18      	ble.n	44d2 <_vfiprintf_r+0x70e>
    44a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    44a2:	980d      	ldr	r0, [sp, #52]	; 0x34
    44a4:	1c53      	adds	r3, r2, #1
    44a6:	2110      	movs	r1, #16
    44a8:	3010      	adds	r0, #16
    44aa:	2b07      	cmp	r3, #7
    44ac:	f8c8 1004 	str.w	r1, [r8, #4]
    44b0:	900d      	str	r0, [sp, #52]	; 0x34
    44b2:	f108 0808 	add.w	r8, r8, #8
    44b6:	930c      	str	r3, [sp, #48]	; 0x30
    44b8:	dd09      	ble.n	44ce <_vfiprintf_r+0x70a>
    44ba:	4650      	mov	r0, sl
    44bc:	4649      	mov	r1, r9
    44be:	aa0b      	add	r2, sp, #44	; 0x2c
    44c0:	f7ff fc4c 	bl	3d5c <__sprint_r>
    44c4:	2800      	cmp	r0, #0
    44c6:	f040 8082 	bne.w	45ce <_vfiprintf_r+0x80a>
    44ca:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    44ce:	3d10      	subs	r5, #16
    44d0:	e7e1      	b.n	4496 <_vfiprintf_r+0x6d2>
    44d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    44d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    44d6:	f8c8 5004 	str.w	r5, [r8, #4]
    44da:	1c51      	adds	r1, r2, #1
    44dc:	195d      	adds	r5, r3, r5
    44de:	2907      	cmp	r1, #7
    44e0:	950d      	str	r5, [sp, #52]	; 0x34
    44e2:	f108 0808 	add.w	r8, r8, #8
    44e6:	910c      	str	r1, [sp, #48]	; 0x30
    44e8:	dd08      	ble.n	44fc <_vfiprintf_r+0x738>
    44ea:	4650      	mov	r0, sl
    44ec:	4649      	mov	r1, r9
    44ee:	aa0b      	add	r2, sp, #44	; 0x2c
    44f0:	f7ff fc34 	bl	3d5c <__sprint_r>
    44f4:	2800      	cmp	r0, #0
    44f6:	d16a      	bne.n	45ce <_vfiprintf_r+0x80a>
    44f8:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    44fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    44fe:	980d      	ldr	r0, [sp, #52]	; 0x34
    4500:	f8c8 4004 	str.w	r4, [r8, #4]
    4504:	1c51      	adds	r1, r2, #1
    4506:	1904      	adds	r4, r0, r4
    4508:	2907      	cmp	r1, #7
    450a:	f8c8 b000 	str.w	fp, [r8]
    450e:	940d      	str	r4, [sp, #52]	; 0x34
    4510:	f108 0308 	add.w	r3, r8, #8
    4514:	910c      	str	r1, [sp, #48]	; 0x30
    4516:	dd07      	ble.n	4528 <_vfiprintf_r+0x764>
    4518:	4650      	mov	r0, sl
    451a:	4649      	mov	r1, r9
    451c:	aa0b      	add	r2, sp, #44	; 0x2c
    451e:	f7ff fc1d 	bl	3d5c <__sprint_r>
    4522:	2800      	cmp	r0, #0
    4524:	d153      	bne.n	45ce <_vfiprintf_r+0x80a>
    4526:	ab18      	add	r3, sp, #96	; 0x60
    4528:	077a      	lsls	r2, r7, #29
    452a:	d40b      	bmi.n	4544 <_vfiprintf_r+0x780>
    452c:	9b03      	ldr	r3, [sp, #12]
    452e:	9a02      	ldr	r2, [sp, #8]
    4530:	9904      	ldr	r1, [sp, #16]
    4532:	980d      	ldr	r0, [sp, #52]	; 0x34
    4534:	428a      	cmp	r2, r1
    4536:	bfac      	ite	ge
    4538:	189b      	addge	r3, r3, r2
    453a:	185b      	addlt	r3, r3, r1
    453c:	9303      	str	r3, [sp, #12]
    453e:	2800      	cmp	r0, #0
    4540:	d035      	beq.n	45ae <_vfiprintf_r+0x7ea>
    4542:	e02e      	b.n	45a2 <_vfiprintf_r+0x7de>
    4544:	9c04      	ldr	r4, [sp, #16]
    4546:	9802      	ldr	r0, [sp, #8]
    4548:	1a24      	subs	r4, r4, r0
    454a:	2c00      	cmp	r4, #0
    454c:	ddee      	ble.n	452c <_vfiprintf_r+0x768>
    454e:	4a1a      	ldr	r2, [pc, #104]	; (45b8 <_vfiprintf_r+0x7f4>)
    4550:	2c10      	cmp	r4, #16
    4552:	601a      	str	r2, [r3, #0]
    4554:	dd14      	ble.n	4580 <_vfiprintf_r+0x7bc>
    4556:	980c      	ldr	r0, [sp, #48]	; 0x30
    4558:	990d      	ldr	r1, [sp, #52]	; 0x34
    455a:	2210      	movs	r2, #16
    455c:	605a      	str	r2, [r3, #4]
    455e:	1c42      	adds	r2, r0, #1
    4560:	3110      	adds	r1, #16
    4562:	3308      	adds	r3, #8
    4564:	2a07      	cmp	r2, #7
    4566:	910d      	str	r1, [sp, #52]	; 0x34
    4568:	920c      	str	r2, [sp, #48]	; 0x30
    456a:	dd07      	ble.n	457c <_vfiprintf_r+0x7b8>
    456c:	4650      	mov	r0, sl
    456e:	4649      	mov	r1, r9
    4570:	aa0b      	add	r2, sp, #44	; 0x2c
    4572:	f7ff fbf3 	bl	3d5c <__sprint_r>
    4576:	2800      	cmp	r0, #0
    4578:	d129      	bne.n	45ce <_vfiprintf_r+0x80a>
    457a:	ab18      	add	r3, sp, #96	; 0x60
    457c:	3c10      	subs	r4, #16
    457e:	e7e6      	b.n	454e <_vfiprintf_r+0x78a>
    4580:	990c      	ldr	r1, [sp, #48]	; 0x30
    4582:	605c      	str	r4, [r3, #4]
    4584:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4586:	1c48      	adds	r0, r1, #1
    4588:	191c      	adds	r4, r3, r4
    458a:	2807      	cmp	r0, #7
    458c:	940d      	str	r4, [sp, #52]	; 0x34
    458e:	900c      	str	r0, [sp, #48]	; 0x30
    4590:	ddcc      	ble.n	452c <_vfiprintf_r+0x768>
    4592:	4650      	mov	r0, sl
    4594:	4649      	mov	r1, r9
    4596:	aa0b      	add	r2, sp, #44	; 0x2c
    4598:	f7ff fbe0 	bl	3d5c <__sprint_r>
    459c:	2800      	cmp	r0, #0
    459e:	d0c5      	beq.n	452c <_vfiprintf_r+0x768>
    45a0:	e015      	b.n	45ce <_vfiprintf_r+0x80a>
    45a2:	4650      	mov	r0, sl
    45a4:	4649      	mov	r1, r9
    45a6:	aa0b      	add	r2, sp, #44	; 0x2c
    45a8:	f7ff fbd8 	bl	3d5c <__sprint_r>
    45ac:	b978      	cbnz	r0, 45ce <_vfiprintf_r+0x80a>
    45ae:	2500      	movs	r5, #0
    45b0:	950c      	str	r5, [sp, #48]	; 0x30
    45b2:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    45b6:	e451      	b.n	3e5c <_vfiprintf_r+0x98>
    45b8:	00007698 	.word	0x00007698
    45bc:	000076a8 	.word	0x000076a8
    45c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    45c2:	b122      	cbz	r2, 45ce <_vfiprintf_r+0x80a>
    45c4:	4650      	mov	r0, sl
    45c6:	4649      	mov	r1, r9
    45c8:	aa0b      	add	r2, sp, #44	; 0x2c
    45ca:	f7ff fbc7 	bl	3d5c <__sprint_r>
    45ce:	f8b9 100c 	ldrh.w	r1, [r9, #12]
    45d2:	f001 0040 	and.w	r0, r1, #64	; 0x40
    45d6:	b203      	sxth	r3, r0
    45d8:	2b00      	cmp	r3, #0
    45da:	f47f ac26 	bne.w	3e2a <_vfiprintf_r+0x66>
    45de:	9803      	ldr	r0, [sp, #12]
    45e0:	b029      	add	sp, #164	; 0xa4
    45e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000045e6 <__sbprintf>:
    45e6:	b570      	push	{r4, r5, r6, lr}
    45e8:	460c      	mov	r4, r1
    45ea:	8989      	ldrh	r1, [r1, #12]
    45ec:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
    45f0:	f021 0502 	bic.w	r5, r1, #2
    45f4:	6e61      	ldr	r1, [r4, #100]	; 0x64
    45f6:	f8ad 500c 	strh.w	r5, [sp, #12]
    45fa:	9119      	str	r1, [sp, #100]	; 0x64
    45fc:	89e5      	ldrh	r5, [r4, #14]
    45fe:	69e1      	ldr	r1, [r4, #28]
    4600:	f8ad 500e 	strh.w	r5, [sp, #14]
    4604:	9107      	str	r1, [sp, #28]
    4606:	6a65      	ldr	r5, [r4, #36]	; 0x24
    4608:	a91a      	add	r1, sp, #104	; 0x68
    460a:	9100      	str	r1, [sp, #0]
    460c:	9104      	str	r1, [sp, #16]
    460e:	2100      	movs	r1, #0
    4610:	9509      	str	r5, [sp, #36]	; 0x24
    4612:	9106      	str	r1, [sp, #24]
    4614:	f44f 6580 	mov.w	r5, #1024	; 0x400
    4618:	4669      	mov	r1, sp
    461a:	9502      	str	r5, [sp, #8]
    461c:	9505      	str	r5, [sp, #20]
    461e:	4606      	mov	r6, r0
    4620:	f7ff fbd0 	bl	3dc4 <_vfiprintf_r>
    4624:	1e05      	subs	r5, r0, #0
    4626:	db07      	blt.n	4638 <__sbprintf+0x52>
    4628:	4630      	mov	r0, r6
    462a:	4669      	mov	r1, sp
    462c:	f000 fc9c 	bl	4f68 <_fflush_r>
    4630:	2800      	cmp	r0, #0
    4632:	bf18      	it	ne
    4634:	f04f 35ff 	movne.w	r5, #4294967295
    4638:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    463c:	f003 0040 	and.w	r0, r3, #64	; 0x40
    4640:	b202      	sxth	r2, r0
    4642:	b11a      	cbz	r2, 464c <__sbprintf+0x66>
    4644:	89a1      	ldrh	r1, [r4, #12]
    4646:	f041 0340 	orr.w	r3, r1, #64	; 0x40
    464a:	81a3      	strh	r3, [r4, #12]
    464c:	4628      	mov	r0, r5
    464e:	b01a      	add	sp, #104	; 0x68
    4650:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
    4654:	bd70      	pop	{r4, r5, r6, pc}

00004656 <vfiprintf>:
    4656:	b530      	push	{r4, r5, lr}
    4658:	4613      	mov	r3, r2
    465a:	4a05      	ldr	r2, [pc, #20]	; (4670 <vfiprintf+0x1a>)
    465c:	4605      	mov	r5, r0
    465e:	460c      	mov	r4, r1
    4660:	6810      	ldr	r0, [r2, #0]
    4662:	4629      	mov	r1, r5
    4664:	4622      	mov	r2, r4
    4666:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    466a:	f7ff bbab 	b.w	3dc4 <_vfiprintf_r>
    466e:	bf00      	nop
    4670:	20000050 	.word	0x20000050

00004674 <__svfscanf_r>:
    4674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4678:	460c      	mov	r4, r1
    467a:	b0d9      	sub	sp, #356	; 0x164
    467c:	4680      	mov	r8, r0
    467e:	4616      	mov	r6, r2
    4680:	461d      	mov	r5, r3
    4682:	f000 fdc9 	bl	5218 <__sfp_lock_acquire>
    4686:	89a3      	ldrh	r3, [r4, #12]
    4688:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
    468c:	b210      	sxth	r0, r2
    468e:	b930      	cbnz	r0, 469e <__svfscanf_r+0x2a>
    4690:	6e67      	ldr	r7, [r4, #100]	; 0x64
    4692:	f443 5100 	orr.w	r1, r3, #8192	; 0x2000
    4696:	f427 5300 	bic.w	r3, r7, #8192	; 0x2000
    469a:	81a1      	strh	r1, [r4, #12]
    469c:	6663      	str	r3, [r4, #100]	; 0x64
    469e:	9607      	str	r6, [sp, #28]
    46a0:	2600      	movs	r6, #0
    46a2:	9605      	str	r6, [sp, #20]
    46a4:	9602      	str	r6, [sp, #8]
    46a6:	9604      	str	r6, [sp, #16]
    46a8:	9f07      	ldr	r7, [sp, #28]
    46aa:	f817 2b01 	ldrb.w	r2, [r7], #1
    46ae:	9707      	str	r7, [sp, #28]
    46b0:	9209      	str	r2, [sp, #36]	; 0x24
    46b2:	2a00      	cmp	r2, #0
    46b4:	f000 83ab 	beq.w	4e0e <__svfscanf_r+0x79a>
    46b8:	489f      	ldr	r0, [pc, #636]	; (4938 <__svfscanf_r+0x2c4>)
    46ba:	6801      	ldr	r1, [r0, #0]
    46bc:	188f      	adds	r7, r1, r2
    46be:	f897 b001 	ldrb.w	fp, [r7, #1]
    46c2:	f00b 0b08 	and.w	fp, fp, #8
    46c6:	fa5f f38b 	uxtb.w	r3, fp
    46ca:	b1db      	cbz	r3, 4704 <__svfscanf_r+0x90>
    46cc:	6867      	ldr	r7, [r4, #4]
    46ce:	2f00      	cmp	r7, #0
    46d0:	dd11      	ble.n	46f6 <__svfscanf_r+0x82>
    46d2:	4999      	ldr	r1, [pc, #612]	; (4938 <__svfscanf_r+0x2c4>)
    46d4:	6823      	ldr	r3, [r4, #0]
    46d6:	6808      	ldr	r0, [r1, #0]
    46d8:	781a      	ldrb	r2, [r3, #0]
    46da:	1887      	adds	r7, r0, r2
    46dc:	787a      	ldrb	r2, [r7, #1]
    46de:	f002 0108 	and.w	r1, r2, #8
    46e2:	b2c8      	uxtb	r0, r1
    46e4:	2800      	cmp	r0, #0
    46e6:	d0df      	beq.n	46a8 <__svfscanf_r+0x34>
    46e8:	6867      	ldr	r7, [r4, #4]
    46ea:	3301      	adds	r3, #1
    46ec:	1e7a      	subs	r2, r7, #1
    46ee:	3601      	adds	r6, #1
    46f0:	6062      	str	r2, [r4, #4]
    46f2:	6023      	str	r3, [r4, #0]
    46f4:	e7ea      	b.n	46cc <__svfscanf_r+0x58>
    46f6:	4640      	mov	r0, r8
    46f8:	4621      	mov	r1, r4
    46fa:	f001 fdf4 	bl	62e6 <__srefill_r>
    46fe:	2800      	cmp	r0, #0
    4700:	d0e7      	beq.n	46d2 <__svfscanf_r+0x5e>
    4702:	e7d1      	b.n	46a8 <__svfscanf_r+0x34>
    4704:	2a25      	cmp	r2, #37	; 0x25
    4706:	d151      	bne.n	47ac <__svfscanf_r+0x138>
    4708:	9a07      	ldr	r2, [sp, #28]
    470a:	469b      	mov	fp, r3
    470c:	469a      	mov	sl, r3
    470e:	9f07      	ldr	r7, [sp, #28]
    4710:	f817 0b01 	ldrb.w	r0, [r7], #1
    4714:	2864      	cmp	r0, #100	; 0x64
    4716:	9707      	str	r7, [sp, #28]
    4718:	f000 80be 	beq.w	4898 <__svfscanf_r+0x224>
    471c:	d827      	bhi.n	476e <__svfscanf_r+0xfa>
    471e:	284c      	cmp	r0, #76	; 0x4c
    4720:	d069      	beq.n	47f6 <__svfscanf_r+0x182>
    4722:	d811      	bhi.n	4748 <__svfscanf_r+0xd4>
    4724:	2839      	cmp	r0, #57	; 0x39
    4726:	d80b      	bhi.n	4740 <__svfscanf_r+0xcc>
    4728:	2830      	cmp	r0, #48	; 0x30
    472a:	d267      	bcs.n	47fc <__svfscanf_r+0x188>
    472c:	2825      	cmp	r0, #37	; 0x25
    472e:	d03d      	beq.n	47ac <__svfscanf_r+0x138>
    4730:	282a      	cmp	r0, #42	; 0x2a
    4732:	d054      	beq.n	47de <__svfscanf_r+0x16a>
    4734:	2800      	cmp	r0, #0
    4736:	f040 80a2 	bne.w	487e <__svfscanf_r+0x20a>
    473a:	f000 fd6e 	bl	521a <__sfp_lock_release>
    473e:	e35c      	b.n	4dfa <__svfscanf_r+0x786>
    4740:	2844      	cmp	r0, #68	; 0x44
    4742:	f040 809c 	bne.w	487e <__svfscanf_r+0x20a>
    4746:	e0a0      	b.n	488a <__svfscanf_r+0x216>
    4748:	2858      	cmp	r0, #88	; 0x58
    474a:	d063      	beq.n	4814 <__svfscanf_r+0x1a0>
    474c:	d805      	bhi.n	475a <__svfscanf_r+0xe6>
    474e:	284f      	cmp	r0, #79	; 0x4f
    4750:	f040 8095 	bne.w	487e <__svfscanf_r+0x20a>
    4754:	f04b 0b01 	orr.w	fp, fp, #1
    4758:	e056      	b.n	4808 <__svfscanf_r+0x194>
    475a:	285b      	cmp	r0, #91	; 0x5b
    475c:	d060      	beq.n	4820 <__svfscanf_r+0x1ac>
    475e:	2863      	cmp	r0, #99	; 0x63
    4760:	f040 808d 	bne.w	487e <__svfscanf_r+0x20a>
    4764:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
    4768:	f04f 0900 	mov.w	r9, #0
    476c:	e09a      	b.n	48a4 <__svfscanf_r+0x230>
    476e:	286f      	cmp	r0, #111	; 0x6f
    4770:	d04a      	beq.n	4808 <__svfscanf_r+0x194>
    4772:	d80e      	bhi.n	4792 <__svfscanf_r+0x11e>
    4774:	2869      	cmp	r0, #105	; 0x69
    4776:	f000 808b 	beq.w	4890 <__svfscanf_r+0x21c>
    477a:	d805      	bhi.n	4788 <__svfscanf_r+0x114>
    477c:	2868      	cmp	r0, #104	; 0x68
    477e:	d17e      	bne.n	487e <__svfscanf_r+0x20a>
    4780:	f04b 0b04 	orr.w	fp, fp, #4
    4784:	9a07      	ldr	r2, [sp, #28]
    4786:	e7c2      	b.n	470e <__svfscanf_r+0x9a>
    4788:	286c      	cmp	r0, #108	; 0x6c
    478a:	d02b      	beq.n	47e4 <__svfscanf_r+0x170>
    478c:	286e      	cmp	r0, #110	; 0x6e
    478e:	d176      	bne.n	487e <__svfscanf_r+0x20a>
    4790:	e054      	b.n	483c <__svfscanf_r+0x1c8>
    4792:	2873      	cmp	r0, #115	; 0x73
    4794:	d041      	beq.n	481a <__svfscanf_r+0x1a6>
    4796:	d804      	bhi.n	47a2 <__svfscanf_r+0x12e>
    4798:	2870      	cmp	r0, #112	; 0x70
    479a:	d170      	bne.n	487e <__svfscanf_r+0x20a>
    479c:	f44b 7b08 	orr.w	fp, fp, #544	; 0x220
    47a0:	e048      	b.n	4834 <__svfscanf_r+0x1c0>
    47a2:	2875      	cmp	r0, #117	; 0x75
    47a4:	d034      	beq.n	4810 <__svfscanf_r+0x19c>
    47a6:	2878      	cmp	r0, #120	; 0x78
    47a8:	d169      	bne.n	487e <__svfscanf_r+0x20a>
    47aa:	e033      	b.n	4814 <__svfscanf_r+0x1a0>
    47ac:	6867      	ldr	r7, [r4, #4]
    47ae:	2f00      	cmp	r7, #0
    47b0:	dd0e      	ble.n	47d0 <__svfscanf_r+0x15c>
    47b2:	6823      	ldr	r3, [r4, #0]
    47b4:	9f07      	ldr	r7, [sp, #28]
    47b6:	7819      	ldrb	r1, [r3, #0]
    47b8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    47bc:	4291      	cmp	r1, r2
    47be:	f040 8326 	bne.w	4e0e <__svfscanf_r+0x79a>
    47c2:	6860      	ldr	r0, [r4, #4]
    47c4:	3301      	adds	r3, #1
    47c6:	1e47      	subs	r7, r0, #1
    47c8:	6067      	str	r7, [r4, #4]
    47ca:	6023      	str	r3, [r4, #0]
    47cc:	3601      	adds	r6, #1
    47ce:	e76b      	b.n	46a8 <__svfscanf_r+0x34>
    47d0:	4640      	mov	r0, r8
    47d2:	4621      	mov	r1, r4
    47d4:	f001 fd87 	bl	62e6 <__srefill_r>
    47d8:	2800      	cmp	r0, #0
    47da:	d0ea      	beq.n	47b2 <__svfscanf_r+0x13e>
    47dc:	e309      	b.n	4df2 <__svfscanf_r+0x77e>
    47de:	f04b 0b10 	orr.w	fp, fp, #16
    47e2:	e7cf      	b.n	4784 <__svfscanf_r+0x110>
    47e4:	7853      	ldrb	r3, [r2, #1]
    47e6:	2b6c      	cmp	r3, #108	; 0x6c
    47e8:	d102      	bne.n	47f0 <__svfscanf_r+0x17c>
    47ea:	3202      	adds	r2, #2
    47ec:	9207      	str	r2, [sp, #28]
    47ee:	e002      	b.n	47f6 <__svfscanf_r+0x182>
    47f0:	f04b 0b01 	orr.w	fp, fp, #1
    47f4:	e7c6      	b.n	4784 <__svfscanf_r+0x110>
    47f6:	f04b 0b02 	orr.w	fp, fp, #2
    47fa:	e7c3      	b.n	4784 <__svfscanf_r+0x110>
    47fc:	220a      	movs	r2, #10
    47fe:	fb02 0a0a 	mla	sl, r2, sl, r0
    4802:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
    4806:	e7bd      	b.n	4784 <__svfscanf_r+0x110>
    4808:	484c      	ldr	r0, [pc, #304]	; (493c <__svfscanf_r+0x2c8>)
    480a:	2708      	movs	r7, #8
    480c:	9005      	str	r0, [sp, #20]
    480e:	e046      	b.n	489e <__svfscanf_r+0x22a>
    4810:	4f4a      	ldr	r7, [pc, #296]	; (493c <__svfscanf_r+0x2c8>)
    4812:	e042      	b.n	489a <__svfscanf_r+0x226>
    4814:	f44b 7b00 	orr.w	fp, fp, #512	; 0x200
    4818:	e00c      	b.n	4834 <__svfscanf_r+0x1c0>
    481a:	f04f 0902 	mov.w	r9, #2
    481e:	e041      	b.n	48a4 <__svfscanf_r+0x230>
    4820:	a818      	add	r0, sp, #96	; 0x60
    4822:	9907      	ldr	r1, [sp, #28]
    4824:	f001 fde8 	bl	63f8 <__sccl>
    4828:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
    482c:	9007      	str	r0, [sp, #28]
    482e:	f04f 0901 	mov.w	r9, #1
    4832:	e037      	b.n	48a4 <__svfscanf_r+0x230>
    4834:	4a41      	ldr	r2, [pc, #260]	; (493c <__svfscanf_r+0x2c8>)
    4836:	2710      	movs	r7, #16
    4838:	9205      	str	r2, [sp, #20]
    483a:	e030      	b.n	489e <__svfscanf_r+0x22a>
    483c:	f01b 0f10 	tst.w	fp, #16
    4840:	f47f af32 	bne.w	46a8 <__svfscanf_r+0x34>
    4844:	f01b 0f04 	tst.w	fp, #4
    4848:	f105 0104 	add.w	r1, r5, #4
    484c:	d002      	beq.n	4854 <__svfscanf_r+0x1e0>
    484e:	682d      	ldr	r5, [r5, #0]
    4850:	802e      	strh	r6, [r5, #0]
    4852:	e004      	b.n	485e <__svfscanf_r+0x1ea>
    4854:	f01b 0f01 	tst.w	fp, #1
    4858:	d003      	beq.n	4862 <__svfscanf_r+0x1ee>
    485a:	682f      	ldr	r7, [r5, #0]
    485c:	603e      	str	r6, [r7, #0]
    485e:	460d      	mov	r5, r1
    4860:	e722      	b.n	46a8 <__svfscanf_r+0x34>
    4862:	f01b 0f02 	tst.w	fp, #2
    4866:	f105 0704 	add.w	r7, r5, #4
    486a:	d004      	beq.n	4876 <__svfscanf_r+0x202>
    486c:	682a      	ldr	r2, [r5, #0]
    486e:	17f0      	asrs	r0, r6, #31
    4870:	6016      	str	r6, [r2, #0]
    4872:	6050      	str	r0, [r2, #4]
    4874:	e001      	b.n	487a <__svfscanf_r+0x206>
    4876:	682d      	ldr	r5, [r5, #0]
    4878:	602e      	str	r6, [r5, #0]
    487a:	463d      	mov	r5, r7
    487c:	e714      	b.n	46a8 <__svfscanf_r+0x34>
    487e:	180f      	adds	r7, r1, r0
    4880:	787b      	ldrb	r3, [r7, #1]
    4882:	f003 0103 	and.w	r1, r3, #3
    4886:	2901      	cmp	r1, #1
    4888:	d106      	bne.n	4898 <__svfscanf_r+0x224>
    488a:	f04b 0b01 	orr.w	fp, fp, #1
    488e:	e003      	b.n	4898 <__svfscanf_r+0x224>
    4890:	482b      	ldr	r0, [pc, #172]	; (4940 <__svfscanf_r+0x2cc>)
    4892:	2700      	movs	r7, #0
    4894:	9005      	str	r0, [sp, #20]
    4896:	e002      	b.n	489e <__svfscanf_r+0x22a>
    4898:	4f29      	ldr	r7, [pc, #164]	; (4940 <__svfscanf_r+0x2cc>)
    489a:	9705      	str	r7, [sp, #20]
    489c:	270a      	movs	r7, #10
    489e:	9702      	str	r7, [sp, #8]
    48a0:	f04f 0903 	mov.w	r9, #3
    48a4:	6863      	ldr	r3, [r4, #4]
    48a6:	2b00      	cmp	r3, #0
    48a8:	dd03      	ble.n	48b2 <__svfscanf_r+0x23e>
    48aa:	f01b 0f40 	tst.w	fp, #64	; 0x40
    48ae:	d122      	bne.n	48f6 <__svfscanf_r+0x282>
    48b0:	e00e      	b.n	48d0 <__svfscanf_r+0x25c>
    48b2:	4640      	mov	r0, r8
    48b4:	4621      	mov	r1, r4
    48b6:	f001 fd16 	bl	62e6 <__srefill_r>
    48ba:	2800      	cmp	r0, #0
    48bc:	d0f5      	beq.n	48aa <__svfscanf_r+0x236>
    48be:	e298      	b.n	4df2 <__svfscanf_r+0x77e>
    48c0:	6863      	ldr	r3, [r4, #4]
    48c2:	1e5a      	subs	r2, r3, #1
    48c4:	3601      	adds	r6, #1
    48c6:	2a00      	cmp	r2, #0
    48c8:	6062      	str	r2, [r4, #4]
    48ca:	dd0d      	ble.n	48e8 <__svfscanf_r+0x274>
    48cc:	3001      	adds	r0, #1
    48ce:	6020      	str	r0, [r4, #0]
    48d0:	4919      	ldr	r1, [pc, #100]	; (4938 <__svfscanf_r+0x2c4>)
    48d2:	6820      	ldr	r0, [r4, #0]
    48d4:	680b      	ldr	r3, [r1, #0]
    48d6:	7802      	ldrb	r2, [r0, #0]
    48d8:	189a      	adds	r2, r3, r2
    48da:	7851      	ldrb	r1, [r2, #1]
    48dc:	f001 0308 	and.w	r3, r1, #8
    48e0:	b2da      	uxtb	r2, r3
    48e2:	2a00      	cmp	r2, #0
    48e4:	d1ec      	bne.n	48c0 <__svfscanf_r+0x24c>
    48e6:	e006      	b.n	48f6 <__svfscanf_r+0x282>
    48e8:	4640      	mov	r0, r8
    48ea:	4621      	mov	r1, r4
    48ec:	f001 fcfb 	bl	62e6 <__srefill_r>
    48f0:	2800      	cmp	r0, #0
    48f2:	d0ed      	beq.n	48d0 <__svfscanf_r+0x25c>
    48f4:	e27d      	b.n	4df2 <__svfscanf_r+0x77e>
    48f6:	f1b9 0f02 	cmp.w	r9, #2
    48fa:	f000 80e6 	beq.w	4aca <__svfscanf_r+0x456>
    48fe:	f1b9 0f03 	cmp.w	r9, #3
    4902:	f000 81aa 	beq.w	4c5a <__svfscanf_r+0x5e6>
    4906:	f1b9 0f01 	cmp.w	r9, #1
    490a:	f000 808a 	beq.w	4a22 <__svfscanf_r+0x3ae>
    490e:	f1ba 0f00 	cmp.w	sl, #0
    4912:	bf08      	it	eq
    4914:	f04f 0a01 	moveq.w	sl, #1
    4918:	f01b 0901 	ands.w	r9, fp, #1
    491c:	d054      	beq.n	49c8 <__svfscanf_r+0x354>
    491e:	2100      	movs	r1, #0
    4920:	2208      	movs	r2, #8
    4922:	a80a      	add	r0, sp, #40	; 0x28
    4924:	f7ff f932 	bl	3b8c <memset>
    4928:	f01b 0710 	ands.w	r7, fp, #16
    492c:	d10a      	bne.n	4944 <__svfscanf_r+0x2d0>
    492e:	f8d5 9000 	ldr.w	r9, [r5]
    4932:	3504      	adds	r5, #4
    4934:	e008      	b.n	4948 <__svfscanf_r+0x2d4>
    4936:	bf00      	nop
    4938:	20000480 	.word	0x20000480
    493c:	000067b5 	.word	0x000067b5
    4940:	000064fd 	.word	0x000064fd
    4944:	f04f 0900 	mov.w	r9, #0
    4948:	f04f 0b00 	mov.w	fp, #0
    494c:	f001 f824 	bl	5998 <__locale_mb_cur_max>
    4950:	4583      	cmp	fp, r0
    4952:	f000 824e 	beq.w	4df2 <__svfscanf_r+0x77e>
    4956:	6820      	ldr	r0, [r4, #0]
    4958:	6863      	ldr	r3, [r4, #4]
    495a:	f810 1b01 	ldrb.w	r1, [r0], #1
    495e:	aa0e      	add	r2, sp, #56	; 0x38
    4960:	6020      	str	r0, [r4, #0]
    4962:	f802 100b 	strb.w	r1, [r2, fp]
    4966:	a80a      	add	r0, sp, #40	; 0x28
    4968:	1e59      	subs	r1, r3, #1
    496a:	f10b 0b01 	add.w	fp, fp, #1
    496e:	6061      	str	r1, [r4, #4]
    4970:	9000      	str	r0, [sp, #0]
    4972:	4649      	mov	r1, r9
    4974:	4640      	mov	r0, r8
    4976:	465b      	mov	r3, fp
    4978:	f001 faaa 	bl	5ed0 <_mbrtowc_r>
    497c:	1c42      	adds	r2, r0, #1
    497e:	f000 8238 	beq.w	4df2 <__svfscanf_r+0x77e>
    4982:	b918      	cbnz	r0, 498c <__svfscanf_r+0x318>
    4984:	b927      	cbnz	r7, 4990 <__svfscanf_r+0x31c>
    4986:	f8c9 7000 	str.w	r7, [r9]
    498a:	e001      	b.n	4990 <__svfscanf_r+0x31c>
    498c:	3002      	adds	r0, #2
    498e:	d007      	beq.n	49a0 <__svfscanf_r+0x32c>
    4990:	445e      	add	r6, fp
    4992:	f10a 3aff 	add.w	sl, sl, #4294967295
    4996:	b90f      	cbnz	r7, 499c <__svfscanf_r+0x328>
    4998:	f109 0904 	add.w	r9, r9, #4
    499c:	f04f 0b00 	mov.w	fp, #0
    49a0:	6862      	ldr	r2, [r4, #4]
    49a2:	2a00      	cmp	r2, #0
    49a4:	dc0c      	bgt.n	49c0 <__svfscanf_r+0x34c>
    49a6:	4640      	mov	r0, r8
    49a8:	4621      	mov	r1, r4
    49aa:	f001 fc9c 	bl	62e6 <__srefill_r>
    49ae:	b138      	cbz	r0, 49c0 <__svfscanf_r+0x34c>
    49b0:	f1bb 0f00 	cmp.w	fp, #0
    49b4:	f040 821d 	bne.w	4df2 <__svfscanf_r+0x77e>
    49b8:	2f00      	cmp	r7, #0
    49ba:	f000 80fa 	beq.w	4bb2 <__svfscanf_r+0x53e>
    49be:	e673      	b.n	46a8 <__svfscanf_r+0x34>
    49c0:	f1ba 0f00 	cmp.w	sl, #0
    49c4:	d1c2      	bne.n	494c <__svfscanf_r+0x2d8>
    49c6:	e7f7      	b.n	49b8 <__svfscanf_r+0x344>
    49c8:	f01b 0f10 	tst.w	fp, #16
    49cc:	d01b      	beq.n	4a06 <__svfscanf_r+0x392>
    49ce:	6867      	ldr	r7, [r4, #4]
    49d0:	6820      	ldr	r0, [r4, #0]
    49d2:	4557      	cmp	r7, sl
    49d4:	da0f      	bge.n	49f6 <__svfscanf_r+0x382>
    49d6:	19c2      	adds	r2, r0, r7
    49d8:	6022      	str	r2, [r4, #0]
    49da:	4640      	mov	r0, r8
    49dc:	4621      	mov	r1, r4
    49de:	44b9      	add	r9, r7
    49e0:	ebc7 0a0a 	rsb	sl, r7, sl
    49e4:	f001 fc7f 	bl	62e6 <__srefill_r>
    49e8:	2800      	cmp	r0, #0
    49ea:	d0f0      	beq.n	49ce <__svfscanf_r+0x35a>
    49ec:	f1b9 0f00 	cmp.w	r9, #0
    49f0:	f040 81fd 	bne.w	4dee <__svfscanf_r+0x77a>
    49f4:	e1fd      	b.n	4df2 <__svfscanf_r+0x77e>
    49f6:	ebca 0107 	rsb	r1, sl, r7
    49fa:	eb00 030a 	add.w	r3, r0, sl
    49fe:	44d1      	add	r9, sl
    4a00:	6061      	str	r1, [r4, #4]
    4a02:	6023      	str	r3, [r4, #0]
    4a04:	e1f3      	b.n	4dee <__svfscanf_r+0x77a>
    4a06:	9400      	str	r4, [sp, #0]
    4a08:	4640      	mov	r0, r8
    4a0a:	6829      	ldr	r1, [r5, #0]
    4a0c:	2201      	movs	r2, #1
    4a0e:	4653      	mov	r3, sl
    4a10:	f105 0904 	add.w	r9, r5, #4
    4a14:	f000 fc8c 	bl	5330 <_fread_r>
    4a18:	2800      	cmp	r0, #0
    4a1a:	f000 81ea 	beq.w	4df2 <__svfscanf_r+0x77e>
    4a1e:	1986      	adds	r6, r0, r6
    4a20:	e116      	b.n	4c50 <__svfscanf_r+0x5dc>
    4a22:	f1ba 0f00 	cmp.w	sl, #0
    4a26:	bf08      	it	eq
    4a28:	f04f 3aff 	moveq.w	sl, #4294967295
    4a2c:	f01b 0f10 	tst.w	fp, #16
    4a30:	d01e      	beq.n	4a70 <__svfscanf_r+0x3fc>
    4a32:	f04f 0900 	mov.w	r9, #0
    4a36:	6823      	ldr	r3, [r4, #0]
    4a38:	a818      	add	r0, sp, #96	; 0x60
    4a3a:	781a      	ldrb	r2, [r3, #0]
    4a3c:	5c81      	ldrb	r1, [r0, r2]
    4a3e:	b191      	cbz	r1, 4a66 <__svfscanf_r+0x3f2>
    4a40:	6862      	ldr	r2, [r4, #4]
    4a42:	f109 0901 	add.w	r9, r9, #1
    4a46:	1e50      	subs	r0, r2, #1
    4a48:	3301      	adds	r3, #1
    4a4a:	45ca      	cmp	sl, r9
    4a4c:	6060      	str	r0, [r4, #4]
    4a4e:	6023      	str	r3, [r4, #0]
    4a50:	f000 81cd 	beq.w	4dee <__svfscanf_r+0x77a>
    4a54:	2800      	cmp	r0, #0
    4a56:	dcee      	bgt.n	4a36 <__svfscanf_r+0x3c2>
    4a58:	4640      	mov	r0, r8
    4a5a:	4621      	mov	r1, r4
    4a5c:	f001 fc43 	bl	62e6 <__srefill_r>
    4a60:	2800      	cmp	r0, #0
    4a62:	d0e8      	beq.n	4a36 <__svfscanf_r+0x3c2>
    4a64:	e1c3      	b.n	4dee <__svfscanf_r+0x77a>
    4a66:	f1b9 0f00 	cmp.w	r9, #0
    4a6a:	f040 81c0 	bne.w	4dee <__svfscanf_r+0x77a>
    4a6e:	e1ce      	b.n	4e0e <__svfscanf_r+0x79a>
    4a70:	f8d5 9000 	ldr.w	r9, [r5]
    4a74:	f105 0b04 	add.w	fp, r5, #4
    4a78:	464d      	mov	r5, r9
    4a7a:	6823      	ldr	r3, [r4, #0]
    4a7c:	a918      	add	r1, sp, #96	; 0x60
    4a7e:	7818      	ldrb	r0, [r3, #0]
    4a80:	5c0a      	ldrb	r2, [r1, r0]
    4a82:	b1ba      	cbz	r2, 4ab4 <__svfscanf_r+0x440>
    4a84:	6860      	ldr	r0, [r4, #4]
    4a86:	1e41      	subs	r1, r0, #1
    4a88:	6061      	str	r1, [r4, #4]
    4a8a:	f813 2b01 	ldrb.w	r2, [r3], #1
    4a8e:	f805 2b01 	strb.w	r2, [r5], #1
    4a92:	6023      	str	r3, [r4, #0]
    4a94:	eb09 030a 	add.w	r3, r9, sl
    4a98:	42ab      	cmp	r3, r5
    4a9a:	d00b      	beq.n	4ab4 <__svfscanf_r+0x440>
    4a9c:	6860      	ldr	r0, [r4, #4]
    4a9e:	2800      	cmp	r0, #0
    4aa0:	dceb      	bgt.n	4a7a <__svfscanf_r+0x406>
    4aa2:	4640      	mov	r0, r8
    4aa4:	4621      	mov	r1, r4
    4aa6:	f001 fc1e 	bl	62e6 <__srefill_r>
    4aaa:	2800      	cmp	r0, #0
    4aac:	d0e5      	beq.n	4a7a <__svfscanf_r+0x406>
    4aae:	454d      	cmp	r5, r9
    4ab0:	f000 819f 	beq.w	4df2 <__svfscanf_r+0x77e>
    4ab4:	ebb5 0909 	subs.w	r9, r5, r9
    4ab8:	f000 81a9 	beq.w	4e0e <__svfscanf_r+0x79a>
    4abc:	2700      	movs	r7, #0
    4abe:	702f      	strb	r7, [r5, #0]
    4ac0:	9d04      	ldr	r5, [sp, #16]
    4ac2:	1c69      	adds	r1, r5, #1
    4ac4:	9104      	str	r1, [sp, #16]
    4ac6:	465d      	mov	r5, fp
    4ac8:	e191      	b.n	4dee <__svfscanf_r+0x77a>
    4aca:	f1ba 0f00 	cmp.w	sl, #0
    4ace:	bf08      	it	eq
    4ad0:	f04f 3aff 	moveq.w	sl, #4294967295
    4ad4:	f01b 0901 	ands.w	r9, fp, #1
    4ad8:	d06f      	beq.n	4bba <__svfscanf_r+0x546>
    4ada:	2100      	movs	r1, #0
    4adc:	2208      	movs	r2, #8
    4ade:	a80c      	add	r0, sp, #48	; 0x30
    4ae0:	f7ff f854 	bl	3b8c <memset>
    4ae4:	f01b 0710 	ands.w	r7, fp, #16
    4ae8:	d103      	bne.n	4af2 <__svfscanf_r+0x47e>
    4aea:	f8d5 9000 	ldr.w	r9, [r5]
    4aee:	3504      	adds	r5, #4
    4af0:	e001      	b.n	4af6 <__svfscanf_r+0x482>
    4af2:	f10d 0924 	add.w	r9, sp, #36	; 0x24
    4af6:	f04f 0b00 	mov.w	fp, #0
    4afa:	6822      	ldr	r2, [r4, #0]
    4afc:	4990      	ldr	r1, [pc, #576]	; (4d40 <__svfscanf_r+0x6cc>)
    4afe:	7813      	ldrb	r3, [r2, #0]
    4b00:	6808      	ldr	r0, [r1, #0]
    4b02:	18c2      	adds	r2, r0, r3
    4b04:	7853      	ldrb	r3, [r2, #1]
    4b06:	f003 0108 	and.w	r1, r3, #8
    4b0a:	b2c8      	uxtb	r0, r1
    4b0c:	2800      	cmp	r0, #0
    4b0e:	d14b      	bne.n	4ba8 <__svfscanf_r+0x534>
    4b10:	f1ba 0f00 	cmp.w	sl, #0
    4b14:	d048      	beq.n	4ba8 <__svfscanf_r+0x534>
    4b16:	f000 ff3f 	bl	5998 <__locale_mb_cur_max>
    4b1a:	4583      	cmp	fp, r0
    4b1c:	f000 8169 	beq.w	4df2 <__svfscanf_r+0x77e>
    4b20:	6823      	ldr	r3, [r4, #0]
    4b22:	6860      	ldr	r0, [r4, #4]
    4b24:	f813 1b01 	ldrb.w	r1, [r3], #1
    4b28:	aa0e      	add	r2, sp, #56	; 0x38
    4b2a:	6023      	str	r3, [r4, #0]
    4b2c:	f802 100b 	strb.w	r1, [r2, fp]
    4b30:	ab0c      	add	r3, sp, #48	; 0x30
    4b32:	1e41      	subs	r1, r0, #1
    4b34:	f10b 0b01 	add.w	fp, fp, #1
    4b38:	6061      	str	r1, [r4, #4]
    4b3a:	9300      	str	r3, [sp, #0]
    4b3c:	4640      	mov	r0, r8
    4b3e:	465b      	mov	r3, fp
    4b40:	4649      	mov	r1, r9
    4b42:	f001 f9c5 	bl	5ed0 <_mbrtowc_r>
    4b46:	1c43      	adds	r3, r0, #1
    4b48:	f000 8153 	beq.w	4df2 <__svfscanf_r+0x77e>
    4b4c:	b910      	cbnz	r0, 4b54 <__svfscanf_r+0x4e0>
    4b4e:	f8c9 0000 	str.w	r0, [r9]
    4b52:	e001      	b.n	4b58 <__svfscanf_r+0x4e4>
    4b54:	3002      	adds	r0, #2
    4b56:	d01a      	beq.n	4b8e <__svfscanf_r+0x51a>
    4b58:	f8d9 0000 	ldr.w	r0, [r9]
    4b5c:	f000 fee8 	bl	5930 <iswspace>
    4b60:	b160      	cbz	r0, 4b7c <__svfscanf_r+0x508>
    4b62:	f1bb 0f00 	cmp.w	fp, #0
    4b66:	d01f      	beq.n	4ba8 <__svfscanf_r+0x534>
    4b68:	f10b 3bff 	add.w	fp, fp, #4294967295
    4b6c:	a90e      	add	r1, sp, #56	; 0x38
    4b6e:	4640      	mov	r0, r8
    4b70:	f811 100b 	ldrb.w	r1, [r1, fp]
    4b74:	4622      	mov	r2, r4
    4b76:	f001 ff94 	bl	6aa2 <_ungetc_r>
    4b7a:	e7f2      	b.n	4b62 <__svfscanf_r+0x4ee>
    4b7c:	445e      	add	r6, fp
    4b7e:	f10a 3aff 	add.w	sl, sl, #4294967295
    4b82:	b91f      	cbnz	r7, 4b8c <__svfscanf_r+0x518>
    4b84:	f109 0904 	add.w	r9, r9, #4
    4b88:	46bb      	mov	fp, r7
    4b8a:	e000      	b.n	4b8e <__svfscanf_r+0x51a>
    4b8c:	4683      	mov	fp, r0
    4b8e:	6862      	ldr	r2, [r4, #4]
    4b90:	2a00      	cmp	r2, #0
    4b92:	dcb2      	bgt.n	4afa <__svfscanf_r+0x486>
    4b94:	4640      	mov	r0, r8
    4b96:	4621      	mov	r1, r4
    4b98:	f001 fba5 	bl	62e6 <__srefill_r>
    4b9c:	2800      	cmp	r0, #0
    4b9e:	d0ac      	beq.n	4afa <__svfscanf_r+0x486>
    4ba0:	f1bb 0f00 	cmp.w	fp, #0
    4ba4:	f040 8125 	bne.w	4df2 <__svfscanf_r+0x77e>
    4ba8:	2f00      	cmp	r7, #0
    4baa:	f47f ad7d 	bne.w	46a8 <__svfscanf_r+0x34>
    4bae:	f8c9 7000 	str.w	r7, [r9]
    4bb2:	9f04      	ldr	r7, [sp, #16]
    4bb4:	1c78      	adds	r0, r7, #1
    4bb6:	9004      	str	r0, [sp, #16]
    4bb8:	e576      	b.n	46a8 <__svfscanf_r+0x34>
    4bba:	f01b 0f10 	tst.w	fp, #16
    4bbe:	d01e      	beq.n	4bfe <__svfscanf_r+0x58a>
    4bc0:	4a5f      	ldr	r2, [pc, #380]	; (4d40 <__svfscanf_r+0x6cc>)
    4bc2:	6820      	ldr	r0, [r4, #0]
    4bc4:	6813      	ldr	r3, [r2, #0]
    4bc6:	7807      	ldrb	r7, [r0, #0]
    4bc8:	19d9      	adds	r1, r3, r7
    4bca:	784f      	ldrb	r7, [r1, #1]
    4bcc:	f007 0208 	and.w	r2, r7, #8
    4bd0:	b2d3      	uxtb	r3, r2
    4bd2:	2b00      	cmp	r3, #0
    4bd4:	f040 810b 	bne.w	4dee <__svfscanf_r+0x77a>
    4bd8:	6861      	ldr	r1, [r4, #4]
    4bda:	f109 0901 	add.w	r9, r9, #1
    4bde:	1e4f      	subs	r7, r1, #1
    4be0:	3001      	adds	r0, #1
    4be2:	45ca      	cmp	sl, r9
    4be4:	6067      	str	r7, [r4, #4]
    4be6:	6020      	str	r0, [r4, #0]
    4be8:	f000 8101 	beq.w	4dee <__svfscanf_r+0x77a>
    4bec:	2f00      	cmp	r7, #0
    4bee:	dce7      	bgt.n	4bc0 <__svfscanf_r+0x54c>
    4bf0:	4640      	mov	r0, r8
    4bf2:	4621      	mov	r1, r4
    4bf4:	f001 fb77 	bl	62e6 <__srefill_r>
    4bf8:	2800      	cmp	r0, #0
    4bfa:	d0e1      	beq.n	4bc0 <__svfscanf_r+0x54c>
    4bfc:	e0f7      	b.n	4dee <__svfscanf_r+0x77a>
    4bfe:	f8d5 b000 	ldr.w	fp, [r5]
    4c02:	f105 0904 	add.w	r9, r5, #4
    4c06:	465d      	mov	r5, fp
    4c08:	494d      	ldr	r1, [pc, #308]	; (4d40 <__svfscanf_r+0x6cc>)
    4c0a:	6820      	ldr	r0, [r4, #0]
    4c0c:	680f      	ldr	r7, [r1, #0]
    4c0e:	7803      	ldrb	r3, [r0, #0]
    4c10:	18fa      	adds	r2, r7, r3
    4c12:	7853      	ldrb	r3, [r2, #1]
    4c14:	f003 0108 	and.w	r1, r3, #8
    4c18:	b2cf      	uxtb	r7, r1
    4c1a:	b9a7      	cbnz	r7, 4c46 <__svfscanf_r+0x5d2>
    4c1c:	6862      	ldr	r2, [r4, #4]
    4c1e:	1e53      	subs	r3, r2, #1
    4c20:	6063      	str	r3, [r4, #4]
    4c22:	f810 1b01 	ldrb.w	r1, [r0], #1
    4c26:	f805 1b01 	strb.w	r1, [r5], #1
    4c2a:	6020      	str	r0, [r4, #0]
    4c2c:	eb0b 000a 	add.w	r0, fp, sl
    4c30:	42a8      	cmp	r0, r5
    4c32:	d008      	beq.n	4c46 <__svfscanf_r+0x5d2>
    4c34:	6867      	ldr	r7, [r4, #4]
    4c36:	2f00      	cmp	r7, #0
    4c38:	dce6      	bgt.n	4c08 <__svfscanf_r+0x594>
    4c3a:	4640      	mov	r0, r8
    4c3c:	4621      	mov	r1, r4
    4c3e:	f001 fb52 	bl	62e6 <__srefill_r>
    4c42:	2800      	cmp	r0, #0
    4c44:	d0e0      	beq.n	4c08 <__svfscanf_r+0x594>
    4c46:	2200      	movs	r2, #0
    4c48:	702a      	strb	r2, [r5, #0]
    4c4a:	ebcb 0505 	rsb	r5, fp, r5
    4c4e:	1976      	adds	r6, r6, r5
    4c50:	9b04      	ldr	r3, [sp, #16]
    4c52:	1c59      	adds	r1, r3, #1
    4c54:	9104      	str	r1, [sp, #16]
    4c56:	464d      	mov	r5, r9
    4c58:	e526      	b.n	46a8 <__svfscanf_r+0x34>
    4c5a:	f10a 33ff 	add.w	r3, sl, #4294967295
    4c5e:	2b26      	cmp	r3, #38	; 0x26
    4c60:	bf86      	itte	hi
    4c62:	f1aa 0327 	subhi.w	r3, sl, #39	; 0x27
    4c66:	f04f 0a27 	movhi.w	sl, #39	; 0x27
    4c6a:	2300      	movls	r3, #0
    4c6c:	2700      	movs	r7, #0
    4c6e:	f44b 6b58 	orr.w	fp, fp, #3456	; 0xd80
    4c72:	9706      	str	r7, [sp, #24]
    4c74:	f10d 0938 	add.w	r9, sp, #56	; 0x38
    4c78:	6821      	ldr	r1, [r4, #0]
    4c7a:	780a      	ldrb	r2, [r1, #0]
    4c7c:	2a39      	cmp	r2, #57	; 0x39
    4c7e:	d809      	bhi.n	4c94 <__svfscanf_r+0x620>
    4c80:	2a38      	cmp	r2, #56	; 0x38
    4c82:	d235      	bcs.n	4cf0 <__svfscanf_r+0x67c>
    4c84:	2a30      	cmp	r2, #48	; 0x30
    4c86:	d014      	beq.n	4cb2 <__svfscanf_r+0x63e>
    4c88:	d82c      	bhi.n	4ce4 <__svfscanf_r+0x670>
    4c8a:	2a2b      	cmp	r2, #43	; 0x2b
    4c8c:	d03d      	beq.n	4d0a <__svfscanf_r+0x696>
    4c8e:	2a2d      	cmp	r2, #45	; 0x2d
    4c90:	d164      	bne.n	4d5c <__svfscanf_r+0x6e8>
    4c92:	e03a      	b.n	4d0a <__svfscanf_r+0x696>
    4c94:	2a58      	cmp	r2, #88	; 0x58
    4c96:	d03e      	beq.n	4d16 <__svfscanf_r+0x6a2>
    4c98:	d804      	bhi.n	4ca4 <__svfscanf_r+0x630>
    4c9a:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
    4c9e:	2805      	cmp	r0, #5
    4ca0:	d85c      	bhi.n	4d5c <__svfscanf_r+0x6e8>
    4ca2:	e02c      	b.n	4cfe <__svfscanf_r+0x68a>
    4ca4:	2a61      	cmp	r2, #97	; 0x61
    4ca6:	d359      	bcc.n	4d5c <__svfscanf_r+0x6e8>
    4ca8:	2a66      	cmp	r2, #102	; 0x66
    4caa:	d928      	bls.n	4cfe <__svfscanf_r+0x68a>
    4cac:	2a78      	cmp	r2, #120	; 0x78
    4cae:	d155      	bne.n	4d5c <__svfscanf_r+0x6e8>
    4cb0:	e031      	b.n	4d16 <__svfscanf_r+0x6a2>
    4cb2:	f41b 6f00 	tst.w	fp, #2048	; 0x800
    4cb6:	d039      	beq.n	4d2c <__svfscanf_r+0x6b8>
    4cb8:	9f02      	ldr	r7, [sp, #8]
    4cba:	b91f      	cbnz	r7, 4cc4 <__svfscanf_r+0x650>
    4cbc:	2708      	movs	r7, #8
    4cbe:	f44b 7b00 	orr.w	fp, fp, #512	; 0x200
    4cc2:	9702      	str	r7, [sp, #8]
    4cc4:	f41b 6f80 	tst.w	fp, #1024	; 0x400
    4cc8:	d002      	beq.n	4cd0 <__svfscanf_r+0x65c>
    4cca:	f42b 6bb0 	bic.w	fp, fp, #1408	; 0x580
    4cce:	e02d      	b.n	4d2c <__svfscanf_r+0x6b8>
    4cd0:	f42b 7b60 	bic.w	fp, fp, #896	; 0x380
    4cd4:	b113      	cbz	r3, 4cdc <__svfscanf_r+0x668>
    4cd6:	3b01      	subs	r3, #1
    4cd8:	f10a 0a01 	add.w	sl, sl, #1
    4cdc:	9f06      	ldr	r7, [sp, #24]
    4cde:	3701      	adds	r7, #1
    4ce0:	9706      	str	r7, [sp, #24]
    4ce2:	e025      	b.n	4d30 <__svfscanf_r+0x6bc>
    4ce4:	9f02      	ldr	r7, [sp, #8]
    4ce6:	4817      	ldr	r0, [pc, #92]	; (4d44 <__svfscanf_r+0x6d0>)
    4ce8:	f930 0017 	ldrsh.w	r0, [r0, r7, lsl #1]
    4cec:	9002      	str	r0, [sp, #8]
    4cee:	e009      	b.n	4d04 <__svfscanf_r+0x690>
    4cf0:	9f02      	ldr	r7, [sp, #8]
    4cf2:	4814      	ldr	r0, [pc, #80]	; (4d44 <__svfscanf_r+0x6d0>)
    4cf4:	f930 0017 	ldrsh.w	r0, [r0, r7, lsl #1]
    4cf8:	9002      	str	r0, [sp, #8]
    4cfa:	2808      	cmp	r0, #8
    4cfc:	e001      	b.n	4d02 <__svfscanf_r+0x68e>
    4cfe:	9f02      	ldr	r7, [sp, #8]
    4d00:	2f0a      	cmp	r7, #10
    4d02:	dd2b      	ble.n	4d5c <__svfscanf_r+0x6e8>
    4d04:	f42b 6b38 	bic.w	fp, fp, #2944	; 0xb80
    4d08:	e010      	b.n	4d2c <__svfscanf_r+0x6b8>
    4d0a:	f01b 0f80 	tst.w	fp, #128	; 0x80
    4d0e:	d025      	beq.n	4d5c <__svfscanf_r+0x6e8>
    4d10:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    4d14:	e00a      	b.n	4d2c <__svfscanf_r+0x6b8>
    4d16:	f40b 60c0 	and.w	r0, fp, #1536	; 0x600
    4d1a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    4d1e:	d11d      	bne.n	4d5c <__svfscanf_r+0x6e8>
    4d20:	f42b 7c00 	bic.w	ip, fp, #512	; 0x200
    4d24:	2710      	movs	r7, #16
    4d26:	f44c 6ba0 	orr.w	fp, ip, #1280	; 0x500
    4d2a:	9702      	str	r7, [sp, #8]
    4d2c:	f809 2b01 	strb.w	r2, [r9], #1
    4d30:	6862      	ldr	r2, [r4, #4]
    4d32:	1e50      	subs	r0, r2, #1
    4d34:	2800      	cmp	r0, #0
    4d36:	6060      	str	r0, [r4, #4]
    4d38:	dd06      	ble.n	4d48 <__svfscanf_r+0x6d4>
    4d3a:	3101      	adds	r1, #1
    4d3c:	6021      	str	r1, [r4, #0]
    4d3e:	e00a      	b.n	4d56 <__svfscanf_r+0x6e2>
    4d40:	20000480 	.word	0x20000480
    4d44:	000076da 	.word	0x000076da
    4d48:	4640      	mov	r0, r8
    4d4a:	4621      	mov	r1, r4
    4d4c:	9303      	str	r3, [sp, #12]
    4d4e:	f001 faca 	bl	62e6 <__srefill_r>
    4d52:	9b03      	ldr	r3, [sp, #12]
    4d54:	b910      	cbnz	r0, 4d5c <__svfscanf_r+0x6e8>
    4d56:	f1ba 0a01 	subs.w	sl, sl, #1
    4d5a:	d18d      	bne.n	4c78 <__svfscanf_r+0x604>
    4d5c:	f41b 7f80 	tst.w	fp, #256	; 0x100
    4d60:	d00e      	beq.n	4d80 <__svfscanf_r+0x70c>
    4d62:	aa0e      	add	r2, sp, #56	; 0x38
    4d64:	4591      	cmp	r9, r2
    4d66:	d908      	bls.n	4d7a <__svfscanf_r+0x706>
    4d68:	f819 1c01 	ldrb.w	r1, [r9, #-1]
    4d6c:	4640      	mov	r0, r8
    4d6e:	4622      	mov	r2, r4
    4d70:	f001 fe97 	bl	6aa2 <_ungetc_r>
    4d74:	f109 3aff 	add.w	sl, r9, #4294967295
    4d78:	46d1      	mov	r9, sl
    4d7a:	a80e      	add	r0, sp, #56	; 0x38
    4d7c:	4581      	cmp	r9, r0
    4d7e:	d046      	beq.n	4e0e <__svfscanf_r+0x79a>
    4d80:	f01b 0210 	ands.w	r2, fp, #16
    4d84:	d12e      	bne.n	4de4 <__svfscanf_r+0x770>
    4d86:	9b02      	ldr	r3, [sp, #8]
    4d88:	9f05      	ldr	r7, [sp, #20]
    4d8a:	f889 2000 	strb.w	r2, [r9]
    4d8e:	4640      	mov	r0, r8
    4d90:	a90e      	add	r1, sp, #56	; 0x38
    4d92:	47b8      	blx	r7
    4d94:	f01b 0f20 	tst.w	fp, #32
    4d98:	f105 0304 	add.w	r3, r5, #4
    4d9c:	d11c      	bne.n	4dd8 <__svfscanf_r+0x764>
    4d9e:	f01b 0f04 	tst.w	fp, #4
    4da2:	d002      	beq.n	4daa <__svfscanf_r+0x736>
    4da4:	682d      	ldr	r5, [r5, #0]
    4da6:	8028      	strh	r0, [r5, #0]
    4da8:	e018      	b.n	4ddc <__svfscanf_r+0x768>
    4daa:	f01b 0201 	ands.w	r2, fp, #1
    4dae:	d113      	bne.n	4dd8 <__svfscanf_r+0x764>
    4db0:	f01b 0f02 	tst.w	fp, #2
    4db4:	d010      	beq.n	4dd8 <__svfscanf_r+0x764>
    4db6:	4b19      	ldr	r3, [pc, #100]	; (4e1c <__svfscanf_r+0x7a8>)
    4db8:	9f05      	ldr	r7, [sp, #20]
    4dba:	429f      	cmp	r7, r3
    4dbc:	4640      	mov	r0, r8
    4dbe:	a90e      	add	r1, sp, #56	; 0x38
    4dc0:	9b02      	ldr	r3, [sp, #8]
    4dc2:	d102      	bne.n	4dca <__svfscanf_r+0x756>
    4dc4:	f001 fd82 	bl	68cc <_strtoull_r>
    4dc8:	e001      	b.n	4dce <__svfscanf_r+0x75a>
    4dca:	f001 fc2b 	bl	6624 <_strtoll_r>
    4dce:	682a      	ldr	r2, [r5, #0]
    4dd0:	3504      	adds	r5, #4
    4dd2:	e882 0003 	stmia.w	r2, {r0, r1}
    4dd6:	e002      	b.n	4dde <__svfscanf_r+0x76a>
    4dd8:	6829      	ldr	r1, [r5, #0]
    4dda:	6008      	str	r0, [r1, #0]
    4ddc:	461d      	mov	r5, r3
    4dde:	9804      	ldr	r0, [sp, #16]
    4de0:	1c43      	adds	r3, r0, #1
    4de2:	9304      	str	r3, [sp, #16]
    4de4:	af0e      	add	r7, sp, #56	; 0x38
    4de6:	9a06      	ldr	r2, [sp, #24]
    4de8:	ebc7 0909 	rsb	r9, r7, r9
    4dec:	4491      	add	r9, r2
    4dee:	444e      	add	r6, r9
    4df0:	e45a      	b.n	46a8 <__svfscanf_r+0x34>
    4df2:	f000 fa12 	bl	521a <__sfp_lock_release>
    4df6:	9f04      	ldr	r7, [sp, #16]
    4df8:	b91f      	cbnz	r7, 4e02 <__svfscanf_r+0x78e>
    4dfa:	f04f 37ff 	mov.w	r7, #4294967295
    4dfe:	9704      	str	r7, [sp, #16]
    4e00:	e007      	b.n	4e12 <__svfscanf_r+0x79e>
    4e02:	89a1      	ldrh	r1, [r4, #12]
    4e04:	f001 0240 	and.w	r2, r1, #64	; 0x40
    4e08:	b210      	sxth	r0, r2
    4e0a:	b110      	cbz	r0, 4e12 <__svfscanf_r+0x79e>
    4e0c:	e7f5      	b.n	4dfa <__svfscanf_r+0x786>
    4e0e:	f000 fa04 	bl	521a <__sfp_lock_release>
    4e12:	9804      	ldr	r0, [sp, #16]
    4e14:	b059      	add	sp, #356	; 0x164
    4e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4e1a:	bf00      	nop
    4e1c:	000067b5 	.word	0x000067b5

00004e20 <_vfscanf_r>:
    4e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e24:	4688      	mov	r8, r1
    4e26:	4617      	mov	r7, r2
    4e28:	461e      	mov	r6, r3
    4e2a:	4604      	mov	r4, r0
    4e2c:	b118      	cbz	r0, 4e36 <_vfscanf_r+0x16>
    4e2e:	6b85      	ldr	r5, [r0, #56]	; 0x38
    4e30:	b90d      	cbnz	r5, 4e36 <_vfscanf_r+0x16>
    4e32:	f000 f98d 	bl	5150 <__sinit>
    4e36:	4620      	mov	r0, r4
    4e38:	4641      	mov	r1, r8
    4e3a:	463a      	mov	r2, r7
    4e3c:	4633      	mov	r3, r6
    4e3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4e42:	f7ff bc17 	b.w	4674 <__svfscanf_r>

00004e46 <__svfscanf>:
    4e46:	b530      	push	{r4, r5, lr}
    4e48:	4613      	mov	r3, r2
    4e4a:	4a05      	ldr	r2, [pc, #20]	; (4e60 <__svfscanf+0x1a>)
    4e4c:	4605      	mov	r5, r0
    4e4e:	460c      	mov	r4, r1
    4e50:	6810      	ldr	r0, [r2, #0]
    4e52:	4629      	mov	r1, r5
    4e54:	4622      	mov	r2, r4
    4e56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    4e5a:	f7ff bc0b 	b.w	4674 <__svfscanf_r>
    4e5e:	bf00      	nop
    4e60:	20000050 	.word	0x20000050

00004e64 <vfscanf>:
    4e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e68:	4c08      	ldr	r4, [pc, #32]	; (4e8c <vfscanf+0x28>)
    4e6a:	4680      	mov	r8, r0
    4e6c:	6820      	ldr	r0, [r4, #0]
    4e6e:	460f      	mov	r7, r1
    4e70:	4616      	mov	r6, r2
    4e72:	b118      	cbz	r0, 4e7c <vfscanf+0x18>
    4e74:	6b85      	ldr	r5, [r0, #56]	; 0x38
    4e76:	b90d      	cbnz	r5, 4e7c <vfscanf+0x18>
    4e78:	f000 f96a 	bl	5150 <__sinit>
    4e7c:	6820      	ldr	r0, [r4, #0]
    4e7e:	4641      	mov	r1, r8
    4e80:	463a      	mov	r2, r7
    4e82:	4633      	mov	r3, r6
    4e84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4e88:	f7ff bbf4 	b.w	4674 <__svfscanf_r>
    4e8c:	20000050 	.word	0x20000050

00004e90 <__swsetup_r>:
    4e90:	b538      	push	{r3, r4, r5, lr}
    4e92:	4b2c      	ldr	r3, [pc, #176]	; (4f44 <__swsetup_r+0xb4>)
    4e94:	4605      	mov	r5, r0
    4e96:	6818      	ldr	r0, [r3, #0]
    4e98:	460c      	mov	r4, r1
    4e9a:	b118      	cbz	r0, 4ea4 <__swsetup_r+0x14>
    4e9c:	6b82      	ldr	r2, [r0, #56]	; 0x38
    4e9e:	b90a      	cbnz	r2, 4ea4 <__swsetup_r+0x14>
    4ea0:	f000 f956 	bl	5150 <__sinit>
    4ea4:	89a0      	ldrh	r0, [r4, #12]
    4ea6:	f000 0108 	and.w	r1, r0, #8
    4eaa:	b20b      	sxth	r3, r1
    4eac:	bb0b      	cbnz	r3, 4ef2 <__swsetup_r+0x62>
    4eae:	f000 0210 	and.w	r2, r0, #16
    4eb2:	b211      	sxth	r1, r2
    4eb4:	b911      	cbnz	r1, 4ebc <__swsetup_r+0x2c>
    4eb6:	f04f 30ff 	mov.w	r0, #4294967295
    4eba:	bd38      	pop	{r3, r4, r5, pc}
    4ebc:	f000 0004 	and.w	r0, r0, #4
    4ec0:	b203      	sxth	r3, r0
    4ec2:	b193      	cbz	r3, 4eea <__swsetup_r+0x5a>
    4ec4:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4ec6:	b141      	cbz	r1, 4eda <__swsetup_r+0x4a>
    4ec8:	f104 0240 	add.w	r2, r4, #64	; 0x40
    4ecc:	4291      	cmp	r1, r2
    4ece:	d002      	beq.n	4ed6 <__swsetup_r+0x46>
    4ed0:	4628      	mov	r0, r5
    4ed2:	f000 fad9 	bl	5488 <_free_r>
    4ed6:	2100      	movs	r1, #0
    4ed8:	6321      	str	r1, [r4, #48]	; 0x30
    4eda:	89a0      	ldrh	r0, [r4, #12]
    4edc:	6921      	ldr	r1, [r4, #16]
    4ede:	f020 0324 	bic.w	r3, r0, #36	; 0x24
    4ee2:	2200      	movs	r2, #0
    4ee4:	81a3      	strh	r3, [r4, #12]
    4ee6:	6062      	str	r2, [r4, #4]
    4ee8:	6021      	str	r1, [r4, #0]
    4eea:	89a0      	ldrh	r0, [r4, #12]
    4eec:	f040 0308 	orr.w	r3, r0, #8
    4ef0:	81a3      	strh	r3, [r4, #12]
    4ef2:	6922      	ldr	r2, [r4, #16]
    4ef4:	b94a      	cbnz	r2, 4f0a <__swsetup_r+0x7a>
    4ef6:	89a1      	ldrh	r1, [r4, #12]
    4ef8:	f401 7020 	and.w	r0, r1, #640	; 0x280
    4efc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    4f00:	d003      	beq.n	4f0a <__swsetup_r+0x7a>
    4f02:	4628      	mov	r0, r5
    4f04:	4621      	mov	r1, r4
    4f06:	f000 fd65 	bl	59d4 <__smakebuf_r>
    4f0a:	89a3      	ldrh	r3, [r4, #12]
    4f0c:	f013 0201 	ands.w	r2, r3, #1
    4f10:	d005      	beq.n	4f1e <__swsetup_r+0x8e>
    4f12:	6961      	ldr	r1, [r4, #20]
    4f14:	2200      	movs	r2, #0
    4f16:	4248      	negs	r0, r1
    4f18:	60a2      	str	r2, [r4, #8]
    4f1a:	61a0      	str	r0, [r4, #24]
    4f1c:	e007      	b.n	4f2e <__swsetup_r+0x9e>
    4f1e:	f003 0102 	and.w	r1, r3, #2
    4f22:	b208      	sxth	r0, r1
    4f24:	b908      	cbnz	r0, 4f2a <__swsetup_r+0x9a>
    4f26:	6963      	ldr	r3, [r4, #20]
    4f28:	e000      	b.n	4f2c <__swsetup_r+0x9c>
    4f2a:	4613      	mov	r3, r2
    4f2c:	60a3      	str	r3, [r4, #8]
    4f2e:	6923      	ldr	r3, [r4, #16]
    4f30:	b933      	cbnz	r3, 4f40 <__swsetup_r+0xb0>
    4f32:	89a2      	ldrh	r2, [r4, #12]
    4f34:	f002 0180 	and.w	r1, r2, #128	; 0x80
    4f38:	b208      	sxth	r0, r1
    4f3a:	2800      	cmp	r0, #0
    4f3c:	d1bb      	bne.n	4eb6 <__swsetup_r+0x26>
    4f3e:	bd38      	pop	{r3, r4, r5, pc}
    4f40:	2000      	movs	r0, #0
    4f42:	bd38      	pop	{r3, r4, r5, pc}
    4f44:	20000050 	.word	0x20000050

00004f48 <register_fini>:
    4f48:	4b02      	ldr	r3, [pc, #8]	; (4f54 <register_fini+0xc>)
    4f4a:	b113      	cbz	r3, 4f52 <register_fini+0xa>
    4f4c:	4802      	ldr	r0, [pc, #8]	; (4f58 <register_fini+0x10>)
    4f4e:	f000 b805 	b.w	4f5c <atexit>
    4f52:	4770      	bx	lr
    4f54:	00000000 	.word	0x00000000
    4f58:	00003ad5 	.word	0x00003ad5

00004f5c <atexit>:
    4f5c:	4601      	mov	r1, r0
    4f5e:	2000      	movs	r0, #0
    4f60:	4602      	mov	r2, r0
    4f62:	4603      	mov	r3, r0
    4f64:	f7fe bd68 	b.w	3a38 <__register_exitproc>

00004f68 <_fflush_r>:
    4f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f6c:	460c      	mov	r4, r1
    4f6e:	4605      	mov	r5, r0
    4f70:	b118      	cbz	r0, 4f7a <_fflush_r+0x12>
    4f72:	6b83      	ldr	r3, [r0, #56]	; 0x38
    4f74:	b90b      	cbnz	r3, 4f7a <_fflush_r+0x12>
    4f76:	f000 f8eb 	bl	5150 <__sinit>
    4f7a:	89a2      	ldrh	r2, [r4, #12]
    4f7c:	b332      	cbz	r2, 4fcc <_fflush_r+0x64>
    4f7e:	f002 0008 	and.w	r0, r2, #8
    4f82:	b201      	sxth	r1, r0
    4f84:	2900      	cmp	r1, #0
    4f86:	d162      	bne.n	504e <_fflush_r+0xe6>
    4f88:	6861      	ldr	r1, [r4, #4]
    4f8a:	f442 6000 	orr.w	r0, r2, #2048	; 0x800
    4f8e:	2900      	cmp	r1, #0
    4f90:	81a0      	strh	r0, [r4, #12]
    4f92:	dc02      	bgt.n	4f9a <_fflush_r+0x32>
    4f94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4f96:	2b00      	cmp	r3, #0
    4f98:	dd18      	ble.n	4fcc <_fflush_r+0x64>
    4f9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4f9c:	b1b6      	cbz	r6, 4fcc <_fflush_r+0x64>
    4f9e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    4fa2:	2000      	movs	r0, #0
    4fa4:	b212      	sxth	r2, r2
    4fa6:	682f      	ldr	r7, [r5, #0]
    4fa8:	6028      	str	r0, [r5, #0]
    4faa:	b10a      	cbz	r2, 4fb0 <_fflush_r+0x48>
    4fac:	6d22      	ldr	r2, [r4, #80]	; 0x50
    4fae:	e010      	b.n	4fd2 <_fflush_r+0x6a>
    4fb0:	2301      	movs	r3, #1
    4fb2:	4628      	mov	r0, r5
    4fb4:	69e1      	ldr	r1, [r4, #28]
    4fb6:	47b0      	blx	r6
    4fb8:	4602      	mov	r2, r0
    4fba:	3001      	adds	r0, #1
    4fbc:	d109      	bne.n	4fd2 <_fflush_r+0x6a>
    4fbe:	6829      	ldr	r1, [r5, #0]
    4fc0:	b139      	cbz	r1, 4fd2 <_fflush_r+0x6a>
    4fc2:	291d      	cmp	r1, #29
    4fc4:	d001      	beq.n	4fca <_fflush_r+0x62>
    4fc6:	2916      	cmp	r1, #22
    4fc8:	d14f      	bne.n	506a <_fflush_r+0x102>
    4fca:	602f      	str	r7, [r5, #0]
    4fcc:	2000      	movs	r0, #0
    4fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4fd2:	89a6      	ldrh	r6, [r4, #12]
    4fd4:	f006 0104 	and.w	r1, r6, #4
    4fd8:	b20b      	sxth	r3, r1
    4fda:	b12b      	cbz	r3, 4fe8 <_fflush_r+0x80>
    4fdc:	6860      	ldr	r0, [r4, #4]
    4fde:	6b26      	ldr	r6, [r4, #48]	; 0x30
    4fe0:	1a12      	subs	r2, r2, r0
    4fe2:	b10e      	cbz	r6, 4fe8 <_fflush_r+0x80>
    4fe4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    4fe6:	1a52      	subs	r2, r2, r1
    4fe8:	69e1      	ldr	r1, [r4, #28]
    4fea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4fec:	2300      	movs	r3, #0
    4fee:	4628      	mov	r0, r5
    4ff0:	47b0      	blx	r6
    4ff2:	1c41      	adds	r1, r0, #1
    4ff4:	d105      	bne.n	5002 <_fflush_r+0x9a>
    4ff6:	682a      	ldr	r2, [r5, #0]
    4ff8:	b11a      	cbz	r2, 5002 <_fflush_r+0x9a>
    4ffa:	2a1d      	cmp	r2, #29
    4ffc:	d001      	beq.n	5002 <_fflush_r+0x9a>
    4ffe:	2a16      	cmp	r2, #22
    5000:	d11f      	bne.n	5042 <_fflush_r+0xda>
    5002:	89a3      	ldrh	r3, [r4, #12]
    5004:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
    5008:	2100      	movs	r1, #0
    500a:	81a2      	strh	r2, [r4, #12]
    500c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    5010:	6922      	ldr	r2, [r4, #16]
    5012:	6061      	str	r1, [r4, #4]
    5014:	b219      	sxth	r1, r3
    5016:	6022      	str	r2, [r4, #0]
    5018:	b121      	cbz	r1, 5024 <_fflush_r+0xbc>
    501a:	1c42      	adds	r2, r0, #1
    501c:	d101      	bne.n	5022 <_fflush_r+0xba>
    501e:	682a      	ldr	r2, [r5, #0]
    5020:	b902      	cbnz	r2, 5024 <_fflush_r+0xbc>
    5022:	6520      	str	r0, [r4, #80]	; 0x50
    5024:	6b21      	ldr	r1, [r4, #48]	; 0x30
    5026:	602f      	str	r7, [r5, #0]
    5028:	2900      	cmp	r1, #0
    502a:	d0cf      	beq.n	4fcc <_fflush_r+0x64>
    502c:	f104 0040 	add.w	r0, r4, #64	; 0x40
    5030:	4281      	cmp	r1, r0
    5032:	d002      	beq.n	503a <_fflush_r+0xd2>
    5034:	4628      	mov	r0, r5
    5036:	f000 fa27 	bl	5488 <_free_r>
    503a:	2000      	movs	r0, #0
    503c:	6320      	str	r0, [r4, #48]	; 0x30
    503e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5042:	89a3      	ldrh	r3, [r4, #12]
    5044:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    5048:	81a1      	strh	r1, [r4, #12]
    504a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    504e:	6926      	ldr	r6, [r4, #16]
    5050:	2e00      	cmp	r6, #0
    5052:	d0bb      	beq.n	4fcc <_fflush_r+0x64>
    5054:	0792      	lsls	r2, r2, #30
    5056:	6823      	ldr	r3, [r4, #0]
    5058:	bf08      	it	eq
    505a:	6962      	ldreq	r2, [r4, #20]
    505c:	6026      	str	r6, [r4, #0]
    505e:	bf18      	it	ne
    5060:	2200      	movne	r2, #0
    5062:	ebc6 0803 	rsb	r8, r6, r3
    5066:	60a2      	str	r2, [r4, #8]
    5068:	e012      	b.n	5090 <_fflush_r+0x128>
    506a:	89a3      	ldrh	r3, [r4, #12]
    506c:	f043 0040 	orr.w	r0, r3, #64	; 0x40
    5070:	81a0      	strh	r0, [r4, #12]
    5072:	f04f 30ff 	mov.w	r0, #4294967295
    5076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    507a:	6a67      	ldr	r7, [r4, #36]	; 0x24
    507c:	69e1      	ldr	r1, [r4, #28]
    507e:	4628      	mov	r0, r5
    5080:	4632      	mov	r2, r6
    5082:	4643      	mov	r3, r8
    5084:	47b8      	blx	r7
    5086:	2800      	cmp	r0, #0
    5088:	ddef      	ble.n	506a <_fflush_r+0x102>
    508a:	1836      	adds	r6, r6, r0
    508c:	ebc0 0808 	rsb	r8, r0, r8
    5090:	f1b8 0f00 	cmp.w	r8, #0
    5094:	dcf1      	bgt.n	507a <_fflush_r+0x112>
    5096:	e799      	b.n	4fcc <_fflush_r+0x64>

00005098 <fflush>:
    5098:	4601      	mov	r1, r0
    509a:	b920      	cbnz	r0, 50a6 <fflush+0xe>
    509c:	4804      	ldr	r0, [pc, #16]	; (50b0 <fflush+0x18>)
    509e:	4905      	ldr	r1, [pc, #20]	; (50b4 <fflush+0x1c>)
    50a0:	6800      	ldr	r0, [r0, #0]
    50a2:	f000 bc23 	b.w	58ec <_fwalk_reent>
    50a6:	4b04      	ldr	r3, [pc, #16]	; (50b8 <fflush+0x20>)
    50a8:	6818      	ldr	r0, [r3, #0]
    50aa:	f7ff bf5d 	b.w	4f68 <_fflush_r>
    50ae:	bf00      	nop
    50b0:	00007690 	.word	0x00007690
    50b4:	00004f69 	.word	0x00004f69
    50b8:	20000050 	.word	0x20000050

000050bc <__fp_lock>:
    50bc:	2000      	movs	r0, #0
    50be:	4770      	bx	lr

000050c0 <__fp_unlock>:
    50c0:	2000      	movs	r0, #0
    50c2:	4770      	bx	lr

000050c4 <_cleanup_r>:
    50c4:	4901      	ldr	r1, [pc, #4]	; (50cc <_cleanup_r+0x8>)
    50c6:	f000 bbf0 	b.w	58aa <_fwalk>
    50ca:	bf00      	nop
    50cc:	00006db9 	.word	0x00006db9

000050d0 <std.isra.0>:
    50d0:	2300      	movs	r3, #0
    50d2:	b510      	push	{r4, lr}
    50d4:	4604      	mov	r4, r0
    50d6:	6003      	str	r3, [r0, #0]
    50d8:	6043      	str	r3, [r0, #4]
    50da:	6083      	str	r3, [r0, #8]
    50dc:	8181      	strh	r1, [r0, #12]
    50de:	6643      	str	r3, [r0, #100]	; 0x64
    50e0:	81c2      	strh	r2, [r0, #14]
    50e2:	6103      	str	r3, [r0, #16]
    50e4:	6143      	str	r3, [r0, #20]
    50e6:	6183      	str	r3, [r0, #24]
    50e8:	4619      	mov	r1, r3
    50ea:	2208      	movs	r2, #8
    50ec:	f100 005c 	add.w	r0, r0, #92	; 0x5c
    50f0:	f7fe fd4c 	bl	3b8c <memset>
    50f4:	4804      	ldr	r0, [pc, #16]	; (5108 <std.isra.0+0x38>)
    50f6:	4905      	ldr	r1, [pc, #20]	; (510c <std.isra.0+0x3c>)
    50f8:	4a05      	ldr	r2, [pc, #20]	; (5110 <std.isra.0+0x40>)
    50fa:	4b06      	ldr	r3, [pc, #24]	; (5114 <std.isra.0+0x44>)
    50fc:	61e4      	str	r4, [r4, #28]
    50fe:	6220      	str	r0, [r4, #32]
    5100:	6261      	str	r1, [r4, #36]	; 0x24
    5102:	62a2      	str	r2, [r4, #40]	; 0x28
    5104:	62e3      	str	r3, [r4, #44]	; 0x2c
    5106:	bd10      	pop	{r4, pc}
    5108:	00006459 	.word	0x00006459
    510c:	0000647f 	.word	0x0000647f
    5110:	000064bb 	.word	0x000064bb
    5114:	000064df 	.word	0x000064df

00005118 <__sfmoreglue>:
    5118:	b570      	push	{r4, r5, r6, lr}
    511a:	2568      	movs	r5, #104	; 0x68
    511c:	434d      	muls	r5, r1
    511e:	460e      	mov	r6, r1
    5120:	f105 010c 	add.w	r1, r5, #12
    5124:	f000 fcd2 	bl	5acc <_malloc_r>
    5128:	4604      	mov	r4, r0
    512a:	b140      	cbz	r0, 513e <__sfmoreglue+0x26>
    512c:	f100 000c 	add.w	r0, r0, #12
    5130:	2100      	movs	r1, #0
    5132:	e884 0042 	stmia.w	r4, {r1, r6}
    5136:	60a0      	str	r0, [r4, #8]
    5138:	462a      	mov	r2, r5
    513a:	f7fe fd27 	bl	3b8c <memset>
    513e:	4620      	mov	r0, r4
    5140:	bd70      	pop	{r4, r5, r6, pc}

00005142 <_cleanup>:
    5142:	4b02      	ldr	r3, [pc, #8]	; (514c <_cleanup+0xa>)
    5144:	6818      	ldr	r0, [r3, #0]
    5146:	f7ff bfbd 	b.w	50c4 <_cleanup_r>
    514a:	bf00      	nop
    514c:	00007690 	.word	0x00007690

00005150 <__sinit>:
    5150:	b538      	push	{r3, r4, r5, lr}
    5152:	6b83      	ldr	r3, [r0, #56]	; 0x38
    5154:	4604      	mov	r4, r0
    5156:	b9eb      	cbnz	r3, 5194 <__sinit+0x44>
    5158:	4a0f      	ldr	r2, [pc, #60]	; (5198 <__sinit+0x48>)
    515a:	f8c0 32e0 	str.w	r3, [r0, #736]	; 0x2e0
    515e:	2501      	movs	r5, #1
    5160:	63c2      	str	r2, [r0, #60]	; 0x3c
    5162:	6385      	str	r5, [r0, #56]	; 0x38
    5164:	f504 713b 	add.w	r1, r4, #748	; 0x2ec
    5168:	2003      	movs	r0, #3
    516a:	461a      	mov	r2, r3
    516c:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
    5170:	f8c4 12e8 	str.w	r1, [r4, #744]	; 0x2e8
    5174:	6860      	ldr	r0, [r4, #4]
    5176:	2104      	movs	r1, #4
    5178:	f7ff ffaa 	bl	50d0 <std.isra.0>
    517c:	68a0      	ldr	r0, [r4, #8]
    517e:	2109      	movs	r1, #9
    5180:	462a      	mov	r2, r5
    5182:	f7ff ffa5 	bl	50d0 <std.isra.0>
    5186:	68e0      	ldr	r0, [r4, #12]
    5188:	2112      	movs	r1, #18
    518a:	2202      	movs	r2, #2
    518c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5190:	f7ff bf9e 	b.w	50d0 <std.isra.0>
    5194:	bd38      	pop	{r3, r4, r5, pc}
    5196:	bf00      	nop
    5198:	000050c5 	.word	0x000050c5

0000519c <__sfp>:
    519c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    519e:	4b1d      	ldr	r3, [pc, #116]	; (5214 <__sfp+0x78>)
    51a0:	681e      	ldr	r6, [r3, #0]
    51a2:	4607      	mov	r7, r0
    51a4:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    51a6:	b910      	cbnz	r0, 51ae <__sfp+0x12>
    51a8:	4630      	mov	r0, r6
    51aa:	f7ff ffd1 	bl	5150 <__sinit>
    51ae:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
    51b2:	68b4      	ldr	r4, [r6, #8]
    51b4:	6871      	ldr	r1, [r6, #4]
    51b6:	3901      	subs	r1, #1
    51b8:	d404      	bmi.n	51c4 <__sfp+0x28>
    51ba:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    51be:	b185      	cbz	r5, 51e2 <__sfp+0x46>
    51c0:	3468      	adds	r4, #104	; 0x68
    51c2:	e7f8      	b.n	51b6 <__sfp+0x1a>
    51c4:	6832      	ldr	r2, [r6, #0]
    51c6:	b10a      	cbz	r2, 51cc <__sfp+0x30>
    51c8:	6836      	ldr	r6, [r6, #0]
    51ca:	e7f2      	b.n	51b2 <__sfp+0x16>
    51cc:	4638      	mov	r0, r7
    51ce:	2104      	movs	r1, #4
    51d0:	f7ff ffa2 	bl	5118 <__sfmoreglue>
    51d4:	6030      	str	r0, [r6, #0]
    51d6:	2800      	cmp	r0, #0
    51d8:	d1f6      	bne.n	51c8 <__sfp+0x2c>
    51da:	240c      	movs	r4, #12
    51dc:	603c      	str	r4, [r7, #0]
    51de:	4604      	mov	r4, r0
    51e0:	e015      	b.n	520e <__sfp+0x72>
    51e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    51e6:	2001      	movs	r0, #1
    51e8:	81a0      	strh	r0, [r4, #12]
    51ea:	81e3      	strh	r3, [r4, #14]
    51ec:	6665      	str	r5, [r4, #100]	; 0x64
    51ee:	6025      	str	r5, [r4, #0]
    51f0:	60a5      	str	r5, [r4, #8]
    51f2:	6065      	str	r5, [r4, #4]
    51f4:	6125      	str	r5, [r4, #16]
    51f6:	6165      	str	r5, [r4, #20]
    51f8:	61a5      	str	r5, [r4, #24]
    51fa:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    51fe:	4629      	mov	r1, r5
    5200:	2208      	movs	r2, #8
    5202:	f7fe fcc3 	bl	3b8c <memset>
    5206:	6325      	str	r5, [r4, #48]	; 0x30
    5208:	6365      	str	r5, [r4, #52]	; 0x34
    520a:	6465      	str	r5, [r4, #68]	; 0x44
    520c:	64a5      	str	r5, [r4, #72]	; 0x48
    520e:	4620      	mov	r0, r4
    5210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5212:	bf00      	nop
    5214:	00007690 	.word	0x00007690

00005218 <__sfp_lock_acquire>:
    5218:	4770      	bx	lr

0000521a <__sfp_lock_release>:
    521a:	4770      	bx	lr

0000521c <__sinit_lock_acquire>:
    521c:	4770      	bx	lr

0000521e <__sinit_lock_release>:
    521e:	4770      	bx	lr

00005220 <__fp_lock_all>:
    5220:	4b02      	ldr	r3, [pc, #8]	; (522c <__fp_lock_all+0xc>)
    5222:	4903      	ldr	r1, [pc, #12]	; (5230 <__fp_lock_all+0x10>)
    5224:	6818      	ldr	r0, [r3, #0]
    5226:	f000 bb40 	b.w	58aa <_fwalk>
    522a:	bf00      	nop
    522c:	20000050 	.word	0x20000050
    5230:	000050bd 	.word	0x000050bd

00005234 <__fp_unlock_all>:
    5234:	4b02      	ldr	r3, [pc, #8]	; (5240 <__fp_unlock_all+0xc>)
    5236:	4903      	ldr	r1, [pc, #12]	; (5244 <__fp_unlock_all+0x10>)
    5238:	6818      	ldr	r0, [r3, #0]
    523a:	f000 bb36 	b.w	58aa <_fwalk>
    523e:	bf00      	nop
    5240:	20000050 	.word	0x20000050
    5244:	000050c1 	.word	0x000050c1

00005248 <_fputwc_r>:
    5248:	8993      	ldrh	r3, [r2, #12]
    524a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    524e:	4614      	mov	r4, r2
    5250:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
    5254:	4680      	mov	r8, r0
    5256:	b210      	sxth	r0, r2
    5258:	460e      	mov	r6, r1
    525a:	b930      	cbnz	r0, 526a <_fputwc_r+0x22>
    525c:	6e67      	ldr	r7, [r4, #100]	; 0x64
    525e:	f443 5100 	orr.w	r1, r3, #8192	; 0x2000
    5262:	f447 5300 	orr.w	r3, r7, #8192	; 0x2000
    5266:	81a1      	strh	r1, [r4, #12]
    5268:	6663      	str	r3, [r4, #100]	; 0x64
    526a:	f000 fb95 	bl	5998 <__locale_mb_cur_max>
    526e:	2801      	cmp	r0, #1
    5270:	d106      	bne.n	5280 <_fputwc_r+0x38>
    5272:	b12e      	cbz	r6, 5280 <_fputwc_r+0x38>
    5274:	2eff      	cmp	r6, #255	; 0xff
    5276:	d803      	bhi.n	5280 <_fputwc_r+0x38>
    5278:	f88d 6004 	strb.w	r6, [sp, #4]
    527c:	4607      	mov	r7, r0
    527e:	e00f      	b.n	52a0 <_fputwc_r+0x58>
    5280:	4632      	mov	r2, r6
    5282:	4640      	mov	r0, r8
    5284:	a901      	add	r1, sp, #4
    5286:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    528a:	f001 fcdb 	bl	6c44 <_wcrtomb_r>
    528e:	1c42      	adds	r2, r0, #1
    5290:	4607      	mov	r7, r0
    5292:	d105      	bne.n	52a0 <_fputwc_r+0x58>
    5294:	89a2      	ldrh	r2, [r4, #12]
    5296:	f042 0040 	orr.w	r0, r2, #64	; 0x40
    529a:	81a0      	strh	r0, [r4, #12]
    529c:	4638      	mov	r0, r7
    529e:	e031      	b.n	5304 <_fputwc_r+0xbc>
    52a0:	2500      	movs	r5, #0
    52a2:	42bd      	cmp	r5, r7
    52a4:	d02a      	beq.n	52fc <_fputwc_r+0xb4>
    52a6:	68a1      	ldr	r1, [r4, #8]
    52a8:	1e4a      	subs	r2, r1, #1
    52aa:	2a00      	cmp	r2, #0
    52ac:	60a2      	str	r2, [r4, #8]
    52ae:	ab01      	add	r3, sp, #4
    52b0:	da1a      	bge.n	52e8 <_fputwc_r+0xa0>
    52b2:	69a0      	ldr	r0, [r4, #24]
    52b4:	4282      	cmp	r2, r0
    52b6:	db0c      	blt.n	52d2 <_fputwc_r+0x8a>
    52b8:	6821      	ldr	r1, [r4, #0]
    52ba:	5d5a      	ldrb	r2, [r3, r5]
    52bc:	700a      	strb	r2, [r1, #0]
    52be:	6823      	ldr	r3, [r4, #0]
    52c0:	7819      	ldrb	r1, [r3, #0]
    52c2:	290a      	cmp	r1, #10
    52c4:	d003      	beq.n	52ce <_fputwc_r+0x86>
    52c6:	3301      	adds	r3, #1
    52c8:	2200      	movs	r2, #0
    52ca:	6023      	str	r3, [r4, #0]
    52cc:	e013      	b.n	52f6 <_fputwc_r+0xae>
    52ce:	4640      	mov	r0, r8
    52d0:	e001      	b.n	52d6 <_fputwc_r+0x8e>
    52d2:	5d59      	ldrb	r1, [r3, r5]
    52d4:	4640      	mov	r0, r8
    52d6:	4622      	mov	r2, r4
    52d8:	f001 fc5a 	bl	6b90 <__swbuf_r>
    52dc:	f1b0 31ff 	subs.w	r1, r0, #4294967295
    52e0:	4248      	negs	r0, r1
    52e2:	eb50 0201 	adcs.w	r2, r0, r1
    52e6:	e006      	b.n	52f6 <_fputwc_r+0xae>
    52e8:	6820      	ldr	r0, [r4, #0]
    52ea:	5d59      	ldrb	r1, [r3, r5]
    52ec:	7001      	strb	r1, [r0, #0]
    52ee:	6822      	ldr	r2, [r4, #0]
    52f0:	1c53      	adds	r3, r2, #1
    52f2:	6023      	str	r3, [r4, #0]
    52f4:	e000      	b.n	52f8 <_fputwc_r+0xb0>
    52f6:	b91a      	cbnz	r2, 5300 <_fputwc_r+0xb8>
    52f8:	3501      	adds	r5, #1
    52fa:	e7d2      	b.n	52a2 <_fputwc_r+0x5a>
    52fc:	4630      	mov	r0, r6
    52fe:	e001      	b.n	5304 <_fputwc_r+0xbc>
    5300:	f04f 30ff 	mov.w	r0, #4294967295
    5304:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

00005308 <fputwc>:
    5308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    530a:	4c08      	ldr	r4, [pc, #32]	; (532c <fputwc+0x24>)
    530c:	4607      	mov	r7, r0
    530e:	6820      	ldr	r0, [r4, #0]
    5310:	460e      	mov	r6, r1
    5312:	b118      	cbz	r0, 531c <fputwc+0x14>
    5314:	6b85      	ldr	r5, [r0, #56]	; 0x38
    5316:	b90d      	cbnz	r5, 531c <fputwc+0x14>
    5318:	f7ff ff1a 	bl	5150 <__sinit>
    531c:	6820      	ldr	r0, [r4, #0]
    531e:	4639      	mov	r1, r7
    5320:	4632      	mov	r2, r6
    5322:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5326:	f7ff bf8f 	b.w	5248 <_fputwc_r>
    532a:	bf00      	nop
    532c:	20000050 	.word	0x20000050

00005330 <_fread_r>:
    5330:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5334:	461e      	mov	r6, r3
    5336:	4613      	mov	r3, r2
    5338:	4373      	muls	r3, r6
    533a:	4682      	mov	sl, r0
    533c:	4688      	mov	r8, r1
    533e:	4693      	mov	fp, r2
    5340:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    5342:	4699      	mov	r9, r3
    5344:	d03e      	beq.n	53c4 <_fread_r+0x94>
    5346:	b118      	cbz	r0, 5350 <_fread_r+0x20>
    5348:	6b81      	ldr	r1, [r0, #56]	; 0x38
    534a:	b909      	cbnz	r1, 5350 <_fread_r+0x20>
    534c:	f7ff ff00 	bl	5150 <__sinit>
    5350:	f7ff ff62 	bl	5218 <__sfp_lock_acquire>
    5354:	89a0      	ldrh	r0, [r4, #12]
    5356:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
    535a:	b215      	sxth	r5, r2
    535c:	b935      	cbnz	r5, 536c <_fread_r+0x3c>
    535e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    5360:	f440 5700 	orr.w	r7, r0, #8192	; 0x2000
    5364:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
    5368:	81a7      	strh	r7, [r4, #12]
    536a:	6661      	str	r1, [r4, #100]	; 0x64
    536c:	6860      	ldr	r0, [r4, #4]
    536e:	2800      	cmp	r0, #0
    5370:	da01      	bge.n	5376 <_fread_r+0x46>
    5372:	2200      	movs	r2, #0
    5374:	6062      	str	r2, [r4, #4]
    5376:	464d      	mov	r5, r9
    5378:	6867      	ldr	r7, [r4, #4]
    537a:	6821      	ldr	r1, [r4, #0]
    537c:	42bd      	cmp	r5, r7
    537e:	4640      	mov	r0, r8
    5380:	d914      	bls.n	53ac <_fread_r+0x7c>
    5382:	463a      	mov	r2, r7
    5384:	f000 fe12 	bl	5fac <memcpy>
    5388:	6822      	ldr	r2, [r4, #0]
    538a:	19d3      	adds	r3, r2, r7
    538c:	6023      	str	r3, [r4, #0]
    538e:	4650      	mov	r0, sl
    5390:	4621      	mov	r1, r4
    5392:	44b8      	add	r8, r7
    5394:	1bed      	subs	r5, r5, r7
    5396:	f000 ffa6 	bl	62e6 <__srefill_r>
    539a:	2800      	cmp	r0, #0
    539c:	d0ec      	beq.n	5378 <_fread_r+0x48>
    539e:	ebc5 0509 	rsb	r5, r5, r9
    53a2:	f7ff ff3a 	bl	521a <__sfp_lock_release>
    53a6:	fbb5 f6fb 	udiv	r6, r5, fp
    53aa:	e00c      	b.n	53c6 <_fread_r+0x96>
    53ac:	462a      	mov	r2, r5
    53ae:	f000 fdfd 	bl	5fac <memcpy>
    53b2:	6863      	ldr	r3, [r4, #4]
    53b4:	6820      	ldr	r0, [r4, #0]
    53b6:	1b59      	subs	r1, r3, r5
    53b8:	1945      	adds	r5, r0, r5
    53ba:	6061      	str	r1, [r4, #4]
    53bc:	6025      	str	r5, [r4, #0]
    53be:	f7ff ff2c 	bl	521a <__sfp_lock_release>
    53c2:	e000      	b.n	53c6 <_fread_r+0x96>
    53c4:	461e      	mov	r6, r3
    53c6:	4630      	mov	r0, r6
    53c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000053cc <fread>:
    53cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    53ce:	9300      	str	r3, [sp, #0]
    53d0:	4b05      	ldr	r3, [pc, #20]	; (53e8 <fread+0x1c>)
    53d2:	4606      	mov	r6, r0
    53d4:	460d      	mov	r5, r1
    53d6:	4614      	mov	r4, r2
    53d8:	6818      	ldr	r0, [r3, #0]
    53da:	4631      	mov	r1, r6
    53dc:	462a      	mov	r2, r5
    53de:	4623      	mov	r3, r4
    53e0:	f7ff ffa6 	bl	5330 <_fread_r>
    53e4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    53e6:	bf00      	nop
    53e8:	20000050 	.word	0x20000050

000053ec <_malloc_trim_r>:
    53ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    53ee:	4d23      	ldr	r5, [pc, #140]	; (547c <_malloc_trim_r+0x90>)
    53f0:	460e      	mov	r6, r1
    53f2:	4604      	mov	r4, r0
    53f4:	f000 fdfd 	bl	5ff2 <__malloc_lock>
    53f8:	68ab      	ldr	r3, [r5, #8]
    53fa:	685f      	ldr	r7, [r3, #4]
    53fc:	f027 0703 	bic.w	r7, r7, #3
    5400:	f607 70ef 	addw	r0, r7, #4079	; 0xfef
    5404:	1b81      	subs	r1, r0, r6
    5406:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
    540a:	f022 060f 	bic.w	r6, r2, #15
    540e:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
    5412:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
    5416:	da04      	bge.n	5422 <_malloc_trim_r+0x36>
    5418:	4620      	mov	r0, r4
    541a:	f000 fdeb 	bl	5ff4 <__malloc_unlock>
    541e:	2000      	movs	r0, #0
    5420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5422:	2100      	movs	r1, #0
    5424:	4620      	mov	r0, r4
    5426:	f000 ffd7 	bl	63d8 <_sbrk_r>
    542a:	68ab      	ldr	r3, [r5, #8]
    542c:	19d9      	adds	r1, r3, r7
    542e:	4288      	cmp	r0, r1
    5430:	d1f2      	bne.n	5418 <_malloc_trim_r+0x2c>
    5432:	4271      	negs	r1, r6
    5434:	4620      	mov	r0, r4
    5436:	f000 ffcf 	bl	63d8 <_sbrk_r>
    543a:	3001      	adds	r0, #1
    543c:	d110      	bne.n	5460 <_malloc_trim_r+0x74>
    543e:	2100      	movs	r1, #0
    5440:	4620      	mov	r0, r4
    5442:	f000 ffc9 	bl	63d8 <_sbrk_r>
    5446:	68ab      	ldr	r3, [r5, #8]
    5448:	1ac2      	subs	r2, r0, r3
    544a:	2a0f      	cmp	r2, #15
    544c:	dde4      	ble.n	5418 <_malloc_trim_r+0x2c>
    544e:	490c      	ldr	r1, [pc, #48]	; (5480 <_malloc_trim_r+0x94>)
    5450:	6809      	ldr	r1, [r1, #0]
    5452:	1a40      	subs	r0, r0, r1
    5454:	490b      	ldr	r1, [pc, #44]	; (5484 <_malloc_trim_r+0x98>)
    5456:	f042 0201 	orr.w	r2, r2, #1
    545a:	6008      	str	r0, [r1, #0]
    545c:	605a      	str	r2, [r3, #4]
    545e:	e7db      	b.n	5418 <_malloc_trim_r+0x2c>
    5460:	4b08      	ldr	r3, [pc, #32]	; (5484 <_malloc_trim_r+0x98>)
    5462:	68a8      	ldr	r0, [r5, #8]
    5464:	681a      	ldr	r2, [r3, #0]
    5466:	1bbf      	subs	r7, r7, r6
    5468:	f047 0701 	orr.w	r7, r7, #1
    546c:	6047      	str	r7, [r0, #4]
    546e:	1b96      	subs	r6, r2, r6
    5470:	4620      	mov	r0, r4
    5472:	601e      	str	r6, [r3, #0]
    5474:	f000 fdbe 	bl	5ff4 <__malloc_unlock>
    5478:	2001      	movs	r0, #1
    547a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    547c:	20000500 	.word	0x20000500
    5480:	20000908 	.word	0x20000908
    5484:	200009e8 	.word	0x200009e8

00005488 <_free_r>:
    5488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    548a:	4606      	mov	r6, r0
    548c:	460d      	mov	r5, r1
    548e:	2900      	cmp	r1, #0
    5490:	f000 80a6 	beq.w	55e0 <_free_r+0x158>
    5494:	f000 fdad 	bl	5ff2 <__malloc_lock>
    5498:	f855 cc04 	ldr.w	ip, [r5, #-4]
    549c:	4f51      	ldr	r7, [pc, #324]	; (55e4 <_free_r+0x15c>)
    549e:	f1a5 0308 	sub.w	r3, r5, #8
    54a2:	f02c 0201 	bic.w	r2, ip, #1
    54a6:	189c      	adds	r4, r3, r2
    54a8:	68b9      	ldr	r1, [r7, #8]
    54aa:	6860      	ldr	r0, [r4, #4]
    54ac:	428c      	cmp	r4, r1
    54ae:	f020 0003 	bic.w	r0, r0, #3
    54b2:	f00c 0101 	and.w	r1, ip, #1
    54b6:	d11c      	bne.n	54f2 <_free_r+0x6a>
    54b8:	1882      	adds	r2, r0, r2
    54ba:	b939      	cbnz	r1, 54cc <_free_r+0x44>
    54bc:	f855 1c08 	ldr.w	r1, [r5, #-8]
    54c0:	1a5b      	subs	r3, r3, r1
    54c2:	1852      	adds	r2, r2, r1
    54c4:	6898      	ldr	r0, [r3, #8]
    54c6:	68d9      	ldr	r1, [r3, #12]
    54c8:	60c1      	str	r1, [r0, #12]
    54ca:	6088      	str	r0, [r1, #8]
    54cc:	4845      	ldr	r0, [pc, #276]	; (55e4 <_free_r+0x15c>)
    54ce:	f042 0101 	orr.w	r1, r2, #1
    54d2:	6059      	str	r1, [r3, #4]
    54d4:	6083      	str	r3, [r0, #8]
    54d6:	4b44      	ldr	r3, [pc, #272]	; (55e8 <_free_r+0x160>)
    54d8:	6819      	ldr	r1, [r3, #0]
    54da:	428a      	cmp	r2, r1
    54dc:	d304      	bcc.n	54e8 <_free_r+0x60>
    54de:	4a43      	ldr	r2, [pc, #268]	; (55ec <_free_r+0x164>)
    54e0:	4630      	mov	r0, r6
    54e2:	6811      	ldr	r1, [r2, #0]
    54e4:	f7ff ff82 	bl	53ec <_malloc_trim_r>
    54e8:	4630      	mov	r0, r6
    54ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    54ee:	f000 bd81 	b.w	5ff4 <__malloc_unlock>
    54f2:	6060      	str	r0, [r4, #4]
    54f4:	b959      	cbnz	r1, 550e <_free_r+0x86>
    54f6:	f855 5c08 	ldr.w	r5, [r5, #-8]
    54fa:	1b5b      	subs	r3, r3, r5
    54fc:	1952      	adds	r2, r2, r5
    54fe:	689d      	ldr	r5, [r3, #8]
    5500:	3708      	adds	r7, #8
    5502:	42bd      	cmp	r5, r7
    5504:	d005      	beq.n	5512 <_free_r+0x8a>
    5506:	68df      	ldr	r7, [r3, #12]
    5508:	60ef      	str	r7, [r5, #12]
    550a:	60bd      	str	r5, [r7, #8]
    550c:	e002      	b.n	5514 <_free_r+0x8c>
    550e:	2100      	movs	r1, #0
    5510:	e000      	b.n	5514 <_free_r+0x8c>
    5512:	2101      	movs	r1, #1
    5514:	1825      	adds	r5, r4, r0
    5516:	686d      	ldr	r5, [r5, #4]
    5518:	f015 0f01 	tst.w	r5, #1
    551c:	d10f      	bne.n	553e <_free_r+0xb6>
    551e:	1812      	adds	r2, r2, r0
    5520:	b949      	cbnz	r1, 5536 <_free_r+0xae>
    5522:	68a0      	ldr	r0, [r4, #8]
    5524:	4d32      	ldr	r5, [pc, #200]	; (55f0 <_free_r+0x168>)
    5526:	42a8      	cmp	r0, r5
    5528:	d105      	bne.n	5536 <_free_r+0xae>
    552a:	60eb      	str	r3, [r5, #12]
    552c:	60ab      	str	r3, [r5, #8]
    552e:	60d8      	str	r0, [r3, #12]
    5530:	6098      	str	r0, [r3, #8]
    5532:	2101      	movs	r1, #1
    5534:	e003      	b.n	553e <_free_r+0xb6>
    5536:	68e0      	ldr	r0, [r4, #12]
    5538:	68a4      	ldr	r4, [r4, #8]
    553a:	60e0      	str	r0, [r4, #12]
    553c:	6084      	str	r4, [r0, #8]
    553e:	f042 0001 	orr.w	r0, r2, #1
    5542:	6058      	str	r0, [r3, #4]
    5544:	509a      	str	r2, [r3, r2]
    5546:	2900      	cmp	r1, #0
    5548:	d1ce      	bne.n	54e8 <_free_r+0x60>
    554a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    554e:	d20c      	bcs.n	556a <_free_r+0xe2>
    5550:	4924      	ldr	r1, [pc, #144]	; (55e4 <_free_r+0x15c>)
    5552:	08d2      	lsrs	r2, r2, #3
    5554:	1090      	asrs	r0, r2, #2
    5556:	2401      	movs	r4, #1
    5558:	fa04 f400 	lsl.w	r4, r4, r0
    555c:	6848      	ldr	r0, [r1, #4]
    555e:	4320      	orrs	r0, r4
    5560:	6048      	str	r0, [r1, #4]
    5562:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    5566:	6881      	ldr	r1, [r0, #8]
    5568:	e035      	b.n	55d6 <_free_r+0x14e>
    556a:	0a54      	lsrs	r4, r2, #9
    556c:	2c04      	cmp	r4, #4
    556e:	d802      	bhi.n	5576 <_free_r+0xee>
    5570:	0994      	lsrs	r4, r2, #6
    5572:	3438      	adds	r4, #56	; 0x38
    5574:	e016      	b.n	55a4 <_free_r+0x11c>
    5576:	2c14      	cmp	r4, #20
    5578:	d801      	bhi.n	557e <_free_r+0xf6>
    557a:	345b      	adds	r4, #91	; 0x5b
    557c:	e012      	b.n	55a4 <_free_r+0x11c>
    557e:	2c54      	cmp	r4, #84	; 0x54
    5580:	d802      	bhi.n	5588 <_free_r+0x100>
    5582:	0b14      	lsrs	r4, r2, #12
    5584:	346e      	adds	r4, #110	; 0x6e
    5586:	e00d      	b.n	55a4 <_free_r+0x11c>
    5588:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
    558c:	d802      	bhi.n	5594 <_free_r+0x10c>
    558e:	0bd4      	lsrs	r4, r2, #15
    5590:	3477      	adds	r4, #119	; 0x77
    5592:	e007      	b.n	55a4 <_free_r+0x11c>
    5594:	f240 5554 	movw	r5, #1364	; 0x554
    5598:	42ac      	cmp	r4, r5
    559a:	d802      	bhi.n	55a2 <_free_r+0x11a>
    559c:	0c94      	lsrs	r4, r2, #18
    559e:	347c      	adds	r4, #124	; 0x7c
    55a0:	e000      	b.n	55a4 <_free_r+0x11c>
    55a2:	247e      	movs	r4, #126	; 0x7e
    55a4:	4d0f      	ldr	r5, [pc, #60]	; (55e4 <_free_r+0x15c>)
    55a6:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    55aa:	6881      	ldr	r1, [r0, #8]
    55ac:	4281      	cmp	r1, r0
    55ae:	d10c      	bne.n	55ca <_free_r+0x142>
    55b0:	6868      	ldr	r0, [r5, #4]
    55b2:	2201      	movs	r2, #1
    55b4:	10a4      	asrs	r4, r4, #2
    55b6:	fa02 f404 	lsl.w	r4, r2, r4
    55ba:	ea44 0200 	orr.w	r2, r4, r0
    55be:	606a      	str	r2, [r5, #4]
    55c0:	4608      	mov	r0, r1
    55c2:	e008      	b.n	55d6 <_free_r+0x14e>
    55c4:	6889      	ldr	r1, [r1, #8]
    55c6:	4281      	cmp	r1, r0
    55c8:	d004      	beq.n	55d4 <_free_r+0x14c>
    55ca:	684c      	ldr	r4, [r1, #4]
    55cc:	f024 0403 	bic.w	r4, r4, #3
    55d0:	42a2      	cmp	r2, r4
    55d2:	d3f7      	bcc.n	55c4 <_free_r+0x13c>
    55d4:	68c8      	ldr	r0, [r1, #12]
    55d6:	60d8      	str	r0, [r3, #12]
    55d8:	6099      	str	r1, [r3, #8]
    55da:	6083      	str	r3, [r0, #8]
    55dc:	60cb      	str	r3, [r1, #12]
    55de:	e783      	b.n	54e8 <_free_r+0x60>
    55e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    55e2:	bf00      	nop
    55e4:	20000500 	.word	0x20000500
    55e8:	2000090c 	.word	0x2000090c
    55ec:	200009e4 	.word	0x200009e4
    55f0:	20000508 	.word	0x20000508

000055f4 <__sfvwrite_r>:
    55f4:	6893      	ldr	r3, [r2, #8]
    55f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    55fa:	4606      	mov	r6, r0
    55fc:	460c      	mov	r4, r1
    55fe:	4691      	mov	r9, r2
    5600:	b90b      	cbnz	r3, 5606 <__sfvwrite_r+0x12>
    5602:	2000      	movs	r0, #0
    5604:	e14f      	b.n	58a6 <__sfvwrite_r+0x2b2>
    5606:	8988      	ldrh	r0, [r1, #12]
    5608:	f000 0108 	and.w	r1, r0, #8
    560c:	b20a      	sxth	r2, r1
    560e:	b10a      	cbz	r2, 5614 <__sfvwrite_r+0x20>
    5610:	6923      	ldr	r3, [r4, #16]
    5612:	b95b      	cbnz	r3, 562c <__sfvwrite_r+0x38>
    5614:	4630      	mov	r0, r6
    5616:	4621      	mov	r1, r4
    5618:	f7ff fc3a 	bl	4e90 <__swsetup_r>
    561c:	b130      	cbz	r0, 562c <__sfvwrite_r+0x38>
    561e:	89a1      	ldrh	r1, [r4, #12]
    5620:	2209      	movs	r2, #9
    5622:	f041 0040 	orr.w	r0, r1, #64	; 0x40
    5626:	81a0      	strh	r0, [r4, #12]
    5628:	6032      	str	r2, [r6, #0]
    562a:	e13a      	b.n	58a2 <__sfvwrite_r+0x2ae>
    562c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
    5630:	f8d9 8000 	ldr.w	r8, [r9]
    5634:	f00a 0c02 	and.w	ip, sl, #2
    5638:	fa0f f58c 	sxth.w	r5, ip
    563c:	b315      	cbz	r5, 5684 <__sfvwrite_r+0x90>
    563e:	f04f 0a00 	mov.w	sl, #0
    5642:	4657      	mov	r7, sl
    5644:	b937      	cbnz	r7, 5654 <__sfvwrite_r+0x60>
    5646:	f8d8 a000 	ldr.w	sl, [r8]
    564a:	f8d8 7004 	ldr.w	r7, [r8, #4]
    564e:	f108 0808 	add.w	r8, r8, #8
    5652:	e7f7      	b.n	5644 <__sfvwrite_r+0x50>
    5654:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    5658:	bf34      	ite	cc
    565a:	463b      	movcc	r3, r7
    565c:	f44f 6380 	movcs.w	r3, #1024	; 0x400
    5660:	4630      	mov	r0, r6
    5662:	69e1      	ldr	r1, [r4, #28]
    5664:	6a65      	ldr	r5, [r4, #36]	; 0x24
    5666:	4652      	mov	r2, sl
    5668:	47a8      	blx	r5
    566a:	2800      	cmp	r0, #0
    566c:	f340 8115 	ble.w	589a <__sfvwrite_r+0x2a6>
    5670:	f8d9 1008 	ldr.w	r1, [r9, #8]
    5674:	4482      	add	sl, r0
    5676:	1a3f      	subs	r7, r7, r0
    5678:	1a08      	subs	r0, r1, r0
    567a:	f8c9 0008 	str.w	r0, [r9, #8]
    567e:	2800      	cmp	r0, #0
    5680:	d1e0      	bne.n	5644 <__sfvwrite_r+0x50>
    5682:	e7be      	b.n	5602 <__sfvwrite_r+0xe>
    5684:	f01a 0a01 	ands.w	sl, sl, #1
    5688:	d004      	beq.n	5694 <__sfvwrite_r+0xa0>
    568a:	46ab      	mov	fp, r5
    568c:	9501      	str	r5, [sp, #4]
    568e:	462f      	mov	r7, r5
    5690:	46aa      	mov	sl, r5
    5692:	e0c7      	b.n	5824 <__sfvwrite_r+0x230>
    5694:	4655      	mov	r5, sl
    5696:	b935      	cbnz	r5, 56a6 <__sfvwrite_r+0xb2>
    5698:	f8d8 a000 	ldr.w	sl, [r8]
    569c:	f8d8 5004 	ldr.w	r5, [r8, #4]
    56a0:	f108 0808 	add.w	r8, r8, #8
    56a4:	e7f7      	b.n	5696 <__sfvwrite_r+0xa2>
    56a6:	89a2      	ldrh	r2, [r4, #12]
    56a8:	f8d4 b008 	ldr.w	fp, [r4, #8]
    56ac:	f402 7000 	and.w	r0, r2, #512	; 0x200
    56b0:	b203      	sxth	r3, r0
    56b2:	2b00      	cmp	r3, #0
    56b4:	d052      	beq.n	575c <__sfvwrite_r+0x168>
    56b6:	455d      	cmp	r5, fp
    56b8:	d340      	bcc.n	573c <__sfvwrite_r+0x148>
    56ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
    56be:	d03b      	beq.n	5738 <__sfvwrite_r+0x144>
    56c0:	6921      	ldr	r1, [r4, #16]
    56c2:	6827      	ldr	r7, [r4, #0]
    56c4:	6963      	ldr	r3, [r4, #20]
    56c6:	f04f 0b03 	mov.w	fp, #3
    56ca:	fb0b f303 	mul.w	r3, fp, r3
    56ce:	2002      	movs	r0, #2
    56d0:	1a7f      	subs	r7, r7, r1
    56d2:	fb93 fcf0 	sdiv	ip, r3, r0
    56d6:	1c7b      	adds	r3, r7, #1
    56d8:	1958      	adds	r0, r3, r5
    56da:	f402 6280 	and.w	r2, r2, #1024	; 0x400
    56de:	4584      	cmp	ip, r0
    56e0:	bf28      	it	cs
    56e2:	4660      	movcs	r0, ip
    56e4:	b213      	sxth	r3, r2
    56e6:	9001      	str	r0, [sp, #4]
    56e8:	4630      	mov	r0, r6
    56ea:	b17b      	cbz	r3, 570c <__sfvwrite_r+0x118>
    56ec:	9901      	ldr	r1, [sp, #4]
    56ee:	f000 f9ed 	bl	5acc <_malloc_r>
    56f2:	4683      	mov	fp, r0
    56f4:	b198      	cbz	r0, 571e <__sfvwrite_r+0x12a>
    56f6:	6921      	ldr	r1, [r4, #16]
    56f8:	463a      	mov	r2, r7
    56fa:	f000 fc57 	bl	5fac <memcpy>
    56fe:	89a1      	ldrh	r1, [r4, #12]
    5700:	f421 6090 	bic.w	r0, r1, #1152	; 0x480
    5704:	f040 0280 	orr.w	r2, r0, #128	; 0x80
    5708:	81a2      	strh	r2, [r4, #12]
    570a:	e00b      	b.n	5724 <__sfvwrite_r+0x130>
    570c:	9a01      	ldr	r2, [sp, #4]
    570e:	f000 fc73 	bl	5ff8 <_realloc_r>
    5712:	4683      	mov	fp, r0
    5714:	b930      	cbnz	r0, 5724 <__sfvwrite_r+0x130>
    5716:	4630      	mov	r0, r6
    5718:	6921      	ldr	r1, [r4, #16]
    571a:	f7ff feb5 	bl	5488 <_free_r>
    571e:	230c      	movs	r3, #12
    5720:	6033      	str	r3, [r6, #0]
    5722:	e0ba      	b.n	589a <__sfvwrite_r+0x2a6>
    5724:	9901      	ldr	r1, [sp, #4]
    5726:	f8c4 b010 	str.w	fp, [r4, #16]
    572a:	eb0b 0307 	add.w	r3, fp, r7
    572e:	1bcf      	subs	r7, r1, r7
    5730:	6023      	str	r3, [r4, #0]
    5732:	6161      	str	r1, [r4, #20]
    5734:	46ab      	mov	fp, r5
    5736:	60a7      	str	r7, [r4, #8]
    5738:	455d      	cmp	r5, fp
    573a:	d200      	bcs.n	573e <__sfvwrite_r+0x14a>
    573c:	46ab      	mov	fp, r5
    573e:	465a      	mov	r2, fp
    5740:	4651      	mov	r1, sl
    5742:	6820      	ldr	r0, [r4, #0]
    5744:	f000 fc3b 	bl	5fbe <memmove>
    5748:	68a0      	ldr	r0, [r4, #8]
    574a:	6823      	ldr	r3, [r4, #0]
    574c:	ebcb 0200 	rsb	r2, fp, r0
    5750:	eb03 010b 	add.w	r1, r3, fp
    5754:	60a2      	str	r2, [r4, #8]
    5756:	6021      	str	r1, [r4, #0]
    5758:	46ab      	mov	fp, r5
    575a:	e02a      	b.n	57b2 <__sfvwrite_r+0x1be>
    575c:	6820      	ldr	r0, [r4, #0]
    575e:	6921      	ldr	r1, [r4, #16]
    5760:	4288      	cmp	r0, r1
    5762:	d90f      	bls.n	5784 <__sfvwrite_r+0x190>
    5764:	455d      	cmp	r5, fp
    5766:	d90d      	bls.n	5784 <__sfvwrite_r+0x190>
    5768:	4651      	mov	r1, sl
    576a:	465a      	mov	r2, fp
    576c:	f000 fc27 	bl	5fbe <memmove>
    5770:	6822      	ldr	r2, [r4, #0]
    5772:	eb02 000b 	add.w	r0, r2, fp
    5776:	6020      	str	r0, [r4, #0]
    5778:	4621      	mov	r1, r4
    577a:	4630      	mov	r0, r6
    577c:	f7ff fbf4 	bl	4f68 <_fflush_r>
    5780:	b1b8      	cbz	r0, 57b2 <__sfvwrite_r+0x1be>
    5782:	e08a      	b.n	589a <__sfvwrite_r+0x2a6>
    5784:	6963      	ldr	r3, [r4, #20]
    5786:	429d      	cmp	r5, r3
    5788:	d308      	bcc.n	579c <__sfvwrite_r+0x1a8>
    578a:	6a67      	ldr	r7, [r4, #36]	; 0x24
    578c:	69e1      	ldr	r1, [r4, #28]
    578e:	4630      	mov	r0, r6
    5790:	4652      	mov	r2, sl
    5792:	47b8      	blx	r7
    5794:	f1b0 0b00 	subs.w	fp, r0, #0
    5798:	dc0b      	bgt.n	57b2 <__sfvwrite_r+0x1be>
    579a:	e07e      	b.n	589a <__sfvwrite_r+0x2a6>
    579c:	4651      	mov	r1, sl
    579e:	462a      	mov	r2, r5
    57a0:	f000 fc0d 	bl	5fbe <memmove>
    57a4:	68a2      	ldr	r2, [r4, #8]
    57a6:	6823      	ldr	r3, [r4, #0]
    57a8:	1b50      	subs	r0, r2, r5
    57aa:	1959      	adds	r1, r3, r5
    57ac:	46ab      	mov	fp, r5
    57ae:	60a0      	str	r0, [r4, #8]
    57b0:	6021      	str	r1, [r4, #0]
    57b2:	f8d9 0008 	ldr.w	r0, [r9, #8]
    57b6:	ebcb 0200 	rsb	r2, fp, r0
    57ba:	44da      	add	sl, fp
    57bc:	ebcb 0505 	rsb	r5, fp, r5
    57c0:	f8c9 2008 	str.w	r2, [r9, #8]
    57c4:	2a00      	cmp	r2, #0
    57c6:	f47f af66 	bne.w	5696 <__sfvwrite_r+0xa2>
    57ca:	e71a      	b.n	5602 <__sfvwrite_r+0xe>
    57cc:	9801      	ldr	r0, [sp, #4]
    57ce:	2800      	cmp	r0, #0
    57d0:	d032      	beq.n	5838 <__sfvwrite_r+0x244>
    57d2:	6820      	ldr	r0, [r4, #0]
    57d4:	6921      	ldr	r1, [r4, #16]
    57d6:	68a5      	ldr	r5, [r4, #8]
    57d8:	f8d4 e014 	ldr.w	lr, [r4, #20]
    57dc:	45d3      	cmp	fp, sl
    57de:	bf34      	ite	cc
    57e0:	465b      	movcc	r3, fp
    57e2:	4653      	movcs	r3, sl
    57e4:	4288      	cmp	r0, r1
    57e6:	d937      	bls.n	5858 <__sfvwrite_r+0x264>
    57e8:	4475      	add	r5, lr
    57ea:	42ab      	cmp	r3, r5
    57ec:	dd34      	ble.n	5858 <__sfvwrite_r+0x264>
    57ee:	4639      	mov	r1, r7
    57f0:	462a      	mov	r2, r5
    57f2:	f000 fbe4 	bl	5fbe <memmove>
    57f6:	6820      	ldr	r0, [r4, #0]
    57f8:	1943      	adds	r3, r0, r5
    57fa:	6023      	str	r3, [r4, #0]
    57fc:	4630      	mov	r0, r6
    57fe:	4621      	mov	r1, r4
    5800:	f7ff fbb2 	bl	4f68 <_fflush_r>
    5804:	2800      	cmp	r0, #0
    5806:	d148      	bne.n	589a <__sfvwrite_r+0x2a6>
    5808:	ebbb 0b05 	subs.w	fp, fp, r5
    580c:	d03d      	beq.n	588a <__sfvwrite_r+0x296>
    580e:	f8d9 2008 	ldr.w	r2, [r9, #8]
    5812:	197f      	adds	r7, r7, r5
    5814:	ebc5 0a0a 	rsb	sl, r5, sl
    5818:	1b55      	subs	r5, r2, r5
    581a:	f8c9 5008 	str.w	r5, [r9, #8]
    581e:	2d00      	cmp	r5, #0
    5820:	f43f aeef 	beq.w	5602 <__sfvwrite_r+0xe>
    5824:	f1ba 0f00 	cmp.w	sl, #0
    5828:	d1d0      	bne.n	57cc <__sfvwrite_r+0x1d8>
    582a:	2100      	movs	r1, #0
    582c:	e898 0480 	ldmia.w	r8, {r7, sl}
    5830:	9101      	str	r1, [sp, #4]
    5832:	f108 0808 	add.w	r8, r8, #8
    5836:	e7f5      	b.n	5824 <__sfvwrite_r+0x230>
    5838:	4638      	mov	r0, r7
    583a:	210a      	movs	r1, #10
    583c:	4652      	mov	r2, sl
    583e:	f000 fba7 	bl	5f90 <memchr>
    5842:	b120      	cbz	r0, 584e <__sfvwrite_r+0x25a>
    5844:	f100 0101 	add.w	r1, r0, #1
    5848:	ebc7 0b01 	rsb	fp, r7, r1
    584c:	e001      	b.n	5852 <__sfvwrite_r+0x25e>
    584e:	f10a 0b01 	add.w	fp, sl, #1
    5852:	2201      	movs	r2, #1
    5854:	9201      	str	r2, [sp, #4]
    5856:	e7bc      	b.n	57d2 <__sfvwrite_r+0x1de>
    5858:	4573      	cmp	r3, lr
    585a:	db08      	blt.n	586e <__sfvwrite_r+0x27a>
    585c:	6a65      	ldr	r5, [r4, #36]	; 0x24
    585e:	69e1      	ldr	r1, [r4, #28]
    5860:	4630      	mov	r0, r6
    5862:	463a      	mov	r2, r7
    5864:	4673      	mov	r3, lr
    5866:	47a8      	blx	r5
    5868:	1e05      	subs	r5, r0, #0
    586a:	dccd      	bgt.n	5808 <__sfvwrite_r+0x214>
    586c:	e015      	b.n	589a <__sfvwrite_r+0x2a6>
    586e:	461a      	mov	r2, r3
    5870:	4639      	mov	r1, r7
    5872:	9300      	str	r3, [sp, #0]
    5874:	f000 fba3 	bl	5fbe <memmove>
    5878:	9b00      	ldr	r3, [sp, #0]
    587a:	6825      	ldr	r5, [r4, #0]
    587c:	68a0      	ldr	r0, [r4, #8]
    587e:	18e9      	adds	r1, r5, r3
    5880:	1ac2      	subs	r2, r0, r3
    5882:	60a2      	str	r2, [r4, #8]
    5884:	6021      	str	r1, [r4, #0]
    5886:	461d      	mov	r5, r3
    5888:	e7be      	b.n	5808 <__sfvwrite_r+0x214>
    588a:	4630      	mov	r0, r6
    588c:	4621      	mov	r1, r4
    588e:	f7ff fb6b 	bl	4f68 <_fflush_r>
    5892:	b910      	cbnz	r0, 589a <__sfvwrite_r+0x2a6>
    5894:	f8cd b004 	str.w	fp, [sp, #4]
    5898:	e7b9      	b.n	580e <__sfvwrite_r+0x21a>
    589a:	89a2      	ldrh	r2, [r4, #12]
    589c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
    58a0:	81a3      	strh	r3, [r4, #12]
    58a2:	f04f 30ff 	mov.w	r0, #4294967295
    58a6:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000058aa <_fwalk>:
    58aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    58ae:	4604      	mov	r4, r0
    58b0:	4688      	mov	r8, r1
    58b2:	f7ff fcb1 	bl	5218 <__sfp_lock_acquire>
    58b6:	f504 7438 	add.w	r4, r4, #736	; 0x2e0
    58ba:	2600      	movs	r6, #0
    58bc:	b18c      	cbz	r4, 58e2 <_fwalk+0x38>
    58be:	68a5      	ldr	r5, [r4, #8]
    58c0:	6867      	ldr	r7, [r4, #4]
    58c2:	3f01      	subs	r7, #1
    58c4:	d40b      	bmi.n	58de <_fwalk+0x34>
    58c6:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
    58ca:	b133      	cbz	r3, 58da <_fwalk+0x30>
    58cc:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
    58d0:	1c43      	adds	r3, r0, #1
    58d2:	d002      	beq.n	58da <_fwalk+0x30>
    58d4:	4628      	mov	r0, r5
    58d6:	47c0      	blx	r8
    58d8:	4306      	orrs	r6, r0
    58da:	3568      	adds	r5, #104	; 0x68
    58dc:	e7f1      	b.n	58c2 <_fwalk+0x18>
    58de:	6824      	ldr	r4, [r4, #0]
    58e0:	e7ec      	b.n	58bc <_fwalk+0x12>
    58e2:	f7ff fc9a 	bl	521a <__sfp_lock_release>
    58e6:	4630      	mov	r0, r6
    58e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000058ec <_fwalk_reent>:
    58ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    58f0:	4680      	mov	r8, r0
    58f2:	4689      	mov	r9, r1
    58f4:	f7ff fc90 	bl	5218 <__sfp_lock_acquire>
    58f8:	f508 7438 	add.w	r4, r8, #736	; 0x2e0
    58fc:	2600      	movs	r6, #0
    58fe:	b194      	cbz	r4, 5926 <_fwalk_reent+0x3a>
    5900:	68a5      	ldr	r5, [r4, #8]
    5902:	6867      	ldr	r7, [r4, #4]
    5904:	3f01      	subs	r7, #1
    5906:	d40c      	bmi.n	5922 <_fwalk_reent+0x36>
    5908:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
    590c:	b13b      	cbz	r3, 591e <_fwalk_reent+0x32>
    590e:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
    5912:	1c43      	adds	r3, r0, #1
    5914:	d003      	beq.n	591e <_fwalk_reent+0x32>
    5916:	4640      	mov	r0, r8
    5918:	4629      	mov	r1, r5
    591a:	47c8      	blx	r9
    591c:	4306      	orrs	r6, r0
    591e:	3568      	adds	r5, #104	; 0x68
    5920:	e7f0      	b.n	5904 <_fwalk_reent+0x18>
    5922:	6824      	ldr	r4, [r4, #0]
    5924:	e7eb      	b.n	58fe <_fwalk_reent+0x12>
    5926:	f7ff fc78 	bl	521a <__sfp_lock_release>
    592a:	4630      	mov	r0, r6
    592c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00005930 <iswspace>:
    5930:	28ff      	cmp	r0, #255	; 0xff
    5932:	d807      	bhi.n	5944 <iswspace+0x14>
    5934:	4b04      	ldr	r3, [pc, #16]	; (5948 <iswspace+0x18>)
    5936:	6819      	ldr	r1, [r3, #0]
    5938:	1808      	adds	r0, r1, r0
    593a:	7842      	ldrb	r2, [r0, #1]
    593c:	f002 0308 	and.w	r3, r2, #8
    5940:	b2d8      	uxtb	r0, r3
    5942:	4770      	bx	lr
    5944:	2000      	movs	r0, #0
    5946:	4770      	bx	lr
    5948:	20000480 	.word	0x20000480

0000594c <_setlocale_r>:
    594c:	b510      	push	{r4, lr}
    594e:	4614      	mov	r4, r2
    5950:	b90a      	cbnz	r2, 5956 <_setlocale_r+0xa>
    5952:	480c      	ldr	r0, [pc, #48]	; (5984 <_setlocale_r+0x38>)
    5954:	bd10      	pop	{r4, pc}
    5956:	4610      	mov	r0, r2
    5958:	490b      	ldr	r1, [pc, #44]	; (5988 <_setlocale_r+0x3c>)
    595a:	f000 fdc4 	bl	64e6 <strcmp>
    595e:	2800      	cmp	r0, #0
    5960:	d0f7      	beq.n	5952 <_setlocale_r+0x6>
    5962:	4620      	mov	r0, r4
    5964:	4907      	ldr	r1, [pc, #28]	; (5984 <_setlocale_r+0x38>)
    5966:	f000 fdbe 	bl	64e6 <strcmp>
    596a:	2800      	cmp	r0, #0
    596c:	d0f1      	beq.n	5952 <_setlocale_r+0x6>
    596e:	4620      	mov	r0, r4
    5970:	4906      	ldr	r1, [pc, #24]	; (598c <_setlocale_r+0x40>)
    5972:	f000 fdb8 	bl	64e6 <strcmp>
    5976:	4b03      	ldr	r3, [pc, #12]	; (5984 <_setlocale_r+0x38>)
    5978:	2800      	cmp	r0, #0
    597a:	bf0c      	ite	eq
    597c:	4618      	moveq	r0, r3
    597e:	2000      	movne	r0, #0
    5980:	bd10      	pop	{r4, pc}
    5982:	bf00      	nop
    5984:	00007694 	.word	0x00007694
    5988:	000077fd 	.word	0x000077fd
    598c:	00007697 	.word	0x00007697

00005990 <__locale_charset>:
    5990:	4800      	ldr	r0, [pc, #0]	; (5994 <__locale_charset+0x4>)
    5992:	4770      	bx	lr
    5994:	20000484 	.word	0x20000484

00005998 <__locale_mb_cur_max>:
    5998:	4b01      	ldr	r3, [pc, #4]	; (59a0 <__locale_mb_cur_max+0x8>)
    599a:	6a18      	ldr	r0, [r3, #32]
    599c:	4770      	bx	lr
    599e:	bf00      	nop
    59a0:	20000484 	.word	0x20000484

000059a4 <__locale_msgcharset>:
    59a4:	4800      	ldr	r0, [pc, #0]	; (59a8 <__locale_msgcharset+0x4>)
    59a6:	4770      	bx	lr
    59a8:	200004a8 	.word	0x200004a8

000059ac <__locale_cjk_lang>:
    59ac:	2000      	movs	r0, #0
    59ae:	4770      	bx	lr

000059b0 <_localeconv_r>:
    59b0:	4800      	ldr	r0, [pc, #0]	; (59b4 <_localeconv_r+0x4>)
    59b2:	4770      	bx	lr
    59b4:	200004c8 	.word	0x200004c8

000059b8 <setlocale>:
    59b8:	460a      	mov	r2, r1
    59ba:	4903      	ldr	r1, [pc, #12]	; (59c8 <setlocale+0x10>)
    59bc:	4603      	mov	r3, r0
    59be:	6808      	ldr	r0, [r1, #0]
    59c0:	4619      	mov	r1, r3
    59c2:	f7ff bfc3 	b.w	594c <_setlocale_r>
    59c6:	bf00      	nop
    59c8:	20000050 	.word	0x20000050

000059cc <localeconv>:
    59cc:	4800      	ldr	r0, [pc, #0]	; (59d0 <localeconv+0x4>)
    59ce:	4770      	bx	lr
    59d0:	200004c8 	.word	0x200004c8

000059d4 <__smakebuf_r>:
    59d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    59d6:	898b      	ldrh	r3, [r1, #12]
    59d8:	460c      	mov	r4, r1
    59da:	f003 0102 	and.w	r1, r3, #2
    59de:	b20a      	sxth	r2, r1
    59e0:	b091      	sub	sp, #68	; 0x44
    59e2:	4606      	mov	r6, r0
    59e4:	2a00      	cmp	r2, #0
    59e6:	d13f      	bne.n	5a68 <__smakebuf_r+0x94>
    59e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    59ec:	2900      	cmp	r1, #0
    59ee:	da0d      	bge.n	5a0c <__smakebuf_r+0x38>
    59f0:	89a7      	ldrh	r7, [r4, #12]
    59f2:	f007 0280 	and.w	r2, r7, #128	; 0x80
    59f6:	f447 6300 	orr.w	r3, r7, #2048	; 0x800
    59fa:	b210      	sxth	r0, r2
    59fc:	2800      	cmp	r0, #0
    59fe:	bf0c      	ite	eq
    5a00:	f44f 6580 	moveq.w	r5, #1024	; 0x400
    5a04:	2540      	movne	r5, #64	; 0x40
    5a06:	81a3      	strh	r3, [r4, #12]
    5a08:	2700      	movs	r7, #0
    5a0a:	e020      	b.n	5a4e <__smakebuf_r+0x7a>
    5a0c:	aa01      	add	r2, sp, #4
    5a0e:	f001 f9db 	bl	6dc8 <_fstat_r>
    5a12:	2800      	cmp	r0, #0
    5a14:	dbec      	blt.n	59f0 <__smakebuf_r+0x1c>
    5a16:	9802      	ldr	r0, [sp, #8]
    5a18:	f400 4570 	and.w	r5, r0, #61440	; 0xf000
    5a1c:	f5b5 5300 	subs.w	r3, r5, #8192	; 0x2000
    5a20:	425f      	negs	r7, r3
    5a22:	415f      	adcs	r7, r3
    5a24:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    5a28:	d10b      	bne.n	5a42 <__smakebuf_r+0x6e>
    5a2a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    5a2c:	4a1d      	ldr	r2, [pc, #116]	; (5aa4 <__smakebuf_r+0xd0>)
    5a2e:	4291      	cmp	r1, r2
    5a30:	d107      	bne.n	5a42 <__smakebuf_r+0x6e>
    5a32:	89a3      	ldrh	r3, [r4, #12]
    5a34:	f44f 6580 	mov.w	r5, #1024	; 0x400
    5a38:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
    5a3c:	81a1      	strh	r1, [r4, #12]
    5a3e:	64e5      	str	r5, [r4, #76]	; 0x4c
    5a40:	e005      	b.n	5a4e <__smakebuf_r+0x7a>
    5a42:	89a0      	ldrh	r0, [r4, #12]
    5a44:	f440 6500 	orr.w	r5, r0, #2048	; 0x800
    5a48:	81a5      	strh	r5, [r4, #12]
    5a4a:	f44f 6580 	mov.w	r5, #1024	; 0x400
    5a4e:	4630      	mov	r0, r6
    5a50:	4629      	mov	r1, r5
    5a52:	f000 f83b 	bl	5acc <_malloc_r>
    5a56:	b970      	cbnz	r0, 5a76 <__smakebuf_r+0xa2>
    5a58:	89a3      	ldrh	r3, [r4, #12]
    5a5a:	f403 7200 	and.w	r2, r3, #512	; 0x200
    5a5e:	b210      	sxth	r0, r2
    5a60:	b9e8      	cbnz	r0, 5a9e <__smakebuf_r+0xca>
    5a62:	f043 0102 	orr.w	r1, r3, #2
    5a66:	81a1      	strh	r1, [r4, #12]
    5a68:	f104 0343 	add.w	r3, r4, #67	; 0x43
    5a6c:	2201      	movs	r2, #1
    5a6e:	6023      	str	r3, [r4, #0]
    5a70:	6123      	str	r3, [r4, #16]
    5a72:	6162      	str	r2, [r4, #20]
    5a74:	e013      	b.n	5a9e <__smakebuf_r+0xca>
    5a76:	89a2      	ldrh	r2, [r4, #12]
    5a78:	490b      	ldr	r1, [pc, #44]	; (5aa8 <__smakebuf_r+0xd4>)
    5a7a:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    5a7e:	63f1      	str	r1, [r6, #60]	; 0x3c
    5a80:	81a3      	strh	r3, [r4, #12]
    5a82:	6020      	str	r0, [r4, #0]
    5a84:	6120      	str	r0, [r4, #16]
    5a86:	6165      	str	r5, [r4, #20]
    5a88:	b14f      	cbz	r7, 5a9e <__smakebuf_r+0xca>
    5a8a:	4630      	mov	r0, r6
    5a8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    5a90:	f001 f9ac 	bl	6dec <_isatty_r>
    5a94:	b118      	cbz	r0, 5a9e <__smakebuf_r+0xca>
    5a96:	89a0      	ldrh	r0, [r4, #12]
    5a98:	f040 0101 	orr.w	r1, r0, #1
    5a9c:	81a1      	strh	r1, [r4, #12]
    5a9e:	b011      	add	sp, #68	; 0x44
    5aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5aa2:	bf00      	nop
    5aa4:	000064bb 	.word	0x000064bb
    5aa8:	000050c5 	.word	0x000050c5

00005aac <malloc>:
    5aac:	4b02      	ldr	r3, [pc, #8]	; (5ab8 <malloc+0xc>)
    5aae:	4601      	mov	r1, r0
    5ab0:	6818      	ldr	r0, [r3, #0]
    5ab2:	f000 b80b 	b.w	5acc <_malloc_r>
    5ab6:	bf00      	nop
    5ab8:	20000050 	.word	0x20000050

00005abc <free>:
    5abc:	4b02      	ldr	r3, [pc, #8]	; (5ac8 <free+0xc>)
    5abe:	4601      	mov	r1, r0
    5ac0:	6818      	ldr	r0, [r3, #0]
    5ac2:	f7ff bce1 	b.w	5488 <_free_r>
    5ac6:	bf00      	nop
    5ac8:	20000050 	.word	0x20000050

00005acc <_malloc_r>:
    5acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5ad0:	f101 040b 	add.w	r4, r1, #11
    5ad4:	2c16      	cmp	r4, #22
    5ad6:	4606      	mov	r6, r0
    5ad8:	d903      	bls.n	5ae2 <_malloc_r+0x16>
    5ada:	f034 0407 	bics.w	r4, r4, #7
    5ade:	d501      	bpl.n	5ae4 <_malloc_r+0x18>
    5ae0:	e002      	b.n	5ae8 <_malloc_r+0x1c>
    5ae2:	2410      	movs	r4, #16
    5ae4:	428c      	cmp	r4, r1
    5ae6:	d202      	bcs.n	5aee <_malloc_r+0x22>
    5ae8:	250c      	movs	r5, #12
    5aea:	6035      	str	r5, [r6, #0]
    5aec:	e1d9      	b.n	5ea2 <_malloc_r+0x3d6>
    5aee:	4630      	mov	r0, r6
    5af0:	f000 fa7f 	bl	5ff2 <__malloc_lock>
    5af4:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
    5af8:	d214      	bcs.n	5b24 <_malloc_r+0x58>
    5afa:	4da0      	ldr	r5, [pc, #640]	; (5d7c <_malloc_r+0x2b0>)
    5afc:	08e1      	lsrs	r1, r4, #3
    5afe:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
    5b02:	68c5      	ldr	r5, [r0, #12]
    5b04:	4285      	cmp	r5, r0
    5b06:	d105      	bne.n	5b14 <_malloc_r+0x48>
    5b08:	f105 0308 	add.w	r3, r5, #8
    5b0c:	696d      	ldr	r5, [r5, #20]
    5b0e:	1c8a      	adds	r2, r1, #2
    5b10:	429d      	cmp	r5, r3
    5b12:	d044      	beq.n	5b9e <_malloc_r+0xd2>
    5b14:	68e8      	ldr	r0, [r5, #12]
    5b16:	68a9      	ldr	r1, [r5, #8]
    5b18:	686a      	ldr	r2, [r5, #4]
    5b1a:	60c8      	str	r0, [r1, #12]
    5b1c:	f022 0303 	bic.w	r3, r2, #3
    5b20:	6081      	str	r1, [r0, #8]
    5b22:	e059      	b.n	5bd8 <_malloc_r+0x10c>
    5b24:	0a62      	lsrs	r2, r4, #9
    5b26:	d101      	bne.n	5b2c <_malloc_r+0x60>
    5b28:	08e2      	lsrs	r2, r4, #3
    5b2a:	e01b      	b.n	5b64 <_malloc_r+0x98>
    5b2c:	2a04      	cmp	r2, #4
    5b2e:	d802      	bhi.n	5b36 <_malloc_r+0x6a>
    5b30:	09a2      	lsrs	r2, r4, #6
    5b32:	3238      	adds	r2, #56	; 0x38
    5b34:	e016      	b.n	5b64 <_malloc_r+0x98>
    5b36:	2a14      	cmp	r2, #20
    5b38:	d801      	bhi.n	5b3e <_malloc_r+0x72>
    5b3a:	325b      	adds	r2, #91	; 0x5b
    5b3c:	e012      	b.n	5b64 <_malloc_r+0x98>
    5b3e:	2a54      	cmp	r2, #84	; 0x54
    5b40:	d802      	bhi.n	5b48 <_malloc_r+0x7c>
    5b42:	0b22      	lsrs	r2, r4, #12
    5b44:	326e      	adds	r2, #110	; 0x6e
    5b46:	e00d      	b.n	5b64 <_malloc_r+0x98>
    5b48:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    5b4c:	d802      	bhi.n	5b54 <_malloc_r+0x88>
    5b4e:	0be2      	lsrs	r2, r4, #15
    5b50:	3277      	adds	r2, #119	; 0x77
    5b52:	e007      	b.n	5b64 <_malloc_r+0x98>
    5b54:	f240 5354 	movw	r3, #1364	; 0x554
    5b58:	429a      	cmp	r2, r3
    5b5a:	d802      	bhi.n	5b62 <_malloc_r+0x96>
    5b5c:	0ca2      	lsrs	r2, r4, #18
    5b5e:	327c      	adds	r2, #124	; 0x7c
    5b60:	e000      	b.n	5b64 <_malloc_r+0x98>
    5b62:	227e      	movs	r2, #126	; 0x7e
    5b64:	4885      	ldr	r0, [pc, #532]	; (5d7c <_malloc_r+0x2b0>)
    5b66:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
    5b6a:	68dd      	ldr	r5, [r3, #12]
    5b6c:	429d      	cmp	r5, r3
    5b6e:	d015      	beq.n	5b9c <_malloc_r+0xd0>
    5b70:	6869      	ldr	r1, [r5, #4]
    5b72:	f021 0103 	bic.w	r1, r1, #3
    5b76:	1b08      	subs	r0, r1, r4
    5b78:	280f      	cmp	r0, #15
    5b7a:	dd01      	ble.n	5b80 <_malloc_r+0xb4>
    5b7c:	3a01      	subs	r2, #1
    5b7e:	e00d      	b.n	5b9c <_malloc_r+0xd0>
    5b80:	2800      	cmp	r0, #0
    5b82:	db09      	blt.n	5b98 <_malloc_r+0xcc>
    5b84:	68eb      	ldr	r3, [r5, #12]
    5b86:	68aa      	ldr	r2, [r5, #8]
    5b88:	60d3      	str	r3, [r2, #12]
    5b8a:	609a      	str	r2, [r3, #8]
    5b8c:	186b      	adds	r3, r5, r1
    5b8e:	685a      	ldr	r2, [r3, #4]
    5b90:	f042 0001 	orr.w	r0, r2, #1
    5b94:	6058      	str	r0, [r3, #4]
    5b96:	e190      	b.n	5eba <_malloc_r+0x3ee>
    5b98:	68ed      	ldr	r5, [r5, #12]
    5b9a:	e7e7      	b.n	5b6c <_malloc_r+0xa0>
    5b9c:	3201      	adds	r2, #1
    5b9e:	4977      	ldr	r1, [pc, #476]	; (5d7c <_malloc_r+0x2b0>)
    5ba0:	690d      	ldr	r5, [r1, #16]
    5ba2:	f101 0708 	add.w	r7, r1, #8
    5ba6:	42bd      	cmp	r5, r7
    5ba8:	d068      	beq.n	5c7c <_malloc_r+0x1b0>
    5baa:	6868      	ldr	r0, [r5, #4]
    5bac:	f020 0303 	bic.w	r3, r0, #3
    5bb0:	1b18      	subs	r0, r3, r4
    5bb2:	280f      	cmp	r0, #15
    5bb4:	dd0c      	ble.n	5bd0 <_malloc_r+0x104>
    5bb6:	192b      	adds	r3, r5, r4
    5bb8:	614b      	str	r3, [r1, #20]
    5bba:	610b      	str	r3, [r1, #16]
    5bbc:	f044 0401 	orr.w	r4, r4, #1
    5bc0:	f040 0101 	orr.w	r1, r0, #1
    5bc4:	606c      	str	r4, [r5, #4]
    5bc6:	60df      	str	r7, [r3, #12]
    5bc8:	609f      	str	r7, [r3, #8]
    5bca:	6059      	str	r1, [r3, #4]
    5bcc:	5018      	str	r0, [r3, r0]
    5bce:	e174      	b.n	5eba <_malloc_r+0x3ee>
    5bd0:	2800      	cmp	r0, #0
    5bd2:	614f      	str	r7, [r1, #20]
    5bd4:	610f      	str	r7, [r1, #16]
    5bd6:	db01      	blt.n	5bdc <_malloc_r+0x110>
    5bd8:	18eb      	adds	r3, r5, r3
    5bda:	e7d8      	b.n	5b8e <_malloc_r+0xc2>
    5bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    5be0:	d20f      	bcs.n	5c02 <_malloc_r+0x136>
    5be2:	08db      	lsrs	r3, r3, #3
    5be4:	1098      	asrs	r0, r3, #2
    5be6:	2701      	movs	r7, #1
    5be8:	fa07 f700 	lsl.w	r7, r7, r0
    5bec:	6848      	ldr	r0, [r1, #4]
    5bee:	4307      	orrs	r7, r0
    5bf0:	604f      	str	r7, [r1, #4]
    5bf2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    5bf6:	60e9      	str	r1, [r5, #12]
    5bf8:	688b      	ldr	r3, [r1, #8]
    5bfa:	60ab      	str	r3, [r5, #8]
    5bfc:	60dd      	str	r5, [r3, #12]
    5bfe:	608d      	str	r5, [r1, #8]
    5c00:	e03c      	b.n	5c7c <_malloc_r+0x1b0>
    5c02:	0a58      	lsrs	r0, r3, #9
    5c04:	2804      	cmp	r0, #4
    5c06:	d802      	bhi.n	5c0e <_malloc_r+0x142>
    5c08:	0998      	lsrs	r0, r3, #6
    5c0a:	3038      	adds	r0, #56	; 0x38
    5c0c:	e016      	b.n	5c3c <_malloc_r+0x170>
    5c0e:	2814      	cmp	r0, #20
    5c10:	d801      	bhi.n	5c16 <_malloc_r+0x14a>
    5c12:	305b      	adds	r0, #91	; 0x5b
    5c14:	e012      	b.n	5c3c <_malloc_r+0x170>
    5c16:	2854      	cmp	r0, #84	; 0x54
    5c18:	d802      	bhi.n	5c20 <_malloc_r+0x154>
    5c1a:	0b18      	lsrs	r0, r3, #12
    5c1c:	306e      	adds	r0, #110	; 0x6e
    5c1e:	e00d      	b.n	5c3c <_malloc_r+0x170>
    5c20:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
    5c24:	d802      	bhi.n	5c2c <_malloc_r+0x160>
    5c26:	0bd8      	lsrs	r0, r3, #15
    5c28:	3077      	adds	r0, #119	; 0x77
    5c2a:	e007      	b.n	5c3c <_malloc_r+0x170>
    5c2c:	f240 5754 	movw	r7, #1364	; 0x554
    5c30:	42b8      	cmp	r0, r7
    5c32:	d802      	bhi.n	5c3a <_malloc_r+0x16e>
    5c34:	0c98      	lsrs	r0, r3, #18
    5c36:	307c      	adds	r0, #124	; 0x7c
    5c38:	e000      	b.n	5c3c <_malloc_r+0x170>
    5c3a:	207e      	movs	r0, #126	; 0x7e
    5c3c:	f8df e13c 	ldr.w	lr, [pc, #316]	; 5d7c <_malloc_r+0x2b0>
    5c40:	eb0e 07c0 	add.w	r7, lr, r0, lsl #3
    5c44:	68b9      	ldr	r1, [r7, #8]
    5c46:	42b9      	cmp	r1, r7
    5c48:	d10e      	bne.n	5c68 <_malloc_r+0x19c>
    5c4a:	1087      	asrs	r7, r0, #2
    5c4c:	2301      	movs	r3, #1
    5c4e:	fa03 f007 	lsl.w	r0, r3, r7
    5c52:	f8de 7004 	ldr.w	r7, [lr, #4]
    5c56:	ea40 0307 	orr.w	r3, r0, r7
    5c5a:	f8ce 3004 	str.w	r3, [lr, #4]
    5c5e:	4608      	mov	r0, r1
    5c60:	e008      	b.n	5c74 <_malloc_r+0x1a8>
    5c62:	6889      	ldr	r1, [r1, #8]
    5c64:	42b9      	cmp	r1, r7
    5c66:	d004      	beq.n	5c72 <_malloc_r+0x1a6>
    5c68:	6848      	ldr	r0, [r1, #4]
    5c6a:	f020 0003 	bic.w	r0, r0, #3
    5c6e:	4283      	cmp	r3, r0
    5c70:	d3f7      	bcc.n	5c62 <_malloc_r+0x196>
    5c72:	68c8      	ldr	r0, [r1, #12]
    5c74:	60e8      	str	r0, [r5, #12]
    5c76:	60a9      	str	r1, [r5, #8]
    5c78:	60cd      	str	r5, [r1, #12]
    5c7a:	6085      	str	r5, [r0, #8]
    5c7c:	4f3f      	ldr	r7, [pc, #252]	; (5d7c <_malloc_r+0x2b0>)
    5c7e:	1095      	asrs	r5, r2, #2
    5c80:	2001      	movs	r0, #1
    5c82:	6879      	ldr	r1, [r7, #4]
    5c84:	fa00 f305 	lsl.w	r3, r0, r5
    5c88:	428b      	cmp	r3, r1
    5c8a:	d85d      	bhi.n	5d48 <_malloc_r+0x27c>
    5c8c:	420b      	tst	r3, r1
    5c8e:	d105      	bne.n	5c9c <_malloc_r+0x1d0>
    5c90:	f022 0203 	bic.w	r2, r2, #3
    5c94:	005b      	lsls	r3, r3, #1
    5c96:	3204      	adds	r2, #4
    5c98:	420b      	tst	r3, r1
    5c9a:	d0fb      	beq.n	5c94 <_malloc_r+0x1c8>
    5c9c:	4d37      	ldr	r5, [pc, #220]	; (5d7c <_malloc_r+0x2b0>)
    5c9e:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
    5ca2:	4677      	mov	r7, lr
    5ca4:	4610      	mov	r0, r2
    5ca6:	68fd      	ldr	r5, [r7, #12]
    5ca8:	42bd      	cmp	r5, r7
    5caa:	d02d      	beq.n	5d08 <_malloc_r+0x23c>
    5cac:	6869      	ldr	r1, [r5, #4]
    5cae:	f021 0c03 	bic.w	ip, r1, #3
    5cb2:	ebc4 010c 	rsb	r1, r4, ip
    5cb6:	290f      	cmp	r1, #15
    5cb8:	dd13      	ble.n	5ce2 <_malloc_r+0x216>
    5cba:	192b      	adds	r3, r5, r4
    5cbc:	f044 0401 	orr.w	r4, r4, #1
    5cc0:	68ea      	ldr	r2, [r5, #12]
    5cc2:	606c      	str	r4, [r5, #4]
    5cc4:	f855 0f08 	ldr.w	r0, [r5, #8]!
    5cc8:	5059      	str	r1, [r3, r1]
    5cca:	60c2      	str	r2, [r0, #12]
    5ccc:	6090      	str	r0, [r2, #8]
    5cce:	4a2b      	ldr	r2, [pc, #172]	; (5d7c <_malloc_r+0x2b0>)
    5cd0:	f041 0001 	orr.w	r0, r1, #1
    5cd4:	6153      	str	r3, [r2, #20]
    5cd6:	6113      	str	r3, [r2, #16]
    5cd8:	3208      	adds	r2, #8
    5cda:	60da      	str	r2, [r3, #12]
    5cdc:	609a      	str	r2, [r3, #8]
    5cde:	6058      	str	r0, [r3, #4]
    5ce0:	e00c      	b.n	5cfc <_malloc_r+0x230>
    5ce2:	2900      	cmp	r1, #0
    5ce4:	db0e      	blt.n	5d04 <_malloc_r+0x238>
    5ce6:	eb05 000c 	add.w	r0, r5, ip
    5cea:	68e9      	ldr	r1, [r5, #12]
    5cec:	6842      	ldr	r2, [r0, #4]
    5cee:	f042 0301 	orr.w	r3, r2, #1
    5cf2:	6043      	str	r3, [r0, #4]
    5cf4:	f855 0f08 	ldr.w	r0, [r5, #8]!
    5cf8:	60c1      	str	r1, [r0, #12]
    5cfa:	6088      	str	r0, [r1, #8]
    5cfc:	4630      	mov	r0, r6
    5cfe:	f000 f979 	bl	5ff4 <__malloc_unlock>
    5d02:	e0de      	b.n	5ec2 <_malloc_r+0x3f6>
    5d04:	68ed      	ldr	r5, [r5, #12]
    5d06:	e7cf      	b.n	5ca8 <_malloc_r+0x1dc>
    5d08:	3001      	adds	r0, #1
    5d0a:	0781      	lsls	r1, r0, #30
    5d0c:	f105 0708 	add.w	r7, r5, #8
    5d10:	d1c9      	bne.n	5ca6 <_malloc_r+0x1da>
    5d12:	4671      	mov	r1, lr
    5d14:	0795      	lsls	r5, r2, #30
    5d16:	d105      	bne.n	5d24 <_malloc_r+0x258>
    5d18:	4a18      	ldr	r2, [pc, #96]	; (5d7c <_malloc_r+0x2b0>)
    5d1a:	6855      	ldr	r5, [r2, #4]
    5d1c:	ea25 0503 	bic.w	r5, r5, r3
    5d20:	6055      	str	r5, [r2, #4]
    5d22:	e005      	b.n	5d30 <_malloc_r+0x264>
    5d24:	f1a1 0708 	sub.w	r7, r1, #8
    5d28:	6809      	ldr	r1, [r1, #0]
    5d2a:	3a01      	subs	r2, #1
    5d2c:	42b9      	cmp	r1, r7
    5d2e:	d0f1      	beq.n	5d14 <_malloc_r+0x248>
    5d30:	4f12      	ldr	r7, [pc, #72]	; (5d7c <_malloc_r+0x2b0>)
    5d32:	687f      	ldr	r7, [r7, #4]
    5d34:	005b      	lsls	r3, r3, #1
    5d36:	42bb      	cmp	r3, r7
    5d38:	d806      	bhi.n	5d48 <_malloc_r+0x27c>
    5d3a:	b12b      	cbz	r3, 5d48 <_malloc_r+0x27c>
    5d3c:	4602      	mov	r2, r0
    5d3e:	423b      	tst	r3, r7
    5d40:	d1ac      	bne.n	5c9c <_malloc_r+0x1d0>
    5d42:	3204      	adds	r2, #4
    5d44:	005b      	lsls	r3, r3, #1
    5d46:	e7fa      	b.n	5d3e <_malloc_r+0x272>
    5d48:	4b0c      	ldr	r3, [pc, #48]	; (5d7c <_malloc_r+0x2b0>)
    5d4a:	689f      	ldr	r7, [r3, #8]
    5d4c:	6878      	ldr	r0, [r7, #4]
    5d4e:	f020 0903 	bic.w	r9, r0, #3
    5d52:	45a1      	cmp	r9, r4
    5d54:	4619      	mov	r1, r3
    5d56:	d304      	bcc.n	5d62 <_malloc_r+0x296>
    5d58:	ebc4 0009 	rsb	r0, r4, r9
    5d5c:	280f      	cmp	r0, #15
    5d5e:	f300 80a2 	bgt.w	5ea6 <_malloc_r+0x3da>
    5d62:	4a07      	ldr	r2, [pc, #28]	; (5d80 <_malloc_r+0x2b4>)
    5d64:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
    5d68:	6815      	ldr	r5, [r2, #0]
    5d6a:	3301      	adds	r3, #1
    5d6c:	eb07 0a09 	add.w	sl, r7, r9
    5d70:	eb04 0805 	add.w	r8, r4, r5
    5d74:	d106      	bne.n	5d84 <_malloc_r+0x2b8>
    5d76:	f108 0810 	add.w	r8, r8, #16
    5d7a:	e00b      	b.n	5d94 <_malloc_r+0x2c8>
    5d7c:	20000500 	.word	0x20000500
    5d80:	200009e4 	.word	0x200009e4
    5d84:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
    5d88:	f100 010f 	add.w	r1, r0, #15
    5d8c:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
    5d90:	f022 080f 	bic.w	r8, r2, #15
    5d94:	4630      	mov	r0, r6
    5d96:	4641      	mov	r1, r8
    5d98:	f000 fb1e 	bl	63d8 <_sbrk_r>
    5d9c:	1c42      	adds	r2, r0, #1
    5d9e:	4605      	mov	r5, r0
    5da0:	d071      	beq.n	5e86 <_malloc_r+0x3ba>
    5da2:	4550      	cmp	r0, sl
    5da4:	d202      	bcs.n	5dac <_malloc_r+0x2e0>
    5da6:	4b48      	ldr	r3, [pc, #288]	; (5ec8 <_malloc_r+0x3fc>)
    5da8:	429f      	cmp	r7, r3
    5daa:	d16c      	bne.n	5e86 <_malloc_r+0x3ba>
    5dac:	4847      	ldr	r0, [pc, #284]	; (5ecc <_malloc_r+0x400>)
    5dae:	4a46      	ldr	r2, [pc, #280]	; (5ec8 <_malloc_r+0x3fc>)
    5db0:	6841      	ldr	r1, [r0, #4]
    5db2:	4555      	cmp	r5, sl
    5db4:	eb08 0301 	add.w	r3, r8, r1
    5db8:	6043      	str	r3, [r0, #4]
    5dba:	d107      	bne.n	5dcc <_malloc_r+0x300>
    5dbc:	0529      	lsls	r1, r5, #20
    5dbe:	d105      	bne.n	5dcc <_malloc_r+0x300>
    5dc0:	6895      	ldr	r5, [r2, #8]
    5dc2:	44c8      	add	r8, r9
    5dc4:	f048 0001 	orr.w	r0, r8, #1
    5dc8:	6068      	str	r0, [r5, #4]
    5dca:	e051      	b.n	5e70 <_malloc_r+0x3a4>
    5dcc:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
    5dd0:	1c42      	adds	r2, r0, #1
    5dd2:	d103      	bne.n	5ddc <_malloc_r+0x310>
    5dd4:	4a3c      	ldr	r2, [pc, #240]	; (5ec8 <_malloc_r+0x3fc>)
    5dd6:	f8c2 5408 	str.w	r5, [r2, #1032]	; 0x408
    5dda:	e005      	b.n	5de8 <_malloc_r+0x31c>
    5ddc:	ebca 0a05 	rsb	sl, sl, r5
    5de0:	eb03 010a 	add.w	r1, r3, sl
    5de4:	4b39      	ldr	r3, [pc, #228]	; (5ecc <_malloc_r+0x400>)
    5de6:	6059      	str	r1, [r3, #4]
    5de8:	f015 0007 	ands.w	r0, r5, #7
    5dec:	bf1c      	itt	ne
    5dee:	f1c0 0008 	rsbne	r0, r0, #8
    5df2:	182d      	addne	r5, r5, r0
    5df4:	eb05 0c08 	add.w	ip, r5, r8
    5df8:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
    5dfc:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
    5e00:	eba1 581e 	sub.w	r8, r1, lr, lsr #20
    5e04:	4641      	mov	r1, r8
    5e06:	4630      	mov	r0, r6
    5e08:	f000 fae6 	bl	63d8 <_sbrk_r>
    5e0c:	4a2f      	ldr	r2, [pc, #188]	; (5ecc <_malloc_r+0x400>)
    5e0e:	1c43      	adds	r3, r0, #1
    5e10:	6853      	ldr	r3, [r2, #4]
    5e12:	bf08      	it	eq
    5e14:	f04f 0800 	moveq.w	r8, #0
    5e18:	eb08 0103 	add.w	r1, r8, r3
    5e1c:	bf08      	it	eq
    5e1e:	4628      	moveq	r0, r5
    5e20:	6051      	str	r1, [r2, #4]
    5e22:	1b40      	subs	r0, r0, r5
    5e24:	4a28      	ldr	r2, [pc, #160]	; (5ec8 <_malloc_r+0x3fc>)
    5e26:	eb00 0308 	add.w	r3, r0, r8
    5e2a:	f043 0101 	orr.w	r1, r3, #1
    5e2e:	4297      	cmp	r7, r2
    5e30:	6095      	str	r5, [r2, #8]
    5e32:	6069      	str	r1, [r5, #4]
    5e34:	d01c      	beq.n	5e70 <_malloc_r+0x3a4>
    5e36:	f1b9 0f0f 	cmp.w	r9, #15
    5e3a:	d802      	bhi.n	5e42 <_malloc_r+0x376>
    5e3c:	2201      	movs	r2, #1
    5e3e:	606a      	str	r2, [r5, #4]
    5e40:	e021      	b.n	5e86 <_malloc_r+0x3ba>
    5e42:	687d      	ldr	r5, [r7, #4]
    5e44:	f1a9 090c 	sub.w	r9, r9, #12
    5e48:	f029 0907 	bic.w	r9, r9, #7
    5e4c:	eb07 0309 	add.w	r3, r7, r9
    5e50:	f005 0201 	and.w	r2, r5, #1
    5e54:	2105      	movs	r1, #5
    5e56:	ea49 0002 	orr.w	r0, r9, r2
    5e5a:	f1b9 0f0f 	cmp.w	r9, #15
    5e5e:	6078      	str	r0, [r7, #4]
    5e60:	6059      	str	r1, [r3, #4]
    5e62:	6099      	str	r1, [r3, #8]
    5e64:	d904      	bls.n	5e70 <_malloc_r+0x3a4>
    5e66:	4630      	mov	r0, r6
    5e68:	f107 0108 	add.w	r1, r7, #8
    5e6c:	f7ff fb0c 	bl	5488 <_free_r>
    5e70:	4a16      	ldr	r2, [pc, #88]	; (5ecc <_malloc_r+0x400>)
    5e72:	6853      	ldr	r3, [r2, #4]
    5e74:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    5e76:	6b15      	ldr	r5, [r2, #48]	; 0x30
    5e78:	428b      	cmp	r3, r1
    5e7a:	bf88      	it	hi
    5e7c:	62d3      	strhi	r3, [r2, #44]	; 0x2c
    5e7e:	42ab      	cmp	r3, r5
    5e80:	bf84      	itt	hi
    5e82:	4d12      	ldrhi	r5, [pc, #72]	; (5ecc <_malloc_r+0x400>)
    5e84:	632b      	strhi	r3, [r5, #48]	; 0x30
    5e86:	4810      	ldr	r0, [pc, #64]	; (5ec8 <_malloc_r+0x3fc>)
    5e88:	6882      	ldr	r2, [r0, #8]
    5e8a:	6853      	ldr	r3, [r2, #4]
    5e8c:	f023 0103 	bic.w	r1, r3, #3
    5e90:	42a1      	cmp	r1, r4
    5e92:	ebc4 0001 	rsb	r0, r4, r1
    5e96:	d301      	bcc.n	5e9c <_malloc_r+0x3d0>
    5e98:	280f      	cmp	r0, #15
    5e9a:	dc04      	bgt.n	5ea6 <_malloc_r+0x3da>
    5e9c:	4630      	mov	r0, r6
    5e9e:	f000 f8a9 	bl	5ff4 <__malloc_unlock>
    5ea2:	2500      	movs	r5, #0
    5ea4:	e00d      	b.n	5ec2 <_malloc_r+0x3f6>
    5ea6:	4a08      	ldr	r2, [pc, #32]	; (5ec8 <_malloc_r+0x3fc>)
    5ea8:	6895      	ldr	r5, [r2, #8]
    5eaa:	f044 0301 	orr.w	r3, r4, #1
    5eae:	192c      	adds	r4, r5, r4
    5eb0:	f040 0101 	orr.w	r1, r0, #1
    5eb4:	606b      	str	r3, [r5, #4]
    5eb6:	6094      	str	r4, [r2, #8]
    5eb8:	6061      	str	r1, [r4, #4]
    5eba:	4630      	mov	r0, r6
    5ebc:	f000 f89a 	bl	5ff4 <__malloc_unlock>
    5ec0:	3508      	adds	r5, #8
    5ec2:	4628      	mov	r0, r5
    5ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5ec8:	20000500 	.word	0x20000500
    5ecc:	200009e4 	.word	0x200009e4

00005ed0 <_mbrtowc_r>:
    5ed0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5ed4:	4616      	mov	r6, r2
    5ed6:	4a10      	ldr	r2, [pc, #64]	; (5f18 <_mbrtowc_r+0x48>)
    5ed8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    5eda:	6817      	ldr	r7, [r2, #0]
    5edc:	4604      	mov	r4, r0
    5ede:	4689      	mov	r9, r1
    5ee0:	4698      	mov	r8, r3
    5ee2:	b946      	cbnz	r6, 5ef6 <_mbrtowc_r+0x26>
    5ee4:	f7ff fd54 	bl	5990 <__locale_charset>
    5ee8:	4631      	mov	r1, r6
    5eea:	e88d 0021 	stmia.w	sp, {r0, r5}
    5eee:	4a0b      	ldr	r2, [pc, #44]	; (5f1c <_mbrtowc_r+0x4c>)
    5ef0:	4620      	mov	r0, r4
    5ef2:	2301      	movs	r3, #1
    5ef4:	e007      	b.n	5f06 <_mbrtowc_r+0x36>
    5ef6:	f7ff fd4b 	bl	5990 <__locale_charset>
    5efa:	4649      	mov	r1, r9
    5efc:	e88d 0021 	stmia.w	sp, {r0, r5}
    5f00:	4632      	mov	r2, r6
    5f02:	4620      	mov	r0, r4
    5f04:	4643      	mov	r3, r8
    5f06:	47b8      	blx	r7
    5f08:	1c43      	adds	r3, r0, #1
    5f0a:	d103      	bne.n	5f14 <_mbrtowc_r+0x44>
    5f0c:	2300      	movs	r3, #0
    5f0e:	218a      	movs	r1, #138	; 0x8a
    5f10:	602b      	str	r3, [r5, #0]
    5f12:	6021      	str	r1, [r4, #0]
    5f14:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    5f18:	20000910 	.word	0x20000910
    5f1c:	00007697 	.word	0x00007697

00005f20 <mbrtowc>:
    5f20:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5f22:	9300      	str	r3, [sp, #0]
    5f24:	4b05      	ldr	r3, [pc, #20]	; (5f3c <mbrtowc+0x1c>)
    5f26:	4606      	mov	r6, r0
    5f28:	460d      	mov	r5, r1
    5f2a:	4614      	mov	r4, r2
    5f2c:	6818      	ldr	r0, [r3, #0]
    5f2e:	4631      	mov	r1, r6
    5f30:	462a      	mov	r2, r5
    5f32:	4623      	mov	r3, r4
    5f34:	f7ff ffcc 	bl	5ed0 <_mbrtowc_r>
    5f38:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    5f3a:	bf00      	nop
    5f3c:	20000050 	.word	0x20000050

00005f40 <__ascii_mbtowc>:
    5f40:	b082      	sub	sp, #8
    5f42:	b901      	cbnz	r1, 5f46 <__ascii_mbtowc+0x6>
    5f44:	a901      	add	r1, sp, #4
    5f46:	b13a      	cbz	r2, 5f58 <__ascii_mbtowc+0x18>
    5f48:	b143      	cbz	r3, 5f5c <__ascii_mbtowc+0x1c>
    5f4a:	7813      	ldrb	r3, [r2, #0]
    5f4c:	600b      	str	r3, [r1, #0]
    5f4e:	7810      	ldrb	r0, [r2, #0]
    5f50:	3000      	adds	r0, #0
    5f52:	bf18      	it	ne
    5f54:	2001      	movne	r0, #1
    5f56:	e003      	b.n	5f60 <__ascii_mbtowc+0x20>
    5f58:	4610      	mov	r0, r2
    5f5a:	e001      	b.n	5f60 <__ascii_mbtowc+0x20>
    5f5c:	f06f 0001 	mvn.w	r0, #1
    5f60:	b002      	add	sp, #8
    5f62:	4770      	bx	lr

00005f64 <_mbtowc_r>:
    5f64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5f68:	461f      	mov	r7, r3
    5f6a:	4b08      	ldr	r3, [pc, #32]	; (5f8c <_mbtowc_r+0x28>)
    5f6c:	4606      	mov	r6, r0
    5f6e:	4689      	mov	r9, r1
    5f70:	4690      	mov	r8, r2
    5f72:	681c      	ldr	r4, [r3, #0]
    5f74:	f7ff fd0c 	bl	5990 <__locale_charset>
    5f78:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    5f7a:	9000      	str	r0, [sp, #0]
    5f7c:	9501      	str	r5, [sp, #4]
    5f7e:	4630      	mov	r0, r6
    5f80:	4649      	mov	r1, r9
    5f82:	4642      	mov	r2, r8
    5f84:	463b      	mov	r3, r7
    5f86:	47a0      	blx	r4
    5f88:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    5f8c:	20000910 	.word	0x20000910

00005f90 <memchr>:
    5f90:	b510      	push	{r4, lr}
    5f92:	b2c9      	uxtb	r1, r1
    5f94:	4603      	mov	r3, r0
    5f96:	1882      	adds	r2, r0, r2
    5f98:	4293      	cmp	r3, r2
    5f9a:	4618      	mov	r0, r3
    5f9c:	d004      	beq.n	5fa8 <memchr+0x18>
    5f9e:	7804      	ldrb	r4, [r0, #0]
    5fa0:	3301      	adds	r3, #1
    5fa2:	428c      	cmp	r4, r1
    5fa4:	d1f8      	bne.n	5f98 <memchr+0x8>
    5fa6:	e000      	b.n	5faa <memchr+0x1a>
    5fa8:	2000      	movs	r0, #0
    5faa:	bd10      	pop	{r4, pc}

00005fac <memcpy>:
    5fac:	b510      	push	{r4, lr}
    5fae:	2300      	movs	r3, #0
    5fb0:	4293      	cmp	r3, r2
    5fb2:	d003      	beq.n	5fbc <memcpy+0x10>
    5fb4:	5ccc      	ldrb	r4, [r1, r3]
    5fb6:	54c4      	strb	r4, [r0, r3]
    5fb8:	3301      	adds	r3, #1
    5fba:	e7f9      	b.n	5fb0 <memcpy+0x4>
    5fbc:	bd10      	pop	{r4, pc}

00005fbe <memmove>:
    5fbe:	4281      	cmp	r1, r0
    5fc0:	b570      	push	{r4, r5, r6, lr}
    5fc2:	d20e      	bcs.n	5fe2 <memmove+0x24>
    5fc4:	188c      	adds	r4, r1, r2
    5fc6:	42a0      	cmp	r0, r4
    5fc8:	d20b      	bcs.n	5fe2 <memmove+0x24>
    5fca:	1885      	adds	r5, r0, r2
    5fcc:	4613      	mov	r3, r2
    5fce:	f113 33ff 	adds.w	r3, r3, #4294967295
    5fd2:	d305      	bcc.n	5fe0 <memmove+0x22>
    5fd4:	4251      	negs	r1, r2
    5fd6:	1866      	adds	r6, r4, r1
    5fd8:	1869      	adds	r1, r5, r1
    5fda:	5cf6      	ldrb	r6, [r6, r3]
    5fdc:	54ce      	strb	r6, [r1, r3]
    5fde:	e7f6      	b.n	5fce <memmove+0x10>
    5fe0:	bd70      	pop	{r4, r5, r6, pc}
    5fe2:	2300      	movs	r3, #0
    5fe4:	4293      	cmp	r3, r2
    5fe6:	d003      	beq.n	5ff0 <memmove+0x32>
    5fe8:	5ccc      	ldrb	r4, [r1, r3]
    5fea:	54c4      	strb	r4, [r0, r3]
    5fec:	3301      	adds	r3, #1
    5fee:	e7f9      	b.n	5fe4 <memmove+0x26>
    5ff0:	bd70      	pop	{r4, r5, r6, pc}

00005ff2 <__malloc_lock>:
    5ff2:	4770      	bx	lr

00005ff4 <__malloc_unlock>:
    5ff4:	4770      	bx	lr
	...

00005ff8 <_realloc_r>:
    5ff8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5ffc:	4681      	mov	r9, r0
    5ffe:	4616      	mov	r6, r2
    6000:	460c      	mov	r4, r1
    6002:	b921      	cbnz	r1, 600e <_realloc_r+0x16>
    6004:	4611      	mov	r1, r2
    6006:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    600a:	f7ff bd5f 	b.w	5acc <_malloc_r>
    600e:	f7ff fff0 	bl	5ff2 <__malloc_lock>
    6012:	f106 070b 	add.w	r7, r6, #11
    6016:	f854 5c04 	ldr.w	r5, [r4, #-4]
    601a:	2f16      	cmp	r7, #22
    601c:	f1a4 0b08 	sub.w	fp, r4, #8
    6020:	f025 0803 	bic.w	r8, r5, #3
    6024:	d903      	bls.n	602e <_realloc_r+0x36>
    6026:	f037 0707 	bics.w	r7, r7, #7
    602a:	d501      	bpl.n	6030 <_realloc_r+0x38>
    602c:	e002      	b.n	6034 <_realloc_r+0x3c>
    602e:	2710      	movs	r7, #16
    6030:	42b7      	cmp	r7, r6
    6032:	d204      	bcs.n	603e <_realloc_r+0x46>
    6034:	200c      	movs	r0, #12
    6036:	f8c9 0000 	str.w	r0, [r9]
    603a:	2600      	movs	r6, #0
    603c:	e145      	b.n	62ca <_realloc_r+0x2d2>
    603e:	45b8      	cmp	r8, r7
    6040:	f280 811a 	bge.w	6278 <_realloc_r+0x280>
    6044:	4aa2      	ldr	r2, [pc, #648]	; (62d0 <_realloc_r+0x2d8>)
    6046:	6891      	ldr	r1, [r2, #8]
    6048:	eb0b 0308 	add.w	r3, fp, r8
    604c:	428b      	cmp	r3, r1
    604e:	d006      	beq.n	605e <_realloc_r+0x66>
    6050:	6858      	ldr	r0, [r3, #4]
    6052:	f020 0201 	bic.w	r2, r0, #1
    6056:	1898      	adds	r0, r3, r2
    6058:	6842      	ldr	r2, [r0, #4]
    605a:	07d0      	lsls	r0, r2, #31
    605c:	d426      	bmi.n	60ac <_realloc_r+0xb4>
    605e:	685a      	ldr	r2, [r3, #4]
    6060:	428b      	cmp	r3, r1
    6062:	f022 0003 	bic.w	r0, r2, #3
    6066:	eb00 0a08 	add.w	sl, r0, r8
    606a:	d118      	bne.n	609e <_realloc_r+0xa6>
    606c:	f107 0210 	add.w	r2, r7, #16
    6070:	4592      	cmp	sl, r2
    6072:	db1d      	blt.n	60b0 <_realloc_r+0xb8>
    6074:	eb0b 0507 	add.w	r5, fp, r7
    6078:	ebc7 0a0a 	rsb	sl, r7, sl
    607c:	f04a 0101 	orr.w	r1, sl, #1
    6080:	6069      	str	r1, [r5, #4]
    6082:	f854 2c04 	ldr.w	r2, [r4, #-4]
    6086:	4e92      	ldr	r6, [pc, #584]	; (62d0 <_realloc_r+0x2d8>)
    6088:	f002 0301 	and.w	r3, r2, #1
    608c:	431f      	orrs	r7, r3
    608e:	60b5      	str	r5, [r6, #8]
    6090:	f844 7c04 	str.w	r7, [r4, #-4]
    6094:	4648      	mov	r0, r9
    6096:	f7ff ffad 	bl	5ff4 <__malloc_unlock>
    609a:	4626      	mov	r6, r4
    609c:	e115      	b.n	62ca <_realloc_r+0x2d2>
    609e:	45ba      	cmp	sl, r7
    60a0:	db06      	blt.n	60b0 <_realloc_r+0xb8>
    60a2:	68dd      	ldr	r5, [r3, #12]
    60a4:	689e      	ldr	r6, [r3, #8]
    60a6:	60f5      	str	r5, [r6, #12]
    60a8:	60ae      	str	r6, [r5, #8]
    60aa:	e0e6      	b.n	627a <_realloc_r+0x282>
    60ac:	2000      	movs	r0, #0
    60ae:	4603      	mov	r3, r0
    60b0:	07ea      	lsls	r2, r5, #31
    60b2:	f100 8091 	bmi.w	61d8 <_realloc_r+0x1e0>
    60b6:	f854 5c08 	ldr.w	r5, [r4, #-8]
    60ba:	ebc5 050b 	rsb	r5, r5, fp
    60be:	686a      	ldr	r2, [r5, #4]
    60c0:	f022 0203 	bic.w	r2, r2, #3
    60c4:	2b00      	cmp	r3, #0
    60c6:	d051      	beq.n	616c <_realloc_r+0x174>
    60c8:	eb02 0a08 	add.w	sl, r2, r8
    60cc:	428b      	cmp	r3, r1
    60ce:	4482      	add	sl, r0
    60d0:	d145      	bne.n	615e <_realloc_r+0x166>
    60d2:	f107 0310 	add.w	r3, r7, #16
    60d6:	459a      	cmp	sl, r3
    60d8:	db48      	blt.n	616c <_realloc_r+0x174>
    60da:	462e      	mov	r6, r5
    60dc:	68e9      	ldr	r1, [r5, #12]
    60de:	f856 3f08 	ldr.w	r3, [r6, #8]!
    60e2:	f1a8 0204 	sub.w	r2, r8, #4
    60e6:	2a24      	cmp	r2, #36	; 0x24
    60e8:	60d9      	str	r1, [r3, #12]
    60ea:	608b      	str	r3, [r1, #8]
    60ec:	d825      	bhi.n	613a <_realloc_r+0x142>
    60ee:	2a13      	cmp	r2, #19
    60f0:	d91b      	bls.n	612a <_realloc_r+0x132>
    60f2:	6821      	ldr	r1, [r4, #0]
    60f4:	60a9      	str	r1, [r5, #8]
    60f6:	6863      	ldr	r3, [r4, #4]
    60f8:	2a1b      	cmp	r2, #27
    60fa:	60eb      	str	r3, [r5, #12]
    60fc:	d803      	bhi.n	6106 <_realloc_r+0x10e>
    60fe:	f105 0010 	add.w	r0, r5, #16
    6102:	3408      	adds	r4, #8
    6104:	e012      	b.n	612c <_realloc_r+0x134>
    6106:	68a0      	ldr	r0, [r4, #8]
    6108:	6128      	str	r0, [r5, #16]
    610a:	68e1      	ldr	r1, [r4, #12]
    610c:	2a24      	cmp	r2, #36	; 0x24
    610e:	6169      	str	r1, [r5, #20]
    6110:	d003      	beq.n	611a <_realloc_r+0x122>
    6112:	f105 0018 	add.w	r0, r5, #24
    6116:	3410      	adds	r4, #16
    6118:	e008      	b.n	612c <_realloc_r+0x134>
    611a:	6922      	ldr	r2, [r4, #16]
    611c:	61aa      	str	r2, [r5, #24]
    611e:	6963      	ldr	r3, [r4, #20]
    6120:	f105 0020 	add.w	r0, r5, #32
    6124:	61eb      	str	r3, [r5, #28]
    6126:	3418      	adds	r4, #24
    6128:	e000      	b.n	612c <_realloc_r+0x134>
    612a:	4630      	mov	r0, r6
    612c:	6821      	ldr	r1, [r4, #0]
    612e:	6001      	str	r1, [r0, #0]
    6130:	6862      	ldr	r2, [r4, #4]
    6132:	6042      	str	r2, [r0, #4]
    6134:	68a3      	ldr	r3, [r4, #8]
    6136:	6083      	str	r3, [r0, #8]
    6138:	e003      	b.n	6142 <_realloc_r+0x14a>
    613a:	4630      	mov	r0, r6
    613c:	4621      	mov	r1, r4
    613e:	f7ff ff3e 	bl	5fbe <memmove>
    6142:	19e8      	adds	r0, r5, r7
    6144:	ebc7 0a0a 	rsb	sl, r7, sl
    6148:	f04a 0201 	orr.w	r2, sl, #1
    614c:	6042      	str	r2, [r0, #4]
    614e:	686b      	ldr	r3, [r5, #4]
    6150:	495f      	ldr	r1, [pc, #380]	; (62d0 <_realloc_r+0x2d8>)
    6152:	6088      	str	r0, [r1, #8]
    6154:	f003 0001 	and.w	r0, r3, #1
    6158:	4307      	orrs	r7, r0
    615a:	606f      	str	r7, [r5, #4]
    615c:	e088      	b.n	6270 <_realloc_r+0x278>
    615e:	45ba      	cmp	sl, r7
    6160:	db04      	blt.n	616c <_realloc_r+0x174>
    6162:	68d9      	ldr	r1, [r3, #12]
    6164:	6898      	ldr	r0, [r3, #8]
    6166:	60c1      	str	r1, [r0, #12]
    6168:	6088      	str	r0, [r1, #8]
    616a:	e003      	b.n	6174 <_realloc_r+0x17c>
    616c:	eb02 0a08 	add.w	sl, r2, r8
    6170:	45ba      	cmp	sl, r7
    6172:	db31      	blt.n	61d8 <_realloc_r+0x1e0>
    6174:	4628      	mov	r0, r5
    6176:	68eb      	ldr	r3, [r5, #12]
    6178:	f850 1f08 	ldr.w	r1, [r0, #8]!
    617c:	f1a8 0204 	sub.w	r2, r8, #4
    6180:	2a24      	cmp	r2, #36	; 0x24
    6182:	60cb      	str	r3, [r1, #12]
    6184:	6099      	str	r1, [r3, #8]
    6186:	d823      	bhi.n	61d0 <_realloc_r+0x1d8>
    6188:	2a13      	cmp	r2, #19
    618a:	d91a      	bls.n	61c2 <_realloc_r+0x1ca>
    618c:	6820      	ldr	r0, [r4, #0]
    618e:	60a8      	str	r0, [r5, #8]
    6190:	6866      	ldr	r6, [r4, #4]
    6192:	2a1b      	cmp	r2, #27
    6194:	60ee      	str	r6, [r5, #12]
    6196:	d803      	bhi.n	61a0 <_realloc_r+0x1a8>
    6198:	f105 0010 	add.w	r0, r5, #16
    619c:	3408      	adds	r4, #8
    619e:	e010      	b.n	61c2 <_realloc_r+0x1ca>
    61a0:	68a3      	ldr	r3, [r4, #8]
    61a2:	612b      	str	r3, [r5, #16]
    61a4:	68e1      	ldr	r1, [r4, #12]
    61a6:	2a24      	cmp	r2, #36	; 0x24
    61a8:	6169      	str	r1, [r5, #20]
    61aa:	d003      	beq.n	61b4 <_realloc_r+0x1bc>
    61ac:	f105 0018 	add.w	r0, r5, #24
    61b0:	3410      	adds	r4, #16
    61b2:	e006      	b.n	61c2 <_realloc_r+0x1ca>
    61b4:	6922      	ldr	r2, [r4, #16]
    61b6:	61aa      	str	r2, [r5, #24]
    61b8:	6960      	ldr	r0, [r4, #20]
    61ba:	3418      	adds	r4, #24
    61bc:	61e8      	str	r0, [r5, #28]
    61be:	f105 0020 	add.w	r0, r5, #32
    61c2:	6826      	ldr	r6, [r4, #0]
    61c4:	6006      	str	r6, [r0, #0]
    61c6:	6863      	ldr	r3, [r4, #4]
    61c8:	6043      	str	r3, [r0, #4]
    61ca:	68a1      	ldr	r1, [r4, #8]
    61cc:	6081      	str	r1, [r0, #8]
    61ce:	e055      	b.n	627c <_realloc_r+0x284>
    61d0:	4621      	mov	r1, r4
    61d2:	f7ff fef4 	bl	5fbe <memmove>
    61d6:	e051      	b.n	627c <_realloc_r+0x284>
    61d8:	4631      	mov	r1, r6
    61da:	4648      	mov	r0, r9
    61dc:	f7ff fc76 	bl	5acc <_malloc_r>
    61e0:	4606      	mov	r6, r0
    61e2:	2800      	cmp	r0, #0
    61e4:	d044      	beq.n	6270 <_realloc_r+0x278>
    61e6:	f854 1c04 	ldr.w	r1, [r4, #-4]
    61ea:	f021 0301 	bic.w	r3, r1, #1
    61ee:	f1a0 0208 	sub.w	r2, r0, #8
    61f2:	eb0b 0103 	add.w	r1, fp, r3
    61f6:	428a      	cmp	r2, r1
    61f8:	d106      	bne.n	6208 <_realloc_r+0x210>
    61fa:	f850 6c04 	ldr.w	r6, [r0, #-4]
    61fe:	f026 0503 	bic.w	r5, r6, #3
    6202:	eb05 0a08 	add.w	sl, r5, r8
    6206:	e038      	b.n	627a <_realloc_r+0x282>
    6208:	f1a8 0204 	sub.w	r2, r8, #4
    620c:	2a24      	cmp	r2, #36	; 0x24
    620e:	d828      	bhi.n	6262 <_realloc_r+0x26a>
    6210:	2a13      	cmp	r2, #19
    6212:	d91e      	bls.n	6252 <_realloc_r+0x25a>
    6214:	6823      	ldr	r3, [r4, #0]
    6216:	6003      	str	r3, [r0, #0]
    6218:	6861      	ldr	r1, [r4, #4]
    621a:	2a1b      	cmp	r2, #27
    621c:	6041      	str	r1, [r0, #4]
    621e:	d804      	bhi.n	622a <_realloc_r+0x232>
    6220:	f100 0008 	add.w	r0, r0, #8
    6224:	f104 0208 	add.w	r2, r4, #8
    6228:	e014      	b.n	6254 <_realloc_r+0x25c>
    622a:	68a0      	ldr	r0, [r4, #8]
    622c:	60b0      	str	r0, [r6, #8]
    622e:	68e3      	ldr	r3, [r4, #12]
    6230:	2a24      	cmp	r2, #36	; 0x24
    6232:	60f3      	str	r3, [r6, #12]
    6234:	d004      	beq.n	6240 <_realloc_r+0x248>
    6236:	f106 0010 	add.w	r0, r6, #16
    623a:	f104 0210 	add.w	r2, r4, #16
    623e:	e009      	b.n	6254 <_realloc_r+0x25c>
    6240:	6922      	ldr	r2, [r4, #16]
    6242:	6132      	str	r2, [r6, #16]
    6244:	6961      	ldr	r1, [r4, #20]
    6246:	f106 0018 	add.w	r0, r6, #24
    624a:	6171      	str	r1, [r6, #20]
    624c:	f104 0218 	add.w	r2, r4, #24
    6250:	e000      	b.n	6254 <_realloc_r+0x25c>
    6252:	4622      	mov	r2, r4
    6254:	6813      	ldr	r3, [r2, #0]
    6256:	6003      	str	r3, [r0, #0]
    6258:	6851      	ldr	r1, [r2, #4]
    625a:	6041      	str	r1, [r0, #4]
    625c:	6892      	ldr	r2, [r2, #8]
    625e:	6082      	str	r2, [r0, #8]
    6260:	e002      	b.n	6268 <_realloc_r+0x270>
    6262:	4621      	mov	r1, r4
    6264:	f7ff feab 	bl	5fbe <memmove>
    6268:	4648      	mov	r0, r9
    626a:	4621      	mov	r1, r4
    626c:	f7ff f90c 	bl	5488 <_free_r>
    6270:	4648      	mov	r0, r9
    6272:	f7ff febf 	bl	5ff4 <__malloc_unlock>
    6276:	e028      	b.n	62ca <_realloc_r+0x2d2>
    6278:	46c2      	mov	sl, r8
    627a:	465d      	mov	r5, fp
    627c:	ebc7 000a 	rsb	r0, r7, sl
    6280:	280f      	cmp	r0, #15
    6282:	686a      	ldr	r2, [r5, #4]
    6284:	d911      	bls.n	62aa <_realloc_r+0x2b2>
    6286:	19e9      	adds	r1, r5, r7
    6288:	f002 0601 	and.w	r6, r2, #1
    628c:	4337      	orrs	r7, r6
    628e:	f040 0301 	orr.w	r3, r0, #1
    6292:	1808      	adds	r0, r1, r0
    6294:	606f      	str	r7, [r5, #4]
    6296:	604b      	str	r3, [r1, #4]
    6298:	6842      	ldr	r2, [r0, #4]
    629a:	f042 0601 	orr.w	r6, r2, #1
    629e:	6046      	str	r6, [r0, #4]
    62a0:	3108      	adds	r1, #8
    62a2:	4648      	mov	r0, r9
    62a4:	f7ff f8f0 	bl	5488 <_free_r>
    62a8:	e00a      	b.n	62c0 <_realloc_r+0x2c8>
    62aa:	f002 0601 	and.w	r6, r2, #1
    62ae:	eb05 010a 	add.w	r1, r5, sl
    62b2:	ea4a 0306 	orr.w	r3, sl, r6
    62b6:	606b      	str	r3, [r5, #4]
    62b8:	6848      	ldr	r0, [r1, #4]
    62ba:	f040 0201 	orr.w	r2, r0, #1
    62be:	604a      	str	r2, [r1, #4]
    62c0:	4648      	mov	r0, r9
    62c2:	f7ff fe97 	bl	5ff4 <__malloc_unlock>
    62c6:	f105 0608 	add.w	r6, r5, #8
    62ca:	4630      	mov	r0, r6
    62cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    62d0:	20000500 	.word	0x20000500

000062d4 <lflush>:
    62d4:	8983      	ldrh	r3, [r0, #12]
    62d6:	f003 0109 	and.w	r1, r3, #9
    62da:	2909      	cmp	r1, #9
    62dc:	d101      	bne.n	62e2 <lflush+0xe>
    62de:	f7fe bedb 	b.w	5098 <fflush>
    62e2:	2000      	movs	r0, #0
    62e4:	4770      	bx	lr

000062e6 <__srefill_r>:
    62e6:	b570      	push	{r4, r5, r6, lr}
    62e8:	460c      	mov	r4, r1
    62ea:	4605      	mov	r5, r0
    62ec:	b118      	cbz	r0, 62f6 <__srefill_r+0x10>
    62ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
    62f0:	b90b      	cbnz	r3, 62f6 <__srefill_r+0x10>
    62f2:	f7fe ff2d 	bl	5150 <__sinit>
    62f6:	89a0      	ldrh	r0, [r4, #12]
    62f8:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
    62fc:	b211      	sxth	r1, r2
    62fe:	b931      	cbnz	r1, 630e <__srefill_r+0x28>
    6300:	f440 5300 	orr.w	r3, r0, #8192	; 0x2000
    6304:	6e60      	ldr	r0, [r4, #100]	; 0x64
    6306:	81a3      	strh	r3, [r4, #12]
    6308:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
    630c:	6662      	str	r2, [r4, #100]	; 0x64
    630e:	89a3      	ldrh	r3, [r4, #12]
    6310:	f003 0020 	and.w	r0, r3, #32
    6314:	2100      	movs	r1, #0
    6316:	b202      	sxth	r2, r0
    6318:	6061      	str	r1, [r4, #4]
    631a:	2a00      	cmp	r2, #0
    631c:	d152      	bne.n	63c4 <__srefill_r+0xde>
    631e:	f003 0104 	and.w	r1, r3, #4
    6322:	b208      	sxth	r0, r1
    6324:	b9d8      	cbnz	r0, 635e <__srefill_r+0x78>
    6326:	f003 0010 	and.w	r0, r3, #16
    632a:	b202      	sxth	r2, r0
    632c:	b912      	cbnz	r2, 6334 <__srefill_r+0x4e>
    632e:	2109      	movs	r1, #9
    6330:	6029      	str	r1, [r5, #0]
    6332:	e044      	b.n	63be <__srefill_r+0xd8>
    6334:	f003 0308 	and.w	r3, r3, #8
    6338:	b219      	sxth	r1, r3
    633a:	b159      	cbz	r1, 6354 <__srefill_r+0x6e>
    633c:	4628      	mov	r0, r5
    633e:	4621      	mov	r1, r4
    6340:	f7fe fe12 	bl	4f68 <_fflush_r>
    6344:	2800      	cmp	r0, #0
    6346:	d13d      	bne.n	63c4 <__srefill_r+0xde>
    6348:	89a6      	ldrh	r6, [r4, #12]
    634a:	60a0      	str	r0, [r4, #8]
    634c:	f026 0208 	bic.w	r2, r6, #8
    6350:	81a2      	strh	r2, [r4, #12]
    6352:	61a0      	str	r0, [r4, #24]
    6354:	89a0      	ldrh	r0, [r4, #12]
    6356:	f040 0304 	orr.w	r3, r0, #4
    635a:	81a3      	strh	r3, [r4, #12]
    635c:	e010      	b.n	6380 <__srefill_r+0x9a>
    635e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    6360:	b171      	cbz	r1, 6380 <__srefill_r+0x9a>
    6362:	f104 0340 	add.w	r3, r4, #64	; 0x40
    6366:	4299      	cmp	r1, r3
    6368:	d002      	beq.n	6370 <__srefill_r+0x8a>
    636a:	4628      	mov	r0, r5
    636c:	f7ff f88c 	bl	5488 <_free_r>
    6370:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    6372:	2000      	movs	r0, #0
    6374:	6320      	str	r0, [r4, #48]	; 0x30
    6376:	6062      	str	r2, [r4, #4]
    6378:	b112      	cbz	r2, 6380 <__srefill_r+0x9a>
    637a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    637c:	6021      	str	r1, [r4, #0]
    637e:	bd70      	pop	{r4, r5, r6, pc}
    6380:	6921      	ldr	r1, [r4, #16]
    6382:	b919      	cbnz	r1, 638c <__srefill_r+0xa6>
    6384:	4628      	mov	r0, r5
    6386:	4621      	mov	r1, r4
    6388:	f7ff fb24 	bl	59d4 <__smakebuf_r>
    638c:	89a6      	ldrh	r6, [r4, #12]
    638e:	07b3      	lsls	r3, r6, #30
    6390:	d004      	beq.n	639c <__srefill_r+0xb6>
    6392:	4a0f      	ldr	r2, [pc, #60]	; (63d0 <__srefill_r+0xea>)
    6394:	490f      	ldr	r1, [pc, #60]	; (63d4 <__srefill_r+0xee>)
    6396:	6810      	ldr	r0, [r2, #0]
    6398:	f7ff fa87 	bl	58aa <_fwalk>
    639c:	6922      	ldr	r2, [r4, #16]
    639e:	6a26      	ldr	r6, [r4, #32]
    63a0:	6022      	str	r2, [r4, #0]
    63a2:	4628      	mov	r0, r5
    63a4:	69e1      	ldr	r1, [r4, #28]
    63a6:	6963      	ldr	r3, [r4, #20]
    63a8:	47b0      	blx	r6
    63aa:	2800      	cmp	r0, #0
    63ac:	6060      	str	r0, [r4, #4]
    63ae:	dc0c      	bgt.n	63ca <__srefill_r+0xe4>
    63b0:	89a3      	ldrh	r3, [r4, #12]
    63b2:	d102      	bne.n	63ba <__srefill_r+0xd4>
    63b4:	f043 0220 	orr.w	r2, r3, #32
    63b8:	e003      	b.n	63c2 <__srefill_r+0xdc>
    63ba:	2000      	movs	r0, #0
    63bc:	6060      	str	r0, [r4, #4]
    63be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    63c2:	81a2      	strh	r2, [r4, #12]
    63c4:	f04f 30ff 	mov.w	r0, #4294967295
    63c8:	bd70      	pop	{r4, r5, r6, pc}
    63ca:	2000      	movs	r0, #0
    63cc:	bd70      	pop	{r4, r5, r6, pc}
    63ce:	bf00      	nop
    63d0:	00007690 	.word	0x00007690
    63d4:	000062d5 	.word	0x000062d5

000063d8 <_sbrk_r>:
    63d8:	b538      	push	{r3, r4, r5, lr}
    63da:	4c06      	ldr	r4, [pc, #24]	; (63f4 <_sbrk_r+0x1c>)
    63dc:	2300      	movs	r3, #0
    63de:	4605      	mov	r5, r0
    63e0:	4608      	mov	r0, r1
    63e2:	6023      	str	r3, [r4, #0]
    63e4:	f7fd fafe 	bl	39e4 <_sbrk>
    63e8:	1c43      	adds	r3, r0, #1
    63ea:	d102      	bne.n	63f2 <_sbrk_r+0x1a>
    63ec:	6821      	ldr	r1, [r4, #0]
    63ee:	b101      	cbz	r1, 63f2 <_sbrk_r+0x1a>
    63f0:	6029      	str	r1, [r5, #0]
    63f2:	bd38      	pop	{r3, r4, r5, pc}
    63f4:	20000aac 	.word	0x20000aac

000063f8 <__sccl>:
    63f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    63fa:	780b      	ldrb	r3, [r1, #0]
    63fc:	2b5e      	cmp	r3, #94	; 0x5e
    63fe:	d002      	beq.n	6406 <__sccl+0xe>
    6400:	3101      	adds	r1, #1
    6402:	2400      	movs	r4, #0
    6404:	e002      	b.n	640c <__sccl+0x14>
    6406:	784b      	ldrb	r3, [r1, #1]
    6408:	2401      	movs	r4, #1
    640a:	3102      	adds	r1, #2
    640c:	2200      	movs	r2, #0
    640e:	5484      	strb	r4, [r0, r2]
    6410:	3201      	adds	r2, #1
    6412:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    6416:	d1fa      	bne.n	640e <__sccl+0x16>
    6418:	b90b      	cbnz	r3, 641e <__sccl+0x26>
    641a:	1e4a      	subs	r2, r1, #1
    641c:	e01a      	b.n	6454 <__sccl+0x5c>
    641e:	f1c4 0701 	rsb	r7, r4, #1
    6422:	b2fe      	uxtb	r6, r7
    6424:	54c6      	strb	r6, [r0, r3]
    6426:	460a      	mov	r2, r1
    6428:	4611      	mov	r1, r2
    642a:	f811 4b01 	ldrb.w	r4, [r1], #1
    642e:	2c2d      	cmp	r4, #45	; 0x2d
    6430:	d004      	beq.n	643c <__sccl+0x44>
    6432:	2c5d      	cmp	r4, #93	; 0x5d
    6434:	d00d      	beq.n	6452 <__sccl+0x5a>
    6436:	b16c      	cbz	r4, 6454 <__sccl+0x5c>
    6438:	4623      	mov	r3, r4
    643a:	e7f2      	b.n	6422 <__sccl+0x2a>
    643c:	7855      	ldrb	r5, [r2, #1]
    643e:	2d5d      	cmp	r5, #93	; 0x5d
    6440:	d0fa      	beq.n	6438 <__sccl+0x40>
    6442:	429d      	cmp	r5, r3
    6444:	dbf8      	blt.n	6438 <__sccl+0x40>
    6446:	3202      	adds	r2, #2
    6448:	3301      	adds	r3, #1
    644a:	42ab      	cmp	r3, r5
    644c:	54c6      	strb	r6, [r0, r3]
    644e:	dbfb      	blt.n	6448 <__sccl+0x50>
    6450:	e7ea      	b.n	6428 <__sccl+0x30>
    6452:	460a      	mov	r2, r1
    6454:	4610      	mov	r0, r2
    6456:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006458 <__sread>:
    6458:	b510      	push	{r4, lr}
    645a:	460c      	mov	r4, r1
    645c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    6460:	f000 fce6 	bl	6e30 <_read_r>
    6464:	2800      	cmp	r0, #0
    6466:	db03      	blt.n	6470 <__sread+0x18>
    6468:	6d22      	ldr	r2, [r4, #80]	; 0x50
    646a:	1813      	adds	r3, r2, r0
    646c:	6523      	str	r3, [r4, #80]	; 0x50
    646e:	bd10      	pop	{r4, pc}
    6470:	89a3      	ldrh	r3, [r4, #12]
    6472:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
    6476:	81a1      	strh	r1, [r4, #12]
    6478:	bd10      	pop	{r4, pc}

0000647a <__seofread>:
    647a:	2000      	movs	r0, #0
    647c:	4770      	bx	lr

0000647e <__swrite>:
    647e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6482:	461d      	mov	r5, r3
    6484:	898b      	ldrh	r3, [r1, #12]
    6486:	460c      	mov	r4, r1
    6488:	f403 7180 	and.w	r1, r3, #256	; 0x100
    648c:	4616      	mov	r6, r2
    648e:	b20a      	sxth	r2, r1
    6490:	4607      	mov	r7, r0
    6492:	b12a      	cbz	r2, 64a0 <__swrite+0x22>
    6494:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    6498:	2200      	movs	r2, #0
    649a:	2302      	movs	r3, #2
    649c:	f000 fcb6 	bl	6e0c <_lseek_r>
    64a0:	89a0      	ldrh	r0, [r4, #12]
    64a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    64a6:	f420 5380 	bic.w	r3, r0, #4096	; 0x1000
    64aa:	81a3      	strh	r3, [r4, #12]
    64ac:	4638      	mov	r0, r7
    64ae:	4632      	mov	r2, r6
    64b0:	462b      	mov	r3, r5
    64b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    64b6:	f000 bc1b 	b.w	6cf0 <_write_r>

000064ba <__sseek>:
    64ba:	b510      	push	{r4, lr}
    64bc:	460c      	mov	r4, r1
    64be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    64c2:	f000 fca3 	bl	6e0c <_lseek_r>
    64c6:	1c43      	adds	r3, r0, #1
    64c8:	89a3      	ldrh	r3, [r4, #12]
    64ca:	d103      	bne.n	64d4 <__sseek+0x1a>
    64cc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    64d0:	81a2      	strh	r2, [r4, #12]
    64d2:	bd10      	pop	{r4, pc}
    64d4:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
    64d8:	81a1      	strh	r1, [r4, #12]
    64da:	6520      	str	r0, [r4, #80]	; 0x50
    64dc:	bd10      	pop	{r4, pc}

000064de <__sclose>:
    64de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    64e2:	f000 bc17 	b.w	6d14 <_close_r>

000064e6 <strcmp>:
    64e6:	f810 2b01 	ldrb.w	r2, [r0], #1
    64ea:	f811 3b01 	ldrb.w	r3, [r1], #1
    64ee:	2a01      	cmp	r2, #1
    64f0:	bf28      	it	cs
    64f2:	429a      	cmpcs	r2, r3
    64f4:	d0f7      	beq.n	64e6 <strcmp>
    64f6:	eba2 0003 	sub.w	r0, r2, r3
    64fa:	4770      	bx	lr

000064fc <_strtol_r>:
    64fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6500:	9001      	str	r0, [sp, #4]
    6502:	4840      	ldr	r0, [pc, #256]	; (6604 <_strtol_r+0x108>)
    6504:	f8d0 9000 	ldr.w	r9, [r0]
    6508:	4608      	mov	r0, r1
    650a:	4604      	mov	r4, r0
    650c:	f814 5b01 	ldrb.w	r5, [r4], #1
    6510:	eb09 0605 	add.w	r6, r9, r5
    6514:	4620      	mov	r0, r4
    6516:	7877      	ldrb	r7, [r6, #1]
    6518:	f007 0608 	and.w	r6, r7, #8
    651c:	b2f7      	uxtb	r7, r6
    651e:	2f00      	cmp	r7, #0
    6520:	d1f3      	bne.n	650a <_strtol_r+0xe>
    6522:	2d2d      	cmp	r5, #45	; 0x2d
    6524:	d103      	bne.n	652e <_strtol_r+0x32>
    6526:	f814 5b01 	ldrb.w	r5, [r4], #1
    652a:	2701      	movs	r7, #1
    652c:	e004      	b.n	6538 <_strtol_r+0x3c>
    652e:	2d2b      	cmp	r5, #43	; 0x2b
    6530:	bf04      	itt	eq
    6532:	4624      	moveq	r4, r4
    6534:	f814 5b01 	ldrbeq.w	r5, [r4], #1
    6538:	2b00      	cmp	r3, #0
    653a:	d05c      	beq.n	65f6 <_strtol_r+0xfa>
    653c:	2b10      	cmp	r3, #16
    653e:	d107      	bne.n	6550 <_strtol_r+0x54>
    6540:	2d30      	cmp	r5, #48	; 0x30
    6542:	d105      	bne.n	6550 <_strtol_r+0x54>
    6544:	7825      	ldrb	r5, [r4, #0]
    6546:	2d78      	cmp	r5, #120	; 0x78
    6548:	d14e      	bne.n	65e8 <_strtol_r+0xec>
    654a:	7865      	ldrb	r5, [r4, #1]
    654c:	2310      	movs	r3, #16
    654e:	3402      	adds	r4, #2
    6550:	2f00      	cmp	r7, #0
    6552:	bf0c      	ite	eq
    6554:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    6558:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
    655c:	fbb0 faf3 	udiv	sl, r0, r3
    6560:	2600      	movs	r6, #0
    6562:	fb03 081a 	mls	r8, r3, sl, r0
    6566:	4630      	mov	r0, r6
    6568:	eb09 0c05 	add.w	ip, r9, r5
    656c:	f89c c001 	ldrb.w	ip, [ip, #1]
    6570:	f00c 0b04 	and.w	fp, ip, #4
    6574:	fa5f fb8b 	uxtb.w	fp, fp
    6578:	f1bb 0f00 	cmp.w	fp, #0
    657c:	d001      	beq.n	6582 <_strtol_r+0x86>
    657e:	3d30      	subs	r5, #48	; 0x30
    6580:	e00b      	b.n	659a <_strtol_r+0x9e>
    6582:	f01c 0c03 	ands.w	ip, ip, #3
    6586:	d01b      	beq.n	65c0 <_strtol_r+0xc4>
    6588:	f1bc 0f01 	cmp.w	ip, #1
    658c:	bf14      	ite	ne
    658e:	f04f 0c57 	movne.w	ip, #87	; 0x57
    6592:	f04f 0c37 	moveq.w	ip, #55	; 0x37
    6596:	ebcc 0505 	rsb	r5, ip, r5
    659a:	429d      	cmp	r5, r3
    659c:	da10      	bge.n	65c0 <_strtol_r+0xc4>
    659e:	f1b6 3fff 	cmp.w	r6, #4294967295
    65a2:	d00a      	beq.n	65ba <_strtol_r+0xbe>
    65a4:	4550      	cmp	r0, sl
    65a6:	d806      	bhi.n	65b6 <_strtol_r+0xba>
    65a8:	d101      	bne.n	65ae <_strtol_r+0xb2>
    65aa:	4545      	cmp	r5, r8
    65ac:	dc03      	bgt.n	65b6 <_strtol_r+0xba>
    65ae:	fb03 5000 	mla	r0, r3, r0, r5
    65b2:	2601      	movs	r6, #1
    65b4:	e001      	b.n	65ba <_strtol_r+0xbe>
    65b6:	f04f 36ff 	mov.w	r6, #4294967295
    65ba:	f814 5b01 	ldrb.w	r5, [r4], #1
    65be:	e7d3      	b.n	6568 <_strtol_r+0x6c>
    65c0:	1c73      	adds	r3, r6, #1
    65c2:	d10a      	bne.n	65da <_strtol_r+0xde>
    65c4:	2f00      	cmp	r7, #0
    65c6:	9901      	ldr	r1, [sp, #4]
    65c8:	bf0c      	ite	eq
    65ca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    65ce:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
    65d2:	2322      	movs	r3, #34	; 0x22
    65d4:	600b      	str	r3, [r1, #0]
    65d6:	b922      	cbnz	r2, 65e2 <_strtol_r+0xe6>
    65d8:	e011      	b.n	65fe <_strtol_r+0x102>
    65da:	b107      	cbz	r7, 65de <_strtol_r+0xe2>
    65dc:	4240      	negs	r0, r0
    65de:	b172      	cbz	r2, 65fe <_strtol_r+0x102>
    65e0:	b106      	cbz	r6, 65e4 <_strtol_r+0xe8>
    65e2:	1e61      	subs	r1, r4, #1
    65e4:	6011      	str	r1, [r2, #0]
    65e6:	e00a      	b.n	65fe <_strtol_r+0x102>
    65e8:	2d58      	cmp	r5, #88	; 0x58
    65ea:	d0ae      	beq.n	654a <_strtol_r+0x4e>
    65ec:	2530      	movs	r5, #48	; 0x30
    65ee:	2b00      	cmp	r3, #0
    65f0:	d1ae      	bne.n	6550 <_strtol_r+0x54>
    65f2:	2308      	movs	r3, #8
    65f4:	e7ac      	b.n	6550 <_strtol_r+0x54>
    65f6:	2d30      	cmp	r5, #48	; 0x30
    65f8:	d0a4      	beq.n	6544 <_strtol_r+0x48>
    65fa:	230a      	movs	r3, #10
    65fc:	e7a8      	b.n	6550 <_strtol_r+0x54>
    65fe:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6602:	bf00      	nop
    6604:	20000480 	.word	0x20000480

00006608 <strtol>:
    6608:	b530      	push	{r4, r5, lr}
    660a:	4613      	mov	r3, r2
    660c:	4a04      	ldr	r2, [pc, #16]	; (6620 <strtol+0x18>)
    660e:	4605      	mov	r5, r0
    6610:	460c      	mov	r4, r1
    6612:	6810      	ldr	r0, [r2, #0]
    6614:	4629      	mov	r1, r5
    6616:	4622      	mov	r2, r4
    6618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    661c:	f7ff bf6e 	b.w	64fc <_strtol_r>
    6620:	20000050 	.word	0x20000050

00006624 <_strtoll_r>:
    6624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6628:	4698      	mov	r8, r3
    662a:	b089      	sub	sp, #36	; 0x24
    662c:	4b60      	ldr	r3, [pc, #384]	; (67b0 <_strtoll_r+0x18c>)
    662e:	9007      	str	r0, [sp, #28]
    6630:	6818      	ldr	r0, [r3, #0]
    6632:	9104      	str	r1, [sp, #16]
    6634:	4694      	mov	ip, r2
    6636:	9005      	str	r0, [sp, #20]
    6638:	460e      	mov	r6, r1
    663a:	9c05      	ldr	r4, [sp, #20]
    663c:	f816 7b01 	ldrb.w	r7, [r6], #1
    6640:	19e2      	adds	r2, r4, r7
    6642:	4631      	mov	r1, r6
    6644:	f892 a001 	ldrb.w	sl, [r2, #1]
    6648:	f00a 0508 	and.w	r5, sl, #8
    664c:	b2eb      	uxtb	r3, r5
    664e:	2b00      	cmp	r3, #0
    6650:	d1f2      	bne.n	6638 <_strtoll_r+0x14>
    6652:	2f2d      	cmp	r7, #45	; 0x2d
    6654:	d104      	bne.n	6660 <_strtoll_r+0x3c>
    6656:	f816 7b01 	ldrb.w	r7, [r6], #1
    665a:	f04f 0a01 	mov.w	sl, #1
    665e:	e006      	b.n	666e <_strtoll_r+0x4a>
    6660:	2f2b      	cmp	r7, #43	; 0x2b
    6662:	bf08      	it	eq
    6664:	4636      	moveq	r6, r6
    6666:	469a      	mov	sl, r3
    6668:	bf08      	it	eq
    666a:	f816 7b01 	ldrbeq.w	r7, [r6], #1
    666e:	f1b8 0f00 	cmp.w	r8, #0
    6672:	f000 8092 	beq.w	679a <_strtoll_r+0x176>
    6676:	f1b8 0f10 	cmp.w	r8, #16
    667a:	d108      	bne.n	668e <_strtoll_r+0x6a>
    667c:	2f30      	cmp	r7, #48	; 0x30
    667e:	d106      	bne.n	668e <_strtoll_r+0x6a>
    6680:	7837      	ldrb	r7, [r6, #0]
    6682:	2f78      	cmp	r7, #120	; 0x78
    6684:	d17e      	bne.n	6784 <_strtoll_r+0x160>
    6686:	7877      	ldrb	r7, [r6, #1]
    6688:	f04f 0810 	mov.w	r8, #16
    668c:	3602      	adds	r6, #2
    668e:	f1ba 0f00 	cmp.w	sl, #0
    6692:	d003      	beq.n	669c <_strtoll_r+0x78>
    6694:	2400      	movs	r4, #0
    6696:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
    669a:	e003      	b.n	66a4 <_strtoll_r+0x80>
    669c:	f04f 34ff 	mov.w	r4, #4294967295
    66a0:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    66a4:	ea4f 7be8 	mov.w	fp, r8, asr #31
    66a8:	4620      	mov	r0, r4
    66aa:	4629      	mov	r1, r5
    66ac:	4642      	mov	r2, r8
    66ae:	465b      	mov	r3, fp
    66b0:	f8cd c004 	str.w	ip, [sp, #4]
    66b4:	f000 fbce 	bl	6e54 <__aeabi_uldivmod>
    66b8:	465b      	mov	r3, fp
    66ba:	9206      	str	r2, [sp, #24]
    66bc:	4620      	mov	r0, r4
    66be:	4642      	mov	r2, r8
    66c0:	4629      	mov	r1, r5
    66c2:	f000 fbc7 	bl	6e54 <__aeabi_uldivmod>
    66c6:	f8dd c004 	ldr.w	ip, [sp, #4]
    66ca:	9103      	str	r1, [sp, #12]
    66cc:	46c1      	mov	r9, r8
    66ce:	9002      	str	r0, [sp, #8]
    66d0:	2100      	movs	r1, #0
    66d2:	2200      	movs	r2, #0
    66d4:	2300      	movs	r3, #0
    66d6:	9805      	ldr	r0, [sp, #20]
    66d8:	19c4      	adds	r4, r0, r7
    66da:	7860      	ldrb	r0, [r4, #1]
    66dc:	f000 0404 	and.w	r4, r0, #4
    66e0:	b2e4      	uxtb	r4, r4
    66e2:	b10c      	cbz	r4, 66e8 <_strtoll_r+0xc4>
    66e4:	3f30      	subs	r7, #48	; 0x30
    66e6:	e007      	b.n	66f8 <_strtoll_r+0xd4>
    66e8:	f010 0003 	ands.w	r0, r0, #3
    66ec:	d026      	beq.n	673c <_strtoll_r+0x118>
    66ee:	2801      	cmp	r0, #1
    66f0:	bf14      	ite	ne
    66f2:	2057      	movne	r0, #87	; 0x57
    66f4:	2037      	moveq	r0, #55	; 0x37
    66f6:	1a3f      	subs	r7, r7, r0
    66f8:	4547      	cmp	r7, r8
    66fa:	da1f      	bge.n	673c <_strtoll_r+0x118>
    66fc:	1c4c      	adds	r4, r1, #1
    66fe:	d01a      	beq.n	6736 <_strtoll_r+0x112>
    6700:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    6704:	4299      	cmp	r1, r3
    6706:	bf08      	it	eq
    6708:	4290      	cmpeq	r0, r2
    670a:	d312      	bcc.n	6732 <_strtoll_r+0x10e>
    670c:	428b      	cmp	r3, r1
    670e:	bf08      	it	eq
    6710:	4282      	cmpeq	r2, r0
    6712:	d102      	bne.n	671a <_strtoll_r+0xf6>
    6714:	9906      	ldr	r1, [sp, #24]
    6716:	428f      	cmp	r7, r1
    6718:	dc0b      	bgt.n	6732 <_strtoll_r+0x10e>
    671a:	fb02 f40b 	mul.w	r4, r2, fp
    671e:	fb09 4003 	mla	r0, r9, r3, r4
    6722:	fba2 2309 	umull	r2, r3, r2, r9
    6726:	19d2      	adds	r2, r2, r7
    6728:	4403      	add	r3, r0
    672a:	eb43 73e7 	adc.w	r3, r3, r7, asr #31
    672e:	2101      	movs	r1, #1
    6730:	e001      	b.n	6736 <_strtoll_r+0x112>
    6732:	f04f 31ff 	mov.w	r1, #4294967295
    6736:	f816 7b01 	ldrb.w	r7, [r6], #1
    673a:	e7cc      	b.n	66d6 <_strtoll_r+0xb2>
    673c:	1c48      	adds	r0, r1, #1
    673e:	d111      	bne.n	6764 <_strtoll_r+0x140>
    6740:	f1ba 0f00 	cmp.w	sl, #0
    6744:	d003      	beq.n	674e <_strtoll_r+0x12a>
    6746:	2200      	movs	r2, #0
    6748:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    674c:	e003      	b.n	6756 <_strtoll_r+0x132>
    674e:	f04f 32ff 	mov.w	r2, #4294967295
    6752:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    6756:	9c07      	ldr	r4, [sp, #28]
    6758:	2022      	movs	r0, #34	; 0x22
    675a:	6020      	str	r0, [r4, #0]
    675c:	f1bc 0f00 	cmp.w	ip, #0
    6760:	d10a      	bne.n	6778 <_strtoll_r+0x154>
    6762:	e020      	b.n	67a6 <_strtoll_r+0x182>
    6764:	f1ba 0f00 	cmp.w	sl, #0
    6768:	d002      	beq.n	6770 <_strtoll_r+0x14c>
    676a:	4252      	negs	r2, r2
    676c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    6770:	f1bc 0f00 	cmp.w	ip, #0
    6774:	d017      	beq.n	67a6 <_strtoll_r+0x182>
    6776:	b109      	cbz	r1, 677c <_strtoll_r+0x158>
    6778:	3e01      	subs	r6, #1
    677a:	9604      	str	r6, [sp, #16]
    677c:	9c04      	ldr	r4, [sp, #16]
    677e:	f8cc 4000 	str.w	r4, [ip]
    6782:	e010      	b.n	67a6 <_strtoll_r+0x182>
    6784:	2f58      	cmp	r7, #88	; 0x58
    6786:	f43f af7e 	beq.w	6686 <_strtoll_r+0x62>
    678a:	2730      	movs	r7, #48	; 0x30
    678c:	f1b8 0f00 	cmp.w	r8, #0
    6790:	f47f af7d 	bne.w	668e <_strtoll_r+0x6a>
    6794:	f04f 0808 	mov.w	r8, #8
    6798:	e779      	b.n	668e <_strtoll_r+0x6a>
    679a:	2f30      	cmp	r7, #48	; 0x30
    679c:	f43f af70 	beq.w	6680 <_strtoll_r+0x5c>
    67a0:	f04f 080a 	mov.w	r8, #10
    67a4:	e773      	b.n	668e <_strtoll_r+0x6a>
    67a6:	4610      	mov	r0, r2
    67a8:	4619      	mov	r1, r3
    67aa:	b009      	add	sp, #36	; 0x24
    67ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    67b0:	20000480 	.word	0x20000480

000067b4 <_strtoul_r>:
    67b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    67b8:	9001      	str	r0, [sp, #4]
    67ba:	483c      	ldr	r0, [pc, #240]	; (68ac <_strtoul_r+0xf8>)
    67bc:	f8d0 9000 	ldr.w	r9, [r0]
    67c0:	4608      	mov	r0, r1
    67c2:	4604      	mov	r4, r0
    67c4:	f814 5b01 	ldrb.w	r5, [r4], #1
    67c8:	eb09 0605 	add.w	r6, r9, r5
    67cc:	4620      	mov	r0, r4
    67ce:	7877      	ldrb	r7, [r6, #1]
    67d0:	f007 0608 	and.w	r6, r7, #8
    67d4:	b2f7      	uxtb	r7, r6
    67d6:	2f00      	cmp	r7, #0
    67d8:	d1f3      	bne.n	67c2 <_strtoul_r+0xe>
    67da:	2d2d      	cmp	r5, #45	; 0x2d
    67dc:	d103      	bne.n	67e6 <_strtoul_r+0x32>
    67de:	f814 5b01 	ldrb.w	r5, [r4], #1
    67e2:	2701      	movs	r7, #1
    67e4:	e004      	b.n	67f0 <_strtoul_r+0x3c>
    67e6:	2d2b      	cmp	r5, #43	; 0x2b
    67e8:	bf04      	itt	eq
    67ea:	4624      	moveq	r4, r4
    67ec:	f814 5b01 	ldrbeq.w	r5, [r4], #1
    67f0:	2b00      	cmp	r3, #0
    67f2:	d055      	beq.n	68a0 <_strtoul_r+0xec>
    67f4:	2b10      	cmp	r3, #16
    67f6:	d107      	bne.n	6808 <_strtoul_r+0x54>
    67f8:	2d30      	cmp	r5, #48	; 0x30
    67fa:	d105      	bne.n	6808 <_strtoul_r+0x54>
    67fc:	7825      	ldrb	r5, [r4, #0]
    67fe:	2d78      	cmp	r5, #120	; 0x78
    6800:	d147      	bne.n	6892 <_strtoul_r+0xde>
    6802:	7865      	ldrb	r5, [r4, #1]
    6804:	2310      	movs	r3, #16
    6806:	3402      	adds	r4, #2
    6808:	f04f 3aff 	mov.w	sl, #4294967295
    680c:	fbba faf3 	udiv	sl, sl, r3
    6810:	fb03 f00a 	mul.w	r0, r3, sl
    6814:	2600      	movs	r6, #0
    6816:	ea6f 0800 	mvn.w	r8, r0
    681a:	4630      	mov	r0, r6
    681c:	eb09 0c05 	add.w	ip, r9, r5
    6820:	f89c c001 	ldrb.w	ip, [ip, #1]
    6824:	f00c 0b04 	and.w	fp, ip, #4
    6828:	fa5f fb8b 	uxtb.w	fp, fp
    682c:	f1bb 0f00 	cmp.w	fp, #0
    6830:	d001      	beq.n	6836 <_strtoul_r+0x82>
    6832:	3d30      	subs	r5, #48	; 0x30
    6834:	e00b      	b.n	684e <_strtoul_r+0x9a>
    6836:	f01c 0c03 	ands.w	ip, ip, #3
    683a:	d01b      	beq.n	6874 <_strtoul_r+0xc0>
    683c:	f1bc 0f01 	cmp.w	ip, #1
    6840:	bf14      	ite	ne
    6842:	f04f 0c57 	movne.w	ip, #87	; 0x57
    6846:	f04f 0c37 	moveq.w	ip, #55	; 0x37
    684a:	ebcc 0505 	rsb	r5, ip, r5
    684e:	429d      	cmp	r5, r3
    6850:	da10      	bge.n	6874 <_strtoul_r+0xc0>
    6852:	f1b6 3fff 	cmp.w	r6, #4294967295
    6856:	d00a      	beq.n	686e <_strtoul_r+0xba>
    6858:	4550      	cmp	r0, sl
    685a:	d806      	bhi.n	686a <_strtoul_r+0xb6>
    685c:	d101      	bne.n	6862 <_strtoul_r+0xae>
    685e:	4545      	cmp	r5, r8
    6860:	dc03      	bgt.n	686a <_strtoul_r+0xb6>
    6862:	fb03 5000 	mla	r0, r3, r0, r5
    6866:	2601      	movs	r6, #1
    6868:	e001      	b.n	686e <_strtoul_r+0xba>
    686a:	f04f 36ff 	mov.w	r6, #4294967295
    686e:	f814 5b01 	ldrb.w	r5, [r4], #1
    6872:	e7d3      	b.n	681c <_strtoul_r+0x68>
    6874:	1c73      	adds	r3, r6, #1
    6876:	d105      	bne.n	6884 <_strtoul_r+0xd0>
    6878:	9901      	ldr	r1, [sp, #4]
    687a:	2322      	movs	r3, #34	; 0x22
    687c:	600b      	str	r3, [r1, #0]
    687e:	4630      	mov	r0, r6
    6880:	b922      	cbnz	r2, 688c <_strtoul_r+0xd8>
    6882:	e011      	b.n	68a8 <_strtoul_r+0xf4>
    6884:	b107      	cbz	r7, 6888 <_strtoul_r+0xd4>
    6886:	4240      	negs	r0, r0
    6888:	b172      	cbz	r2, 68a8 <_strtoul_r+0xf4>
    688a:	b106      	cbz	r6, 688e <_strtoul_r+0xda>
    688c:	1e61      	subs	r1, r4, #1
    688e:	6011      	str	r1, [r2, #0]
    6890:	e00a      	b.n	68a8 <_strtoul_r+0xf4>
    6892:	2d58      	cmp	r5, #88	; 0x58
    6894:	d0b5      	beq.n	6802 <_strtoul_r+0x4e>
    6896:	2530      	movs	r5, #48	; 0x30
    6898:	2b00      	cmp	r3, #0
    689a:	d1b5      	bne.n	6808 <_strtoul_r+0x54>
    689c:	2308      	movs	r3, #8
    689e:	e7b3      	b.n	6808 <_strtoul_r+0x54>
    68a0:	2d30      	cmp	r5, #48	; 0x30
    68a2:	d0ab      	beq.n	67fc <_strtoul_r+0x48>
    68a4:	230a      	movs	r3, #10
    68a6:	e7af      	b.n	6808 <_strtoul_r+0x54>
    68a8:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    68ac:	20000480 	.word	0x20000480

000068b0 <strtoul>:
    68b0:	b530      	push	{r4, r5, lr}
    68b2:	4613      	mov	r3, r2
    68b4:	4a04      	ldr	r2, [pc, #16]	; (68c8 <strtoul+0x18>)
    68b6:	4605      	mov	r5, r0
    68b8:	460c      	mov	r4, r1
    68ba:	6810      	ldr	r0, [r2, #0]
    68bc:	4629      	mov	r1, r5
    68be:	4622      	mov	r2, r4
    68c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    68c4:	f7ff bf76 	b.w	67b4 <_strtoul_r>
    68c8:	20000050 	.word	0x20000050

000068cc <_strtoull_r>:
    68cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    68d0:	461e      	mov	r6, r3
    68d2:	b087      	sub	sp, #28
    68d4:	4b54      	ldr	r3, [pc, #336]	; (6a28 <_strtoull_r+0x15c>)
    68d6:	9005      	str	r0, [sp, #20]
    68d8:	6818      	ldr	r0, [r3, #0]
    68da:	468a      	mov	sl, r1
    68dc:	4693      	mov	fp, r2
    68de:	9003      	str	r0, [sp, #12]
    68e0:	460c      	mov	r4, r1
    68e2:	9a03      	ldr	r2, [sp, #12]
    68e4:	f814 5b01 	ldrb.w	r5, [r4], #1
    68e8:	1957      	adds	r7, r2, r5
    68ea:	4621      	mov	r1, r4
    68ec:	f897 9001 	ldrb.w	r9, [r7, #1]
    68f0:	f009 0308 	and.w	r3, r9, #8
    68f4:	b2d8      	uxtb	r0, r3
    68f6:	2800      	cmp	r0, #0
    68f8:	d1f2      	bne.n	68e0 <_strtoull_r+0x14>
    68fa:	2d2d      	cmp	r5, #45	; 0x2d
    68fc:	d104      	bne.n	6908 <_strtoull_r+0x3c>
    68fe:	f814 5b01 	ldrb.w	r5, [r4], #1
    6902:	f04f 0901 	mov.w	r9, #1
    6906:	e006      	b.n	6916 <_strtoull_r+0x4a>
    6908:	2d2b      	cmp	r5, #43	; 0x2b
    690a:	bf08      	it	eq
    690c:	4624      	moveq	r4, r4
    690e:	4681      	mov	r9, r0
    6910:	bf08      	it	eq
    6912:	f814 5b01 	ldrbeq.w	r5, [r4], #1
    6916:	2e00      	cmp	r6, #0
    6918:	d07d      	beq.n	6a16 <_strtoull_r+0x14a>
    691a:	2e10      	cmp	r6, #16
    691c:	d107      	bne.n	692e <_strtoull_r+0x62>
    691e:	2d30      	cmp	r5, #48	; 0x30
    6920:	d105      	bne.n	692e <_strtoull_r+0x62>
    6922:	7825      	ldrb	r5, [r4, #0]
    6924:	2d78      	cmp	r5, #120	; 0x78
    6926:	d16f      	bne.n	6a08 <_strtoull_r+0x13c>
    6928:	7865      	ldrb	r5, [r4, #1]
    692a:	2610      	movs	r6, #16
    692c:	3402      	adds	r4, #2
    692e:	ea4f 78e6 	mov.w	r8, r6, asr #31
    6932:	4632      	mov	r2, r6
    6934:	4643      	mov	r3, r8
    6936:	f04f 30ff 	mov.w	r0, #4294967295
    693a:	f04f 31ff 	mov.w	r1, #4294967295
    693e:	f000 fa89 	bl	6e54 <__aeabi_uldivmod>
    6942:	4632      	mov	r2, r6
    6944:	e88d 0003 	stmia.w	sp, {r0, r1}
    6948:	4643      	mov	r3, r8
    694a:	f04f 30ff 	mov.w	r0, #4294967295
    694e:	f04f 31ff 	mov.w	r1, #4294967295
    6952:	f000 fa7f 	bl	6e54 <__aeabi_uldivmod>
    6956:	4637      	mov	r7, r6
    6958:	9204      	str	r2, [sp, #16]
    695a:	2100      	movs	r1, #0
    695c:	2200      	movs	r2, #0
    695e:	2300      	movs	r3, #0
    6960:	9803      	ldr	r0, [sp, #12]
    6962:	eb00 0c05 	add.w	ip, r0, r5
    6966:	f89c 0001 	ldrb.w	r0, [ip, #1]
    696a:	f000 0e04 	and.w	lr, r0, #4
    696e:	fa5f fc8e 	uxtb.w	ip, lr
    6972:	f1bc 0f00 	cmp.w	ip, #0
    6976:	d001      	beq.n	697c <_strtoull_r+0xb0>
    6978:	3d30      	subs	r5, #48	; 0x30
    697a:	e007      	b.n	698c <_strtoull_r+0xc0>
    697c:	f010 0003 	ands.w	r0, r0, #3
    6980:	d026      	beq.n	69d0 <_strtoull_r+0x104>
    6982:	2801      	cmp	r0, #1
    6984:	bf14      	ite	ne
    6986:	2057      	movne	r0, #87	; 0x57
    6988:	2037      	moveq	r0, #55	; 0x37
    698a:	1a2d      	subs	r5, r5, r0
    698c:	42b5      	cmp	r5, r6
    698e:	da1f      	bge.n	69d0 <_strtoull_r+0x104>
    6990:	1c48      	adds	r0, r1, #1
    6992:	d01a      	beq.n	69ca <_strtoull_r+0xfe>
    6994:	e9dd 0100 	ldrd	r0, r1, [sp]
    6998:	4299      	cmp	r1, r3
    699a:	bf08      	it	eq
    699c:	4290      	cmpeq	r0, r2
    699e:	d312      	bcc.n	69c6 <_strtoull_r+0xfa>
    69a0:	428b      	cmp	r3, r1
    69a2:	bf08      	it	eq
    69a4:	4282      	cmpeq	r2, r0
    69a6:	d102      	bne.n	69ae <_strtoull_r+0xe2>
    69a8:	9904      	ldr	r1, [sp, #16]
    69aa:	428d      	cmp	r5, r1
    69ac:	dc0b      	bgt.n	69c6 <_strtoull_r+0xfa>
    69ae:	fb02 f008 	mul.w	r0, r2, r8
    69b2:	fb07 0103 	mla	r1, r7, r3, r0
    69b6:	fba2 2307 	umull	r2, r3, r2, r7
    69ba:	18cb      	adds	r3, r1, r3
    69bc:	1952      	adds	r2, r2, r5
    69be:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
    69c2:	2101      	movs	r1, #1
    69c4:	e001      	b.n	69ca <_strtoull_r+0xfe>
    69c6:	f04f 31ff 	mov.w	r1, #4294967295
    69ca:	f814 5b01 	ldrb.w	r5, [r4], #1
    69ce:	e7c7      	b.n	6960 <_strtoull_r+0x94>
    69d0:	1c48      	adds	r0, r1, #1
    69d2:	d10a      	bne.n	69ea <_strtoull_r+0x11e>
    69d4:	9a05      	ldr	r2, [sp, #20]
    69d6:	2022      	movs	r0, #34	; 0x22
    69d8:	6010      	str	r0, [r2, #0]
    69da:	f04f 33ff 	mov.w	r3, #4294967295
    69de:	f04f 32ff 	mov.w	r2, #4294967295
    69e2:	f1bb 0f00 	cmp.w	fp, #0
    69e6:	d10a      	bne.n	69fe <_strtoull_r+0x132>
    69e8:	e019      	b.n	6a1e <_strtoull_r+0x152>
    69ea:	f1b9 0f00 	cmp.w	r9, #0
    69ee:	d002      	beq.n	69f6 <_strtoull_r+0x12a>
    69f0:	4252      	negs	r2, r2
    69f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    69f6:	f1bb 0f00 	cmp.w	fp, #0
    69fa:	d010      	beq.n	6a1e <_strtoull_r+0x152>
    69fc:	b109      	cbz	r1, 6a02 <_strtoull_r+0x136>
    69fe:	f104 3aff 	add.w	sl, r4, #4294967295
    6a02:	f8cb a000 	str.w	sl, [fp]
    6a06:	e00a      	b.n	6a1e <_strtoull_r+0x152>
    6a08:	2d58      	cmp	r5, #88	; 0x58
    6a0a:	d08d      	beq.n	6928 <_strtoull_r+0x5c>
    6a0c:	2530      	movs	r5, #48	; 0x30
    6a0e:	2e00      	cmp	r6, #0
    6a10:	d18d      	bne.n	692e <_strtoull_r+0x62>
    6a12:	2608      	movs	r6, #8
    6a14:	e78b      	b.n	692e <_strtoull_r+0x62>
    6a16:	2d30      	cmp	r5, #48	; 0x30
    6a18:	d083      	beq.n	6922 <_strtoull_r+0x56>
    6a1a:	260a      	movs	r6, #10
    6a1c:	e787      	b.n	692e <_strtoull_r+0x62>
    6a1e:	4610      	mov	r0, r2
    6a20:	4619      	mov	r1, r3
    6a22:	b007      	add	sp, #28
    6a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6a28:	20000480 	.word	0x20000480

00006a2c <__submore>:
    6a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a30:	460c      	mov	r4, r1
    6a32:	6b09      	ldr	r1, [r1, #48]	; 0x30
    6a34:	f104 0340 	add.w	r3, r4, #64	; 0x40
    6a38:	4299      	cmp	r1, r3
    6a3a:	d11c      	bne.n	6a76 <__submore+0x4a>
    6a3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    6a40:	f7ff f844 	bl	5acc <_malloc_r>
    6a44:	b918      	cbnz	r0, 6a4e <__submore+0x22>
    6a46:	f04f 30ff 	mov.w	r0, #4294967295
    6a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a4e:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
    6a52:	6320      	str	r0, [r4, #48]	; 0x30
    6a54:	f44f 6180 	mov.w	r1, #1024	; 0x400
    6a58:	6361      	str	r1, [r4, #52]	; 0x34
    6a5a:	f880 23ff 	strb.w	r2, [r0, #1023]	; 0x3ff
    6a5e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    6a62:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
    6a66:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
    6a6a:	f880 13fd 	strb.w	r1, [r0, #1021]	; 0x3fd
    6a6e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
    6a72:	6020      	str	r0, [r4, #0]
    6a74:	e012      	b.n	6a9c <__submore+0x70>
    6a76:	6b66      	ldr	r6, [r4, #52]	; 0x34
    6a78:	0077      	lsls	r7, r6, #1
    6a7a:	463a      	mov	r2, r7
    6a7c:	f7ff fabc 	bl	5ff8 <_realloc_r>
    6a80:	4605      	mov	r5, r0
    6a82:	2800      	cmp	r0, #0
    6a84:	d0df      	beq.n	6a46 <__submore+0x1a>
    6a86:	eb00 0806 	add.w	r8, r0, r6
    6a8a:	4640      	mov	r0, r8
    6a8c:	4629      	mov	r1, r5
    6a8e:	4632      	mov	r2, r6
    6a90:	f7ff fa8c 	bl	5fac <memcpy>
    6a94:	f8c4 8000 	str.w	r8, [r4]
    6a98:	6325      	str	r5, [r4, #48]	; 0x30
    6a9a:	6367      	str	r7, [r4, #52]	; 0x34
    6a9c:	2000      	movs	r0, #0
    6a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006aa2 <_ungetc_r>:
    6aa2:	1c4b      	adds	r3, r1, #1
    6aa4:	b570      	push	{r4, r5, r6, lr}
    6aa6:	4606      	mov	r6, r0
    6aa8:	460d      	mov	r5, r1
    6aaa:	4614      	mov	r4, r2
    6aac:	d102      	bne.n	6ab4 <_ungetc_r+0x12>
    6aae:	f04f 35ff 	mov.w	r5, #4294967295
    6ab2:	e062      	b.n	6b7a <_ungetc_r+0xd8>
    6ab4:	b118      	cbz	r0, 6abe <_ungetc_r+0x1c>
    6ab6:	6b83      	ldr	r3, [r0, #56]	; 0x38
    6ab8:	b90b      	cbnz	r3, 6abe <_ungetc_r+0x1c>
    6aba:	f7fe fb49 	bl	5150 <__sinit>
    6abe:	89a0      	ldrh	r0, [r4, #12]
    6ac0:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
    6ac4:	b211      	sxth	r1, r2
    6ac6:	b931      	cbnz	r1, 6ad6 <_ungetc_r+0x34>
    6ac8:	f440 5300 	orr.w	r3, r0, #8192	; 0x2000
    6acc:	6e60      	ldr	r0, [r4, #100]	; 0x64
    6ace:	81a3      	strh	r3, [r4, #12]
    6ad0:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
    6ad4:	6662      	str	r2, [r4, #100]	; 0x64
    6ad6:	89a1      	ldrh	r1, [r4, #12]
    6ad8:	f001 0004 	and.w	r0, r1, #4
    6adc:	f021 0320 	bic.w	r3, r1, #32
    6ae0:	b202      	sxth	r2, r0
    6ae2:	81a3      	strh	r3, [r4, #12]
    6ae4:	b9c2      	cbnz	r2, 6b18 <_ungetc_r+0x76>
    6ae6:	f001 0310 	and.w	r3, r1, #16
    6aea:	b218      	sxth	r0, r3
    6aec:	2800      	cmp	r0, #0
    6aee:	d0de      	beq.n	6aae <_ungetc_r+0xc>
    6af0:	f001 0108 	and.w	r1, r1, #8
    6af4:	b20a      	sxth	r2, r1
    6af6:	b15a      	cbz	r2, 6b10 <_ungetc_r+0x6e>
    6af8:	4630      	mov	r0, r6
    6afa:	4621      	mov	r1, r4
    6afc:	f7fe fa34 	bl	4f68 <_fflush_r>
    6b00:	2800      	cmp	r0, #0
    6b02:	d1d4      	bne.n	6aae <_ungetc_r+0xc>
    6b04:	89a3      	ldrh	r3, [r4, #12]
    6b06:	60a0      	str	r0, [r4, #8]
    6b08:	f023 0108 	bic.w	r1, r3, #8
    6b0c:	81a1      	strh	r1, [r4, #12]
    6b0e:	61a0      	str	r0, [r4, #24]
    6b10:	89a0      	ldrh	r0, [r4, #12]
    6b12:	f040 0204 	orr.w	r2, r0, #4
    6b16:	81a2      	strh	r2, [r4, #12]
    6b18:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6b1a:	b2ed      	uxtb	r5, r5
    6b1c:	b183      	cbz	r3, 6b40 <_ungetc_r+0x9e>
    6b1e:	6862      	ldr	r2, [r4, #4]
    6b20:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6b22:	429a      	cmp	r2, r3
    6b24:	da05      	bge.n	6b32 <_ungetc_r+0x90>
    6b26:	6821      	ldr	r1, [r4, #0]
    6b28:	1e48      	subs	r0, r1, #1
    6b2a:	6020      	str	r0, [r4, #0]
    6b2c:	f801 5c01 	strb.w	r5, [r1, #-1]
    6b30:	e011      	b.n	6b56 <_ungetc_r+0xb4>
    6b32:	4630      	mov	r0, r6
    6b34:	4621      	mov	r1, r4
    6b36:	f7ff ff79 	bl	6a2c <__submore>
    6b3a:	2800      	cmp	r0, #0
    6b3c:	d0f3      	beq.n	6b26 <_ungetc_r+0x84>
    6b3e:	e7b6      	b.n	6aae <_ungetc_r+0xc>
    6b40:	6921      	ldr	r1, [r4, #16]
    6b42:	b159      	cbz	r1, 6b5c <_ungetc_r+0xba>
    6b44:	6820      	ldr	r0, [r4, #0]
    6b46:	4288      	cmp	r0, r1
    6b48:	d908      	bls.n	6b5c <_ungetc_r+0xba>
    6b4a:	f810 2c01 	ldrb.w	r2, [r0, #-1]
    6b4e:	42aa      	cmp	r2, r5
    6b50:	d104      	bne.n	6b5c <_ungetc_r+0xba>
    6b52:	3801      	subs	r0, #1
    6b54:	6020      	str	r0, [r4, #0]
    6b56:	6862      	ldr	r2, [r4, #4]
    6b58:	1c51      	adds	r1, r2, #1
    6b5a:	e00d      	b.n	6b78 <_ungetc_r+0xd6>
    6b5c:	6863      	ldr	r3, [r4, #4]
    6b5e:	6821      	ldr	r1, [r4, #0]
    6b60:	63e3      	str	r3, [r4, #60]	; 0x3c
    6b62:	4623      	mov	r3, r4
    6b64:	f104 0040 	add.w	r0, r4, #64	; 0x40
    6b68:	f803 5f42 	strb.w	r5, [r3, #66]!
    6b6c:	2203      	movs	r2, #3
    6b6e:	63a1      	str	r1, [r4, #56]	; 0x38
    6b70:	6320      	str	r0, [r4, #48]	; 0x30
    6b72:	6362      	str	r2, [r4, #52]	; 0x34
    6b74:	6023      	str	r3, [r4, #0]
    6b76:	2101      	movs	r1, #1
    6b78:	6061      	str	r1, [r4, #4]
    6b7a:	4628      	mov	r0, r5
    6b7c:	bd70      	pop	{r4, r5, r6, pc}

00006b7e <ungetc>:
    6b7e:	460a      	mov	r2, r1
    6b80:	4902      	ldr	r1, [pc, #8]	; (6b8c <ungetc+0xe>)
    6b82:	4603      	mov	r3, r0
    6b84:	6808      	ldr	r0, [r1, #0]
    6b86:	4619      	mov	r1, r3
    6b88:	f7ff bf8b 	b.w	6aa2 <_ungetc_r>
    6b8c:	20000050 	.word	0x20000050

00006b90 <__swbuf_r>:
    6b90:	b570      	push	{r4, r5, r6, lr}
    6b92:	460d      	mov	r5, r1
    6b94:	4614      	mov	r4, r2
    6b96:	4606      	mov	r6, r0
    6b98:	b118      	cbz	r0, 6ba2 <__swbuf_r+0x12>
    6b9a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    6b9c:	b90b      	cbnz	r3, 6ba2 <__swbuf_r+0x12>
    6b9e:	f7fe fad7 	bl	5150 <__sinit>
    6ba2:	89a1      	ldrh	r1, [r4, #12]
    6ba4:	69a0      	ldr	r0, [r4, #24]
    6ba6:	f001 0208 	and.w	r2, r1, #8
    6baa:	b213      	sxth	r3, r2
    6bac:	60a0      	str	r0, [r4, #8]
    6bae:	b10b      	cbz	r3, 6bb4 <__swbuf_r+0x24>
    6bb0:	6920      	ldr	r0, [r4, #16]
    6bb2:	b958      	cbnz	r0, 6bcc <__swbuf_r+0x3c>
    6bb4:	4630      	mov	r0, r6
    6bb6:	4621      	mov	r1, r4
    6bb8:	f7fe f96a 	bl	4e90 <__swsetup_r>
    6bbc:	b130      	cbz	r0, 6bcc <__swbuf_r+0x3c>
    6bbe:	89a5      	ldrh	r5, [r4, #12]
    6bc0:	2009      	movs	r0, #9
    6bc2:	f045 0140 	orr.w	r1, r5, #64	; 0x40
    6bc6:	81a1      	strh	r1, [r4, #12]
    6bc8:	6030      	str	r0, [r6, #0]
    6bca:	e017      	b.n	6bfc <__swbuf_r+0x6c>
    6bcc:	89a1      	ldrh	r1, [r4, #12]
    6bce:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
    6bd2:	b213      	sxth	r3, r2
    6bd4:	b2ed      	uxtb	r5, r5
    6bd6:	b933      	cbnz	r3, 6be6 <__swbuf_r+0x56>
    6bd8:	f441 5000 	orr.w	r0, r1, #8192	; 0x2000
    6bdc:	6e61      	ldr	r1, [r4, #100]	; 0x64
    6bde:	81a0      	strh	r0, [r4, #12]
    6be0:	f421 5200 	bic.w	r2, r1, #8192	; 0x2000
    6be4:	6662      	str	r2, [r4, #100]	; 0x64
    6be6:	6820      	ldr	r0, [r4, #0]
    6be8:	6923      	ldr	r3, [r4, #16]
    6bea:	6961      	ldr	r1, [r4, #20]
    6bec:	1ac0      	subs	r0, r0, r3
    6bee:	4288      	cmp	r0, r1
    6bf0:	db07      	blt.n	6c02 <__swbuf_r+0x72>
    6bf2:	4630      	mov	r0, r6
    6bf4:	4621      	mov	r1, r4
    6bf6:	f7fe f9b7 	bl	4f68 <_fflush_r>
    6bfa:	b110      	cbz	r0, 6c02 <__swbuf_r+0x72>
    6bfc:	f04f 35ff 	mov.w	r5, #4294967295
    6c00:	e015      	b.n	6c2e <__swbuf_r+0x9e>
    6c02:	68a2      	ldr	r2, [r4, #8]
    6c04:	6821      	ldr	r1, [r4, #0]
    6c06:	1e53      	subs	r3, r2, #1
    6c08:	60a3      	str	r3, [r4, #8]
    6c0a:	f801 5b01 	strb.w	r5, [r1], #1
    6c0e:	6962      	ldr	r2, [r4, #20]
    6c10:	6021      	str	r1, [r4, #0]
    6c12:	3001      	adds	r0, #1
    6c14:	4290      	cmp	r0, r2
    6c16:	d004      	beq.n	6c22 <__swbuf_r+0x92>
    6c18:	89a3      	ldrh	r3, [r4, #12]
    6c1a:	07db      	lsls	r3, r3, #31
    6c1c:	d507      	bpl.n	6c2e <__swbuf_r+0x9e>
    6c1e:	2d0a      	cmp	r5, #10
    6c20:	d105      	bne.n	6c2e <__swbuf_r+0x9e>
    6c22:	4630      	mov	r0, r6
    6c24:	4621      	mov	r1, r4
    6c26:	f7fe f99f 	bl	4f68 <_fflush_r>
    6c2a:	2800      	cmp	r0, #0
    6c2c:	d1e6      	bne.n	6bfc <__swbuf_r+0x6c>
    6c2e:	4628      	mov	r0, r5
    6c30:	bd70      	pop	{r4, r5, r6, pc}

00006c32 <__swbuf>:
    6c32:	460a      	mov	r2, r1
    6c34:	4902      	ldr	r1, [pc, #8]	; (6c40 <__swbuf+0xe>)
    6c36:	4603      	mov	r3, r0
    6c38:	6808      	ldr	r0, [r1, #0]
    6c3a:	4619      	mov	r1, r3
    6c3c:	f7ff bfa8 	b.w	6b90 <__swbuf_r>
    6c40:	20000050 	.word	0x20000050

00006c44 <_wcrtomb_r>:
    6c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c48:	461d      	mov	r5, r3
    6c4a:	4b10      	ldr	r3, [pc, #64]	; (6c8c <_wcrtomb_r+0x48>)
    6c4c:	b086      	sub	sp, #24
    6c4e:	4604      	mov	r4, r0
    6c50:	4690      	mov	r8, r2
    6c52:	460e      	mov	r6, r1
    6c54:	681f      	ldr	r7, [r3, #0]
    6c56:	b939      	cbnz	r1, 6c68 <_wcrtomb_r+0x24>
    6c58:	f7fe fe9a 	bl	5990 <__locale_charset>
    6c5c:	9500      	str	r5, [sp, #0]
    6c5e:	4603      	mov	r3, r0
    6c60:	a903      	add	r1, sp, #12
    6c62:	4620      	mov	r0, r4
    6c64:	4632      	mov	r2, r6
    6c66:	e006      	b.n	6c76 <_wcrtomb_r+0x32>
    6c68:	f7fe fe92 	bl	5990 <__locale_charset>
    6c6c:	9500      	str	r5, [sp, #0]
    6c6e:	4603      	mov	r3, r0
    6c70:	4631      	mov	r1, r6
    6c72:	4620      	mov	r0, r4
    6c74:	4642      	mov	r2, r8
    6c76:	47b8      	blx	r7
    6c78:	1c43      	adds	r3, r0, #1
    6c7a:	d103      	bne.n	6c84 <_wcrtomb_r+0x40>
    6c7c:	2100      	movs	r1, #0
    6c7e:	228a      	movs	r2, #138	; 0x8a
    6c80:	6029      	str	r1, [r5, #0]
    6c82:	6022      	str	r2, [r4, #0]
    6c84:	b006      	add	sp, #24
    6c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6c8a:	bf00      	nop
    6c8c:	20000914 	.word	0x20000914

00006c90 <wcrtomb>:
    6c90:	b530      	push	{r4, r5, lr}
    6c92:	4613      	mov	r3, r2
    6c94:	4a04      	ldr	r2, [pc, #16]	; (6ca8 <wcrtomb+0x18>)
    6c96:	4605      	mov	r5, r0
    6c98:	460c      	mov	r4, r1
    6c9a:	6810      	ldr	r0, [r2, #0]
    6c9c:	4629      	mov	r1, r5
    6c9e:	4622      	mov	r2, r4
    6ca0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    6ca4:	f7ff bfce 	b.w	6c44 <_wcrtomb_r>
    6ca8:	20000050 	.word	0x20000050

00006cac <__ascii_wctomb>:
    6cac:	b149      	cbz	r1, 6cc2 <__ascii_wctomb+0x16>
    6cae:	2aff      	cmp	r2, #255	; 0xff
    6cb0:	d904      	bls.n	6cbc <__ascii_wctomb+0x10>
    6cb2:	238a      	movs	r3, #138	; 0x8a
    6cb4:	6003      	str	r3, [r0, #0]
    6cb6:	f04f 30ff 	mov.w	r0, #4294967295
    6cba:	4770      	bx	lr
    6cbc:	700a      	strb	r2, [r1, #0]
    6cbe:	2001      	movs	r0, #1
    6cc0:	4770      	bx	lr
    6cc2:	4608      	mov	r0, r1
    6cc4:	4770      	bx	lr

00006cc6 <_wctomb_r>:
    6cc6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6cca:	4698      	mov	r8, r3
    6ccc:	4b07      	ldr	r3, [pc, #28]	; (6cec <_wctomb_r+0x26>)
    6cce:	4605      	mov	r5, r0
    6cd0:	460f      	mov	r7, r1
    6cd2:	4616      	mov	r6, r2
    6cd4:	681c      	ldr	r4, [r3, #0]
    6cd6:	f7fe fe5b 	bl	5990 <__locale_charset>
    6cda:	f8cd 8000 	str.w	r8, [sp]
    6cde:	4603      	mov	r3, r0
    6ce0:	4639      	mov	r1, r7
    6ce2:	4628      	mov	r0, r5
    6ce4:	4632      	mov	r2, r6
    6ce6:	47a0      	blx	r4
    6ce8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    6cec:	20000914 	.word	0x20000914

00006cf0 <_write_r>:
    6cf0:	b538      	push	{r3, r4, r5, lr}
    6cf2:	4c07      	ldr	r4, [pc, #28]	; (6d10 <_write_r+0x20>)
    6cf4:	4605      	mov	r5, r0
    6cf6:	2000      	movs	r0, #0
    6cf8:	6020      	str	r0, [r4, #0]
    6cfa:	4608      	mov	r0, r1
    6cfc:	4611      	mov	r1, r2
    6cfe:	461a      	mov	r2, r3
    6d00:	f7f9 ffc8 	bl	c94 <_write>
    6d04:	1c43      	adds	r3, r0, #1
    6d06:	d102      	bne.n	6d0e <_write_r+0x1e>
    6d08:	6823      	ldr	r3, [r4, #0]
    6d0a:	b103      	cbz	r3, 6d0e <_write_r+0x1e>
    6d0c:	602b      	str	r3, [r5, #0]
    6d0e:	bd38      	pop	{r3, r4, r5, pc}
    6d10:	20000aac 	.word	0x20000aac

00006d14 <_close_r>:
    6d14:	b538      	push	{r3, r4, r5, lr}
    6d16:	4c06      	ldr	r4, [pc, #24]	; (6d30 <_close_r+0x1c>)
    6d18:	2300      	movs	r3, #0
    6d1a:	4605      	mov	r5, r0
    6d1c:	4608      	mov	r0, r1
    6d1e:	6023      	str	r3, [r4, #0]
    6d20:	f7fc fe78 	bl	3a14 <_close>
    6d24:	1c43      	adds	r3, r0, #1
    6d26:	d102      	bne.n	6d2e <_close_r+0x1a>
    6d28:	6821      	ldr	r1, [r4, #0]
    6d2a:	b101      	cbz	r1, 6d2e <_close_r+0x1a>
    6d2c:	6029      	str	r1, [r5, #0]
    6d2e:	bd38      	pop	{r3, r4, r5, pc}
    6d30:	20000aac 	.word	0x20000aac

00006d34 <_fclose_r>:
    6d34:	b570      	push	{r4, r5, r6, lr}
    6d36:	4605      	mov	r5, r0
    6d38:	460c      	mov	r4, r1
    6d3a:	2900      	cmp	r1, #0
    6d3c:	d039      	beq.n	6db2 <_fclose_r+0x7e>
    6d3e:	f7fe fa6b 	bl	5218 <__sfp_lock_acquire>
    6d42:	b125      	cbz	r5, 6d4e <_fclose_r+0x1a>
    6d44:	6bab      	ldr	r3, [r5, #56]	; 0x38
    6d46:	b913      	cbnz	r3, 6d4e <_fclose_r+0x1a>
    6d48:	4628      	mov	r0, r5
    6d4a:	f7fe fa01 	bl	5150 <__sinit>
    6d4e:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
    6d52:	b35e      	cbz	r6, 6dac <_fclose_r+0x78>
    6d54:	4628      	mov	r0, r5
    6d56:	4621      	mov	r1, r4
    6d58:	f7fe f906 	bl	4f68 <_fflush_r>
    6d5c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    6d5e:	4606      	mov	r6, r0
    6d60:	b13a      	cbz	r2, 6d72 <_fclose_r+0x3e>
    6d62:	4628      	mov	r0, r5
    6d64:	69e1      	ldr	r1, [r4, #28]
    6d66:	4790      	blx	r2
    6d68:	ea36 0620 	bics.w	r6, r6, r0, asr #32
    6d6c:	bf28      	it	cs
    6d6e:	f04f 36ff 	movcs.w	r6, #4294967295
    6d72:	89a0      	ldrh	r0, [r4, #12]
    6d74:	f000 0180 	and.w	r1, r0, #128	; 0x80
    6d78:	b20b      	sxth	r3, r1
    6d7a:	b11b      	cbz	r3, 6d84 <_fclose_r+0x50>
    6d7c:	4628      	mov	r0, r5
    6d7e:	6921      	ldr	r1, [r4, #16]
    6d80:	f7fe fb82 	bl	5488 <_free_r>
    6d84:	6b21      	ldr	r1, [r4, #48]	; 0x30
    6d86:	b141      	cbz	r1, 6d9a <_fclose_r+0x66>
    6d88:	f104 0240 	add.w	r2, r4, #64	; 0x40
    6d8c:	4291      	cmp	r1, r2
    6d8e:	d002      	beq.n	6d96 <_fclose_r+0x62>
    6d90:	4628      	mov	r0, r5
    6d92:	f7fe fb79 	bl	5488 <_free_r>
    6d96:	2000      	movs	r0, #0
    6d98:	6320      	str	r0, [r4, #48]	; 0x30
    6d9a:	6c61      	ldr	r1, [r4, #68]	; 0x44
    6d9c:	b121      	cbz	r1, 6da8 <_fclose_r+0x74>
    6d9e:	4628      	mov	r0, r5
    6da0:	f7fe fb72 	bl	5488 <_free_r>
    6da4:	2100      	movs	r1, #0
    6da6:	6461      	str	r1, [r4, #68]	; 0x44
    6da8:	2300      	movs	r3, #0
    6daa:	81a3      	strh	r3, [r4, #12]
    6dac:	f7fe fa35 	bl	521a <__sfp_lock_release>
    6db0:	e000      	b.n	6db4 <_fclose_r+0x80>
    6db2:	460e      	mov	r6, r1
    6db4:	4630      	mov	r0, r6
    6db6:	bd70      	pop	{r4, r5, r6, pc}

00006db8 <fclose>:
    6db8:	4b02      	ldr	r3, [pc, #8]	; (6dc4 <fclose+0xc>)
    6dba:	4601      	mov	r1, r0
    6dbc:	6818      	ldr	r0, [r3, #0]
    6dbe:	f7ff bfb9 	b.w	6d34 <_fclose_r>
    6dc2:	bf00      	nop
    6dc4:	20000050 	.word	0x20000050

00006dc8 <_fstat_r>:
    6dc8:	b538      	push	{r3, r4, r5, lr}
    6dca:	4c07      	ldr	r4, [pc, #28]	; (6de8 <_fstat_r+0x20>)
    6dcc:	2300      	movs	r3, #0
    6dce:	4605      	mov	r5, r0
    6dd0:	4608      	mov	r0, r1
    6dd2:	4611      	mov	r1, r2
    6dd4:	6023      	str	r3, [r4, #0]
    6dd6:	f7fc fe21 	bl	3a1c <_fstat>
    6dda:	1c43      	adds	r3, r0, #1
    6ddc:	d102      	bne.n	6de4 <_fstat_r+0x1c>
    6dde:	6821      	ldr	r1, [r4, #0]
    6de0:	b101      	cbz	r1, 6de4 <_fstat_r+0x1c>
    6de2:	6029      	str	r1, [r5, #0]
    6de4:	bd38      	pop	{r3, r4, r5, pc}
    6de6:	bf00      	nop
    6de8:	20000aac 	.word	0x20000aac

00006dec <_isatty_r>:
    6dec:	b538      	push	{r3, r4, r5, lr}
    6dee:	4c06      	ldr	r4, [pc, #24]	; (6e08 <_isatty_r+0x1c>)
    6df0:	2300      	movs	r3, #0
    6df2:	4605      	mov	r5, r0
    6df4:	4608      	mov	r0, r1
    6df6:	6023      	str	r3, [r4, #0]
    6df8:	f7fc fe16 	bl	3a28 <_isatty>
    6dfc:	1c43      	adds	r3, r0, #1
    6dfe:	d102      	bne.n	6e06 <_isatty_r+0x1a>
    6e00:	6821      	ldr	r1, [r4, #0]
    6e02:	b101      	cbz	r1, 6e06 <_isatty_r+0x1a>
    6e04:	6029      	str	r1, [r5, #0]
    6e06:	bd38      	pop	{r3, r4, r5, pc}
    6e08:	20000aac 	.word	0x20000aac

00006e0c <_lseek_r>:
    6e0c:	b538      	push	{r3, r4, r5, lr}
    6e0e:	4c07      	ldr	r4, [pc, #28]	; (6e2c <_lseek_r+0x20>)
    6e10:	4605      	mov	r5, r0
    6e12:	2000      	movs	r0, #0
    6e14:	6020      	str	r0, [r4, #0]
    6e16:	4608      	mov	r0, r1
    6e18:	4611      	mov	r1, r2
    6e1a:	461a      	mov	r2, r3
    6e1c:	f7fc fe08 	bl	3a30 <_lseek>
    6e20:	1c43      	adds	r3, r0, #1
    6e22:	d102      	bne.n	6e2a <_lseek_r+0x1e>
    6e24:	6823      	ldr	r3, [r4, #0]
    6e26:	b103      	cbz	r3, 6e2a <_lseek_r+0x1e>
    6e28:	602b      	str	r3, [r5, #0]
    6e2a:	bd38      	pop	{r3, r4, r5, pc}
    6e2c:	20000aac 	.word	0x20000aac

00006e30 <_read_r>:
    6e30:	b538      	push	{r3, r4, r5, lr}
    6e32:	4c07      	ldr	r4, [pc, #28]	; (6e50 <_read_r+0x20>)
    6e34:	4605      	mov	r5, r0
    6e36:	2000      	movs	r0, #0
    6e38:	6020      	str	r0, [r4, #0]
    6e3a:	4608      	mov	r0, r1
    6e3c:	4611      	mov	r1, r2
    6e3e:	461a      	mov	r2, r3
    6e40:	f7f9 fee4 	bl	c0c <_read>
    6e44:	1c43      	adds	r3, r0, #1
    6e46:	d102      	bne.n	6e4e <_read_r+0x1e>
    6e48:	6823      	ldr	r3, [r4, #0]
    6e4a:	b103      	cbz	r3, 6e4e <_read_r+0x1e>
    6e4c:	602b      	str	r3, [r5, #0]
    6e4e:	bd38      	pop	{r3, r4, r5, pc}
    6e50:	20000aac 	.word	0x20000aac

00006e54 <__aeabi_uldivmod>:
    6e54:	b94b      	cbnz	r3, 6e6a <__aeabi_uldivmod+0x16>
    6e56:	b942      	cbnz	r2, 6e6a <__aeabi_uldivmod+0x16>
    6e58:	2900      	cmp	r1, #0
    6e5a:	bf08      	it	eq
    6e5c:	2800      	cmpeq	r0, #0
    6e5e:	d002      	beq.n	6e66 <__aeabi_uldivmod+0x12>
    6e60:	f04f 31ff 	mov.w	r1, #4294967295
    6e64:	4608      	mov	r0, r1
    6e66:	f000 b837 	b.w	6ed8 <__aeabi_idiv0>
    6e6a:	b082      	sub	sp, #8
    6e6c:	46ec      	mov	ip, sp
    6e6e:	e92d 5000 	stmdb	sp!, {ip, lr}
    6e72:	f000 f81b 	bl	6eac <__gnu_uldivmod_helper>
    6e76:	f8dd e004 	ldr.w	lr, [sp, #4]
    6e7a:	b002      	add	sp, #8
    6e7c:	bc0c      	pop	{r2, r3}
    6e7e:	4770      	bx	lr

00006e80 <__gnu_ldivmod_helper>:
    6e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e82:	4616      	mov	r6, r2
    6e84:	4604      	mov	r4, r0
    6e86:	460d      	mov	r5, r1
    6e88:	461f      	mov	r7, r3
    6e8a:	f000 f827 	bl	6edc <__divdi3>
    6e8e:	fb06 f301 	mul.w	r3, r6, r1
    6e92:	fb00 3707 	mla	r7, r0, r7, r3
    6e96:	fba6 2300 	umull	r2, r3, r6, r0
    6e9a:	18fb      	adds	r3, r7, r3
    6e9c:	1aa2      	subs	r2, r4, r2
    6e9e:	eb65 0303 	sbc.w	r3, r5, r3
    6ea2:	9c06      	ldr	r4, [sp, #24]
    6ea4:	e9c4 2300 	strd	r2, r3, [r4]
    6ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6eaa:	bf00      	nop

00006eac <__gnu_uldivmod_helper>:
    6eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6eae:	4616      	mov	r6, r2
    6eb0:	4604      	mov	r4, r0
    6eb2:	460d      	mov	r5, r1
    6eb4:	461f      	mov	r7, r3
    6eb6:	f000 f96f 	bl	7198 <__udivdi3>
    6eba:	fb00 f707 	mul.w	r7, r0, r7
    6ebe:	fba0 2306 	umull	r2, r3, r0, r6
    6ec2:	fb06 7701 	mla	r7, r6, r1, r7
    6ec6:	18fb      	adds	r3, r7, r3
    6ec8:	1aa2      	subs	r2, r4, r2
    6eca:	eb65 0303 	sbc.w	r3, r5, r3
    6ece:	9c06      	ldr	r4, [sp, #24]
    6ed0:	e9c4 2300 	strd	r2, r3, [r4]
    6ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6ed6:	bf00      	nop

00006ed8 <__aeabi_idiv0>:
    6ed8:	4770      	bx	lr
    6eda:	bf00      	nop

00006edc <__divdi3>:
    6edc:	2900      	cmp	r1, #0
    6ede:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    6ee2:	461d      	mov	r5, r3
    6ee4:	f2c0 809d 	blt.w	7022 <__divdi3+0x146>
    6ee8:	2400      	movs	r4, #0
    6eea:	2d00      	cmp	r5, #0
    6eec:	f2c0 8094 	blt.w	7018 <__divdi3+0x13c>
    6ef0:	4680      	mov	r8, r0
    6ef2:	460f      	mov	r7, r1
    6ef4:	4694      	mov	ip, r2
    6ef6:	461e      	mov	r6, r3
    6ef8:	bbe3      	cbnz	r3, 6f74 <__divdi3+0x98>
    6efa:	428a      	cmp	r2, r1
    6efc:	d955      	bls.n	6faa <__divdi3+0xce>
    6efe:	fab2 f782 	clz	r7, r2
    6f02:	b147      	cbz	r7, 6f16 <__divdi3+0x3a>
    6f04:	f1c7 0520 	rsb	r5, r7, #32
    6f08:	fa20 f605 	lsr.w	r6, r0, r5
    6f0c:	fa01 f107 	lsl.w	r1, r1, r7
    6f10:	40ba      	lsls	r2, r7
    6f12:	4331      	orrs	r1, r6
    6f14:	40b8      	lsls	r0, r7
    6f16:	0c17      	lsrs	r7, r2, #16
    6f18:	fbb1 f6f7 	udiv	r6, r1, r7
    6f1c:	0c03      	lsrs	r3, r0, #16
    6f1e:	fa1f fc82 	uxth.w	ip, r2
    6f22:	fb07 1116 	mls	r1, r7, r6, r1
    6f26:	fb0c f506 	mul.w	r5, ip, r6
    6f2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    6f2e:	429d      	cmp	r5, r3
    6f30:	d908      	bls.n	6f44 <__divdi3+0x68>
    6f32:	1e71      	subs	r1, r6, #1
    6f34:	189b      	adds	r3, r3, r2
    6f36:	f080 8113 	bcs.w	7160 <__divdi3+0x284>
    6f3a:	429d      	cmp	r5, r3
    6f3c:	f240 8110 	bls.w	7160 <__divdi3+0x284>
    6f40:	3e02      	subs	r6, #2
    6f42:	189b      	adds	r3, r3, r2
    6f44:	1b59      	subs	r1, r3, r5
    6f46:	fbb1 f5f7 	udiv	r5, r1, r7
    6f4a:	fb07 1315 	mls	r3, r7, r5, r1
    6f4e:	b280      	uxth	r0, r0
    6f50:	fb0c fc05 	mul.w	ip, ip, r5
    6f54:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
    6f58:	458c      	cmp	ip, r1
    6f5a:	d907      	bls.n	6f6c <__divdi3+0x90>
    6f5c:	1e6b      	subs	r3, r5, #1
    6f5e:	188a      	adds	r2, r1, r2
    6f60:	f080 8100 	bcs.w	7164 <__divdi3+0x288>
    6f64:	4594      	cmp	ip, r2
    6f66:	f240 80fd 	bls.w	7164 <__divdi3+0x288>
    6f6a:	3d02      	subs	r5, #2
    6f6c:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
    6f70:	2500      	movs	r5, #0
    6f72:	e003      	b.n	6f7c <__divdi3+0xa0>
    6f74:	428b      	cmp	r3, r1
    6f76:	d90c      	bls.n	6f92 <__divdi3+0xb6>
    6f78:	2500      	movs	r5, #0
    6f7a:	4629      	mov	r1, r5
    6f7c:	460a      	mov	r2, r1
    6f7e:	462b      	mov	r3, r5
    6f80:	b114      	cbz	r4, 6f88 <__divdi3+0xac>
    6f82:	4252      	negs	r2, r2
    6f84:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    6f88:	4610      	mov	r0, r2
    6f8a:	4619      	mov	r1, r3
    6f8c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    6f90:	4770      	bx	lr
    6f92:	fab3 f583 	clz	r5, r3
    6f96:	2d00      	cmp	r5, #0
    6f98:	f040 8087 	bne.w	70aa <__divdi3+0x1ce>
    6f9c:	428b      	cmp	r3, r1
    6f9e:	d301      	bcc.n	6fa4 <__divdi3+0xc8>
    6fa0:	4282      	cmp	r2, r0
    6fa2:	d8ea      	bhi.n	6f7a <__divdi3+0x9e>
    6fa4:	2500      	movs	r5, #0
    6fa6:	2101      	movs	r1, #1
    6fa8:	e7e8      	b.n	6f7c <__divdi3+0xa0>
    6faa:	b912      	cbnz	r2, 6fb2 <__divdi3+0xd6>
    6fac:	2601      	movs	r6, #1
    6fae:	fbb6 f2f2 	udiv	r2, r6, r2
    6fb2:	fab2 f682 	clz	r6, r2
    6fb6:	2e00      	cmp	r6, #0
    6fb8:	d139      	bne.n	702e <__divdi3+0x152>
    6fba:	1a8e      	subs	r6, r1, r2
    6fbc:	0c13      	lsrs	r3, r2, #16
    6fbe:	fa1f fc82 	uxth.w	ip, r2
    6fc2:	2501      	movs	r5, #1
    6fc4:	fbb6 f7f3 	udiv	r7, r6, r3
    6fc8:	fb03 6117 	mls	r1, r3, r7, r6
    6fcc:	ea4f 4910 	mov.w	r9, r0, lsr #16
    6fd0:	fb0c f807 	mul.w	r8, ip, r7
    6fd4:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
    6fd8:	45b0      	cmp	r8, r6
    6fda:	d906      	bls.n	6fea <__divdi3+0x10e>
    6fdc:	1e79      	subs	r1, r7, #1
    6fde:	18b6      	adds	r6, r6, r2
    6fe0:	d202      	bcs.n	6fe8 <__divdi3+0x10c>
    6fe2:	45b0      	cmp	r8, r6
    6fe4:	f200 80d3 	bhi.w	718e <__divdi3+0x2b2>
    6fe8:	460f      	mov	r7, r1
    6fea:	ebc8 0606 	rsb	r6, r8, r6
    6fee:	fbb6 f1f3 	udiv	r1, r6, r3
    6ff2:	fb03 6311 	mls	r3, r3, r1, r6
    6ff6:	b280      	uxth	r0, r0
    6ff8:	fb0c fc01 	mul.w	ip, ip, r1
    6ffc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    7000:	459c      	cmp	ip, r3
    7002:	d906      	bls.n	7012 <__divdi3+0x136>
    7004:	1e4e      	subs	r6, r1, #1
    7006:	189a      	adds	r2, r3, r2
    7008:	d202      	bcs.n	7010 <__divdi3+0x134>
    700a:	4594      	cmp	ip, r2
    700c:	f200 80c2 	bhi.w	7194 <__divdi3+0x2b8>
    7010:	4631      	mov	r1, r6
    7012:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
    7016:	e7b1      	b.n	6f7c <__divdi3+0xa0>
    7018:	43e4      	mvns	r4, r4
    701a:	4252      	negs	r2, r2
    701c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    7020:	e766      	b.n	6ef0 <__divdi3+0x14>
    7022:	4240      	negs	r0, r0
    7024:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    7028:	f04f 34ff 	mov.w	r4, #4294967295
    702c:	e75d      	b.n	6eea <__divdi3+0xe>
    702e:	40b2      	lsls	r2, r6
    7030:	f1c6 0920 	rsb	r9, r6, #32
    7034:	fa21 f709 	lsr.w	r7, r1, r9
    7038:	fa20 f509 	lsr.w	r5, r0, r9
    703c:	0c13      	lsrs	r3, r2, #16
    703e:	fa01 f106 	lsl.w	r1, r1, r6
    7042:	fbb7 f8f3 	udiv	r8, r7, r3
    7046:	ea45 0901 	orr.w	r9, r5, r1
    704a:	fa1f fc82 	uxth.w	ip, r2
    704e:	fb03 7718 	mls	r7, r3, r8, r7
    7052:	ea4f 4119 	mov.w	r1, r9, lsr #16
    7056:	fb0c f508 	mul.w	r5, ip, r8
    705a:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
    705e:	40b0      	lsls	r0, r6
    7060:	42bd      	cmp	r5, r7
    7062:	d90a      	bls.n	707a <__divdi3+0x19e>
    7064:	18bf      	adds	r7, r7, r2
    7066:	f108 36ff 	add.w	r6, r8, #4294967295
    706a:	f080 808e 	bcs.w	718a <__divdi3+0x2ae>
    706e:	42bd      	cmp	r5, r7
    7070:	f240 808b 	bls.w	718a <__divdi3+0x2ae>
    7074:	f1a8 0802 	sub.w	r8, r8, #2
    7078:	18bf      	adds	r7, r7, r2
    707a:	1b79      	subs	r1, r7, r5
    707c:	fbb1 f5f3 	udiv	r5, r1, r3
    7080:	fb03 1715 	mls	r7, r3, r5, r1
    7084:	fa1f f989 	uxth.w	r9, r9
    7088:	fb0c f605 	mul.w	r6, ip, r5
    708c:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
    7090:	428e      	cmp	r6, r1
    7092:	d906      	bls.n	70a2 <__divdi3+0x1c6>
    7094:	1e6f      	subs	r7, r5, #1
    7096:	1889      	adds	r1, r1, r2
    7098:	d271      	bcs.n	717e <__divdi3+0x2a2>
    709a:	428e      	cmp	r6, r1
    709c:	d96f      	bls.n	717e <__divdi3+0x2a2>
    709e:	3d02      	subs	r5, #2
    70a0:	1889      	adds	r1, r1, r2
    70a2:	1b8e      	subs	r6, r1, r6
    70a4:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
    70a8:	e78c      	b.n	6fc4 <__divdi3+0xe8>
    70aa:	f1c5 0120 	rsb	r1, r5, #32
    70ae:	fa22 f301 	lsr.w	r3, r2, r1
    70b2:	fa06 f605 	lsl.w	r6, r6, r5
    70b6:	431e      	orrs	r6, r3
    70b8:	fa27 f201 	lsr.w	r2, r7, r1
    70bc:	ea4f 4916 	mov.w	r9, r6, lsr #16
    70c0:	fa07 f705 	lsl.w	r7, r7, r5
    70c4:	fa20 f101 	lsr.w	r1, r0, r1
    70c8:	fbb2 f8f9 	udiv	r8, r2, r9
    70cc:	430f      	orrs	r7, r1
    70ce:	0c3b      	lsrs	r3, r7, #16
    70d0:	fa1f fa86 	uxth.w	sl, r6
    70d4:	fb09 2218 	mls	r2, r9, r8, r2
    70d8:	fb0a fb08 	mul.w	fp, sl, r8
    70dc:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    70e0:	4593      	cmp	fp, r2
    70e2:	fa0c fc05 	lsl.w	ip, ip, r5
    70e6:	d908      	bls.n	70fa <__divdi3+0x21e>
    70e8:	1992      	adds	r2, r2, r6
    70ea:	f108 31ff 	add.w	r1, r8, #4294967295
    70ee:	d24a      	bcs.n	7186 <__divdi3+0x2aa>
    70f0:	4593      	cmp	fp, r2
    70f2:	d948      	bls.n	7186 <__divdi3+0x2aa>
    70f4:	f1a8 0802 	sub.w	r8, r8, #2
    70f8:	1992      	adds	r2, r2, r6
    70fa:	ebcb 0302 	rsb	r3, fp, r2
    70fe:	fbb3 f1f9 	udiv	r1, r3, r9
    7102:	fb09 3211 	mls	r2, r9, r1, r3
    7106:	b2bf      	uxth	r7, r7
    7108:	fb0a fa01 	mul.w	sl, sl, r1
    710c:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
    7110:	459a      	cmp	sl, r3
    7112:	d906      	bls.n	7122 <__divdi3+0x246>
    7114:	1e4a      	subs	r2, r1, #1
    7116:	199b      	adds	r3, r3, r6
    7118:	d233      	bcs.n	7182 <__divdi3+0x2a6>
    711a:	459a      	cmp	sl, r3
    711c:	d931      	bls.n	7182 <__divdi3+0x2a6>
    711e:	3902      	subs	r1, #2
    7120:	199b      	adds	r3, r3, r6
    7122:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
    7126:	0c0f      	lsrs	r7, r1, #16
    7128:	fa1f f88c 	uxth.w	r8, ip
    712c:	fb08 f607 	mul.w	r6, r8, r7
    7130:	b28a      	uxth	r2, r1
    7132:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
    7136:	fb08 f802 	mul.w	r8, r8, r2
    713a:	fb0c 6202 	mla	r2, ip, r2, r6
    713e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
    7142:	fb0c fc07 	mul.w	ip, ip, r7
    7146:	4296      	cmp	r6, r2
    7148:	bf88      	it	hi
    714a:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
    714e:	ebca 0303 	rsb	r3, sl, r3
    7152:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
    7156:	4563      	cmp	r3, ip
    7158:	d30e      	bcc.n	7178 <__divdi3+0x29c>
    715a:	d005      	beq.n	7168 <__divdi3+0x28c>
    715c:	2500      	movs	r5, #0
    715e:	e70d      	b.n	6f7c <__divdi3+0xa0>
    7160:	460e      	mov	r6, r1
    7162:	e6ef      	b.n	6f44 <__divdi3+0x68>
    7164:	461d      	mov	r5, r3
    7166:	e701      	b.n	6f6c <__divdi3+0x90>
    7168:	fa1f f888 	uxth.w	r8, r8
    716c:	fa00 f005 	lsl.w	r0, r0, r5
    7170:	eb08 4502 	add.w	r5, r8, r2, lsl #16
    7174:	42a8      	cmp	r0, r5
    7176:	d2f1      	bcs.n	715c <__divdi3+0x280>
    7178:	3901      	subs	r1, #1
    717a:	2500      	movs	r5, #0
    717c:	e6fe      	b.n	6f7c <__divdi3+0xa0>
    717e:	463d      	mov	r5, r7
    7180:	e78f      	b.n	70a2 <__divdi3+0x1c6>
    7182:	4611      	mov	r1, r2
    7184:	e7cd      	b.n	7122 <__divdi3+0x246>
    7186:	4688      	mov	r8, r1
    7188:	e7b7      	b.n	70fa <__divdi3+0x21e>
    718a:	46b0      	mov	r8, r6
    718c:	e775      	b.n	707a <__divdi3+0x19e>
    718e:	3f02      	subs	r7, #2
    7190:	18b6      	adds	r6, r6, r2
    7192:	e72a      	b.n	6fea <__divdi3+0x10e>
    7194:	3902      	subs	r1, #2
    7196:	e73c      	b.n	7012 <__divdi3+0x136>

00007198 <__udivdi3>:
    7198:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    719c:	4614      	mov	r4, r2
    719e:	4605      	mov	r5, r0
    71a0:	460e      	mov	r6, r1
    71a2:	2b00      	cmp	r3, #0
    71a4:	d13d      	bne.n	7222 <__udivdi3+0x8a>
    71a6:	428a      	cmp	r2, r1
    71a8:	d949      	bls.n	723e <__udivdi3+0xa6>
    71aa:	fab2 f782 	clz	r7, r2
    71ae:	b147      	cbz	r7, 71c2 <__udivdi3+0x2a>
    71b0:	f1c7 0120 	rsb	r1, r7, #32
    71b4:	fa20 f201 	lsr.w	r2, r0, r1
    71b8:	fa06 f607 	lsl.w	r6, r6, r7
    71bc:	40bc      	lsls	r4, r7
    71be:	4316      	orrs	r6, r2
    71c0:	40bd      	lsls	r5, r7
    71c2:	0c22      	lsrs	r2, r4, #16
    71c4:	fbb6 f0f2 	udiv	r0, r6, r2
    71c8:	0c2f      	lsrs	r7, r5, #16
    71ca:	b2a1      	uxth	r1, r4
    71cc:	fb02 6610 	mls	r6, r2, r0, r6
    71d0:	fb01 f300 	mul.w	r3, r1, r0
    71d4:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    71d8:	42b3      	cmp	r3, r6
    71da:	d908      	bls.n	71ee <__udivdi3+0x56>
    71dc:	1e47      	subs	r7, r0, #1
    71de:	1936      	adds	r6, r6, r4
    71e0:	f080 80f8 	bcs.w	73d4 <__udivdi3+0x23c>
    71e4:	42b3      	cmp	r3, r6
    71e6:	f240 80f5 	bls.w	73d4 <__udivdi3+0x23c>
    71ea:	3802      	subs	r0, #2
    71ec:	1936      	adds	r6, r6, r4
    71ee:	1af6      	subs	r6, r6, r3
    71f0:	fbb6 f3f2 	udiv	r3, r6, r2
    71f4:	fb02 6213 	mls	r2, r2, r3, r6
    71f8:	b2ad      	uxth	r5, r5
    71fa:	fb01 f103 	mul.w	r1, r1, r3
    71fe:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
    7202:	4291      	cmp	r1, r2
    7204:	d907      	bls.n	7216 <__udivdi3+0x7e>
    7206:	1e5e      	subs	r6, r3, #1
    7208:	1912      	adds	r2, r2, r4
    720a:	f080 80e5 	bcs.w	73d8 <__udivdi3+0x240>
    720e:	4291      	cmp	r1, r2
    7210:	f240 80e2 	bls.w	73d8 <__udivdi3+0x240>
    7214:	3b02      	subs	r3, #2
    7216:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    721a:	2100      	movs	r1, #0
    721c:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    7220:	4770      	bx	lr
    7222:	428b      	cmp	r3, r1
    7224:	d843      	bhi.n	72ae <__udivdi3+0x116>
    7226:	fab3 f483 	clz	r4, r3
    722a:	2c00      	cmp	r4, #0
    722c:	d142      	bne.n	72b4 <__udivdi3+0x11c>
    722e:	428b      	cmp	r3, r1
    7230:	d302      	bcc.n	7238 <__udivdi3+0xa0>
    7232:	4282      	cmp	r2, r0
    7234:	f200 80df 	bhi.w	73f6 <__udivdi3+0x25e>
    7238:	2100      	movs	r1, #0
    723a:	2001      	movs	r0, #1
    723c:	e7ee      	b.n	721c <__udivdi3+0x84>
    723e:	b912      	cbnz	r2, 7246 <__udivdi3+0xae>
    7240:	2701      	movs	r7, #1
    7242:	fbb7 f4f2 	udiv	r4, r7, r2
    7246:	fab4 f284 	clz	r2, r4
    724a:	2a00      	cmp	r2, #0
    724c:	f040 8088 	bne.w	7360 <__udivdi3+0x1c8>
    7250:	1b0a      	subs	r2, r1, r4
    7252:	0c23      	lsrs	r3, r4, #16
    7254:	b2a7      	uxth	r7, r4
    7256:	2101      	movs	r1, #1
    7258:	fbb2 f6f3 	udiv	r6, r2, r3
    725c:	fb03 2216 	mls	r2, r3, r6, r2
    7260:	ea4f 4c15 	mov.w	ip, r5, lsr #16
    7264:	fb07 f006 	mul.w	r0, r7, r6
    7268:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
    726c:	4290      	cmp	r0, r2
    726e:	d907      	bls.n	7280 <__udivdi3+0xe8>
    7270:	1912      	adds	r2, r2, r4
    7272:	f106 3cff 	add.w	ip, r6, #4294967295
    7276:	d202      	bcs.n	727e <__udivdi3+0xe6>
    7278:	4290      	cmp	r0, r2
    727a:	f200 80ce 	bhi.w	741a <__udivdi3+0x282>
    727e:	4666      	mov	r6, ip
    7280:	1a12      	subs	r2, r2, r0
    7282:	fbb2 f0f3 	udiv	r0, r2, r3
    7286:	fb03 2310 	mls	r3, r3, r0, r2
    728a:	b2ad      	uxth	r5, r5
    728c:	fb07 f700 	mul.w	r7, r7, r0
    7290:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
    7294:	429f      	cmp	r7, r3
    7296:	d907      	bls.n	72a8 <__udivdi3+0x110>
    7298:	1e42      	subs	r2, r0, #1
    729a:	191b      	adds	r3, r3, r4
    729c:	f080 809e 	bcs.w	73dc <__udivdi3+0x244>
    72a0:	429f      	cmp	r7, r3
    72a2:	f240 809b 	bls.w	73dc <__udivdi3+0x244>
    72a6:	3802      	subs	r0, #2
    72a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    72ac:	e7b6      	b.n	721c <__udivdi3+0x84>
    72ae:	2100      	movs	r1, #0
    72b0:	4608      	mov	r0, r1
    72b2:	e7b3      	b.n	721c <__udivdi3+0x84>
    72b4:	f1c4 0620 	rsb	r6, r4, #32
    72b8:	fa22 f506 	lsr.w	r5, r2, r6
    72bc:	fa03 f304 	lsl.w	r3, r3, r4
    72c0:	432b      	orrs	r3, r5
    72c2:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    72c6:	fa21 f506 	lsr.w	r5, r1, r6
    72ca:	fa01 f104 	lsl.w	r1, r1, r4
    72ce:	fa20 f606 	lsr.w	r6, r0, r6
    72d2:	fbb5 f7fc 	udiv	r7, r5, ip
    72d6:	ea46 0a01 	orr.w	sl, r6, r1
    72da:	fa1f f883 	uxth.w	r8, r3
    72de:	fb0c 5517 	mls	r5, ip, r7, r5
    72e2:	ea4f 411a 	mov.w	r1, sl, lsr #16
    72e6:	fb08 f907 	mul.w	r9, r8, r7
    72ea:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
    72ee:	45a9      	cmp	r9, r5
    72f0:	fa02 f204 	lsl.w	r2, r2, r4
    72f4:	d903      	bls.n	72fe <__udivdi3+0x166>
    72f6:	1e7e      	subs	r6, r7, #1
    72f8:	18ed      	adds	r5, r5, r3
    72fa:	d37f      	bcc.n	73fc <__udivdi3+0x264>
    72fc:	4637      	mov	r7, r6
    72fe:	ebc9 0105 	rsb	r1, r9, r5
    7302:	fbb1 f6fc 	udiv	r6, r1, ip
    7306:	fb0c 1516 	mls	r5, ip, r6, r1
    730a:	fa1f fa8a 	uxth.w	sl, sl
    730e:	fb08 f806 	mul.w	r8, r8, r6
    7312:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
    7316:	4588      	cmp	r8, r1
    7318:	d903      	bls.n	7322 <__udivdi3+0x18a>
    731a:	1e75      	subs	r5, r6, #1
    731c:	18c9      	adds	r1, r1, r3
    731e:	d373      	bcc.n	7408 <__udivdi3+0x270>
    7320:	462e      	mov	r6, r5
    7322:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
    7326:	0c37      	lsrs	r7, r6, #16
    7328:	fa1f fc82 	uxth.w	ip, r2
    732c:	fb0c f507 	mul.w	r5, ip, r7
    7330:	0c12      	lsrs	r2, r2, #16
    7332:	b2b3      	uxth	r3, r6
    7334:	fb0c fc03 	mul.w	ip, ip, r3
    7338:	fb02 5303 	mla	r3, r2, r3, r5
    733c:	eb03 431c 	add.w	r3, r3, ip, lsr #16
    7340:	fb02 f207 	mul.w	r2, r2, r7
    7344:	429d      	cmp	r5, r3
    7346:	bf88      	it	hi
    7348:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
    734c:	ebc8 0101 	rsb	r1, r8, r1
    7350:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    7354:	4291      	cmp	r1, r2
    7356:	d34b      	bcc.n	73f0 <__udivdi3+0x258>
    7358:	d042      	beq.n	73e0 <__udivdi3+0x248>
    735a:	4630      	mov	r0, r6
    735c:	2100      	movs	r1, #0
    735e:	e75d      	b.n	721c <__udivdi3+0x84>
    7360:	4094      	lsls	r4, r2
    7362:	f1c2 0520 	rsb	r5, r2, #32
    7366:	fa21 f605 	lsr.w	r6, r1, r5
    736a:	0c23      	lsrs	r3, r4, #16
    736c:	fa20 f705 	lsr.w	r7, r0, r5
    7370:	fa01 f102 	lsl.w	r1, r1, r2
    7374:	fbb6 fcf3 	udiv	ip, r6, r3
    7378:	4339      	orrs	r1, r7
    737a:	0c0d      	lsrs	r5, r1, #16
    737c:	b2a7      	uxth	r7, r4
    737e:	fb03 661c 	mls	r6, r3, ip, r6
    7382:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    7386:	fb07 f80c 	mul.w	r8, r7, ip
    738a:	45b0      	cmp	r8, r6
    738c:	fa00 f502 	lsl.w	r5, r0, r2
    7390:	d908      	bls.n	73a4 <__udivdi3+0x20c>
    7392:	1936      	adds	r6, r6, r4
    7394:	f10c 30ff 	add.w	r0, ip, #4294967295
    7398:	d23d      	bcs.n	7416 <__udivdi3+0x27e>
    739a:	45b0      	cmp	r8, r6
    739c:	d93b      	bls.n	7416 <__udivdi3+0x27e>
    739e:	f1ac 0c02 	sub.w	ip, ip, #2
    73a2:	1936      	adds	r6, r6, r4
    73a4:	ebc8 0206 	rsb	r2, r8, r6
    73a8:	fbb2 f0f3 	udiv	r0, r2, r3
    73ac:	fb03 2610 	mls	r6, r3, r0, r2
    73b0:	b28a      	uxth	r2, r1
    73b2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
    73b6:	fb07 f100 	mul.w	r1, r7, r0
    73ba:	4291      	cmp	r1, r2
    73bc:	d906      	bls.n	73cc <__udivdi3+0x234>
    73be:	1e46      	subs	r6, r0, #1
    73c0:	1912      	adds	r2, r2, r4
    73c2:	d226      	bcs.n	7412 <__udivdi3+0x27a>
    73c4:	4291      	cmp	r1, r2
    73c6:	d924      	bls.n	7412 <__udivdi3+0x27a>
    73c8:	3802      	subs	r0, #2
    73ca:	1912      	adds	r2, r2, r4
    73cc:	1a52      	subs	r2, r2, r1
    73ce:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
    73d2:	e741      	b.n	7258 <__udivdi3+0xc0>
    73d4:	4638      	mov	r0, r7
    73d6:	e70a      	b.n	71ee <__udivdi3+0x56>
    73d8:	4633      	mov	r3, r6
    73da:	e71c      	b.n	7216 <__udivdi3+0x7e>
    73dc:	4610      	mov	r0, r2
    73de:	e763      	b.n	72a8 <__udivdi3+0x110>
    73e0:	fa1f fc8c 	uxth.w	ip, ip
    73e4:	fa00 f004 	lsl.w	r0, r0, r4
    73e8:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
    73ec:	4298      	cmp	r0, r3
    73ee:	d2b4      	bcs.n	735a <__udivdi3+0x1c2>
    73f0:	1e70      	subs	r0, r6, #1
    73f2:	2100      	movs	r1, #0
    73f4:	e712      	b.n	721c <__udivdi3+0x84>
    73f6:	4621      	mov	r1, r4
    73f8:	4620      	mov	r0, r4
    73fa:	e70f      	b.n	721c <__udivdi3+0x84>
    73fc:	45a9      	cmp	r9, r5
    73fe:	f67f af7d 	bls.w	72fc <__udivdi3+0x164>
    7402:	3f02      	subs	r7, #2
    7404:	18ed      	adds	r5, r5, r3
    7406:	e77a      	b.n	72fe <__udivdi3+0x166>
    7408:	4588      	cmp	r8, r1
    740a:	d989      	bls.n	7320 <__udivdi3+0x188>
    740c:	3e02      	subs	r6, #2
    740e:	18c9      	adds	r1, r1, r3
    7410:	e787      	b.n	7322 <__udivdi3+0x18a>
    7412:	4630      	mov	r0, r6
    7414:	e7da      	b.n	73cc <__udivdi3+0x234>
    7416:	4684      	mov	ip, r0
    7418:	e7c4      	b.n	73a4 <__udivdi3+0x20c>
    741a:	3e02      	subs	r6, #2
    741c:	1912      	adds	r2, r2, r4
    741e:	e72f      	b.n	7280 <__udivdi3+0xe8>

00007420 <default_settings>:
    7420:	043a d040 1412 8032 1617 0418 0219 7b1a     :.@...2........{
    7430:	0603 000c 003e 0070 0071 1172 0073 02a2     ....>.p.q.r.s...
    7440:	0111 207a 1c7b 287c 3c7d 557e 687f 7680     ..z {.|(}<~U.h.v
    7450:	8081 8882 8f83 9684 a385 af86 c487 d788     ................
    7460:	e889 e013 0000 0010 000d 2014 05a5 07ab     ........... ....
    7470:	7524 6325 a526 789f 68a0 03a1 dfa6 dfa7     $u%c&..x.h......
    7480:	f0a8 90a9 94aa e513 610e 4b0f 0216 271e     .........a.K...'
    7490:	0221 9122 0729 0b33 0b35 1d37 7138 2a39     !.".).3.5.7.8q9*
    74a0:	783c 404d 204e 0c69 606b 1974 4f8d 008e     <xM@N i.k`t..O..
    74b0:	008f 0090 0091 0092 0096 809a 84b0 0cb1     ................
    74c0:	0eb2 82b3 0ab8 1443 f044 3445 5846 2847     ......C.D.E4FXG(
    74d0:	3a48 8859 885a 445b 675c 495d 0e5e 0464     H:Y.Z.[D\g]I^.d.
    74e0:	2065 0566 0494 0895 0a6c 556d 116e 9f6f     e f.....l.mUn.o.
    74f0:	406a 4001 4002 e713 0215 804f 8050 0051     j@.@.@....O.P.Q.
    7500:	2252 5e53 8054 9e58 0841 003f 0575 e176     R"S^T.X.A.?.u.v.
    7510:	004c 0177 c23d 094b 60c9 3841 4056 1134     L.w.=.K..`A8V@4.
    7520:	023b 89a4 0096 3097 2098 3099 849a 299b     ;......0. .0...)
    7530:	039c 4c9d 3f9e 0478 0179 f0c8 0f79 00c8     ...L.?x.y...y...
    7540:	1079 7ec8 0a79 80c8 0b79 01c8 0c79 0fc8     y..~y...y...y...
    7550:	0d79 20c8 0979 80c8 0279 c0c8 0379 40c8     y.. y...y...y..@
    7560:	0579 30c8 2679 0309 0055 4056 423b 0000     y..0y&..U.V@;B..
    7570:	6e49 6169 696c 6973 676e 4920 4332 0d0a     Inialising I2C..
    7580:	0000 0000 6e49 6169 696c 6973 676e 4320     ....Inialising C
    7590:	6d61 7265 0a61 000d 6553 2074 6970 206e     amera...Set pin 
    75a0:	6163 6c6c 6162 6b63 6620 6961 756c 6572     callback failure
    75b0:	0d21 000a 7453 7261 2074 6177 6576 6f66     !...Start wavefo
    75c0:	6d72 203a 7246 7165 6575 636e 2079 203d     rm: Frequency = 
    75d0:	6425 4820 2c7a 7544 7974 4320 6379 656c     %d Hz,Duty Cycle
    75e0:	3d20 2520 6432 2525 0d0a 0000 0d0a 430a      = %2d%%.......C
    75f0:	6d61 7265 2061 7041 0a70 000d 6e49 7469     amera App...Init
    7600:	6169 696c 6573 7320 6375 6563 7373 0d0a     ialise success..
    7610:	0000 0000 6e49 7469 6169 696c 6573 6620     ....Initialise f
    7620:	6961 0a6c 000d 0000 6325 0000 6548 706c     ail.....%c..Help
    7630:	0d0a 2d2d 2d2d 0a0a 2c77 2c61 2c73 2064     ..----..w,a,s,d 
    7640:	202d 6f6d 6576 6320 6d61 7265 0a61 700d     - move camera..p
    7650:	2d20 7420 6b61 2065 6870 746f 0a6f 000d      - take photo...
    7660:	6547 2074 6d49 6761 2165 0d0a 0000 0000     Get Image!......
    7670:	6f44 656e 0a21 000d 654b 2079 7830 3025     Done!...Key 0x%0
    7680:	7832 7020 6572 7373 6465 0d0a 0000 0000     2x pressed......

00007690 <_global_impure_ptr>:
    7690:	0058 2000 0043 000a                         X.. C...

00007698 <blanks.6678>:
    7698:	2020 2020 2020 2020 2020 2020 2020 2020                     

000076a8 <zeroes.6679>:
    76a8:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
    76b8:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
    76c8:	3000 3231 3433 3635 3837 6139 6362 6564     .0123456789abcde
    76d8:	0066                                        f.

000076da <basefix.6143>:
    76da:	000a 0001 0002 0003 0004 0005 0006 0007     ................
    76ea:	0008 0009 000a 000b 000c 000d 000e 000f     ................
    76fa:	0010                                        ..

000076fc <_ctype_>:
    76fc:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
    770c:	2020 2020 2020 2020 2020 2020 2020 2020                     
    771c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
    772c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
    773c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
    774c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
    775c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
    776c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
    777c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
    77fc:	5000 534f 5849 2e00 0000 0000               .POSIX......

00007808 <_init>:
    7808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    780a:	bf00      	nop
    780c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    780e:	bc08      	pop	{r3}
    7810:	469e      	mov	lr, r3
    7812:	4770      	bx	lr

00007814 <__init_array_start>:
    7814:	00004f49 	.word	0x00004f49

00007818 <__frame_dummy_init_array_entry>:
    7818:	000001f9                                ....

0000781c <_fini>:
    781c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    781e:	bf00      	nop
    7820:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7822:	bc08      	pop	{r3}
    7824:	469e      	mov	lr, r3
    7826:	4770      	bx	lr

00007828 <__fini_array_start>:
    7828:	000001d1 	.word	0x000001d1

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <bpm_ps_no_halt_exec>:
 */
RAMFUNC bool bpm_ps_no_halt_exec(Bpm *bpm, uint32_t pmcon)
{
	bool b_psok = false;
	bool b_timeout = false;
	BPM_UNLOCK(PMCON);
2000000c:	f04f 0300 	mov.w	r3, #0
20000010:	f2c4 030f 	movt	r3, #16399	; 0x400f
20000014:	f04f 021c 	mov.w	r2, #28
20000018:	f6ca 2200 	movt	r2, #43520	; 0xaa00
2000001c:	619a      	str	r2, [r3, #24]
	bpm->BPM_PMCON = pmcon;
2000001e:	61c1      	str	r1, [r0, #28]
	do {
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
20000020:	f04f 0100 	mov.w	r1, #0
20000024:	f2c4 010f 	movt	r1, #16399	; 0x400f
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
20000028:	f24e 0210 	movw	r2, #57360	; 0xe010
2000002c:	f2ce 0200 	movt	r2, #57344	; 0xe000
	bool b_psok = false;
	bool b_timeout = false;
	BPM_UNLOCK(PMCON);
	bpm->BPM_PMCON = pmcon;
	do {
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
20000030:	6948      	ldr	r0, [r1, #20]
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
20000032:	6813      	ldr	r3, [r2, #0]
20000034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
	} while (!b_psok && !b_timeout);
20000038:	f010 0001 	ands.w	r0, r0, #1
2000003c:	d101      	bne.n	20000042 <bpm_ps_no_halt_exec+0x36>
2000003e:	2b00      	cmp	r3, #0
20000040:	d0f6      	beq.n	20000030 <bpm_ps_no_halt_exec+0x24>
	return b_psok;
}
20000042:	4770      	bx	lr

20000044 <g_interrupt_enabled>:
20000044:	0001 0000                                   ....

20000048 <flashcalw_wait_until_ready>:
20000048:	360d 0000 0000 0000                         .6......

20000050 <_impure_ptr>:
20000050:	0058 2000 0000 0000                         X.. ....

20000058 <impure_data>:
20000058:	0000 0000 0344 2000 03ac 2000 0414 2000     ....D.. ... ... 
	...
2000008c:	7694 0000 0000 0000 0000 0000 0000 0000     .v..............
	...
20000100:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000110:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000480 <__ctype_ptr__>:
20000480:	76fc 0000                                   .v..

20000484 <lc_ctype_charset>:
20000484:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

200004a4 <__mb_cur_max>:
200004a4:	0001 0000                                   ....

200004a8 <lc_message_charset>:
200004a8:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

200004c8 <lconv>:
200004c8:	7803 0000 7697 0000 7697 0000 7697 0000     .x...v...v...v..
200004d8:	7697 0000 7697 0000 7697 0000 7697 0000     .v...v...v...v..
200004e8:	7697 0000 7697 0000 ffff ffff ffff ffff     .v...v..........
200004f8:	ffff ffff ffff 0000                         ........

20000500 <__malloc_av_>:
	...
20000508:	0500 2000 0500 2000 0508 2000 0508 2000     ... ... ... ... 
20000518:	0510 2000 0510 2000 0518 2000 0518 2000     ... ... ... ... 
20000528:	0520 2000 0520 2000 0528 2000 0528 2000      ..  .. (.. (.. 
20000538:	0530 2000 0530 2000 0538 2000 0538 2000     0.. 0.. 8.. 8.. 
20000548:	0540 2000 0540 2000 0548 2000 0548 2000     @.. @.. H.. H.. 
20000558:	0550 2000 0550 2000 0558 2000 0558 2000     P.. P.. X.. X.. 
20000568:	0560 2000 0560 2000 0568 2000 0568 2000     `.. `.. h.. h.. 
20000578:	0570 2000 0570 2000 0578 2000 0578 2000     p.. p.. x.. x.. 
20000588:	0580 2000 0580 2000 0588 2000 0588 2000     ... ... ... ... 
20000598:	0590 2000 0590 2000 0598 2000 0598 2000     ... ... ... ... 
200005a8:	05a0 2000 05a0 2000 05a8 2000 05a8 2000     ... ... ... ... 
200005b8:	05b0 2000 05b0 2000 05b8 2000 05b8 2000     ... ... ... ... 
200005c8:	05c0 2000 05c0 2000 05c8 2000 05c8 2000     ... ... ... ... 
200005d8:	05d0 2000 05d0 2000 05d8 2000 05d8 2000     ... ... ... ... 
200005e8:	05e0 2000 05e0 2000 05e8 2000 05e8 2000     ... ... ... ... 
200005f8:	05f0 2000 05f0 2000 05f8 2000 05f8 2000     ... ... ... ... 
20000608:	0600 2000 0600 2000 0608 2000 0608 2000     ... ... ... ... 
20000618:	0610 2000 0610 2000 0618 2000 0618 2000     ... ... ... ... 
20000628:	0620 2000 0620 2000 0628 2000 0628 2000      ..  .. (.. (.. 
20000638:	0630 2000 0630 2000 0638 2000 0638 2000     0.. 0.. 8.. 8.. 
20000648:	0640 2000 0640 2000 0648 2000 0648 2000     @.. @.. H.. H.. 
20000658:	0650 2000 0650 2000 0658 2000 0658 2000     P.. P.. X.. X.. 
20000668:	0660 2000 0660 2000 0668 2000 0668 2000     `.. `.. h.. h.. 
20000678:	0670 2000 0670 2000 0678 2000 0678 2000     p.. p.. x.. x.. 
20000688:	0680 2000 0680 2000 0688 2000 0688 2000     ... ... ... ... 
20000698:	0690 2000 0690 2000 0698 2000 0698 2000     ... ... ... ... 
200006a8:	06a0 2000 06a0 2000 06a8 2000 06a8 2000     ... ... ... ... 
200006b8:	06b0 2000 06b0 2000 06b8 2000 06b8 2000     ... ... ... ... 
200006c8:	06c0 2000 06c0 2000 06c8 2000 06c8 2000     ... ... ... ... 
200006d8:	06d0 2000 06d0 2000 06d8 2000 06d8 2000     ... ... ... ... 
200006e8:	06e0 2000 06e0 2000 06e8 2000 06e8 2000     ... ... ... ... 
200006f8:	06f0 2000 06f0 2000 06f8 2000 06f8 2000     ... ... ... ... 
20000708:	0700 2000 0700 2000 0708 2000 0708 2000     ... ... ... ... 
20000718:	0710 2000 0710 2000 0718 2000 0718 2000     ... ... ... ... 
20000728:	0720 2000 0720 2000 0728 2000 0728 2000      ..  .. (.. (.. 
20000738:	0730 2000 0730 2000 0738 2000 0738 2000     0.. 0.. 8.. 8.. 
20000748:	0740 2000 0740 2000 0748 2000 0748 2000     @.. @.. H.. H.. 
20000758:	0750 2000 0750 2000 0758 2000 0758 2000     P.. P.. X.. X.. 
20000768:	0760 2000 0760 2000 0768 2000 0768 2000     `.. `.. h.. h.. 
20000778:	0770 2000 0770 2000 0778 2000 0778 2000     p.. p.. x.. x.. 
20000788:	0780 2000 0780 2000 0788 2000 0788 2000     ... ... ... ... 
20000798:	0790 2000 0790 2000 0798 2000 0798 2000     ... ... ... ... 
200007a8:	07a0 2000 07a0 2000 07a8 2000 07a8 2000     ... ... ... ... 
200007b8:	07b0 2000 07b0 2000 07b8 2000 07b8 2000     ... ... ... ... 
200007c8:	07c0 2000 07c0 2000 07c8 2000 07c8 2000     ... ... ... ... 
200007d8:	07d0 2000 07d0 2000 07d8 2000 07d8 2000     ... ... ... ... 
200007e8:	07e0 2000 07e0 2000 07e8 2000 07e8 2000     ... ... ... ... 
200007f8:	07f0 2000 07f0 2000 07f8 2000 07f8 2000     ... ... ... ... 
20000808:	0800 2000 0800 2000 0808 2000 0808 2000     ... ... ... ... 
20000818:	0810 2000 0810 2000 0818 2000 0818 2000     ... ... ... ... 
20000828:	0820 2000 0820 2000 0828 2000 0828 2000      ..  .. (.. (.. 
20000838:	0830 2000 0830 2000 0838 2000 0838 2000     0.. 0.. 8.. 8.. 
20000848:	0840 2000 0840 2000 0848 2000 0848 2000     @.. @.. H.. H.. 
20000858:	0850 2000 0850 2000 0858 2000 0858 2000     P.. P.. X.. X.. 
20000868:	0860 2000 0860 2000 0868 2000 0868 2000     `.. `.. h.. h.. 
20000878:	0870 2000 0870 2000 0878 2000 0878 2000     p.. p.. x.. x.. 
20000888:	0880 2000 0880 2000 0888 2000 0888 2000     ... ... ... ... 
20000898:	0890 2000 0890 2000 0898 2000 0898 2000     ... ... ... ... 
200008a8:	08a0 2000 08a0 2000 08a8 2000 08a8 2000     ... ... ... ... 
200008b8:	08b0 2000 08b0 2000 08b8 2000 08b8 2000     ... ... ... ... 
200008c8:	08c0 2000 08c0 2000 08c8 2000 08c8 2000     ... ... ... ... 
200008d8:	08d0 2000 08d0 2000 08d8 2000 08d8 2000     ... ... ... ... 
200008e8:	08e0 2000 08e0 2000 08e8 2000 08e8 2000     ... ... ... ... 
200008f8:	08f0 2000 08f0 2000 08f8 2000 08f8 2000     ... ... ... ... 

20000908 <__malloc_sbrk_base>:
20000908:	ffff ffff                                   ....

2000090c <__malloc_trim_threshold>:
2000090c:	0000 0002                                   ....

20000910 <__mbtowc>:
20000910:	5f41 0000                                   A_..

20000914 <__wctomb>:
20000914:	6cad 0000                                   .l..
