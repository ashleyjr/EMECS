
TC_TC_CAPTURE_WAVEFORM_EXAMPLE4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000063b4  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000063b4  000063b4  0000e3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000918  20000000  000063bc  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000070  20000918  00006cd4  00010918  2**2
                  ALLOC
  4 .stack        00001000  20000988  00006d44  00010918  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00010918  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  00010942  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002ea79  00000000  00000000  000109b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000087ca  00000000  00000000  0003f42c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001108  00000000  00000000  00047bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000bf8  00000000  00000000  00048d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002ddda  00000000  00000000  000498f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00016583  00000000  00000000  000776d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000e3a71  00000000  00000000  0008dc55  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002448  00000000  00000000  001716c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000eed8  00000000  00000000  00173b10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20001988 	.word	0x20001988
       4:	00001e45 	.word	0x00001e45
       8:	00001e41 	.word	0x00001e41
       c:	00001e41 	.word	0x00001e41
      10:	00001e41 	.word	0x00001e41
      14:	00001e41 	.word	0x00001e41
      18:	00001e41 	.word	0x00001e41
	...
      2c:	00001e41 	.word	0x00001e41
      30:	00001e41 	.word	0x00001e41
      34:	00000000 	.word	0x00000000
      38:	00001e41 	.word	0x00001e41
      3c:	00001e41 	.word	0x00001e41
      40:	00001e41 	.word	0x00001e41
      44:	00001e41 	.word	0x00001e41
      48:	00001e41 	.word	0x00001e41
      4c:	00001e41 	.word	0x00001e41
      50:	00001e41 	.word	0x00001e41
      54:	00001e41 	.word	0x00001e41
      58:	00001e41 	.word	0x00001e41
      5c:	00001e41 	.word	0x00001e41
      60:	00001e41 	.word	0x00001e41
      64:	00001e41 	.word	0x00001e41
      68:	00001e41 	.word	0x00001e41
      6c:	00001e41 	.word	0x00001e41
      70:	00001e41 	.word	0x00001e41
      74:	00001e41 	.word	0x00001e41
      78:	00001e41 	.word	0x00001e41
      7c:	00001e41 	.word	0x00001e41
      80:	00001e41 	.word	0x00001e41
      84:	00001e41 	.word	0x00001e41
      88:	00001e41 	.word	0x00001e41
      8c:	00001e41 	.word	0x00001e41
      90:	00001e41 	.word	0x00001e41
      94:	00001e41 	.word	0x00001e41
      98:	00001e41 	.word	0x00001e41
      9c:	00001e41 	.word	0x00001e41
      a0:	00001e41 	.word	0x00001e41
      a4:	00001e41 	.word	0x00001e41
      a8:	00001e41 	.word	0x00001e41
      ac:	00001e41 	.word	0x00001e41
      b0:	00001e41 	.word	0x00001e41
      b4:	00001e41 	.word	0x00001e41
      b8:	00001e41 	.word	0x00001e41
      bc:	00001e41 	.word	0x00001e41
      c0:	00001e41 	.word	0x00001e41
      c4:	00001e41 	.word	0x00001e41
      c8:	00001e41 	.word	0x00001e41
      cc:	00001e41 	.word	0x00001e41
      d0:	00001e41 	.word	0x00001e41
      d4:	00001e41 	.word	0x00001e41
      d8:	00001e41 	.word	0x00001e41
      dc:	00001e41 	.word	0x00001e41
      e0:	00001e41 	.word	0x00001e41
      e4:	00001e41 	.word	0x00001e41
      e8:	00001e41 	.word	0x00001e41
      ec:	00001e41 	.word	0x00001e41
      f0:	00001e41 	.word	0x00001e41
      f4:	00001e41 	.word	0x00001e41
      f8:	00001e41 	.word	0x00001e41
      fc:	00001e41 	.word	0x00001e41
     100:	00001e41 	.word	0x00001e41
     104:	00001e41 	.word	0x00001e41
     108:	00001e41 	.word	0x00001e41
     10c:	00001e41 	.word	0x00001e41
     110:	00001e41 	.word	0x00001e41
     114:	00001e41 	.word	0x00001e41
     118:	00001e41 	.word	0x00001e41
     11c:	00001e41 	.word	0x00001e41
     120:	00001e41 	.word	0x00001e41
     124:	00001e41 	.word	0x00001e41
     128:	00001e41 	.word	0x00001e41
     12c:	00001e41 	.word	0x00001e41
     130:	00001e41 	.word	0x00001e41
     134:	00001e41 	.word	0x00001e41
     138:	00001e41 	.word	0x00001e41
     13c:	00001e41 	.word	0x00001e41
     140:	00001e41 	.word	0x00001e41
     144:	00001e41 	.word	0x00001e41
     148:	00001e41 	.word	0x00001e41
     14c:	00001e41 	.word	0x00001e41
     150:	00001e41 	.word	0x00001e41
     154:	00001e41 	.word	0x00001e41
     158:	00001e41 	.word	0x00001e41
     15c:	00001e41 	.word	0x00001e41
     160:	00001e41 	.word	0x00001e41
     164:	00001e41 	.word	0x00001e41
     168:	00001e41 	.word	0x00001e41
     16c:	00001e41 	.word	0x00001e41
     170:	00001e41 	.word	0x00001e41
     174:	00001e41 	.word	0x00001e41
     178:	00001e41 	.word	0x00001e41
     17c:	00001e41 	.word	0x00001e41

00000180 <deregister_tm_clones>:
     180:	b508      	push	{r3, lr}
     182:	4805      	ldr	r0, [pc, #20]	; (198 <deregister_tm_clones+0x18>)
     184:	4b05      	ldr	r3, [pc, #20]	; (19c <deregister_tm_clones+0x1c>)
     186:	1a19      	subs	r1, r3, r0
     188:	2906      	cmp	r1, #6
     18a:	d800      	bhi.n	18e <deregister_tm_clones+0xe>
     18c:	bd08      	pop	{r3, pc}
     18e:	4a04      	ldr	r2, [pc, #16]	; (1a0 <deregister_tm_clones+0x20>)
     190:	2a00      	cmp	r2, #0
     192:	d0fb      	beq.n	18c <deregister_tm_clones+0xc>
     194:	4790      	blx	r2
     196:	e7f9      	b.n	18c <deregister_tm_clones+0xc>
     198:	000063bc 	.word	0x000063bc
     19c:	000063bf 	.word	0x000063bf
     1a0:	00000000 	.word	0x00000000

000001a4 <register_tm_clones>:
     1a4:	b508      	push	{r3, lr}
     1a6:	4807      	ldr	r0, [pc, #28]	; (1c4 <register_tm_clones+0x20>)
     1a8:	4b07      	ldr	r3, [pc, #28]	; (1c8 <register_tm_clones+0x24>)
     1aa:	1a19      	subs	r1, r3, r0
     1ac:	108a      	asrs	r2, r1, #2
     1ae:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
     1b2:	1059      	asrs	r1, r3, #1
     1b4:	d100      	bne.n	1b8 <register_tm_clones+0x14>
     1b6:	bd08      	pop	{r3, pc}
     1b8:	4a04      	ldr	r2, [pc, #16]	; (1cc <register_tm_clones+0x28>)
     1ba:	2a00      	cmp	r2, #0
     1bc:	d0fb      	beq.n	1b6 <register_tm_clones+0x12>
     1be:	4790      	blx	r2
     1c0:	e7f9      	b.n	1b6 <register_tm_clones+0x12>
     1c2:	bf00      	nop
     1c4:	000063bc 	.word	0x000063bc
     1c8:	000063bc 	.word	0x000063bc
     1cc:	00000000 	.word	0x00000000

000001d0 <__do_global_dtors_aux>:
     1d0:	b510      	push	{r4, lr}
     1d2:	4c06      	ldr	r4, [pc, #24]	; (1ec <__do_global_dtors_aux+0x1c>)
     1d4:	7823      	ldrb	r3, [r4, #0]
     1d6:	b943      	cbnz	r3, 1ea <__do_global_dtors_aux+0x1a>
     1d8:	f7ff ffd2 	bl	180 <deregister_tm_clones>
     1dc:	4804      	ldr	r0, [pc, #16]	; (1f0 <__do_global_dtors_aux+0x20>)
     1de:	b110      	cbz	r0, 1e6 <__do_global_dtors_aux+0x16>
     1e0:	4804      	ldr	r0, [pc, #16]	; (1f4 <__do_global_dtors_aux+0x24>)
     1e2:	f3af 8000 	nop.w
     1e6:	2101      	movs	r1, #1
     1e8:	7021      	strb	r1, [r4, #0]
     1ea:	bd10      	pop	{r4, pc}
     1ec:	20000918 	.word	0x20000918
     1f0:	00000000 	.word	0x00000000
     1f4:	000063bc 	.word	0x000063bc

000001f8 <frame_dummy>:
     1f8:	b508      	push	{r3, lr}
     1fa:	4b08      	ldr	r3, [pc, #32]	; (21c <frame_dummy+0x24>)
     1fc:	b11b      	cbz	r3, 206 <frame_dummy+0xe>
     1fe:	4808      	ldr	r0, [pc, #32]	; (220 <frame_dummy+0x28>)
     200:	4908      	ldr	r1, [pc, #32]	; (224 <frame_dummy+0x2c>)
     202:	f3af 8000 	nop.w
     206:	4808      	ldr	r0, [pc, #32]	; (228 <frame_dummy+0x30>)
     208:	6801      	ldr	r1, [r0, #0]
     20a:	b111      	cbz	r1, 212 <frame_dummy+0x1a>
     20c:	4a07      	ldr	r2, [pc, #28]	; (22c <frame_dummy+0x34>)
     20e:	b102      	cbz	r2, 212 <frame_dummy+0x1a>
     210:	4790      	blx	r2
     212:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     216:	f7ff bfc5 	b.w	1a4 <register_tm_clones>
     21a:	bf00      	nop
     21c:	00000000 	.word	0x00000000
     220:	000063bc 	.word	0x000063bc
     224:	2000091c 	.word	0x2000091c
     228:	000063bc 	.word	0x000063bc
     22c:	00000000 	.word	0x00000000

00000230 <osc_priv_enable_osc0>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     230:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     234:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     236:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     23a:	f240 0344 	movw	r3, #68	; 0x44
     23e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     242:	f04f 0200 	mov.w	r2, #0
     246:	701a      	strb	r2, [r3, #0]
void osc_priv_enable_osc0(void)
{
	irqflags_t flags;

	flags = cpu_irq_save();
	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAu)
     248:	f44f 6000 	mov.w	r0, #2048	; 0x800
     24c:	f2c4 000e 	movt	r0, #16398	; 0x400e
     250:	f04f 0320 	mov.w	r3, #32
     254:	f6ca 2300 	movt	r3, #43520	; 0xaa00
     258:	6183      	str	r3, [r0, #24]
		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_OSCCTRL0 - (uint32_t)SCIF);
	SCIF->SCIF_OSCCTRL0 =
     25a:	f240 3207 	movw	r2, #775	; 0x307
     25e:	f2c0 0201 	movt	r2, #1
     262:	6202      	str	r2, [r0, #32]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     264:	b949      	cbnz	r1, 27a <osc_priv_enable_osc0+0x4a>
		cpu_irq_enable();
     266:	f240 0144 	movw	r1, #68	; 0x44
     26a:	f2c2 0100 	movt	r1, #8192	; 0x2000
     26e:	f04f 0001 	mov.w	r0, #1
     272:	7008      	strb	r0, [r1, #0]
     274:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     278:	b662      	cpsie	i
     27a:	4770      	bx	lr

0000027c <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(uint32_t bus_id, uint32_t module_index)
{
     27c:	b430      	push	{r4, r5}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     27e:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     282:	b672      	cpsid	i
     284:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     288:	f240 0344 	movw	r3, #68	; 0x44
     28c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     290:	f04f 0200 	mov.w	r2, #0
     294:	701a      	strb	r2, [r3, #0]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
     296:	f04f 0320 	mov.w	r3, #32
     29a:	f2c4 030e 	movt	r3, #16398	; 0x400e
     29e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
	mask |= 1U << module_index;
     2a2:	f04f 0501 	mov.w	r5, #1
     2a6:	fa05 f101 	lsl.w	r1, r5, r1
     2aa:	4311      	orrs	r1, r2
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
     2ac:	f100 0208 	add.w	r2, r0, #8
     2b0:	ea4f 6502 	mov.w	r5, r2, lsl #24
     2b4:	ea4f 5295 	mov.w	r2, r5, lsr #22
	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
	mask |= 1U << module_index;
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
     2b8:	f042 452a 	orr.w	r5, r2, #2852126720	; 0xaa000000
     2bc:	f04f 0200 	mov.w	r2, #0
     2c0:	f2c4 020e 	movt	r2, #16398	; 0x400e
     2c4:	6595      	str	r5, [r2, #88]	; 0x58
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
	*(&PM->PM_CPUMASK + bus_id) = mask;
     2c6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     2ca:	b94c      	cbnz	r4, 2e0 <sysclk_priv_enable_module+0x64>
		cpu_irq_enable();
     2cc:	f240 0044 	movw	r0, #68	; 0x44
     2d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
     2d4:	f04f 0301 	mov.w	r3, #1
     2d8:	7003      	strb	r3, [r0, #0]
     2da:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     2de:	b662      	cpsie	i

	cpu_irq_restore(flags);
}
     2e0:	bc30      	pop	{r4, r5}
     2e2:	4770      	bx	lr

000002e4 <sysclk_priv_disable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be disabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_disable_module(uint32_t bus_id, uint32_t module_index)
{
     2e4:	b430      	push	{r4, r5}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     2e6:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     2ea:	b672      	cpsid	i
     2ec:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     2f0:	f240 0344 	movw	r3, #68	; 0x44
     2f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     2f8:	f04f 0200 	mov.w	r2, #0
     2fc:	701a      	strb	r2, [r3, #0]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Disable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
     2fe:	f04f 0320 	mov.w	r3, #32
     302:	f2c4 030e 	movt	r3, #16398	; 0x400e
     306:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
	mask &= ~(1U << module_index);
     30a:	f04f 0501 	mov.w	r5, #1
     30e:	fa05 f101 	lsl.w	r1, r5, r1
     312:	ea22 0101 	bic.w	r1, r2, r1
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
     316:	f100 0208 	add.w	r2, r0, #8
     31a:	ea4f 6502 	mov.w	r5, r2, lsl #24
     31e:	ea4f 5295 	mov.w	r2, r5, lsr #22
	flags = cpu_irq_save();

	/* Disable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
	mask &= ~(1U << module_index);
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
     322:	f042 452a 	orr.w	r5, r2, #2852126720	; 0xaa000000
     326:	f04f 0200 	mov.w	r2, #0
     32a:	f2c4 020e 	movt	r2, #16398	; 0x400e
     32e:	6595      	str	r5, [r2, #88]	; 0x58
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
	*(&PM->PM_CPUMASK + bus_id) = mask;
     330:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     334:	b94c      	cbnz	r4, 34a <sysclk_priv_disable_module+0x66>
		cpu_irq_enable();
     336:	f240 0044 	movw	r0, #68	; 0x44
     33a:	f2c2 0000 	movt	r0, #8192	; 0x2000
     33e:	f04f 0301 	mov.w	r3, #1
     342:	7003      	strb	r3, [r0, #0]
     344:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     348:	b662      	cpsie	i

	cpu_irq_restore(flags);
}
     34a:	bc30      	pop	{r4, r5}
     34c:	4770      	bx	lr
     34e:	bf00      	nop

00000350 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_enable_pba_module(uint32_t module_index)
{
     350:	b538      	push	{r3, r4, r5, lr}
     352:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     354:	f3ef 8510 	mrs	r5, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     358:	b672      	cpsid	i
     35a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     35e:	f240 0344 	movw	r3, #68	; 0x44
     362:	f2c2 0300 	movt	r3, #8192	; 0x2000
     366:	f04f 0200 	mov.w	r2, #0
     36a:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (PM->PM_PBAMASK == 0) {
     36c:	4610      	mov	r0, r2
     36e:	f2c4 000e 	movt	r0, #16398	; 0x400e
     372:	6a81      	ldr	r1, [r0, #40]	; 0x28
     374:	b941      	cbnz	r1, 388 <sysclk_enable_pba_module+0x38>
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
     376:	f04f 0001 	mov.w	r0, #1
     37a:	f04f 0105 	mov.w	r1, #5
     37e:	f240 237d 	movw	r3, #637	; 0x27d
     382:	f2c0 0300 	movt	r3, #0
     386:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     388:	b94d      	cbnz	r5, 39e <sysclk_enable_pba_module+0x4e>
		cpu_irq_enable();
     38a:	f240 0044 	movw	r0, #68	; 0x44
     38e:	f2c2 0000 	movt	r0, #8192	; 0x2000
     392:	f04f 0201 	mov.w	r2, #1
     396:	7002      	strb	r2, [r0, #0]
     398:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     39c:	b662      	cpsie	i
	}

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBA, module_index);
     39e:	f04f 0002 	mov.w	r0, #2
     3a2:	4621      	mov	r1, r4
     3a4:	f240 237d 	movw	r3, #637	; 0x27d
     3a8:	f2c0 0300 	movt	r3, #0
     3ac:	4798      	blx	r3
     3ae:	bd38      	pop	{r3, r4, r5, pc}

000003b0 <sysclk_disable_pba_module>:
/**
 * \brief Disable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_disable_pba_module(uint32_t module_index)
{
     3b0:	b510      	push	{r4, lr}
     3b2:	4601      	mov	r1, r0
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBA, module_index);
     3b4:	f04f 0002 	mov.w	r0, #2
     3b8:	f240 23e5 	movw	r3, #741	; 0x2e5
     3bc:	f2c0 0300 	movt	r3, #0
     3c0:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     3c2:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     3c6:	b672      	cpsid	i
     3c8:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     3cc:	f240 0044 	movw	r0, #68	; 0x44
     3d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
     3d4:	f04f 0200 	mov.w	r2, #0
     3d8:	7002      	strb	r2, [r0, #0]

	/* Disable the bridge if possible */
	flags = cpu_irq_save();

	if (PM->PM_PBAMASK == 0) {
     3da:	4611      	mov	r1, r2
     3dc:	f2c4 010e 	movt	r1, #16398	; 0x400e
     3e0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
     3e2:	b943      	cbnz	r3, 3f6 <sysclk_disable_pba_module+0x46>
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
     3e4:	f04f 0001 	mov.w	r0, #1
     3e8:	f04f 0105 	mov.w	r1, #5
     3ec:	f240 22e5 	movw	r2, #741	; 0x2e5
     3f0:	f2c0 0200 	movt	r2, #0
     3f4:	4790      	blx	r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     3f6:	b94c      	cbnz	r4, 40c <sysclk_disable_pba_module+0x5c>
		cpu_irq_enable();
     3f8:	f240 0044 	movw	r0, #68	; 0x44
     3fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
     400:	f04f 0101 	mov.w	r1, #1
     404:	7001      	strb	r1, [r0, #0]
     406:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     40a:	b662      	cpsie	i
     40c:	bd10      	pop	{r4, pc}
     40e:	bf00      	nop

00000410 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(uint32_t module_index)
{
     410:	b538      	push	{r3, r4, r5, lr}
     412:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     414:	f3ef 8510 	mrs	r5, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     418:	b672      	cpsid	i
     41a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     41e:	f240 0344 	movw	r3, #68	; 0x44
     422:	f2c2 0300 	movt	r3, #8192	; 0x2000
     426:	f04f 0200 	mov.w	r2, #0
     42a:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (PM->PM_PBBMASK == 0) {
     42c:	4610      	mov	r0, r2
     42e:	f2c4 000e 	movt	r0, #16398	; 0x400e
     432:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
     434:	b941      	cbnz	r1, 448 <sysclk_enable_pbb_module+0x38>
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
     436:	f04f 0001 	mov.w	r0, #1
     43a:	f04f 0106 	mov.w	r1, #6
     43e:	f240 237d 	movw	r3, #637	; 0x27d
     442:	f2c0 0300 	movt	r3, #0
     446:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     448:	b94d      	cbnz	r5, 45e <sysclk_enable_pbb_module+0x4e>
		cpu_irq_enable();
     44a:	f240 0044 	movw	r0, #68	; 0x44
     44e:	f2c2 0000 	movt	r0, #8192	; 0x2000
     452:	f04f 0201 	mov.w	r2, #1
     456:	7002      	strb	r2, [r0, #0]
     458:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     45c:	b662      	cpsie	i
	}

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBB, module_index);
     45e:	f04f 0003 	mov.w	r0, #3
     462:	4621      	mov	r1, r4
     464:	f240 237d 	movw	r3, #637	; 0x27d
     468:	f2c0 0300 	movt	r3, #0
     46c:	4798      	blx	r3
     46e:	bd38      	pop	{r3, r4, r5, pc}

00000470 <sysclk_disable_pbb_module>:
/**
 * \brief Disable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_disable_pbb_module(uint32_t module_index)
{
     470:	b510      	push	{r4, lr}
     472:	4601      	mov	r1, r0
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBB, module_index);
     474:	f04f 0003 	mov.w	r0, #3
     478:	f240 23e5 	movw	r3, #741	; 0x2e5
     47c:	f2c0 0300 	movt	r3, #0
     480:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     482:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     486:	b672      	cpsid	i
     488:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     48c:	f240 0044 	movw	r0, #68	; 0x44
     490:	f2c2 0000 	movt	r0, #8192	; 0x2000
     494:	f04f 0200 	mov.w	r2, #0
     498:	7002      	strb	r2, [r0, #0]

	/* Disable the bridge if possible */
	flags = cpu_irq_save();

	if (PM->PM_PBBMASK == 0) {
     49a:	4611      	mov	r1, r2
     49c:	f2c4 010e 	movt	r1, #16398	; 0x400e
     4a0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
     4a2:	b943      	cbnz	r3, 4b6 <sysclk_disable_pbb_module+0x46>
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
     4a4:	f04f 0001 	mov.w	r0, #1
     4a8:	f04f 0106 	mov.w	r1, #6
     4ac:	f240 22e5 	movw	r2, #741	; 0x2e5
     4b0:	f2c0 0200 	movt	r2, #0
     4b4:	4790      	blx	r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     4b6:	b94c      	cbnz	r4, 4cc <sysclk_disable_pbb_module+0x5c>
		cpu_irq_enable();
     4b8:	f240 0044 	movw	r0, #68	; 0x44
     4bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
     4c0:	f04f 0101 	mov.w	r1, #1
     4c4:	7001      	strb	r1, [r0, #0]
     4c6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     4ca:	b662      	cpsie	i
     4cc:	bd10      	pop	{r4, pc}
     4ce:	bf00      	nop

000004d0 <sysclk_get_peripheral_bus_hz>:
 * \return Frequency of the bus attached to the specified peripheral, in Hz.
 */
uint32_t sysclk_get_peripheral_bus_hz(const volatile void *module)
{
	/* Fallthroughs intended for modules sharing the same peripheral bus. */
	switch ((uintptr_t)module) {
     4d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     4d4:	f2c4 0307 	movt	r3, #16391	; 0x4007
     4d8:	4298      	cmp	r0, r3
     4da:	f000 816f 	beq.w	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     4de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     4e2:	f2c4 0107 	movt	r1, #16391	; 0x4007
     4e6:	4288      	cmp	r0, r1
     4e8:	f200 80bb 	bhi.w	662 <sysclk_get_peripheral_bus_hz+0x192>
     4ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     4f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     4f4:	4290      	cmp	r0, r2
     4f6:	f000 8161 	beq.w	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     4fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     4fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     502:	4298      	cmp	r0, r3
     504:	d851      	bhi.n	5aa <sysclk_get_peripheral_bus_hz+0xda>
     506:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     50a:	f2c4 0101 	movt	r1, #16385	; 0x4001
     50e:	4288      	cmp	r0, r1
     510:	f000 8154 	beq.w	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     514:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     518:	f2c4 0201 	movt	r2, #16385	; 0x4001
     51c:	4290      	cmp	r0, r2
     51e:	d820      	bhi.n	562 <sysclk_get_peripheral_bus_hz+0x92>
     520:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     524:	f2c4 0300 	movt	r3, #16384	; 0x4000
     528:	4298      	cmp	r0, r3
     52a:	f000 8147 	beq.w	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     52e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     532:	f2c4 0100 	movt	r1, #16384	; 0x4000
     536:	4288      	cmp	r0, r1
     538:	d804      	bhi.n	544 <sysclk_get_peripheral_bus_hz+0x74>
     53a:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
     53e:	f040 8142 	bne.w	7c6 <sysclk_get_peripheral_bus_hz+0x2f6>
     542:	e13b      	b.n	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     544:	f04f 0200 	mov.w	r2, #0
     548:	f2c4 0201 	movt	r2, #16385	; 0x4001
     54c:	4290      	cmp	r0, r2
     54e:	f000 8135 	beq.w	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     552:	f44f 4380 	mov.w	r3, #16384	; 0x4000
     556:	f2c4 0301 	movt	r3, #16385	; 0x4001
     55a:	4298      	cmp	r0, r3
     55c:	f040 8133 	bne.w	7c6 <sysclk_get_peripheral_bus_hz+0x2f6>
     560:	e12c      	b.n	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     562:	f44f 4140 	mov.w	r1, #49152	; 0xc000
     566:	f2c4 0101 	movt	r1, #16385	; 0x4001
     56a:	4288      	cmp	r0, r1
     56c:	f000 8126 	beq.w	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     570:	f44f 4240 	mov.w	r2, #49152	; 0xc000
     574:	f2c4 0201 	movt	r2, #16385	; 0x4001
     578:	4290      	cmp	r0, r2
     57a:	d807      	bhi.n	58c <sysclk_get_peripheral_bus_hz+0xbc>
     57c:	f44f 4304 	mov.w	r3, #33792	; 0x8400
     580:	f2c4 0301 	movt	r3, #16385	; 0x4001
     584:	4298      	cmp	r0, r3
     586:	f040 811e 	bne.w	7c6 <sysclk_get_peripheral_bus_hz+0x2f6>
     58a:	e117      	b.n	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     58c:	f44f 4144 	mov.w	r1, #50176	; 0xc400
     590:	f2c4 0101 	movt	r1, #16385	; 0x4001
     594:	4288      	cmp	r0, r1
     596:	f000 8111 	beq.w	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     59a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     59e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5a2:	4290      	cmp	r0, r2
     5a4:	f040 810f 	bne.w	7c6 <sysclk_get_peripheral_bus_hz+0x2f6>
     5a8:	e108      	b.n	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     5aa:	f04f 0300 	mov.w	r3, #0
     5ae:	f2c4 0304 	movt	r3, #16388	; 0x4004
     5b2:	4298      	cmp	r0, r3
     5b4:	f000 8102 	beq.w	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     5b8:	f04f 0100 	mov.w	r1, #0
     5bc:	f2c4 0104 	movt	r1, #16388	; 0x4004
     5c0:	4288      	cmp	r0, r1
     5c2:	d823      	bhi.n	60c <sysclk_get_peripheral_bus_hz+0x13c>
     5c4:	f04f 0200 	mov.w	r2, #0
     5c8:	f2c4 0203 	movt	r2, #16387	; 0x4003
     5cc:	4290      	cmp	r0, r2
     5ce:	f000 80f5 	beq.w	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     5d2:	f04f 0300 	mov.w	r3, #0
     5d6:	f2c4 0303 	movt	r3, #16387	; 0x4003
     5da:	4298      	cmp	r0, r3
     5dc:	d807      	bhi.n	5ee <sysclk_get_peripheral_bus_hz+0x11e>
     5de:	f44f 4140 	mov.w	r1, #49152	; 0xc000
     5e2:	f2c4 0102 	movt	r1, #16386	; 0x4002
     5e6:	4288      	cmp	r0, r1
     5e8:	f040 80ed 	bne.w	7c6 <sysclk_get_peripheral_bus_hz+0x2f6>
     5ec:	e0e6      	b.n	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     5ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     5f2:	f2c4 0203 	movt	r2, #16387	; 0x4003
     5f6:	4290      	cmp	r0, r2
     5f8:	f000 80e0 	beq.w	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     5fc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
     600:	f2c4 0303 	movt	r3, #16387	; 0x4003
     604:	4298      	cmp	r0, r3
     606:	f040 80de 	bne.w	7c6 <sysclk_get_peripheral_bus_hz+0x2f6>
     60a:	e0d7      	b.n	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     60c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     610:	f2c4 0106 	movt	r1, #16390	; 0x4006
     614:	4288      	cmp	r0, r1
     616:	f000 80d1 	beq.w	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     61a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     61e:	f2c4 0206 	movt	r2, #16390	; 0x4006
     622:	4290      	cmp	r0, r2
     624:	d80e      	bhi.n	644 <sysclk_get_peripheral_bus_hz+0x174>
     626:	f04f 0300 	mov.w	r3, #0
     62a:	f2c4 0306 	movt	r3, #16390	; 0x4006
     62e:	4298      	cmp	r0, r3
     630:	f000 80c4 	beq.w	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     634:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     638:	f2c4 0106 	movt	r1, #16390	; 0x4006
     63c:	4288      	cmp	r0, r1
     63e:	f040 80c2 	bne.w	7c6 <sysclk_get_peripheral_bus_hz+0x2f6>
     642:	e0bb      	b.n	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     644:	f44f 4240 	mov.w	r2, #49152	; 0xc000
     648:	f2c4 0206 	movt	r2, #16390	; 0x4006
     64c:	4290      	cmp	r0, r2
     64e:	f000 80b5 	beq.w	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     652:	f04f 0300 	mov.w	r3, #0
     656:	f2c4 0307 	movt	r3, #16391	; 0x4007
     65a:	4298      	cmp	r0, r3
     65c:	f040 80b3 	bne.w	7c6 <sysclk_get_peripheral_bus_hz+0x2f6>
     660:	e0ac      	b.n	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     662:	f04f 0100 	mov.w	r1, #0
     666:	f2c4 010e 	movt	r1, #16398	; 0x400e
     66a:	4288      	cmp	r0, r1
     66c:	f000 80a6 	beq.w	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     670:	f04f 0200 	mov.w	r2, #0
     674:	f2c4 020e 	movt	r2, #16398	; 0x400e
     678:	4290      	cmp	r0, r2
     67a:	d84e      	bhi.n	71a <sysclk_get_peripheral_bus_hz+0x24a>
     67c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     680:	f2c4 030a 	movt	r3, #16394	; 0x400a
     684:	4298      	cmp	r0, r3
     686:	f000 8099 	beq.w	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     68a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     68e:	f2c4 010a 	movt	r1, #16394	; 0x400a
     692:	4288      	cmp	r0, r1
     694:	d821      	bhi.n	6da <sysclk_get_peripheral_bus_hz+0x20a>
     696:	f04f 0200 	mov.w	r2, #0
     69a:	f2c4 0208 	movt	r2, #16392	; 0x4008
     69e:	4290      	cmp	r0, r2
     6a0:	f000 808c 	beq.w	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     6a4:	f04f 0300 	mov.w	r3, #0
     6a8:	f2c4 0308 	movt	r3, #16392	; 0x4008
     6ac:	4298      	cmp	r0, r3
     6ae:	d807      	bhi.n	6c0 <sysclk_get_peripheral_bus_hz+0x1f0>
     6b0:	f44f 4140 	mov.w	r1, #49152	; 0xc000
     6b4:	f2c4 0107 	movt	r1, #16391	; 0x4007
     6b8:	4288      	cmp	r0, r1
     6ba:	f040 8084 	bne.w	7c6 <sysclk_get_peripheral_bus_hz+0x2f6>
     6be:	e07d      	b.n	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     6c0:	f04f 0200 	mov.w	r2, #0
     6c4:	f2c4 020a 	movt	r2, #16394	; 0x400a
     6c8:	4290      	cmp	r0, r2
     6ca:	d077      	beq.n	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     6cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
     6d0:	f2c4 030a 	movt	r3, #16394	; 0x400a
     6d4:	4298      	cmp	r0, r3
     6d6:	d176      	bne.n	7c6 <sysclk_get_peripheral_bus_hz+0x2f6>
     6d8:	e070      	b.n	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     6da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     6de:	f2c4 010a 	movt	r1, #16394	; 0x400a
     6e2:	4288      	cmp	r0, r1
     6e4:	d06a      	beq.n	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     6e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     6ea:	f2c4 020a 	movt	r2, #16394	; 0x400a
     6ee:	4290      	cmp	r0, r2
     6f0:	d806      	bhi.n	700 <sysclk_get_peripheral_bus_hz+0x230>
     6f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     6f6:	f2c4 030a 	movt	r3, #16394	; 0x400a
     6fa:	4298      	cmp	r0, r3
     6fc:	d163      	bne.n	7c6 <sysclk_get_peripheral_bus_hz+0x2f6>
     6fe:	e05d      	b.n	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     700:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
     704:	f2c4 010a 	movt	r1, #16394	; 0x400a
     708:	4288      	cmp	r0, r1
     70a:	d057      	beq.n	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     70c:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
     710:	f2c4 020a 	movt	r2, #16394	; 0x400a
     714:	4290      	cmp	r0, r2
     716:	d156      	bne.n	7c6 <sysclk_get_peripheral_bus_hz+0x2f6>
     718:	e050      	b.n	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     71a:	f04f 0300 	mov.w	r3, #0
     71e:	f2c4 030f 	movt	r3, #16399	; 0x400f
     722:	4298      	cmp	r0, r3
     724:	d04a      	beq.n	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     726:	f04f 0100 	mov.w	r1, #0
     72a:	f2c4 010f 	movt	r1, #16399	; 0x400f
     72e:	4288      	cmp	r0, r1
     730:	d81f      	bhi.n	772 <sysclk_get_peripheral_bus_hz+0x2a2>
     732:	f44f 6200 	mov.w	r2, #2048	; 0x800
     736:	f2c4 020e 	movt	r2, #16398	; 0x400e
     73a:	4290      	cmp	r0, r2
     73c:	d03e      	beq.n	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     73e:	f44f 6300 	mov.w	r3, #2048	; 0x800
     742:	f2c4 030e 	movt	r3, #16398	; 0x400e
     746:	4298      	cmp	r0, r3
     748:	d806      	bhi.n	758 <sysclk_get_peripheral_bus_hz+0x288>
     74a:	f44f 6180 	mov.w	r1, #1024	; 0x400
     74e:	f2c4 010e 	movt	r1, #16398	; 0x400e
     752:	4288      	cmp	r0, r1
     754:	d137      	bne.n	7c6 <sysclk_get_peripheral_bus_hz+0x2f6>
     756:	e031      	b.n	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     758:	f44f 6240 	mov.w	r2, #3072	; 0xc00
     75c:	f2c4 020e 	movt	r2, #16398	; 0x400e
     760:	4290      	cmp	r0, r2
     762:	d02b      	beq.n	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 030e 	movt	r3, #16398	; 0x400e
     76c:	4298      	cmp	r0, r3
     76e:	d12a      	bne.n	7c6 <sysclk_get_peripheral_bus_hz+0x2f6>
     770:	e024      	b.n	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     772:	f44f 6140 	mov.w	r1, #3072	; 0xc00
     776:	f2c4 010f 	movt	r1, #16399	; 0x400f
     77a:	4288      	cmp	r0, r1
     77c:	d01e      	beq.n	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     77e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
     782:	f2c4 020f 	movt	r2, #16399	; 0x400f
     786:	4290      	cmp	r0, r2
     788:	d80c      	bhi.n	7a4 <sysclk_get_peripheral_bus_hz+0x2d4>
     78a:	f44f 6380 	mov.w	r3, #1024	; 0x400
     78e:	f2c4 030f 	movt	r3, #16399	; 0x400f
     792:	4298      	cmp	r0, r3
     794:	d012      	beq.n	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     796:	f44f 6100 	mov.w	r1, #2048	; 0x800
     79a:	f2c4 010f 	movt	r1, #16399	; 0x400f
     79e:	4288      	cmp	r0, r1
     7a0:	d111      	bne.n	7c6 <sysclk_get_peripheral_bus_hz+0x2f6>
     7a2:	e00b      	b.n	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 020f 	movt	r2, #16399	; 0x400f
     7ac:	4290      	cmp	r0, r2
     7ae:	d005      	beq.n	7bc <sysclk_get_peripheral_bus_hz+0x2ec>
     7b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
     7b4:	f2c4 030f 	movt	r3, #16399	; 0x400f
     7b8:	4298      	cmp	r0, r3
     7ba:	d104      	bne.n	7c6 <sysclk_get_peripheral_bus_hz+0x2f6>
	case PARC_ADDR:
	case CATB_ADDR:
	case TWIM2_ADDR:
	case TWIM3_ADDR:
	case LCDCA_ADDR:
		return sysclk_get_pba_hz();
     7bc:	f648 5080 	movw	r0, #36224	; 0x8d80
     7c0:	f2c0 005b 	movt	r0, #91	; 0x5b
     7c4:	4770      	bx	lr
	case PICOUART_ADDR:
		return sysclk_get_pbd_hz();

	default:
		Assert(false);
		return 0;
     7c6:	f04f 0000 	mov.w	r0, #0
	}
}
     7ca:	4770      	bx	lr

000007cc <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
     7cc:	b508      	push	{r3, lr}
	switch ((uintptr_t)module) {
     7ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     7d2:	f2c4 0307 	movt	r3, #16391	; 0x4007
     7d6:	4298      	cmp	r0, r3
     7d8:	f000 827f 	beq.w	cda <sysclk_enable_peripheral_clock+0x50e>
     7dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     7e0:	f2c4 0107 	movt	r1, #16391	; 0x4007
     7e4:	4288      	cmp	r0, r1
     7e6:	f200 80bb 	bhi.w	960 <sysclk_enable_peripheral_clock+0x194>
     7ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     7ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7f2:	4290      	cmp	r0, r2
     7f4:	f000 81f2 	beq.w	bdc <sysclk_enable_peripheral_clock+0x410>
     7f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     7fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     800:	4298      	cmp	r0, r3
     802:	d851      	bhi.n	8a8 <sysclk_enable_peripheral_clock+0xdc>
     804:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     808:	f2c4 0101 	movt	r1, #16385	; 0x4001
     80c:	4288      	cmp	r0, r1
     80e:	f000 81b0 	beq.w	b72 <sysclk_enable_peripheral_clock+0x3a6>
     812:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     816:	f2c4 0201 	movt	r2, #16385	; 0x4001
     81a:	4290      	cmp	r0, r2
     81c:	d820      	bhi.n	860 <sysclk_enable_peripheral_clock+0x94>
     81e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     822:	f2c4 0300 	movt	r3, #16384	; 0x4000
     826:	4298      	cmp	r0, r3
     828:	f000 8171 	beq.w	b0e <sysclk_enable_peripheral_clock+0x342>
     82c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     830:	f2c4 0100 	movt	r1, #16384	; 0x4000
     834:	4288      	cmp	r0, r1
     836:	d804      	bhi.n	842 <sysclk_enable_peripheral_clock+0x76>
     838:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
     83c:	f040 8334 	bne.w	ea8 <sysclk_enable_peripheral_clock+0x6dc>
     840:	e15d      	b.n	afe <sysclk_enable_peripheral_clock+0x332>
     842:	f04f 0300 	mov.w	r3, #0
     846:	f2c4 0301 	movt	r3, #16385	; 0x4001
     84a:	4298      	cmp	r0, r3
     84c:	f000 8167 	beq.w	b1e <sysclk_enable_peripheral_clock+0x352>
     850:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     854:	f2c4 0101 	movt	r1, #16385	; 0x4001
     858:	4288      	cmp	r0, r1
     85a:	f040 8325 	bne.w	ea8 <sysclk_enable_peripheral_clock+0x6dc>
     85e:	e173      	b.n	b48 <sysclk_enable_peripheral_clock+0x37c>
     860:	f44f 4340 	mov.w	r3, #49152	; 0xc000
     864:	f2c4 0301 	movt	r3, #16385	; 0x4001
     868:	4298      	cmp	r0, r3
     86a:	f000 8192 	beq.w	b92 <sysclk_enable_peripheral_clock+0x3c6>
     86e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
     872:	f2c4 0201 	movt	r2, #16385	; 0x4001
     876:	4290      	cmp	r0, r2
     878:	d807      	bhi.n	88a <sysclk_enable_peripheral_clock+0xbe>
     87a:	f44f 4104 	mov.w	r1, #33792	; 0x8400
     87e:	f2c4 0101 	movt	r1, #16385	; 0x4001
     882:	4288      	cmp	r0, r1
     884:	f040 8310 	bne.w	ea8 <sysclk_enable_peripheral_clock+0x6dc>
     888:	e17b      	b.n	b82 <sysclk_enable_peripheral_clock+0x3b6>
     88a:	f44f 4244 	mov.w	r2, #50176	; 0xc400
     88e:	f2c4 0201 	movt	r2, #16385	; 0x4001
     892:	4290      	cmp	r0, r2
     894:	f000 8185 	beq.w	ba2 <sysclk_enable_peripheral_clock+0x3d6>
     898:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     89c:	f2c4 0102 	movt	r1, #16386	; 0x4002
     8a0:	4288      	cmp	r0, r1
     8a2:	f040 8301 	bne.w	ea8 <sysclk_enable_peripheral_clock+0x6dc>
     8a6:	e184      	b.n	bb2 <sysclk_enable_peripheral_clock+0x3e6>
     8a8:	f04f 0200 	mov.w	r2, #0
     8ac:	f2c4 0204 	movt	r2, #16388	; 0x4004
     8b0:	4290      	cmp	r0, r2
     8b2:	f000 81e2 	beq.w	c7a <sysclk_enable_peripheral_clock+0x4ae>
     8b6:	f04f 0100 	mov.w	r1, #0
     8ba:	f2c4 0104 	movt	r1, #16388	; 0x4004
     8be:	4288      	cmp	r0, r1
     8c0:	d823      	bhi.n	90a <sysclk_enable_peripheral_clock+0x13e>
     8c2:	f04f 0300 	mov.w	r3, #0
     8c6:	f2c4 0303 	movt	r3, #16387	; 0x4003
     8ca:	4298      	cmp	r0, r3
     8cc:	f000 81b0 	beq.w	c30 <sysclk_enable_peripheral_clock+0x464>
     8d0:	f04f 0200 	mov.w	r2, #0
     8d4:	f2c4 0203 	movt	r2, #16387	; 0x4003
     8d8:	4290      	cmp	r0, r2
     8da:	d807      	bhi.n	8ec <sysclk_enable_peripheral_clock+0x120>
     8dc:	f44f 4140 	mov.w	r1, #49152	; 0xc000
     8e0:	f2c4 0102 	movt	r1, #16386	; 0x4002
     8e4:	4288      	cmp	r0, r1
     8e6:	f040 82df 	bne.w	ea8 <sysclk_enable_peripheral_clock+0x6dc>
     8ea:	e18c      	b.n	c06 <sysclk_enable_peripheral_clock+0x43a>
     8ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     8f0:	f2c4 0203 	movt	r2, #16387	; 0x4003
     8f4:	4290      	cmp	r0, r2
     8f6:	f000 81b0 	beq.w	c5a <sysclk_enable_peripheral_clock+0x48e>
     8fa:	f44f 4140 	mov.w	r1, #49152	; 0xc000
     8fe:	f2c4 0103 	movt	r1, #16387	; 0x4003
     902:	4288      	cmp	r0, r1
     904:	f040 82d0 	bne.w	ea8 <sysclk_enable_peripheral_clock+0x6dc>
     908:	e1af      	b.n	c6a <sysclk_enable_peripheral_clock+0x49e>
     90a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     90e:	f2c4 0306 	movt	r3, #16390	; 0x4006
     912:	4298      	cmp	r0, r3
     914:	f000 81c9 	beq.w	caa <sysclk_enable_peripheral_clock+0x4de>
     918:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     91c:	f2c4 0106 	movt	r1, #16390	; 0x4006
     920:	4288      	cmp	r0, r1
     922:	d80e      	bhi.n	942 <sysclk_enable_peripheral_clock+0x176>
     924:	f04f 0200 	mov.w	r2, #0
     928:	f2c4 0206 	movt	r2, #16390	; 0x4006
     92c:	4290      	cmp	r0, r2
     92e:	f000 81ac 	beq.w	c8a <sysclk_enable_peripheral_clock+0x4be>
     932:	f44f 4380 	mov.w	r3, #16384	; 0x4000
     936:	f2c4 0306 	movt	r3, #16390	; 0x4006
     93a:	4298      	cmp	r0, r3
     93c:	f040 82b4 	bne.w	ea8 <sysclk_enable_peripheral_clock+0x6dc>
     940:	e1ab      	b.n	c9a <sysclk_enable_peripheral_clock+0x4ce>
     942:	f44f 4340 	mov.w	r3, #49152	; 0xc000
     946:	f2c4 0306 	movt	r3, #16390	; 0x4006
     94a:	4298      	cmp	r0, r3
     94c:	f000 81b5 	beq.w	cba <sysclk_enable_peripheral_clock+0x4ee>
     950:	f04f 0100 	mov.w	r1, #0
     954:	f2c4 0107 	movt	r1, #16391	; 0x4007
     958:	4288      	cmp	r0, r1
     95a:	f040 82a5 	bne.w	ea8 <sysclk_enable_peripheral_clock+0x6dc>
     95e:	e1b4      	b.n	cca <sysclk_enable_peripheral_clock+0x4fe>
     960:	f04f 0100 	mov.w	r1, #0
     964:	f2c4 010e 	movt	r1, #16398	; 0x400e
     968:	4288      	cmp	r0, r1
     96a:	f000 8232 	beq.w	dd2 <sysclk_enable_peripheral_clock+0x606>
     96e:	f04f 0300 	mov.w	r3, #0
     972:	f2c4 030e 	movt	r3, #16398	; 0x400e
     976:	4298      	cmp	r0, r3
     978:	d85b      	bhi.n	a32 <sysclk_enable_peripheral_clock+0x266>
     97a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     97e:	f2c4 020a 	movt	r2, #16394	; 0x400a
     982:	4290      	cmp	r0, r2
     984:	f000 81e2 	beq.w	d4c <sysclk_enable_peripheral_clock+0x580>
     988:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     98c:	f2c4 010a 	movt	r1, #16394	; 0x400a
     990:	4288      	cmp	r0, r1
     992:	d823      	bhi.n	9dc <sysclk_enable_peripheral_clock+0x210>
     994:	f04f 0300 	mov.w	r3, #0
     998:	f2c4 0308 	movt	r3, #16392	; 0x4008
     99c:	4298      	cmp	r0, r3
     99e:	f000 81ac 	beq.w	cfa <sysclk_enable_peripheral_clock+0x52e>
     9a2:	f04f 0200 	mov.w	r2, #0
     9a6:	f2c4 0208 	movt	r2, #16392	; 0x4008
     9aa:	4290      	cmp	r0, r2
     9ac:	d807      	bhi.n	9be <sysclk_enable_peripheral_clock+0x1f2>
     9ae:	f44f 4140 	mov.w	r1, #49152	; 0xc000
     9b2:	f2c4 0107 	movt	r1, #16391	; 0x4007
     9b6:	4288      	cmp	r0, r1
     9b8:	f040 8276 	bne.w	ea8 <sysclk_enable_peripheral_clock+0x6dc>
     9bc:	e195      	b.n	cea <sysclk_enable_peripheral_clock+0x51e>
     9be:	f04f 0200 	mov.w	r2, #0
     9c2:	f2c4 020a 	movt	r2, #16394	; 0x400a
     9c6:	4290      	cmp	r0, r2
     9c8:	f000 819f 	beq.w	d0a <sysclk_enable_peripheral_clock+0x53e>
     9cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
     9d0:	f2c4 010a 	movt	r1, #16394	; 0x400a
     9d4:	4288      	cmp	r0, r1
     9d6:	f040 8267 	bne.w	ea8 <sysclk_enable_peripheral_clock+0x6dc>
     9da:	e1a6      	b.n	d2a <sysclk_enable_peripheral_clock+0x55e>
     9dc:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
     9e0:	f2c4 030a 	movt	r3, #16394	; 0x400a
     9e4:	4298      	cmp	r0, r3
     9e6:	f000 81db 	beq.w	da0 <sysclk_enable_peripheral_clock+0x5d4>
     9ea:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
     9ee:	f2c4 010a 	movt	r1, #16394	; 0x400a
     9f2:	4288      	cmp	r0, r1
     9f4:	d80e      	bhi.n	a14 <sysclk_enable_peripheral_clock+0x248>
     9f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     9fa:	f2c4 020a 	movt	r2, #16394	; 0x400a
     9fe:	4290      	cmp	r0, r2
     a00:	f000 81ac 	beq.w	d5c <sysclk_enable_peripheral_clock+0x590>
     a04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
     a08:	f2c4 030a 	movt	r3, #16394	; 0x400a
     a0c:	4298      	cmp	r0, r3
     a0e:	f040 824b 	bne.w	ea8 <sysclk_enable_peripheral_clock+0x6dc>
     a12:	e1b4      	b.n	d7e <sysclk_enable_peripheral_clock+0x5b2>
     a14:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
     a18:	f2c4 010a 	movt	r1, #16394	; 0x400a
     a1c:	4288      	cmp	r0, r1
     a1e:	f000 81d0 	beq.w	dc2 <sysclk_enable_peripheral_clock+0x5f6>
     a22:	f04f 0300 	mov.w	r3, #0
     a26:	f2c4 030b 	movt	r3, #16395	; 0x400b
     a2a:	4298      	cmp	r0, r3
     a2c:	f040 823c 	bne.w	ea8 <sysclk_enable_peripheral_clock+0x6dc>
     a30:	e05b      	b.n	aea <sysclk_enable_peripheral_clock+0x31e>
     a32:	f04f 0300 	mov.w	r3, #0
     a36:	f2c4 030f 	movt	r3, #16399	; 0x400f
     a3a:	4298      	cmp	r0, r3
     a3c:	f000 81fa 	beq.w	e34 <sysclk_enable_peripheral_clock+0x668>
     a40:	f04f 0200 	mov.w	r2, #0
     a44:	f2c4 020f 	movt	r2, #16399	; 0x400f
     a48:	4290      	cmp	r0, r2
     a4a:	d823      	bhi.n	a94 <sysclk_enable_peripheral_clock+0x2c8>
     a4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
     a50:	f2c4 010e 	movt	r1, #16398	; 0x400e
     a54:	4288      	cmp	r0, r1
     a56:	f000 81d0 	beq.w	dfa <sysclk_enable_peripheral_clock+0x62e>
     a5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
     a5e:	f2c4 030e 	movt	r3, #16398	; 0x400e
     a62:	4298      	cmp	r0, r3
     a64:	d807      	bhi.n	a76 <sysclk_enable_peripheral_clock+0x2aa>
     a66:	f44f 6280 	mov.w	r2, #1024	; 0x400
     a6a:	f2c4 020e 	movt	r2, #16398	; 0x400e
     a6e:	4290      	cmp	r0, r2
     a70:	f040 821a 	bne.w	ea8 <sysclk_enable_peripheral_clock+0x6dc>
     a74:	e1b7      	b.n	de6 <sysclk_enable_peripheral_clock+0x61a>
     a76:	f44f 6140 	mov.w	r1, #3072	; 0xc00
     a7a:	f2c4 010e 	movt	r1, #16398	; 0x400e
     a7e:	4288      	cmp	r0, r1
     a80:	f000 81c5 	beq.w	e0e <sysclk_enable_peripheral_clock+0x642>
     a84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     a88:	f2c4 020e 	movt	r2, #16398	; 0x400e
     a8c:	4290      	cmp	r0, r2
     a8e:	f040 820b 	bne.w	ea8 <sysclk_enable_peripheral_clock+0x6dc>
     a92:	e1c6      	b.n	e22 <sysclk_enable_peripheral_clock+0x656>
     a94:	f44f 6140 	mov.w	r1, #3072	; 0xc00
     a98:	f2c4 010f 	movt	r1, #16399	; 0x400f
     a9c:	4288      	cmp	r0, r1
     a9e:	f000 81e7 	beq.w	e70 <sysclk_enable_peripheral_clock+0x6a4>
     aa2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
     aa6:	f2c4 020f 	movt	r2, #16399	; 0x400f
     aaa:	4290      	cmp	r0, r2
     aac:	d80e      	bhi.n	acc <sysclk_enable_peripheral_clock+0x300>
     aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
     ab2:	f2c4 030f 	movt	r3, #16399	; 0x400f
     ab6:	4298      	cmp	r0, r3
     ab8:	f000 81c6 	beq.w	e48 <sysclk_enable_peripheral_clock+0x67c>
     abc:	f44f 6100 	mov.w	r1, #2048	; 0x800
     ac0:	f2c4 010f 	movt	r1, #16399	; 0x400f
     ac4:	4288      	cmp	r0, r1
     ac6:	f040 81ef 	bne.w	ea8 <sysclk_enable_peripheral_clock+0x6dc>
     aca:	e1c7      	b.n	e5c <sysclk_enable_peripheral_clock+0x690>
     acc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     ad0:	f2c4 010f 	movt	r1, #16399	; 0x400f
     ad4:	4288      	cmp	r0, r1
     ad6:	f000 81d5 	beq.w	e84 <sysclk_enable_peripheral_clock+0x6b8>
     ada:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
     ade:	f2c4 020f 	movt	r2, #16399	; 0x400f
     ae2:	4290      	cmp	r0, r2
     ae4:	f040 81e0 	bne.w	ea8 <sysclk_enable_peripheral_clock+0x6dc>
     ae8:	e1d6      	b.n	e98 <sysclk_enable_peripheral_clock+0x6cc>
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
     aea:	f04f 0001 	mov.w	r0, #1
     aee:	f04f 0109 	mov.w	r1, #9
     af2:	f240 227d 	movw	r2, #637	; 0x27d
     af6:	f2c0 0200 	movt	r2, #0
     afa:	4790      	blx	r2
     afc:	bd08      	pop	{r3, pc}
	case AESA_ADDR:
		sysclk_enable_hsb_module(SYSCLK_AESA_HSB);
		break;

	case IISC_ADDR:
		sysclk_enable_pba_module(SYSCLK_IISC);
     afe:	f04f 0000 	mov.w	r0, #0
     b02:	f240 3251 	movw	r2, #849	; 0x351
     b06:	f2c0 0200 	movt	r2, #0
     b0a:	4790      	blx	r2
		break;
     b0c:	bd08      	pop	{r3, pc}

	case SPI_ADDR:
		sysclk_enable_pba_module(SYSCLK_SPI);
     b0e:	f04f 0001 	mov.w	r0, #1
     b12:	f240 3151 	movw	r1, #849	; 0x351
     b16:	f2c0 0100 	movt	r1, #0
     b1a:	4788      	blx	r1
		break;
     b1c:	bd08      	pop	{r3, pc}

	case TC0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TC0);
     b1e:	f04f 0002 	mov.w	r0, #2
     b22:	f240 3351 	movw	r3, #849	; 0x351
     b26:	f2c0 0300 	movt	r3, #0
     b2a:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
     b2c:	f04f 0000 	mov.w	r0, #0
     b30:	f2c4 000e 	movt	r0, #16398	; 0x400e
     b34:	6c01      	ldr	r1, [r0, #64]	; 0x40
	temp_mask |= mask;
     b36:	f041 0355 	orr.w	r3, r1, #85	; 0x55
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
     b3a:	f04f 0240 	mov.w	r2, #64	; 0x40
     b3e:	f6ca 2200 	movt	r2, #43520	; 0xaa00
     b42:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
     b44:	6403      	str	r3, [r0, #64]	; 0x40
     b46:	bd08      	pop	{r3, pc}
			| PBA_DIVMASK_TIMER_CLOCK5
			);
		break;

	case TC1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TC1);
     b48:	f04f 0003 	mov.w	r0, #3
     b4c:	f240 3251 	movw	r2, #849	; 0x351
     b50:	f2c0 0200 	movt	r2, #0
     b54:	4790      	blx	r2
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
     b56:	f04f 0000 	mov.w	r0, #0
     b5a:	f2c4 000e 	movt	r0, #16398	; 0x400e
     b5e:	6c03      	ldr	r3, [r0, #64]	; 0x40
	temp_mask |= mask;
     b60:	f043 0155 	orr.w	r1, r3, #85	; 0x55
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
     b64:	f04f 0240 	mov.w	r2, #64	; 0x40
     b68:	f6ca 2200 	movt	r2, #43520	; 0xaa00
     b6c:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
     b6e:	6401      	str	r1, [r0, #64]	; 0x40
     b70:	bd08      	pop	{r3, pc}
			| PBA_DIVMASK_TIMER_CLOCK5
			);
		break;

	case TWIM0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM0);
     b72:	f04f 0004 	mov.w	r0, #4
     b76:	f240 3351 	movw	r3, #849	; 0x351
     b7a:	f2c0 0300 	movt	r3, #0
     b7e:	4798      	blx	r3
		break;
     b80:	bd08      	pop	{r3, pc}

	case TWIS0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIS0);
     b82:	f04f 0005 	mov.w	r0, #5
     b86:	f240 3351 	movw	r3, #849	; 0x351
     b8a:	f2c0 0300 	movt	r3, #0
     b8e:	4798      	blx	r3
		break;
     b90:	bd08      	pop	{r3, pc}

	case TWIM1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM1);
     b92:	f04f 0006 	mov.w	r0, #6
     b96:	f240 3151 	movw	r1, #849	; 0x351
     b9a:	f2c0 0100 	movt	r1, #0
     b9e:	4788      	blx	r1
		break;
     ba0:	bd08      	pop	{r3, pc}

	case TWIS1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIS1);
     ba2:	f04f 0007 	mov.w	r0, #7
     ba6:	f240 3251 	movw	r2, #849	; 0x351
     baa:	f2c0 0200 	movt	r2, #0
     bae:	4790      	blx	r2
		break;
     bb0:	bd08      	pop	{r3, pc}

	case USART0_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART0);
     bb2:	f04f 0008 	mov.w	r0, #8
     bb6:	f240 3351 	movw	r3, #849	; 0x351
     bba:	f2c0 0300 	movt	r3, #0
     bbe:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
     bc0:	f04f 0000 	mov.w	r0, #0
     bc4:	f2c4 000e 	movt	r0, #16398	; 0x400e
     bc8:	6c02      	ldr	r2, [r0, #64]	; 0x40
	temp_mask |= mask;
     bca:	f042 0104 	orr.w	r1, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
     bce:	f04f 0340 	mov.w	r3, #64	; 0x40
     bd2:	f6ca 2300 	movt	r3, #43520	; 0xaa00
     bd6:	6583      	str	r3, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
     bd8:	6401      	str	r1, [r0, #64]	; 0x40
     bda:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART1_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART1);
     bdc:	f04f 0009 	mov.w	r0, #9
     be0:	f240 3351 	movw	r3, #849	; 0x351
     be4:	f2c0 0300 	movt	r3, #0
     be8:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
     bea:	f04f 0000 	mov.w	r0, #0
     bee:	f2c4 000e 	movt	r0, #16398	; 0x400e
     bf2:	6c01      	ldr	r1, [r0, #64]	; 0x40
	temp_mask |= mask;
     bf4:	f041 0304 	orr.w	r3, r1, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
     bf8:	f04f 0240 	mov.w	r2, #64	; 0x40
     bfc:	f6ca 2200 	movt	r2, #43520	; 0xaa00
     c00:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
     c02:	6403      	str	r3, [r0, #64]	; 0x40
     c04:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART2_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART2);
     c06:	f04f 000a 	mov.w	r0, #10
     c0a:	f240 3351 	movw	r3, #849	; 0x351
     c0e:	f2c0 0300 	movt	r3, #0
     c12:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
     c14:	f04f 0000 	mov.w	r0, #0
     c18:	f2c4 000e 	movt	r0, #16398	; 0x400e
     c1c:	6c02      	ldr	r2, [r0, #64]	; 0x40
	temp_mask |= mask;
     c1e:	f042 0104 	orr.w	r1, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
     c22:	f04f 0340 	mov.w	r3, #64	; 0x40
     c26:	f6ca 2300 	movt	r3, #43520	; 0xaa00
     c2a:	6583      	str	r3, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
     c2c:	6401      	str	r1, [r0, #64]	; 0x40
     c2e:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART3_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART3);
     c30:	f04f 000b 	mov.w	r0, #11
     c34:	f240 3151 	movw	r1, #849	; 0x351
     c38:	f2c0 0100 	movt	r1, #0
     c3c:	4788      	blx	r1
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
     c3e:	f04f 0000 	mov.w	r0, #0
     c42:	f2c4 000e 	movt	r0, #16398	; 0x400e
     c46:	6c03      	ldr	r3, [r0, #64]	; 0x40
	temp_mask |= mask;
     c48:	f043 0104 	orr.w	r1, r3, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
     c4c:	f04f 0240 	mov.w	r2, #64	; 0x40
     c50:	f6ca 2200 	movt	r2, #43520	; 0xaa00
     c54:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
     c56:	6401      	str	r1, [r0, #64]	; 0x40
     c58:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case ADCIFE_ADDR:
		sysclk_enable_pba_module(SYSCLK_ADCIFE);
     c5a:	f04f 000c 	mov.w	r0, #12
     c5e:	f240 3251 	movw	r2, #849	; 0x351
     c62:	f2c0 0200 	movt	r2, #0
     c66:	4790      	blx	r2
		break;
     c68:	bd08      	pop	{r3, pc}

	case DACC_ADDR:
		sysclk_enable_pba_module(SYSCLK_DACC);
     c6a:	f04f 000d 	mov.w	r0, #13
     c6e:	f240 3351 	movw	r3, #849	; 0x351
     c72:	f2c0 0300 	movt	r3, #0
     c76:	4798      	blx	r3
		break;
     c78:	bd08      	pop	{r3, pc}

	case ACIFC_ADDR:
		sysclk_enable_pba_module(SYSCLK_ACIFC);
     c7a:	f04f 000e 	mov.w	r0, #14
     c7e:	f240 3251 	movw	r2, #849	; 0x351
     c82:	f2c0 0200 	movt	r2, #0
     c86:	4790      	blx	r2
		break;
     c88:	bd08      	pop	{r3, pc}

	case GLOC_ADDR:
		sysclk_enable_pba_module(SYSCLK_GLOC);
     c8a:	f04f 000f 	mov.w	r0, #15
     c8e:	f240 3251 	movw	r2, #849	; 0x351
     c92:	f2c0 0200 	movt	r2, #0
     c96:	4790      	blx	r2
		break;
     c98:	bd08      	pop	{r3, pc}

	case ABDACB_ADDR:
		sysclk_enable_pba_module(SYSCLK_ABDACB);
     c9a:	f04f 0010 	mov.w	r0, #16
     c9e:	f240 3151 	movw	r1, #849	; 0x351
     ca2:	f2c0 0100 	movt	r1, #0
     ca6:	4788      	blx	r1
		break;
     ca8:	bd08      	pop	{r3, pc}

	case TRNG_ADDR:
		sysclk_enable_pba_module(SYSCLK_TRNG);
     caa:	f04f 0011 	mov.w	r0, #17
     cae:	f240 3151 	movw	r1, #849	; 0x351
     cb2:	f2c0 0100 	movt	r1, #0
     cb6:	4788      	blx	r1
		break;
     cb8:	bd08      	pop	{r3, pc}

	case PARC_ADDR:
		sysclk_enable_pba_module(SYSCLK_PARC);
     cba:	f04f 0012 	mov.w	r0, #18
     cbe:	f240 3351 	movw	r3, #849	; 0x351
     cc2:	f2c0 0300 	movt	r3, #0
     cc6:	4798      	blx	r3
		break;
     cc8:	bd08      	pop	{r3, pc}

	case CATB_ADDR:
		sysclk_enable_pba_module(SYSCLK_CATB);
     cca:	f04f 0013 	mov.w	r0, #19
     cce:	f240 3251 	movw	r2, #849	; 0x351
     cd2:	f2c0 0200 	movt	r2, #0
     cd6:	4790      	blx	r2
		break;
     cd8:	bd08      	pop	{r3, pc}

	case TWIM2_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM2);
     cda:	f04f 0015 	mov.w	r0, #21
     cde:	f240 3151 	movw	r1, #849	; 0x351
     ce2:	f2c0 0100 	movt	r1, #0
     ce6:	4788      	blx	r1
		break;
     ce8:	bd08      	pop	{r3, pc}

	case TWIM3_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM3);
     cea:	f04f 0016 	mov.w	r0, #22
     cee:	f240 3351 	movw	r3, #849	; 0x351
     cf2:	f2c0 0300 	movt	r3, #0
     cf6:	4798      	blx	r3
		break;
     cf8:	bd08      	pop	{r3, pc}

	case LCDCA_ADDR:
		sysclk_enable_pba_module(SYSCLK_LCDCA);
     cfa:	f04f 0017 	mov.w	r0, #23
     cfe:	f240 3251 	movw	r2, #849	; 0x351
     d02:	f2c0 0200 	movt	r2, #0
     d06:	4790      	blx	r2
		break;
     d08:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
     d0a:	f04f 0001 	mov.w	r0, #1
     d0e:	4601      	mov	r1, r0
     d10:	f240 237d 	movw	r3, #637	; 0x27d
     d14:	f2c0 0300 	movt	r3, #0
     d18:	4798      	blx	r3

	case HFLASHC_ADDR:
		sysclk_enable_hsb_module(SYSCLK_HFLASHC_DATA);
		sysclk_enable_pbb_module(SYSCLK_HFLASHC_REGS);
     d1a:	f04f 0000 	mov.w	r0, #0
     d1e:	f240 4111 	movw	r1, #1041	; 0x411
     d22:	f2c0 0100 	movt	r1, #0
     d26:	4788      	blx	r1
		break;
     d28:	bd08      	pop	{r3, pc}
     d2a:	f04f 0001 	mov.w	r0, #1
     d2e:	f04f 0102 	mov.w	r1, #2
     d32:	f240 237d 	movw	r3, #637	; 0x27d
     d36:	f2c0 0300 	movt	r3, #0
     d3a:	4798      	blx	r3

	case HCACHE_ADDR:
		sysclk_enable_hsb_module(SYSCLK_HRAMC1_DATA);
		sysclk_enable_pbb_module(SYSCLK_HRAMC1_REGS);
     d3c:	f04f 0001 	mov.w	r0, #1
     d40:	f240 4211 	movw	r2, #1041	; 0x411
     d44:	f2c0 0200 	movt	r2, #0
     d48:	4790      	blx	r2
		break;
     d4a:	bd08      	pop	{r3, pc}

	case HMATRIX_ADDR:
		sysclk_enable_pbb_module(SYSCLK_HMATRIX);
     d4c:	f04f 0002 	mov.w	r0, #2
     d50:	f240 4111 	movw	r1, #1041	; 0x411
     d54:	f2c0 0100 	movt	r1, #0
     d58:	4788      	blx	r1
		break;
     d5a:	bd08      	pop	{r3, pc}
     d5c:	f04f 0001 	mov.w	r0, #1
     d60:	f04f 0100 	mov.w	r1, #0
     d64:	f240 237d 	movw	r3, #637	; 0x27d
     d68:	f2c0 0300 	movt	r3, #0
     d6c:	4798      	blx	r3

	case PDCA_ADDR:
		sysclk_enable_hsb_module(SYSCLK_PDCA_HSB);
		sysclk_enable_pbb_module(SYSCLK_PDCA_PB);
     d6e:	f04f 0003 	mov.w	r0, #3
     d72:	f240 4211 	movw	r2, #1041	; 0x411
     d76:	f2c0 0200 	movt	r2, #0
     d7a:	4790      	blx	r2
		break;
     d7c:	bd08      	pop	{r3, pc}
     d7e:	f04f 0001 	mov.w	r0, #1
     d82:	f04f 0104 	mov.w	r1, #4
     d86:	f240 227d 	movw	r2, #637	; 0x27d
     d8a:	f2c0 0200 	movt	r2, #0
     d8e:	4790      	blx	r2

	case CRCCU_ADDR:
		sysclk_enable_hsb_module(SYSCLK_CRCCU_DATA);
		sysclk_enable_pbb_module(SYSCLK_CRCCU_REGS);
     d90:	f04f 0004 	mov.w	r0, #4
     d94:	f240 4111 	movw	r1, #1041	; 0x411
     d98:	f2c0 0100 	movt	r1, #0
     d9c:	4788      	blx	r1
		break;
     d9e:	bd08      	pop	{r3, pc}
     da0:	f04f 0001 	mov.w	r0, #1
     da4:	f04f 0103 	mov.w	r1, #3
     da8:	f240 237d 	movw	r3, #637	; 0x27d
     dac:	f2c0 0300 	movt	r3, #0
     db0:	4798      	blx	r3

	case USBC_ADDR:
		sysclk_enable_hsb_module(SYSCLK_USBC_DATA);
		sysclk_enable_pbb_module(SYSCLK_USBC_REGS);
     db2:	f04f 0005 	mov.w	r0, #5
     db6:	f240 4211 	movw	r2, #1041	; 0x411
     dba:	f2c0 0200 	movt	r2, #0
     dbe:	4790      	blx	r2
		break;
     dc0:	bd08      	pop	{r3, pc}

	case PEVC_ADDR:
		sysclk_enable_pbb_module(SYSCLK_PEVC);
     dc2:	f04f 0006 	mov.w	r0, #6
     dc6:	f240 4111 	movw	r1, #1041	; 0x411
     dca:	f2c0 0100 	movt	r1, #0
     dce:	4788      	blx	r1
		break;
     dd0:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbc_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_PBC, module_index);
     dd2:	f04f 0004 	mov.w	r0, #4
     dd6:	f04f 0100 	mov.w	r1, #0
     dda:	f240 237d 	movw	r3, #637	; 0x27d
     dde:	f2c0 0300 	movt	r3, #0
     de2:	4798      	blx	r3
     de4:	bd08      	pop	{r3, pc}
     de6:	f04f 0004 	mov.w	r0, #4
     dea:	f04f 0101 	mov.w	r1, #1
     dee:	f240 237d 	movw	r3, #637	; 0x27d
     df2:	f2c0 0300 	movt	r3, #0
     df6:	4798      	blx	r3
     df8:	bd08      	pop	{r3, pc}
     dfa:	f04f 0004 	mov.w	r0, #4
     dfe:	f04f 0102 	mov.w	r1, #2
     e02:	f240 237d 	movw	r3, #637	; 0x27d
     e06:	f2c0 0300 	movt	r3, #0
     e0a:	4798      	blx	r3
     e0c:	bd08      	pop	{r3, pc}
     e0e:	f04f 0004 	mov.w	r0, #4
     e12:	f04f 0103 	mov.w	r1, #3
     e16:	f240 227d 	movw	r2, #637	; 0x27d
     e1a:	f2c0 0200 	movt	r2, #0
     e1e:	4790      	blx	r2
     e20:	bd08      	pop	{r3, pc}
     e22:	f04f 0004 	mov.w	r0, #4
     e26:	4601      	mov	r1, r0
     e28:	f240 237d 	movw	r3, #637	; 0x27d
     e2c:	f2c0 0300 	movt	r3, #0
     e30:	4798      	blx	r3
     e32:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbd_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_PBD, module_index);
     e34:	f04f 0005 	mov.w	r0, #5
     e38:	f04f 0100 	mov.w	r1, #0
     e3c:	f240 227d 	movw	r2, #637	; 0x27d
     e40:	f2c0 0200 	movt	r2, #0
     e44:	4790      	blx	r2
     e46:	bd08      	pop	{r3, pc}
     e48:	f04f 0005 	mov.w	r0, #5
     e4c:	f04f 0101 	mov.w	r1, #1
     e50:	f240 237d 	movw	r3, #637	; 0x27d
     e54:	f2c0 0300 	movt	r3, #0
     e58:	4798      	blx	r3
     e5a:	bd08      	pop	{r3, pc}
     e5c:	f04f 0005 	mov.w	r0, #5
     e60:	f04f 0102 	mov.w	r1, #2
     e64:	f240 227d 	movw	r2, #637	; 0x27d
     e68:	f2c0 0200 	movt	r2, #0
     e6c:	4790      	blx	r2
     e6e:	bd08      	pop	{r3, pc}
     e70:	f04f 0005 	mov.w	r0, #5
     e74:	f04f 0103 	mov.w	r1, #3
     e78:	f240 237d 	movw	r3, #637	; 0x27d
     e7c:	f2c0 0300 	movt	r3, #0
     e80:	4798      	blx	r3
     e82:	bd08      	pop	{r3, pc}
     e84:	f04f 0005 	mov.w	r0, #5
     e88:	f04f 0104 	mov.w	r1, #4
     e8c:	f240 227d 	movw	r2, #637	; 0x27d
     e90:	f2c0 0200 	movt	r2, #0
     e94:	4790      	blx	r2
     e96:	bd08      	pop	{r3, pc}
     e98:	f04f 0005 	mov.w	r0, #5
     e9c:	4601      	mov	r1, r0
     e9e:	f240 237d 	movw	r3, #637	; 0x27d
     ea2:	f2c0 0300 	movt	r3, #0
     ea6:	4798      	blx	r3
     ea8:	bd08      	pop	{r3, pc}
     eaa:	bf00      	nop

00000eac <sysclk_disable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be disabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
     eac:	b508      	push	{r3, lr}
	switch ((uintptr_t)module) {
     eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     eb2:	f2c4 0307 	movt	r3, #16391	; 0x4007
     eb6:	4298      	cmp	r0, r3
     eb8:	f000 8231 	beq.w	131e <__stack_size__+0x31e>
     ebc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     ec0:	f2c4 0107 	movt	r1, #16391	; 0x4007
     ec4:	4288      	cmp	r0, r1
     ec6:	f200 80bb 	bhi.w	1040 <__stack_size__+0x40>
     eca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	4290      	cmp	r0, r2
     ed4:	f000 81cb 	beq.w	126e <__stack_size__+0x26e>
     ed8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     edc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee0:	4298      	cmp	r0, r3
     ee2:	d851      	bhi.n	f88 <sysclk_disable_peripheral_clock+0xdc>
     ee4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     ee8:	f2c4 0101 	movt	r1, #16385	; 0x4001
     eec:	4288      	cmp	r0, r1
     eee:	f000 8196 	beq.w	121e <__stack_size__+0x21e>
     ef2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     ef6:	f2c4 0201 	movt	r2, #16385	; 0x4001
     efa:	4290      	cmp	r0, r2
     efc:	d820      	bhi.n	f40 <sysclk_disable_peripheral_clock+0x94>
     efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     f02:	f2c4 0300 	movt	r3, #16384	; 0x4000
     f06:	4298      	cmp	r0, r3
     f08:	f000 8171 	beq.w	11ee <__stack_size__+0x1ee>
     f0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     f10:	f2c4 0100 	movt	r1, #16384	; 0x4000
     f14:	4288      	cmp	r0, r1
     f16:	d804      	bhi.n	f22 <sysclk_disable_peripheral_clock+0x76>
     f18:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
     f1c:	f040 82f3 	bne.w	1506 <__stack_size__+0x506>
     f20:	e15d      	b.n	11de <__stack_size__+0x1de>
     f22:	f04f 0300 	mov.w	r3, #0
     f26:	f2c4 0301 	movt	r3, #16385	; 0x4001
     f2a:	4298      	cmp	r0, r3
     f2c:	f000 8167 	beq.w	11fe <__stack_size__+0x1fe>
     f30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     f34:	f2c4 0101 	movt	r1, #16385	; 0x4001
     f38:	4288      	cmp	r0, r1
     f3a:	f040 82e4 	bne.w	1506 <__stack_size__+0x506>
     f3e:	e166      	b.n	120e <__stack_size__+0x20e>
     f40:	f44f 4240 	mov.w	r2, #49152	; 0xc000
     f44:	f2c4 0201 	movt	r2, #16385	; 0x4001
     f48:	4290      	cmp	r0, r2
     f4a:	f000 8178 	beq.w	123e <__stack_size__+0x23e>
     f4e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
     f52:	f2c4 0301 	movt	r3, #16385	; 0x4001
     f56:	4298      	cmp	r0, r3
     f58:	d807      	bhi.n	f6a <sysclk_disable_peripheral_clock+0xbe>
     f5a:	f44f 4104 	mov.w	r1, #33792	; 0x8400
     f5e:	f2c4 0101 	movt	r1, #16385	; 0x4001
     f62:	4288      	cmp	r0, r1
     f64:	f040 82cf 	bne.w	1506 <__stack_size__+0x506>
     f68:	e161      	b.n	122e <__stack_size__+0x22e>
     f6a:	f44f 4344 	mov.w	r3, #50176	; 0xc400
     f6e:	f2c4 0301 	movt	r3, #16385	; 0x4001
     f72:	4298      	cmp	r0, r3
     f74:	f000 816b 	beq.w	124e <__stack_size__+0x24e>
     f78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     f7c:	f2c4 0102 	movt	r1, #16386	; 0x4002
     f80:	4288      	cmp	r0, r1
     f82:	f040 82c0 	bne.w	1506 <__stack_size__+0x506>
     f86:	e16a      	b.n	125e <__stack_size__+0x25e>
     f88:	f04f 0300 	mov.w	r3, #0
     f8c:	f2c4 0304 	movt	r3, #16388	; 0x4004
     f90:	4298      	cmp	r0, r3
     f92:	f000 8194 	beq.w	12be <__stack_size__+0x2be>
     f96:	f04f 0100 	mov.w	r1, #0
     f9a:	f2c4 0104 	movt	r1, #16388	; 0x4004
     f9e:	4288      	cmp	r0, r1
     fa0:	d823      	bhi.n	fea <sysclk_disable_peripheral_clock+0x13e>
     fa2:	f04f 0200 	mov.w	r2, #0
     fa6:	f2c4 0203 	movt	r2, #16387	; 0x4003
     faa:	4290      	cmp	r0, r2
     fac:	f000 816f 	beq.w	128e <__stack_size__+0x28e>
     fb0:	f04f 0300 	mov.w	r3, #0
     fb4:	f2c4 0303 	movt	r3, #16387	; 0x4003
     fb8:	4298      	cmp	r0, r3
     fba:	d807      	bhi.n	fcc <sysclk_disable_peripheral_clock+0x120>
     fbc:	f44f 4140 	mov.w	r1, #49152	; 0xc000
     fc0:	f2c4 0102 	movt	r1, #16386	; 0x4002
     fc4:	4288      	cmp	r0, r1
     fc6:	f040 829e 	bne.w	1506 <__stack_size__+0x506>
     fca:	e158      	b.n	127e <__stack_size__+0x27e>
     fcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     fd0:	f2c4 0303 	movt	r3, #16387	; 0x4003
     fd4:	4298      	cmp	r0, r3
     fd6:	f000 8162 	beq.w	129e <__stack_size__+0x29e>
     fda:	f44f 4140 	mov.w	r1, #49152	; 0xc000
     fde:	f2c4 0103 	movt	r1, #16387	; 0x4003
     fe2:	4288      	cmp	r0, r1
     fe4:	f040 828f 	bne.w	1506 <__stack_size__+0x506>
     fe8:	e161      	b.n	12ae <__stack_size__+0x2ae>
     fea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     fee:	f2c4 0206 	movt	r2, #16390	; 0x4006
     ff2:	4290      	cmp	r0, r2
     ff4:	f000 817b 	beq.w	12ee <__stack_size__+0x2ee>
     ff8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     ffc:	f2c4 0306 	movt	r3, #16390	; 0x4006
    1000:	4298      	cmp	r0, r3
    1002:	d80e      	bhi.n	1022 <__stack_size__+0x22>
    1004:	f04f 0100 	mov.w	r1, #0
    1008:	f2c4 0106 	movt	r1, #16390	; 0x4006
    100c:	4288      	cmp	r0, r1
    100e:	f000 815e 	beq.w	12ce <__stack_size__+0x2ce>
    1012:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1016:	f2c4 0206 	movt	r2, #16390	; 0x4006
    101a:	4290      	cmp	r0, r2
    101c:	f040 8273 	bne.w	1506 <__stack_size__+0x506>
    1020:	e15d      	b.n	12de <__stack_size__+0x2de>
    1022:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    1026:	f2c4 0206 	movt	r2, #16390	; 0x4006
    102a:	4290      	cmp	r0, r2
    102c:	f000 8167 	beq.w	12fe <__stack_size__+0x2fe>
    1030:	f04f 0300 	mov.w	r3, #0
    1034:	f2c4 0307 	movt	r3, #16391	; 0x4007
    1038:	4298      	cmp	r0, r3
    103a:	f040 8264 	bne.w	1506 <__stack_size__+0x506>
    103e:	e166      	b.n	130e <__stack_size__+0x30e>
    1040:	f04f 0300 	mov.w	r3, #0
    1044:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1048:	4298      	cmp	r0, r3
    104a:	f000 81dc 	beq.w	1406 <__stack_size__+0x406>
    104e:	f04f 0100 	mov.w	r1, #0
    1052:	f2c4 010e 	movt	r1, #16398	; 0x400e
    1056:	4288      	cmp	r0, r1
    1058:	d85b      	bhi.n	1112 <__stack_size__+0x112>
    105a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    105e:	f2c4 020a 	movt	r2, #16394	; 0x400a
    1062:	4290      	cmp	r0, r2
    1064:	f000 818c 	beq.w	1380 <__stack_size__+0x380>
    1068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    106c:	f2c4 030a 	movt	r3, #16394	; 0x400a
    1070:	4298      	cmp	r0, r3
    1072:	d823      	bhi.n	10bc <__stack_size__+0xbc>
    1074:	f04f 0100 	mov.w	r1, #0
    1078:	f2c4 0108 	movt	r1, #16392	; 0x4008
    107c:	4288      	cmp	r0, r1
    107e:	f000 815e 	beq.w	133e <__stack_size__+0x33e>
    1082:	f04f 0200 	mov.w	r2, #0
    1086:	f2c4 0208 	movt	r2, #16392	; 0x4008
    108a:	4290      	cmp	r0, r2
    108c:	d807      	bhi.n	109e <__stack_size__+0x9e>
    108e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    1092:	f2c4 0307 	movt	r3, #16391	; 0x4007
    1096:	4298      	cmp	r0, r3
    1098:	f040 8235 	bne.w	1506 <__stack_size__+0x506>
    109c:	e147      	b.n	132e <__stack_size__+0x32e>
    109e:	f04f 0200 	mov.w	r2, #0
    10a2:	f2c4 020a 	movt	r2, #16394	; 0x400a
    10a6:	4290      	cmp	r0, r2
    10a8:	f000 8151 	beq.w	134e <__stack_size__+0x34e>
    10ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
    10b0:	f2c4 030a 	movt	r3, #16394	; 0x400a
    10b4:	4298      	cmp	r0, r3
    10b6:	f040 8226 	bne.w	1506 <__stack_size__+0x506>
    10ba:	e150      	b.n	135e <__stack_size__+0x35e>
    10bc:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    10c0:	f2c4 010a 	movt	r1, #16394	; 0x400a
    10c4:	4288      	cmp	r0, r1
    10c6:	f000 8185 	beq.w	13d4 <__stack_size__+0x3d4>
    10ca:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    10ce:	f2c4 030a 	movt	r3, #16394	; 0x400a
    10d2:	4298      	cmp	r0, r3
    10d4:	d80e      	bhi.n	10f4 <__stack_size__+0xf4>
    10d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    10da:	f2c4 020a 	movt	r2, #16394	; 0x400a
    10de:	4290      	cmp	r0, r2
    10e0:	f000 8156 	beq.w	1390 <__stack_size__+0x390>
    10e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    10e8:	f2c4 010a 	movt	r1, #16394	; 0x400a
    10ec:	4288      	cmp	r0, r1
    10ee:	f040 820a 	bne.w	1506 <__stack_size__+0x506>
    10f2:	e15e      	b.n	13b2 <__stack_size__+0x3b2>
    10f4:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
    10f8:	f2c4 020a 	movt	r2, #16394	; 0x400a
    10fc:	4290      	cmp	r0, r2
    10fe:	f000 817a 	beq.w	13f6 <__stack_size__+0x3f6>
    1102:	f04f 0300 	mov.w	r3, #0
    1106:	f2c4 030b 	movt	r3, #16395	; 0x400b
    110a:	4298      	cmp	r0, r3
    110c:	f040 81fb 	bne.w	1506 <__stack_size__+0x506>
    1110:	e05b      	b.n	11ca <__stack_size__+0x1ca>
    1112:	f04f 0300 	mov.w	r3, #0
    1116:	f2c4 030f 	movt	r3, #16399	; 0x400f
    111a:	4298      	cmp	r0, r3
    111c:	f000 81a4 	beq.w	1468 <__stack_size__+0x468>
    1120:	f04f 0200 	mov.w	r2, #0
    1124:	f2c4 020f 	movt	r2, #16399	; 0x400f
    1128:	4290      	cmp	r0, r2
    112a:	d823      	bhi.n	1174 <__stack_size__+0x174>
    112c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    1130:	f2c4 010e 	movt	r1, #16398	; 0x400e
    1134:	4288      	cmp	r0, r1
    1136:	f000 817a 	beq.w	142e <__stack_size__+0x42e>
    113a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    113e:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1142:	4298      	cmp	r0, r3
    1144:	d807      	bhi.n	1156 <__stack_size__+0x156>
    1146:	f44f 6280 	mov.w	r2, #1024	; 0x400
    114a:	f2c4 020e 	movt	r2, #16398	; 0x400e
    114e:	4290      	cmp	r0, r2
    1150:	f040 81d9 	bne.w	1506 <__stack_size__+0x506>
    1154:	e161      	b.n	141a <__stack_size__+0x41a>
    1156:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    115a:	f2c4 010e 	movt	r1, #16398	; 0x400e
    115e:	4288      	cmp	r0, r1
    1160:	f000 816f 	beq.w	1442 <__stack_size__+0x442>
    1164:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1168:	f2c4 020e 	movt	r2, #16398	; 0x400e
    116c:	4290      	cmp	r0, r2
    116e:	f040 81ca 	bne.w	1506 <__stack_size__+0x506>
    1172:	e170      	b.n	1456 <__stack_size__+0x456>
    1174:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    1178:	f2c4 010f 	movt	r1, #16399	; 0x400f
    117c:	4288      	cmp	r0, r1
    117e:	f000 8191 	beq.w	14a4 <__stack_size__+0x4a4>
    1182:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    1186:	f2c4 020f 	movt	r2, #16399	; 0x400f
    118a:	4290      	cmp	r0, r2
    118c:	d80e      	bhi.n	11ac <__stack_size__+0x1ac>
    118e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1192:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1196:	4298      	cmp	r0, r3
    1198:	f000 8170 	beq.w	147c <__stack_size__+0x47c>
    119c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    11a0:	f2c4 010f 	movt	r1, #16399	; 0x400f
    11a4:	4288      	cmp	r0, r1
    11a6:	f040 81ae 	bne.w	1506 <__stack_size__+0x506>
    11aa:	e171      	b.n	1490 <__stack_size__+0x490>
    11ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    11b0:	f2c4 010f 	movt	r1, #16399	; 0x400f
    11b4:	4288      	cmp	r0, r1
    11b6:	f000 817f 	beq.w	14b8 <__stack_size__+0x4b8>
    11ba:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
    11be:	f2c4 020f 	movt	r2, #16399	; 0x400f
    11c2:	4290      	cmp	r0, r2
    11c4:	f040 819f 	bne.w	1506 <__stack_size__+0x506>
    11c8:	e180      	b.n	14cc <__stack_size__+0x4cc>
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
    11ca:	f04f 0001 	mov.w	r0, #1
    11ce:	f04f 0109 	mov.w	r1, #9
    11d2:	f240 22e5 	movw	r2, #741	; 0x2e5
    11d6:	f2c0 0200 	movt	r2, #0
    11da:	4790      	blx	r2
    11dc:	e17e      	b.n	14dc <__stack_size__+0x4dc>
	case AESA_ADDR:
		sysclk_disable_hsb_module(SYSCLK_AESA_HSB);
		break;

	case IISC_ADDR:
		sysclk_disable_pba_module(SYSCLK_IISC);
    11de:	f04f 0000 	mov.w	r0, #0
    11e2:	f240 32b1 	movw	r2, #945	; 0x3b1
    11e6:	f2c0 0200 	movt	r2, #0
    11ea:	4790      	blx	r2
		break;
    11ec:	e176      	b.n	14dc <__stack_size__+0x4dc>

	case SPI_ADDR:
		sysclk_disable_pba_module(SYSCLK_SPI);
    11ee:	f04f 0001 	mov.w	r0, #1
    11f2:	f240 31b1 	movw	r1, #945	; 0x3b1
    11f6:	f2c0 0100 	movt	r1, #0
    11fa:	4788      	blx	r1
		break;
    11fc:	e16e      	b.n	14dc <__stack_size__+0x4dc>

	case TC0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TC0);
    11fe:	f04f 0002 	mov.w	r0, #2
    1202:	f240 33b1 	movw	r3, #945	; 0x3b1
    1206:	f2c0 0300 	movt	r3, #0
    120a:	4798      	blx	r3
		break;
    120c:	e166      	b.n	14dc <__stack_size__+0x4dc>

	case TC1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TC1);
    120e:	f04f 0003 	mov.w	r0, #3
    1212:	f240 32b1 	movw	r2, #945	; 0x3b1
    1216:	f2c0 0200 	movt	r2, #0
    121a:	4790      	blx	r2
		break;
    121c:	e15e      	b.n	14dc <__stack_size__+0x4dc>

	case TWIM0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM0);
    121e:	f04f 0004 	mov.w	r0, #4
    1222:	f240 32b1 	movw	r2, #945	; 0x3b1
    1226:	f2c0 0200 	movt	r2, #0
    122a:	4790      	blx	r2
		break;
    122c:	e156      	b.n	14dc <__stack_size__+0x4dc>

	case TWIS0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIS0);
    122e:	f04f 0005 	mov.w	r0, #5
    1232:	f240 32b1 	movw	r2, #945	; 0x3b1
    1236:	f2c0 0200 	movt	r2, #0
    123a:	4790      	blx	r2
		break;
    123c:	e14e      	b.n	14dc <__stack_size__+0x4dc>

	case TWIM1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM1);
    123e:	f04f 0006 	mov.w	r0, #6
    1242:	f240 31b1 	movw	r1, #945	; 0x3b1
    1246:	f2c0 0100 	movt	r1, #0
    124a:	4788      	blx	r1
		break;
    124c:	e146      	b.n	14dc <__stack_size__+0x4dc>

	case TWIS1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIS1);
    124e:	f04f 0007 	mov.w	r0, #7
    1252:	f240 33b1 	movw	r3, #945	; 0x3b1
    1256:	f2c0 0300 	movt	r3, #0
    125a:	4798      	blx	r3
		break;
    125c:	e13e      	b.n	14dc <__stack_size__+0x4dc>

	case USART0_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART0);
    125e:	f04f 0008 	mov.w	r0, #8
    1262:	f240 32b1 	movw	r2, #945	; 0x3b1
    1266:	f2c0 0200 	movt	r2, #0
    126a:	4790      	blx	r2
		break;
    126c:	e136      	b.n	14dc <__stack_size__+0x4dc>

	case USART1_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART1);
    126e:	f04f 0009 	mov.w	r0, #9
    1272:	f240 32b1 	movw	r2, #945	; 0x3b1
    1276:	f2c0 0200 	movt	r2, #0
    127a:	4790      	blx	r2
		break;
    127c:	e12e      	b.n	14dc <__stack_size__+0x4dc>

	case USART2_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART2);
    127e:	f04f 000a 	mov.w	r0, #10
    1282:	f240 32b1 	movw	r2, #945	; 0x3b1
    1286:	f2c0 0200 	movt	r2, #0
    128a:	4790      	blx	r2
		break;
    128c:	e126      	b.n	14dc <__stack_size__+0x4dc>

	case USART3_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART3);
    128e:	f04f 000b 	mov.w	r0, #11
    1292:	f240 31b1 	movw	r1, #945	; 0x3b1
    1296:	f2c0 0100 	movt	r1, #0
    129a:	4788      	blx	r1
		break;
    129c:	e11e      	b.n	14dc <__stack_size__+0x4dc>

	case ADCIFE_ADDR:
		sysclk_disable_pba_module(SYSCLK_ADCIFE);
    129e:	f04f 000c 	mov.w	r0, #12
    12a2:	f240 33b1 	movw	r3, #945	; 0x3b1
    12a6:	f2c0 0300 	movt	r3, #0
    12aa:	4798      	blx	r3
		break;
    12ac:	e116      	b.n	14dc <__stack_size__+0x4dc>

	case DACC_ADDR:
		sysclk_disable_pba_module(SYSCLK_DACC);
    12ae:	f04f 000d 	mov.w	r0, #13
    12b2:	f240 32b1 	movw	r2, #945	; 0x3b1
    12b6:	f2c0 0200 	movt	r2, #0
    12ba:	4790      	blx	r2
		break;
    12bc:	e10e      	b.n	14dc <__stack_size__+0x4dc>

	case ACIFC_ADDR:
		sysclk_disable_pba_module(SYSCLK_ACIFC);
    12be:	f04f 000e 	mov.w	r0, #14
    12c2:	f240 31b1 	movw	r1, #945	; 0x3b1
    12c6:	f2c0 0100 	movt	r1, #0
    12ca:	4788      	blx	r1
		break;
    12cc:	e106      	b.n	14dc <__stack_size__+0x4dc>

	case GLOC_ADDR:
		sysclk_disable_pba_module(SYSCLK_GLOC);
    12ce:	f04f 000f 	mov.w	r0, #15
    12d2:	f240 31b1 	movw	r1, #945	; 0x3b1
    12d6:	f2c0 0100 	movt	r1, #0
    12da:	4788      	blx	r1
		break;
    12dc:	e0fe      	b.n	14dc <__stack_size__+0x4dc>

	case ABDACB_ADDR:
		sysclk_disable_pba_module(SYSCLK_ABDACB);
    12de:	f04f 0010 	mov.w	r0, #16
    12e2:	f240 33b1 	movw	r3, #945	; 0x3b1
    12e6:	f2c0 0300 	movt	r3, #0
    12ea:	4798      	blx	r3
		break;
    12ec:	e0f6      	b.n	14dc <__stack_size__+0x4dc>

	case TRNG_ADDR:
		sysclk_disable_pba_module(SYSCLK_TRNG);
    12ee:	f04f 0011 	mov.w	r0, #17
    12f2:	f240 33b1 	movw	r3, #945	; 0x3b1
    12f6:	f2c0 0300 	movt	r3, #0
    12fa:	4798      	blx	r3
		break;
    12fc:	e0ee      	b.n	14dc <__stack_size__+0x4dc>

	case PARC_ADDR:
		sysclk_disable_pba_module(SYSCLK_PARC);
    12fe:	f04f 0012 	mov.w	r0, #18
    1302:	f240 32b1 	movw	r2, #945	; 0x3b1
    1306:	f2c0 0200 	movt	r2, #0
    130a:	4790      	blx	r2
		break;
    130c:	e0e6      	b.n	14dc <__stack_size__+0x4dc>

	case CATB_ADDR:
		sysclk_disable_pba_module(SYSCLK_CATB);
    130e:	f04f 0013 	mov.w	r0, #19
    1312:	f240 31b1 	movw	r1, #945	; 0x3b1
    1316:	f2c0 0100 	movt	r1, #0
    131a:	4788      	blx	r1
		break;
    131c:	e0de      	b.n	14dc <__stack_size__+0x4dc>

	case TWIM2_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM2);
    131e:	f04f 0015 	mov.w	r0, #21
    1322:	f240 31b1 	movw	r1, #945	; 0x3b1
    1326:	f2c0 0100 	movt	r1, #0
    132a:	4788      	blx	r1
		break;
    132c:	e0d6      	b.n	14dc <__stack_size__+0x4dc>

	case TWIM3_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM3);
    132e:	f04f 0016 	mov.w	r0, #22
    1332:	f240 31b1 	movw	r1, #945	; 0x3b1
    1336:	f2c0 0100 	movt	r1, #0
    133a:	4788      	blx	r1
		break;
    133c:	e0ce      	b.n	14dc <__stack_size__+0x4dc>

	case LCDCA_ADDR:
		sysclk_disable_pba_module(SYSCLK_LCDCA);
    133e:	f04f 0017 	mov.w	r0, #23
    1342:	f240 32b1 	movw	r2, #945	; 0x3b1
    1346:	f2c0 0200 	movt	r2, #0
    134a:	4790      	blx	r2
		break;
    134c:	e0c6      	b.n	14dc <__stack_size__+0x4dc>

	case HFLASHC_ADDR:
		sysclk_disable_pbb_module(SYSCLK_HFLASHC_REGS);
    134e:	f04f 0000 	mov.w	r0, #0
    1352:	f240 4371 	movw	r3, #1137	; 0x471
    1356:	f2c0 0300 	movt	r3, #0
    135a:	4798      	blx	r3
		break;
    135c:	e0be      	b.n	14dc <__stack_size__+0x4dc>
    135e:	f04f 0001 	mov.w	r0, #1
    1362:	f04f 0102 	mov.w	r1, #2
    1366:	f240 22e5 	movw	r2, #741	; 0x2e5
    136a:	f2c0 0200 	movt	r2, #0
    136e:	4790      	blx	r2

	case HCACHE_ADDR:
		sysclk_disable_hsb_module(SYSCLK_HRAMC1_DATA);
		sysclk_disable_pbb_module(SYSCLK_HRAMC1_REGS);
    1370:	f04f 0001 	mov.w	r0, #1
    1374:	f240 4171 	movw	r1, #1137	; 0x471
    1378:	f2c0 0100 	movt	r1, #0
    137c:	4788      	blx	r1
		break;
    137e:	e0ad      	b.n	14dc <__stack_size__+0x4dc>

	case HMATRIX_ADDR:
		sysclk_disable_pbb_module(SYSCLK_HMATRIX);
    1380:	f04f 0002 	mov.w	r0, #2
    1384:	f240 4171 	movw	r1, #1137	; 0x471
    1388:	f2c0 0100 	movt	r1, #0
    138c:	4788      	blx	r1
		break;
    138e:	e0a5      	b.n	14dc <__stack_size__+0x4dc>
    1390:	f04f 0001 	mov.w	r0, #1
    1394:	f04f 0100 	mov.w	r1, #0
    1398:	f240 23e5 	movw	r3, #741	; 0x2e5
    139c:	f2c0 0300 	movt	r3, #0
    13a0:	4798      	blx	r3

	case PDCA_ADDR:
		sysclk_disable_hsb_module(SYSCLK_PDCA_HSB);
		sysclk_disable_pbb_module(SYSCLK_PDCA_PB);
    13a2:	f04f 0003 	mov.w	r0, #3
    13a6:	f240 4171 	movw	r1, #1137	; 0x471
    13aa:	f2c0 0100 	movt	r1, #0
    13ae:	4788      	blx	r1
		break;
    13b0:	e094      	b.n	14dc <__stack_size__+0x4dc>
    13b2:	f04f 0001 	mov.w	r0, #1
    13b6:	f04f 0104 	mov.w	r1, #4
    13ba:	f240 23e5 	movw	r3, #741	; 0x2e5
    13be:	f2c0 0300 	movt	r3, #0
    13c2:	4798      	blx	r3

	case CRCCU_ADDR:
		sysclk_disable_hsb_module(SYSCLK_CRCCU_DATA);
		sysclk_disable_pbb_module(SYSCLK_CRCCU_REGS);
    13c4:	f04f 0004 	mov.w	r0, #4
    13c8:	f240 4271 	movw	r2, #1137	; 0x471
    13cc:	f2c0 0200 	movt	r2, #0
    13d0:	4790      	blx	r2
		break;
    13d2:	e083      	b.n	14dc <__stack_size__+0x4dc>
    13d4:	f04f 0001 	mov.w	r0, #1
    13d8:	f04f 0103 	mov.w	r1, #3
    13dc:	f240 23e5 	movw	r3, #741	; 0x2e5
    13e0:	f2c0 0300 	movt	r3, #0
    13e4:	4798      	blx	r3

	case USBC_ADDR:
		sysclk_disable_hsb_module(SYSCLK_USBC_DATA);
		sysclk_disable_pbb_module(SYSCLK_USBC_REGS);
    13e6:	f04f 0005 	mov.w	r0, #5
    13ea:	f240 4271 	movw	r2, #1137	; 0x471
    13ee:	f2c0 0200 	movt	r2, #0
    13f2:	4790      	blx	r2
		break;
    13f4:	e072      	b.n	14dc <__stack_size__+0x4dc>

	case PEVC_ADDR:
		sysclk_disable_pbb_module(SYSCLK_PEVC);
    13f6:	f04f 0006 	mov.w	r0, #6
    13fa:	f240 4171 	movw	r1, #1137	; 0x471
    13fe:	f2c0 0100 	movt	r1, #0
    1402:	4788      	blx	r1
		break;
    1404:	e06a      	b.n	14dc <__stack_size__+0x4dc>
 * \brief Disable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_disable_pbc_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_PBC, module_index);
    1406:	f04f 0004 	mov.w	r0, #4
    140a:	f04f 0100 	mov.w	r1, #0
    140e:	f240 23e5 	movw	r3, #741	; 0x2e5
    1412:	f2c0 0300 	movt	r3, #0
    1416:	4798      	blx	r3
    1418:	e060      	b.n	14dc <__stack_size__+0x4dc>
    141a:	f04f 0004 	mov.w	r0, #4
    141e:	f04f 0101 	mov.w	r1, #1
    1422:	f240 23e5 	movw	r3, #741	; 0x2e5
    1426:	f2c0 0300 	movt	r3, #0
    142a:	4798      	blx	r3
    142c:	e056      	b.n	14dc <__stack_size__+0x4dc>
    142e:	f04f 0004 	mov.w	r0, #4
    1432:	f04f 0102 	mov.w	r1, #2
    1436:	f240 23e5 	movw	r3, #741	; 0x2e5
    143a:	f2c0 0300 	movt	r3, #0
    143e:	4798      	blx	r3
    1440:	e04c      	b.n	14dc <__stack_size__+0x4dc>
    1442:	f04f 0004 	mov.w	r0, #4
    1446:	f04f 0103 	mov.w	r1, #3
    144a:	f240 22e5 	movw	r2, #741	; 0x2e5
    144e:	f2c0 0200 	movt	r2, #0
    1452:	4790      	blx	r2
    1454:	e042      	b.n	14dc <__stack_size__+0x4dc>
    1456:	f04f 0004 	mov.w	r0, #4
    145a:	4601      	mov	r1, r0
    145c:	f240 23e5 	movw	r3, #741	; 0x2e5
    1460:	f2c0 0300 	movt	r3, #0
    1464:	4798      	blx	r3
    1466:	e039      	b.n	14dc <__stack_size__+0x4dc>
 * \brief Disable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_disable_pbd_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_PBD, module_index);
    1468:	f04f 0005 	mov.w	r0, #5
    146c:	f04f 0100 	mov.w	r1, #0
    1470:	f240 22e5 	movw	r2, #741	; 0x2e5
    1474:	f2c0 0200 	movt	r2, #0
    1478:	4790      	blx	r2
    147a:	e02f      	b.n	14dc <__stack_size__+0x4dc>
    147c:	f04f 0005 	mov.w	r0, #5
    1480:	f04f 0101 	mov.w	r1, #1
    1484:	f240 23e5 	movw	r3, #741	; 0x2e5
    1488:	f2c0 0300 	movt	r3, #0
    148c:	4798      	blx	r3
    148e:	e025      	b.n	14dc <__stack_size__+0x4dc>
    1490:	f04f 0005 	mov.w	r0, #5
    1494:	f04f 0102 	mov.w	r1, #2
    1498:	f240 22e5 	movw	r2, #741	; 0x2e5
    149c:	f2c0 0200 	movt	r2, #0
    14a0:	4790      	blx	r2
    14a2:	e01b      	b.n	14dc <__stack_size__+0x4dc>
    14a4:	f04f 0005 	mov.w	r0, #5
    14a8:	f04f 0103 	mov.w	r1, #3
    14ac:	f240 23e5 	movw	r3, #741	; 0x2e5
    14b0:	f2c0 0300 	movt	r3, #0
    14b4:	4798      	blx	r3
    14b6:	e011      	b.n	14dc <__stack_size__+0x4dc>
    14b8:	f04f 0005 	mov.w	r0, #5
    14bc:	f04f 0104 	mov.w	r1, #4
    14c0:	f240 22e5 	movw	r2, #741	; 0x2e5
    14c4:	f2c0 0200 	movt	r2, #0
    14c8:	4790      	blx	r2
    14ca:	e007      	b.n	14dc <__stack_size__+0x4dc>
    14cc:	f04f 0005 	mov.w	r0, #5
    14d0:	4601      	mov	r1, r0
    14d2:	f240 23e5 	movw	r3, #741	; 0x2e5
    14d6:	f2c0 0300 	movt	r3, #0
    14da:	4798      	blx	r3
	}

	// Disable PBA divided clock if possible.
#define PBADIV_CLKSRC_MASK (SYSCLK_TC0 | SYSCLK_TC1 \
		| SYSCLK_USART0 | SYSCLK_USART1 | SYSCLK_USART2 | SYSCLK_USART3)
	if ((PM->PM_PBAMASK & PBADIV_CLKSRC_MASK) == 0) {
    14dc:	f04f 0000 	mov.w	r0, #0
    14e0:	f2c4 000e 	movt	r0, #16398	; 0x400e
    14e4:	6a82      	ldr	r2, [r0, #40]	; 0x28
    14e6:	f012 0f0b 	tst.w	r2, #11
    14ea:	d10c      	bne.n	1506 <__stack_size__+0x506>
 */
static inline void sysclk_disable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    14ec:	f04f 0300 	mov.w	r3, #0
    14f0:	f2c4 030e 	movt	r3, #16398	; 0x400e
    14f4:	6c19      	ldr	r1, [r3, #64]	; 0x40
	temp_mask &= ~mask;
    14f6:	f021 007f 	bic.w	r0, r1, #127	; 0x7f
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    14fa:	f04f 0240 	mov.w	r2, #64	; 0x40
    14fe:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    1502:	659a      	str	r2, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    1504:	6418      	str	r0, [r3, #64]	; 0x40
    1506:	bd08      	pop	{r3, pc}

00001508 <sysclk_set_prescalers>:
 * \param pbd_shift The PBD clock will be divided by \f$2^{pbd\_shift}\f$
 */
void sysclk_set_prescalers(uint32_t cpu_shift,
		uint32_t pba_shift, uint32_t pbb_shift,
		uint32_t pbc_shift, uint32_t pbd_shift)
{
    1508:	b4f0      	push	{r4, r5, r6, r7}
    150a:	9c04      	ldr	r4, [sp, #16]
	Assert(cpu_shift <= pba_shift);
	Assert(cpu_shift <= pbb_shift);
	Assert(cpu_shift <= pbc_shift);
	Assert(cpu_shift <= pbd_shift);

	if (cpu_shift > 0) {
    150c:	b130      	cbz	r0, 151c <sysclk_set_prescalers+0x14>
		cpu_cksel = (PM_CPUSEL_CPUSEL(cpu_shift - 1))
    150e:	f100 36ff 	add.w	r6, r0, #4294967295
    1512:	f006 0707 	and.w	r7, r6, #7
    1516:	f047 0080 	orr.w	r0, r7, #128	; 0x80
    151a:	e001      	b.n	1520 <sysclk_set_prescalers+0x18>
void sysclk_set_prescalers(uint32_t cpu_shift,
		uint32_t pba_shift, uint32_t pbb_shift,
		uint32_t pbc_shift, uint32_t pbd_shift)
{
	irqflags_t flags;
	uint32_t   cpu_cksel = 0;
    151c:	f04f 0000 	mov.w	r0, #0
	if (cpu_shift > 0) {
		cpu_cksel = (PM_CPUSEL_CPUSEL(cpu_shift - 1))
				| PM_CPUSEL_CPUDIV;
	}

	if (pba_shift > 0) {
    1520:	b131      	cbz	r1, 1530 <sysclk_set_prescalers+0x28>
		pba_cksel = (PM_PBASEL_PBSEL(pba_shift - 1))
    1522:	f101 35ff 	add.w	r5, r1, #4294967295
    1526:	f005 0607 	and.w	r6, r5, #7
    152a:	f046 0180 	orr.w	r1, r6, #128	; 0x80
    152e:	e001      	b.n	1534 <sysclk_set_prescalers+0x2c>
		uint32_t pba_shift, uint32_t pbb_shift,
		uint32_t pbc_shift, uint32_t pbd_shift)
{
	irqflags_t flags;
	uint32_t   cpu_cksel = 0;
	uint32_t   pba_cksel = 0;
    1530:	f04f 0100 	mov.w	r1, #0
	if (pba_shift > 0) {
		pba_cksel = (PM_PBASEL_PBSEL(pba_shift - 1))
				| PM_PBASEL_PBDIV;
	}

	if (pbb_shift > 0) {
    1534:	b132      	cbz	r2, 1544 <sysclk_set_prescalers+0x3c>
		pbb_cksel = (PM_PBBSEL_PBSEL(pbb_shift - 1))
    1536:	f102 37ff 	add.w	r7, r2, #4294967295
    153a:	f007 0507 	and.w	r5, r7, #7
    153e:	f045 0280 	orr.w	r2, r5, #128	; 0x80
    1542:	e001      	b.n	1548 <sysclk_set_prescalers+0x40>
		uint32_t pbc_shift, uint32_t pbd_shift)
{
	irqflags_t flags;
	uint32_t   cpu_cksel = 0;
	uint32_t   pba_cksel = 0;
	uint32_t   pbb_cksel = 0;
    1544:	f04f 0200 	mov.w	r2, #0
	if (pbb_shift > 0) {
		pbb_cksel = (PM_PBBSEL_PBSEL(pbb_shift - 1))
				| PM_PBBSEL_PBDIV;
	}

	if (pbc_shift > 0) {
    1548:	b133      	cbz	r3, 1558 <sysclk_set_prescalers+0x50>
		pbc_cksel = (PM_PBCSEL_PBSEL(pbc_shift - 1))
    154a:	f103 36ff 	add.w	r6, r3, #4294967295
    154e:	f006 0707 	and.w	r7, r6, #7
    1552:	f047 0380 	orr.w	r3, r7, #128	; 0x80
    1556:	e001      	b.n	155c <sysclk_set_prescalers+0x54>
{
	irqflags_t flags;
	uint32_t   cpu_cksel = 0;
	uint32_t   pba_cksel = 0;
	uint32_t   pbb_cksel = 0;
	uint32_t   pbc_cksel = 0;
    1558:	f04f 0300 	mov.w	r3, #0
	if (pbc_shift > 0) {
		pbc_cksel = (PM_PBCSEL_PBSEL(pbc_shift - 1))
				| PM_PBCSEL_PBDIV;
	}

	if (pbd_shift > 0) {
    155c:	b134      	cbz	r4, 156c <sysclk_set_prescalers+0x64>
		pbd_cksel = (PM_PBDSEL_PBSEL(pbd_shift - 1))
    155e:	f104 34ff 	add.w	r4, r4, #4294967295
    1562:	f004 0507 	and.w	r5, r4, #7
    1566:	f045 0780 	orr.w	r7, r5, #128	; 0x80
    156a:	e001      	b.n	1570 <sysclk_set_prescalers+0x68>
	irqflags_t flags;
	uint32_t   cpu_cksel = 0;
	uint32_t   pba_cksel = 0;
	uint32_t   pbb_cksel = 0;
	uint32_t   pbc_cksel = 0;
	uint32_t   pbd_cksel = 0;
    156c:	f04f 0700 	mov.w	r7, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1570:	f3ef 8610 	mrs	r6, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1574:	b672      	cpsid	i
    1576:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    157a:	f240 0444 	movw	r4, #68	; 0x44
    157e:	f2c2 0400 	movt	r4, #8192	; 0x2000
    1582:	f04f 0500 	mov.w	r5, #0
    1586:	7025      	strb	r5, [r4, #0]
				| PM_PBDSEL_PBDIV;
	}

	flags = cpu_irq_save();

	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    1588:	462c      	mov	r4, r5
    158a:	f2c4 040e 	movt	r4, #16398	; 0x400e
    158e:	f04f 0504 	mov.w	r5, #4
    1592:	f6ca 2500 	movt	r5, #43520	; 0xaa00
    1596:	65a5      	str	r5, [r4, #88]	; 0x58
		| PM_UNLOCK_ADDR((uint32_t)&PM->PM_CPUSEL - (uint32_t)PM);
	PM->PM_CPUSEL = cpu_cksel;
    1598:	6060      	str	r0, [r4, #4]

	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    159a:	f04f 000c 	mov.w	r0, #12
    159e:	f6ca 2000 	movt	r0, #43520	; 0xaa00
    15a2:	65a0      	str	r0, [r4, #88]	; 0x58
		| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBASEL - (uint32_t)PM);
	PM->PM_PBASEL = pba_cksel;
    15a4:	60e1      	str	r1, [r4, #12]

	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    15a6:	f04f 0110 	mov.w	r1, #16
    15aa:	f6ca 2100 	movt	r1, #43520	; 0xaa00
    15ae:	65a1      	str	r1, [r4, #88]	; 0x58
		| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBBSEL - (uint32_t)PM);
	PM->PM_PBBSEL = pbb_cksel;
    15b0:	6122      	str	r2, [r4, #16]

	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    15b2:	f04f 0214 	mov.w	r2, #20
    15b6:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    15ba:	65a2      	str	r2, [r4, #88]	; 0x58
		| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBCSEL - (uint32_t)PM);
	PM->PM_PBCSEL = pbc_cksel;
    15bc:	6163      	str	r3, [r4, #20]

	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    15be:	f04f 0318 	mov.w	r3, #24
    15c2:	f6ca 2300 	movt	r3, #43520	; 0xaa00
    15c6:	65a3      	str	r3, [r4, #88]	; 0x58
		| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBDSEL - (uint32_t)PM);
	PM->PM_PBDSEL = pbd_cksel;
    15c8:	61a7      	str	r7, [r4, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    15ca:	b94e      	cbnz	r6, 15e0 <sysclk_set_prescalers+0xd8>
		cpu_irq_enable();
    15cc:	f240 0044 	movw	r0, #68	; 0x44
    15d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    15d4:	f04f 0101 	mov.w	r1, #1
    15d8:	7001      	strb	r1, [r0, #0]
    15da:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    15de:	b662      	cpsie	i

	cpu_irq_restore(flags);
}
    15e0:	bcf0      	pop	{r4, r5, r6, r7}
    15e2:	4770      	bx	lr

000015e4 <sysclk_set_source>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    15e4:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    15e8:	b672      	cpsid	i
    15ea:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    15ee:	f240 0344 	movw	r3, #68	; 0x44
    15f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    15f6:	f04f 0100 	mov.w	r1, #0
    15fa:	7019      	strb	r1, [r3, #0]
{
	irqflags_t flags;
	Assert(src <= SYSCLK_SRC_RC1M);

	flags = cpu_irq_save();
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    15fc:	460b      	mov	r3, r1
    15fe:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1602:	f04f 412a 	mov.w	r1, #2852126720	; 0xaa000000
    1606:	6599      	str	r1, [r3, #88]	; 0x58
		| PM_UNLOCK_ADDR((uint32_t)&PM->PM_MCCTRL - (uint32_t)PM);
	PM->PM_MCCTRL = src;
    1608:	6018      	str	r0, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    160a:	b94a      	cbnz	r2, 1620 <sysclk_set_source+0x3c>
		cpu_irq_enable();
    160c:	f240 0044 	movw	r0, #68	; 0x44
    1610:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1614:	f04f 0201 	mov.w	r2, #1
    1618:	7002      	strb	r2, [r0, #0]
    161a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    161e:	b662      	cpsie	i
    1620:	4770      	bx	lr
    1622:	bf00      	nop

00001624 <sysclk_init>:
   genclk_disable(7);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
    1624:	b530      	push	{r4, r5, lr}
    1626:	b083      	sub	sp, #12
	uint32_t ps_value = 0;
	bool is_fwu_enabled = false;

#if CONFIG_HCACHE_ENABLE == 1
	/* Enable HCACHE */
	sysclk_enable_peripheral_clock(HCACHE);
    1628:	f44f 6480 	mov.w	r4, #1024	; 0x400
    162c:	f2c4 040a 	movt	r4, #16394	; 0x400a
    1630:	4620      	mov	r0, r4
    1632:	f240 73cd 	movw	r3, #1997	; 0x7cd
    1636:	f2c0 0300 	movt	r3, #0
    163a:	4798      	blx	r3
	HCACHE->HCACHE_CTRL = HCACHE_CTRL_CEN_YES;
    163c:	f04f 0001 	mov.w	r0, #1
    1640:	60a0      	str	r0, [r4, #8]
	while (!(HCACHE->HCACHE_SR & HCACHE_SR_CSTS_EN));
    1642:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1646:	f2c4 020a 	movt	r2, #16394	; 0x400a
    164a:	68d1      	ldr	r1, [r2, #12]
    164c:	f011 0f01 	tst.w	r1, #1
    1650:	d0fb      	beq.n	164a <sysclk_init+0x26>

	/* Set up system clock dividers if different from defaults */
	if ((CONFIG_SYSCLK_CPU_DIV > 0) || (CONFIG_SYSCLK_PBA_DIV > 0) ||
			(CONFIG_SYSCLK_PBB_DIV > 0) || (CONFIG_SYSCLK_PBC_DIV > 0) ||
			(CONFIG_SYSCLK_PBD_DIV > 0)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_CPU_DIV,
    1652:	f04f 0301 	mov.w	r3, #1
    1656:	9300      	str	r3, [sp, #0]
    1658:	4618      	mov	r0, r3
    165a:	4619      	mov	r1, r3
    165c:	461a      	mov	r2, r3
    165e:	f241 5509 	movw	r5, #5385	; 0x1509
    1662:	f2c0 0500 	movt	r5, #0
    1666:	47a8      	blx	r5
static inline void osc_enable(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		osc_priv_enable_osc0();
    1668:	f240 2431 	movw	r4, #561	; 0x231
    166c:	f2c0 0400 	movt	r4, #0
    1670:	47a0      	blx	r4
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
    1672:	f44f 6000 	mov.w	r0, #2048	; 0x800
    1676:	f2c4 000e 	movt	r0, #16398	; 0x400e
    167a:	6943      	ldr	r3, [r0, #20]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    167c:	f013 0f01 	tst.w	r3, #1
    1680:	d0fb      	beq.n	167a <sysclk_init+0x56>
#ifdef BOARD_OSC0_HZ
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_OSC0) {
		osc_enable(OSC_ID_OSC0);
		osc_wait_ready(OSC_ID_OSC0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz(), ps_value, is_fwu_enabled);
    1682:	f648 5080 	movw	r0, #36224	; 0x8d80
    1686:	f2c0 005b 	movt	r0, #91	; 0x5b
    168a:	f04f 0101 	mov.w	r1, #1
    168e:	f04f 0200 	mov.w	r2, #0
    1692:	f641 250d 	movw	r5, #6669	; 0x1a0d
    1696:	f2c0 0500 	movt	r5, #0
    169a:	47a8      	blx	r5
		sysclk_set_source(SYSCLK_SRC_OSC0);
    169c:	f04f 0001 	mov.w	r0, #1
    16a0:	f241 52e5 	movw	r2, #5605	; 0x15e5
    16a4:	f2c0 0200 	movt	r2, #0
    16a8:	4790      	blx	r2
	if (!no_halt) {
		bpm_power_scaling_cpu(bpm, ps_value);
		return true;
	}

	return bpm_power_scaling_cpu_failsafe(bpm, ps_value, 240000);
    16aa:	f04f 0000 	mov.w	r0, #0
    16ae:	f2c4 000f 	movt	r0, #16399	; 0x400f
    16b2:	f04f 0101 	mov.w	r1, #1
    16b6:	f64a 1280 	movw	r2, #43392	; 0xa980
    16ba:	f2c0 0203 	movt	r2, #3
    16be:	f641 04e5 	movw	r4, #6373	; 0x18e5
    16c2:	f2c0 0400 	movt	r4, #0
    16c6:	47a0      	blx	r4
		Assert(false);
	}

	/* Automatically switch to low power mode */
	bpm_configure_power_scaling(BPM, ps_value, BPM_PSCM_CPU_NOT_HALT);
	while ((bpm_get_status(BPM) & BPM_SR_PSOK) == 0);
    16c8:	f04f 0400 	mov.w	r4, #0
    16cc:	f2c4 040f 	movt	r4, #16399	; 0x400f
    16d0:	f641 155d 	movw	r5, #6493	; 0x195d
    16d4:	f2c0 0500 	movt	r5, #0
    16d8:	4620      	mov	r0, r4
    16da:	47a8      	blx	r5
    16dc:	f010 0f01 	tst.w	r0, #1
    16e0:	d0fa      	beq.n	16d8 <sysclk_init+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    16e2:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    16e6:	b672      	cpsid	i
    16e8:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    16ec:	f240 0244 	movw	r2, #68	; 0x44
    16f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    16f4:	f04f 0100 	mov.w	r1, #0
    16f8:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    16fa:	b928      	cbnz	r0, 1708 <sysclk_init+0xe4>
		cpu_irq_enable();
    16fc:	f04f 0001 	mov.w	r0, #1
    1700:	7010      	strb	r0, [r2, #0]
    1702:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1706:	b662      	cpsie	i

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
    1708:	b003      	add	sp, #12
    170a:	bd30      	pop	{r4, r5, pc}

0000170c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    170c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1710:	460c      	mov	r4, r1
    1712:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1714:	bb48      	cbnz	r0, 176a <_read+0x5e>
		return -1;
	}

	for (; len > 0; --len) {
    1716:	2a00      	cmp	r2, #0
    1718:	dd2b      	ble.n	1772 <_read+0x66>

int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
    171a:	188f      	adds	r7, r1, r2
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    171c:	f640 1680 	movw	r6, #2432	; 0x980
    1720:	f2c2 0600 	movt	r6, #8192	; 0x2000
    1724:	f640 1578 	movw	r5, #2424	; 0x978
    1728:	f2c2 0500 	movt	r5, #8192	; 0x2000
    172c:	ea6f 0901 	mvn.w	r9, r1
    1730:	eb07 0009 	add.w	r0, r7, r9
    1734:	f000 0901 	and.w	r9, r0, #1
    1738:	6830      	ldr	r0, [r6, #0]
    173a:	682b      	ldr	r3, [r5, #0]
    173c:	4798      	blx	r3
		ptr++;
    173e:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    1742:	42bc      	cmp	r4, r7
    1744:	d119      	bne.n	177a <_read+0x6e>
    1746:	e00d      	b.n	1764 <_read+0x58>
		ptr_get(stdio_base, ptr);
    1748:	6830      	ldr	r0, [r6, #0]
    174a:	682b      	ldr	r3, [r5, #0]
    174c:	4621      	mov	r1, r4
    174e:	4798      	blx	r3
		ptr++;
    1750:	f104 0401 	add.w	r4, r4, #1
    1754:	4621      	mov	r1, r4
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    1756:	6830      	ldr	r0, [r6, #0]
    1758:	682a      	ldr	r2, [r5, #0]
    175a:	4790      	blx	r2
		ptr++;
    175c:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    1760:	42bc      	cmp	r4, r7
    1762:	d1f1      	bne.n	1748 <_read+0x3c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
    1764:	4640      	mov	r0, r8
    1766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    176a:	f04f 30ff 	mov.w	r0, #4294967295
    176e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	for (; len > 0; --len) {
    1772:	f04f 0000 	mov.w	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
    1776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    177a:	f1b9 0f00 	cmp.w	r9, #0
    177e:	d0e3      	beq.n	1748 <_read+0x3c>
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    1780:	6830      	ldr	r0, [r6, #0]
    1782:	682a      	ldr	r2, [r5, #0]
    1784:	4621      	mov	r1, r4
    1786:	4790      	blx	r2
		ptr++;
    1788:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    178c:	42bc      	cmp	r4, r7
    178e:	d1db      	bne.n	1748 <_read+0x3c>
    1790:	e7e8      	b.n	1764 <_read+0x58>
    1792:	bf00      	nop

00001794 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
    1794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1798:	460d      	mov	r5, r1
    179a:	4690      	mov	r8, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    179c:	f100 30ff 	add.w	r0, r0, #4294967295
    17a0:	2802      	cmp	r0, #2
    17a2:	d824      	bhi.n	17ee <_write+0x5a>
		return -1;
	}

	for (; len != 0; --len) {
    17a4:	b332      	cbz	r2, 17f4 <_write+0x60>
		if (ptr_put(stdio_base, *ptr++) < 0) {
    17a6:	f640 1680 	movw	r6, #2432	; 0x980
    17aa:	f2c2 0600 	movt	r6, #8192	; 0x2000
    17ae:	f640 177c 	movw	r7, #2428	; 0x97c
    17b2:	f2c2 0700 	movt	r7, #8192	; 0x2000
    17b6:	f04f 0400 	mov.w	r4, #0
    17ba:	f102 39ff 	add.w	r9, r2, #4294967295
    17be:	f009 0901 	and.w	r9, r9, #1
    17c2:	6830      	ldr	r0, [r6, #0]
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	5d09      	ldrb	r1, [r1, r4]
    17c8:	4798      	blx	r3
    17ca:	42a0      	cmp	r0, r4
    17cc:	da1a      	bge.n	1804 <_write+0x70>
    17ce:	e014      	b.n	17fa <_write+0x66>
    17d0:	6830      	ldr	r0, [r6, #0]
    17d2:	683b      	ldr	r3, [r7, #0]
    17d4:	5d29      	ldrb	r1, [r5, r4]
    17d6:	4798      	blx	r3
    17d8:	2800      	cmp	r0, #0
    17da:	db0e      	blt.n	17fa <_write+0x66>
			return -1;
		}
		++nChars;
    17dc:	f104 0401 	add.w	r4, r4, #1
	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    17e0:	6830      	ldr	r0, [r6, #0]
    17e2:	683a      	ldr	r2, [r7, #0]
    17e4:	5d29      	ldrb	r1, [r5, r4]
    17e6:	4790      	blx	r2
    17e8:	2800      	cmp	r0, #0
    17ea:	da1d      	bge.n	1828 <_write+0x94>
    17ec:	e005      	b.n	17fa <_write+0x66>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    17ee:	f04f 34ff 	mov.w	r4, #4294967295
    17f2:	e004      	b.n	17fe <_write+0x6a>
	}

	for (; len != 0; --len) {
    17f4:	f04f 0400 	mov.w	r4, #0
    17f8:	e001      	b.n	17fe <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    17fa:	f04f 34ff 	mov.w	r4, #4294967295
		}
		++nChars;
	}
	return nChars;
}
    17fe:	4620      	mov	r0, r4
    1800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
    1804:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    1808:	45a0      	cmp	r8, r4
    180a:	d0f8      	beq.n	17fe <_write+0x6a>
    180c:	f1b9 0f00 	cmp.w	r9, #0
    1810:	d0de      	beq.n	17d0 <_write+0x3c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1812:	6830      	ldr	r0, [r6, #0]
    1814:	683a      	ldr	r2, [r7, #0]
    1816:	5d29      	ldrb	r1, [r5, r4]
    1818:	4790      	blx	r2
    181a:	2800      	cmp	r0, #0
    181c:	dbed      	blt.n	17fa <_write+0x66>
			return -1;
		}
		++nChars;
    181e:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    1822:	45a0      	cmp	r8, r4
    1824:	d1d4      	bne.n	17d0 <_write+0x3c>
    1826:	e7ea      	b.n	17fe <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
    1828:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    182c:	45a0      	cmp	r8, r4
    182e:	d1cf      	bne.n	17d0 <_write+0x3c>
    1830:	e7e5      	b.n	17fe <_write+0x6a>
    1832:	bf00      	nop

00001834 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_disable_pin(pin);\
	} while (0)

void board_init(void)
{
    1834:	b500      	push	{lr}
    1836:	b087      	sub	sp, #28
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	struct wdt_dev_inst wdt_inst;
	struct wdt_config   wdt_cfg;

	wdt_get_config_defaults(&wdt_cfg);
    1838:	4668      	mov	r0, sp
    183a:	f641 532d 	movw	r3, #7469	; 0x1d2d
    183e:	f2c0 0300 	movt	r3, #0
    1842:	4798      	blx	r3
	wdt_init(&wdt_inst, WDT, &wdt_cfg);
    1844:	a804      	add	r0, sp, #16
    1846:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    184a:	f2c4 010f 	movt	r1, #16399	; 0x400f
    184e:	466a      	mov	r2, sp
    1850:	f641 5349 	movw	r3, #7497	; 0x1d49
    1854:	f2c0 0300 	movt	r3, #0
    1858:	4798      	blx	r3
	wdt_disable(&wdt_inst);
    185a:	a804      	add	r0, sp, #16
    185c:	f641 6115 	movw	r1, #7701	; 0x1e15
    1860:	f2c0 0100 	movt	r1, #0
    1864:	4788      	blx	r1
	return 1U << (pin & 0x1F);
}

__always_inline static void arch_ioport_init(void)
{
	sysclk_enable_peripheral_clock(GPIO);
    1866:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    186a:	f2c4 000e 	movt	r0, #16398	; 0x400e
    186e:	f240 72cd 	movw	r2, #1997	; 0x7cd
    1872:	f2c0 0200 	movt	r2, #0
    1876:	4790      	blx	r2

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    1878:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
    187c:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1880:	f04f 0380 	mov.w	r3, #128	; 0x80
    1884:	6443      	str	r3, [r0, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    1886:	f8c0 3168 	str.w	r3, [r0, #360]	; 0x168

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    188a:	6543      	str	r3, [r0, #84]	; 0x54
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    188c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    1890:	6481      	str	r1, [r0, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    1892:	f8c0 1164 	str.w	r1, [r0, #356]	; 0x164
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
    1896:	6741      	str	r1, [r0, #116]	; 0x74

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    1898:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    189c:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    18a0:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    18a4:	6181      	str	r1, [r0, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    18a6:	6281      	str	r1, [r0, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    18a8:	6381      	str	r1, [r0, #56]	; 0x38
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    18aa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    18ae:	6782      	str	r2, [r0, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    18b0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    18b4:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    18b8:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    18bc:	6182      	str	r2, [r0, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    18be:	6282      	str	r2, [r0, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    18c0:	6382      	str	r2, [r0, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    18c2:	6082      	str	r2, [r0, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    18c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    18c8:	6783      	str	r3, [r0, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    18ca:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    18ce:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    18d2:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    18d6:	6183      	str	r3, [r0, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    18d8:	6283      	str	r3, [r0, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    18da:	6383      	str	r3, [r0, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    18dc:	6083      	str	r3, [r0, #8]
	ioport_set_pin_peripheral_mode(PIN_PA15D_PARC_PCDATA6, MUX_PA15D_PARC_PCDATA6);
	ioport_set_pin_peripheral_mode(PIN_PA16D_PARC_PCDATA7, MUX_PA16D_PARC_PCDATA7);
	ioport_set_pin_peripheral_mode(PIN_PA18D_PARC_PCEN1, MUX_PA18D_PARC_PCEN1);
	ioport_set_pin_peripheral_mode(PIN_PA19D_PARC_PCEN2, MUX_PA19D_PARC_PCEN2);
#endif
}
    18de:	b007      	add	sp, #28
    18e0:	bd00      	pop	{pc}
    18e2:	bf00      	nop

000018e4 <bpm_power_scaling_cpu_failsafe>:
}


bool bpm_power_scaling_cpu_failsafe(Bpm *bpm, uint32_t ps_value,
	uint32_t timeout)
{
    18e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t pmcon = 0;

	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;
    18e8:	69c4      	ldr	r4, [r0, #28]

	/* Clear last PS Value & Write new one */
	pmcon &= ~BPM_PMCON_PS_Msk;
    18ea:	f024 0503 	bic.w	r5, r4, #3
	pmcon |= BPM_PMCON_PS(ps_value);
    18ee:	f045 030c 	orr.w	r3, r5, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    18f2:	f3ef 8610 	mrs	r6, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    18f6:	b672      	cpsid	i
    18f8:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    18fc:	f04f 0500 	mov.w	r5, #0
    1900:	f240 0744 	movw	r7, #68	; 0x44
    1904:	f2c2 0700 	movt	r7, #8192	; 0x2000
    1908:	703d      	strb	r5, [r7, #0]
	uint32_t ctrl, load, val;
	/* Avoid interrupt while flash halt */
	flags = cpu_irq_save();

	/* Save SysTick */
	val = SysTick->VAL;
    190a:	f24e 0410 	movw	r4, #57360	; 0xe010
    190e:	f2ce 0400 	movt	r4, #57344	; 0xe000
    1912:	f8d4 8008 	ldr.w	r8, [r4, #8]
	ctrl = SysTick->CTRL;
    1916:	6827      	ldr	r7, [r4, #0]
	load = SysTick->LOAD;
    1918:	f8d4 9004 	ldr.w	r9, [r4, #4]
	/* Setup SysTick & start counting */
	SysTick->LOAD = timeout;
    191c:	6062      	str	r2, [r4, #4]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    191e:	f04f 0205 	mov.w	r2, #5
    1922:	6022      	str	r2, [r4, #0]
	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;

	/* Clear last PS Value & Write new one */
	pmcon &= ~BPM_PMCON_PS_Msk;
	pmcon |= BPM_PMCON_PS(ps_value);
    1924:	f001 0103 	and.w	r1, r1, #3
	load = SysTick->LOAD;
	/* Setup SysTick & start counting */
	SysTick->LOAD = timeout;
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;

	b_psok = bpm_ps_no_halt_exec(bpm, pmcon);
    1928:	4319      	orrs	r1, r3
    192a:	f240 030d 	movw	r3, #13
    192e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1932:	4798      	blx	r3

	/* Restore SysTick */
	SysTick->CTRL = 0;
    1934:	6025      	str	r5, [r4, #0]
	SysTick->LOAD = load;
    1936:	f8c4 9004 	str.w	r9, [r4, #4]
	SysTick->VAL = val;
    193a:	f8c4 8008 	str.w	r8, [r4, #8]
	SysTick->CTRL = ctrl;
    193e:	6027      	str	r7, [r4, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1940:	b94e      	cbnz	r6, 1956 <bpm_power_scaling_cpu_failsafe+0x72>
		cpu_irq_enable();
    1942:	f240 0144 	movw	r1, #68	; 0x44
    1946:	f2c2 0100 	movt	r1, #8192	; 0x2000
    194a:	f04f 0201 	mov.w	r2, #1
    194e:	700a      	strb	r2, [r1, #0]
    1950:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1954:	b662      	cpsie	i

	cpu_irq_restore(flags);
	return b_psok;
}
    1956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    195a:	bf00      	nop

0000195c <bpm_get_status>:
	bpm->BPM_ICR = sources;
}

uint32_t bpm_get_status(Bpm *bpm)
{
	return bpm->BPM_SR;
    195c:	6940      	ldr	r0, [r0, #20]
}
    195e:	4770      	bx	lr

00001960 <flashcalw_set_wait_state>:
 * \param wait_state The number of wait states of flash read accesses: \c 0 to
 *                   \c 1.
 */
void flashcalw_set_wait_state(uint32_t wait_state)
{
	HFLASHC->FLASHCALW_FCR = (HFLASHC->FLASHCALW_FCR & ~FLASHCALW_FCR_FWS)
    1960:	f04f 0300 	mov.w	r3, #0
    1964:	f2c4 030a 	movt	r3, #16394	; 0x400a
    1968:	6819      	ldr	r1, [r3, #0]
    196a:	f021 0240 	bic.w	r2, r1, #64	; 0x40
			| (wait_state ? FLASHCALW_FCR_FWS_1 :
    196e:	2800      	cmp	r0, #0
    1970:	bf14      	ite	ne
    1972:	2040      	movne	r0, #64	; 0x40
    1974:	2000      	moveq	r0, #0
    1976:	4310      	orrs	r0, r2
 * \param wait_state The number of wait states of flash read accesses: \c 0 to
 *                   \c 1.
 */
void flashcalw_set_wait_state(uint32_t wait_state)
{
	HFLASHC->FLASHCALW_FCR = (HFLASHC->FLASHCALW_FCR & ~FLASHCALW_FCR_FWS)
    1978:	f04f 0300 	mov.w	r3, #0
    197c:	f2c4 030a 	movt	r3, #16394	; 0x400a
    1980:	6018      	str	r0, [r3, #0]
    1982:	4770      	bx	lr

00001984 <flashcalw_is_ready>:
 *
 * \return Whether the FLASHCALW is ready to run a new command.
 */
bool flashcalw_is_ready(void)
{
	return ((HFLASHC->FLASHCALW_FSR & FLASHCALW_FSR_FRDY) != 0);
    1984:	f04f 0300 	mov.w	r3, #0
    1988:	f2c4 030a 	movt	r3, #16394	; 0x400a
    198c:	6898      	ldr	r0, [r3, #8]
}
    198e:	f000 0001 	and.w	r0, r0, #1
    1992:	4770      	bx	lr

00001994 <flashcalw_default_wait_until_ready>:
/*! \brief Waits actively until the FLASHCALW is ready to run a new command.
 *
 * This is the default function assigned to \ref flashcalw_wait_until_ready.
 */
void flashcalw_default_wait_until_ready(void)
{
    1994:	b510      	push	{r4, lr}
	while (!flashcalw_is_ready()) {
    1996:	f641 1485 	movw	r4, #6533	; 0x1985
    199a:	f2c0 0400 	movt	r4, #0
    199e:	47a0      	blx	r4
    19a0:	2800      	cmp	r0, #0
    19a2:	d0fc      	beq.n	199e <flashcalw_default_wait_until_ready+0xa>
	}
}
    19a4:	bd10      	pop	{r4, pc}
    19a6:	bf00      	nop

000019a8 <flashcalw_issue_command>:
 *
 * \note The FLASHCALW error status returned by \ref flashcalw_is_lock_error and
 *       \ref flashcalw_is_programming_error is updated.
 */
void flashcalw_issue_command(uint32_t command, int page_number)
{
    19a8:	b538      	push	{r3, r4, r5, lr}
    19aa:	4605      	mov	r5, r0
    19ac:	460c      	mov	r4, r1
	uint32_t tempo;

	flashcalw_wait_until_ready();
    19ae:	f240 0348 	movw	r3, #72	; 0x48
    19b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    19b6:	6818      	ldr	r0, [r3, #0]
    19b8:	4780      	blx	r0
	tempo = HFLASHC->FLASHCALW_FCMD;
    19ba:	f04f 0100 	mov.w	r1, #0
    19be:	f2c4 010a 	movt	r1, #16394	; 0x400a
    19c2:	684a      	ldr	r2, [r1, #4]
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
	if (page_number >= 0) {
    19c4:	2c00      	cmp	r4, #0
    19c6:	db07      	blt.n	19d8 <flashcalw_issue_command+0x30>
		tempo = (FLASHCALW_FCMD_KEY_KEY
				| FLASHCALW_FCMD_PAGEN(page_number) | command);
    19c8:	f045 4525 	orr.w	r5, r5, #2768240640	; 0xa5000000
    19cc:	ea4f 2404 	mov.w	r4, r4, lsl #8
    19d0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	flashcalw_wait_until_ready();
	tempo = HFLASHC->FLASHCALW_FCMD;
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
	if (page_number >= 0) {
		tempo = (FLASHCALW_FCMD_KEY_KEY
    19d4:	4325      	orrs	r5, r4
    19d6:	e004      	b.n	19e2 <flashcalw_issue_command+0x3a>
	uint32_t tempo;

	flashcalw_wait_until_ready();
	tempo = HFLASHC->FLASHCALW_FCMD;
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
    19d8:	f022 033f 	bic.w	r3, r2, #63	; 0x3f
	if (page_number >= 0) {
		tempo = (FLASHCALW_FCMD_KEY_KEY
				| FLASHCALW_FCMD_PAGEN(page_number) | command);
	} else {
		tempo |= (FLASHCALW_FCMD_KEY_KEY | command);
    19dc:	f043 4025 	orr.w	r0, r3, #2768240640	; 0xa5000000
    19e0:	4305      	orrs	r5, r0
	}

	HFLASHC->FLASHCALW_FCMD = tempo;
    19e2:	f04f 0100 	mov.w	r1, #0
    19e6:	f2c4 010a 	movt	r1, #16394	; 0x400a
    19ea:	604d      	str	r5, [r1, #4]
 *          the driver's API which instead presents \ref flashcalw_is_lock_error
 *          and \ref flashcalw_is_programming_error.
 */
static uint32_t flashcalw_get_error_status(void)
{
	return HFLASHC->FLASHCALW_FSR &
    19ec:	688a      	ldr	r2, [r1, #8]
    19ee:	f002 000c 	and.w	r0, r2, #12
	} else {
		tempo |= (FLASHCALW_FCMD_KEY_KEY | command);
	}

	HFLASHC->FLASHCALW_FCMD = tempo;
	flashcalw_error_status = flashcalw_get_error_status();
    19f2:	f640 1334 	movw	r3, #2356	; 0x934
    19f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    19fa:	6018      	str	r0, [r3, #0]
	flashcalw_wait_until_ready();
    19fc:	f240 0148 	movw	r1, #72	; 0x48
    1a00:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1a04:	680a      	ldr	r2, [r1, #0]
    1a06:	4790      	blx	r2
    1a08:	bd38      	pop	{r3, r4, r5, pc}
    1a0a:	bf00      	nop

00001a0c <flashcalw_set_flash_waitstate_and_readmode>:
 * \param ps_value Power Scaling mode value (0, 1)
 * \param is_fwu_enabled (boolean), Is fast wakeup mode enabled or not
 */
void flashcalw_set_flash_waitstate_and_readmode(uint32_t cpu_f_hz,
		uint32_t ps_value, bool is_fwu_enabled)
{
    1a0c:	b508      	push	{r3, lr}
	}

	/* Enable the high-speed read mode. */
	flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSEN, -1);
#else
	if (ps_value == 0) {
    1a0e:	2900      	cmp	r1, #0
    1a10:	d156      	bne.n	1ac0 <flashcalw_set_flash_waitstate_and_readmode+0xb4>
		if (cpu_f_hz > FLASH_FREQ_PS0_FWS_0_MAX_FREQ) {
    1a12:	f64a 0380 	movw	r3, #43136	; 0xa880
    1a16:	f2c0 1312 	movt	r3, #274	; 0x112
    1a1a:	4298      	cmp	r0, r3
    1a1c:	d927      	bls.n	1a6e <flashcalw_set_flash_waitstate_and_readmode+0x62>
			// > 18MHz
			if (cpu_f_hz <= FLASH_FREQ_PS0_FWS_1_MAX_FREQ) {
    1a1e:	f44f 43a2 	mov.w	r3, #20736	; 0x5100
    1a22:	f2c0 2325 	movt	r3, #549	; 0x225
    1a26:	4298      	cmp	r0, r3
    1a28:	d810      	bhi.n	1a4c <flashcalw_set_flash_waitstate_and_readmode+0x40>
				// <= 36MHz
				/* Set a wait-state, disable the high-speed read
				 * mode. */
				flashcalw_set_wait_state(1);
    1a2a:	f04f 0001 	mov.w	r0, #1
    1a2e:	f641 1361 	movw	r3, #6497	; 0x1961
    1a32:	f2c0 0300 	movt	r3, #0
    1a36:	4798      	blx	r3
				flashcalw_issue_command(
    1a38:	f04f 0011 	mov.w	r0, #17
    1a3c:	f04f 31ff 	mov.w	r1, #4294967295
    1a40:	f641 12a9 	movw	r2, #6569	; 0x19a9
    1a44:	f2c0 0200 	movt	r2, #0
    1a48:	4790      	blx	r2
    1a4a:	bd08      	pop	{r3, pc}
						FLASHCALW_FCMD_CMD_HSDIS, -1);
			} else {
				// > 36 MHz
				/* Set a wait-state, enable the high-speed read
				mode. */
				flashcalw_set_wait_state(1);
    1a4c:	f04f 0001 	mov.w	r0, #1
    1a50:	f641 1161 	movw	r1, #6497	; 0x1961
    1a54:	f2c0 0100 	movt	r1, #0
    1a58:	4788      	blx	r1
				flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSEN,
    1a5a:	f04f 0010 	mov.w	r0, #16
    1a5e:	f04f 31ff 	mov.w	r1, #4294967295
    1a62:	f641 12a9 	movw	r2, #6569	; 0x19a9
    1a66:	f2c0 0200 	movt	r2, #0
    1a6a:	4790      	blx	r2
    1a6c:	bd08      	pop	{r3, pc}
						-1);
			}
		} else { // <= 18MHz
			if((is_fwu_enabled == true) &&
    1a6e:	b1b2      	cbz	r2, 1a9e <flashcalw_set_flash_waitstate_and_readmode+0x92>
    1a70:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
    1a74:	f2c0 01b7 	movt	r1, #183	; 0xb7
    1a78:	4288      	cmp	r0, r1
    1a7a:	d810      	bhi.n	1a9e <flashcalw_set_flash_waitstate_and_readmode+0x92>
				(cpu_f_hz <= FLASH_FREQ_PS1_FWS_1_FWU_MAX_FREQ))
			{
				// <= 12MHz
				/* Set a wait-state, disable the high-speed read
				mode. */
				flashcalw_set_wait_state(1);
    1a7c:	f04f 0001 	mov.w	r0, #1
    1a80:	f641 1161 	movw	r1, #6497	; 0x1961
    1a84:	f2c0 0100 	movt	r1, #0
    1a88:	4788      	blx	r1
				flashcalw_issue_command(
    1a8a:	f04f 0011 	mov.w	r0, #17
    1a8e:	f04f 31ff 	mov.w	r1, #4294967295
    1a92:	f641 12a9 	movw	r2, #6569	; 0x19a9
    1a96:	f2c0 0200 	movt	r2, #0
    1a9a:	4790      	blx	r2
    1a9c:	bd08      	pop	{r3, pc}
						FLASHCALW_FCMD_CMD_HSDIS, -1);
			} else {
				/* No wait-state, disable the high-speed read
				mode */
				flashcalw_set_wait_state(0);
    1a9e:	f04f 0000 	mov.w	r0, #0
    1aa2:	f641 1261 	movw	r2, #6497	; 0x1961
    1aa6:	f2c0 0200 	movt	r2, #0
    1aaa:	4790      	blx	r2
				flashcalw_issue_command(
    1aac:	f04f 0011 	mov.w	r0, #17
    1ab0:	f04f 31ff 	mov.w	r1, #4294967295
    1ab4:	f641 13a9 	movw	r3, #6569	; 0x19a9
    1ab8:	f2c0 0300 	movt	r3, #0
    1abc:	4798      	blx	r3
    1abe:	bd08      	pop	{r3, pc}
					FLASHCALW_FCMD_CMD_HSDIS, -1);
			}
		}
	} else { /* ps_value == 1 */
		if (cpu_f_hz > FLASH_FREQ_PS0_FWS_0_MAX_FREQ) { /* > 8MHz */
    1ac0:	f64a 0380 	movw	r3, #43136	; 0xa880
    1ac4:	f2c0 1312 	movt	r3, #274	; 0x112
    1ac8:	4298      	cmp	r0, r3
			/* Set a wait-state. */
			flashcalw_set_wait_state(1);
    1aca:	bf8c      	ite	hi
    1acc:	2001      	movhi	r0, #1
		} else {
			/* No wait-state. */
			flashcalw_set_wait_state(0);
    1ace:	2000      	movls	r0, #0
    1ad0:	f641 1161 	movw	r1, #6497	; 0x1961
    1ad4:	f2c0 0100 	movt	r1, #0
    1ad8:	4788      	blx	r1
		}

		/* Disable the high-speed read mode. */
		flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSDIS, -1);
    1ada:	f04f 0011 	mov.w	r0, #17
    1ade:	f04f 31ff 	mov.w	r1, #4294967295
    1ae2:	f641 12a9 	movw	r2, #6569	; 0x19a9
    1ae6:	f2c0 0200 	movt	r2, #0
    1aea:	4790      	blx	r2
    1aec:	bd08      	pop	{r3, pc}
    1aee:	bf00      	nop

00001af0 <tc_init>:
 * This is because the setting forces TIOB to be an input even if the
 * external event trigger has not been enabled with \c TC_CMR_ENETRG, and
 * thus prevents normal operation of TIOB.
 */
void tc_init(Tc *p_tc, uint32_t ul_channel, uint32_t ul_mode)
{
    1af0:	b410      	push	{r4}
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
    1af2:	ea4f 1181 	mov.w	r1, r1, lsl #6
    1af6:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
    1af8:	f04f 0402 	mov.w	r4, #2
    1afc:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
    1afe:	f04f 30ff 	mov.w	r0, #4294967295
    1b02:	6298      	str	r0, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
    1b04:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
    1b06:	605a      	str	r2, [r3, #4]
}
    1b08:	bc10      	pop	{r4}
    1b0a:	4770      	bx	lr

00001b0c <tc_start>:
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
    1b0c:	ea4f 1181 	mov.w	r1, r1, lsl #6
    1b10:	f04f 0305 	mov.w	r3, #5
    1b14:	5043      	str	r3, [r0, r1]
    1b16:	4770      	bx	lr

00001b18 <tc_write_ra>:
		uint32_t ul_value)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
    1b18:	eb00 1181 	add.w	r1, r0, r1, lsl #6
    1b1c:	614a      	str	r2, [r1, #20]
    1b1e:	4770      	bx	lr

00001b20 <tc_write_rc>:
		uint32_t ul_value)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
    1b20:	eb00 1181 	add.w	r1, r0, r1, lsl #6
    1b24:	61ca      	str	r2, [r1, #28]
    1b26:	4770      	bx	lr

00001b28 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
    1b28:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
    1b2a:	ea4f 1301 	mov.w	r3, r1, lsl #4
    1b2e:	4293      	cmp	r3, r2
    1b30:	d910      	bls.n	1b54 <usart_set_async_baudrate+0x2c>
    1b32:	e020      	b.n	1b76 <usart_set_async_baudrate+0x4e>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
    1b34:	6841      	ldr	r1, [r0, #4]
    1b36:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
    1b3a:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
    1b3c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    1b40:	6202      	str	r2, [r0, #32]

	return 0;
    1b42:	f04f 0000 	mov.w	r0, #0
    1b46:	e029      	b.n	1b9c <usart_set_async_baudrate+0x74>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
    1b48:	f04f 0001 	mov.w	r0, #1
    1b4c:	e026      	b.n	1b9c <usart_set_async_baudrate+0x74>
    1b4e:	f04f 0001 	mov.w	r0, #1
    1b52:	e023      	b.n	1b9c <usart_set_async_baudrate+0x74>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
    1b54:	ea4f 04c2 	mov.w	r4, r2, lsl #3
    1b58:	eb04 0253 	add.w	r2, r4, r3, lsr #1
    1b5c:	fbb2 f3f3 	udiv	r3, r2, r3
	cd = cd_fp >> 3;
    1b60:	ea4f 02d3 	mov.w	r2, r3, lsr #3
	fp = cd_fp & 0x07;
    1b64:	f003 0307 	and.w	r3, r3, #7
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
    1b68:	f102 34ff 	add.w	r4, r2, #4294967295
    1b6c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
    1b70:	428c      	cmp	r4, r1
    1b72:	d9e3      	bls.n	1b3c <usart_set_async_baudrate+0x14>
    1b74:	e7e8      	b.n	1b48 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
    1b76:	ea4f 01c1 	mov.w	r1, r1, lsl #3
    1b7a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    1b7e:	eb02 0451 	add.w	r4, r2, r1, lsr #1
    1b82:	fbb4 f3f1 	udiv	r3, r4, r1
	cd = cd_fp >> 3;
    1b86:	ea4f 02d3 	mov.w	r2, r3, lsr #3
	fp = cd_fp & 0x07;
    1b8a:	f003 0307 	and.w	r3, r3, #7
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
    1b8e:	f102 34ff 	add.w	r4, r2, #4294967295
    1b92:	f64f 71fe 	movw	r1, #65534	; 0xfffe
    1b96:	428c      	cmp	r4, r1
    1b98:	d9cc      	bls.n	1b34 <usart_set_async_baudrate+0xc>
    1b9a:	e7d8      	b.n	1b4e <usart_set_async_baudrate+0x26>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
    1b9c:	bc10      	pop	{r4}
    1b9e:	4770      	bx	lr

00001ba0 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
    1ba0:	f04f 0340 	mov.w	r3, #64	; 0x40
    1ba4:	6003      	str	r3, [r0, #0]
    1ba6:	4770      	bx	lr

00001ba8 <usart_reset_tx>:
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
    1ba8:	f04f 0388 	mov.w	r3, #136	; 0x88
    1bac:	6003      	str	r3, [r0, #0]
    1bae:	4770      	bx	lr

00001bb0 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
    1bb0:	f04f 0310 	mov.w	r3, #16
    1bb4:	6003      	str	r3, [r0, #0]
    1bb6:	4770      	bx	lr

00001bb8 <usart_reset_rx>:
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
    1bb8:	f04f 0324 	mov.w	r3, #36	; 0x24
    1bbc:	6003      	str	r3, [r0, #0]
    1bbe:	4770      	bx	lr

00001bc0 <usart_reset_status>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
    1bc0:	f44f 7380 	mov.w	r3, #256	; 0x100
    1bc4:	6003      	str	r3, [r0, #0]
    1bc6:	4770      	bx	lr

00001bc8 <usart_drive_DTR_pin_high>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_DTRDIS;
    1bc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    1bcc:	6003      	str	r3, [r0, #0]
    1bce:	4770      	bx	lr

00001bd0 <usart_drive_RTS_pin_high>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
    1bd0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    1bd4:	6003      	str	r3, [r0, #0]
    1bd6:	4770      	bx	lr

00001bd8 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
    1bd8:	6943      	ldr	r3, [r0, #20]
    1bda:	f013 0f02 	tst.w	r3, #2
    1bde:	d007      	beq.n	1bf0 <usart_write+0x18>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
    1be0:	ea4f 51c1 	mov.w	r1, r1, lsl #23
    1be4:	ea4f 52d1 	mov.w	r2, r1, lsr #23
    1be8:	61c2      	str	r2, [r0, #28]
	return 0;
    1bea:	f04f 0000 	mov.w	r0, #0
    1bee:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
    1bf0:	f04f 0001 	mov.w	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
    1bf4:	4770      	bx	lr
    1bf6:	bf00      	nop

00001bf8 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
    1bf8:	6943      	ldr	r3, [r0, #20]
    1bfa:	f013 0f01 	tst.w	r3, #1
    1bfe:	d008      	beq.n	1c12 <usart_read+0x1a>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
    1c00:	6980      	ldr	r0, [r0, #24]
    1c02:	ea4f 52c0 	mov.w	r2, r0, lsl #23
    1c06:	ea4f 53d2 	mov.w	r3, r2, lsr #23
    1c0a:	600b      	str	r3, [r1, #0]

	return 0;
    1c0c:	f04f 0000 	mov.w	r0, #0
    1c10:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
    1c12:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
    1c16:	4770      	bx	lr

00001c18 <usart_disable_writeprotect>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
    1c18:	f44f 4382 	mov.w	r3, #16640	; 0x4100
    1c1c:	f2c5 5353 	movt	r3, #21843	; 0x5553
    1c20:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
    1c24:	4770      	bx	lr
    1c26:	bf00      	nop

00001c28 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
    1c28:	b510      	push	{r4, lr}
    1c2a:	4604      	mov	r4, r0
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
    1c2c:	f641 4319 	movw	r3, #7193	; 0x1c19
    1c30:	f2c0 0300 	movt	r3, #0
    1c34:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
    1c36:	f04f 0000 	mov.w	r0, #0
    1c3a:	6060      	str	r0, [r4, #4]
	p_usart->US_RTOR = 0;
    1c3c:	6260      	str	r0, [r4, #36]	; 0x24
	p_usart->US_TTGR = 0;
    1c3e:	62a0      	str	r0, [r4, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
    1c40:	4620      	mov	r0, r4
    1c42:	f641 31a9 	movw	r1, #7081	; 0x1ba9
    1c46:	f2c0 0100 	movt	r1, #0
    1c4a:	4788      	blx	r1
	usart_reset_rx(p_usart);
    1c4c:	4620      	mov	r0, r4
    1c4e:	f641 32b9 	movw	r2, #7097	; 0x1bb9
    1c52:	f2c0 0200 	movt	r2, #0
    1c56:	4790      	blx	r2
	/* Reset status bits. */
	usart_reset_status(p_usart);
    1c58:	4620      	mov	r0, r4
    1c5a:	f641 33c1 	movw	r3, #7105	; 0x1bc1
    1c5e:	f2c0 0300 	movt	r3, #0
    1c62:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
    1c64:	4620      	mov	r0, r4
    1c66:	f641 31d1 	movw	r1, #7121	; 0x1bd1
    1c6a:	f2c0 0100 	movt	r1, #0
    1c6e:	4788      	blx	r1
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
    1c70:	4620      	mov	r0, r4
    1c72:	f641 32c9 	movw	r2, #7113	; 0x1bc9
    1c76:	f2c0 0200 	movt	r2, #0
    1c7a:	4790      	blx	r2
    1c7c:	bd10      	pop	{r4, pc}
    1c7e:	bf00      	nop

00001c80 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
    1c80:	b570      	push	{r4, r5, r6, lr}
    1c82:	4605      	mov	r5, r0
    1c84:	460c      	mov	r4, r1
    1c86:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
    1c88:	f641 4329 	movw	r3, #7209	; 0x1c29
    1c8c:	f2c0 0300 	movt	r3, #0
    1c90:	4798      	blx	r3

	ul_reg_val = 0;
    1c92:	f640 1038 	movw	r0, #2360	; 0x938
    1c96:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1c9a:	f04f 0100 	mov.w	r1, #0
    1c9e:	6001      	str	r1, [r0, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
    1ca0:	b1cc      	cbz	r4, 1cd6 <usart_init_rs232+0x56>
    1ca2:	4628      	mov	r0, r5
    1ca4:	6821      	ldr	r1, [r4, #0]
    1ca6:	4632      	mov	r2, r6
    1ca8:	f641 3329 	movw	r3, #6953	; 0x1b29
    1cac:	f2c0 0300 	movt	r3, #0
    1cb0:	4798      	blx	r3
    1cb2:	b998      	cbnz	r0, 1cdc <usart_init_rs232+0x5c>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
    1cb4:	68a2      	ldr	r2, [r4, #8]
    1cb6:	6861      	ldr	r1, [r4, #4]
    1cb8:	ea42 0301 	orr.w	r3, r2, r1
    1cbc:	6922      	ldr	r2, [r4, #16]
    1cbe:	4313      	orrs	r3, r2
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
    1cc0:	68e1      	ldr	r1, [r4, #12]
    1cc2:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
    1cc4:	f640 1238 	movw	r2, #2360	; 0x938
    1cc8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1ccc:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
    1cce:	6869      	ldr	r1, [r5, #4]
    1cd0:	430b      	orrs	r3, r1
    1cd2:	606b      	str	r3, [r5, #4]

	return 0;
    1cd4:	bd70      	pop	{r4, r5, r6, pc}

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
    1cd6:	f04f 0001 	mov.w	r0, #1
    1cda:	bd70      	pop	{r4, r5, r6, pc}
    1cdc:	f04f 0001 	mov.w	r0, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
    1ce0:	bd70      	pop	{r4, r5, r6, pc}
    1ce2:	bf00      	nop

00001ce4 <wdt_set_ctrl>:
 *        to the WatchDog Timer key.
 *
 * \param ctrl  Value to set the WatchDog Timer Control register to.
 */
static void wdt_set_ctrl(uint32_t ctrl)
{
    1ce4:	b082      	sub	sp, #8
	volatile uint32_t dly;

	/* Calculate delay for internal synchronization, see 44.1.2 WDT errata */
	if ((WDT->WDT_CTRL & WDT_CTRL_CSSEL) == WDT_CLK_SRC_RCSYS) {
    1ce6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    1cea:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1cee:	6819      	ldr	r1, [r3, #0]
    1cf0:	f411 3f00 	tst.w	r1, #131072	; 0x20000
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RCSYS_NOMINAL_HZ);
    1cf4:	bf0c      	ite	eq
    1cf6:	2169      	moveq	r1, #105	; 0x69
	} else { /* WDT_CLK_SRC_32K */
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RC32K_NOMINAL_HZ);
    1cf8:	f240 116f 	movwne	r1, #367	; 0x16f
    1cfc:	9101      	str	r1, [sp, #4]
	}
	dly >>= 3; /* ~8 cycles for one while loop */
    1cfe:	9a01      	ldr	r2, [sp, #4]
    1d00:	ea4f 03d2 	mov.w	r3, r2, lsr #3
    1d04:	9301      	str	r3, [sp, #4]
	while(dly--);
    1d06:	9901      	ldr	r1, [sp, #4]
    1d08:	f101 32ff 	add.w	r2, r1, #4294967295
    1d0c:	9201      	str	r2, [sp, #4]
    1d0e:	2900      	cmp	r1, #0
    1d10:	d1f9      	bne.n	1d06 <wdt_set_ctrl+0x22>
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_FIRST_KEY);
    1d12:	f040 41aa 	orr.w	r1, r0, #1426063360	; 0x55000000
    1d16:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    1d1a:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1d1e:	6019      	str	r1, [r3, #0]
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_SECOND_KEY);
    1d20:	f040 402a 	orr.w	r0, r0, #2852126720	; 0xaa000000
    1d24:	6018      	str	r0, [r3, #0]
}
    1d26:	b002      	add	sp, #8
    1d28:	4770      	bx	lr
    1d2a:	bf00      	nop

00001d2c <wdt_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(cfg);

	/* Default configuration values */
	cfg->clk_src = WDT_CLK_SRC_RCSYS;
    1d2c:	f04f 0300 	mov.w	r3, #0
    1d30:	6003      	str	r3, [r0, #0]
	cfg->wdt_mode = WDT_MODE_BASIC;
    1d32:	6043      	str	r3, [r0, #4]
	cfg->timeout_period = WDT_PERIOD_131072_CLK;
    1d34:	f04f 0210 	mov.w	r2, #16
    1d38:	7202      	strb	r2, [r0, #8]
	cfg->window_period = WDT_PERIOD_NONE;
    1d3a:	7243      	strb	r3, [r0, #9]
	cfg->disable_flash_cali = true;
    1d3c:	f04f 0101 	mov.w	r1, #1
    1d40:	7281      	strb	r1, [r0, #10]
	cfg->disable_wdt_after_reset = true;
    1d42:	72c1      	strb	r1, [r0, #11]
	cfg->always_on = false;
    1d44:	7303      	strb	r3, [r0, #12]
    1d46:	4770      	bx	lr

00001d48 <wdt_init>:
 */
bool wdt_init(
		struct wdt_dev_inst *const dev_inst,
		Wdt *const wdt,
		struct wdt_config *const cfg)
{
    1d48:	b538      	push	{r3, r4, r5, lr}
    1d4a:	460c      	mov	r4, r1
    1d4c:	4615      	mov	r5, r2
	/* Sanity check arguments */
	Assert(dev_inst);
	Assert(wdt);
	Assert(cfg);

	dev_inst->hw_dev = wdt;
    1d4e:	6001      	str	r1, [r0, #0]
	dev_inst->wdt_cfg = cfg;
    1d50:	6042      	str	r2, [r0, #4]

	/* Enable APB clock for WDT */
	sysclk_enable_peripheral_clock(wdt);
    1d52:	4608      	mov	r0, r1
    1d54:	f240 73cd 	movw	r3, #1997	; 0x7cd
    1d58:	f2c0 0300 	movt	r3, #0
    1d5c:	4798      	blx	r3

	/* Check SFV bit: if SFV bit is set, Control Register is locked */
	if (wdt->WDT_CTRL & WDT_CTRL_SFV) {
    1d5e:	6820      	ldr	r0, [r4, #0]
    1d60:	f010 0f08 	tst.w	r0, #8
    1d64:	d152      	bne.n	1e0c <wdt_init+0xc4>
		return false;
	}

	/* Disable the WDT */
	if (wdt->WDT_CTRL & WDT_CTRL_EN) {
    1d66:	6821      	ldr	r1, [r4, #0]
    1d68:	f011 0f01 	tst.w	r1, #1
    1d6c:	d00b      	beq.n	1d86 <wdt_init+0x3e>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    1d6e:	6822      	ldr	r2, [r4, #0]
    1d70:	f022 0001 	bic.w	r0, r2, #1
    1d74:	f641 43e5 	movw	r3, #7397	; 0x1ce5
    1d78:	f2c0 0300 	movt	r3, #0
    1d7c:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    1d7e:	6820      	ldr	r0, [r4, #0]
    1d80:	f010 0f01 	tst.w	r0, #1
    1d84:	d1fb      	bne.n	1d7e <wdt_init+0x36>
		}
	}
	/* Disable the WDT clock */
	if (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    1d86:	6821      	ldr	r1, [r4, #0]
    1d88:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    1d8c:	d00b      	beq.n	1da6 <wdt_init+0x5e>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_CEN);
    1d8e:	6822      	ldr	r2, [r4, #0]
    1d90:	f422 3080 	bic.w	r0, r2, #65536	; 0x10000
    1d94:	f641 43e5 	movw	r3, #7397	; 0x1ce5
    1d98:	f2c0 0300 	movt	r3, #0
    1d9c:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    1d9e:	6820      	ldr	r0, [r4, #0]
    1da0:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    1da4:	d1fb      	bne.n	1d9e <wdt_init+0x56>
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
    1da6:	6869      	ldr	r1, [r5, #4]
    1da8:	682a      	ldr	r2, [r5, #0]
    1daa:	ea41 0302 	orr.w	r3, r1, r2
			cfg->wdt_mode |
			WDT_CTRL_PSEL(cfg->timeout_period) |
    1dae:	7a28      	ldrb	r0, [r5, #8]
    1db0:	ea4f 2100 	mov.w	r1, r0, lsl #8
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
			cfg->wdt_mode |
    1db4:	f401 52f8 	and.w	r2, r1, #7936	; 0x1f00
    1db8:	ea43 0002 	orr.w	r0, r3, r2
			WDT_CTRL_PSEL(cfg->timeout_period) |
			WDT_CTRL_TBAN(cfg->window_period) |
    1dbc:	7a6b      	ldrb	r3, [r5, #9]
    1dbe:	ea4f 4183 	mov.w	r1, r3, lsl #18
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
			cfg->wdt_mode |
			WDT_CTRL_PSEL(cfg->timeout_period) |
    1dc2:	f401 02f8 	and.w	r2, r1, #8126464	; 0x7c0000
    1dc6:	4310      	orrs	r0, r2
			WDT_CTRL_TBAN(cfg->window_period) |
    1dc8:	7aab      	ldrb	r3, [r5, #10]
    1dca:	2b00      	cmp	r3, #0
    1dcc:	bf14      	ite	ne
    1dce:	2180      	movne	r1, #128	; 0x80
    1dd0:	2100      	moveq	r1, #0
    1dd2:	4308      	orrs	r0, r1
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
    1dd4:	7aed      	ldrb	r5, [r5, #11]
    1dd6:	2d00      	cmp	r5, #0
    1dd8:	bf14      	ite	ne
    1dda:	2202      	movne	r2, #2
    1ddc:	2200      	moveq	r2, #0
    1dde:	4310      	orrs	r0, r2
    1de0:	f641 45e5 	movw	r5, #7397	; 0x1ce5
    1de4:	f2c0 0500 	movt	r5, #0
    1de8:	47a8      	blx	r5
			WDT_CTRL_PSEL(cfg->timeout_period) |
			WDT_CTRL_TBAN(cfg->window_period) |
			(cfg->disable_flash_cali ? WDT_CTRL_FCD : 0) |
			(cfg->disable_wdt_after_reset ? WDT_CTRL_DAR : 0)
	);
	wdt_set_ctrl(wdt->WDT_CTRL | WDT_CTRL_CEN);
    1dea:	6820      	ldr	r0, [r4, #0]
    1dec:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
    1df0:	47a8      	blx	r5
	while (!(wdt->WDT_CTRL & WDT_CTRL_CEN)) {
    1df2:	6823      	ldr	r3, [r4, #0]
    1df4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1df8:	d0fb      	beq.n	1df2 <wdt_init+0xaa>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    1dfa:	4620      	mov	r0, r4
    1dfc:	f640 61ad 	movw	r1, #3757	; 0xead
    1e00:	f2c0 0100 	movt	r1, #0
    1e04:	4788      	blx	r1

	return true;
    1e06:	f04f 0001 	mov.w	r0, #1
    1e0a:	bd38      	pop	{r3, r4, r5, pc}
	/* Enable APB clock for WDT */
	sysclk_enable_peripheral_clock(wdt);

	/* Check SFV bit: if SFV bit is set, Control Register is locked */
	if (wdt->WDT_CTRL & WDT_CTRL_SFV) {
		return false;
    1e0c:	f04f 0000 	mov.w	r0, #0

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);

	return true;
}
    1e10:	bd38      	pop	{r3, r4, r5, pc}
    1e12:	bf00      	nop

00001e14 <wdt_disable>:
 * \brief Disable the WDT module.
 *
 * \param dev_inst    Device structure pointer.
 */
void wdt_disable(struct wdt_dev_inst *const dev_inst)
{
    1e14:	b510      	push	{r4, lr}
	Wdt *wdt = dev_inst->hw_dev;
    1e16:	6804      	ldr	r4, [r0, #0]

	/* Disable the WDT */
	wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    1e18:	6820      	ldr	r0, [r4, #0]
    1e1a:	f020 0001 	bic.w	r0, r0, #1
    1e1e:	f641 43e5 	movw	r3, #7397	; 0x1ce5
    1e22:	f2c0 0300 	movt	r3, #0
    1e26:	4798      	blx	r3
	while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    1e28:	6821      	ldr	r1, [r4, #0]
    1e2a:	f011 0f01 	tst.w	r1, #1
    1e2e:	d1fb      	bne.n	1e28 <wdt_disable+0x14>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    1e30:	4620      	mov	r0, r4
    1e32:	f640 62ad 	movw	r2, #3757	; 0xead
    1e36:	f2c0 0200 	movt	r2, #0
    1e3a:	4790      	blx	r2
    1e3c:	bd10      	pop	{r4, pc}
    1e3e:	bf00      	nop

00001e40 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1e40:	e7fe      	b.n	1e40 <Dummy_Handler>
    1e42:	bf00      	nop

00001e44 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1e44:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
    1e46:	f240 0300 	movw	r3, #0
    1e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1e4e:	f246 32bc 	movw	r2, #25532	; 0x63bc
    1e52:	f2c0 0200 	movt	r2, #0
    1e56:	429a      	cmp	r2, r3
    1e58:	d003      	beq.n	1e62 <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
    1e5a:	4839      	ldr	r0, [pc, #228]	; (1f40 <Reset_Handler+0xfc>)
    1e5c:	4939      	ldr	r1, [pc, #228]	; (1f44 <Reset_Handler+0x100>)
    1e5e:	4281      	cmp	r1, r0
    1e60:	d304      	bcc.n	1e6c <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    1e62:	4b39      	ldr	r3, [pc, #228]	; (1f48 <Reset_Handler+0x104>)
    1e64:	4a39      	ldr	r2, [pc, #228]	; (1f4c <Reset_Handler+0x108>)
    1e66:	429a      	cmp	r2, r3
    1e68:	d325      	bcc.n	1eb6 <Reset_Handler+0x72>
    1e6a:	e042      	b.n	1ef2 <Reset_Handler+0xae>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
    1e6c:	4d38      	ldr	r5, [pc, #224]	; (1f50 <Reset_Handler+0x10c>)
    1e6e:	4c39      	ldr	r4, [pc, #228]	; (1f54 <Reset_Handler+0x110>)
    1e70:	1b63      	subs	r3, r4, r5
    1e72:	f023 0503 	bic.w	r5, r3, #3
    1e76:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
    1e7a:	f240 0200 	movw	r2, #0
    1e7e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1e82:	f246 31bc 	movw	r1, #25532	; 0x63bc
    1e86:	f2c0 0100 	movt	r1, #0
    1e8a:	f105 0004 	add.w	r0, r5, #4
    1e8e:	f3c5 0480 	ubfx	r4, r5, #2, #1
    1e92:	585d      	ldr	r5, [r3, r1]
    1e94:	509d      	str	r5, [r3, r2]
    1e96:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    1e9a:	4283      	cmp	r3, r0
    1e9c:	d146      	bne.n	1f2c <Reset_Handler+0xe8>
    1e9e:	e7e0      	b.n	1e62 <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
    1ea0:	585d      	ldr	r5, [r3, r1]
    1ea2:	509d      	str	r5, [r3, r2]
    1ea4:	f103 0304 	add.w	r3, r3, #4
    1ea8:	585c      	ldr	r4, [r3, r1]
    1eaa:	509c      	str	r4, [r3, r2]
    1eac:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    1eb0:	4283      	cmp	r3, r0
    1eb2:	d1f5      	bne.n	1ea0 <Reset_Handler+0x5c>
    1eb4:	e7d5      	b.n	1e62 <Reset_Handler+0x1e>
    1eb6:	4d28      	ldr	r5, [pc, #160]	; (1f58 <Reset_Handler+0x114>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
    1eb8:	4928      	ldr	r1, [pc, #160]	; (1f5c <Reset_Handler+0x118>)
    1eba:	1b48      	subs	r0, r1, r5
    1ebc:	f020 0403 	bic.w	r4, r0, #3
    1ec0:	f640 1318 	movw	r3, #2328	; 0x918
    1ec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1ec8:	18e2      	adds	r2, r4, r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
    1eca:	f04f 0100 	mov.w	r1, #0
    1ece:	1b50      	subs	r0, r2, r5
    1ed0:	f1a0 0004 	sub.w	r0, r0, #4
    1ed4:	f3c0 0480 	ubfx	r4, r0, #2, #1
    1ed8:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    1edc:	4295      	cmp	r5, r2
    1ede:	d11e      	bne.n	1f1e <Reset_Handler+0xda>
    1ee0:	e007      	b.n	1ef2 <Reset_Handler+0xae>
    1ee2:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
    1ee6:	6069      	str	r1, [r5, #4]
    1ee8:	f105 0508 	add.w	r5, r5, #8
    1eec:	6059      	str	r1, [r3, #4]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    1eee:	4295      	cmp	r5, r2
    1ef0:	d1f7      	bne.n	1ee2 <Reset_Handler+0x9e>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) &_sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1ef2:	f240 0500 	movw	r5, #0
    1ef6:	f2c0 0500 	movt	r5, #0
    1efa:	f025 027f 	bic.w	r2, r5, #127	; 0x7f
    1efe:	f44f 416d 	mov.w	r1, #60672	; 0xed00
    1f02:	f2ce 0100 	movt	r1, #57344	; 0xe000
    1f06:	608a      	str	r2, [r1, #8]

	/* Initialize the C library */
	__libc_init_array();
    1f08:	f242 60f1 	movw	r0, #9969	; 0x26f1
    1f0c:	f2c0 0000 	movt	r0, #0
    1f10:	4780      	blx	r0

	/* Branch to main function */
	main();
    1f12:	f242 24e9 	movw	r4, #8937	; 0x22e9
    1f16:	f2c0 0400 	movt	r4, #0
    1f1a:	47a0      	blx	r4
    1f1c:	e7fe      	b.n	1f1c <Reset_Handler+0xd8>
    1f1e:	2c00      	cmp	r4, #0
    1f20:	d0df      	beq.n	1ee2 <Reset_Handler+0x9e>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
    1f22:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    1f26:	4295      	cmp	r5, r2
    1f28:	d1db      	bne.n	1ee2 <Reset_Handler+0x9e>
    1f2a:	e7e2      	b.n	1ef2 <Reset_Handler+0xae>
    1f2c:	2c00      	cmp	r4, #0
    1f2e:	d0b7      	beq.n	1ea0 <Reset_Handler+0x5c>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
    1f30:	585c      	ldr	r4, [r3, r1]
    1f32:	509c      	str	r4, [r3, r2]
    1f34:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    1f38:	4283      	cmp	r3, r0
    1f3a:	d1b1      	bne.n	1ea0 <Reset_Handler+0x5c>
    1f3c:	e791      	b.n	1e62 <Reset_Handler+0x1e>
    1f3e:	bf00      	nop
    1f40:	20000918 	.word	0x20000918
    1f44:	20000000 	.word	0x20000000
    1f48:	20000988 	.word	0x20000988
    1f4c:	20000918 	.word	0x20000918
    1f50:	20000004 	.word	0x20000004
    1f54:	2000091b 	.word	0x2000091b
    1f58:	20000914 	.word	0x20000914
    1f5c:	20000983 	.word	0x20000983

00001f60 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1f60:	f640 133c 	movw	r3, #2364	; 0x93c
    1f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1f68:	6819      	ldr	r1, [r3, #0]
    1f6a:	b941      	cbnz	r1, 1f7e <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
    1f6c:	f640 133c 	movw	r3, #2364	; 0x93c
    1f70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1f74:	f641 1288 	movw	r2, #6536	; 0x1988
    1f78:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1f7c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    1f7e:	f640 113c 	movw	r1, #2364	; 0x93c
    1f82:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1f86:	680b      	ldr	r3, [r1, #0]

	heap += incr;
    1f88:	1818      	adds	r0, r3, r0
    1f8a:	6008      	str	r0, [r1, #0]

	return (caddr_t) prev_heap;
}
    1f8c:	4618      	mov	r0, r3
    1f8e:	4770      	bx	lr

00001f90 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1f90:	f04f 30ff 	mov.w	r0, #4294967295
    1f94:	4770      	bx	lr
    1f96:	bf00      	nop

00001f98 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1f98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    1f9c:	604b      	str	r3, [r1, #4]

	return 0;
}
    1f9e:	f04f 0000 	mov.w	r0, #0
    1fa2:	4770      	bx	lr

00001fa4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1fa4:	f04f 0001 	mov.w	r0, #1
    1fa8:	4770      	bx	lr
    1faa:	bf00      	nop

00001fac <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1fac:	f04f 0000 	mov.w	r0, #0
    1fb0:	4770      	bx	lr
    1fb2:	bf00      	nop

00001fb4 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
    1fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fb6:	b083      	sub	sp, #12
    1fb8:	4604      	mov	r4, r0
    1fba:	460d      	mov	r5, r1
	uint32_t val = 0;
    1fbc:	f04f 0300 	mov.w	r3, #0
    1fc0:	9301      	str	r3, [sp, #4]
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
    1fc2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1fc6:	f2c4 0002 	movt	r0, #16386	; 0x4002
    1fca:	4284      	cmp	r4, r0
    1fcc:	d10f      	bne.n	1fee <usart_serial_getchar+0x3a>
		while (usart_read(p_usart, &val));
    1fce:	f44f 4680 	mov.w	r6, #16384	; 0x4000
    1fd2:	f2c4 0602 	movt	r6, #16386	; 0x4002
    1fd6:	f641 37f9 	movw	r7, #7161	; 0x1bf9
    1fda:	f2c0 0700 	movt	r7, #0
    1fde:	4630      	mov	r0, r6
    1fe0:	a901      	add	r1, sp, #4
    1fe2:	47b8      	blx	r7
    1fe4:	2800      	cmp	r0, #0
    1fe6:	d1fa      	bne.n	1fde <usart_serial_getchar+0x2a>
		*data = (uint8_t)(val & 0xFF);
    1fe8:	9901      	ldr	r1, [sp, #4]
    1fea:	7029      	strb	r1, [r5, #0]
    1fec:	e02b      	b.n	2046 <usart_serial_getchar+0x92>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
    1fee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1ff2:	f2c4 0102 	movt	r1, #16386	; 0x4002
    1ff6:	428c      	cmp	r4, r1
    1ff8:	d10f      	bne.n	201a <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
    1ffa:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    1ffe:	f2c4 0402 	movt	r4, #16386	; 0x4002
    2002:	f641 36f9 	movw	r6, #7161	; 0x1bf9
    2006:	f2c0 0600 	movt	r6, #0
    200a:	4620      	mov	r0, r4
    200c:	a901      	add	r1, sp, #4
    200e:	47b0      	blx	r6
    2010:	2800      	cmp	r0, #0
    2012:	d1fa      	bne.n	200a <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
    2014:	9801      	ldr	r0, [sp, #4]
    2016:	7028      	strb	r0, [r5, #0]
    2018:	e02a      	b.n	2070 <usart_serial_getchar+0xbc>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
    201a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    201e:	f2c4 0202 	movt	r2, #16386	; 0x4002
    2022:	4294      	cmp	r4, r2
    2024:	d10f      	bne.n	2046 <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
    2026:	f44f 4440 	mov.w	r4, #49152	; 0xc000
    202a:	f2c4 0402 	movt	r4, #16386	; 0x4002
    202e:	f641 36f9 	movw	r6, #7161	; 0x1bf9
    2032:	f2c0 0600 	movt	r6, #0
    2036:	4620      	mov	r0, r4
    2038:	a901      	add	r1, sp, #4
    203a:	47b0      	blx	r6
    203c:	2800      	cmp	r0, #0
    203e:	d1fa      	bne.n	2036 <usart_serial_getchar+0x82>
		*data = (uint8_t)(val & 0xFF);
    2040:	9b01      	ldr	r3, [sp, #4]
    2042:	702b      	strb	r3, [r5, #0]
    2044:	e014      	b.n	2070 <usart_serial_getchar+0xbc>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
    2046:	f04f 0200 	mov.w	r2, #0
    204a:	f2c4 0203 	movt	r2, #16387	; 0x4003
    204e:	4294      	cmp	r4, r2
    2050:	d10e      	bne.n	2070 <usart_serial_getchar+0xbc>
		while (usart_read(p_usart, &val));
    2052:	f04f 0400 	mov.w	r4, #0
    2056:	f2c4 0403 	movt	r4, #16387	; 0x4003
    205a:	f641 36f9 	movw	r6, #7161	; 0x1bf9
    205e:	f2c0 0600 	movt	r6, #0
    2062:	4620      	mov	r0, r4
    2064:	a901      	add	r1, sp, #4
    2066:	47b0      	blx	r6
    2068:	2800      	cmp	r0, #0
    206a:	d1fa      	bne.n	2062 <usart_serial_getchar+0xae>
		*data = (uint8_t)(val & 0xFF);
    206c:	9b01      	ldr	r3, [sp, #4]
    206e:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
    2070:	b003      	add	sp, #12
    2072:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002074 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
    2074:	b570      	push	{r4, r5, r6, lr}
    2076:	460c      	mov	r4, r1
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
    2078:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    207c:	f2c4 0302 	movt	r3, #16386	; 0x4002
    2080:	4298      	cmp	r0, r3
    2082:	d10f      	bne.n	20a4 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
    2084:	f44f 4580 	mov.w	r5, #16384	; 0x4000
    2088:	f2c4 0502 	movt	r5, #16386	; 0x4002
    208c:	f641 36d9 	movw	r6, #7129	; 0x1bd9
    2090:	f2c0 0600 	movt	r6, #0
    2094:	4628      	mov	r0, r5
    2096:	4621      	mov	r1, r4
    2098:	47b0      	blx	r6
    209a:	2800      	cmp	r0, #0
    209c:	d1fa      	bne.n	2094 <usart_serial_putchar+0x20>
		return 1;
    209e:	f04f 0001 	mov.w	r0, #1
    20a2:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
    20a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    20a8:	f2c4 0102 	movt	r1, #16386	; 0x4002
    20ac:	4288      	cmp	r0, r1
    20ae:	d10f      	bne.n	20d0 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
    20b0:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    20b4:	f2c4 0502 	movt	r5, #16386	; 0x4002
    20b8:	f641 36d9 	movw	r6, #7129	; 0x1bd9
    20bc:	f2c0 0600 	movt	r6, #0
    20c0:	4628      	mov	r0, r5
    20c2:	4621      	mov	r1, r4
    20c4:	47b0      	blx	r6
    20c6:	2800      	cmp	r0, #0
    20c8:	d1fa      	bne.n	20c0 <usart_serial_putchar+0x4c>
		return 1;
    20ca:	f04f 0001 	mov.w	r0, #1
    20ce:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
    20d0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    20d4:	f2c4 0202 	movt	r2, #16386	; 0x4002
    20d8:	4290      	cmp	r0, r2
    20da:	d10f      	bne.n	20fc <usart_serial_putchar+0x88>
		while (usart_write(p_usart, c)!=0);
    20dc:	f44f 4540 	mov.w	r5, #49152	; 0xc000
    20e0:	f2c4 0502 	movt	r5, #16386	; 0x4002
    20e4:	f641 36d9 	movw	r6, #7129	; 0x1bd9
    20e8:	f2c0 0600 	movt	r6, #0
    20ec:	4628      	mov	r0, r5
    20ee:	4621      	mov	r1, r4
    20f0:	47b0      	blx	r6
    20f2:	2800      	cmp	r0, #0
    20f4:	d1fa      	bne.n	20ec <usart_serial_putchar+0x78>
		return 1;
    20f6:	f04f 0001 	mov.w	r0, #1
    20fa:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
    20fc:	f04f 0300 	mov.w	r3, #0
    2100:	f2c4 0303 	movt	r3, #16387	; 0x4003
    2104:	4298      	cmp	r0, r3
    2106:	d10f      	bne.n	2128 <usart_serial_putchar+0xb4>
		while (usart_write(p_usart, c)!=0);
    2108:	f04f 0500 	mov.w	r5, #0
    210c:	f2c4 0503 	movt	r5, #16387	; 0x4003
    2110:	f641 36d9 	movw	r6, #7129	; 0x1bd9
    2114:	f2c0 0600 	movt	r6, #0
    2118:	4628      	mov	r0, r5
    211a:	4621      	mov	r1, r4
    211c:	47b0      	blx	r6
    211e:	2800      	cmp	r0, #0
    2120:	d1fa      	bne.n	2118 <usart_serial_putchar+0xa4>
		return 1;
    2122:	f04f 0001 	mov.w	r0, #1
    2126:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
    2128:	f04f 0000 	mov.w	r0, #0
}
    212c:	bd70      	pop	{r4, r5, r6, pc}
    212e:	bf00      	nop

00002130 <display_menu>:

/**
 * \brief Display the user menu on the UART.
 */
static void display_menu(void)
{
    2130:	b538      	push	{r3, r4, r5, lr}
	uint8_t i;
	puts("\n\rMenu :\n\r"
    2132:	f246 0010 	movw	r0, #24592	; 0x6010
    2136:	f2c0 0000 	movt	r0, #0
    213a:	f242 73f1 	movw	r3, #10225	; 0x27f1
    213e:	f2c0 0300 	movt	r3, #0
    2142:	4798      	blx	r3
			"------\n\r"
			"  Output waveform property:\r");
	for (i = 0; i < gc_uc_nbconfig; i++) {
		printf("  %d: Set Frequency = %4u Hz, Duty Cycle = %2u%%\n\r", i,
    2144:	f246 0540 	movw	r5, #24640	; 0x6040
    2148:	f2c0 0500 	movt	r5, #0
    214c:	4628      	mov	r0, r5
    214e:	f04f 0100 	mov.w	r1, #0
    2152:	f44f 72af 	mov.w	r2, #350	; 0x15e
    2156:	460b      	mov	r3, r1
    2158:	f242 743d 	movw	r4, #10045	; 0x273d
    215c:	f2c0 0400 	movt	r4, #0
    2160:	47a0      	blx	r4
    2162:	4628      	mov	r0, r5
    2164:	f04f 0101 	mov.w	r1, #1
    2168:	f44f 72af 	mov.w	r2, #350	; 0x15e
    216c:	f04f 0314 	mov.w	r3, #20
    2170:	47a0      	blx	r4
    2172:	4628      	mov	r0, r5
    2174:	f04f 0102 	mov.w	r1, #2
    2178:	f44f 72af 	mov.w	r2, #350	; 0x15e
    217c:	f04f 031e 	mov.w	r3, #30
    2180:	47a0      	blx	r4
    2182:	4628      	mov	r0, r5
    2184:	f04f 0103 	mov.w	r1, #3
    2188:	f44f 72af 	mov.w	r2, #350	; 0x15e
    218c:	f04f 0328 	mov.w	r3, #40	; 0x28
    2190:	47a0      	blx	r4
    2192:	4628      	mov	r0, r5
    2194:	f04f 0104 	mov.w	r1, #4
    2198:	f44f 72af 	mov.w	r2, #350	; 0x15e
    219c:	f04f 0332 	mov.w	r3, #50	; 0x32
    21a0:	47a0      	blx	r4
    21a2:	4628      	mov	r0, r5
    21a4:	f04f 0105 	mov.w	r1, #5
    21a8:	f44f 72af 	mov.w	r2, #350	; 0x15e
    21ac:	f04f 033c 	mov.w	r3, #60	; 0x3c
    21b0:	47a0      	blx	r4
    21b2:	4628      	mov	r0, r5
    21b4:	f04f 0106 	mov.w	r1, #6
    21b8:	f44f 72af 	mov.w	r2, #350	; 0x15e
    21bc:	f04f 0346 	mov.w	r3, #70	; 0x46
    21c0:	47a0      	blx	r4
    21c2:	4628      	mov	r0, r5
    21c4:	f04f 0107 	mov.w	r1, #7
    21c8:	f44f 72af 	mov.w	r2, #350	; 0x15e
    21cc:	f04f 0350 	mov.w	r3, #80	; 0x50
    21d0:	47a0      	blx	r4
    21d2:	4628      	mov	r0, r5
    21d4:	f04f 0108 	mov.w	r1, #8
    21d8:	f44f 72af 	mov.w	r2, #350	; 0x15e
    21dc:	f04f 035a 	mov.w	r3, #90	; 0x5a
    21e0:	47a0      	blx	r4
				(unsigned int)gc_waveconfig[i].us_frequency,
				(unsigned int)gc_waveconfig[i].us_dutycycle);
	}
	printf("  -------------------------------------------\n\r"
    21e2:	f246 0074 	movw	r0, #24692	; 0x6074
    21e6:	f2c0 0000 	movt	r0, #0
    21ea:	47a0      	blx	r4
    21ec:	bd38      	pop	{r3, r4, r5, pc}
    21ee:	bf00      	nop

000021f0 <servo_move_xaxis>:
	
}
#define CLOCK_DIV	2

void servo_move_xaxis(uint32_t dutycycle)
{
    21f0:	b570      	push	{r4, r5, r6, lr}
    21f2:	4605      	mov	r5, r0
	uint32_t ra, rc;
	/* Configure waveform frequency and duty cycle. */
	rc = (sysclk_get_peripheral_bus_hz(TC) /
    21f4:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    21f8:	f2c4 0401 	movt	r4, #16385	; 0x4001
    21fc:	4620      	mov	r0, r4
    21fe:	f240 43d1 	movw	r3, #1233	; 0x4d1
    2202:	f2c0 0300 	movt	r3, #0
    2206:	4798      	blx	r3
    2208:	f247 3191 	movw	r1, #29585	; 0x7391
    220c:	f6c5 519f 	movt	r1, #23967	; 0x5d9f
    2210:	fba1 1600 	umull	r1, r6, r1, r0
    2214:	ea4f 2616 	mov.w	r6, r6, lsr #8
			CLOCK_DIV /
			SERVO_FREQ);
	tc_write_rc(TC, TC_CHANNEL_WAVEFORM, rc);
    2218:	4620      	mov	r0, r4
    221a:	f04f 0102 	mov.w	r1, #2
    221e:	4632      	mov	r2, r6
    2220:	f641 3321 	movw	r3, #6945	; 0x1b21
    2224:	f2c0 0300 	movt	r3, #0
    2228:	4798      	blx	r3
	ra = (100 - dutycycle) * rc / 100;
    222a:	f1c5 0064 	rsb	r0, r5, #100	; 0x64
    222e:	fb00 f606 	mul.w	r6, r0, r6
    2232:	f248 521f 	movw	r2, #34079	; 0x851f
    2236:	f2c5 12eb 	movt	r2, #20971	; 0x51eb
    223a:	fba2 1306 	umull	r1, r3, r2, r6
	tc_write_ra(TC, TC_CHANNEL_WAVEFORM, ra);
    223e:	4620      	mov	r0, r4
    2240:	f04f 0102 	mov.w	r1, #2
    2244:	ea4f 1253 	mov.w	r2, r3, lsr #5
    2248:	f641 3319 	movw	r3, #6937	; 0x1b19
    224c:	f2c0 0300 	movt	r3, #0
    2250:	4798      	blx	r3

	/* Enable TC TC_CHANNEL_WAVEFORM. */
	
	printf("Start waveform: Frequency = %d Hz,Duty Cycle = %2d%%\n\r",
    2252:	f246 101c 	movw	r0, #24860	; 0x611c
    2256:	f2c0 0000 	movt	r0, #0
    225a:	f44f 71af 	mov.w	r1, #350	; 0x15e
    225e:	462a      	mov	r2, r5
    2260:	f242 733d 	movw	r3, #10045	; 0x273d
    2264:	f2c0 0300 	movt	r3, #0
    2268:	4798      	blx	r3
    226a:	bd70      	pop	{r4, r5, r6, pc}

0000226c <servo_move_yaxis>:
			SERVO_FREQ,
			dutycycle);
}

void servo_move_yaxis(uint32_t dutycycle)
{
    226c:	b570      	push	{r4, r5, r6, lr}
    226e:	4605      	mov	r5, r0
	uint32_t ra1, rc1;
	/* Configure waveform frequency and duty cycle. */
	rc1 = (sysclk_get_peripheral_bus_hz(TC) /
    2270:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    2274:	f2c4 0401 	movt	r4, #16385	; 0x4001
    2278:	4620      	mov	r0, r4
    227a:	f240 43d1 	movw	r3, #1233	; 0x4d1
    227e:	f2c0 0300 	movt	r3, #0
    2282:	4798      	blx	r3
    2284:	f247 3191 	movw	r1, #29585	; 0x7391
    2288:	f6c5 519f 	movt	r1, #23967	; 0x5d9f
    228c:	fba1 1600 	umull	r1, r6, r1, r0
    2290:	ea4f 2616 	mov.w	r6, r6, lsr #8
	CLOCK_DIV /
	SERVO_FREQ);
	tc_write_rc(TC, TC_CHANNEL_WAVEFORMYAXIS, rc1);
    2294:	4620      	mov	r0, r4
    2296:	f04f 0101 	mov.w	r1, #1
    229a:	4632      	mov	r2, r6
    229c:	f641 3321 	movw	r3, #6945	; 0x1b21
    22a0:	f2c0 0300 	movt	r3, #0
    22a4:	4798      	blx	r3
	ra1 = (100 - dutycycle) * rc1 / 100;
    22a6:	f1c5 0064 	rsb	r0, r5, #100	; 0x64
    22aa:	fb00 f606 	mul.w	r6, r0, r6
    22ae:	f248 521f 	movw	r2, #34079	; 0x851f
    22b2:	f2c5 12eb 	movt	r2, #20971	; 0x51eb
    22b6:	fba2 1306 	umull	r1, r3, r2, r6
	tc_write_ra(TC, TC_CHANNEL_WAVEFORMYAXIS, ra1);
    22ba:	4620      	mov	r0, r4
    22bc:	f04f 0101 	mov.w	r1, #1
    22c0:	ea4f 1253 	mov.w	r2, r3, lsr #5
    22c4:	f641 3319 	movw	r3, #6937	; 0x1b19
    22c8:	f2c0 0300 	movt	r3, #0
    22cc:	4798      	blx	r3

	/* Enable TC TC_CHANNEL_WAVEFORM. */
	
	printf("Start waveform: Frequency = %d Hz,Duty Cycle = %2d%%\n\r",
    22ce:	f246 101c 	movw	r0, #24860	; 0x611c
    22d2:	f2c0 0000 	movt	r0, #0
    22d6:	f44f 71af 	mov.w	r1, #350	; 0x15e
    22da:	462a      	mov	r2, r5
    22dc:	f242 733d 	movw	r3, #10045	; 0x273d
    22e0:	f2c0 0300 	movt	r3, #0
    22e4:	4798      	blx	r3
    22e6:	bd70      	pop	{r4, r5, r6, pc}

000022e8 <main>:
 * \brief Application entry point for tc_capture_waveform example.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
    22e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    22ec:	b088      	sub	sp, #32
	uint8_t key;
	uint16_t frequence, dutycycle1,dutycycle2;
   
	/* Initialize the SAM system */
	sysclk_init();
    22ee:	f241 6325 	movw	r3, #5669	; 0x1625
    22f2:	f2c0 0300 	movt	r3, #0
    22f6:	4798      	blx	r3
	board_init();
    22f8:	f641 0035 	movw	r0, #6197	; 0x1835
    22fc:	f2c0 0000 	movt	r0, #0
    2300:	4780      	blx	r0
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    2302:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    2306:	f2c4 0402 	movt	r4, #16386	; 0x4002
    230a:	f640 1180 	movw	r1, #2432	; 0x980
    230e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2312:	600c      	str	r4, [r1, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2314:	f640 157c 	movw	r5, #2428	; 0x97c
    2318:	f2c2 0500 	movt	r5, #8192	; 0x2000
    231c:	f242 0275 	movw	r2, #8309	; 0x2075
    2320:	f2c0 0200 	movt	r2, #0
    2324:	602a      	str	r2, [r5, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    2326:	f640 1678 	movw	r6, #2424	; 0x978
    232a:	f2c2 0600 	movt	r6, #8192	; 0x2000
    232e:	f641 77b5 	movw	r7, #8117	; 0x1fb5
    2332:	f2c0 0700 	movt	r7, #0
    2336:	6037      	str	r7, [r6, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
    2338:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
    233c:	9301      	str	r3, [sp, #4]
	usart_settings.char_length = opt->charlength;
    233e:	f04f 00c0 	mov.w	r0, #192	; 0xc0
    2342:	9002      	str	r0, [sp, #8]
	usart_settings.parity_type = opt->paritytype;
    2344:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2348:	9103      	str	r1, [sp, #12]
	usart_settings.stop_bits= opt->stopbits;
    234a:	f04f 0500 	mov.w	r5, #0
    234e:	9504      	str	r5, [sp, #16]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
    2350:	9505      	str	r5, [sp, #20]
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_hz());
#endif
#if (SAM4L)
		sysclk_enable_peripheral_clock(p_usart);
    2352:	4620      	mov	r0, r4
    2354:	f240 76cd 	movw	r6, #1997	; 0x7cd
    2358:	f2c0 0600 	movt	r6, #0
    235c:	47b0      	blx	r6
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
    235e:	4620      	mov	r0, r4
    2360:	f240 42d1 	movw	r2, #1233	; 0x4d1
    2364:	f2c0 0200 	movt	r2, #0
    2368:	4790      	blx	r2
    236a:	4602      	mov	r2, r0
    236c:	4620      	mov	r0, r4
    236e:	a901      	add	r1, sp, #4
    2370:	f641 4781 	movw	r7, #7297	; 0x1c81
    2374:	f2c0 0700 	movt	r7, #0
    2378:	47b8      	blx	r7
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
    237a:	4620      	mov	r0, r4
    237c:	f641 33a1 	movw	r3, #7073	; 0x1ba1
    2380:	f2c0 0300 	movt	r3, #0
    2384:	4798      	blx	r3
		usart_enable_rx(p_usart);
    2386:	4620      	mov	r0, r4
    2388:	f641 34b1 	movw	r4, #7089	; 0x1bb1
    238c:	f2c0 0400 	movt	r4, #0
    2390:	47a0      	blx	r4
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    2392:	f240 0750 	movw	r7, #80	; 0x50
    2396:	f2c2 0700 	movt	r7, #8192	; 0x2000
    239a:	6838      	ldr	r0, [r7, #0]
    239c:	6880      	ldr	r0, [r0, #8]
    239e:	4629      	mov	r1, r5
    23a0:	f642 0441 	movw	r4, #10305	; 0x2841
    23a4:	f2c0 0400 	movt	r4, #0
    23a8:	47a0      	blx	r4
	setbuf(stdin, NULL);
    23aa:	6839      	ldr	r1, [r7, #0]
    23ac:	6848      	ldr	r0, [r1, #4]
    23ae:	4629      	mov	r1, r5
    23b0:	47a0      	blx	r4

	/* Initialize the console uart */
	configure_console();

	/* Output example information */
	printf("-- TC capture waveform Example --\r\n");
    23b2:	f246 1054 	movw	r0, #24916	; 0x6154
    23b6:	f2c0 0000 	movt	r0, #0
    23ba:	f242 753d 	movw	r5, #10045	; 0x273d
    23be:	f2c0 0500 	movt	r5, #0
    23c2:	47a8      	blx	r5
	printf("-- %s\n\r", BOARD_NAME);
    23c4:	f246 1078 	movw	r0, #24952	; 0x6178
    23c8:	f2c0 0000 	movt	r0, #0
    23cc:	f246 1180 	movw	r1, #24960	; 0x6180
    23d0:	f2c0 0100 	movt	r1, #0
    23d4:	47a8      	blx	r5
	printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
    23d6:	f246 1094 	movw	r0, #24980	; 0x6194
    23da:	f2c0 0000 	movt	r0, #0
    23de:	f246 11ac 	movw	r1, #25004	; 0x61ac
    23e2:	f2c0 0100 	movt	r1, #0
    23e6:	f246 12b8 	movw	r2, #25016	; 0x61b8
    23ea:	f2c0 0200 	movt	r2, #0
    23ee:	47a8      	blx	r5



	/* Configure TC TC_CHANNEL_WAVEFORM as waveform operating mode */
	printf("Configure TC%d channel %d as waveform operating mode \n\r",
    23f0:	f246 10c4 	movw	r0, #25028	; 0x61c4
    23f4:	f2c0 0000 	movt	r0, #0
    23f8:	f04f 0101 	mov.w	r1, #1
    23fc:	f04f 0202 	mov.w	r2, #2
    2400:	47a8      	blx	r5
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    2402:	f44f 54a0 	mov.w	r4, #5120	; 0x1400
    2406:	f2c4 040e 	movt	r4, #16398	; 0x400e
    240a:	f04f 0210 	mov.w	r2, #16
    240e:	67a2      	str	r2, [r4, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    2410:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    2414:	f8c4 20c8 	str.w	r2, [r4, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    2418:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
    241c:	6162      	str	r2, [r4, #20]
	} else {
		base->GPIO_PMR0C = mask;
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
    241e:	6262      	str	r2, [r4, #36]	; 0x24

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    2420:	63a2      	str	r2, [r4, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    2422:	60a2      	str	r2, [r4, #8]
	/* Configure PIO Pins for TC */
	ioport_set_pin_mode(PIN_TC_WAVEFORM, PIN_TC_WAVEFORM_MUX);
	/* Disable IO to enable peripheral mode) */
	ioport_disable_pin(PIN_TC_WAVEFORM);
	/* Configure the PMC to enable the TC module. */
	sysclk_enable_peripheral_clock(ID_TC_WAVEFORM);
    2424:	f44f 4580 	mov.w	r5, #16384	; 0x4000
    2428:	f2c4 0501 	movt	r5, #16385	; 0x4001
    242c:	4628      	mov	r0, r5
    242e:	47b0      	blx	r6

	/* Init TC to waveform mode. */
	tc_init(TC, TC_CHANNEL_WAVEFORM,
    2430:	f24c 0701 	movw	r7, #49153	; 0xc001
    2434:	f2c0 0709 	movt	r7, #9
    2438:	4628      	mov	r0, r5
    243a:	f04f 0102 	mov.w	r1, #2
    243e:	463a      	mov	r2, r7
    2440:	f641 29f1 	movw	r9, #6897	; 0x1af1
    2444:	f2c0 0900 	movt	r9, #0
    2448:	47c8      	blx	r9
			| TC_CMR_WAVE /* Waveform mode is enabled */
			| TC_CMR_ACPA_SET /* RA Compare Effect: set */
			| TC_CMR_ACPC_CLEAR /* RC Compare Effect: clear */
			| TC_CMR_CPCTRG /* UP mode with automatic trigger on RC Compare */
	);
	tc_start(TC, TC_CHANNEL_WAVEFORM);
    244a:	4628      	mov	r0, r5
    244c:	f04f 0102 	mov.w	r1, #2
    2450:	f641 380d 	movw	r8, #6925	; 0x1b0d
    2454:	f2c0 0800 	movt	r8, #0
    2458:	47c0      	blx	r8
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    245a:	f04f 0304 	mov.w	r3, #4
    245e:	67a3      	str	r3, [r4, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    2460:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    2464:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    2468:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
    246c:	6163      	str	r3, [r4, #20]
	} else {
		base->GPIO_PMR0C = mask;
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
    246e:	6263      	str	r3, [r4, #36]	; 0x24

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    2470:	63a3      	str	r3, [r4, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    2472:	60a3      	str	r3, [r4, #8]
	/* Configure PIO Pins for TC */
	ioport_set_pin_mode(PIN_TC_WAVEFORMYAXIS, PIN_TC_WAVEFORM_MUXYAXIS);
	/* Disable IO to enable peripheral mode) */
	ioport_disable_pin(PIN_TC_WAVEFORMYAXIS);
	/* Configure the PMC to enable the TC module. */
	sysclk_enable_peripheral_clock(ID_TC_WAVEFORM);
    2474:	4628      	mov	r0, r5
    2476:	47b0      	blx	r6

	/* Init TC to waveform mode. */
	tc_init(TC, TC_CHANNEL_WAVEFORMYAXIS,
    2478:	4628      	mov	r0, r5
    247a:	f04f 0101 	mov.w	r1, #1
    247e:	463a      	mov	r2, r7
    2480:	47c8      	blx	r9
	| TC_CMR_WAVE /* Waveform mode is enabled */
	| TC_CMR_ACPA_SET /* RA Compare Effect: set */
	| TC_CMR_ACPC_CLEAR /* RC Compare Effect: clear */
	| TC_CMR_CPCTRG /* UP mode with automatic trigger on RC Compare */
	);
	tc_start(TC, TC_CHANNEL_WAVEFORMYAXIS);
    2482:	4628      	mov	r0, r5
    2484:	f04f 0101 	mov.w	r1, #1
    2488:	47c0      	blx	r8
	tc_waveform_initialize_xaxis();
	tc_waveform_initialize_yaxis();
	dutycycle1 = gc_waveconfig[5].us_dutycycle;
	dutycycle2 = gc_waveconfig[5].us_dutycycle;	
	/* Display menu */
	display_menu();
    248a:	f242 1631 	movw	r6, #8497	; 0x2131
    248e:	f2c0 0600 	movt	r6, #0
    2492:	47b0      	blx	r6
	printf("Configure TC%d channel %d as waveform operating mode \n\r",
			TC_PERIPHERAL, TC_CHANNEL_WAVEFORM);
	tc_waveform_initialize_xaxis();
	tc_waveform_initialize_yaxis();
	dutycycle1 = gc_waveconfig[5].us_dutycycle;
	dutycycle2 = gc_waveconfig[5].us_dutycycle;	
    2494:	f04f 043c 	mov.w	r4, #60	; 0x3c
	/* Configure TC TC_CHANNEL_WAVEFORM as waveform operating mode */
	printf("Configure TC%d channel %d as waveform operating mode \n\r",
			TC_PERIPHERAL, TC_CHANNEL_WAVEFORM);
	tc_waveform_initialize_xaxis();
	tc_waveform_initialize_yaxis();
	dutycycle1 = gc_waveconfig[5].us_dutycycle;
    2498:	4625      	mov	r5, r4
	dutycycle2 = gc_waveconfig[5].us_dutycycle;	
	/* Display menu */
	display_menu();

	while (1) {
		scanf("%c", (char *)&key);
    249a:	f246 17fc 	movw	r7, #25084	; 0x61fc
    249e:	f2c0 0700 	movt	r7, #0
    24a2:	f642 0601 	movw	r6, #10241	; 0x2801
    24a6:	f2c0 0600 	movt	r6, #0

		switch (key) {
		case 'h':
			display_menu();
    24aa:	f242 1931 	movw	r9, #8497	; 0x2131
    24ae:	f2c0 0900 	movt	r9, #0
			else if (dutycycle1 >100)
			{
				dutycycle1 = 100;
			}
			
				servo_move_xaxis(dutycycle1);
    24b2:	f242 18f1 	movw	r8, #8689	; 0x21f1
    24b6:	f2c0 0800 	movt	r8, #0
	dutycycle2 = gc_waveconfig[5].us_dutycycle;	
	/* Display menu */
	display_menu();

	while (1) {
		scanf("%c", (char *)&key);
    24ba:	4638      	mov	r0, r7
    24bc:	f10d 011f 	add.w	r1, sp, #31
    24c0:	47b0      	blx	r6

		switch (key) {
    24c2:	f89d 101f 	ldrb.w	r1, [sp, #31]
    24c6:	f1a1 0061 	sub.w	r0, r1, #97	; 0x61
    24ca:	2816      	cmp	r0, #22
    24cc:	d87f      	bhi.n	25ce <main+0x2e6>
    24ce:	e8df f000 	tbb	[pc, r0]
    24d2:	7e0e      	.short	0x7e0e
    24d4:	7e7e287e 	.word	0x7e7e287e
    24d8:	7e7e0c7e 	.word	0x7e7e0c7e
    24dc:	7e7e7e7e 	.word	0x7e7e7e7e
    24e0:	7e7e7e7e 	.word	0x7e7e7e7e
    24e4:	7e7e7e60 	.word	0x7e7e7e60
    24e8:	42          	.byte	0x42
    24e9:	00          	.byte	0x00
		case 'h':
			display_menu();
    24ea:	47c8      	blx	r9
			break;
    24ec:	e7e5      	b.n	24ba <main+0x1d2>
		case 'a':
			dutycycle1 += SERVO_STEP;
    24ee:	f105 0505 	add.w	r5, r5, #5
    24f2:	b2ad      	uxth	r5, r5
			if(dutycycle1 < 20)
    24f4:	2d13      	cmp	r5, #19
    24f6:	d903      	bls.n	2500 <main+0x218>
    24f8:	2d64      	cmp	r5, #100	; 0x64
    24fa:	bf28      	it	cs
    24fc:	2564      	movcs	r5, #100	; 0x64
    24fe:	e001      	b.n	2504 <main+0x21c>
			{
				dutycycle1 = 20;
    2500:	f04f 0514 	mov.w	r5, #20
			else if (dutycycle1 >100)
			{
				dutycycle1 = 100;
			}
			
				servo_move_xaxis(dutycycle1);
    2504:	4628      	mov	r0, r5
    2506:	47c0      	blx	r8
				delay_ms(500);
    2508:	f244 500e 	movw	r0, #17678	; 0x450e
    250c:	f2c0 0003 	movt	r0, #3
    2510:	f240 0101 	movw	r1, #1
    2514:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2518:	4788      	blx	r1
	dutycycle);
}

static inline void servo_stop_xaxis()
{
	servo_move_xaxis(0);
    251a:	f04f 0000 	mov.w	r0, #0
    251e:	47c0      	blx	r8
    2520:	e7cb      	b.n	24ba <main+0x1d2>
				servo_stop_xaxis();
				//delay_ms(500);
			
			break;
		case 'd':
			dutycycle1 -= SERVO_STEP;
    2522:	f1a5 0505 	sub.w	r5, r5, #5
    2526:	b2ad      	uxth	r5, r5
				if(dutycycle1 < 20)
    2528:	2d13      	cmp	r5, #19
    252a:	d903      	bls.n	2534 <main+0x24c>
    252c:	2d64      	cmp	r5, #100	; 0x64
    252e:	bf28      	it	cs
    2530:	2564      	movcs	r5, #100	; 0x64
    2532:	e001      	b.n	2538 <main+0x250>
				{
					dutycycle1 = 20;
    2534:	f04f 0514 	mov.w	r5, #20
				}
				else if (dutycycle1 >100)
				{
					dutycycle1 = 100;
				}
				servo_move_xaxis(dutycycle1);
    2538:	4628      	mov	r0, r5
    253a:	47c0      	blx	r8
				delay_ms(500);
    253c:	f244 500e 	movw	r0, #17678	; 0x450e
    2540:	f2c0 0003 	movt	r0, #3
    2544:	f240 0301 	movw	r3, #1
    2548:	f2c2 0300 	movt	r3, #8192	; 0x2000
    254c:	4798      	blx	r3
	dutycycle);
}

static inline void servo_stop_xaxis()
{
	servo_move_xaxis(0);
    254e:	f04f 0000 	mov.w	r0, #0
    2552:	47c0      	blx	r8
    2554:	e7b1      	b.n	24ba <main+0x1d2>
				servo_stop_xaxis();
				//delay_ms(500);
		
			break;
		case 'w':
			dutycycle2 += SERVO_STEP;
    2556:	f104 0405 	add.w	r4, r4, #5
    255a:	b2a4      	uxth	r4, r4
				if(dutycycle2 < 20)
    255c:	2c13      	cmp	r4, #19
    255e:	d903      	bls.n	2568 <main+0x280>
    2560:	2c64      	cmp	r4, #100	; 0x64
    2562:	bf28      	it	cs
    2564:	2464      	movcs	r4, #100	; 0x64
    2566:	e001      	b.n	256c <main+0x284>
				{
					dutycycle2 = 20;
    2568:	f04f 0414 	mov.w	r4, #20
				}
				else if (dutycycle2 >100)
				{
					dutycycle2 = 100;
				}
				servo_move_yaxis(dutycycle2);
    256c:	4620      	mov	r0, r4
    256e:	f242 2a6d 	movw	sl, #8813	; 0x226d
    2572:	f2c0 0a00 	movt	sl, #0
    2576:	47d0      	blx	sl
				delay_ms(500);
    2578:	f244 500e 	movw	r0, #17678	; 0x450e
    257c:	f2c0 0003 	movt	r0, #3
    2580:	f240 0101 	movw	r1, #1
    2584:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2588:	4788      	blx	r1
	servo_move_xaxis(0);
}

static inline void servo_stop_yaxis()
{
	servo_move_yaxis(0);
    258a:	f04f 0000 	mov.w	r0, #0
    258e:	47d0      	blx	sl
    2590:	e793      	b.n	24ba <main+0x1d2>
				servo_stop_yaxis();
				//delay_ms(500);
			
			break;
		case 's':
				dutycycle2 -= SERVO_STEP;
    2592:	f1a4 0405 	sub.w	r4, r4, #5
    2596:	b2a4      	uxth	r4, r4
					if(dutycycle2 < 20)
    2598:	2c13      	cmp	r4, #19
    259a:	d903      	bls.n	25a4 <main+0x2bc>
    259c:	2c64      	cmp	r4, #100	; 0x64
    259e:	bf28      	it	cs
    25a0:	2464      	movcs	r4, #100	; 0x64
    25a2:	e001      	b.n	25a8 <main+0x2c0>
					{
						dutycycle2 = 20;
    25a4:	f04f 0414 	mov.w	r4, #20
					}
					else if (dutycycle2 >100)
					{
						dutycycle2 = 100;
					}
					servo_move_yaxis(dutycycle2);
    25a8:	4620      	mov	r0, r4
    25aa:	f242 2a6d 	movw	sl, #8813	; 0x226d
    25ae:	f2c0 0a00 	movt	sl, #0
    25b2:	47d0      	blx	sl
					delay_ms(500);
    25b4:	f244 500e 	movw	r0, #17678	; 0x450e
    25b8:	f2c0 0003 	movt	r0, #3
    25bc:	f240 0201 	movw	r2, #1
    25c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25c4:	4790      	blx	r2
	servo_move_xaxis(0);
}

static inline void servo_stop_yaxis()
{
	servo_move_yaxis(0);
    25c6:	f04f 0000 	mov.w	r0, #0
    25ca:	47d0      	blx	sl
    25cc:	e775      	b.n	24ba <main+0x1d2>
					//delay_ms(500);
			
			break;
		default:
			/* Set waveform configuration #n */
			if ((key >= '0') && (key <= ('0' + gc_uc_nbconfig - 1))) {
    25ce:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
    25d2:	b2c3      	uxtb	r3, r0
    25d4:	2b08      	cmp	r3, #8
    25d6:	d81c      	bhi.n	2612 <main+0x32a>
				if (!gs_ul_captured_pulses) {
					gs_uc_configuration = key - '0';
    25d8:	f640 1140 	movw	r1, #2368	; 0x940
    25dc:	f2c2 0100 	movt	r1, #8192	; 0x2000
    25e0:	700b      	strb	r3, [r1, #0]
					servo_move_xaxis(dutycycle1);
    25e2:	4628      	mov	r0, r5
    25e4:	47c0      	blx	r8
					servo_move_yaxis(dutycycle2);
    25e6:	4620      	mov	r0, r4
    25e8:	f242 2a6d 	movw	sl, #8813	; 0x226d
    25ec:	f2c0 0a00 	movt	sl, #0
    25f0:	47d0      	blx	sl
					delay_ms(500);
    25f2:	f244 500e 	movw	r0, #17678	; 0x450e
    25f6:	f2c0 0003 	movt	r0, #3
    25fa:	f240 0301 	movw	r3, #1
    25fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2602:	4798      	blx	r3
	dutycycle);
}

static inline void servo_stop_xaxis()
{
	servo_move_xaxis(0);
    2604:	f04f 0000 	mov.w	r0, #0
    2608:	47c0      	blx	r8
}

static inline void servo_stop_yaxis()
{
	servo_move_yaxis(0);
    260a:	f04f 0000 	mov.w	r0, #0
    260e:	47d0      	blx	sl
    2610:	e753      	b.n	24ba <main+0x1d2>
					servo_stop_yaxis();
				} else {
					printf("Capturing ... , press 's' to stop capture first \r");
				}
			}
			else printf("Key 0x%02x pressed\n\r", key);
    2612:	f246 2000 	movw	r0, #25088	; 0x6200
    2616:	f2c0 0000 	movt	r0, #0
    261a:	f242 723d 	movw	r2, #10045	; 0x273d
    261e:	f2c0 0200 	movt	r2, #0
    2622:	4790      	blx	r2
    2624:	e749      	b.n	24ba <main+0x1d2>
    2626:	bf00      	nop

00002628 <__register_exitproc>:
    2628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    262c:	4698      	mov	r8, r3
    262e:	4b23      	ldr	r3, [pc, #140]	; (26bc <__register_exitproc+0x94>)
    2630:	681c      	ldr	r4, [r3, #0]
    2632:	4606      	mov	r6, r0
    2634:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    2638:	460f      	mov	r7, r1
    263a:	4691      	mov	r9, r2
    263c:	b918      	cbnz	r0, 2646 <__register_exitproc+0x1e>
    263e:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
    2642:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    2646:	6841      	ldr	r1, [r0, #4]
    2648:	291f      	cmp	r1, #31
    264a:	dd16      	ble.n	267a <__register_exitproc+0x52>
    264c:	481c      	ldr	r0, [pc, #112]	; (26c0 <__register_exitproc+0x98>)
    264e:	b918      	cbnz	r0, 2658 <__register_exitproc+0x30>
    2650:	f04f 30ff 	mov.w	r0, #4294967295
    2654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2658:	f44f 70c8 	mov.w	r0, #400	; 0x190
    265c:	f002 f81e 	bl	469c <malloc>
    2660:	2800      	cmp	r0, #0
    2662:	d0f5      	beq.n	2650 <__register_exitproc+0x28>
    2664:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    2668:	2500      	movs	r5, #0
    266a:	6045      	str	r5, [r0, #4]
    266c:	6002      	str	r2, [r0, #0]
    266e:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    2672:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
    2676:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
    267a:	b1b6      	cbz	r6, 26aa <__register_exitproc+0x82>
    267c:	6844      	ldr	r4, [r0, #4]
    267e:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    2682:	2201      	movs	r2, #1
    2684:	eb00 0384 	add.w	r3, r0, r4, lsl #2
    2688:	fa02 f204 	lsl.w	r2, r2, r4
    268c:	4311      	orrs	r1, r2
    268e:	2e02      	cmp	r6, #2
    2690:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
    2694:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    2698:	461c      	mov	r4, r3
    269a:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
    269e:	d104      	bne.n	26aa <__register_exitproc+0x82>
    26a0:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
    26a4:	431a      	orrs	r2, r3
    26a6:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
    26aa:	6841      	ldr	r1, [r0, #4]
    26ac:	1c8b      	adds	r3, r1, #2
    26ae:	1c4a      	adds	r2, r1, #1
    26b0:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    26b4:	6042      	str	r2, [r0, #4]
    26b6:	2000      	movs	r0, #0
    26b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    26bc:	00006218 	.word	0x00006218
    26c0:	0000469d 	.word	0x0000469d

000026c4 <__libc_fini_array>:
    26c4:	b570      	push	{r4, r5, r6, lr}
    26c6:	4b08      	ldr	r3, [pc, #32]	; (26e8 <__libc_fini_array+0x24>)
    26c8:	4c08      	ldr	r4, [pc, #32]	; (26ec <__libc_fini_array+0x28>)
    26ca:	1ae0      	subs	r0, r4, r3
    26cc:	1084      	asrs	r4, r0, #2
    26ce:	eb03 0684 	add.w	r6, r3, r4, lsl #2
    26d2:	2500      	movs	r5, #0
    26d4:	3d04      	subs	r5, #4
    26d6:	b11c      	cbz	r4, 26e0 <__libc_fini_array+0x1c>
    26d8:	5972      	ldr	r2, [r6, r5]
    26da:	4790      	blx	r2
    26dc:	3c01      	subs	r4, #1
    26de:	e7f9      	b.n	26d4 <__libc_fini_array+0x10>
    26e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    26e4:	f003 be5e 	b.w	63a4 <_fini>
    26e8:	000063b0 	.word	0x000063b0
    26ec:	000063b4 	.word	0x000063b4

000026f0 <__libc_init_array>:
    26f0:	b538      	push	{r3, r4, r5, lr}
    26f2:	4d0e      	ldr	r5, [pc, #56]	; (272c <__libc_init_array+0x3c>)
    26f4:	4b0e      	ldr	r3, [pc, #56]	; (2730 <__libc_init_array+0x40>)
    26f6:	1ae8      	subs	r0, r5, r3
    26f8:	1085      	asrs	r5, r0, #2
    26fa:	2400      	movs	r4, #0
    26fc:	42ac      	cmp	r4, r5
    26fe:	d005      	beq.n	270c <__libc_init_array+0x1c>
    2700:	490b      	ldr	r1, [pc, #44]	; (2730 <__libc_init_array+0x40>)
    2702:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
    2706:	4790      	blx	r2
    2708:	3401      	adds	r4, #1
    270a:	e7f7      	b.n	26fc <__libc_init_array+0xc>
    270c:	f003 fe40 	bl	6390 <_init>
    2710:	4908      	ldr	r1, [pc, #32]	; (2734 <__libc_init_array+0x44>)
    2712:	4a09      	ldr	r2, [pc, #36]	; (2738 <__libc_init_array+0x48>)
    2714:	1a54      	subs	r4, r2, r1
    2716:	10a5      	asrs	r5, r4, #2
    2718:	2400      	movs	r4, #0
    271a:	42ac      	cmp	r4, r5
    271c:	d005      	beq.n	272a <__libc_init_array+0x3a>
    271e:	4b05      	ldr	r3, [pc, #20]	; (2734 <__libc_init_array+0x44>)
    2720:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    2724:	4780      	blx	r0
    2726:	3401      	adds	r4, #1
    2728:	e7f7      	b.n	271a <__libc_init_array+0x2a>
    272a:	bd38      	pop	{r3, r4, r5, pc}
    272c:	0000639c 	.word	0x0000639c
    2730:	0000639c 	.word	0x0000639c
    2734:	0000639c 	.word	0x0000639c
    2738:	000063a4 	.word	0x000063a4

0000273c <iprintf>:
    273c:	b40f      	push	{r0, r1, r2, r3}
    273e:	b507      	push	{r0, r1, r2, lr}
    2740:	4906      	ldr	r1, [pc, #24]	; (275c <iprintf+0x20>)
    2742:	ab04      	add	r3, sp, #16
    2744:	6808      	ldr	r0, [r1, #0]
    2746:	f853 2b04 	ldr.w	r2, [r3], #4
    274a:	6881      	ldr	r1, [r0, #8]
    274c:	9301      	str	r3, [sp, #4]
    274e:	f000 f931 	bl	29b4 <_vfiprintf_r>
    2752:	e8bd 400e 	ldmia.w	sp!, {r1, r2, r3, lr}
    2756:	b004      	add	sp, #16
    2758:	4770      	bx	lr
    275a:	bf00      	nop
    275c:	20000050 	.word	0x20000050

00002760 <_iprintf_r>:
    2760:	b40e      	push	{r1, r2, r3}
    2762:	b503      	push	{r0, r1, lr}
    2764:	ab03      	add	r3, sp, #12
    2766:	6881      	ldr	r1, [r0, #8]
    2768:	f853 2b04 	ldr.w	r2, [r3], #4
    276c:	9301      	str	r3, [sp, #4]
    276e:	f000 f921 	bl	29b4 <_vfiprintf_r>
    2772:	e8bd 400c 	ldmia.w	sp!, {r2, r3, lr}
    2776:	b003      	add	sp, #12
    2778:	4770      	bx	lr
    277a:	bf00      	nop

0000277c <memset>:
    277c:	1882      	adds	r2, r0, r2
    277e:	4603      	mov	r3, r0
    2780:	4293      	cmp	r3, r2
    2782:	d002      	beq.n	278a <memset+0xe>
    2784:	f803 1b01 	strb.w	r1, [r3], #1
    2788:	e7fa      	b.n	2780 <memset+0x4>
    278a:	4770      	bx	lr

0000278c <_puts_r>:
    278c:	b530      	push	{r4, r5, lr}
    278e:	4605      	mov	r5, r0
    2790:	b089      	sub	sp, #36	; 0x24
    2792:	4608      	mov	r0, r1
    2794:	460c      	mov	r4, r1
    2796:	f000 f8d1 	bl	293c <strlen>
    279a:	2101      	movs	r1, #1
    279c:	1843      	adds	r3, r0, r1
    279e:	9107      	str	r1, [sp, #28]
    27a0:	4911      	ldr	r1, [pc, #68]	; (27e8 <_puts_r+0x5c>)
    27a2:	9303      	str	r3, [sp, #12]
    27a4:	680b      	ldr	r3, [r1, #0]
    27a6:	4a11      	ldr	r2, [pc, #68]	; (27ec <_puts_r+0x60>)
    27a8:	9005      	str	r0, [sp, #20]
    27aa:	a804      	add	r0, sp, #16
    27ac:	9001      	str	r0, [sp, #4]
    27ae:	6898      	ldr	r0, [r3, #8]
    27b0:	9206      	str	r2, [sp, #24]
    27b2:	2202      	movs	r2, #2
    27b4:	9202      	str	r2, [sp, #8]
    27b6:	8982      	ldrh	r2, [r0, #12]
    27b8:	9404      	str	r4, [sp, #16]
    27ba:	f402 5100 	and.w	r1, r2, #8192	; 0x2000
    27be:	b20b      	sxth	r3, r1
    27c0:	b933      	cbnz	r3, 27d0 <_puts_r+0x44>
    27c2:	6e41      	ldr	r1, [r0, #100]	; 0x64
    27c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    27c8:	f421 5300 	bic.w	r3, r1, #8192	; 0x2000
    27cc:	8182      	strh	r2, [r0, #12]
    27ce:	6643      	str	r3, [r0, #100]	; 0x64
    27d0:	4628      	mov	r0, r5
    27d2:	68a9      	ldr	r1, [r5, #8]
    27d4:	aa01      	add	r2, sp, #4
    27d6:	f001 fd05 	bl	41e4 <__sfvwrite_r>
    27da:	2800      	cmp	r0, #0
    27dc:	bf0c      	ite	eq
    27de:	200a      	moveq	r0, #10
    27e0:	f04f 30ff 	movne.w	r0, #4294967295
    27e4:	b009      	add	sp, #36	; 0x24
    27e6:	bd30      	pop	{r4, r5, pc}
    27e8:	20000050 	.word	0x20000050
    27ec:	0000621e 	.word	0x0000621e

000027f0 <puts>:
    27f0:	4b02      	ldr	r3, [pc, #8]	; (27fc <puts+0xc>)
    27f2:	4601      	mov	r1, r0
    27f4:	6818      	ldr	r0, [r3, #0]
    27f6:	f7ff bfc9 	b.w	278c <_puts_r>
    27fa:	bf00      	nop
    27fc:	20000050 	.word	0x20000050

00002800 <scanf>:
    2800:	b40f      	push	{r0, r1, r2, r3}
    2802:	b507      	push	{r0, r1, r2, lr}
    2804:	4906      	ldr	r1, [pc, #24]	; (2820 <scanf+0x20>)
    2806:	ab04      	add	r3, sp, #16
    2808:	6808      	ldr	r0, [r1, #0]
    280a:	f853 2b04 	ldr.w	r2, [r3], #4
    280e:	6841      	ldr	r1, [r0, #4]
    2810:	9301      	str	r3, [sp, #4]
    2812:	f000 fd27 	bl	3264 <__svfscanf_r>
    2816:	e8bd 400e 	ldmia.w	sp!, {r1, r2, r3, lr}
    281a:	b004      	add	sp, #16
    281c:	4770      	bx	lr
    281e:	bf00      	nop
    2820:	20000050 	.word	0x20000050

00002824 <_scanf_r>:
    2824:	b40e      	push	{r1, r2, r3}
    2826:	b503      	push	{r0, r1, lr}
    2828:	ab03      	add	r3, sp, #12
    282a:	6841      	ldr	r1, [r0, #4]
    282c:	f853 2b04 	ldr.w	r2, [r3], #4
    2830:	9301      	str	r3, [sp, #4]
    2832:	f000 fd17 	bl	3264 <__svfscanf_r>
    2836:	e8bd 400c 	ldmia.w	sp!, {r2, r3, lr}
    283a:	b003      	add	sp, #12
    283c:	4770      	bx	lr
    283e:	bf00      	nop

00002840 <setbuf>:
    2840:	2900      	cmp	r1, #0
    2842:	bf0c      	ite	eq
    2844:	2202      	moveq	r2, #2
    2846:	2200      	movne	r2, #0
    2848:	f44f 6380 	mov.w	r3, #1024	; 0x400
    284c:	f000 b800 	b.w	2850 <setvbuf>

00002850 <setvbuf>:
    2850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2854:	461d      	mov	r5, r3
    2856:	4b37      	ldr	r3, [pc, #220]	; (2934 <setvbuf+0xe4>)
    2858:	4604      	mov	r4, r0
    285a:	6818      	ldr	r0, [r3, #0]
    285c:	460e      	mov	r6, r1
    285e:	4617      	mov	r7, r2
    2860:	4698      	mov	r8, r3
    2862:	b118      	cbz	r0, 286c <setvbuf+0x1c>
    2864:	6b82      	ldr	r2, [r0, #56]	; 0x38
    2866:	b90a      	cbnz	r2, 286c <setvbuf+0x1c>
    2868:	f001 fa6a 	bl	3d40 <__sinit>
    286c:	2f02      	cmp	r7, #2
    286e:	d85d      	bhi.n	292c <setvbuf+0xdc>
    2870:	2d00      	cmp	r5, #0
    2872:	db5b      	blt.n	292c <setvbuf+0xdc>
    2874:	4621      	mov	r1, r4
    2876:	f8d8 0000 	ldr.w	r0, [r8]
    287a:	f001 f96d 	bl	3b58 <_fflush_r>
    287e:	89a1      	ldrh	r1, [r4, #12]
    2880:	f001 0380 	and.w	r3, r1, #128	; 0x80
    2884:	2000      	movs	r0, #0
    2886:	b21a      	sxth	r2, r3
    2888:	6060      	str	r0, [r4, #4]
    288a:	61a0      	str	r0, [r4, #24]
    288c:	b122      	cbz	r2, 2898 <setvbuf+0x48>
    288e:	4829      	ldr	r0, [pc, #164]	; (2934 <setvbuf+0xe4>)
    2890:	6921      	ldr	r1, [r4, #16]
    2892:	6800      	ldr	r0, [r0, #0]
    2894:	f001 fbf0 	bl	4078 <_free_r>
    2898:	89a1      	ldrh	r1, [r4, #12]
    289a:	2f02      	cmp	r7, #2
    289c:	f021 0383 	bic.w	r3, r1, #131	; 0x83
    28a0:	81a3      	strh	r3, [r4, #12]
    28a2:	d012      	beq.n	28ca <setvbuf+0x7a>
    28a4:	bb36      	cbnz	r6, 28f4 <setvbuf+0xa4>
    28a6:	2d00      	cmp	r5, #0
    28a8:	bf08      	it	eq
    28aa:	f44f 6580 	moveq.w	r5, #1024	; 0x400
    28ae:	4628      	mov	r0, r5
    28b0:	f001 fef4 	bl	469c <malloc>
    28b4:	4606      	mov	r6, r0
    28b6:	b9c8      	cbnz	r0, 28ec <setvbuf+0x9c>
    28b8:	f44f 6080 	mov.w	r0, #1024	; 0x400
    28bc:	f001 feee 	bl	469c <malloc>
    28c0:	4606      	mov	r6, r0
    28c2:	b988      	cbnz	r0, 28e8 <setvbuf+0x98>
    28c4:	f04f 30ff 	mov.w	r0, #4294967295
    28c8:	e000      	b.n	28cc <setvbuf+0x7c>
    28ca:	2000      	movs	r0, #0
    28cc:	89a1      	ldrh	r1, [r4, #12]
    28ce:	f041 0302 	orr.w	r3, r1, #2
    28d2:	81a3      	strh	r3, [r4, #12]
    28d4:	f104 0143 	add.w	r1, r4, #67	; 0x43
    28d8:	2200      	movs	r2, #0
    28da:	2301      	movs	r3, #1
    28dc:	60a2      	str	r2, [r4, #8]
    28de:	6021      	str	r1, [r4, #0]
    28e0:	6121      	str	r1, [r4, #16]
    28e2:	6163      	str	r3, [r4, #20]
    28e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    28e8:	f44f 6580 	mov.w	r5, #1024	; 0x400
    28ec:	89a2      	ldrh	r2, [r4, #12]
    28ee:	f042 0080 	orr.w	r0, r2, #128	; 0x80
    28f2:	81a0      	strh	r0, [r4, #12]
    28f4:	2f01      	cmp	r7, #1
    28f6:	d105      	bne.n	2904 <setvbuf+0xb4>
    28f8:	89a1      	ldrh	r1, [r4, #12]
    28fa:	426a      	negs	r2, r5
    28fc:	f041 0301 	orr.w	r3, r1, #1
    2900:	81a3      	strh	r3, [r4, #12]
    2902:	61a2      	str	r2, [r4, #24]
    2904:	480b      	ldr	r0, [pc, #44]	; (2934 <setvbuf+0xe4>)
    2906:	89a2      	ldrh	r2, [r4, #12]
    2908:	6801      	ldr	r1, [r0, #0]
    290a:	4b0b      	ldr	r3, [pc, #44]	; (2938 <setvbuf+0xe8>)
    290c:	f002 0008 	and.w	r0, r2, #8
    2910:	b200      	sxth	r0, r0
    2912:	63cb      	str	r3, [r1, #60]	; 0x3c
    2914:	6026      	str	r6, [r4, #0]
    2916:	6126      	str	r6, [r4, #16]
    2918:	6165      	str	r5, [r4, #20]
    291a:	b148      	cbz	r0, 2930 <setvbuf+0xe0>
    291c:	f012 0f03 	tst.w	r2, #3
    2920:	bf18      	it	ne
    2922:	2500      	movne	r5, #0
    2924:	60a5      	str	r5, [r4, #8]
    2926:	2000      	movs	r0, #0
    2928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    292c:	f04f 30ff 	mov.w	r0, #4294967295
    2930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2934:	20000050 	.word	0x20000050
    2938:	00003cb5 	.word	0x00003cb5

0000293c <strlen>:
    293c:	4603      	mov	r3, r0
    293e:	f813 2b01 	ldrb.w	r2, [r3], #1
    2942:	2a00      	cmp	r2, #0
    2944:	d1fb      	bne.n	293e <strlen+0x2>
    2946:	1a18      	subs	r0, r3, r0
    2948:	3801      	subs	r0, #1
    294a:	4770      	bx	lr

0000294c <__sprint_r>:
    294c:	6893      	ldr	r3, [r2, #8]
    294e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2952:	4681      	mov	r9, r0
    2954:	460f      	mov	r7, r1
    2956:	4614      	mov	r4, r2
    2958:	b91b      	cbnz	r3, 2962 <__sprint_r+0x16>
    295a:	6053      	str	r3, [r2, #4]
    295c:	4618      	mov	r0, r3
    295e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2962:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    2964:	049b      	lsls	r3, r3, #18
    2966:	d51e      	bpl.n	29a6 <__sprint_r+0x5a>
    2968:	6815      	ldr	r5, [r2, #0]
    296a:	68a0      	ldr	r0, [r4, #8]
    296c:	3508      	adds	r5, #8
    296e:	b1c8      	cbz	r0, 29a4 <__sprint_r+0x58>
    2970:	f855 1c04 	ldr.w	r1, [r5, #-4]
    2974:	f855 ac08 	ldr.w	sl, [r5, #-8]
    2978:	ea4f 0891 	mov.w	r8, r1, lsr #2
    297c:	2600      	movs	r6, #0
    297e:	4546      	cmp	r6, r8
    2980:	da09      	bge.n	2996 <__sprint_r+0x4a>
    2982:	4648      	mov	r0, r9
    2984:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
    2988:	463a      	mov	r2, r7
    298a:	f001 fa55 	bl	3e38 <_fputwc_r>
    298e:	1c43      	adds	r3, r0, #1
    2990:	d00b      	beq.n	29aa <__sprint_r+0x5e>
    2992:	3601      	adds	r6, #1
    2994:	e7f3      	b.n	297e <__sprint_r+0x32>
    2996:	68a2      	ldr	r2, [r4, #8]
    2998:	ea4f 0888 	mov.w	r8, r8, lsl #2
    299c:	ebc8 0302 	rsb	r3, r8, r2
    29a0:	60a3      	str	r3, [r4, #8]
    29a2:	e7e2      	b.n	296a <__sprint_r+0x1e>
    29a4:	e001      	b.n	29aa <__sprint_r+0x5e>
    29a6:	f001 fc1d 	bl	41e4 <__sfvwrite_r>
    29aa:	2100      	movs	r1, #0
    29ac:	60a1      	str	r1, [r4, #8]
    29ae:	6061      	str	r1, [r4, #4]
    29b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000029b4 <_vfiprintf_r>:
    29b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    29b8:	4689      	mov	r9, r1
    29ba:	b0a9      	sub	sp, #164	; 0xa4
    29bc:	4614      	mov	r4, r2
    29be:	461d      	mov	r5, r3
    29c0:	461e      	mov	r6, r3
    29c2:	4682      	mov	sl, r0
    29c4:	b118      	cbz	r0, 29ce <_vfiprintf_r+0x1a>
    29c6:	6b83      	ldr	r3, [r0, #56]	; 0x38
    29c8:	b90b      	cbnz	r3, 29ce <_vfiprintf_r+0x1a>
    29ca:	f001 f9b9 	bl	3d40 <__sinit>
    29ce:	f8b9 000c 	ldrh.w	r0, [r9, #12]
    29d2:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
    29d6:	b211      	sxth	r1, r2
    29d8:	b949      	cbnz	r1, 29ee <_vfiprintf_r+0x3a>
    29da:	f440 5300 	orr.w	r3, r0, #8192	; 0x2000
    29de:	f8d9 0064 	ldr.w	r0, [r9, #100]	; 0x64
    29e2:	f8a9 300c 	strh.w	r3, [r9, #12]
    29e6:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
    29ea:	f8c9 2064 	str.w	r2, [r9, #100]	; 0x64
    29ee:	f8b9 100c 	ldrh.w	r1, [r9, #12]
    29f2:	f001 0308 	and.w	r3, r1, #8
    29f6:	b218      	sxth	r0, r3
    29f8:	b148      	cbz	r0, 2a0e <_vfiprintf_r+0x5a>
    29fa:	f8d9 2010 	ldr.w	r2, [r9, #16]
    29fe:	b132      	cbz	r2, 2a0e <_vfiprintf_r+0x5a>
    2a00:	f8b9 100c 	ldrh.w	r1, [r9, #12]
    2a04:	f001 031a 	and.w	r3, r1, #26
    2a08:	2b0a      	cmp	r3, #10
    2a0a:	d116      	bne.n	2a3a <_vfiprintf_r+0x86>
    2a0c:	e009      	b.n	2a22 <_vfiprintf_r+0x6e>
    2a0e:	4650      	mov	r0, sl
    2a10:	4649      	mov	r1, r9
    2a12:	f001 f835 	bl	3a80 <__swsetup_r>
    2a16:	2800      	cmp	r0, #0
    2a18:	d0f2      	beq.n	2a00 <_vfiprintf_r+0x4c>
    2a1a:	f04f 32ff 	mov.w	r2, #4294967295
    2a1e:	9203      	str	r2, [sp, #12]
    2a20:	e3d5      	b.n	31ce <_vfiprintf_r+0x81a>
    2a22:	f9b9 000e 	ldrsh.w	r0, [r9, #14]
    2a26:	2800      	cmp	r0, #0
    2a28:	db07      	blt.n	2a3a <_vfiprintf_r+0x86>
    2a2a:	4650      	mov	r0, sl
    2a2c:	4649      	mov	r1, r9
    2a2e:	4622      	mov	r2, r4
    2a30:	462b      	mov	r3, r5
    2a32:	f000 fbd0 	bl	31d6 <__sbprintf>
    2a36:	9003      	str	r0, [sp, #12]
    2a38:	e3c9      	b.n	31ce <_vfiprintf_r+0x81a>
    2a3a:	2200      	movs	r2, #0
    2a3c:	ad18      	add	r5, sp, #96	; 0x60
    2a3e:	950b      	str	r5, [sp, #44]	; 0x2c
    2a40:	920d      	str	r2, [sp, #52]	; 0x34
    2a42:	920c      	str	r2, [sp, #48]	; 0x30
    2a44:	9401      	str	r4, [sp, #4]
    2a46:	9205      	str	r2, [sp, #20]
    2a48:	9203      	str	r2, [sp, #12]
    2a4a:	46a8      	mov	r8, r5
    2a4c:	9901      	ldr	r1, [sp, #4]
    2a4e:	460c      	mov	r4, r1
    2a50:	f811 3b01 	ldrb.w	r3, [r1], #1
    2a54:	b10b      	cbz	r3, 2a5a <_vfiprintf_r+0xa6>
    2a56:	2b25      	cmp	r3, #37	; 0x25
    2a58:	d1f9      	bne.n	2a4e <_vfiprintf_r+0x9a>
    2a5a:	9a01      	ldr	r2, [sp, #4]
    2a5c:	1aa5      	subs	r5, r4, r2
    2a5e:	d019      	beq.n	2a94 <_vfiprintf_r+0xe0>
    2a60:	990c      	ldr	r1, [sp, #48]	; 0x30
    2a62:	980d      	ldr	r0, [sp, #52]	; 0x34
    2a64:	1c4b      	adds	r3, r1, #1
    2a66:	e888 0024 	stmia.w	r8, {r2, r5}
    2a6a:	2b07      	cmp	r3, #7
    2a6c:	eb00 0205 	add.w	r2, r0, r5
    2a70:	920d      	str	r2, [sp, #52]	; 0x34
    2a72:	f108 0808 	add.w	r8, r8, #8
    2a76:	930c      	str	r3, [sp, #48]	; 0x30
    2a78:	dd09      	ble.n	2a8e <_vfiprintf_r+0xda>
    2a7a:	4650      	mov	r0, sl
    2a7c:	4649      	mov	r1, r9
    2a7e:	aa0b      	add	r2, sp, #44	; 0x2c
    2a80:	f7ff ff64 	bl	294c <__sprint_r>
    2a84:	2800      	cmp	r0, #0
    2a86:	f040 839a 	bne.w	31be <_vfiprintf_r+0x80a>
    2a8a:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    2a8e:	9803      	ldr	r0, [sp, #12]
    2a90:	1942      	adds	r2, r0, r5
    2a92:	9203      	str	r2, [sp, #12]
    2a94:	7821      	ldrb	r1, [r4, #0]
    2a96:	2900      	cmp	r1, #0
    2a98:	f000 838a 	beq.w	31b0 <_vfiprintf_r+0x7fc>
    2a9c:	2200      	movs	r2, #0
    2a9e:	3401      	adds	r4, #1
    2aa0:	9401      	str	r4, [sp, #4]
    2aa2:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    2aa6:	f04f 3cff 	mov.w	ip, #4294967295
    2aaa:	9204      	str	r2, [sp, #16]
    2aac:	4617      	mov	r7, r2
    2aae:	9801      	ldr	r0, [sp, #4]
    2ab0:	f810 3b01 	ldrb.w	r3, [r0], #1
    2ab4:	9001      	str	r0, [sp, #4]
    2ab6:	2b63      	cmp	r3, #99	; 0x63
    2ab8:	f000 80b3 	beq.w	2c22 <_vfiprintf_r+0x26e>
    2abc:	dc33      	bgt.n	2b26 <_vfiprintf_r+0x172>
    2abe:	2b39      	cmp	r3, #57	; 0x39
    2ac0:	dc1a      	bgt.n	2af8 <_vfiprintf_r+0x144>
    2ac2:	2b31      	cmp	r3, #49	; 0x31
    2ac4:	f280 8091 	bge.w	2bea <_vfiprintf_r+0x236>
    2ac8:	2b2b      	cmp	r3, #43	; 0x2b
    2aca:	d101      	bne.n	2ad0 <_vfiprintf_r+0x11c>
    2acc:	461a      	mov	r2, r3
    2ace:	e7ee      	b.n	2aae <_vfiprintf_r+0xfa>
    2ad0:	dc0a      	bgt.n	2ae8 <_vfiprintf_r+0x134>
    2ad2:	2b23      	cmp	r3, #35	; 0x23
    2ad4:	d055      	beq.n	2b82 <_vfiprintf_r+0x1ce>
    2ad6:	2b2a      	cmp	r3, #42	; 0x2a
    2ad8:	d056      	beq.n	2b88 <_vfiprintf_r+0x1d4>
    2ada:	2b20      	cmp	r3, #32
    2adc:	f040 81f7 	bne.w	2ece <_vfiprintf_r+0x51a>
    2ae0:	2a00      	cmp	r2, #0
    2ae2:	bf08      	it	eq
    2ae4:	2220      	moveq	r2, #32
    2ae6:	e7e2      	b.n	2aae <_vfiprintf_r+0xfa>
    2ae8:	2b2e      	cmp	r3, #46	; 0x2e
    2aea:	d058      	beq.n	2b9e <_vfiprintf_r+0x1ea>
    2aec:	2b30      	cmp	r3, #48	; 0x30
    2aee:	d079      	beq.n	2be4 <_vfiprintf_r+0x230>
    2af0:	2b2d      	cmp	r3, #45	; 0x2d
    2af2:	f040 81ec 	bne.w	2ece <_vfiprintf_r+0x51a>
    2af6:	e04f      	b.n	2b98 <_vfiprintf_r+0x1e4>
    2af8:	2b4f      	cmp	r3, #79	; 0x4f
    2afa:	f000 80de 	beq.w	2cba <_vfiprintf_r+0x306>
    2afe:	dc07      	bgt.n	2b10 <_vfiprintf_r+0x15c>
    2b00:	2b44      	cmp	r3, #68	; 0x44
    2b02:	f040 81e4 	bne.w	2ece <_vfiprintf_r+0x51a>
    2b06:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    2b0a:	f047 0710 	orr.w	r7, r7, #16
    2b0e:	e090      	b.n	2c32 <_vfiprintf_r+0x27e>
    2b10:	2b55      	cmp	r3, #85	; 0x55
    2b12:	f000 811f 	beq.w	2d54 <_vfiprintf_r+0x3a0>
    2b16:	2b58      	cmp	r3, #88	; 0x58
    2b18:	f040 81d9 	bne.w	2ece <_vfiprintf_r+0x51a>
    2b1c:	4daf      	ldr	r5, [pc, #700]	; (2ddc <_vfiprintf_r+0x428>)
    2b1e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    2b22:	9505      	str	r5, [sp, #20]
    2b24:	e131      	b.n	2d8a <_vfiprintf_r+0x3d6>
    2b26:	2b6f      	cmp	r3, #111	; 0x6f
    2b28:	f000 80c9 	beq.w	2cbe <_vfiprintf_r+0x30a>
    2b2c:	dc10      	bgt.n	2b50 <_vfiprintf_r+0x19c>
    2b2e:	2b69      	cmp	r3, #105	; 0x69
    2b30:	d024      	beq.n	2b7c <_vfiprintf_r+0x1c8>
    2b32:	dc07      	bgt.n	2b44 <_vfiprintf_r+0x190>
    2b34:	2b64      	cmp	r3, #100	; 0x64
    2b36:	d021      	beq.n	2b7c <_vfiprintf_r+0x1c8>
    2b38:	2b68      	cmp	r3, #104	; 0x68
    2b3a:	f040 81c8 	bne.w	2ece <_vfiprintf_r+0x51a>
    2b3e:	f047 0740 	orr.w	r7, r7, #64	; 0x40
    2b42:	e7b4      	b.n	2aae <_vfiprintf_r+0xfa>
    2b44:	2b6c      	cmp	r3, #108	; 0x6c
    2b46:	d05f      	beq.n	2c08 <_vfiprintf_r+0x254>
    2b48:	2b6e      	cmp	r3, #110	; 0x6e
    2b4a:	f040 81c0 	bne.w	2ece <_vfiprintf_r+0x51a>
    2b4e:	e096      	b.n	2c7e <_vfiprintf_r+0x2ca>
    2b50:	2b73      	cmp	r3, #115	; 0x73
    2b52:	f000 80df 	beq.w	2d14 <_vfiprintf_r+0x360>
    2b56:	dc06      	bgt.n	2b66 <_vfiprintf_r+0x1b2>
    2b58:	2b70      	cmp	r3, #112	; 0x70
    2b5a:	f000 80cd 	beq.w	2cf8 <_vfiprintf_r+0x344>
    2b5e:	2b71      	cmp	r3, #113	; 0x71
    2b60:	f040 81b5 	bne.w	2ece <_vfiprintf_r+0x51a>
    2b64:	e05a      	b.n	2c1c <_vfiprintf_r+0x268>
    2b66:	2b75      	cmp	r3, #117	; 0x75
    2b68:	f000 80f6 	beq.w	2d58 <_vfiprintf_r+0x3a4>
    2b6c:	2b78      	cmp	r3, #120	; 0x78
    2b6e:	f040 81ae 	bne.w	2ece <_vfiprintf_r+0x51a>
    2b72:	4d9b      	ldr	r5, [pc, #620]	; (2de0 <_vfiprintf_r+0x42c>)
    2b74:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    2b78:	9505      	str	r5, [sp, #20]
    2b7a:	e106      	b.n	2d8a <_vfiprintf_r+0x3d6>
    2b7c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    2b80:	e057      	b.n	2c32 <_vfiprintf_r+0x27e>
    2b82:	f047 0701 	orr.w	r7, r7, #1
    2b86:	e792      	b.n	2aae <_vfiprintf_r+0xfa>
    2b88:	1d33      	adds	r3, r6, #4
    2b8a:	6836      	ldr	r6, [r6, #0]
    2b8c:	2e00      	cmp	r6, #0
    2b8e:	9604      	str	r6, [sp, #16]
    2b90:	da15      	bge.n	2bbe <_vfiprintf_r+0x20a>
    2b92:	4270      	negs	r0, r6
    2b94:	9004      	str	r0, [sp, #16]
    2b96:	461e      	mov	r6, r3
    2b98:	f047 0704 	orr.w	r7, r7, #4
    2b9c:	e787      	b.n	2aae <_vfiprintf_r+0xfa>
    2b9e:	9901      	ldr	r1, [sp, #4]
    2ba0:	f811 3b01 	ldrb.w	r3, [r1], #1
    2ba4:	2b2a      	cmp	r3, #42	; 0x2a
    2ba6:	9101      	str	r1, [sp, #4]
    2ba8:	d10b      	bne.n	2bc2 <_vfiprintf_r+0x20e>
    2baa:	f8d6 c000 	ldr.w	ip, [r6]
    2bae:	1d33      	adds	r3, r6, #4
    2bb0:	f1bc 0f00 	cmp.w	ip, #0
    2bb4:	da03      	bge.n	2bbe <_vfiprintf_r+0x20a>
    2bb6:	461e      	mov	r6, r3
    2bb8:	f04f 3cff 	mov.w	ip, #4294967295
    2bbc:	e777      	b.n	2aae <_vfiprintf_r+0xfa>
    2bbe:	461e      	mov	r6, r3
    2bc0:	e775      	b.n	2aae <_vfiprintf_r+0xfa>
    2bc2:	f04f 0c00 	mov.w	ip, #0
    2bc6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    2bca:	2809      	cmp	r0, #9
    2bcc:	d807      	bhi.n	2bde <_vfiprintf_r+0x22a>
    2bce:	9901      	ldr	r1, [sp, #4]
    2bd0:	230a      	movs	r3, #10
    2bd2:	fb03 0c0c 	mla	ip, r3, ip, r0
    2bd6:	f811 3b01 	ldrb.w	r3, [r1], #1
    2bda:	9101      	str	r1, [sp, #4]
    2bdc:	e7f3      	b.n	2bc6 <_vfiprintf_r+0x212>
    2bde:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
    2be2:	e768      	b.n	2ab6 <_vfiprintf_r+0x102>
    2be4:	f047 0780 	orr.w	r7, r7, #128	; 0x80
    2be8:	e761      	b.n	2aae <_vfiprintf_r+0xfa>
    2bea:	9801      	ldr	r0, [sp, #4]
    2bec:	2100      	movs	r1, #0
    2bee:	3b30      	subs	r3, #48	; 0x30
    2bf0:	240a      	movs	r4, #10
    2bf2:	fb04 3101 	mla	r1, r4, r1, r3
    2bf6:	f810 3b01 	ldrb.w	r3, [r0], #1
    2bfa:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
    2bfe:	2c09      	cmp	r4, #9
    2c00:	9001      	str	r0, [sp, #4]
    2c02:	d9f4      	bls.n	2bee <_vfiprintf_r+0x23a>
    2c04:	9104      	str	r1, [sp, #16]
    2c06:	e756      	b.n	2ab6 <_vfiprintf_r+0x102>
    2c08:	9901      	ldr	r1, [sp, #4]
    2c0a:	780b      	ldrb	r3, [r1, #0]
    2c0c:	2b6c      	cmp	r3, #108	; 0x6c
    2c0e:	d102      	bne.n	2c16 <_vfiprintf_r+0x262>
    2c10:	1c48      	adds	r0, r1, #1
    2c12:	9001      	str	r0, [sp, #4]
    2c14:	e002      	b.n	2c1c <_vfiprintf_r+0x268>
    2c16:	f047 0710 	orr.w	r7, r7, #16
    2c1a:	e748      	b.n	2aae <_vfiprintf_r+0xfa>
    2c1c:	f047 0720 	orr.w	r7, r7, #32
    2c20:	e745      	b.n	2aae <_vfiprintf_r+0xfa>
    2c22:	6832      	ldr	r2, [r6, #0]
    2c24:	2500      	movs	r5, #0
    2c26:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    2c2a:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
    2c2e:	3604      	adds	r6, #4
    2c30:	e157      	b.n	2ee2 <_vfiprintf_r+0x52e>
    2c32:	06ba      	lsls	r2, r7, #26
    2c34:	d507      	bpl.n	2c46 <_vfiprintf_r+0x292>
    2c36:	3607      	adds	r6, #7
    2c38:	f026 0507 	bic.w	r5, r6, #7
    2c3c:	f105 0608 	add.w	r6, r5, #8
    2c40:	e9d5 4500 	ldrd	r4, r5, [r5]
    2c44:	e00f      	b.n	2c66 <_vfiprintf_r+0x2b2>
    2c46:	f017 0f10 	tst.w	r7, #16
    2c4a:	f106 0104 	add.w	r1, r6, #4
    2c4e:	d001      	beq.n	2c54 <_vfiprintf_r+0x2a0>
    2c50:	6832      	ldr	r2, [r6, #0]
    2c52:	e005      	b.n	2c60 <_vfiprintf_r+0x2ac>
    2c54:	f017 0f40 	tst.w	r7, #64	; 0x40
    2c58:	6832      	ldr	r2, [r6, #0]
    2c5a:	d001      	beq.n	2c60 <_vfiprintf_r+0x2ac>
    2c5c:	b214      	sxth	r4, r2
    2c5e:	e000      	b.n	2c62 <_vfiprintf_r+0x2ae>
    2c60:	4614      	mov	r4, r2
    2c62:	17e5      	asrs	r5, r4, #31
    2c64:	460e      	mov	r6, r1
    2c66:	2c00      	cmp	r4, #0
    2c68:	f175 0200 	sbcs.w	r2, r5, #0
    2c6c:	f280 80ba 	bge.w	2de4 <_vfiprintf_r+0x430>
    2c70:	232d      	movs	r3, #45	; 0x2d
    2c72:	4264      	negs	r4, r4
    2c74:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    2c78:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    2c7c:	e0b2      	b.n	2de4 <_vfiprintf_r+0x430>
    2c7e:	f017 0f20 	tst.w	r7, #32
    2c82:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    2c86:	f106 0204 	add.w	r2, r6, #4
    2c8a:	d005      	beq.n	2c98 <_vfiprintf_r+0x2e4>
    2c8c:	9c03      	ldr	r4, [sp, #12]
    2c8e:	6835      	ldr	r5, [r6, #0]
    2c90:	17e0      	asrs	r0, r4, #31
    2c92:	602c      	str	r4, [r5, #0]
    2c94:	6068      	str	r0, [r5, #4]
    2c96:	e004      	b.n	2ca2 <_vfiprintf_r+0x2ee>
    2c98:	06fb      	lsls	r3, r7, #27
    2c9a:	d504      	bpl.n	2ca6 <_vfiprintf_r+0x2f2>
    2c9c:	6833      	ldr	r3, [r6, #0]
    2c9e:	9903      	ldr	r1, [sp, #12]
    2ca0:	6019      	str	r1, [r3, #0]
    2ca2:	4616      	mov	r6, r2
    2ca4:	e6d2      	b.n	2a4c <_vfiprintf_r+0x98>
    2ca6:	6830      	ldr	r0, [r6, #0]
    2ca8:	9c03      	ldr	r4, [sp, #12]
    2caa:	f017 0f40 	tst.w	r7, #64	; 0x40
    2cae:	f106 0604 	add.w	r6, r6, #4
    2cb2:	bf14      	ite	ne
    2cb4:	8004      	strhne	r4, [r0, #0]
    2cb6:	6004      	streq	r4, [r0, #0]
    2cb8:	e6c8      	b.n	2a4c <_vfiprintf_r+0x98>
    2cba:	f047 0710 	orr.w	r7, r7, #16
    2cbe:	f017 0020 	ands.w	r0, r7, #32
    2cc2:	d008      	beq.n	2cd6 <_vfiprintf_r+0x322>
    2cc4:	1df3      	adds	r3, r6, #7
    2cc6:	f023 0507 	bic.w	r5, r3, #7
    2cca:	f105 0608 	add.w	r6, r5, #8
    2cce:	e9d5 4500 	ldrd	r4, r5, [r5]
    2cd2:	2000      	movs	r0, #0
    2cd4:	e07d      	b.n	2dd2 <_vfiprintf_r+0x41e>
    2cd6:	f017 0110 	ands.w	r1, r7, #16
    2cda:	f106 0204 	add.w	r2, r6, #4
    2cde:	d106      	bne.n	2cee <_vfiprintf_r+0x33a>
    2ce0:	f017 0040 	ands.w	r0, r7, #64	; 0x40
    2ce4:	d003      	beq.n	2cee <_vfiprintf_r+0x33a>
    2ce6:	8834      	ldrh	r4, [r6, #0]
    2ce8:	2500      	movs	r5, #0
    2cea:	4616      	mov	r6, r2
    2cec:	e7f1      	b.n	2cd2 <_vfiprintf_r+0x31e>
    2cee:	6836      	ldr	r6, [r6, #0]
    2cf0:	2500      	movs	r5, #0
    2cf2:	4634      	mov	r4, r6
    2cf4:	4616      	mov	r6, r2
    2cf6:	e06c      	b.n	2dd2 <_vfiprintf_r+0x41e>
    2cf8:	4b39      	ldr	r3, [pc, #228]	; (2de0 <_vfiprintf_r+0x42c>)
    2cfa:	6834      	ldr	r4, [r6, #0]
    2cfc:	9305      	str	r3, [sp, #20]
    2cfe:	2130      	movs	r1, #48	; 0x30
    2d00:	2278      	movs	r2, #120	; 0x78
    2d02:	2500      	movs	r5, #0
    2d04:	f047 0702 	orr.w	r7, r7, #2
    2d08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    2d0c:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
    2d10:	3604      	adds	r6, #4
    2d12:	e05d      	b.n	2dd0 <_vfiprintf_r+0x41c>
    2d14:	4631      	mov	r1, r6
    2d16:	2500      	movs	r5, #0
    2d18:	f8d1 b000 	ldr.w	fp, [r1]
    2d1c:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
    2d20:	3604      	adds	r6, #4
    2d22:	45ac      	cmp	ip, r5
    2d24:	4658      	mov	r0, fp
    2d26:	db11      	blt.n	2d4c <_vfiprintf_r+0x398>
    2d28:	4662      	mov	r2, ip
    2d2a:	4629      	mov	r1, r5
    2d2c:	f8cd c000 	str.w	ip, [sp]
    2d30:	f001 ff26 	bl	4b80 <memchr>
    2d34:	f8dd c000 	ldr.w	ip, [sp]
    2d38:	2800      	cmp	r0, #0
    2d3a:	f000 80d6 	beq.w	2eea <_vfiprintf_r+0x536>
    2d3e:	ebcb 0400 	rsb	r4, fp, r0
    2d42:	4564      	cmp	r4, ip
    2d44:	f340 80d3 	ble.w	2eee <_vfiprintf_r+0x53a>
    2d48:	4664      	mov	r4, ip
    2d4a:	e0d0      	b.n	2eee <_vfiprintf_r+0x53a>
    2d4c:	f7ff fdf6 	bl	293c <strlen>
    2d50:	4604      	mov	r4, r0
    2d52:	e0cc      	b.n	2eee <_vfiprintf_r+0x53a>
    2d54:	f047 0710 	orr.w	r7, r7, #16
    2d58:	06bd      	lsls	r5, r7, #26
    2d5a:	d507      	bpl.n	2d6c <_vfiprintf_r+0x3b8>
    2d5c:	1df0      	adds	r0, r6, #7
    2d5e:	f020 0407 	bic.w	r4, r0, #7
    2d62:	f104 0608 	add.w	r6, r4, #8
    2d66:	e9d4 4500 	ldrd	r4, r5, [r4]
    2d6a:	e00c      	b.n	2d86 <_vfiprintf_r+0x3d2>
    2d6c:	f017 0f10 	tst.w	r7, #16
    2d70:	f106 0304 	add.w	r3, r6, #4
    2d74:	d103      	bne.n	2d7e <_vfiprintf_r+0x3ca>
    2d76:	067c      	lsls	r4, r7, #25
    2d78:	d501      	bpl.n	2d7e <_vfiprintf_r+0x3ca>
    2d7a:	8834      	ldrh	r4, [r6, #0]
    2d7c:	e001      	b.n	2d82 <_vfiprintf_r+0x3ce>
    2d7e:	6835      	ldr	r5, [r6, #0]
    2d80:	462c      	mov	r4, r5
    2d82:	2500      	movs	r5, #0
    2d84:	461e      	mov	r6, r3
    2d86:	2001      	movs	r0, #1
    2d88:	e023      	b.n	2dd2 <_vfiprintf_r+0x41e>
    2d8a:	06b8      	lsls	r0, r7, #26
    2d8c:	d507      	bpl.n	2d9e <_vfiprintf_r+0x3ea>
    2d8e:	1df4      	adds	r4, r6, #7
    2d90:	f024 0107 	bic.w	r1, r4, #7
    2d94:	f101 0608 	add.w	r6, r1, #8
    2d98:	e9d1 4500 	ldrd	r4, r5, [r1]
    2d9c:	e00c      	b.n	2db8 <_vfiprintf_r+0x404>
    2d9e:	f017 0f10 	tst.w	r7, #16
    2da2:	f106 0004 	add.w	r0, r6, #4
    2da6:	d103      	bne.n	2db0 <_vfiprintf_r+0x3fc>
    2da8:	0679      	lsls	r1, r7, #25
    2daa:	d501      	bpl.n	2db0 <_vfiprintf_r+0x3fc>
    2dac:	8834      	ldrh	r4, [r6, #0]
    2dae:	e001      	b.n	2db4 <_vfiprintf_r+0x400>
    2db0:	6836      	ldr	r6, [r6, #0]
    2db2:	4634      	mov	r4, r6
    2db4:	2500      	movs	r5, #0
    2db6:	4606      	mov	r6, r0
    2db8:	07fa      	lsls	r2, r7, #31
    2dba:	d509      	bpl.n	2dd0 <_vfiprintf_r+0x41c>
    2dbc:	ea54 0205 	orrs.w	r2, r4, r5
    2dc0:	d006      	beq.n	2dd0 <_vfiprintf_r+0x41c>
    2dc2:	2230      	movs	r2, #48	; 0x30
    2dc4:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
    2dc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    2dcc:	f047 0702 	orr.w	r7, r7, #2
    2dd0:	2002      	movs	r0, #2
    2dd2:	2100      	movs	r1, #0
    2dd4:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    2dd8:	e005      	b.n	2de6 <_vfiprintf_r+0x432>
    2dda:	bf00      	nop
    2ddc:	00006240 	.word	0x00006240
    2de0:	00006251 	.word	0x00006251
    2de4:	2001      	movs	r0, #1
    2de6:	f1bc 0f00 	cmp.w	ip, #0
    2dea:	bfa8      	it	ge
    2dec:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
    2df0:	ea54 0105 	orrs.w	r1, r4, r5
    2df4:	d102      	bne.n	2dfc <_vfiprintf_r+0x448>
    2df6:	f1bc 0f00 	cmp.w	ip, #0
    2dfa:	d058      	beq.n	2eae <_vfiprintf_r+0x4fa>
    2dfc:	2801      	cmp	r0, #1
    2dfe:	d01d      	beq.n	2e3c <_vfiprintf_r+0x488>
    2e00:	2802      	cmp	r0, #2
    2e02:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
    2e06:	d041      	beq.n	2e8c <_vfiprintf_r+0x4d8>
    2e08:	f004 0207 	and.w	r2, r4, #7
    2e0c:	08e4      	lsrs	r4, r4, #3
    2e0e:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
    2e12:	08e9      	lsrs	r1, r5, #3
    2e14:	4604      	mov	r4, r0
    2e16:	460d      	mov	r5, r1
    2e18:	3230      	adds	r2, #48	; 0x30
    2e1a:	ea54 0105 	orrs.w	r1, r4, r5
    2e1e:	469b      	mov	fp, r3
    2e20:	701a      	strb	r2, [r3, #0]
    2e22:	f103 33ff 	add.w	r3, r3, #4294967295
    2e26:	d1ef      	bne.n	2e08 <_vfiprintf_r+0x454>
    2e28:	07f8      	lsls	r0, r7, #31
    2e2a:	465d      	mov	r5, fp
    2e2c:	d54a      	bpl.n	2ec4 <_vfiprintf_r+0x510>
    2e2e:	2a30      	cmp	r2, #48	; 0x30
    2e30:	d048      	beq.n	2ec4 <_vfiprintf_r+0x510>
    2e32:	2230      	movs	r2, #48	; 0x30
    2e34:	469b      	mov	fp, r3
    2e36:	f805 2c01 	strb.w	r2, [r5, #-1]
    2e3a:	e043      	b.n	2ec4 <_vfiprintf_r+0x510>
    2e3c:	2d00      	cmp	r5, #0
    2e3e:	bf08      	it	eq
    2e40:	2c0a      	cmpeq	r4, #10
    2e42:	d203      	bcs.n	2e4c <_vfiprintf_r+0x498>
    2e44:	3430      	adds	r4, #48	; 0x30
    2e46:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
    2e4a:	e036      	b.n	2eba <_vfiprintf_r+0x506>
    2e4c:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
    2e50:	9302      	str	r3, [sp, #8]
    2e52:	4620      	mov	r0, r4
    2e54:	4629      	mov	r1, r5
    2e56:	220a      	movs	r2, #10
    2e58:	2300      	movs	r3, #0
    2e5a:	f8cd c000 	str.w	ip, [sp]
    2e5e:	f002 fdf1 	bl	5a44 <__aeabi_uldivmod>
    2e62:	9802      	ldr	r0, [sp, #8]
    2e64:	f8dd b008 	ldr.w	fp, [sp, #8]
    2e68:	3230      	adds	r2, #48	; 0x30
    2e6a:	f800 2901 	strb.w	r2, [r0], #-1
    2e6e:	4629      	mov	r1, r5
    2e70:	9002      	str	r0, [sp, #8]
    2e72:	220a      	movs	r2, #10
    2e74:	4620      	mov	r0, r4
    2e76:	2300      	movs	r3, #0
    2e78:	f002 fde4 	bl	5a44 <__aeabi_uldivmod>
    2e7c:	4604      	mov	r4, r0
    2e7e:	460d      	mov	r5, r1
    2e80:	ea54 0105 	orrs.w	r1, r4, r5
    2e84:	f8dd c000 	ldr.w	ip, [sp]
    2e88:	d1e3      	bne.n	2e52 <_vfiprintf_r+0x49e>
    2e8a:	e01b      	b.n	2ec4 <_vfiprintf_r+0x510>
    2e8c:	f004 000f 	and.w	r0, r4, #15
    2e90:	9905      	ldr	r1, [sp, #20]
    2e92:	0924      	lsrs	r4, r4, #4
    2e94:	5c0a      	ldrb	r2, [r1, r0]
    2e96:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
    2e9a:	0929      	lsrs	r1, r5, #4
    2e9c:	4604      	mov	r4, r0
    2e9e:	460d      	mov	r5, r1
    2ea0:	469b      	mov	fp, r3
    2ea2:	f803 2901 	strb.w	r2, [r3], #-1
    2ea6:	ea54 0205 	orrs.w	r2, r4, r5
    2eaa:	d1ef      	bne.n	2e8c <_vfiprintf_r+0x4d8>
    2eac:	e00a      	b.n	2ec4 <_vfiprintf_r+0x510>
    2eae:	b938      	cbnz	r0, 2ec0 <_vfiprintf_r+0x50c>
    2eb0:	07f9      	lsls	r1, r7, #31
    2eb2:	d505      	bpl.n	2ec0 <_vfiprintf_r+0x50c>
    2eb4:	2030      	movs	r0, #48	; 0x30
    2eb6:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
    2eba:	f10d 0b5f 	add.w	fp, sp, #95	; 0x5f
    2ebe:	e001      	b.n	2ec4 <_vfiprintf_r+0x510>
    2ec0:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
    2ec4:	ad18      	add	r5, sp, #96	; 0x60
    2ec6:	ebcb 0405 	rsb	r4, fp, r5
    2eca:	4665      	mov	r5, ip
    2ecc:	e00f      	b.n	2eee <_vfiprintf_r+0x53a>
    2ece:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    2ed2:	2b00      	cmp	r3, #0
    2ed4:	f000 816c 	beq.w	31b0 <_vfiprintf_r+0x7fc>
    2ed8:	2500      	movs	r5, #0
    2eda:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    2ede:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
    2ee2:	2401      	movs	r4, #1
    2ee4:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
    2ee8:	e001      	b.n	2eee <_vfiprintf_r+0x53a>
    2eea:	4664      	mov	r4, ip
    2eec:	4605      	mov	r5, r0
    2eee:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2ef2:	42ac      	cmp	r4, r5
    2ef4:	bfac      	ite	ge
    2ef6:	4621      	movge	r1, r4
    2ef8:	4629      	movlt	r1, r5
    2efa:	9102      	str	r1, [sp, #8]
    2efc:	b113      	cbz	r3, 2f04 <_vfiprintf_r+0x550>
    2efe:	9802      	ldr	r0, [sp, #8]
    2f00:	1c42      	adds	r2, r0, #1
    2f02:	9202      	str	r2, [sp, #8]
    2f04:	f017 0102 	ands.w	r1, r7, #2
    2f08:	9106      	str	r1, [sp, #24]
    2f0a:	d002      	beq.n	2f12 <_vfiprintf_r+0x55e>
    2f0c:	9b02      	ldr	r3, [sp, #8]
    2f0e:	1c98      	adds	r0, r3, #2
    2f10:	9002      	str	r0, [sp, #8]
    2f12:	f017 0284 	ands.w	r2, r7, #132	; 0x84
    2f16:	9207      	str	r2, [sp, #28]
    2f18:	d13a      	bne.n	2f90 <_vfiprintf_r+0x5dc>
    2f1a:	9904      	ldr	r1, [sp, #16]
    2f1c:	9b02      	ldr	r3, [sp, #8]
    2f1e:	1acb      	subs	r3, r1, r3
    2f20:	2b00      	cmp	r3, #0
    2f22:	dd35      	ble.n	2f90 <_vfiprintf_r+0x5dc>
    2f24:	48a0      	ldr	r0, [pc, #640]	; (31a8 <_vfiprintf_r+0x7f4>)
    2f26:	2b10      	cmp	r3, #16
    2f28:	f8c8 0000 	str.w	r0, [r8]
    2f2c:	dd1a      	ble.n	2f64 <_vfiprintf_r+0x5b0>
    2f2e:	990c      	ldr	r1, [sp, #48]	; 0x30
    2f30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    2f32:	2010      	movs	r0, #16
    2f34:	f8c8 0004 	str.w	r0, [r8, #4]
    2f38:	1c48      	adds	r0, r1, #1
    2f3a:	3210      	adds	r2, #16
    2f3c:	2807      	cmp	r0, #7
    2f3e:	920d      	str	r2, [sp, #52]	; 0x34
    2f40:	f108 0808 	add.w	r8, r8, #8
    2f44:	900c      	str	r0, [sp, #48]	; 0x30
    2f46:	dd0b      	ble.n	2f60 <_vfiprintf_r+0x5ac>
    2f48:	4650      	mov	r0, sl
    2f4a:	4649      	mov	r1, r9
    2f4c:	aa0b      	add	r2, sp, #44	; 0x2c
    2f4e:	9300      	str	r3, [sp, #0]
    2f50:	f7ff fcfc 	bl	294c <__sprint_r>
    2f54:	9b00      	ldr	r3, [sp, #0]
    2f56:	2800      	cmp	r0, #0
    2f58:	f040 8131 	bne.w	31be <_vfiprintf_r+0x80a>
    2f5c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    2f60:	3b10      	subs	r3, #16
    2f62:	e7df      	b.n	2f24 <_vfiprintf_r+0x570>
    2f64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    2f66:	f8c8 3004 	str.w	r3, [r8, #4]
    2f6a:	18d1      	adds	r1, r2, r3
    2f6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2f6e:	910d      	str	r1, [sp, #52]	; 0x34
    2f70:	1c58      	adds	r0, r3, #1
    2f72:	2807      	cmp	r0, #7
    2f74:	f108 0808 	add.w	r8, r8, #8
    2f78:	900c      	str	r0, [sp, #48]	; 0x30
    2f7a:	dd09      	ble.n	2f90 <_vfiprintf_r+0x5dc>
    2f7c:	4650      	mov	r0, sl
    2f7e:	4649      	mov	r1, r9
    2f80:	aa0b      	add	r2, sp, #44	; 0x2c
    2f82:	f7ff fce3 	bl	294c <__sprint_r>
    2f86:	2800      	cmp	r0, #0
    2f88:	f040 8119 	bne.w	31be <_vfiprintf_r+0x80a>
    2f8c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    2f90:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    2f94:	b1d2      	cbz	r2, 2fcc <_vfiprintf_r+0x618>
    2f96:	f10d 0127 	add.w	r1, sp, #39	; 0x27
    2f9a:	f8c8 1000 	str.w	r1, [r8]
    2f9e:	990c      	ldr	r1, [sp, #48]	; 0x30
    2fa0:	980d      	ldr	r0, [sp, #52]	; 0x34
    2fa2:	2301      	movs	r3, #1
    2fa4:	f8c8 3004 	str.w	r3, [r8, #4]
    2fa8:	1c4b      	adds	r3, r1, #1
    2faa:	1c42      	adds	r2, r0, #1
    2fac:	2b07      	cmp	r3, #7
    2fae:	920d      	str	r2, [sp, #52]	; 0x34
    2fb0:	f108 0808 	add.w	r8, r8, #8
    2fb4:	930c      	str	r3, [sp, #48]	; 0x30
    2fb6:	dd09      	ble.n	2fcc <_vfiprintf_r+0x618>
    2fb8:	4650      	mov	r0, sl
    2fba:	4649      	mov	r1, r9
    2fbc:	aa0b      	add	r2, sp, #44	; 0x2c
    2fbe:	f7ff fcc5 	bl	294c <__sprint_r>
    2fc2:	2800      	cmp	r0, #0
    2fc4:	f040 80fb 	bne.w	31be <_vfiprintf_r+0x80a>
    2fc8:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    2fcc:	9806      	ldr	r0, [sp, #24]
    2fce:	b1c8      	cbz	r0, 3004 <_vfiprintf_r+0x650>
    2fd0:	aa0a      	add	r2, sp, #40	; 0x28
    2fd2:	f8c8 2000 	str.w	r2, [r8]
    2fd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2fd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2fda:	2102      	movs	r1, #2
    2fdc:	f8c8 1004 	str.w	r1, [r8, #4]
    2fe0:	1c51      	adds	r1, r2, #1
    2fe2:	1c98      	adds	r0, r3, #2
    2fe4:	2907      	cmp	r1, #7
    2fe6:	900d      	str	r0, [sp, #52]	; 0x34
    2fe8:	f108 0808 	add.w	r8, r8, #8
    2fec:	910c      	str	r1, [sp, #48]	; 0x30
    2fee:	dd09      	ble.n	3004 <_vfiprintf_r+0x650>
    2ff0:	4650      	mov	r0, sl
    2ff2:	4649      	mov	r1, r9
    2ff4:	aa0b      	add	r2, sp, #44	; 0x2c
    2ff6:	f7ff fca9 	bl	294c <__sprint_r>
    2ffa:	2800      	cmp	r0, #0
    2ffc:	f040 80df 	bne.w	31be <_vfiprintf_r+0x80a>
    3000:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    3004:	9b07      	ldr	r3, [sp, #28]
    3006:	2b80      	cmp	r3, #128	; 0x80
    3008:	d13a      	bne.n	3080 <_vfiprintf_r+0x6cc>
    300a:	9804      	ldr	r0, [sp, #16]
    300c:	9a02      	ldr	r2, [sp, #8]
    300e:	1a83      	subs	r3, r0, r2
    3010:	2b00      	cmp	r3, #0
    3012:	dd35      	ble.n	3080 <_vfiprintf_r+0x6cc>
    3014:	4965      	ldr	r1, [pc, #404]	; (31ac <_vfiprintf_r+0x7f8>)
    3016:	2b10      	cmp	r3, #16
    3018:	f8c8 1000 	str.w	r1, [r8]
    301c:	dd1a      	ble.n	3054 <_vfiprintf_r+0x6a0>
    301e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3020:	980d      	ldr	r0, [sp, #52]	; 0x34
    3022:	2110      	movs	r1, #16
    3024:	f8c8 1004 	str.w	r1, [r8, #4]
    3028:	1c51      	adds	r1, r2, #1
    302a:	3010      	adds	r0, #16
    302c:	2907      	cmp	r1, #7
    302e:	900d      	str	r0, [sp, #52]	; 0x34
    3030:	f108 0808 	add.w	r8, r8, #8
    3034:	910c      	str	r1, [sp, #48]	; 0x30
    3036:	dd0b      	ble.n	3050 <_vfiprintf_r+0x69c>
    3038:	4650      	mov	r0, sl
    303a:	4649      	mov	r1, r9
    303c:	aa0b      	add	r2, sp, #44	; 0x2c
    303e:	9300      	str	r3, [sp, #0]
    3040:	f7ff fc84 	bl	294c <__sprint_r>
    3044:	9b00      	ldr	r3, [sp, #0]
    3046:	2800      	cmp	r0, #0
    3048:	f040 80b9 	bne.w	31be <_vfiprintf_r+0x80a>
    304c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    3050:	3b10      	subs	r3, #16
    3052:	e7df      	b.n	3014 <_vfiprintf_r+0x660>
    3054:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3056:	980d      	ldr	r0, [sp, #52]	; 0x34
    3058:	f8c8 3004 	str.w	r3, [r8, #4]
    305c:	1c51      	adds	r1, r2, #1
    305e:	18c3      	adds	r3, r0, r3
    3060:	2907      	cmp	r1, #7
    3062:	930d      	str	r3, [sp, #52]	; 0x34
    3064:	f108 0808 	add.w	r8, r8, #8
    3068:	910c      	str	r1, [sp, #48]	; 0x30
    306a:	dd09      	ble.n	3080 <_vfiprintf_r+0x6cc>
    306c:	4650      	mov	r0, sl
    306e:	4649      	mov	r1, r9
    3070:	aa0b      	add	r2, sp, #44	; 0x2c
    3072:	f7ff fc6b 	bl	294c <__sprint_r>
    3076:	2800      	cmp	r0, #0
    3078:	f040 80a1 	bne.w	31be <_vfiprintf_r+0x80a>
    307c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    3080:	1b2d      	subs	r5, r5, r4
    3082:	2d00      	cmp	r5, #0
    3084:	dd32      	ble.n	30ec <_vfiprintf_r+0x738>
    3086:	4849      	ldr	r0, [pc, #292]	; (31ac <_vfiprintf_r+0x7f8>)
    3088:	2d10      	cmp	r5, #16
    308a:	f8c8 0000 	str.w	r0, [r8]
    308e:	dd18      	ble.n	30c2 <_vfiprintf_r+0x70e>
    3090:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3092:	980d      	ldr	r0, [sp, #52]	; 0x34
    3094:	1c53      	adds	r3, r2, #1
    3096:	2110      	movs	r1, #16
    3098:	3010      	adds	r0, #16
    309a:	2b07      	cmp	r3, #7
    309c:	f8c8 1004 	str.w	r1, [r8, #4]
    30a0:	900d      	str	r0, [sp, #52]	; 0x34
    30a2:	f108 0808 	add.w	r8, r8, #8
    30a6:	930c      	str	r3, [sp, #48]	; 0x30
    30a8:	dd09      	ble.n	30be <_vfiprintf_r+0x70a>
    30aa:	4650      	mov	r0, sl
    30ac:	4649      	mov	r1, r9
    30ae:	aa0b      	add	r2, sp, #44	; 0x2c
    30b0:	f7ff fc4c 	bl	294c <__sprint_r>
    30b4:	2800      	cmp	r0, #0
    30b6:	f040 8082 	bne.w	31be <_vfiprintf_r+0x80a>
    30ba:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    30be:	3d10      	subs	r5, #16
    30c0:	e7e1      	b.n	3086 <_vfiprintf_r+0x6d2>
    30c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    30c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    30c6:	f8c8 5004 	str.w	r5, [r8, #4]
    30ca:	1c51      	adds	r1, r2, #1
    30cc:	195d      	adds	r5, r3, r5
    30ce:	2907      	cmp	r1, #7
    30d0:	950d      	str	r5, [sp, #52]	; 0x34
    30d2:	f108 0808 	add.w	r8, r8, #8
    30d6:	910c      	str	r1, [sp, #48]	; 0x30
    30d8:	dd08      	ble.n	30ec <_vfiprintf_r+0x738>
    30da:	4650      	mov	r0, sl
    30dc:	4649      	mov	r1, r9
    30de:	aa0b      	add	r2, sp, #44	; 0x2c
    30e0:	f7ff fc34 	bl	294c <__sprint_r>
    30e4:	2800      	cmp	r0, #0
    30e6:	d16a      	bne.n	31be <_vfiprintf_r+0x80a>
    30e8:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    30ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    30ee:	980d      	ldr	r0, [sp, #52]	; 0x34
    30f0:	f8c8 4004 	str.w	r4, [r8, #4]
    30f4:	1c51      	adds	r1, r2, #1
    30f6:	1904      	adds	r4, r0, r4
    30f8:	2907      	cmp	r1, #7
    30fa:	f8c8 b000 	str.w	fp, [r8]
    30fe:	940d      	str	r4, [sp, #52]	; 0x34
    3100:	f108 0308 	add.w	r3, r8, #8
    3104:	910c      	str	r1, [sp, #48]	; 0x30
    3106:	dd07      	ble.n	3118 <_vfiprintf_r+0x764>
    3108:	4650      	mov	r0, sl
    310a:	4649      	mov	r1, r9
    310c:	aa0b      	add	r2, sp, #44	; 0x2c
    310e:	f7ff fc1d 	bl	294c <__sprint_r>
    3112:	2800      	cmp	r0, #0
    3114:	d153      	bne.n	31be <_vfiprintf_r+0x80a>
    3116:	ab18      	add	r3, sp, #96	; 0x60
    3118:	077a      	lsls	r2, r7, #29
    311a:	d40b      	bmi.n	3134 <_vfiprintf_r+0x780>
    311c:	9b03      	ldr	r3, [sp, #12]
    311e:	9a02      	ldr	r2, [sp, #8]
    3120:	9904      	ldr	r1, [sp, #16]
    3122:	980d      	ldr	r0, [sp, #52]	; 0x34
    3124:	428a      	cmp	r2, r1
    3126:	bfac      	ite	ge
    3128:	189b      	addge	r3, r3, r2
    312a:	185b      	addlt	r3, r3, r1
    312c:	9303      	str	r3, [sp, #12]
    312e:	2800      	cmp	r0, #0
    3130:	d035      	beq.n	319e <_vfiprintf_r+0x7ea>
    3132:	e02e      	b.n	3192 <_vfiprintf_r+0x7de>
    3134:	9c04      	ldr	r4, [sp, #16]
    3136:	9802      	ldr	r0, [sp, #8]
    3138:	1a24      	subs	r4, r4, r0
    313a:	2c00      	cmp	r4, #0
    313c:	ddee      	ble.n	311c <_vfiprintf_r+0x768>
    313e:	4a1a      	ldr	r2, [pc, #104]	; (31a8 <_vfiprintf_r+0x7f4>)
    3140:	2c10      	cmp	r4, #16
    3142:	601a      	str	r2, [r3, #0]
    3144:	dd14      	ble.n	3170 <_vfiprintf_r+0x7bc>
    3146:	980c      	ldr	r0, [sp, #48]	; 0x30
    3148:	990d      	ldr	r1, [sp, #52]	; 0x34
    314a:	2210      	movs	r2, #16
    314c:	605a      	str	r2, [r3, #4]
    314e:	1c42      	adds	r2, r0, #1
    3150:	3110      	adds	r1, #16
    3152:	3308      	adds	r3, #8
    3154:	2a07      	cmp	r2, #7
    3156:	910d      	str	r1, [sp, #52]	; 0x34
    3158:	920c      	str	r2, [sp, #48]	; 0x30
    315a:	dd07      	ble.n	316c <_vfiprintf_r+0x7b8>
    315c:	4650      	mov	r0, sl
    315e:	4649      	mov	r1, r9
    3160:	aa0b      	add	r2, sp, #44	; 0x2c
    3162:	f7ff fbf3 	bl	294c <__sprint_r>
    3166:	2800      	cmp	r0, #0
    3168:	d129      	bne.n	31be <_vfiprintf_r+0x80a>
    316a:	ab18      	add	r3, sp, #96	; 0x60
    316c:	3c10      	subs	r4, #16
    316e:	e7e6      	b.n	313e <_vfiprintf_r+0x78a>
    3170:	990c      	ldr	r1, [sp, #48]	; 0x30
    3172:	605c      	str	r4, [r3, #4]
    3174:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3176:	1c48      	adds	r0, r1, #1
    3178:	191c      	adds	r4, r3, r4
    317a:	2807      	cmp	r0, #7
    317c:	940d      	str	r4, [sp, #52]	; 0x34
    317e:	900c      	str	r0, [sp, #48]	; 0x30
    3180:	ddcc      	ble.n	311c <_vfiprintf_r+0x768>
    3182:	4650      	mov	r0, sl
    3184:	4649      	mov	r1, r9
    3186:	aa0b      	add	r2, sp, #44	; 0x2c
    3188:	f7ff fbe0 	bl	294c <__sprint_r>
    318c:	2800      	cmp	r0, #0
    318e:	d0c5      	beq.n	311c <_vfiprintf_r+0x768>
    3190:	e015      	b.n	31be <_vfiprintf_r+0x80a>
    3192:	4650      	mov	r0, sl
    3194:	4649      	mov	r1, r9
    3196:	aa0b      	add	r2, sp, #44	; 0x2c
    3198:	f7ff fbd8 	bl	294c <__sprint_r>
    319c:	b978      	cbnz	r0, 31be <_vfiprintf_r+0x80a>
    319e:	2500      	movs	r5, #0
    31a0:	950c      	str	r5, [sp, #48]	; 0x30
    31a2:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    31a6:	e451      	b.n	2a4c <_vfiprintf_r+0x98>
    31a8:	00006220 	.word	0x00006220
    31ac:	00006230 	.word	0x00006230
    31b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    31b2:	b122      	cbz	r2, 31be <_vfiprintf_r+0x80a>
    31b4:	4650      	mov	r0, sl
    31b6:	4649      	mov	r1, r9
    31b8:	aa0b      	add	r2, sp, #44	; 0x2c
    31ba:	f7ff fbc7 	bl	294c <__sprint_r>
    31be:	f8b9 100c 	ldrh.w	r1, [r9, #12]
    31c2:	f001 0040 	and.w	r0, r1, #64	; 0x40
    31c6:	b203      	sxth	r3, r0
    31c8:	2b00      	cmp	r3, #0
    31ca:	f47f ac26 	bne.w	2a1a <_vfiprintf_r+0x66>
    31ce:	9803      	ldr	r0, [sp, #12]
    31d0:	b029      	add	sp, #164	; 0xa4
    31d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000031d6 <__sbprintf>:
    31d6:	b570      	push	{r4, r5, r6, lr}
    31d8:	460c      	mov	r4, r1
    31da:	8989      	ldrh	r1, [r1, #12]
    31dc:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
    31e0:	f021 0502 	bic.w	r5, r1, #2
    31e4:	6e61      	ldr	r1, [r4, #100]	; 0x64
    31e6:	f8ad 500c 	strh.w	r5, [sp, #12]
    31ea:	9119      	str	r1, [sp, #100]	; 0x64
    31ec:	89e5      	ldrh	r5, [r4, #14]
    31ee:	69e1      	ldr	r1, [r4, #28]
    31f0:	f8ad 500e 	strh.w	r5, [sp, #14]
    31f4:	9107      	str	r1, [sp, #28]
    31f6:	6a65      	ldr	r5, [r4, #36]	; 0x24
    31f8:	a91a      	add	r1, sp, #104	; 0x68
    31fa:	9100      	str	r1, [sp, #0]
    31fc:	9104      	str	r1, [sp, #16]
    31fe:	2100      	movs	r1, #0
    3200:	9509      	str	r5, [sp, #36]	; 0x24
    3202:	9106      	str	r1, [sp, #24]
    3204:	f44f 6580 	mov.w	r5, #1024	; 0x400
    3208:	4669      	mov	r1, sp
    320a:	9502      	str	r5, [sp, #8]
    320c:	9505      	str	r5, [sp, #20]
    320e:	4606      	mov	r6, r0
    3210:	f7ff fbd0 	bl	29b4 <_vfiprintf_r>
    3214:	1e05      	subs	r5, r0, #0
    3216:	db07      	blt.n	3228 <__sbprintf+0x52>
    3218:	4630      	mov	r0, r6
    321a:	4669      	mov	r1, sp
    321c:	f000 fc9c 	bl	3b58 <_fflush_r>
    3220:	2800      	cmp	r0, #0
    3222:	bf18      	it	ne
    3224:	f04f 35ff 	movne.w	r5, #4294967295
    3228:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    322c:	f003 0040 	and.w	r0, r3, #64	; 0x40
    3230:	b202      	sxth	r2, r0
    3232:	b11a      	cbz	r2, 323c <__sbprintf+0x66>
    3234:	89a1      	ldrh	r1, [r4, #12]
    3236:	f041 0340 	orr.w	r3, r1, #64	; 0x40
    323a:	81a3      	strh	r3, [r4, #12]
    323c:	4628      	mov	r0, r5
    323e:	b01a      	add	sp, #104	; 0x68
    3240:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
    3244:	bd70      	pop	{r4, r5, r6, pc}

00003246 <vfiprintf>:
    3246:	b530      	push	{r4, r5, lr}
    3248:	4613      	mov	r3, r2
    324a:	4a05      	ldr	r2, [pc, #20]	; (3260 <vfiprintf+0x1a>)
    324c:	4605      	mov	r5, r0
    324e:	460c      	mov	r4, r1
    3250:	6810      	ldr	r0, [r2, #0]
    3252:	4629      	mov	r1, r5
    3254:	4622      	mov	r2, r4
    3256:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    325a:	f7ff bbab 	b.w	29b4 <_vfiprintf_r>
    325e:	bf00      	nop
    3260:	20000050 	.word	0x20000050

00003264 <__svfscanf_r>:
    3264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3268:	460c      	mov	r4, r1
    326a:	b0d9      	sub	sp, #356	; 0x164
    326c:	4680      	mov	r8, r0
    326e:	4616      	mov	r6, r2
    3270:	461d      	mov	r5, r3
    3272:	f000 fdc9 	bl	3e08 <__sfp_lock_acquire>
    3276:	89a3      	ldrh	r3, [r4, #12]
    3278:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
    327c:	b210      	sxth	r0, r2
    327e:	b930      	cbnz	r0, 328e <__svfscanf_r+0x2a>
    3280:	6e67      	ldr	r7, [r4, #100]	; 0x64
    3282:	f443 5100 	orr.w	r1, r3, #8192	; 0x2000
    3286:	f427 5300 	bic.w	r3, r7, #8192	; 0x2000
    328a:	81a1      	strh	r1, [r4, #12]
    328c:	6663      	str	r3, [r4, #100]	; 0x64
    328e:	9607      	str	r6, [sp, #28]
    3290:	2600      	movs	r6, #0
    3292:	9605      	str	r6, [sp, #20]
    3294:	9602      	str	r6, [sp, #8]
    3296:	9604      	str	r6, [sp, #16]
    3298:	9f07      	ldr	r7, [sp, #28]
    329a:	f817 2b01 	ldrb.w	r2, [r7], #1
    329e:	9707      	str	r7, [sp, #28]
    32a0:	9209      	str	r2, [sp, #36]	; 0x24
    32a2:	2a00      	cmp	r2, #0
    32a4:	f000 83ab 	beq.w	39fe <__svfscanf_r+0x79a>
    32a8:	489f      	ldr	r0, [pc, #636]	; (3528 <__svfscanf_r+0x2c4>)
    32aa:	6801      	ldr	r1, [r0, #0]
    32ac:	188f      	adds	r7, r1, r2
    32ae:	f897 b001 	ldrb.w	fp, [r7, #1]
    32b2:	f00b 0b08 	and.w	fp, fp, #8
    32b6:	fa5f f38b 	uxtb.w	r3, fp
    32ba:	b1db      	cbz	r3, 32f4 <__svfscanf_r+0x90>
    32bc:	6867      	ldr	r7, [r4, #4]
    32be:	2f00      	cmp	r7, #0
    32c0:	dd11      	ble.n	32e6 <__svfscanf_r+0x82>
    32c2:	4999      	ldr	r1, [pc, #612]	; (3528 <__svfscanf_r+0x2c4>)
    32c4:	6823      	ldr	r3, [r4, #0]
    32c6:	6808      	ldr	r0, [r1, #0]
    32c8:	781a      	ldrb	r2, [r3, #0]
    32ca:	1887      	adds	r7, r0, r2
    32cc:	787a      	ldrb	r2, [r7, #1]
    32ce:	f002 0108 	and.w	r1, r2, #8
    32d2:	b2c8      	uxtb	r0, r1
    32d4:	2800      	cmp	r0, #0
    32d6:	d0df      	beq.n	3298 <__svfscanf_r+0x34>
    32d8:	6867      	ldr	r7, [r4, #4]
    32da:	3301      	adds	r3, #1
    32dc:	1e7a      	subs	r2, r7, #1
    32de:	3601      	adds	r6, #1
    32e0:	6062      	str	r2, [r4, #4]
    32e2:	6023      	str	r3, [r4, #0]
    32e4:	e7ea      	b.n	32bc <__svfscanf_r+0x58>
    32e6:	4640      	mov	r0, r8
    32e8:	4621      	mov	r1, r4
    32ea:	f001 fdf4 	bl	4ed6 <__srefill_r>
    32ee:	2800      	cmp	r0, #0
    32f0:	d0e7      	beq.n	32c2 <__svfscanf_r+0x5e>
    32f2:	e7d1      	b.n	3298 <__svfscanf_r+0x34>
    32f4:	2a25      	cmp	r2, #37	; 0x25
    32f6:	d151      	bne.n	339c <__svfscanf_r+0x138>
    32f8:	9a07      	ldr	r2, [sp, #28]
    32fa:	469b      	mov	fp, r3
    32fc:	469a      	mov	sl, r3
    32fe:	9f07      	ldr	r7, [sp, #28]
    3300:	f817 0b01 	ldrb.w	r0, [r7], #1
    3304:	2864      	cmp	r0, #100	; 0x64
    3306:	9707      	str	r7, [sp, #28]
    3308:	f000 80be 	beq.w	3488 <__svfscanf_r+0x224>
    330c:	d827      	bhi.n	335e <__svfscanf_r+0xfa>
    330e:	284c      	cmp	r0, #76	; 0x4c
    3310:	d069      	beq.n	33e6 <__svfscanf_r+0x182>
    3312:	d811      	bhi.n	3338 <__svfscanf_r+0xd4>
    3314:	2839      	cmp	r0, #57	; 0x39
    3316:	d80b      	bhi.n	3330 <__svfscanf_r+0xcc>
    3318:	2830      	cmp	r0, #48	; 0x30
    331a:	d267      	bcs.n	33ec <__svfscanf_r+0x188>
    331c:	2825      	cmp	r0, #37	; 0x25
    331e:	d03d      	beq.n	339c <__svfscanf_r+0x138>
    3320:	282a      	cmp	r0, #42	; 0x2a
    3322:	d054      	beq.n	33ce <__svfscanf_r+0x16a>
    3324:	2800      	cmp	r0, #0
    3326:	f040 80a2 	bne.w	346e <__svfscanf_r+0x20a>
    332a:	f000 fd6e 	bl	3e0a <__sfp_lock_release>
    332e:	e35c      	b.n	39ea <__svfscanf_r+0x786>
    3330:	2844      	cmp	r0, #68	; 0x44
    3332:	f040 809c 	bne.w	346e <__svfscanf_r+0x20a>
    3336:	e0a0      	b.n	347a <__svfscanf_r+0x216>
    3338:	2858      	cmp	r0, #88	; 0x58
    333a:	d063      	beq.n	3404 <__svfscanf_r+0x1a0>
    333c:	d805      	bhi.n	334a <__svfscanf_r+0xe6>
    333e:	284f      	cmp	r0, #79	; 0x4f
    3340:	f040 8095 	bne.w	346e <__svfscanf_r+0x20a>
    3344:	f04b 0b01 	orr.w	fp, fp, #1
    3348:	e056      	b.n	33f8 <__svfscanf_r+0x194>
    334a:	285b      	cmp	r0, #91	; 0x5b
    334c:	d060      	beq.n	3410 <__svfscanf_r+0x1ac>
    334e:	2863      	cmp	r0, #99	; 0x63
    3350:	f040 808d 	bne.w	346e <__svfscanf_r+0x20a>
    3354:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
    3358:	f04f 0900 	mov.w	r9, #0
    335c:	e09a      	b.n	3494 <__svfscanf_r+0x230>
    335e:	286f      	cmp	r0, #111	; 0x6f
    3360:	d04a      	beq.n	33f8 <__svfscanf_r+0x194>
    3362:	d80e      	bhi.n	3382 <__svfscanf_r+0x11e>
    3364:	2869      	cmp	r0, #105	; 0x69
    3366:	f000 808b 	beq.w	3480 <__svfscanf_r+0x21c>
    336a:	d805      	bhi.n	3378 <__svfscanf_r+0x114>
    336c:	2868      	cmp	r0, #104	; 0x68
    336e:	d17e      	bne.n	346e <__svfscanf_r+0x20a>
    3370:	f04b 0b04 	orr.w	fp, fp, #4
    3374:	9a07      	ldr	r2, [sp, #28]
    3376:	e7c2      	b.n	32fe <__svfscanf_r+0x9a>
    3378:	286c      	cmp	r0, #108	; 0x6c
    337a:	d02b      	beq.n	33d4 <__svfscanf_r+0x170>
    337c:	286e      	cmp	r0, #110	; 0x6e
    337e:	d176      	bne.n	346e <__svfscanf_r+0x20a>
    3380:	e054      	b.n	342c <__svfscanf_r+0x1c8>
    3382:	2873      	cmp	r0, #115	; 0x73
    3384:	d041      	beq.n	340a <__svfscanf_r+0x1a6>
    3386:	d804      	bhi.n	3392 <__svfscanf_r+0x12e>
    3388:	2870      	cmp	r0, #112	; 0x70
    338a:	d170      	bne.n	346e <__svfscanf_r+0x20a>
    338c:	f44b 7b08 	orr.w	fp, fp, #544	; 0x220
    3390:	e048      	b.n	3424 <__svfscanf_r+0x1c0>
    3392:	2875      	cmp	r0, #117	; 0x75
    3394:	d034      	beq.n	3400 <__svfscanf_r+0x19c>
    3396:	2878      	cmp	r0, #120	; 0x78
    3398:	d169      	bne.n	346e <__svfscanf_r+0x20a>
    339a:	e033      	b.n	3404 <__svfscanf_r+0x1a0>
    339c:	6867      	ldr	r7, [r4, #4]
    339e:	2f00      	cmp	r7, #0
    33a0:	dd0e      	ble.n	33c0 <__svfscanf_r+0x15c>
    33a2:	6823      	ldr	r3, [r4, #0]
    33a4:	9f07      	ldr	r7, [sp, #28]
    33a6:	7819      	ldrb	r1, [r3, #0]
    33a8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    33ac:	4291      	cmp	r1, r2
    33ae:	f040 8326 	bne.w	39fe <__svfscanf_r+0x79a>
    33b2:	6860      	ldr	r0, [r4, #4]
    33b4:	3301      	adds	r3, #1
    33b6:	1e47      	subs	r7, r0, #1
    33b8:	6067      	str	r7, [r4, #4]
    33ba:	6023      	str	r3, [r4, #0]
    33bc:	3601      	adds	r6, #1
    33be:	e76b      	b.n	3298 <__svfscanf_r+0x34>
    33c0:	4640      	mov	r0, r8
    33c2:	4621      	mov	r1, r4
    33c4:	f001 fd87 	bl	4ed6 <__srefill_r>
    33c8:	2800      	cmp	r0, #0
    33ca:	d0ea      	beq.n	33a2 <__svfscanf_r+0x13e>
    33cc:	e309      	b.n	39e2 <__svfscanf_r+0x77e>
    33ce:	f04b 0b10 	orr.w	fp, fp, #16
    33d2:	e7cf      	b.n	3374 <__svfscanf_r+0x110>
    33d4:	7853      	ldrb	r3, [r2, #1]
    33d6:	2b6c      	cmp	r3, #108	; 0x6c
    33d8:	d102      	bne.n	33e0 <__svfscanf_r+0x17c>
    33da:	3202      	adds	r2, #2
    33dc:	9207      	str	r2, [sp, #28]
    33de:	e002      	b.n	33e6 <__svfscanf_r+0x182>
    33e0:	f04b 0b01 	orr.w	fp, fp, #1
    33e4:	e7c6      	b.n	3374 <__svfscanf_r+0x110>
    33e6:	f04b 0b02 	orr.w	fp, fp, #2
    33ea:	e7c3      	b.n	3374 <__svfscanf_r+0x110>
    33ec:	220a      	movs	r2, #10
    33ee:	fb02 0a0a 	mla	sl, r2, sl, r0
    33f2:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
    33f6:	e7bd      	b.n	3374 <__svfscanf_r+0x110>
    33f8:	484c      	ldr	r0, [pc, #304]	; (352c <__svfscanf_r+0x2c8>)
    33fa:	2708      	movs	r7, #8
    33fc:	9005      	str	r0, [sp, #20]
    33fe:	e046      	b.n	348e <__svfscanf_r+0x22a>
    3400:	4f4a      	ldr	r7, [pc, #296]	; (352c <__svfscanf_r+0x2c8>)
    3402:	e042      	b.n	348a <__svfscanf_r+0x226>
    3404:	f44b 7b00 	orr.w	fp, fp, #512	; 0x200
    3408:	e00c      	b.n	3424 <__svfscanf_r+0x1c0>
    340a:	f04f 0902 	mov.w	r9, #2
    340e:	e041      	b.n	3494 <__svfscanf_r+0x230>
    3410:	a818      	add	r0, sp, #96	; 0x60
    3412:	9907      	ldr	r1, [sp, #28]
    3414:	f001 fde8 	bl	4fe8 <__sccl>
    3418:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
    341c:	9007      	str	r0, [sp, #28]
    341e:	f04f 0901 	mov.w	r9, #1
    3422:	e037      	b.n	3494 <__svfscanf_r+0x230>
    3424:	4a41      	ldr	r2, [pc, #260]	; (352c <__svfscanf_r+0x2c8>)
    3426:	2710      	movs	r7, #16
    3428:	9205      	str	r2, [sp, #20]
    342a:	e030      	b.n	348e <__svfscanf_r+0x22a>
    342c:	f01b 0f10 	tst.w	fp, #16
    3430:	f47f af32 	bne.w	3298 <__svfscanf_r+0x34>
    3434:	f01b 0f04 	tst.w	fp, #4
    3438:	f105 0104 	add.w	r1, r5, #4
    343c:	d002      	beq.n	3444 <__svfscanf_r+0x1e0>
    343e:	682d      	ldr	r5, [r5, #0]
    3440:	802e      	strh	r6, [r5, #0]
    3442:	e004      	b.n	344e <__svfscanf_r+0x1ea>
    3444:	f01b 0f01 	tst.w	fp, #1
    3448:	d003      	beq.n	3452 <__svfscanf_r+0x1ee>
    344a:	682f      	ldr	r7, [r5, #0]
    344c:	603e      	str	r6, [r7, #0]
    344e:	460d      	mov	r5, r1
    3450:	e722      	b.n	3298 <__svfscanf_r+0x34>
    3452:	f01b 0f02 	tst.w	fp, #2
    3456:	f105 0704 	add.w	r7, r5, #4
    345a:	d004      	beq.n	3466 <__svfscanf_r+0x202>
    345c:	682a      	ldr	r2, [r5, #0]
    345e:	17f0      	asrs	r0, r6, #31
    3460:	6016      	str	r6, [r2, #0]
    3462:	6050      	str	r0, [r2, #4]
    3464:	e001      	b.n	346a <__svfscanf_r+0x206>
    3466:	682d      	ldr	r5, [r5, #0]
    3468:	602e      	str	r6, [r5, #0]
    346a:	463d      	mov	r5, r7
    346c:	e714      	b.n	3298 <__svfscanf_r+0x34>
    346e:	180f      	adds	r7, r1, r0
    3470:	787b      	ldrb	r3, [r7, #1]
    3472:	f003 0103 	and.w	r1, r3, #3
    3476:	2901      	cmp	r1, #1
    3478:	d106      	bne.n	3488 <__svfscanf_r+0x224>
    347a:	f04b 0b01 	orr.w	fp, fp, #1
    347e:	e003      	b.n	3488 <__svfscanf_r+0x224>
    3480:	482b      	ldr	r0, [pc, #172]	; (3530 <__svfscanf_r+0x2cc>)
    3482:	2700      	movs	r7, #0
    3484:	9005      	str	r0, [sp, #20]
    3486:	e002      	b.n	348e <__svfscanf_r+0x22a>
    3488:	4f29      	ldr	r7, [pc, #164]	; (3530 <__svfscanf_r+0x2cc>)
    348a:	9705      	str	r7, [sp, #20]
    348c:	270a      	movs	r7, #10
    348e:	9702      	str	r7, [sp, #8]
    3490:	f04f 0903 	mov.w	r9, #3
    3494:	6863      	ldr	r3, [r4, #4]
    3496:	2b00      	cmp	r3, #0
    3498:	dd03      	ble.n	34a2 <__svfscanf_r+0x23e>
    349a:	f01b 0f40 	tst.w	fp, #64	; 0x40
    349e:	d122      	bne.n	34e6 <__svfscanf_r+0x282>
    34a0:	e00e      	b.n	34c0 <__svfscanf_r+0x25c>
    34a2:	4640      	mov	r0, r8
    34a4:	4621      	mov	r1, r4
    34a6:	f001 fd16 	bl	4ed6 <__srefill_r>
    34aa:	2800      	cmp	r0, #0
    34ac:	d0f5      	beq.n	349a <__svfscanf_r+0x236>
    34ae:	e298      	b.n	39e2 <__svfscanf_r+0x77e>
    34b0:	6863      	ldr	r3, [r4, #4]
    34b2:	1e5a      	subs	r2, r3, #1
    34b4:	3601      	adds	r6, #1
    34b6:	2a00      	cmp	r2, #0
    34b8:	6062      	str	r2, [r4, #4]
    34ba:	dd0d      	ble.n	34d8 <__svfscanf_r+0x274>
    34bc:	3001      	adds	r0, #1
    34be:	6020      	str	r0, [r4, #0]
    34c0:	4919      	ldr	r1, [pc, #100]	; (3528 <__svfscanf_r+0x2c4>)
    34c2:	6820      	ldr	r0, [r4, #0]
    34c4:	680b      	ldr	r3, [r1, #0]
    34c6:	7802      	ldrb	r2, [r0, #0]
    34c8:	189a      	adds	r2, r3, r2
    34ca:	7851      	ldrb	r1, [r2, #1]
    34cc:	f001 0308 	and.w	r3, r1, #8
    34d0:	b2da      	uxtb	r2, r3
    34d2:	2a00      	cmp	r2, #0
    34d4:	d1ec      	bne.n	34b0 <__svfscanf_r+0x24c>
    34d6:	e006      	b.n	34e6 <__svfscanf_r+0x282>
    34d8:	4640      	mov	r0, r8
    34da:	4621      	mov	r1, r4
    34dc:	f001 fcfb 	bl	4ed6 <__srefill_r>
    34e0:	2800      	cmp	r0, #0
    34e2:	d0ed      	beq.n	34c0 <__svfscanf_r+0x25c>
    34e4:	e27d      	b.n	39e2 <__svfscanf_r+0x77e>
    34e6:	f1b9 0f02 	cmp.w	r9, #2
    34ea:	f000 80e6 	beq.w	36ba <__svfscanf_r+0x456>
    34ee:	f1b9 0f03 	cmp.w	r9, #3
    34f2:	f000 81aa 	beq.w	384a <__svfscanf_r+0x5e6>
    34f6:	f1b9 0f01 	cmp.w	r9, #1
    34fa:	f000 808a 	beq.w	3612 <__svfscanf_r+0x3ae>
    34fe:	f1ba 0f00 	cmp.w	sl, #0
    3502:	bf08      	it	eq
    3504:	f04f 0a01 	moveq.w	sl, #1
    3508:	f01b 0901 	ands.w	r9, fp, #1
    350c:	d054      	beq.n	35b8 <__svfscanf_r+0x354>
    350e:	2100      	movs	r1, #0
    3510:	2208      	movs	r2, #8
    3512:	a80a      	add	r0, sp, #40	; 0x28
    3514:	f7ff f932 	bl	277c <memset>
    3518:	f01b 0710 	ands.w	r7, fp, #16
    351c:	d10a      	bne.n	3534 <__svfscanf_r+0x2d0>
    351e:	f8d5 9000 	ldr.w	r9, [r5]
    3522:	3504      	adds	r5, #4
    3524:	e008      	b.n	3538 <__svfscanf_r+0x2d4>
    3526:	bf00      	nop
    3528:	20000480 	.word	0x20000480
    352c:	000053a5 	.word	0x000053a5
    3530:	000050ed 	.word	0x000050ed
    3534:	f04f 0900 	mov.w	r9, #0
    3538:	f04f 0b00 	mov.w	fp, #0
    353c:	f001 f824 	bl	4588 <__locale_mb_cur_max>
    3540:	4583      	cmp	fp, r0
    3542:	f000 824e 	beq.w	39e2 <__svfscanf_r+0x77e>
    3546:	6820      	ldr	r0, [r4, #0]
    3548:	6863      	ldr	r3, [r4, #4]
    354a:	f810 1b01 	ldrb.w	r1, [r0], #1
    354e:	aa0e      	add	r2, sp, #56	; 0x38
    3550:	6020      	str	r0, [r4, #0]
    3552:	f802 100b 	strb.w	r1, [r2, fp]
    3556:	a80a      	add	r0, sp, #40	; 0x28
    3558:	1e59      	subs	r1, r3, #1
    355a:	f10b 0b01 	add.w	fp, fp, #1
    355e:	6061      	str	r1, [r4, #4]
    3560:	9000      	str	r0, [sp, #0]
    3562:	4649      	mov	r1, r9
    3564:	4640      	mov	r0, r8
    3566:	465b      	mov	r3, fp
    3568:	f001 faaa 	bl	4ac0 <_mbrtowc_r>
    356c:	1c42      	adds	r2, r0, #1
    356e:	f000 8238 	beq.w	39e2 <__svfscanf_r+0x77e>
    3572:	b918      	cbnz	r0, 357c <__svfscanf_r+0x318>
    3574:	b927      	cbnz	r7, 3580 <__svfscanf_r+0x31c>
    3576:	f8c9 7000 	str.w	r7, [r9]
    357a:	e001      	b.n	3580 <__svfscanf_r+0x31c>
    357c:	3002      	adds	r0, #2
    357e:	d007      	beq.n	3590 <__svfscanf_r+0x32c>
    3580:	445e      	add	r6, fp
    3582:	f10a 3aff 	add.w	sl, sl, #4294967295
    3586:	b90f      	cbnz	r7, 358c <__svfscanf_r+0x328>
    3588:	f109 0904 	add.w	r9, r9, #4
    358c:	f04f 0b00 	mov.w	fp, #0
    3590:	6862      	ldr	r2, [r4, #4]
    3592:	2a00      	cmp	r2, #0
    3594:	dc0c      	bgt.n	35b0 <__svfscanf_r+0x34c>
    3596:	4640      	mov	r0, r8
    3598:	4621      	mov	r1, r4
    359a:	f001 fc9c 	bl	4ed6 <__srefill_r>
    359e:	b138      	cbz	r0, 35b0 <__svfscanf_r+0x34c>
    35a0:	f1bb 0f00 	cmp.w	fp, #0
    35a4:	f040 821d 	bne.w	39e2 <__svfscanf_r+0x77e>
    35a8:	2f00      	cmp	r7, #0
    35aa:	f000 80fa 	beq.w	37a2 <__svfscanf_r+0x53e>
    35ae:	e673      	b.n	3298 <__svfscanf_r+0x34>
    35b0:	f1ba 0f00 	cmp.w	sl, #0
    35b4:	d1c2      	bne.n	353c <__svfscanf_r+0x2d8>
    35b6:	e7f7      	b.n	35a8 <__svfscanf_r+0x344>
    35b8:	f01b 0f10 	tst.w	fp, #16
    35bc:	d01b      	beq.n	35f6 <__svfscanf_r+0x392>
    35be:	6867      	ldr	r7, [r4, #4]
    35c0:	6820      	ldr	r0, [r4, #0]
    35c2:	4557      	cmp	r7, sl
    35c4:	da0f      	bge.n	35e6 <__svfscanf_r+0x382>
    35c6:	19c2      	adds	r2, r0, r7
    35c8:	6022      	str	r2, [r4, #0]
    35ca:	4640      	mov	r0, r8
    35cc:	4621      	mov	r1, r4
    35ce:	44b9      	add	r9, r7
    35d0:	ebc7 0a0a 	rsb	sl, r7, sl
    35d4:	f001 fc7f 	bl	4ed6 <__srefill_r>
    35d8:	2800      	cmp	r0, #0
    35da:	d0f0      	beq.n	35be <__svfscanf_r+0x35a>
    35dc:	f1b9 0f00 	cmp.w	r9, #0
    35e0:	f040 81fd 	bne.w	39de <__svfscanf_r+0x77a>
    35e4:	e1fd      	b.n	39e2 <__svfscanf_r+0x77e>
    35e6:	ebca 0107 	rsb	r1, sl, r7
    35ea:	eb00 030a 	add.w	r3, r0, sl
    35ee:	44d1      	add	r9, sl
    35f0:	6061      	str	r1, [r4, #4]
    35f2:	6023      	str	r3, [r4, #0]
    35f4:	e1f3      	b.n	39de <__svfscanf_r+0x77a>
    35f6:	9400      	str	r4, [sp, #0]
    35f8:	4640      	mov	r0, r8
    35fa:	6829      	ldr	r1, [r5, #0]
    35fc:	2201      	movs	r2, #1
    35fe:	4653      	mov	r3, sl
    3600:	f105 0904 	add.w	r9, r5, #4
    3604:	f000 fc8c 	bl	3f20 <_fread_r>
    3608:	2800      	cmp	r0, #0
    360a:	f000 81ea 	beq.w	39e2 <__svfscanf_r+0x77e>
    360e:	1986      	adds	r6, r0, r6
    3610:	e116      	b.n	3840 <__svfscanf_r+0x5dc>
    3612:	f1ba 0f00 	cmp.w	sl, #0
    3616:	bf08      	it	eq
    3618:	f04f 3aff 	moveq.w	sl, #4294967295
    361c:	f01b 0f10 	tst.w	fp, #16
    3620:	d01e      	beq.n	3660 <__svfscanf_r+0x3fc>
    3622:	f04f 0900 	mov.w	r9, #0
    3626:	6823      	ldr	r3, [r4, #0]
    3628:	a818      	add	r0, sp, #96	; 0x60
    362a:	781a      	ldrb	r2, [r3, #0]
    362c:	5c81      	ldrb	r1, [r0, r2]
    362e:	b191      	cbz	r1, 3656 <__svfscanf_r+0x3f2>
    3630:	6862      	ldr	r2, [r4, #4]
    3632:	f109 0901 	add.w	r9, r9, #1
    3636:	1e50      	subs	r0, r2, #1
    3638:	3301      	adds	r3, #1
    363a:	45ca      	cmp	sl, r9
    363c:	6060      	str	r0, [r4, #4]
    363e:	6023      	str	r3, [r4, #0]
    3640:	f000 81cd 	beq.w	39de <__svfscanf_r+0x77a>
    3644:	2800      	cmp	r0, #0
    3646:	dcee      	bgt.n	3626 <__svfscanf_r+0x3c2>
    3648:	4640      	mov	r0, r8
    364a:	4621      	mov	r1, r4
    364c:	f001 fc43 	bl	4ed6 <__srefill_r>
    3650:	2800      	cmp	r0, #0
    3652:	d0e8      	beq.n	3626 <__svfscanf_r+0x3c2>
    3654:	e1c3      	b.n	39de <__svfscanf_r+0x77a>
    3656:	f1b9 0f00 	cmp.w	r9, #0
    365a:	f040 81c0 	bne.w	39de <__svfscanf_r+0x77a>
    365e:	e1ce      	b.n	39fe <__svfscanf_r+0x79a>
    3660:	f8d5 9000 	ldr.w	r9, [r5]
    3664:	f105 0b04 	add.w	fp, r5, #4
    3668:	464d      	mov	r5, r9
    366a:	6823      	ldr	r3, [r4, #0]
    366c:	a918      	add	r1, sp, #96	; 0x60
    366e:	7818      	ldrb	r0, [r3, #0]
    3670:	5c0a      	ldrb	r2, [r1, r0]
    3672:	b1ba      	cbz	r2, 36a4 <__svfscanf_r+0x440>
    3674:	6860      	ldr	r0, [r4, #4]
    3676:	1e41      	subs	r1, r0, #1
    3678:	6061      	str	r1, [r4, #4]
    367a:	f813 2b01 	ldrb.w	r2, [r3], #1
    367e:	f805 2b01 	strb.w	r2, [r5], #1
    3682:	6023      	str	r3, [r4, #0]
    3684:	eb09 030a 	add.w	r3, r9, sl
    3688:	42ab      	cmp	r3, r5
    368a:	d00b      	beq.n	36a4 <__svfscanf_r+0x440>
    368c:	6860      	ldr	r0, [r4, #4]
    368e:	2800      	cmp	r0, #0
    3690:	dceb      	bgt.n	366a <__svfscanf_r+0x406>
    3692:	4640      	mov	r0, r8
    3694:	4621      	mov	r1, r4
    3696:	f001 fc1e 	bl	4ed6 <__srefill_r>
    369a:	2800      	cmp	r0, #0
    369c:	d0e5      	beq.n	366a <__svfscanf_r+0x406>
    369e:	454d      	cmp	r5, r9
    36a0:	f000 819f 	beq.w	39e2 <__svfscanf_r+0x77e>
    36a4:	ebb5 0909 	subs.w	r9, r5, r9
    36a8:	f000 81a9 	beq.w	39fe <__svfscanf_r+0x79a>
    36ac:	2700      	movs	r7, #0
    36ae:	702f      	strb	r7, [r5, #0]
    36b0:	9d04      	ldr	r5, [sp, #16]
    36b2:	1c69      	adds	r1, r5, #1
    36b4:	9104      	str	r1, [sp, #16]
    36b6:	465d      	mov	r5, fp
    36b8:	e191      	b.n	39de <__svfscanf_r+0x77a>
    36ba:	f1ba 0f00 	cmp.w	sl, #0
    36be:	bf08      	it	eq
    36c0:	f04f 3aff 	moveq.w	sl, #4294967295
    36c4:	f01b 0901 	ands.w	r9, fp, #1
    36c8:	d06f      	beq.n	37aa <__svfscanf_r+0x546>
    36ca:	2100      	movs	r1, #0
    36cc:	2208      	movs	r2, #8
    36ce:	a80c      	add	r0, sp, #48	; 0x30
    36d0:	f7ff f854 	bl	277c <memset>
    36d4:	f01b 0710 	ands.w	r7, fp, #16
    36d8:	d103      	bne.n	36e2 <__svfscanf_r+0x47e>
    36da:	f8d5 9000 	ldr.w	r9, [r5]
    36de:	3504      	adds	r5, #4
    36e0:	e001      	b.n	36e6 <__svfscanf_r+0x482>
    36e2:	f10d 0924 	add.w	r9, sp, #36	; 0x24
    36e6:	f04f 0b00 	mov.w	fp, #0
    36ea:	6822      	ldr	r2, [r4, #0]
    36ec:	4990      	ldr	r1, [pc, #576]	; (3930 <__svfscanf_r+0x6cc>)
    36ee:	7813      	ldrb	r3, [r2, #0]
    36f0:	6808      	ldr	r0, [r1, #0]
    36f2:	18c2      	adds	r2, r0, r3
    36f4:	7853      	ldrb	r3, [r2, #1]
    36f6:	f003 0108 	and.w	r1, r3, #8
    36fa:	b2c8      	uxtb	r0, r1
    36fc:	2800      	cmp	r0, #0
    36fe:	d14b      	bne.n	3798 <__svfscanf_r+0x534>
    3700:	f1ba 0f00 	cmp.w	sl, #0
    3704:	d048      	beq.n	3798 <__svfscanf_r+0x534>
    3706:	f000 ff3f 	bl	4588 <__locale_mb_cur_max>
    370a:	4583      	cmp	fp, r0
    370c:	f000 8169 	beq.w	39e2 <__svfscanf_r+0x77e>
    3710:	6823      	ldr	r3, [r4, #0]
    3712:	6860      	ldr	r0, [r4, #4]
    3714:	f813 1b01 	ldrb.w	r1, [r3], #1
    3718:	aa0e      	add	r2, sp, #56	; 0x38
    371a:	6023      	str	r3, [r4, #0]
    371c:	f802 100b 	strb.w	r1, [r2, fp]
    3720:	ab0c      	add	r3, sp, #48	; 0x30
    3722:	1e41      	subs	r1, r0, #1
    3724:	f10b 0b01 	add.w	fp, fp, #1
    3728:	6061      	str	r1, [r4, #4]
    372a:	9300      	str	r3, [sp, #0]
    372c:	4640      	mov	r0, r8
    372e:	465b      	mov	r3, fp
    3730:	4649      	mov	r1, r9
    3732:	f001 f9c5 	bl	4ac0 <_mbrtowc_r>
    3736:	1c43      	adds	r3, r0, #1
    3738:	f000 8153 	beq.w	39e2 <__svfscanf_r+0x77e>
    373c:	b910      	cbnz	r0, 3744 <__svfscanf_r+0x4e0>
    373e:	f8c9 0000 	str.w	r0, [r9]
    3742:	e001      	b.n	3748 <__svfscanf_r+0x4e4>
    3744:	3002      	adds	r0, #2
    3746:	d01a      	beq.n	377e <__svfscanf_r+0x51a>
    3748:	f8d9 0000 	ldr.w	r0, [r9]
    374c:	f000 fee8 	bl	4520 <iswspace>
    3750:	b160      	cbz	r0, 376c <__svfscanf_r+0x508>
    3752:	f1bb 0f00 	cmp.w	fp, #0
    3756:	d01f      	beq.n	3798 <__svfscanf_r+0x534>
    3758:	f10b 3bff 	add.w	fp, fp, #4294967295
    375c:	a90e      	add	r1, sp, #56	; 0x38
    375e:	4640      	mov	r0, r8
    3760:	f811 100b 	ldrb.w	r1, [r1, fp]
    3764:	4622      	mov	r2, r4
    3766:	f001 ff94 	bl	5692 <_ungetc_r>
    376a:	e7f2      	b.n	3752 <__svfscanf_r+0x4ee>
    376c:	445e      	add	r6, fp
    376e:	f10a 3aff 	add.w	sl, sl, #4294967295
    3772:	b91f      	cbnz	r7, 377c <__svfscanf_r+0x518>
    3774:	f109 0904 	add.w	r9, r9, #4
    3778:	46bb      	mov	fp, r7
    377a:	e000      	b.n	377e <__svfscanf_r+0x51a>
    377c:	4683      	mov	fp, r0
    377e:	6862      	ldr	r2, [r4, #4]
    3780:	2a00      	cmp	r2, #0
    3782:	dcb2      	bgt.n	36ea <__svfscanf_r+0x486>
    3784:	4640      	mov	r0, r8
    3786:	4621      	mov	r1, r4
    3788:	f001 fba5 	bl	4ed6 <__srefill_r>
    378c:	2800      	cmp	r0, #0
    378e:	d0ac      	beq.n	36ea <__svfscanf_r+0x486>
    3790:	f1bb 0f00 	cmp.w	fp, #0
    3794:	f040 8125 	bne.w	39e2 <__svfscanf_r+0x77e>
    3798:	2f00      	cmp	r7, #0
    379a:	f47f ad7d 	bne.w	3298 <__svfscanf_r+0x34>
    379e:	f8c9 7000 	str.w	r7, [r9]
    37a2:	9f04      	ldr	r7, [sp, #16]
    37a4:	1c78      	adds	r0, r7, #1
    37a6:	9004      	str	r0, [sp, #16]
    37a8:	e576      	b.n	3298 <__svfscanf_r+0x34>
    37aa:	f01b 0f10 	tst.w	fp, #16
    37ae:	d01e      	beq.n	37ee <__svfscanf_r+0x58a>
    37b0:	4a5f      	ldr	r2, [pc, #380]	; (3930 <__svfscanf_r+0x6cc>)
    37b2:	6820      	ldr	r0, [r4, #0]
    37b4:	6813      	ldr	r3, [r2, #0]
    37b6:	7807      	ldrb	r7, [r0, #0]
    37b8:	19d9      	adds	r1, r3, r7
    37ba:	784f      	ldrb	r7, [r1, #1]
    37bc:	f007 0208 	and.w	r2, r7, #8
    37c0:	b2d3      	uxtb	r3, r2
    37c2:	2b00      	cmp	r3, #0
    37c4:	f040 810b 	bne.w	39de <__svfscanf_r+0x77a>
    37c8:	6861      	ldr	r1, [r4, #4]
    37ca:	f109 0901 	add.w	r9, r9, #1
    37ce:	1e4f      	subs	r7, r1, #1
    37d0:	3001      	adds	r0, #1
    37d2:	45ca      	cmp	sl, r9
    37d4:	6067      	str	r7, [r4, #4]
    37d6:	6020      	str	r0, [r4, #0]
    37d8:	f000 8101 	beq.w	39de <__svfscanf_r+0x77a>
    37dc:	2f00      	cmp	r7, #0
    37de:	dce7      	bgt.n	37b0 <__svfscanf_r+0x54c>
    37e0:	4640      	mov	r0, r8
    37e2:	4621      	mov	r1, r4
    37e4:	f001 fb77 	bl	4ed6 <__srefill_r>
    37e8:	2800      	cmp	r0, #0
    37ea:	d0e1      	beq.n	37b0 <__svfscanf_r+0x54c>
    37ec:	e0f7      	b.n	39de <__svfscanf_r+0x77a>
    37ee:	f8d5 b000 	ldr.w	fp, [r5]
    37f2:	f105 0904 	add.w	r9, r5, #4
    37f6:	465d      	mov	r5, fp
    37f8:	494d      	ldr	r1, [pc, #308]	; (3930 <__svfscanf_r+0x6cc>)
    37fa:	6820      	ldr	r0, [r4, #0]
    37fc:	680f      	ldr	r7, [r1, #0]
    37fe:	7803      	ldrb	r3, [r0, #0]
    3800:	18fa      	adds	r2, r7, r3
    3802:	7853      	ldrb	r3, [r2, #1]
    3804:	f003 0108 	and.w	r1, r3, #8
    3808:	b2cf      	uxtb	r7, r1
    380a:	b9a7      	cbnz	r7, 3836 <__svfscanf_r+0x5d2>
    380c:	6862      	ldr	r2, [r4, #4]
    380e:	1e53      	subs	r3, r2, #1
    3810:	6063      	str	r3, [r4, #4]
    3812:	f810 1b01 	ldrb.w	r1, [r0], #1
    3816:	f805 1b01 	strb.w	r1, [r5], #1
    381a:	6020      	str	r0, [r4, #0]
    381c:	eb0b 000a 	add.w	r0, fp, sl
    3820:	42a8      	cmp	r0, r5
    3822:	d008      	beq.n	3836 <__svfscanf_r+0x5d2>
    3824:	6867      	ldr	r7, [r4, #4]
    3826:	2f00      	cmp	r7, #0
    3828:	dce6      	bgt.n	37f8 <__svfscanf_r+0x594>
    382a:	4640      	mov	r0, r8
    382c:	4621      	mov	r1, r4
    382e:	f001 fb52 	bl	4ed6 <__srefill_r>
    3832:	2800      	cmp	r0, #0
    3834:	d0e0      	beq.n	37f8 <__svfscanf_r+0x594>
    3836:	2200      	movs	r2, #0
    3838:	702a      	strb	r2, [r5, #0]
    383a:	ebcb 0505 	rsb	r5, fp, r5
    383e:	1976      	adds	r6, r6, r5
    3840:	9b04      	ldr	r3, [sp, #16]
    3842:	1c59      	adds	r1, r3, #1
    3844:	9104      	str	r1, [sp, #16]
    3846:	464d      	mov	r5, r9
    3848:	e526      	b.n	3298 <__svfscanf_r+0x34>
    384a:	f10a 33ff 	add.w	r3, sl, #4294967295
    384e:	2b26      	cmp	r3, #38	; 0x26
    3850:	bf86      	itte	hi
    3852:	f1aa 0327 	subhi.w	r3, sl, #39	; 0x27
    3856:	f04f 0a27 	movhi.w	sl, #39	; 0x27
    385a:	2300      	movls	r3, #0
    385c:	2700      	movs	r7, #0
    385e:	f44b 6b58 	orr.w	fp, fp, #3456	; 0xd80
    3862:	9706      	str	r7, [sp, #24]
    3864:	f10d 0938 	add.w	r9, sp, #56	; 0x38
    3868:	6821      	ldr	r1, [r4, #0]
    386a:	780a      	ldrb	r2, [r1, #0]
    386c:	2a39      	cmp	r2, #57	; 0x39
    386e:	d809      	bhi.n	3884 <__svfscanf_r+0x620>
    3870:	2a38      	cmp	r2, #56	; 0x38
    3872:	d235      	bcs.n	38e0 <__svfscanf_r+0x67c>
    3874:	2a30      	cmp	r2, #48	; 0x30
    3876:	d014      	beq.n	38a2 <__svfscanf_r+0x63e>
    3878:	d82c      	bhi.n	38d4 <__svfscanf_r+0x670>
    387a:	2a2b      	cmp	r2, #43	; 0x2b
    387c:	d03d      	beq.n	38fa <__svfscanf_r+0x696>
    387e:	2a2d      	cmp	r2, #45	; 0x2d
    3880:	d164      	bne.n	394c <__svfscanf_r+0x6e8>
    3882:	e03a      	b.n	38fa <__svfscanf_r+0x696>
    3884:	2a58      	cmp	r2, #88	; 0x58
    3886:	d03e      	beq.n	3906 <__svfscanf_r+0x6a2>
    3888:	d804      	bhi.n	3894 <__svfscanf_r+0x630>
    388a:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
    388e:	2805      	cmp	r0, #5
    3890:	d85c      	bhi.n	394c <__svfscanf_r+0x6e8>
    3892:	e02c      	b.n	38ee <__svfscanf_r+0x68a>
    3894:	2a61      	cmp	r2, #97	; 0x61
    3896:	d359      	bcc.n	394c <__svfscanf_r+0x6e8>
    3898:	2a66      	cmp	r2, #102	; 0x66
    389a:	d928      	bls.n	38ee <__svfscanf_r+0x68a>
    389c:	2a78      	cmp	r2, #120	; 0x78
    389e:	d155      	bne.n	394c <__svfscanf_r+0x6e8>
    38a0:	e031      	b.n	3906 <__svfscanf_r+0x6a2>
    38a2:	f41b 6f00 	tst.w	fp, #2048	; 0x800
    38a6:	d039      	beq.n	391c <__svfscanf_r+0x6b8>
    38a8:	9f02      	ldr	r7, [sp, #8]
    38aa:	b91f      	cbnz	r7, 38b4 <__svfscanf_r+0x650>
    38ac:	2708      	movs	r7, #8
    38ae:	f44b 7b00 	orr.w	fp, fp, #512	; 0x200
    38b2:	9702      	str	r7, [sp, #8]
    38b4:	f41b 6f80 	tst.w	fp, #1024	; 0x400
    38b8:	d002      	beq.n	38c0 <__svfscanf_r+0x65c>
    38ba:	f42b 6bb0 	bic.w	fp, fp, #1408	; 0x580
    38be:	e02d      	b.n	391c <__svfscanf_r+0x6b8>
    38c0:	f42b 7b60 	bic.w	fp, fp, #896	; 0x380
    38c4:	b113      	cbz	r3, 38cc <__svfscanf_r+0x668>
    38c6:	3b01      	subs	r3, #1
    38c8:	f10a 0a01 	add.w	sl, sl, #1
    38cc:	9f06      	ldr	r7, [sp, #24]
    38ce:	3701      	adds	r7, #1
    38d0:	9706      	str	r7, [sp, #24]
    38d2:	e025      	b.n	3920 <__svfscanf_r+0x6bc>
    38d4:	9f02      	ldr	r7, [sp, #8]
    38d6:	4817      	ldr	r0, [pc, #92]	; (3934 <__svfscanf_r+0x6d0>)
    38d8:	f930 0017 	ldrsh.w	r0, [r0, r7, lsl #1]
    38dc:	9002      	str	r0, [sp, #8]
    38de:	e009      	b.n	38f4 <__svfscanf_r+0x690>
    38e0:	9f02      	ldr	r7, [sp, #8]
    38e2:	4814      	ldr	r0, [pc, #80]	; (3934 <__svfscanf_r+0x6d0>)
    38e4:	f930 0017 	ldrsh.w	r0, [r0, r7, lsl #1]
    38e8:	9002      	str	r0, [sp, #8]
    38ea:	2808      	cmp	r0, #8
    38ec:	e001      	b.n	38f2 <__svfscanf_r+0x68e>
    38ee:	9f02      	ldr	r7, [sp, #8]
    38f0:	2f0a      	cmp	r7, #10
    38f2:	dd2b      	ble.n	394c <__svfscanf_r+0x6e8>
    38f4:	f42b 6b38 	bic.w	fp, fp, #2944	; 0xb80
    38f8:	e010      	b.n	391c <__svfscanf_r+0x6b8>
    38fa:	f01b 0f80 	tst.w	fp, #128	; 0x80
    38fe:	d025      	beq.n	394c <__svfscanf_r+0x6e8>
    3900:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    3904:	e00a      	b.n	391c <__svfscanf_r+0x6b8>
    3906:	f40b 60c0 	and.w	r0, fp, #1536	; 0x600
    390a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    390e:	d11d      	bne.n	394c <__svfscanf_r+0x6e8>
    3910:	f42b 7c00 	bic.w	ip, fp, #512	; 0x200
    3914:	2710      	movs	r7, #16
    3916:	f44c 6ba0 	orr.w	fp, ip, #1280	; 0x500
    391a:	9702      	str	r7, [sp, #8]
    391c:	f809 2b01 	strb.w	r2, [r9], #1
    3920:	6862      	ldr	r2, [r4, #4]
    3922:	1e50      	subs	r0, r2, #1
    3924:	2800      	cmp	r0, #0
    3926:	6060      	str	r0, [r4, #4]
    3928:	dd06      	ble.n	3938 <__svfscanf_r+0x6d4>
    392a:	3101      	adds	r1, #1
    392c:	6021      	str	r1, [r4, #0]
    392e:	e00a      	b.n	3946 <__svfscanf_r+0x6e2>
    3930:	20000480 	.word	0x20000480
    3934:	00006262 	.word	0x00006262
    3938:	4640      	mov	r0, r8
    393a:	4621      	mov	r1, r4
    393c:	9303      	str	r3, [sp, #12]
    393e:	f001 faca 	bl	4ed6 <__srefill_r>
    3942:	9b03      	ldr	r3, [sp, #12]
    3944:	b910      	cbnz	r0, 394c <__svfscanf_r+0x6e8>
    3946:	f1ba 0a01 	subs.w	sl, sl, #1
    394a:	d18d      	bne.n	3868 <__svfscanf_r+0x604>
    394c:	f41b 7f80 	tst.w	fp, #256	; 0x100
    3950:	d00e      	beq.n	3970 <__svfscanf_r+0x70c>
    3952:	aa0e      	add	r2, sp, #56	; 0x38
    3954:	4591      	cmp	r9, r2
    3956:	d908      	bls.n	396a <__svfscanf_r+0x706>
    3958:	f819 1c01 	ldrb.w	r1, [r9, #-1]
    395c:	4640      	mov	r0, r8
    395e:	4622      	mov	r2, r4
    3960:	f001 fe97 	bl	5692 <_ungetc_r>
    3964:	f109 3aff 	add.w	sl, r9, #4294967295
    3968:	46d1      	mov	r9, sl
    396a:	a80e      	add	r0, sp, #56	; 0x38
    396c:	4581      	cmp	r9, r0
    396e:	d046      	beq.n	39fe <__svfscanf_r+0x79a>
    3970:	f01b 0210 	ands.w	r2, fp, #16
    3974:	d12e      	bne.n	39d4 <__svfscanf_r+0x770>
    3976:	9b02      	ldr	r3, [sp, #8]
    3978:	9f05      	ldr	r7, [sp, #20]
    397a:	f889 2000 	strb.w	r2, [r9]
    397e:	4640      	mov	r0, r8
    3980:	a90e      	add	r1, sp, #56	; 0x38
    3982:	47b8      	blx	r7
    3984:	f01b 0f20 	tst.w	fp, #32
    3988:	f105 0304 	add.w	r3, r5, #4
    398c:	d11c      	bne.n	39c8 <__svfscanf_r+0x764>
    398e:	f01b 0f04 	tst.w	fp, #4
    3992:	d002      	beq.n	399a <__svfscanf_r+0x736>
    3994:	682d      	ldr	r5, [r5, #0]
    3996:	8028      	strh	r0, [r5, #0]
    3998:	e018      	b.n	39cc <__svfscanf_r+0x768>
    399a:	f01b 0201 	ands.w	r2, fp, #1
    399e:	d113      	bne.n	39c8 <__svfscanf_r+0x764>
    39a0:	f01b 0f02 	tst.w	fp, #2
    39a4:	d010      	beq.n	39c8 <__svfscanf_r+0x764>
    39a6:	4b19      	ldr	r3, [pc, #100]	; (3a0c <__svfscanf_r+0x7a8>)
    39a8:	9f05      	ldr	r7, [sp, #20]
    39aa:	429f      	cmp	r7, r3
    39ac:	4640      	mov	r0, r8
    39ae:	a90e      	add	r1, sp, #56	; 0x38
    39b0:	9b02      	ldr	r3, [sp, #8]
    39b2:	d102      	bne.n	39ba <__svfscanf_r+0x756>
    39b4:	f001 fd82 	bl	54bc <_strtoull_r>
    39b8:	e001      	b.n	39be <__svfscanf_r+0x75a>
    39ba:	f001 fc2b 	bl	5214 <_strtoll_r>
    39be:	682a      	ldr	r2, [r5, #0]
    39c0:	3504      	adds	r5, #4
    39c2:	e882 0003 	stmia.w	r2, {r0, r1}
    39c6:	e002      	b.n	39ce <__svfscanf_r+0x76a>
    39c8:	6829      	ldr	r1, [r5, #0]
    39ca:	6008      	str	r0, [r1, #0]
    39cc:	461d      	mov	r5, r3
    39ce:	9804      	ldr	r0, [sp, #16]
    39d0:	1c43      	adds	r3, r0, #1
    39d2:	9304      	str	r3, [sp, #16]
    39d4:	af0e      	add	r7, sp, #56	; 0x38
    39d6:	9a06      	ldr	r2, [sp, #24]
    39d8:	ebc7 0909 	rsb	r9, r7, r9
    39dc:	4491      	add	r9, r2
    39de:	444e      	add	r6, r9
    39e0:	e45a      	b.n	3298 <__svfscanf_r+0x34>
    39e2:	f000 fa12 	bl	3e0a <__sfp_lock_release>
    39e6:	9f04      	ldr	r7, [sp, #16]
    39e8:	b91f      	cbnz	r7, 39f2 <__svfscanf_r+0x78e>
    39ea:	f04f 37ff 	mov.w	r7, #4294967295
    39ee:	9704      	str	r7, [sp, #16]
    39f0:	e007      	b.n	3a02 <__svfscanf_r+0x79e>
    39f2:	89a1      	ldrh	r1, [r4, #12]
    39f4:	f001 0240 	and.w	r2, r1, #64	; 0x40
    39f8:	b210      	sxth	r0, r2
    39fa:	b110      	cbz	r0, 3a02 <__svfscanf_r+0x79e>
    39fc:	e7f5      	b.n	39ea <__svfscanf_r+0x786>
    39fe:	f000 fa04 	bl	3e0a <__sfp_lock_release>
    3a02:	9804      	ldr	r0, [sp, #16]
    3a04:	b059      	add	sp, #356	; 0x164
    3a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3a0a:	bf00      	nop
    3a0c:	000053a5 	.word	0x000053a5

00003a10 <_vfscanf_r>:
    3a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3a14:	4688      	mov	r8, r1
    3a16:	4617      	mov	r7, r2
    3a18:	461e      	mov	r6, r3
    3a1a:	4604      	mov	r4, r0
    3a1c:	b118      	cbz	r0, 3a26 <_vfscanf_r+0x16>
    3a1e:	6b85      	ldr	r5, [r0, #56]	; 0x38
    3a20:	b90d      	cbnz	r5, 3a26 <_vfscanf_r+0x16>
    3a22:	f000 f98d 	bl	3d40 <__sinit>
    3a26:	4620      	mov	r0, r4
    3a28:	4641      	mov	r1, r8
    3a2a:	463a      	mov	r2, r7
    3a2c:	4633      	mov	r3, r6
    3a2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3a32:	f7ff bc17 	b.w	3264 <__svfscanf_r>

00003a36 <__svfscanf>:
    3a36:	b530      	push	{r4, r5, lr}
    3a38:	4613      	mov	r3, r2
    3a3a:	4a05      	ldr	r2, [pc, #20]	; (3a50 <__svfscanf+0x1a>)
    3a3c:	4605      	mov	r5, r0
    3a3e:	460c      	mov	r4, r1
    3a40:	6810      	ldr	r0, [r2, #0]
    3a42:	4629      	mov	r1, r5
    3a44:	4622      	mov	r2, r4
    3a46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    3a4a:	f7ff bc0b 	b.w	3264 <__svfscanf_r>
    3a4e:	bf00      	nop
    3a50:	20000050 	.word	0x20000050

00003a54 <vfscanf>:
    3a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3a58:	4c08      	ldr	r4, [pc, #32]	; (3a7c <vfscanf+0x28>)
    3a5a:	4680      	mov	r8, r0
    3a5c:	6820      	ldr	r0, [r4, #0]
    3a5e:	460f      	mov	r7, r1
    3a60:	4616      	mov	r6, r2
    3a62:	b118      	cbz	r0, 3a6c <vfscanf+0x18>
    3a64:	6b85      	ldr	r5, [r0, #56]	; 0x38
    3a66:	b90d      	cbnz	r5, 3a6c <vfscanf+0x18>
    3a68:	f000 f96a 	bl	3d40 <__sinit>
    3a6c:	6820      	ldr	r0, [r4, #0]
    3a6e:	4641      	mov	r1, r8
    3a70:	463a      	mov	r2, r7
    3a72:	4633      	mov	r3, r6
    3a74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3a78:	f7ff bbf4 	b.w	3264 <__svfscanf_r>
    3a7c:	20000050 	.word	0x20000050

00003a80 <__swsetup_r>:
    3a80:	b538      	push	{r3, r4, r5, lr}
    3a82:	4b2c      	ldr	r3, [pc, #176]	; (3b34 <__swsetup_r+0xb4>)
    3a84:	4605      	mov	r5, r0
    3a86:	6818      	ldr	r0, [r3, #0]
    3a88:	460c      	mov	r4, r1
    3a8a:	b118      	cbz	r0, 3a94 <__swsetup_r+0x14>
    3a8c:	6b82      	ldr	r2, [r0, #56]	; 0x38
    3a8e:	b90a      	cbnz	r2, 3a94 <__swsetup_r+0x14>
    3a90:	f000 f956 	bl	3d40 <__sinit>
    3a94:	89a0      	ldrh	r0, [r4, #12]
    3a96:	f000 0108 	and.w	r1, r0, #8
    3a9a:	b20b      	sxth	r3, r1
    3a9c:	bb0b      	cbnz	r3, 3ae2 <__swsetup_r+0x62>
    3a9e:	f000 0210 	and.w	r2, r0, #16
    3aa2:	b211      	sxth	r1, r2
    3aa4:	b911      	cbnz	r1, 3aac <__swsetup_r+0x2c>
    3aa6:	f04f 30ff 	mov.w	r0, #4294967295
    3aaa:	bd38      	pop	{r3, r4, r5, pc}
    3aac:	f000 0004 	and.w	r0, r0, #4
    3ab0:	b203      	sxth	r3, r0
    3ab2:	b193      	cbz	r3, 3ada <__swsetup_r+0x5a>
    3ab4:	6b21      	ldr	r1, [r4, #48]	; 0x30
    3ab6:	b141      	cbz	r1, 3aca <__swsetup_r+0x4a>
    3ab8:	f104 0240 	add.w	r2, r4, #64	; 0x40
    3abc:	4291      	cmp	r1, r2
    3abe:	d002      	beq.n	3ac6 <__swsetup_r+0x46>
    3ac0:	4628      	mov	r0, r5
    3ac2:	f000 fad9 	bl	4078 <_free_r>
    3ac6:	2100      	movs	r1, #0
    3ac8:	6321      	str	r1, [r4, #48]	; 0x30
    3aca:	89a0      	ldrh	r0, [r4, #12]
    3acc:	6921      	ldr	r1, [r4, #16]
    3ace:	f020 0324 	bic.w	r3, r0, #36	; 0x24
    3ad2:	2200      	movs	r2, #0
    3ad4:	81a3      	strh	r3, [r4, #12]
    3ad6:	6062      	str	r2, [r4, #4]
    3ad8:	6021      	str	r1, [r4, #0]
    3ada:	89a0      	ldrh	r0, [r4, #12]
    3adc:	f040 0308 	orr.w	r3, r0, #8
    3ae0:	81a3      	strh	r3, [r4, #12]
    3ae2:	6922      	ldr	r2, [r4, #16]
    3ae4:	b94a      	cbnz	r2, 3afa <__swsetup_r+0x7a>
    3ae6:	89a1      	ldrh	r1, [r4, #12]
    3ae8:	f401 7020 	and.w	r0, r1, #640	; 0x280
    3aec:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    3af0:	d003      	beq.n	3afa <__swsetup_r+0x7a>
    3af2:	4628      	mov	r0, r5
    3af4:	4621      	mov	r1, r4
    3af6:	f000 fd65 	bl	45c4 <__smakebuf_r>
    3afa:	89a3      	ldrh	r3, [r4, #12]
    3afc:	f013 0201 	ands.w	r2, r3, #1
    3b00:	d005      	beq.n	3b0e <__swsetup_r+0x8e>
    3b02:	6961      	ldr	r1, [r4, #20]
    3b04:	2200      	movs	r2, #0
    3b06:	4248      	negs	r0, r1
    3b08:	60a2      	str	r2, [r4, #8]
    3b0a:	61a0      	str	r0, [r4, #24]
    3b0c:	e007      	b.n	3b1e <__swsetup_r+0x9e>
    3b0e:	f003 0102 	and.w	r1, r3, #2
    3b12:	b208      	sxth	r0, r1
    3b14:	b908      	cbnz	r0, 3b1a <__swsetup_r+0x9a>
    3b16:	6963      	ldr	r3, [r4, #20]
    3b18:	e000      	b.n	3b1c <__swsetup_r+0x9c>
    3b1a:	4613      	mov	r3, r2
    3b1c:	60a3      	str	r3, [r4, #8]
    3b1e:	6923      	ldr	r3, [r4, #16]
    3b20:	b933      	cbnz	r3, 3b30 <__swsetup_r+0xb0>
    3b22:	89a2      	ldrh	r2, [r4, #12]
    3b24:	f002 0180 	and.w	r1, r2, #128	; 0x80
    3b28:	b208      	sxth	r0, r1
    3b2a:	2800      	cmp	r0, #0
    3b2c:	d1bb      	bne.n	3aa6 <__swsetup_r+0x26>
    3b2e:	bd38      	pop	{r3, r4, r5, pc}
    3b30:	2000      	movs	r0, #0
    3b32:	bd38      	pop	{r3, r4, r5, pc}
    3b34:	20000050 	.word	0x20000050

00003b38 <register_fini>:
    3b38:	4b02      	ldr	r3, [pc, #8]	; (3b44 <register_fini+0xc>)
    3b3a:	b113      	cbz	r3, 3b42 <register_fini+0xa>
    3b3c:	4802      	ldr	r0, [pc, #8]	; (3b48 <register_fini+0x10>)
    3b3e:	f000 b805 	b.w	3b4c <atexit>
    3b42:	4770      	bx	lr
    3b44:	00000000 	.word	0x00000000
    3b48:	000026c5 	.word	0x000026c5

00003b4c <atexit>:
    3b4c:	4601      	mov	r1, r0
    3b4e:	2000      	movs	r0, #0
    3b50:	4602      	mov	r2, r0
    3b52:	4603      	mov	r3, r0
    3b54:	f7fe bd68 	b.w	2628 <__register_exitproc>

00003b58 <_fflush_r>:
    3b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b5c:	460c      	mov	r4, r1
    3b5e:	4605      	mov	r5, r0
    3b60:	b118      	cbz	r0, 3b6a <_fflush_r+0x12>
    3b62:	6b83      	ldr	r3, [r0, #56]	; 0x38
    3b64:	b90b      	cbnz	r3, 3b6a <_fflush_r+0x12>
    3b66:	f000 f8eb 	bl	3d40 <__sinit>
    3b6a:	89a2      	ldrh	r2, [r4, #12]
    3b6c:	b332      	cbz	r2, 3bbc <_fflush_r+0x64>
    3b6e:	f002 0008 	and.w	r0, r2, #8
    3b72:	b201      	sxth	r1, r0
    3b74:	2900      	cmp	r1, #0
    3b76:	d162      	bne.n	3c3e <_fflush_r+0xe6>
    3b78:	6861      	ldr	r1, [r4, #4]
    3b7a:	f442 6000 	orr.w	r0, r2, #2048	; 0x800
    3b7e:	2900      	cmp	r1, #0
    3b80:	81a0      	strh	r0, [r4, #12]
    3b82:	dc02      	bgt.n	3b8a <_fflush_r+0x32>
    3b84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3b86:	2b00      	cmp	r3, #0
    3b88:	dd18      	ble.n	3bbc <_fflush_r+0x64>
    3b8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3b8c:	b1b6      	cbz	r6, 3bbc <_fflush_r+0x64>
    3b8e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    3b92:	2000      	movs	r0, #0
    3b94:	b212      	sxth	r2, r2
    3b96:	682f      	ldr	r7, [r5, #0]
    3b98:	6028      	str	r0, [r5, #0]
    3b9a:	b10a      	cbz	r2, 3ba0 <_fflush_r+0x48>
    3b9c:	6d22      	ldr	r2, [r4, #80]	; 0x50
    3b9e:	e010      	b.n	3bc2 <_fflush_r+0x6a>
    3ba0:	2301      	movs	r3, #1
    3ba2:	4628      	mov	r0, r5
    3ba4:	69e1      	ldr	r1, [r4, #28]
    3ba6:	47b0      	blx	r6
    3ba8:	4602      	mov	r2, r0
    3baa:	3001      	adds	r0, #1
    3bac:	d109      	bne.n	3bc2 <_fflush_r+0x6a>
    3bae:	6829      	ldr	r1, [r5, #0]
    3bb0:	b139      	cbz	r1, 3bc2 <_fflush_r+0x6a>
    3bb2:	291d      	cmp	r1, #29
    3bb4:	d001      	beq.n	3bba <_fflush_r+0x62>
    3bb6:	2916      	cmp	r1, #22
    3bb8:	d14f      	bne.n	3c5a <_fflush_r+0x102>
    3bba:	602f      	str	r7, [r5, #0]
    3bbc:	2000      	movs	r0, #0
    3bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3bc2:	89a6      	ldrh	r6, [r4, #12]
    3bc4:	f006 0104 	and.w	r1, r6, #4
    3bc8:	b20b      	sxth	r3, r1
    3bca:	b12b      	cbz	r3, 3bd8 <_fflush_r+0x80>
    3bcc:	6860      	ldr	r0, [r4, #4]
    3bce:	6b26      	ldr	r6, [r4, #48]	; 0x30
    3bd0:	1a12      	subs	r2, r2, r0
    3bd2:	b10e      	cbz	r6, 3bd8 <_fflush_r+0x80>
    3bd4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    3bd6:	1a52      	subs	r2, r2, r1
    3bd8:	69e1      	ldr	r1, [r4, #28]
    3bda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3bdc:	2300      	movs	r3, #0
    3bde:	4628      	mov	r0, r5
    3be0:	47b0      	blx	r6
    3be2:	1c41      	adds	r1, r0, #1
    3be4:	d105      	bne.n	3bf2 <_fflush_r+0x9a>
    3be6:	682a      	ldr	r2, [r5, #0]
    3be8:	b11a      	cbz	r2, 3bf2 <_fflush_r+0x9a>
    3bea:	2a1d      	cmp	r2, #29
    3bec:	d001      	beq.n	3bf2 <_fflush_r+0x9a>
    3bee:	2a16      	cmp	r2, #22
    3bf0:	d11f      	bne.n	3c32 <_fflush_r+0xda>
    3bf2:	89a3      	ldrh	r3, [r4, #12]
    3bf4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
    3bf8:	2100      	movs	r1, #0
    3bfa:	81a2      	strh	r2, [r4, #12]
    3bfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    3c00:	6922      	ldr	r2, [r4, #16]
    3c02:	6061      	str	r1, [r4, #4]
    3c04:	b219      	sxth	r1, r3
    3c06:	6022      	str	r2, [r4, #0]
    3c08:	b121      	cbz	r1, 3c14 <_fflush_r+0xbc>
    3c0a:	1c42      	adds	r2, r0, #1
    3c0c:	d101      	bne.n	3c12 <_fflush_r+0xba>
    3c0e:	682a      	ldr	r2, [r5, #0]
    3c10:	b902      	cbnz	r2, 3c14 <_fflush_r+0xbc>
    3c12:	6520      	str	r0, [r4, #80]	; 0x50
    3c14:	6b21      	ldr	r1, [r4, #48]	; 0x30
    3c16:	602f      	str	r7, [r5, #0]
    3c18:	2900      	cmp	r1, #0
    3c1a:	d0cf      	beq.n	3bbc <_fflush_r+0x64>
    3c1c:	f104 0040 	add.w	r0, r4, #64	; 0x40
    3c20:	4281      	cmp	r1, r0
    3c22:	d002      	beq.n	3c2a <_fflush_r+0xd2>
    3c24:	4628      	mov	r0, r5
    3c26:	f000 fa27 	bl	4078 <_free_r>
    3c2a:	2000      	movs	r0, #0
    3c2c:	6320      	str	r0, [r4, #48]	; 0x30
    3c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3c32:	89a3      	ldrh	r3, [r4, #12]
    3c34:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    3c38:	81a1      	strh	r1, [r4, #12]
    3c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3c3e:	6926      	ldr	r6, [r4, #16]
    3c40:	2e00      	cmp	r6, #0
    3c42:	d0bb      	beq.n	3bbc <_fflush_r+0x64>
    3c44:	0792      	lsls	r2, r2, #30
    3c46:	6823      	ldr	r3, [r4, #0]
    3c48:	bf08      	it	eq
    3c4a:	6962      	ldreq	r2, [r4, #20]
    3c4c:	6026      	str	r6, [r4, #0]
    3c4e:	bf18      	it	ne
    3c50:	2200      	movne	r2, #0
    3c52:	ebc6 0803 	rsb	r8, r6, r3
    3c56:	60a2      	str	r2, [r4, #8]
    3c58:	e012      	b.n	3c80 <_fflush_r+0x128>
    3c5a:	89a3      	ldrh	r3, [r4, #12]
    3c5c:	f043 0040 	orr.w	r0, r3, #64	; 0x40
    3c60:	81a0      	strh	r0, [r4, #12]
    3c62:	f04f 30ff 	mov.w	r0, #4294967295
    3c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3c6a:	6a67      	ldr	r7, [r4, #36]	; 0x24
    3c6c:	69e1      	ldr	r1, [r4, #28]
    3c6e:	4628      	mov	r0, r5
    3c70:	4632      	mov	r2, r6
    3c72:	4643      	mov	r3, r8
    3c74:	47b8      	blx	r7
    3c76:	2800      	cmp	r0, #0
    3c78:	ddef      	ble.n	3c5a <_fflush_r+0x102>
    3c7a:	1836      	adds	r6, r6, r0
    3c7c:	ebc0 0808 	rsb	r8, r0, r8
    3c80:	f1b8 0f00 	cmp.w	r8, #0
    3c84:	dcf1      	bgt.n	3c6a <_fflush_r+0x112>
    3c86:	e799      	b.n	3bbc <_fflush_r+0x64>

00003c88 <fflush>:
    3c88:	4601      	mov	r1, r0
    3c8a:	b920      	cbnz	r0, 3c96 <fflush+0xe>
    3c8c:	4804      	ldr	r0, [pc, #16]	; (3ca0 <fflush+0x18>)
    3c8e:	4905      	ldr	r1, [pc, #20]	; (3ca4 <fflush+0x1c>)
    3c90:	6800      	ldr	r0, [r0, #0]
    3c92:	f000 bc23 	b.w	44dc <_fwalk_reent>
    3c96:	4b04      	ldr	r3, [pc, #16]	; (3ca8 <fflush+0x20>)
    3c98:	6818      	ldr	r0, [r3, #0]
    3c9a:	f7ff bf5d 	b.w	3b58 <_fflush_r>
    3c9e:	bf00      	nop
    3ca0:	00006218 	.word	0x00006218
    3ca4:	00003b59 	.word	0x00003b59
    3ca8:	20000050 	.word	0x20000050

00003cac <__fp_lock>:
    3cac:	2000      	movs	r0, #0
    3cae:	4770      	bx	lr

00003cb0 <__fp_unlock>:
    3cb0:	2000      	movs	r0, #0
    3cb2:	4770      	bx	lr

00003cb4 <_cleanup_r>:
    3cb4:	4901      	ldr	r1, [pc, #4]	; (3cbc <_cleanup_r+0x8>)
    3cb6:	f000 bbf0 	b.w	449a <_fwalk>
    3cba:	bf00      	nop
    3cbc:	000059a9 	.word	0x000059a9

00003cc0 <std.isra.0>:
    3cc0:	2300      	movs	r3, #0
    3cc2:	b510      	push	{r4, lr}
    3cc4:	4604      	mov	r4, r0
    3cc6:	6003      	str	r3, [r0, #0]
    3cc8:	6043      	str	r3, [r0, #4]
    3cca:	6083      	str	r3, [r0, #8]
    3ccc:	8181      	strh	r1, [r0, #12]
    3cce:	6643      	str	r3, [r0, #100]	; 0x64
    3cd0:	81c2      	strh	r2, [r0, #14]
    3cd2:	6103      	str	r3, [r0, #16]
    3cd4:	6143      	str	r3, [r0, #20]
    3cd6:	6183      	str	r3, [r0, #24]
    3cd8:	4619      	mov	r1, r3
    3cda:	2208      	movs	r2, #8
    3cdc:	f100 005c 	add.w	r0, r0, #92	; 0x5c
    3ce0:	f7fe fd4c 	bl	277c <memset>
    3ce4:	4804      	ldr	r0, [pc, #16]	; (3cf8 <std.isra.0+0x38>)
    3ce6:	4905      	ldr	r1, [pc, #20]	; (3cfc <std.isra.0+0x3c>)
    3ce8:	4a05      	ldr	r2, [pc, #20]	; (3d00 <std.isra.0+0x40>)
    3cea:	4b06      	ldr	r3, [pc, #24]	; (3d04 <std.isra.0+0x44>)
    3cec:	61e4      	str	r4, [r4, #28]
    3cee:	6220      	str	r0, [r4, #32]
    3cf0:	6261      	str	r1, [r4, #36]	; 0x24
    3cf2:	62a2      	str	r2, [r4, #40]	; 0x28
    3cf4:	62e3      	str	r3, [r4, #44]	; 0x2c
    3cf6:	bd10      	pop	{r4, pc}
    3cf8:	00005049 	.word	0x00005049
    3cfc:	0000506f 	.word	0x0000506f
    3d00:	000050ab 	.word	0x000050ab
    3d04:	000050cf 	.word	0x000050cf

00003d08 <__sfmoreglue>:
    3d08:	b570      	push	{r4, r5, r6, lr}
    3d0a:	2568      	movs	r5, #104	; 0x68
    3d0c:	434d      	muls	r5, r1
    3d0e:	460e      	mov	r6, r1
    3d10:	f105 010c 	add.w	r1, r5, #12
    3d14:	f000 fcd2 	bl	46bc <_malloc_r>
    3d18:	4604      	mov	r4, r0
    3d1a:	b140      	cbz	r0, 3d2e <__sfmoreglue+0x26>
    3d1c:	f100 000c 	add.w	r0, r0, #12
    3d20:	2100      	movs	r1, #0
    3d22:	e884 0042 	stmia.w	r4, {r1, r6}
    3d26:	60a0      	str	r0, [r4, #8]
    3d28:	462a      	mov	r2, r5
    3d2a:	f7fe fd27 	bl	277c <memset>
    3d2e:	4620      	mov	r0, r4
    3d30:	bd70      	pop	{r4, r5, r6, pc}

00003d32 <_cleanup>:
    3d32:	4b02      	ldr	r3, [pc, #8]	; (3d3c <_cleanup+0xa>)
    3d34:	6818      	ldr	r0, [r3, #0]
    3d36:	f7ff bfbd 	b.w	3cb4 <_cleanup_r>
    3d3a:	bf00      	nop
    3d3c:	00006218 	.word	0x00006218

00003d40 <__sinit>:
    3d40:	b538      	push	{r3, r4, r5, lr}
    3d42:	6b83      	ldr	r3, [r0, #56]	; 0x38
    3d44:	4604      	mov	r4, r0
    3d46:	b9eb      	cbnz	r3, 3d84 <__sinit+0x44>
    3d48:	4a0f      	ldr	r2, [pc, #60]	; (3d88 <__sinit+0x48>)
    3d4a:	f8c0 32e0 	str.w	r3, [r0, #736]	; 0x2e0
    3d4e:	2501      	movs	r5, #1
    3d50:	63c2      	str	r2, [r0, #60]	; 0x3c
    3d52:	6385      	str	r5, [r0, #56]	; 0x38
    3d54:	f504 713b 	add.w	r1, r4, #748	; 0x2ec
    3d58:	2003      	movs	r0, #3
    3d5a:	461a      	mov	r2, r3
    3d5c:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
    3d60:	f8c4 12e8 	str.w	r1, [r4, #744]	; 0x2e8
    3d64:	6860      	ldr	r0, [r4, #4]
    3d66:	2104      	movs	r1, #4
    3d68:	f7ff ffaa 	bl	3cc0 <std.isra.0>
    3d6c:	68a0      	ldr	r0, [r4, #8]
    3d6e:	2109      	movs	r1, #9
    3d70:	462a      	mov	r2, r5
    3d72:	f7ff ffa5 	bl	3cc0 <std.isra.0>
    3d76:	68e0      	ldr	r0, [r4, #12]
    3d78:	2112      	movs	r1, #18
    3d7a:	2202      	movs	r2, #2
    3d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3d80:	f7ff bf9e 	b.w	3cc0 <std.isra.0>
    3d84:	bd38      	pop	{r3, r4, r5, pc}
    3d86:	bf00      	nop
    3d88:	00003cb5 	.word	0x00003cb5

00003d8c <__sfp>:
    3d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d8e:	4b1d      	ldr	r3, [pc, #116]	; (3e04 <__sfp+0x78>)
    3d90:	681e      	ldr	r6, [r3, #0]
    3d92:	4607      	mov	r7, r0
    3d94:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    3d96:	b910      	cbnz	r0, 3d9e <__sfp+0x12>
    3d98:	4630      	mov	r0, r6
    3d9a:	f7ff ffd1 	bl	3d40 <__sinit>
    3d9e:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
    3da2:	68b4      	ldr	r4, [r6, #8]
    3da4:	6871      	ldr	r1, [r6, #4]
    3da6:	3901      	subs	r1, #1
    3da8:	d404      	bmi.n	3db4 <__sfp+0x28>
    3daa:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    3dae:	b185      	cbz	r5, 3dd2 <__sfp+0x46>
    3db0:	3468      	adds	r4, #104	; 0x68
    3db2:	e7f8      	b.n	3da6 <__sfp+0x1a>
    3db4:	6832      	ldr	r2, [r6, #0]
    3db6:	b10a      	cbz	r2, 3dbc <__sfp+0x30>
    3db8:	6836      	ldr	r6, [r6, #0]
    3dba:	e7f2      	b.n	3da2 <__sfp+0x16>
    3dbc:	4638      	mov	r0, r7
    3dbe:	2104      	movs	r1, #4
    3dc0:	f7ff ffa2 	bl	3d08 <__sfmoreglue>
    3dc4:	6030      	str	r0, [r6, #0]
    3dc6:	2800      	cmp	r0, #0
    3dc8:	d1f6      	bne.n	3db8 <__sfp+0x2c>
    3dca:	240c      	movs	r4, #12
    3dcc:	603c      	str	r4, [r7, #0]
    3dce:	4604      	mov	r4, r0
    3dd0:	e015      	b.n	3dfe <__sfp+0x72>
    3dd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3dd6:	2001      	movs	r0, #1
    3dd8:	81a0      	strh	r0, [r4, #12]
    3dda:	81e3      	strh	r3, [r4, #14]
    3ddc:	6665      	str	r5, [r4, #100]	; 0x64
    3dde:	6025      	str	r5, [r4, #0]
    3de0:	60a5      	str	r5, [r4, #8]
    3de2:	6065      	str	r5, [r4, #4]
    3de4:	6125      	str	r5, [r4, #16]
    3de6:	6165      	str	r5, [r4, #20]
    3de8:	61a5      	str	r5, [r4, #24]
    3dea:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    3dee:	4629      	mov	r1, r5
    3df0:	2208      	movs	r2, #8
    3df2:	f7fe fcc3 	bl	277c <memset>
    3df6:	6325      	str	r5, [r4, #48]	; 0x30
    3df8:	6365      	str	r5, [r4, #52]	; 0x34
    3dfa:	6465      	str	r5, [r4, #68]	; 0x44
    3dfc:	64a5      	str	r5, [r4, #72]	; 0x48
    3dfe:	4620      	mov	r0, r4
    3e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e02:	bf00      	nop
    3e04:	00006218 	.word	0x00006218

00003e08 <__sfp_lock_acquire>:
    3e08:	4770      	bx	lr

00003e0a <__sfp_lock_release>:
    3e0a:	4770      	bx	lr

00003e0c <__sinit_lock_acquire>:
    3e0c:	4770      	bx	lr

00003e0e <__sinit_lock_release>:
    3e0e:	4770      	bx	lr

00003e10 <__fp_lock_all>:
    3e10:	4b02      	ldr	r3, [pc, #8]	; (3e1c <__fp_lock_all+0xc>)
    3e12:	4903      	ldr	r1, [pc, #12]	; (3e20 <__fp_lock_all+0x10>)
    3e14:	6818      	ldr	r0, [r3, #0]
    3e16:	f000 bb40 	b.w	449a <_fwalk>
    3e1a:	bf00      	nop
    3e1c:	20000050 	.word	0x20000050
    3e20:	00003cad 	.word	0x00003cad

00003e24 <__fp_unlock_all>:
    3e24:	4b02      	ldr	r3, [pc, #8]	; (3e30 <__fp_unlock_all+0xc>)
    3e26:	4903      	ldr	r1, [pc, #12]	; (3e34 <__fp_unlock_all+0x10>)
    3e28:	6818      	ldr	r0, [r3, #0]
    3e2a:	f000 bb36 	b.w	449a <_fwalk>
    3e2e:	bf00      	nop
    3e30:	20000050 	.word	0x20000050
    3e34:	00003cb1 	.word	0x00003cb1

00003e38 <_fputwc_r>:
    3e38:	8993      	ldrh	r3, [r2, #12]
    3e3a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3e3e:	4614      	mov	r4, r2
    3e40:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
    3e44:	4680      	mov	r8, r0
    3e46:	b210      	sxth	r0, r2
    3e48:	460e      	mov	r6, r1
    3e4a:	b930      	cbnz	r0, 3e5a <_fputwc_r+0x22>
    3e4c:	6e67      	ldr	r7, [r4, #100]	; 0x64
    3e4e:	f443 5100 	orr.w	r1, r3, #8192	; 0x2000
    3e52:	f447 5300 	orr.w	r3, r7, #8192	; 0x2000
    3e56:	81a1      	strh	r1, [r4, #12]
    3e58:	6663      	str	r3, [r4, #100]	; 0x64
    3e5a:	f000 fb95 	bl	4588 <__locale_mb_cur_max>
    3e5e:	2801      	cmp	r0, #1
    3e60:	d106      	bne.n	3e70 <_fputwc_r+0x38>
    3e62:	b12e      	cbz	r6, 3e70 <_fputwc_r+0x38>
    3e64:	2eff      	cmp	r6, #255	; 0xff
    3e66:	d803      	bhi.n	3e70 <_fputwc_r+0x38>
    3e68:	f88d 6004 	strb.w	r6, [sp, #4]
    3e6c:	4607      	mov	r7, r0
    3e6e:	e00f      	b.n	3e90 <_fputwc_r+0x58>
    3e70:	4632      	mov	r2, r6
    3e72:	4640      	mov	r0, r8
    3e74:	a901      	add	r1, sp, #4
    3e76:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    3e7a:	f001 fcdb 	bl	5834 <_wcrtomb_r>
    3e7e:	1c42      	adds	r2, r0, #1
    3e80:	4607      	mov	r7, r0
    3e82:	d105      	bne.n	3e90 <_fputwc_r+0x58>
    3e84:	89a2      	ldrh	r2, [r4, #12]
    3e86:	f042 0040 	orr.w	r0, r2, #64	; 0x40
    3e8a:	81a0      	strh	r0, [r4, #12]
    3e8c:	4638      	mov	r0, r7
    3e8e:	e031      	b.n	3ef4 <_fputwc_r+0xbc>
    3e90:	2500      	movs	r5, #0
    3e92:	42bd      	cmp	r5, r7
    3e94:	d02a      	beq.n	3eec <_fputwc_r+0xb4>
    3e96:	68a1      	ldr	r1, [r4, #8]
    3e98:	1e4a      	subs	r2, r1, #1
    3e9a:	2a00      	cmp	r2, #0
    3e9c:	60a2      	str	r2, [r4, #8]
    3e9e:	ab01      	add	r3, sp, #4
    3ea0:	da1a      	bge.n	3ed8 <_fputwc_r+0xa0>
    3ea2:	69a0      	ldr	r0, [r4, #24]
    3ea4:	4282      	cmp	r2, r0
    3ea6:	db0c      	blt.n	3ec2 <_fputwc_r+0x8a>
    3ea8:	6821      	ldr	r1, [r4, #0]
    3eaa:	5d5a      	ldrb	r2, [r3, r5]
    3eac:	700a      	strb	r2, [r1, #0]
    3eae:	6823      	ldr	r3, [r4, #0]
    3eb0:	7819      	ldrb	r1, [r3, #0]
    3eb2:	290a      	cmp	r1, #10
    3eb4:	d003      	beq.n	3ebe <_fputwc_r+0x86>
    3eb6:	3301      	adds	r3, #1
    3eb8:	2200      	movs	r2, #0
    3eba:	6023      	str	r3, [r4, #0]
    3ebc:	e013      	b.n	3ee6 <_fputwc_r+0xae>
    3ebe:	4640      	mov	r0, r8
    3ec0:	e001      	b.n	3ec6 <_fputwc_r+0x8e>
    3ec2:	5d59      	ldrb	r1, [r3, r5]
    3ec4:	4640      	mov	r0, r8
    3ec6:	4622      	mov	r2, r4
    3ec8:	f001 fc5a 	bl	5780 <__swbuf_r>
    3ecc:	f1b0 31ff 	subs.w	r1, r0, #4294967295
    3ed0:	4248      	negs	r0, r1
    3ed2:	eb50 0201 	adcs.w	r2, r0, r1
    3ed6:	e006      	b.n	3ee6 <_fputwc_r+0xae>
    3ed8:	6820      	ldr	r0, [r4, #0]
    3eda:	5d59      	ldrb	r1, [r3, r5]
    3edc:	7001      	strb	r1, [r0, #0]
    3ede:	6822      	ldr	r2, [r4, #0]
    3ee0:	1c53      	adds	r3, r2, #1
    3ee2:	6023      	str	r3, [r4, #0]
    3ee4:	e000      	b.n	3ee8 <_fputwc_r+0xb0>
    3ee6:	b91a      	cbnz	r2, 3ef0 <_fputwc_r+0xb8>
    3ee8:	3501      	adds	r5, #1
    3eea:	e7d2      	b.n	3e92 <_fputwc_r+0x5a>
    3eec:	4630      	mov	r0, r6
    3eee:	e001      	b.n	3ef4 <_fputwc_r+0xbc>
    3ef0:	f04f 30ff 	mov.w	r0, #4294967295
    3ef4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

00003ef8 <fputwc>:
    3ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3efa:	4c08      	ldr	r4, [pc, #32]	; (3f1c <fputwc+0x24>)
    3efc:	4607      	mov	r7, r0
    3efe:	6820      	ldr	r0, [r4, #0]
    3f00:	460e      	mov	r6, r1
    3f02:	b118      	cbz	r0, 3f0c <fputwc+0x14>
    3f04:	6b85      	ldr	r5, [r0, #56]	; 0x38
    3f06:	b90d      	cbnz	r5, 3f0c <fputwc+0x14>
    3f08:	f7ff ff1a 	bl	3d40 <__sinit>
    3f0c:	6820      	ldr	r0, [r4, #0]
    3f0e:	4639      	mov	r1, r7
    3f10:	4632      	mov	r2, r6
    3f12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3f16:	f7ff bf8f 	b.w	3e38 <_fputwc_r>
    3f1a:	bf00      	nop
    3f1c:	20000050 	.word	0x20000050

00003f20 <_fread_r>:
    3f20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f24:	461e      	mov	r6, r3
    3f26:	4613      	mov	r3, r2
    3f28:	4373      	muls	r3, r6
    3f2a:	4682      	mov	sl, r0
    3f2c:	4688      	mov	r8, r1
    3f2e:	4693      	mov	fp, r2
    3f30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    3f32:	4699      	mov	r9, r3
    3f34:	d03e      	beq.n	3fb4 <_fread_r+0x94>
    3f36:	b118      	cbz	r0, 3f40 <_fread_r+0x20>
    3f38:	6b81      	ldr	r1, [r0, #56]	; 0x38
    3f3a:	b909      	cbnz	r1, 3f40 <_fread_r+0x20>
    3f3c:	f7ff ff00 	bl	3d40 <__sinit>
    3f40:	f7ff ff62 	bl	3e08 <__sfp_lock_acquire>
    3f44:	89a0      	ldrh	r0, [r4, #12]
    3f46:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
    3f4a:	b215      	sxth	r5, r2
    3f4c:	b935      	cbnz	r5, 3f5c <_fread_r+0x3c>
    3f4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    3f50:	f440 5700 	orr.w	r7, r0, #8192	; 0x2000
    3f54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
    3f58:	81a7      	strh	r7, [r4, #12]
    3f5a:	6661      	str	r1, [r4, #100]	; 0x64
    3f5c:	6860      	ldr	r0, [r4, #4]
    3f5e:	2800      	cmp	r0, #0
    3f60:	da01      	bge.n	3f66 <_fread_r+0x46>
    3f62:	2200      	movs	r2, #0
    3f64:	6062      	str	r2, [r4, #4]
    3f66:	464d      	mov	r5, r9
    3f68:	6867      	ldr	r7, [r4, #4]
    3f6a:	6821      	ldr	r1, [r4, #0]
    3f6c:	42bd      	cmp	r5, r7
    3f6e:	4640      	mov	r0, r8
    3f70:	d914      	bls.n	3f9c <_fread_r+0x7c>
    3f72:	463a      	mov	r2, r7
    3f74:	f000 fe12 	bl	4b9c <memcpy>
    3f78:	6822      	ldr	r2, [r4, #0]
    3f7a:	19d3      	adds	r3, r2, r7
    3f7c:	6023      	str	r3, [r4, #0]
    3f7e:	4650      	mov	r0, sl
    3f80:	4621      	mov	r1, r4
    3f82:	44b8      	add	r8, r7
    3f84:	1bed      	subs	r5, r5, r7
    3f86:	f000 ffa6 	bl	4ed6 <__srefill_r>
    3f8a:	2800      	cmp	r0, #0
    3f8c:	d0ec      	beq.n	3f68 <_fread_r+0x48>
    3f8e:	ebc5 0509 	rsb	r5, r5, r9
    3f92:	f7ff ff3a 	bl	3e0a <__sfp_lock_release>
    3f96:	fbb5 f6fb 	udiv	r6, r5, fp
    3f9a:	e00c      	b.n	3fb6 <_fread_r+0x96>
    3f9c:	462a      	mov	r2, r5
    3f9e:	f000 fdfd 	bl	4b9c <memcpy>
    3fa2:	6863      	ldr	r3, [r4, #4]
    3fa4:	6820      	ldr	r0, [r4, #0]
    3fa6:	1b59      	subs	r1, r3, r5
    3fa8:	1945      	adds	r5, r0, r5
    3faa:	6061      	str	r1, [r4, #4]
    3fac:	6025      	str	r5, [r4, #0]
    3fae:	f7ff ff2c 	bl	3e0a <__sfp_lock_release>
    3fb2:	e000      	b.n	3fb6 <_fread_r+0x96>
    3fb4:	461e      	mov	r6, r3
    3fb6:	4630      	mov	r0, r6
    3fb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003fbc <fread>:
    3fbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3fbe:	9300      	str	r3, [sp, #0]
    3fc0:	4b05      	ldr	r3, [pc, #20]	; (3fd8 <fread+0x1c>)
    3fc2:	4606      	mov	r6, r0
    3fc4:	460d      	mov	r5, r1
    3fc6:	4614      	mov	r4, r2
    3fc8:	6818      	ldr	r0, [r3, #0]
    3fca:	4631      	mov	r1, r6
    3fcc:	462a      	mov	r2, r5
    3fce:	4623      	mov	r3, r4
    3fd0:	f7ff ffa6 	bl	3f20 <_fread_r>
    3fd4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    3fd6:	bf00      	nop
    3fd8:	20000050 	.word	0x20000050

00003fdc <_malloc_trim_r>:
    3fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3fde:	4d23      	ldr	r5, [pc, #140]	; (406c <_malloc_trim_r+0x90>)
    3fe0:	460e      	mov	r6, r1
    3fe2:	4604      	mov	r4, r0
    3fe4:	f000 fdfd 	bl	4be2 <__malloc_lock>
    3fe8:	68ab      	ldr	r3, [r5, #8]
    3fea:	685f      	ldr	r7, [r3, #4]
    3fec:	f027 0703 	bic.w	r7, r7, #3
    3ff0:	f607 70ef 	addw	r0, r7, #4079	; 0xfef
    3ff4:	1b81      	subs	r1, r0, r6
    3ff6:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
    3ffa:	f022 060f 	bic.w	r6, r2, #15
    3ffe:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
    4002:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
    4006:	da04      	bge.n	4012 <_malloc_trim_r+0x36>
    4008:	4620      	mov	r0, r4
    400a:	f000 fdeb 	bl	4be4 <__malloc_unlock>
    400e:	2000      	movs	r0, #0
    4010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4012:	2100      	movs	r1, #0
    4014:	4620      	mov	r0, r4
    4016:	f000 ffd7 	bl	4fc8 <_sbrk_r>
    401a:	68ab      	ldr	r3, [r5, #8]
    401c:	19d9      	adds	r1, r3, r7
    401e:	4288      	cmp	r0, r1
    4020:	d1f2      	bne.n	4008 <_malloc_trim_r+0x2c>
    4022:	4271      	negs	r1, r6
    4024:	4620      	mov	r0, r4
    4026:	f000 ffcf 	bl	4fc8 <_sbrk_r>
    402a:	3001      	adds	r0, #1
    402c:	d110      	bne.n	4050 <_malloc_trim_r+0x74>
    402e:	2100      	movs	r1, #0
    4030:	4620      	mov	r0, r4
    4032:	f000 ffc9 	bl	4fc8 <_sbrk_r>
    4036:	68ab      	ldr	r3, [r5, #8]
    4038:	1ac2      	subs	r2, r0, r3
    403a:	2a0f      	cmp	r2, #15
    403c:	dde4      	ble.n	4008 <_malloc_trim_r+0x2c>
    403e:	490c      	ldr	r1, [pc, #48]	; (4070 <_malloc_trim_r+0x94>)
    4040:	6809      	ldr	r1, [r1, #0]
    4042:	1a40      	subs	r0, r0, r1
    4044:	490b      	ldr	r1, [pc, #44]	; (4074 <_malloc_trim_r+0x98>)
    4046:	f042 0201 	orr.w	r2, r2, #1
    404a:	6008      	str	r0, [r1, #0]
    404c:	605a      	str	r2, [r3, #4]
    404e:	e7db      	b.n	4008 <_malloc_trim_r+0x2c>
    4050:	4b08      	ldr	r3, [pc, #32]	; (4074 <_malloc_trim_r+0x98>)
    4052:	68a8      	ldr	r0, [r5, #8]
    4054:	681a      	ldr	r2, [r3, #0]
    4056:	1bbf      	subs	r7, r7, r6
    4058:	f047 0701 	orr.w	r7, r7, #1
    405c:	6047      	str	r7, [r0, #4]
    405e:	1b96      	subs	r6, r2, r6
    4060:	4620      	mov	r0, r4
    4062:	601e      	str	r6, [r3, #0]
    4064:	f000 fdbe 	bl	4be4 <__malloc_unlock>
    4068:	2001      	movs	r0, #1
    406a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    406c:	20000500 	.word	0x20000500
    4070:	20000908 	.word	0x20000908
    4074:	20000948 	.word	0x20000948

00004078 <_free_r>:
    4078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    407a:	4606      	mov	r6, r0
    407c:	460d      	mov	r5, r1
    407e:	2900      	cmp	r1, #0
    4080:	f000 80a6 	beq.w	41d0 <_free_r+0x158>
    4084:	f000 fdad 	bl	4be2 <__malloc_lock>
    4088:	f855 cc04 	ldr.w	ip, [r5, #-4]
    408c:	4f51      	ldr	r7, [pc, #324]	; (41d4 <_free_r+0x15c>)
    408e:	f1a5 0308 	sub.w	r3, r5, #8
    4092:	f02c 0201 	bic.w	r2, ip, #1
    4096:	189c      	adds	r4, r3, r2
    4098:	68b9      	ldr	r1, [r7, #8]
    409a:	6860      	ldr	r0, [r4, #4]
    409c:	428c      	cmp	r4, r1
    409e:	f020 0003 	bic.w	r0, r0, #3
    40a2:	f00c 0101 	and.w	r1, ip, #1
    40a6:	d11c      	bne.n	40e2 <_free_r+0x6a>
    40a8:	1882      	adds	r2, r0, r2
    40aa:	b939      	cbnz	r1, 40bc <_free_r+0x44>
    40ac:	f855 1c08 	ldr.w	r1, [r5, #-8]
    40b0:	1a5b      	subs	r3, r3, r1
    40b2:	1852      	adds	r2, r2, r1
    40b4:	6898      	ldr	r0, [r3, #8]
    40b6:	68d9      	ldr	r1, [r3, #12]
    40b8:	60c1      	str	r1, [r0, #12]
    40ba:	6088      	str	r0, [r1, #8]
    40bc:	4845      	ldr	r0, [pc, #276]	; (41d4 <_free_r+0x15c>)
    40be:	f042 0101 	orr.w	r1, r2, #1
    40c2:	6059      	str	r1, [r3, #4]
    40c4:	6083      	str	r3, [r0, #8]
    40c6:	4b44      	ldr	r3, [pc, #272]	; (41d8 <_free_r+0x160>)
    40c8:	6819      	ldr	r1, [r3, #0]
    40ca:	428a      	cmp	r2, r1
    40cc:	d304      	bcc.n	40d8 <_free_r+0x60>
    40ce:	4a43      	ldr	r2, [pc, #268]	; (41dc <_free_r+0x164>)
    40d0:	4630      	mov	r0, r6
    40d2:	6811      	ldr	r1, [r2, #0]
    40d4:	f7ff ff82 	bl	3fdc <_malloc_trim_r>
    40d8:	4630      	mov	r0, r6
    40da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    40de:	f000 bd81 	b.w	4be4 <__malloc_unlock>
    40e2:	6060      	str	r0, [r4, #4]
    40e4:	b959      	cbnz	r1, 40fe <_free_r+0x86>
    40e6:	f855 5c08 	ldr.w	r5, [r5, #-8]
    40ea:	1b5b      	subs	r3, r3, r5
    40ec:	1952      	adds	r2, r2, r5
    40ee:	689d      	ldr	r5, [r3, #8]
    40f0:	3708      	adds	r7, #8
    40f2:	42bd      	cmp	r5, r7
    40f4:	d005      	beq.n	4102 <_free_r+0x8a>
    40f6:	68df      	ldr	r7, [r3, #12]
    40f8:	60ef      	str	r7, [r5, #12]
    40fa:	60bd      	str	r5, [r7, #8]
    40fc:	e002      	b.n	4104 <_free_r+0x8c>
    40fe:	2100      	movs	r1, #0
    4100:	e000      	b.n	4104 <_free_r+0x8c>
    4102:	2101      	movs	r1, #1
    4104:	1825      	adds	r5, r4, r0
    4106:	686d      	ldr	r5, [r5, #4]
    4108:	f015 0f01 	tst.w	r5, #1
    410c:	d10f      	bne.n	412e <_free_r+0xb6>
    410e:	1812      	adds	r2, r2, r0
    4110:	b949      	cbnz	r1, 4126 <_free_r+0xae>
    4112:	68a0      	ldr	r0, [r4, #8]
    4114:	4d32      	ldr	r5, [pc, #200]	; (41e0 <_free_r+0x168>)
    4116:	42a8      	cmp	r0, r5
    4118:	d105      	bne.n	4126 <_free_r+0xae>
    411a:	60eb      	str	r3, [r5, #12]
    411c:	60ab      	str	r3, [r5, #8]
    411e:	60d8      	str	r0, [r3, #12]
    4120:	6098      	str	r0, [r3, #8]
    4122:	2101      	movs	r1, #1
    4124:	e003      	b.n	412e <_free_r+0xb6>
    4126:	68e0      	ldr	r0, [r4, #12]
    4128:	68a4      	ldr	r4, [r4, #8]
    412a:	60e0      	str	r0, [r4, #12]
    412c:	6084      	str	r4, [r0, #8]
    412e:	f042 0001 	orr.w	r0, r2, #1
    4132:	6058      	str	r0, [r3, #4]
    4134:	509a      	str	r2, [r3, r2]
    4136:	2900      	cmp	r1, #0
    4138:	d1ce      	bne.n	40d8 <_free_r+0x60>
    413a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    413e:	d20c      	bcs.n	415a <_free_r+0xe2>
    4140:	4924      	ldr	r1, [pc, #144]	; (41d4 <_free_r+0x15c>)
    4142:	08d2      	lsrs	r2, r2, #3
    4144:	1090      	asrs	r0, r2, #2
    4146:	2401      	movs	r4, #1
    4148:	fa04 f400 	lsl.w	r4, r4, r0
    414c:	6848      	ldr	r0, [r1, #4]
    414e:	4320      	orrs	r0, r4
    4150:	6048      	str	r0, [r1, #4]
    4152:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    4156:	6881      	ldr	r1, [r0, #8]
    4158:	e035      	b.n	41c6 <_free_r+0x14e>
    415a:	0a54      	lsrs	r4, r2, #9
    415c:	2c04      	cmp	r4, #4
    415e:	d802      	bhi.n	4166 <_free_r+0xee>
    4160:	0994      	lsrs	r4, r2, #6
    4162:	3438      	adds	r4, #56	; 0x38
    4164:	e016      	b.n	4194 <_free_r+0x11c>
    4166:	2c14      	cmp	r4, #20
    4168:	d801      	bhi.n	416e <_free_r+0xf6>
    416a:	345b      	adds	r4, #91	; 0x5b
    416c:	e012      	b.n	4194 <_free_r+0x11c>
    416e:	2c54      	cmp	r4, #84	; 0x54
    4170:	d802      	bhi.n	4178 <_free_r+0x100>
    4172:	0b14      	lsrs	r4, r2, #12
    4174:	346e      	adds	r4, #110	; 0x6e
    4176:	e00d      	b.n	4194 <_free_r+0x11c>
    4178:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
    417c:	d802      	bhi.n	4184 <_free_r+0x10c>
    417e:	0bd4      	lsrs	r4, r2, #15
    4180:	3477      	adds	r4, #119	; 0x77
    4182:	e007      	b.n	4194 <_free_r+0x11c>
    4184:	f240 5554 	movw	r5, #1364	; 0x554
    4188:	42ac      	cmp	r4, r5
    418a:	d802      	bhi.n	4192 <_free_r+0x11a>
    418c:	0c94      	lsrs	r4, r2, #18
    418e:	347c      	adds	r4, #124	; 0x7c
    4190:	e000      	b.n	4194 <_free_r+0x11c>
    4192:	247e      	movs	r4, #126	; 0x7e
    4194:	4d0f      	ldr	r5, [pc, #60]	; (41d4 <_free_r+0x15c>)
    4196:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    419a:	6881      	ldr	r1, [r0, #8]
    419c:	4281      	cmp	r1, r0
    419e:	d10c      	bne.n	41ba <_free_r+0x142>
    41a0:	6868      	ldr	r0, [r5, #4]
    41a2:	2201      	movs	r2, #1
    41a4:	10a4      	asrs	r4, r4, #2
    41a6:	fa02 f404 	lsl.w	r4, r2, r4
    41aa:	ea44 0200 	orr.w	r2, r4, r0
    41ae:	606a      	str	r2, [r5, #4]
    41b0:	4608      	mov	r0, r1
    41b2:	e008      	b.n	41c6 <_free_r+0x14e>
    41b4:	6889      	ldr	r1, [r1, #8]
    41b6:	4281      	cmp	r1, r0
    41b8:	d004      	beq.n	41c4 <_free_r+0x14c>
    41ba:	684c      	ldr	r4, [r1, #4]
    41bc:	f024 0403 	bic.w	r4, r4, #3
    41c0:	42a2      	cmp	r2, r4
    41c2:	d3f7      	bcc.n	41b4 <_free_r+0x13c>
    41c4:	68c8      	ldr	r0, [r1, #12]
    41c6:	60d8      	str	r0, [r3, #12]
    41c8:	6099      	str	r1, [r3, #8]
    41ca:	6083      	str	r3, [r0, #8]
    41cc:	60cb      	str	r3, [r1, #12]
    41ce:	e783      	b.n	40d8 <_free_r+0x60>
    41d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    41d2:	bf00      	nop
    41d4:	20000500 	.word	0x20000500
    41d8:	2000090c 	.word	0x2000090c
    41dc:	20000944 	.word	0x20000944
    41e0:	20000508 	.word	0x20000508

000041e4 <__sfvwrite_r>:
    41e4:	6893      	ldr	r3, [r2, #8]
    41e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41ea:	4606      	mov	r6, r0
    41ec:	460c      	mov	r4, r1
    41ee:	4691      	mov	r9, r2
    41f0:	b90b      	cbnz	r3, 41f6 <__sfvwrite_r+0x12>
    41f2:	2000      	movs	r0, #0
    41f4:	e14f      	b.n	4496 <__sfvwrite_r+0x2b2>
    41f6:	8988      	ldrh	r0, [r1, #12]
    41f8:	f000 0108 	and.w	r1, r0, #8
    41fc:	b20a      	sxth	r2, r1
    41fe:	b10a      	cbz	r2, 4204 <__sfvwrite_r+0x20>
    4200:	6923      	ldr	r3, [r4, #16]
    4202:	b95b      	cbnz	r3, 421c <__sfvwrite_r+0x38>
    4204:	4630      	mov	r0, r6
    4206:	4621      	mov	r1, r4
    4208:	f7ff fc3a 	bl	3a80 <__swsetup_r>
    420c:	b130      	cbz	r0, 421c <__sfvwrite_r+0x38>
    420e:	89a1      	ldrh	r1, [r4, #12]
    4210:	2209      	movs	r2, #9
    4212:	f041 0040 	orr.w	r0, r1, #64	; 0x40
    4216:	81a0      	strh	r0, [r4, #12]
    4218:	6032      	str	r2, [r6, #0]
    421a:	e13a      	b.n	4492 <__sfvwrite_r+0x2ae>
    421c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
    4220:	f8d9 8000 	ldr.w	r8, [r9]
    4224:	f00a 0c02 	and.w	ip, sl, #2
    4228:	fa0f f58c 	sxth.w	r5, ip
    422c:	b315      	cbz	r5, 4274 <__sfvwrite_r+0x90>
    422e:	f04f 0a00 	mov.w	sl, #0
    4232:	4657      	mov	r7, sl
    4234:	b937      	cbnz	r7, 4244 <__sfvwrite_r+0x60>
    4236:	f8d8 a000 	ldr.w	sl, [r8]
    423a:	f8d8 7004 	ldr.w	r7, [r8, #4]
    423e:	f108 0808 	add.w	r8, r8, #8
    4242:	e7f7      	b.n	4234 <__sfvwrite_r+0x50>
    4244:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    4248:	bf34      	ite	cc
    424a:	463b      	movcc	r3, r7
    424c:	f44f 6380 	movcs.w	r3, #1024	; 0x400
    4250:	4630      	mov	r0, r6
    4252:	69e1      	ldr	r1, [r4, #28]
    4254:	6a65      	ldr	r5, [r4, #36]	; 0x24
    4256:	4652      	mov	r2, sl
    4258:	47a8      	blx	r5
    425a:	2800      	cmp	r0, #0
    425c:	f340 8115 	ble.w	448a <__sfvwrite_r+0x2a6>
    4260:	f8d9 1008 	ldr.w	r1, [r9, #8]
    4264:	4482      	add	sl, r0
    4266:	1a3f      	subs	r7, r7, r0
    4268:	1a08      	subs	r0, r1, r0
    426a:	f8c9 0008 	str.w	r0, [r9, #8]
    426e:	2800      	cmp	r0, #0
    4270:	d1e0      	bne.n	4234 <__sfvwrite_r+0x50>
    4272:	e7be      	b.n	41f2 <__sfvwrite_r+0xe>
    4274:	f01a 0a01 	ands.w	sl, sl, #1
    4278:	d004      	beq.n	4284 <__sfvwrite_r+0xa0>
    427a:	46ab      	mov	fp, r5
    427c:	9501      	str	r5, [sp, #4]
    427e:	462f      	mov	r7, r5
    4280:	46aa      	mov	sl, r5
    4282:	e0c7      	b.n	4414 <__sfvwrite_r+0x230>
    4284:	4655      	mov	r5, sl
    4286:	b935      	cbnz	r5, 4296 <__sfvwrite_r+0xb2>
    4288:	f8d8 a000 	ldr.w	sl, [r8]
    428c:	f8d8 5004 	ldr.w	r5, [r8, #4]
    4290:	f108 0808 	add.w	r8, r8, #8
    4294:	e7f7      	b.n	4286 <__sfvwrite_r+0xa2>
    4296:	89a2      	ldrh	r2, [r4, #12]
    4298:	f8d4 b008 	ldr.w	fp, [r4, #8]
    429c:	f402 7000 	and.w	r0, r2, #512	; 0x200
    42a0:	b203      	sxth	r3, r0
    42a2:	2b00      	cmp	r3, #0
    42a4:	d052      	beq.n	434c <__sfvwrite_r+0x168>
    42a6:	455d      	cmp	r5, fp
    42a8:	d340      	bcc.n	432c <__sfvwrite_r+0x148>
    42aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
    42ae:	d03b      	beq.n	4328 <__sfvwrite_r+0x144>
    42b0:	6921      	ldr	r1, [r4, #16]
    42b2:	6827      	ldr	r7, [r4, #0]
    42b4:	6963      	ldr	r3, [r4, #20]
    42b6:	f04f 0b03 	mov.w	fp, #3
    42ba:	fb0b f303 	mul.w	r3, fp, r3
    42be:	2002      	movs	r0, #2
    42c0:	1a7f      	subs	r7, r7, r1
    42c2:	fb93 fcf0 	sdiv	ip, r3, r0
    42c6:	1c7b      	adds	r3, r7, #1
    42c8:	1958      	adds	r0, r3, r5
    42ca:	f402 6280 	and.w	r2, r2, #1024	; 0x400
    42ce:	4584      	cmp	ip, r0
    42d0:	bf28      	it	cs
    42d2:	4660      	movcs	r0, ip
    42d4:	b213      	sxth	r3, r2
    42d6:	9001      	str	r0, [sp, #4]
    42d8:	4630      	mov	r0, r6
    42da:	b17b      	cbz	r3, 42fc <__sfvwrite_r+0x118>
    42dc:	9901      	ldr	r1, [sp, #4]
    42de:	f000 f9ed 	bl	46bc <_malloc_r>
    42e2:	4683      	mov	fp, r0
    42e4:	b198      	cbz	r0, 430e <__sfvwrite_r+0x12a>
    42e6:	6921      	ldr	r1, [r4, #16]
    42e8:	463a      	mov	r2, r7
    42ea:	f000 fc57 	bl	4b9c <memcpy>
    42ee:	89a1      	ldrh	r1, [r4, #12]
    42f0:	f421 6090 	bic.w	r0, r1, #1152	; 0x480
    42f4:	f040 0280 	orr.w	r2, r0, #128	; 0x80
    42f8:	81a2      	strh	r2, [r4, #12]
    42fa:	e00b      	b.n	4314 <__sfvwrite_r+0x130>
    42fc:	9a01      	ldr	r2, [sp, #4]
    42fe:	f000 fc73 	bl	4be8 <_realloc_r>
    4302:	4683      	mov	fp, r0
    4304:	b930      	cbnz	r0, 4314 <__sfvwrite_r+0x130>
    4306:	4630      	mov	r0, r6
    4308:	6921      	ldr	r1, [r4, #16]
    430a:	f7ff feb5 	bl	4078 <_free_r>
    430e:	230c      	movs	r3, #12
    4310:	6033      	str	r3, [r6, #0]
    4312:	e0ba      	b.n	448a <__sfvwrite_r+0x2a6>
    4314:	9901      	ldr	r1, [sp, #4]
    4316:	f8c4 b010 	str.w	fp, [r4, #16]
    431a:	eb0b 0307 	add.w	r3, fp, r7
    431e:	1bcf      	subs	r7, r1, r7
    4320:	6023      	str	r3, [r4, #0]
    4322:	6161      	str	r1, [r4, #20]
    4324:	46ab      	mov	fp, r5
    4326:	60a7      	str	r7, [r4, #8]
    4328:	455d      	cmp	r5, fp
    432a:	d200      	bcs.n	432e <__sfvwrite_r+0x14a>
    432c:	46ab      	mov	fp, r5
    432e:	465a      	mov	r2, fp
    4330:	4651      	mov	r1, sl
    4332:	6820      	ldr	r0, [r4, #0]
    4334:	f000 fc3b 	bl	4bae <memmove>
    4338:	68a0      	ldr	r0, [r4, #8]
    433a:	6823      	ldr	r3, [r4, #0]
    433c:	ebcb 0200 	rsb	r2, fp, r0
    4340:	eb03 010b 	add.w	r1, r3, fp
    4344:	60a2      	str	r2, [r4, #8]
    4346:	6021      	str	r1, [r4, #0]
    4348:	46ab      	mov	fp, r5
    434a:	e02a      	b.n	43a2 <__sfvwrite_r+0x1be>
    434c:	6820      	ldr	r0, [r4, #0]
    434e:	6921      	ldr	r1, [r4, #16]
    4350:	4288      	cmp	r0, r1
    4352:	d90f      	bls.n	4374 <__sfvwrite_r+0x190>
    4354:	455d      	cmp	r5, fp
    4356:	d90d      	bls.n	4374 <__sfvwrite_r+0x190>
    4358:	4651      	mov	r1, sl
    435a:	465a      	mov	r2, fp
    435c:	f000 fc27 	bl	4bae <memmove>
    4360:	6822      	ldr	r2, [r4, #0]
    4362:	eb02 000b 	add.w	r0, r2, fp
    4366:	6020      	str	r0, [r4, #0]
    4368:	4621      	mov	r1, r4
    436a:	4630      	mov	r0, r6
    436c:	f7ff fbf4 	bl	3b58 <_fflush_r>
    4370:	b1b8      	cbz	r0, 43a2 <__sfvwrite_r+0x1be>
    4372:	e08a      	b.n	448a <__sfvwrite_r+0x2a6>
    4374:	6963      	ldr	r3, [r4, #20]
    4376:	429d      	cmp	r5, r3
    4378:	d308      	bcc.n	438c <__sfvwrite_r+0x1a8>
    437a:	6a67      	ldr	r7, [r4, #36]	; 0x24
    437c:	69e1      	ldr	r1, [r4, #28]
    437e:	4630      	mov	r0, r6
    4380:	4652      	mov	r2, sl
    4382:	47b8      	blx	r7
    4384:	f1b0 0b00 	subs.w	fp, r0, #0
    4388:	dc0b      	bgt.n	43a2 <__sfvwrite_r+0x1be>
    438a:	e07e      	b.n	448a <__sfvwrite_r+0x2a6>
    438c:	4651      	mov	r1, sl
    438e:	462a      	mov	r2, r5
    4390:	f000 fc0d 	bl	4bae <memmove>
    4394:	68a2      	ldr	r2, [r4, #8]
    4396:	6823      	ldr	r3, [r4, #0]
    4398:	1b50      	subs	r0, r2, r5
    439a:	1959      	adds	r1, r3, r5
    439c:	46ab      	mov	fp, r5
    439e:	60a0      	str	r0, [r4, #8]
    43a0:	6021      	str	r1, [r4, #0]
    43a2:	f8d9 0008 	ldr.w	r0, [r9, #8]
    43a6:	ebcb 0200 	rsb	r2, fp, r0
    43aa:	44da      	add	sl, fp
    43ac:	ebcb 0505 	rsb	r5, fp, r5
    43b0:	f8c9 2008 	str.w	r2, [r9, #8]
    43b4:	2a00      	cmp	r2, #0
    43b6:	f47f af66 	bne.w	4286 <__sfvwrite_r+0xa2>
    43ba:	e71a      	b.n	41f2 <__sfvwrite_r+0xe>
    43bc:	9801      	ldr	r0, [sp, #4]
    43be:	2800      	cmp	r0, #0
    43c0:	d032      	beq.n	4428 <__sfvwrite_r+0x244>
    43c2:	6820      	ldr	r0, [r4, #0]
    43c4:	6921      	ldr	r1, [r4, #16]
    43c6:	68a5      	ldr	r5, [r4, #8]
    43c8:	f8d4 e014 	ldr.w	lr, [r4, #20]
    43cc:	45d3      	cmp	fp, sl
    43ce:	bf34      	ite	cc
    43d0:	465b      	movcc	r3, fp
    43d2:	4653      	movcs	r3, sl
    43d4:	4288      	cmp	r0, r1
    43d6:	d937      	bls.n	4448 <__sfvwrite_r+0x264>
    43d8:	4475      	add	r5, lr
    43da:	42ab      	cmp	r3, r5
    43dc:	dd34      	ble.n	4448 <__sfvwrite_r+0x264>
    43de:	4639      	mov	r1, r7
    43e0:	462a      	mov	r2, r5
    43e2:	f000 fbe4 	bl	4bae <memmove>
    43e6:	6820      	ldr	r0, [r4, #0]
    43e8:	1943      	adds	r3, r0, r5
    43ea:	6023      	str	r3, [r4, #0]
    43ec:	4630      	mov	r0, r6
    43ee:	4621      	mov	r1, r4
    43f0:	f7ff fbb2 	bl	3b58 <_fflush_r>
    43f4:	2800      	cmp	r0, #0
    43f6:	d148      	bne.n	448a <__sfvwrite_r+0x2a6>
    43f8:	ebbb 0b05 	subs.w	fp, fp, r5
    43fc:	d03d      	beq.n	447a <__sfvwrite_r+0x296>
    43fe:	f8d9 2008 	ldr.w	r2, [r9, #8]
    4402:	197f      	adds	r7, r7, r5
    4404:	ebc5 0a0a 	rsb	sl, r5, sl
    4408:	1b55      	subs	r5, r2, r5
    440a:	f8c9 5008 	str.w	r5, [r9, #8]
    440e:	2d00      	cmp	r5, #0
    4410:	f43f aeef 	beq.w	41f2 <__sfvwrite_r+0xe>
    4414:	f1ba 0f00 	cmp.w	sl, #0
    4418:	d1d0      	bne.n	43bc <__sfvwrite_r+0x1d8>
    441a:	2100      	movs	r1, #0
    441c:	e898 0480 	ldmia.w	r8, {r7, sl}
    4420:	9101      	str	r1, [sp, #4]
    4422:	f108 0808 	add.w	r8, r8, #8
    4426:	e7f5      	b.n	4414 <__sfvwrite_r+0x230>
    4428:	4638      	mov	r0, r7
    442a:	210a      	movs	r1, #10
    442c:	4652      	mov	r2, sl
    442e:	f000 fba7 	bl	4b80 <memchr>
    4432:	b120      	cbz	r0, 443e <__sfvwrite_r+0x25a>
    4434:	f100 0101 	add.w	r1, r0, #1
    4438:	ebc7 0b01 	rsb	fp, r7, r1
    443c:	e001      	b.n	4442 <__sfvwrite_r+0x25e>
    443e:	f10a 0b01 	add.w	fp, sl, #1
    4442:	2201      	movs	r2, #1
    4444:	9201      	str	r2, [sp, #4]
    4446:	e7bc      	b.n	43c2 <__sfvwrite_r+0x1de>
    4448:	4573      	cmp	r3, lr
    444a:	db08      	blt.n	445e <__sfvwrite_r+0x27a>
    444c:	6a65      	ldr	r5, [r4, #36]	; 0x24
    444e:	69e1      	ldr	r1, [r4, #28]
    4450:	4630      	mov	r0, r6
    4452:	463a      	mov	r2, r7
    4454:	4673      	mov	r3, lr
    4456:	47a8      	blx	r5
    4458:	1e05      	subs	r5, r0, #0
    445a:	dccd      	bgt.n	43f8 <__sfvwrite_r+0x214>
    445c:	e015      	b.n	448a <__sfvwrite_r+0x2a6>
    445e:	461a      	mov	r2, r3
    4460:	4639      	mov	r1, r7
    4462:	9300      	str	r3, [sp, #0]
    4464:	f000 fba3 	bl	4bae <memmove>
    4468:	9b00      	ldr	r3, [sp, #0]
    446a:	6825      	ldr	r5, [r4, #0]
    446c:	68a0      	ldr	r0, [r4, #8]
    446e:	18e9      	adds	r1, r5, r3
    4470:	1ac2      	subs	r2, r0, r3
    4472:	60a2      	str	r2, [r4, #8]
    4474:	6021      	str	r1, [r4, #0]
    4476:	461d      	mov	r5, r3
    4478:	e7be      	b.n	43f8 <__sfvwrite_r+0x214>
    447a:	4630      	mov	r0, r6
    447c:	4621      	mov	r1, r4
    447e:	f7ff fb6b 	bl	3b58 <_fflush_r>
    4482:	b910      	cbnz	r0, 448a <__sfvwrite_r+0x2a6>
    4484:	f8cd b004 	str.w	fp, [sp, #4]
    4488:	e7b9      	b.n	43fe <__sfvwrite_r+0x21a>
    448a:	89a2      	ldrh	r2, [r4, #12]
    448c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
    4490:	81a3      	strh	r3, [r4, #12]
    4492:	f04f 30ff 	mov.w	r0, #4294967295
    4496:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000449a <_fwalk>:
    449a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    449e:	4604      	mov	r4, r0
    44a0:	4688      	mov	r8, r1
    44a2:	f7ff fcb1 	bl	3e08 <__sfp_lock_acquire>
    44a6:	f504 7438 	add.w	r4, r4, #736	; 0x2e0
    44aa:	2600      	movs	r6, #0
    44ac:	b18c      	cbz	r4, 44d2 <_fwalk+0x38>
    44ae:	68a5      	ldr	r5, [r4, #8]
    44b0:	6867      	ldr	r7, [r4, #4]
    44b2:	3f01      	subs	r7, #1
    44b4:	d40b      	bmi.n	44ce <_fwalk+0x34>
    44b6:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
    44ba:	b133      	cbz	r3, 44ca <_fwalk+0x30>
    44bc:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
    44c0:	1c43      	adds	r3, r0, #1
    44c2:	d002      	beq.n	44ca <_fwalk+0x30>
    44c4:	4628      	mov	r0, r5
    44c6:	47c0      	blx	r8
    44c8:	4306      	orrs	r6, r0
    44ca:	3568      	adds	r5, #104	; 0x68
    44cc:	e7f1      	b.n	44b2 <_fwalk+0x18>
    44ce:	6824      	ldr	r4, [r4, #0]
    44d0:	e7ec      	b.n	44ac <_fwalk+0x12>
    44d2:	f7ff fc9a 	bl	3e0a <__sfp_lock_release>
    44d6:	4630      	mov	r0, r6
    44d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000044dc <_fwalk_reent>:
    44dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    44e0:	4680      	mov	r8, r0
    44e2:	4689      	mov	r9, r1
    44e4:	f7ff fc90 	bl	3e08 <__sfp_lock_acquire>
    44e8:	f508 7438 	add.w	r4, r8, #736	; 0x2e0
    44ec:	2600      	movs	r6, #0
    44ee:	b194      	cbz	r4, 4516 <_fwalk_reent+0x3a>
    44f0:	68a5      	ldr	r5, [r4, #8]
    44f2:	6867      	ldr	r7, [r4, #4]
    44f4:	3f01      	subs	r7, #1
    44f6:	d40c      	bmi.n	4512 <_fwalk_reent+0x36>
    44f8:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
    44fc:	b13b      	cbz	r3, 450e <_fwalk_reent+0x32>
    44fe:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
    4502:	1c43      	adds	r3, r0, #1
    4504:	d003      	beq.n	450e <_fwalk_reent+0x32>
    4506:	4640      	mov	r0, r8
    4508:	4629      	mov	r1, r5
    450a:	47c8      	blx	r9
    450c:	4306      	orrs	r6, r0
    450e:	3568      	adds	r5, #104	; 0x68
    4510:	e7f0      	b.n	44f4 <_fwalk_reent+0x18>
    4512:	6824      	ldr	r4, [r4, #0]
    4514:	e7eb      	b.n	44ee <_fwalk_reent+0x12>
    4516:	f7ff fc78 	bl	3e0a <__sfp_lock_release>
    451a:	4630      	mov	r0, r6
    451c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00004520 <iswspace>:
    4520:	28ff      	cmp	r0, #255	; 0xff
    4522:	d807      	bhi.n	4534 <iswspace+0x14>
    4524:	4b04      	ldr	r3, [pc, #16]	; (4538 <iswspace+0x18>)
    4526:	6819      	ldr	r1, [r3, #0]
    4528:	1808      	adds	r0, r1, r0
    452a:	7842      	ldrb	r2, [r0, #1]
    452c:	f002 0308 	and.w	r3, r2, #8
    4530:	b2d8      	uxtb	r0, r3
    4532:	4770      	bx	lr
    4534:	2000      	movs	r0, #0
    4536:	4770      	bx	lr
    4538:	20000480 	.word	0x20000480

0000453c <_setlocale_r>:
    453c:	b510      	push	{r4, lr}
    453e:	4614      	mov	r4, r2
    4540:	b90a      	cbnz	r2, 4546 <_setlocale_r+0xa>
    4542:	480c      	ldr	r0, [pc, #48]	; (4574 <_setlocale_r+0x38>)
    4544:	bd10      	pop	{r4, pc}
    4546:	4610      	mov	r0, r2
    4548:	490b      	ldr	r1, [pc, #44]	; (4578 <_setlocale_r+0x3c>)
    454a:	f000 fdc4 	bl	50d6 <strcmp>
    454e:	2800      	cmp	r0, #0
    4550:	d0f7      	beq.n	4542 <_setlocale_r+0x6>
    4552:	4620      	mov	r0, r4
    4554:	4907      	ldr	r1, [pc, #28]	; (4574 <_setlocale_r+0x38>)
    4556:	f000 fdbe 	bl	50d6 <strcmp>
    455a:	2800      	cmp	r0, #0
    455c:	d0f1      	beq.n	4542 <_setlocale_r+0x6>
    455e:	4620      	mov	r0, r4
    4560:	4906      	ldr	r1, [pc, #24]	; (457c <_setlocale_r+0x40>)
    4562:	f000 fdb8 	bl	50d6 <strcmp>
    4566:	4b03      	ldr	r3, [pc, #12]	; (4574 <_setlocale_r+0x38>)
    4568:	2800      	cmp	r0, #0
    456a:	bf0c      	ite	eq
    456c:	4618      	moveq	r0, r3
    456e:	2000      	movne	r0, #0
    4570:	bd10      	pop	{r4, pc}
    4572:	bf00      	nop
    4574:	0000621c 	.word	0x0000621c
    4578:	00006385 	.word	0x00006385
    457c:	0000621f 	.word	0x0000621f

00004580 <__locale_charset>:
    4580:	4800      	ldr	r0, [pc, #0]	; (4584 <__locale_charset+0x4>)
    4582:	4770      	bx	lr
    4584:	20000484 	.word	0x20000484

00004588 <__locale_mb_cur_max>:
    4588:	4b01      	ldr	r3, [pc, #4]	; (4590 <__locale_mb_cur_max+0x8>)
    458a:	6a18      	ldr	r0, [r3, #32]
    458c:	4770      	bx	lr
    458e:	bf00      	nop
    4590:	20000484 	.word	0x20000484

00004594 <__locale_msgcharset>:
    4594:	4800      	ldr	r0, [pc, #0]	; (4598 <__locale_msgcharset+0x4>)
    4596:	4770      	bx	lr
    4598:	200004a8 	.word	0x200004a8

0000459c <__locale_cjk_lang>:
    459c:	2000      	movs	r0, #0
    459e:	4770      	bx	lr

000045a0 <_localeconv_r>:
    45a0:	4800      	ldr	r0, [pc, #0]	; (45a4 <_localeconv_r+0x4>)
    45a2:	4770      	bx	lr
    45a4:	200004c8 	.word	0x200004c8

000045a8 <setlocale>:
    45a8:	460a      	mov	r2, r1
    45aa:	4903      	ldr	r1, [pc, #12]	; (45b8 <setlocale+0x10>)
    45ac:	4603      	mov	r3, r0
    45ae:	6808      	ldr	r0, [r1, #0]
    45b0:	4619      	mov	r1, r3
    45b2:	f7ff bfc3 	b.w	453c <_setlocale_r>
    45b6:	bf00      	nop
    45b8:	20000050 	.word	0x20000050

000045bc <localeconv>:
    45bc:	4800      	ldr	r0, [pc, #0]	; (45c0 <localeconv+0x4>)
    45be:	4770      	bx	lr
    45c0:	200004c8 	.word	0x200004c8

000045c4 <__smakebuf_r>:
    45c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    45c6:	898b      	ldrh	r3, [r1, #12]
    45c8:	460c      	mov	r4, r1
    45ca:	f003 0102 	and.w	r1, r3, #2
    45ce:	b20a      	sxth	r2, r1
    45d0:	b091      	sub	sp, #68	; 0x44
    45d2:	4606      	mov	r6, r0
    45d4:	2a00      	cmp	r2, #0
    45d6:	d13f      	bne.n	4658 <__smakebuf_r+0x94>
    45d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    45dc:	2900      	cmp	r1, #0
    45de:	da0d      	bge.n	45fc <__smakebuf_r+0x38>
    45e0:	89a7      	ldrh	r7, [r4, #12]
    45e2:	f007 0280 	and.w	r2, r7, #128	; 0x80
    45e6:	f447 6300 	orr.w	r3, r7, #2048	; 0x800
    45ea:	b210      	sxth	r0, r2
    45ec:	2800      	cmp	r0, #0
    45ee:	bf0c      	ite	eq
    45f0:	f44f 6580 	moveq.w	r5, #1024	; 0x400
    45f4:	2540      	movne	r5, #64	; 0x40
    45f6:	81a3      	strh	r3, [r4, #12]
    45f8:	2700      	movs	r7, #0
    45fa:	e020      	b.n	463e <__smakebuf_r+0x7a>
    45fc:	aa01      	add	r2, sp, #4
    45fe:	f001 f9db 	bl	59b8 <_fstat_r>
    4602:	2800      	cmp	r0, #0
    4604:	dbec      	blt.n	45e0 <__smakebuf_r+0x1c>
    4606:	9802      	ldr	r0, [sp, #8]
    4608:	f400 4570 	and.w	r5, r0, #61440	; 0xf000
    460c:	f5b5 5300 	subs.w	r3, r5, #8192	; 0x2000
    4610:	425f      	negs	r7, r3
    4612:	415f      	adcs	r7, r3
    4614:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    4618:	d10b      	bne.n	4632 <__smakebuf_r+0x6e>
    461a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    461c:	4a1d      	ldr	r2, [pc, #116]	; (4694 <__smakebuf_r+0xd0>)
    461e:	4291      	cmp	r1, r2
    4620:	d107      	bne.n	4632 <__smakebuf_r+0x6e>
    4622:	89a3      	ldrh	r3, [r4, #12]
    4624:	f44f 6580 	mov.w	r5, #1024	; 0x400
    4628:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
    462c:	81a1      	strh	r1, [r4, #12]
    462e:	64e5      	str	r5, [r4, #76]	; 0x4c
    4630:	e005      	b.n	463e <__smakebuf_r+0x7a>
    4632:	89a0      	ldrh	r0, [r4, #12]
    4634:	f440 6500 	orr.w	r5, r0, #2048	; 0x800
    4638:	81a5      	strh	r5, [r4, #12]
    463a:	f44f 6580 	mov.w	r5, #1024	; 0x400
    463e:	4630      	mov	r0, r6
    4640:	4629      	mov	r1, r5
    4642:	f000 f83b 	bl	46bc <_malloc_r>
    4646:	b970      	cbnz	r0, 4666 <__smakebuf_r+0xa2>
    4648:	89a3      	ldrh	r3, [r4, #12]
    464a:	f403 7200 	and.w	r2, r3, #512	; 0x200
    464e:	b210      	sxth	r0, r2
    4650:	b9e8      	cbnz	r0, 468e <__smakebuf_r+0xca>
    4652:	f043 0102 	orr.w	r1, r3, #2
    4656:	81a1      	strh	r1, [r4, #12]
    4658:	f104 0343 	add.w	r3, r4, #67	; 0x43
    465c:	2201      	movs	r2, #1
    465e:	6023      	str	r3, [r4, #0]
    4660:	6123      	str	r3, [r4, #16]
    4662:	6162      	str	r2, [r4, #20]
    4664:	e013      	b.n	468e <__smakebuf_r+0xca>
    4666:	89a2      	ldrh	r2, [r4, #12]
    4668:	490b      	ldr	r1, [pc, #44]	; (4698 <__smakebuf_r+0xd4>)
    466a:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    466e:	63f1      	str	r1, [r6, #60]	; 0x3c
    4670:	81a3      	strh	r3, [r4, #12]
    4672:	6020      	str	r0, [r4, #0]
    4674:	6120      	str	r0, [r4, #16]
    4676:	6165      	str	r5, [r4, #20]
    4678:	b14f      	cbz	r7, 468e <__smakebuf_r+0xca>
    467a:	4630      	mov	r0, r6
    467c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    4680:	f001 f9ac 	bl	59dc <_isatty_r>
    4684:	b118      	cbz	r0, 468e <__smakebuf_r+0xca>
    4686:	89a0      	ldrh	r0, [r4, #12]
    4688:	f040 0101 	orr.w	r1, r0, #1
    468c:	81a1      	strh	r1, [r4, #12]
    468e:	b011      	add	sp, #68	; 0x44
    4690:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4692:	bf00      	nop
    4694:	000050ab 	.word	0x000050ab
    4698:	00003cb5 	.word	0x00003cb5

0000469c <malloc>:
    469c:	4b02      	ldr	r3, [pc, #8]	; (46a8 <malloc+0xc>)
    469e:	4601      	mov	r1, r0
    46a0:	6818      	ldr	r0, [r3, #0]
    46a2:	f000 b80b 	b.w	46bc <_malloc_r>
    46a6:	bf00      	nop
    46a8:	20000050 	.word	0x20000050

000046ac <free>:
    46ac:	4b02      	ldr	r3, [pc, #8]	; (46b8 <free+0xc>)
    46ae:	4601      	mov	r1, r0
    46b0:	6818      	ldr	r0, [r3, #0]
    46b2:	f7ff bce1 	b.w	4078 <_free_r>
    46b6:	bf00      	nop
    46b8:	20000050 	.word	0x20000050

000046bc <_malloc_r>:
    46bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    46c0:	f101 040b 	add.w	r4, r1, #11
    46c4:	2c16      	cmp	r4, #22
    46c6:	4606      	mov	r6, r0
    46c8:	d903      	bls.n	46d2 <_malloc_r+0x16>
    46ca:	f034 0407 	bics.w	r4, r4, #7
    46ce:	d501      	bpl.n	46d4 <_malloc_r+0x18>
    46d0:	e002      	b.n	46d8 <_malloc_r+0x1c>
    46d2:	2410      	movs	r4, #16
    46d4:	428c      	cmp	r4, r1
    46d6:	d202      	bcs.n	46de <_malloc_r+0x22>
    46d8:	250c      	movs	r5, #12
    46da:	6035      	str	r5, [r6, #0]
    46dc:	e1d9      	b.n	4a92 <_malloc_r+0x3d6>
    46de:	4630      	mov	r0, r6
    46e0:	f000 fa7f 	bl	4be2 <__malloc_lock>
    46e4:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
    46e8:	d214      	bcs.n	4714 <_malloc_r+0x58>
    46ea:	4da0      	ldr	r5, [pc, #640]	; (496c <_malloc_r+0x2b0>)
    46ec:	08e1      	lsrs	r1, r4, #3
    46ee:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
    46f2:	68c5      	ldr	r5, [r0, #12]
    46f4:	4285      	cmp	r5, r0
    46f6:	d105      	bne.n	4704 <_malloc_r+0x48>
    46f8:	f105 0308 	add.w	r3, r5, #8
    46fc:	696d      	ldr	r5, [r5, #20]
    46fe:	1c8a      	adds	r2, r1, #2
    4700:	429d      	cmp	r5, r3
    4702:	d044      	beq.n	478e <_malloc_r+0xd2>
    4704:	68e8      	ldr	r0, [r5, #12]
    4706:	68a9      	ldr	r1, [r5, #8]
    4708:	686a      	ldr	r2, [r5, #4]
    470a:	60c8      	str	r0, [r1, #12]
    470c:	f022 0303 	bic.w	r3, r2, #3
    4710:	6081      	str	r1, [r0, #8]
    4712:	e059      	b.n	47c8 <_malloc_r+0x10c>
    4714:	0a62      	lsrs	r2, r4, #9
    4716:	d101      	bne.n	471c <_malloc_r+0x60>
    4718:	08e2      	lsrs	r2, r4, #3
    471a:	e01b      	b.n	4754 <_malloc_r+0x98>
    471c:	2a04      	cmp	r2, #4
    471e:	d802      	bhi.n	4726 <_malloc_r+0x6a>
    4720:	09a2      	lsrs	r2, r4, #6
    4722:	3238      	adds	r2, #56	; 0x38
    4724:	e016      	b.n	4754 <_malloc_r+0x98>
    4726:	2a14      	cmp	r2, #20
    4728:	d801      	bhi.n	472e <_malloc_r+0x72>
    472a:	325b      	adds	r2, #91	; 0x5b
    472c:	e012      	b.n	4754 <_malloc_r+0x98>
    472e:	2a54      	cmp	r2, #84	; 0x54
    4730:	d802      	bhi.n	4738 <_malloc_r+0x7c>
    4732:	0b22      	lsrs	r2, r4, #12
    4734:	326e      	adds	r2, #110	; 0x6e
    4736:	e00d      	b.n	4754 <_malloc_r+0x98>
    4738:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    473c:	d802      	bhi.n	4744 <_malloc_r+0x88>
    473e:	0be2      	lsrs	r2, r4, #15
    4740:	3277      	adds	r2, #119	; 0x77
    4742:	e007      	b.n	4754 <_malloc_r+0x98>
    4744:	f240 5354 	movw	r3, #1364	; 0x554
    4748:	429a      	cmp	r2, r3
    474a:	d802      	bhi.n	4752 <_malloc_r+0x96>
    474c:	0ca2      	lsrs	r2, r4, #18
    474e:	327c      	adds	r2, #124	; 0x7c
    4750:	e000      	b.n	4754 <_malloc_r+0x98>
    4752:	227e      	movs	r2, #126	; 0x7e
    4754:	4885      	ldr	r0, [pc, #532]	; (496c <_malloc_r+0x2b0>)
    4756:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
    475a:	68dd      	ldr	r5, [r3, #12]
    475c:	429d      	cmp	r5, r3
    475e:	d015      	beq.n	478c <_malloc_r+0xd0>
    4760:	6869      	ldr	r1, [r5, #4]
    4762:	f021 0103 	bic.w	r1, r1, #3
    4766:	1b08      	subs	r0, r1, r4
    4768:	280f      	cmp	r0, #15
    476a:	dd01      	ble.n	4770 <_malloc_r+0xb4>
    476c:	3a01      	subs	r2, #1
    476e:	e00d      	b.n	478c <_malloc_r+0xd0>
    4770:	2800      	cmp	r0, #0
    4772:	db09      	blt.n	4788 <_malloc_r+0xcc>
    4774:	68eb      	ldr	r3, [r5, #12]
    4776:	68aa      	ldr	r2, [r5, #8]
    4778:	60d3      	str	r3, [r2, #12]
    477a:	609a      	str	r2, [r3, #8]
    477c:	186b      	adds	r3, r5, r1
    477e:	685a      	ldr	r2, [r3, #4]
    4780:	f042 0001 	orr.w	r0, r2, #1
    4784:	6058      	str	r0, [r3, #4]
    4786:	e190      	b.n	4aaa <_malloc_r+0x3ee>
    4788:	68ed      	ldr	r5, [r5, #12]
    478a:	e7e7      	b.n	475c <_malloc_r+0xa0>
    478c:	3201      	adds	r2, #1
    478e:	4977      	ldr	r1, [pc, #476]	; (496c <_malloc_r+0x2b0>)
    4790:	690d      	ldr	r5, [r1, #16]
    4792:	f101 0708 	add.w	r7, r1, #8
    4796:	42bd      	cmp	r5, r7
    4798:	d068      	beq.n	486c <_malloc_r+0x1b0>
    479a:	6868      	ldr	r0, [r5, #4]
    479c:	f020 0303 	bic.w	r3, r0, #3
    47a0:	1b18      	subs	r0, r3, r4
    47a2:	280f      	cmp	r0, #15
    47a4:	dd0c      	ble.n	47c0 <_malloc_r+0x104>
    47a6:	192b      	adds	r3, r5, r4
    47a8:	614b      	str	r3, [r1, #20]
    47aa:	610b      	str	r3, [r1, #16]
    47ac:	f044 0401 	orr.w	r4, r4, #1
    47b0:	f040 0101 	orr.w	r1, r0, #1
    47b4:	606c      	str	r4, [r5, #4]
    47b6:	60df      	str	r7, [r3, #12]
    47b8:	609f      	str	r7, [r3, #8]
    47ba:	6059      	str	r1, [r3, #4]
    47bc:	5018      	str	r0, [r3, r0]
    47be:	e174      	b.n	4aaa <_malloc_r+0x3ee>
    47c0:	2800      	cmp	r0, #0
    47c2:	614f      	str	r7, [r1, #20]
    47c4:	610f      	str	r7, [r1, #16]
    47c6:	db01      	blt.n	47cc <_malloc_r+0x110>
    47c8:	18eb      	adds	r3, r5, r3
    47ca:	e7d8      	b.n	477e <_malloc_r+0xc2>
    47cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    47d0:	d20f      	bcs.n	47f2 <_malloc_r+0x136>
    47d2:	08db      	lsrs	r3, r3, #3
    47d4:	1098      	asrs	r0, r3, #2
    47d6:	2701      	movs	r7, #1
    47d8:	fa07 f700 	lsl.w	r7, r7, r0
    47dc:	6848      	ldr	r0, [r1, #4]
    47de:	4307      	orrs	r7, r0
    47e0:	604f      	str	r7, [r1, #4]
    47e2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    47e6:	60e9      	str	r1, [r5, #12]
    47e8:	688b      	ldr	r3, [r1, #8]
    47ea:	60ab      	str	r3, [r5, #8]
    47ec:	60dd      	str	r5, [r3, #12]
    47ee:	608d      	str	r5, [r1, #8]
    47f0:	e03c      	b.n	486c <_malloc_r+0x1b0>
    47f2:	0a58      	lsrs	r0, r3, #9
    47f4:	2804      	cmp	r0, #4
    47f6:	d802      	bhi.n	47fe <_malloc_r+0x142>
    47f8:	0998      	lsrs	r0, r3, #6
    47fa:	3038      	adds	r0, #56	; 0x38
    47fc:	e016      	b.n	482c <_malloc_r+0x170>
    47fe:	2814      	cmp	r0, #20
    4800:	d801      	bhi.n	4806 <_malloc_r+0x14a>
    4802:	305b      	adds	r0, #91	; 0x5b
    4804:	e012      	b.n	482c <_malloc_r+0x170>
    4806:	2854      	cmp	r0, #84	; 0x54
    4808:	d802      	bhi.n	4810 <_malloc_r+0x154>
    480a:	0b18      	lsrs	r0, r3, #12
    480c:	306e      	adds	r0, #110	; 0x6e
    480e:	e00d      	b.n	482c <_malloc_r+0x170>
    4810:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
    4814:	d802      	bhi.n	481c <_malloc_r+0x160>
    4816:	0bd8      	lsrs	r0, r3, #15
    4818:	3077      	adds	r0, #119	; 0x77
    481a:	e007      	b.n	482c <_malloc_r+0x170>
    481c:	f240 5754 	movw	r7, #1364	; 0x554
    4820:	42b8      	cmp	r0, r7
    4822:	d802      	bhi.n	482a <_malloc_r+0x16e>
    4824:	0c98      	lsrs	r0, r3, #18
    4826:	307c      	adds	r0, #124	; 0x7c
    4828:	e000      	b.n	482c <_malloc_r+0x170>
    482a:	207e      	movs	r0, #126	; 0x7e
    482c:	f8df e13c 	ldr.w	lr, [pc, #316]	; 496c <_malloc_r+0x2b0>
    4830:	eb0e 07c0 	add.w	r7, lr, r0, lsl #3
    4834:	68b9      	ldr	r1, [r7, #8]
    4836:	42b9      	cmp	r1, r7
    4838:	d10e      	bne.n	4858 <_malloc_r+0x19c>
    483a:	1087      	asrs	r7, r0, #2
    483c:	2301      	movs	r3, #1
    483e:	fa03 f007 	lsl.w	r0, r3, r7
    4842:	f8de 7004 	ldr.w	r7, [lr, #4]
    4846:	ea40 0307 	orr.w	r3, r0, r7
    484a:	f8ce 3004 	str.w	r3, [lr, #4]
    484e:	4608      	mov	r0, r1
    4850:	e008      	b.n	4864 <_malloc_r+0x1a8>
    4852:	6889      	ldr	r1, [r1, #8]
    4854:	42b9      	cmp	r1, r7
    4856:	d004      	beq.n	4862 <_malloc_r+0x1a6>
    4858:	6848      	ldr	r0, [r1, #4]
    485a:	f020 0003 	bic.w	r0, r0, #3
    485e:	4283      	cmp	r3, r0
    4860:	d3f7      	bcc.n	4852 <_malloc_r+0x196>
    4862:	68c8      	ldr	r0, [r1, #12]
    4864:	60e8      	str	r0, [r5, #12]
    4866:	60a9      	str	r1, [r5, #8]
    4868:	60cd      	str	r5, [r1, #12]
    486a:	6085      	str	r5, [r0, #8]
    486c:	4f3f      	ldr	r7, [pc, #252]	; (496c <_malloc_r+0x2b0>)
    486e:	1095      	asrs	r5, r2, #2
    4870:	2001      	movs	r0, #1
    4872:	6879      	ldr	r1, [r7, #4]
    4874:	fa00 f305 	lsl.w	r3, r0, r5
    4878:	428b      	cmp	r3, r1
    487a:	d85d      	bhi.n	4938 <_malloc_r+0x27c>
    487c:	420b      	tst	r3, r1
    487e:	d105      	bne.n	488c <_malloc_r+0x1d0>
    4880:	f022 0203 	bic.w	r2, r2, #3
    4884:	005b      	lsls	r3, r3, #1
    4886:	3204      	adds	r2, #4
    4888:	420b      	tst	r3, r1
    488a:	d0fb      	beq.n	4884 <_malloc_r+0x1c8>
    488c:	4d37      	ldr	r5, [pc, #220]	; (496c <_malloc_r+0x2b0>)
    488e:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
    4892:	4677      	mov	r7, lr
    4894:	4610      	mov	r0, r2
    4896:	68fd      	ldr	r5, [r7, #12]
    4898:	42bd      	cmp	r5, r7
    489a:	d02d      	beq.n	48f8 <_malloc_r+0x23c>
    489c:	6869      	ldr	r1, [r5, #4]
    489e:	f021 0c03 	bic.w	ip, r1, #3
    48a2:	ebc4 010c 	rsb	r1, r4, ip
    48a6:	290f      	cmp	r1, #15
    48a8:	dd13      	ble.n	48d2 <_malloc_r+0x216>
    48aa:	192b      	adds	r3, r5, r4
    48ac:	f044 0401 	orr.w	r4, r4, #1
    48b0:	68ea      	ldr	r2, [r5, #12]
    48b2:	606c      	str	r4, [r5, #4]
    48b4:	f855 0f08 	ldr.w	r0, [r5, #8]!
    48b8:	5059      	str	r1, [r3, r1]
    48ba:	60c2      	str	r2, [r0, #12]
    48bc:	6090      	str	r0, [r2, #8]
    48be:	4a2b      	ldr	r2, [pc, #172]	; (496c <_malloc_r+0x2b0>)
    48c0:	f041 0001 	orr.w	r0, r1, #1
    48c4:	6153      	str	r3, [r2, #20]
    48c6:	6113      	str	r3, [r2, #16]
    48c8:	3208      	adds	r2, #8
    48ca:	60da      	str	r2, [r3, #12]
    48cc:	609a      	str	r2, [r3, #8]
    48ce:	6058      	str	r0, [r3, #4]
    48d0:	e00c      	b.n	48ec <_malloc_r+0x230>
    48d2:	2900      	cmp	r1, #0
    48d4:	db0e      	blt.n	48f4 <_malloc_r+0x238>
    48d6:	eb05 000c 	add.w	r0, r5, ip
    48da:	68e9      	ldr	r1, [r5, #12]
    48dc:	6842      	ldr	r2, [r0, #4]
    48de:	f042 0301 	orr.w	r3, r2, #1
    48e2:	6043      	str	r3, [r0, #4]
    48e4:	f855 0f08 	ldr.w	r0, [r5, #8]!
    48e8:	60c1      	str	r1, [r0, #12]
    48ea:	6088      	str	r0, [r1, #8]
    48ec:	4630      	mov	r0, r6
    48ee:	f000 f979 	bl	4be4 <__malloc_unlock>
    48f2:	e0de      	b.n	4ab2 <_malloc_r+0x3f6>
    48f4:	68ed      	ldr	r5, [r5, #12]
    48f6:	e7cf      	b.n	4898 <_malloc_r+0x1dc>
    48f8:	3001      	adds	r0, #1
    48fa:	0781      	lsls	r1, r0, #30
    48fc:	f105 0708 	add.w	r7, r5, #8
    4900:	d1c9      	bne.n	4896 <_malloc_r+0x1da>
    4902:	4671      	mov	r1, lr
    4904:	0795      	lsls	r5, r2, #30
    4906:	d105      	bne.n	4914 <_malloc_r+0x258>
    4908:	4a18      	ldr	r2, [pc, #96]	; (496c <_malloc_r+0x2b0>)
    490a:	6855      	ldr	r5, [r2, #4]
    490c:	ea25 0503 	bic.w	r5, r5, r3
    4910:	6055      	str	r5, [r2, #4]
    4912:	e005      	b.n	4920 <_malloc_r+0x264>
    4914:	f1a1 0708 	sub.w	r7, r1, #8
    4918:	6809      	ldr	r1, [r1, #0]
    491a:	3a01      	subs	r2, #1
    491c:	42b9      	cmp	r1, r7
    491e:	d0f1      	beq.n	4904 <_malloc_r+0x248>
    4920:	4f12      	ldr	r7, [pc, #72]	; (496c <_malloc_r+0x2b0>)
    4922:	687f      	ldr	r7, [r7, #4]
    4924:	005b      	lsls	r3, r3, #1
    4926:	42bb      	cmp	r3, r7
    4928:	d806      	bhi.n	4938 <_malloc_r+0x27c>
    492a:	b12b      	cbz	r3, 4938 <_malloc_r+0x27c>
    492c:	4602      	mov	r2, r0
    492e:	423b      	tst	r3, r7
    4930:	d1ac      	bne.n	488c <_malloc_r+0x1d0>
    4932:	3204      	adds	r2, #4
    4934:	005b      	lsls	r3, r3, #1
    4936:	e7fa      	b.n	492e <_malloc_r+0x272>
    4938:	4b0c      	ldr	r3, [pc, #48]	; (496c <_malloc_r+0x2b0>)
    493a:	689f      	ldr	r7, [r3, #8]
    493c:	6878      	ldr	r0, [r7, #4]
    493e:	f020 0903 	bic.w	r9, r0, #3
    4942:	45a1      	cmp	r9, r4
    4944:	4619      	mov	r1, r3
    4946:	d304      	bcc.n	4952 <_malloc_r+0x296>
    4948:	ebc4 0009 	rsb	r0, r4, r9
    494c:	280f      	cmp	r0, #15
    494e:	f300 80a2 	bgt.w	4a96 <_malloc_r+0x3da>
    4952:	4a07      	ldr	r2, [pc, #28]	; (4970 <_malloc_r+0x2b4>)
    4954:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
    4958:	6815      	ldr	r5, [r2, #0]
    495a:	3301      	adds	r3, #1
    495c:	eb07 0a09 	add.w	sl, r7, r9
    4960:	eb04 0805 	add.w	r8, r4, r5
    4964:	d106      	bne.n	4974 <_malloc_r+0x2b8>
    4966:	f108 0810 	add.w	r8, r8, #16
    496a:	e00b      	b.n	4984 <_malloc_r+0x2c8>
    496c:	20000500 	.word	0x20000500
    4970:	20000944 	.word	0x20000944
    4974:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
    4978:	f100 010f 	add.w	r1, r0, #15
    497c:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
    4980:	f022 080f 	bic.w	r8, r2, #15
    4984:	4630      	mov	r0, r6
    4986:	4641      	mov	r1, r8
    4988:	f000 fb1e 	bl	4fc8 <_sbrk_r>
    498c:	1c42      	adds	r2, r0, #1
    498e:	4605      	mov	r5, r0
    4990:	d071      	beq.n	4a76 <_malloc_r+0x3ba>
    4992:	4550      	cmp	r0, sl
    4994:	d202      	bcs.n	499c <_malloc_r+0x2e0>
    4996:	4b48      	ldr	r3, [pc, #288]	; (4ab8 <_malloc_r+0x3fc>)
    4998:	429f      	cmp	r7, r3
    499a:	d16c      	bne.n	4a76 <_malloc_r+0x3ba>
    499c:	4847      	ldr	r0, [pc, #284]	; (4abc <_malloc_r+0x400>)
    499e:	4a46      	ldr	r2, [pc, #280]	; (4ab8 <_malloc_r+0x3fc>)
    49a0:	6841      	ldr	r1, [r0, #4]
    49a2:	4555      	cmp	r5, sl
    49a4:	eb08 0301 	add.w	r3, r8, r1
    49a8:	6043      	str	r3, [r0, #4]
    49aa:	d107      	bne.n	49bc <_malloc_r+0x300>
    49ac:	0529      	lsls	r1, r5, #20
    49ae:	d105      	bne.n	49bc <_malloc_r+0x300>
    49b0:	6895      	ldr	r5, [r2, #8]
    49b2:	44c8      	add	r8, r9
    49b4:	f048 0001 	orr.w	r0, r8, #1
    49b8:	6068      	str	r0, [r5, #4]
    49ba:	e051      	b.n	4a60 <_malloc_r+0x3a4>
    49bc:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
    49c0:	1c42      	adds	r2, r0, #1
    49c2:	d103      	bne.n	49cc <_malloc_r+0x310>
    49c4:	4a3c      	ldr	r2, [pc, #240]	; (4ab8 <_malloc_r+0x3fc>)
    49c6:	f8c2 5408 	str.w	r5, [r2, #1032]	; 0x408
    49ca:	e005      	b.n	49d8 <_malloc_r+0x31c>
    49cc:	ebca 0a05 	rsb	sl, sl, r5
    49d0:	eb03 010a 	add.w	r1, r3, sl
    49d4:	4b39      	ldr	r3, [pc, #228]	; (4abc <_malloc_r+0x400>)
    49d6:	6059      	str	r1, [r3, #4]
    49d8:	f015 0007 	ands.w	r0, r5, #7
    49dc:	bf1c      	itt	ne
    49de:	f1c0 0008 	rsbne	r0, r0, #8
    49e2:	182d      	addne	r5, r5, r0
    49e4:	eb05 0c08 	add.w	ip, r5, r8
    49e8:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
    49ec:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
    49f0:	eba1 581e 	sub.w	r8, r1, lr, lsr #20
    49f4:	4641      	mov	r1, r8
    49f6:	4630      	mov	r0, r6
    49f8:	f000 fae6 	bl	4fc8 <_sbrk_r>
    49fc:	4a2f      	ldr	r2, [pc, #188]	; (4abc <_malloc_r+0x400>)
    49fe:	1c43      	adds	r3, r0, #1
    4a00:	6853      	ldr	r3, [r2, #4]
    4a02:	bf08      	it	eq
    4a04:	f04f 0800 	moveq.w	r8, #0
    4a08:	eb08 0103 	add.w	r1, r8, r3
    4a0c:	bf08      	it	eq
    4a0e:	4628      	moveq	r0, r5
    4a10:	6051      	str	r1, [r2, #4]
    4a12:	1b40      	subs	r0, r0, r5
    4a14:	4a28      	ldr	r2, [pc, #160]	; (4ab8 <_malloc_r+0x3fc>)
    4a16:	eb00 0308 	add.w	r3, r0, r8
    4a1a:	f043 0101 	orr.w	r1, r3, #1
    4a1e:	4297      	cmp	r7, r2
    4a20:	6095      	str	r5, [r2, #8]
    4a22:	6069      	str	r1, [r5, #4]
    4a24:	d01c      	beq.n	4a60 <_malloc_r+0x3a4>
    4a26:	f1b9 0f0f 	cmp.w	r9, #15
    4a2a:	d802      	bhi.n	4a32 <_malloc_r+0x376>
    4a2c:	2201      	movs	r2, #1
    4a2e:	606a      	str	r2, [r5, #4]
    4a30:	e021      	b.n	4a76 <_malloc_r+0x3ba>
    4a32:	687d      	ldr	r5, [r7, #4]
    4a34:	f1a9 090c 	sub.w	r9, r9, #12
    4a38:	f029 0907 	bic.w	r9, r9, #7
    4a3c:	eb07 0309 	add.w	r3, r7, r9
    4a40:	f005 0201 	and.w	r2, r5, #1
    4a44:	2105      	movs	r1, #5
    4a46:	ea49 0002 	orr.w	r0, r9, r2
    4a4a:	f1b9 0f0f 	cmp.w	r9, #15
    4a4e:	6078      	str	r0, [r7, #4]
    4a50:	6059      	str	r1, [r3, #4]
    4a52:	6099      	str	r1, [r3, #8]
    4a54:	d904      	bls.n	4a60 <_malloc_r+0x3a4>
    4a56:	4630      	mov	r0, r6
    4a58:	f107 0108 	add.w	r1, r7, #8
    4a5c:	f7ff fb0c 	bl	4078 <_free_r>
    4a60:	4a16      	ldr	r2, [pc, #88]	; (4abc <_malloc_r+0x400>)
    4a62:	6853      	ldr	r3, [r2, #4]
    4a64:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    4a66:	6b15      	ldr	r5, [r2, #48]	; 0x30
    4a68:	428b      	cmp	r3, r1
    4a6a:	bf88      	it	hi
    4a6c:	62d3      	strhi	r3, [r2, #44]	; 0x2c
    4a6e:	42ab      	cmp	r3, r5
    4a70:	bf84      	itt	hi
    4a72:	4d12      	ldrhi	r5, [pc, #72]	; (4abc <_malloc_r+0x400>)
    4a74:	632b      	strhi	r3, [r5, #48]	; 0x30
    4a76:	4810      	ldr	r0, [pc, #64]	; (4ab8 <_malloc_r+0x3fc>)
    4a78:	6882      	ldr	r2, [r0, #8]
    4a7a:	6853      	ldr	r3, [r2, #4]
    4a7c:	f023 0103 	bic.w	r1, r3, #3
    4a80:	42a1      	cmp	r1, r4
    4a82:	ebc4 0001 	rsb	r0, r4, r1
    4a86:	d301      	bcc.n	4a8c <_malloc_r+0x3d0>
    4a88:	280f      	cmp	r0, #15
    4a8a:	dc04      	bgt.n	4a96 <_malloc_r+0x3da>
    4a8c:	4630      	mov	r0, r6
    4a8e:	f000 f8a9 	bl	4be4 <__malloc_unlock>
    4a92:	2500      	movs	r5, #0
    4a94:	e00d      	b.n	4ab2 <_malloc_r+0x3f6>
    4a96:	4a08      	ldr	r2, [pc, #32]	; (4ab8 <_malloc_r+0x3fc>)
    4a98:	6895      	ldr	r5, [r2, #8]
    4a9a:	f044 0301 	orr.w	r3, r4, #1
    4a9e:	192c      	adds	r4, r5, r4
    4aa0:	f040 0101 	orr.w	r1, r0, #1
    4aa4:	606b      	str	r3, [r5, #4]
    4aa6:	6094      	str	r4, [r2, #8]
    4aa8:	6061      	str	r1, [r4, #4]
    4aaa:	4630      	mov	r0, r6
    4aac:	f000 f89a 	bl	4be4 <__malloc_unlock>
    4ab0:	3508      	adds	r5, #8
    4ab2:	4628      	mov	r0, r5
    4ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4ab8:	20000500 	.word	0x20000500
    4abc:	20000944 	.word	0x20000944

00004ac0 <_mbrtowc_r>:
    4ac0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4ac4:	4616      	mov	r6, r2
    4ac6:	4a10      	ldr	r2, [pc, #64]	; (4b08 <_mbrtowc_r+0x48>)
    4ac8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    4aca:	6817      	ldr	r7, [r2, #0]
    4acc:	4604      	mov	r4, r0
    4ace:	4689      	mov	r9, r1
    4ad0:	4698      	mov	r8, r3
    4ad2:	b946      	cbnz	r6, 4ae6 <_mbrtowc_r+0x26>
    4ad4:	f7ff fd54 	bl	4580 <__locale_charset>
    4ad8:	4631      	mov	r1, r6
    4ada:	e88d 0021 	stmia.w	sp, {r0, r5}
    4ade:	4a0b      	ldr	r2, [pc, #44]	; (4b0c <_mbrtowc_r+0x4c>)
    4ae0:	4620      	mov	r0, r4
    4ae2:	2301      	movs	r3, #1
    4ae4:	e007      	b.n	4af6 <_mbrtowc_r+0x36>
    4ae6:	f7ff fd4b 	bl	4580 <__locale_charset>
    4aea:	4649      	mov	r1, r9
    4aec:	e88d 0021 	stmia.w	sp, {r0, r5}
    4af0:	4632      	mov	r2, r6
    4af2:	4620      	mov	r0, r4
    4af4:	4643      	mov	r3, r8
    4af6:	47b8      	blx	r7
    4af8:	1c43      	adds	r3, r0, #1
    4afa:	d103      	bne.n	4b04 <_mbrtowc_r+0x44>
    4afc:	2300      	movs	r3, #0
    4afe:	218a      	movs	r1, #138	; 0x8a
    4b00:	602b      	str	r3, [r5, #0]
    4b02:	6021      	str	r1, [r4, #0]
    4b04:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    4b08:	20000910 	.word	0x20000910
    4b0c:	0000621f 	.word	0x0000621f

00004b10 <mbrtowc>:
    4b10:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4b12:	9300      	str	r3, [sp, #0]
    4b14:	4b05      	ldr	r3, [pc, #20]	; (4b2c <mbrtowc+0x1c>)
    4b16:	4606      	mov	r6, r0
    4b18:	460d      	mov	r5, r1
    4b1a:	4614      	mov	r4, r2
    4b1c:	6818      	ldr	r0, [r3, #0]
    4b1e:	4631      	mov	r1, r6
    4b20:	462a      	mov	r2, r5
    4b22:	4623      	mov	r3, r4
    4b24:	f7ff ffcc 	bl	4ac0 <_mbrtowc_r>
    4b28:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    4b2a:	bf00      	nop
    4b2c:	20000050 	.word	0x20000050

00004b30 <__ascii_mbtowc>:
    4b30:	b082      	sub	sp, #8
    4b32:	b901      	cbnz	r1, 4b36 <__ascii_mbtowc+0x6>
    4b34:	a901      	add	r1, sp, #4
    4b36:	b13a      	cbz	r2, 4b48 <__ascii_mbtowc+0x18>
    4b38:	b143      	cbz	r3, 4b4c <__ascii_mbtowc+0x1c>
    4b3a:	7813      	ldrb	r3, [r2, #0]
    4b3c:	600b      	str	r3, [r1, #0]
    4b3e:	7810      	ldrb	r0, [r2, #0]
    4b40:	3000      	adds	r0, #0
    4b42:	bf18      	it	ne
    4b44:	2001      	movne	r0, #1
    4b46:	e003      	b.n	4b50 <__ascii_mbtowc+0x20>
    4b48:	4610      	mov	r0, r2
    4b4a:	e001      	b.n	4b50 <__ascii_mbtowc+0x20>
    4b4c:	f06f 0001 	mvn.w	r0, #1
    4b50:	b002      	add	sp, #8
    4b52:	4770      	bx	lr

00004b54 <_mbtowc_r>:
    4b54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4b58:	461f      	mov	r7, r3
    4b5a:	4b08      	ldr	r3, [pc, #32]	; (4b7c <_mbtowc_r+0x28>)
    4b5c:	4606      	mov	r6, r0
    4b5e:	4689      	mov	r9, r1
    4b60:	4690      	mov	r8, r2
    4b62:	681c      	ldr	r4, [r3, #0]
    4b64:	f7ff fd0c 	bl	4580 <__locale_charset>
    4b68:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    4b6a:	9000      	str	r0, [sp, #0]
    4b6c:	9501      	str	r5, [sp, #4]
    4b6e:	4630      	mov	r0, r6
    4b70:	4649      	mov	r1, r9
    4b72:	4642      	mov	r2, r8
    4b74:	463b      	mov	r3, r7
    4b76:	47a0      	blx	r4
    4b78:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    4b7c:	20000910 	.word	0x20000910

00004b80 <memchr>:
    4b80:	b510      	push	{r4, lr}
    4b82:	b2c9      	uxtb	r1, r1
    4b84:	4603      	mov	r3, r0
    4b86:	1882      	adds	r2, r0, r2
    4b88:	4293      	cmp	r3, r2
    4b8a:	4618      	mov	r0, r3
    4b8c:	d004      	beq.n	4b98 <memchr+0x18>
    4b8e:	7804      	ldrb	r4, [r0, #0]
    4b90:	3301      	adds	r3, #1
    4b92:	428c      	cmp	r4, r1
    4b94:	d1f8      	bne.n	4b88 <memchr+0x8>
    4b96:	e000      	b.n	4b9a <memchr+0x1a>
    4b98:	2000      	movs	r0, #0
    4b9a:	bd10      	pop	{r4, pc}

00004b9c <memcpy>:
    4b9c:	b510      	push	{r4, lr}
    4b9e:	2300      	movs	r3, #0
    4ba0:	4293      	cmp	r3, r2
    4ba2:	d003      	beq.n	4bac <memcpy+0x10>
    4ba4:	5ccc      	ldrb	r4, [r1, r3]
    4ba6:	54c4      	strb	r4, [r0, r3]
    4ba8:	3301      	adds	r3, #1
    4baa:	e7f9      	b.n	4ba0 <memcpy+0x4>
    4bac:	bd10      	pop	{r4, pc}

00004bae <memmove>:
    4bae:	4281      	cmp	r1, r0
    4bb0:	b570      	push	{r4, r5, r6, lr}
    4bb2:	d20e      	bcs.n	4bd2 <memmove+0x24>
    4bb4:	188c      	adds	r4, r1, r2
    4bb6:	42a0      	cmp	r0, r4
    4bb8:	d20b      	bcs.n	4bd2 <memmove+0x24>
    4bba:	1885      	adds	r5, r0, r2
    4bbc:	4613      	mov	r3, r2
    4bbe:	f113 33ff 	adds.w	r3, r3, #4294967295
    4bc2:	d305      	bcc.n	4bd0 <memmove+0x22>
    4bc4:	4251      	negs	r1, r2
    4bc6:	1866      	adds	r6, r4, r1
    4bc8:	1869      	adds	r1, r5, r1
    4bca:	5cf6      	ldrb	r6, [r6, r3]
    4bcc:	54ce      	strb	r6, [r1, r3]
    4bce:	e7f6      	b.n	4bbe <memmove+0x10>
    4bd0:	bd70      	pop	{r4, r5, r6, pc}
    4bd2:	2300      	movs	r3, #0
    4bd4:	4293      	cmp	r3, r2
    4bd6:	d003      	beq.n	4be0 <memmove+0x32>
    4bd8:	5ccc      	ldrb	r4, [r1, r3]
    4bda:	54c4      	strb	r4, [r0, r3]
    4bdc:	3301      	adds	r3, #1
    4bde:	e7f9      	b.n	4bd4 <memmove+0x26>
    4be0:	bd70      	pop	{r4, r5, r6, pc}

00004be2 <__malloc_lock>:
    4be2:	4770      	bx	lr

00004be4 <__malloc_unlock>:
    4be4:	4770      	bx	lr
	...

00004be8 <_realloc_r>:
    4be8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4bec:	4681      	mov	r9, r0
    4bee:	4616      	mov	r6, r2
    4bf0:	460c      	mov	r4, r1
    4bf2:	b921      	cbnz	r1, 4bfe <_realloc_r+0x16>
    4bf4:	4611      	mov	r1, r2
    4bf6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4bfa:	f7ff bd5f 	b.w	46bc <_malloc_r>
    4bfe:	f7ff fff0 	bl	4be2 <__malloc_lock>
    4c02:	f106 070b 	add.w	r7, r6, #11
    4c06:	f854 5c04 	ldr.w	r5, [r4, #-4]
    4c0a:	2f16      	cmp	r7, #22
    4c0c:	f1a4 0b08 	sub.w	fp, r4, #8
    4c10:	f025 0803 	bic.w	r8, r5, #3
    4c14:	d903      	bls.n	4c1e <_realloc_r+0x36>
    4c16:	f037 0707 	bics.w	r7, r7, #7
    4c1a:	d501      	bpl.n	4c20 <_realloc_r+0x38>
    4c1c:	e002      	b.n	4c24 <_realloc_r+0x3c>
    4c1e:	2710      	movs	r7, #16
    4c20:	42b7      	cmp	r7, r6
    4c22:	d204      	bcs.n	4c2e <_realloc_r+0x46>
    4c24:	200c      	movs	r0, #12
    4c26:	f8c9 0000 	str.w	r0, [r9]
    4c2a:	2600      	movs	r6, #0
    4c2c:	e145      	b.n	4eba <_realloc_r+0x2d2>
    4c2e:	45b8      	cmp	r8, r7
    4c30:	f280 811a 	bge.w	4e68 <_realloc_r+0x280>
    4c34:	4aa2      	ldr	r2, [pc, #648]	; (4ec0 <_realloc_r+0x2d8>)
    4c36:	6891      	ldr	r1, [r2, #8]
    4c38:	eb0b 0308 	add.w	r3, fp, r8
    4c3c:	428b      	cmp	r3, r1
    4c3e:	d006      	beq.n	4c4e <_realloc_r+0x66>
    4c40:	6858      	ldr	r0, [r3, #4]
    4c42:	f020 0201 	bic.w	r2, r0, #1
    4c46:	1898      	adds	r0, r3, r2
    4c48:	6842      	ldr	r2, [r0, #4]
    4c4a:	07d0      	lsls	r0, r2, #31
    4c4c:	d426      	bmi.n	4c9c <_realloc_r+0xb4>
    4c4e:	685a      	ldr	r2, [r3, #4]
    4c50:	428b      	cmp	r3, r1
    4c52:	f022 0003 	bic.w	r0, r2, #3
    4c56:	eb00 0a08 	add.w	sl, r0, r8
    4c5a:	d118      	bne.n	4c8e <_realloc_r+0xa6>
    4c5c:	f107 0210 	add.w	r2, r7, #16
    4c60:	4592      	cmp	sl, r2
    4c62:	db1d      	blt.n	4ca0 <_realloc_r+0xb8>
    4c64:	eb0b 0507 	add.w	r5, fp, r7
    4c68:	ebc7 0a0a 	rsb	sl, r7, sl
    4c6c:	f04a 0101 	orr.w	r1, sl, #1
    4c70:	6069      	str	r1, [r5, #4]
    4c72:	f854 2c04 	ldr.w	r2, [r4, #-4]
    4c76:	4e92      	ldr	r6, [pc, #584]	; (4ec0 <_realloc_r+0x2d8>)
    4c78:	f002 0301 	and.w	r3, r2, #1
    4c7c:	431f      	orrs	r7, r3
    4c7e:	60b5      	str	r5, [r6, #8]
    4c80:	f844 7c04 	str.w	r7, [r4, #-4]
    4c84:	4648      	mov	r0, r9
    4c86:	f7ff ffad 	bl	4be4 <__malloc_unlock>
    4c8a:	4626      	mov	r6, r4
    4c8c:	e115      	b.n	4eba <_realloc_r+0x2d2>
    4c8e:	45ba      	cmp	sl, r7
    4c90:	db06      	blt.n	4ca0 <_realloc_r+0xb8>
    4c92:	68dd      	ldr	r5, [r3, #12]
    4c94:	689e      	ldr	r6, [r3, #8]
    4c96:	60f5      	str	r5, [r6, #12]
    4c98:	60ae      	str	r6, [r5, #8]
    4c9a:	e0e6      	b.n	4e6a <_realloc_r+0x282>
    4c9c:	2000      	movs	r0, #0
    4c9e:	4603      	mov	r3, r0
    4ca0:	07ea      	lsls	r2, r5, #31
    4ca2:	f100 8091 	bmi.w	4dc8 <_realloc_r+0x1e0>
    4ca6:	f854 5c08 	ldr.w	r5, [r4, #-8]
    4caa:	ebc5 050b 	rsb	r5, r5, fp
    4cae:	686a      	ldr	r2, [r5, #4]
    4cb0:	f022 0203 	bic.w	r2, r2, #3
    4cb4:	2b00      	cmp	r3, #0
    4cb6:	d051      	beq.n	4d5c <_realloc_r+0x174>
    4cb8:	eb02 0a08 	add.w	sl, r2, r8
    4cbc:	428b      	cmp	r3, r1
    4cbe:	4482      	add	sl, r0
    4cc0:	d145      	bne.n	4d4e <_realloc_r+0x166>
    4cc2:	f107 0310 	add.w	r3, r7, #16
    4cc6:	459a      	cmp	sl, r3
    4cc8:	db48      	blt.n	4d5c <_realloc_r+0x174>
    4cca:	462e      	mov	r6, r5
    4ccc:	68e9      	ldr	r1, [r5, #12]
    4cce:	f856 3f08 	ldr.w	r3, [r6, #8]!
    4cd2:	f1a8 0204 	sub.w	r2, r8, #4
    4cd6:	2a24      	cmp	r2, #36	; 0x24
    4cd8:	60d9      	str	r1, [r3, #12]
    4cda:	608b      	str	r3, [r1, #8]
    4cdc:	d825      	bhi.n	4d2a <_realloc_r+0x142>
    4cde:	2a13      	cmp	r2, #19
    4ce0:	d91b      	bls.n	4d1a <_realloc_r+0x132>
    4ce2:	6821      	ldr	r1, [r4, #0]
    4ce4:	60a9      	str	r1, [r5, #8]
    4ce6:	6863      	ldr	r3, [r4, #4]
    4ce8:	2a1b      	cmp	r2, #27
    4cea:	60eb      	str	r3, [r5, #12]
    4cec:	d803      	bhi.n	4cf6 <_realloc_r+0x10e>
    4cee:	f105 0010 	add.w	r0, r5, #16
    4cf2:	3408      	adds	r4, #8
    4cf4:	e012      	b.n	4d1c <_realloc_r+0x134>
    4cf6:	68a0      	ldr	r0, [r4, #8]
    4cf8:	6128      	str	r0, [r5, #16]
    4cfa:	68e1      	ldr	r1, [r4, #12]
    4cfc:	2a24      	cmp	r2, #36	; 0x24
    4cfe:	6169      	str	r1, [r5, #20]
    4d00:	d003      	beq.n	4d0a <_realloc_r+0x122>
    4d02:	f105 0018 	add.w	r0, r5, #24
    4d06:	3410      	adds	r4, #16
    4d08:	e008      	b.n	4d1c <_realloc_r+0x134>
    4d0a:	6922      	ldr	r2, [r4, #16]
    4d0c:	61aa      	str	r2, [r5, #24]
    4d0e:	6963      	ldr	r3, [r4, #20]
    4d10:	f105 0020 	add.w	r0, r5, #32
    4d14:	61eb      	str	r3, [r5, #28]
    4d16:	3418      	adds	r4, #24
    4d18:	e000      	b.n	4d1c <_realloc_r+0x134>
    4d1a:	4630      	mov	r0, r6
    4d1c:	6821      	ldr	r1, [r4, #0]
    4d1e:	6001      	str	r1, [r0, #0]
    4d20:	6862      	ldr	r2, [r4, #4]
    4d22:	6042      	str	r2, [r0, #4]
    4d24:	68a3      	ldr	r3, [r4, #8]
    4d26:	6083      	str	r3, [r0, #8]
    4d28:	e003      	b.n	4d32 <_realloc_r+0x14a>
    4d2a:	4630      	mov	r0, r6
    4d2c:	4621      	mov	r1, r4
    4d2e:	f7ff ff3e 	bl	4bae <memmove>
    4d32:	19e8      	adds	r0, r5, r7
    4d34:	ebc7 0a0a 	rsb	sl, r7, sl
    4d38:	f04a 0201 	orr.w	r2, sl, #1
    4d3c:	6042      	str	r2, [r0, #4]
    4d3e:	686b      	ldr	r3, [r5, #4]
    4d40:	495f      	ldr	r1, [pc, #380]	; (4ec0 <_realloc_r+0x2d8>)
    4d42:	6088      	str	r0, [r1, #8]
    4d44:	f003 0001 	and.w	r0, r3, #1
    4d48:	4307      	orrs	r7, r0
    4d4a:	606f      	str	r7, [r5, #4]
    4d4c:	e088      	b.n	4e60 <_realloc_r+0x278>
    4d4e:	45ba      	cmp	sl, r7
    4d50:	db04      	blt.n	4d5c <_realloc_r+0x174>
    4d52:	68d9      	ldr	r1, [r3, #12]
    4d54:	6898      	ldr	r0, [r3, #8]
    4d56:	60c1      	str	r1, [r0, #12]
    4d58:	6088      	str	r0, [r1, #8]
    4d5a:	e003      	b.n	4d64 <_realloc_r+0x17c>
    4d5c:	eb02 0a08 	add.w	sl, r2, r8
    4d60:	45ba      	cmp	sl, r7
    4d62:	db31      	blt.n	4dc8 <_realloc_r+0x1e0>
    4d64:	4628      	mov	r0, r5
    4d66:	68eb      	ldr	r3, [r5, #12]
    4d68:	f850 1f08 	ldr.w	r1, [r0, #8]!
    4d6c:	f1a8 0204 	sub.w	r2, r8, #4
    4d70:	2a24      	cmp	r2, #36	; 0x24
    4d72:	60cb      	str	r3, [r1, #12]
    4d74:	6099      	str	r1, [r3, #8]
    4d76:	d823      	bhi.n	4dc0 <_realloc_r+0x1d8>
    4d78:	2a13      	cmp	r2, #19
    4d7a:	d91a      	bls.n	4db2 <_realloc_r+0x1ca>
    4d7c:	6820      	ldr	r0, [r4, #0]
    4d7e:	60a8      	str	r0, [r5, #8]
    4d80:	6866      	ldr	r6, [r4, #4]
    4d82:	2a1b      	cmp	r2, #27
    4d84:	60ee      	str	r6, [r5, #12]
    4d86:	d803      	bhi.n	4d90 <_realloc_r+0x1a8>
    4d88:	f105 0010 	add.w	r0, r5, #16
    4d8c:	3408      	adds	r4, #8
    4d8e:	e010      	b.n	4db2 <_realloc_r+0x1ca>
    4d90:	68a3      	ldr	r3, [r4, #8]
    4d92:	612b      	str	r3, [r5, #16]
    4d94:	68e1      	ldr	r1, [r4, #12]
    4d96:	2a24      	cmp	r2, #36	; 0x24
    4d98:	6169      	str	r1, [r5, #20]
    4d9a:	d003      	beq.n	4da4 <_realloc_r+0x1bc>
    4d9c:	f105 0018 	add.w	r0, r5, #24
    4da0:	3410      	adds	r4, #16
    4da2:	e006      	b.n	4db2 <_realloc_r+0x1ca>
    4da4:	6922      	ldr	r2, [r4, #16]
    4da6:	61aa      	str	r2, [r5, #24]
    4da8:	6960      	ldr	r0, [r4, #20]
    4daa:	3418      	adds	r4, #24
    4dac:	61e8      	str	r0, [r5, #28]
    4dae:	f105 0020 	add.w	r0, r5, #32
    4db2:	6826      	ldr	r6, [r4, #0]
    4db4:	6006      	str	r6, [r0, #0]
    4db6:	6863      	ldr	r3, [r4, #4]
    4db8:	6043      	str	r3, [r0, #4]
    4dba:	68a1      	ldr	r1, [r4, #8]
    4dbc:	6081      	str	r1, [r0, #8]
    4dbe:	e055      	b.n	4e6c <_realloc_r+0x284>
    4dc0:	4621      	mov	r1, r4
    4dc2:	f7ff fef4 	bl	4bae <memmove>
    4dc6:	e051      	b.n	4e6c <_realloc_r+0x284>
    4dc8:	4631      	mov	r1, r6
    4dca:	4648      	mov	r0, r9
    4dcc:	f7ff fc76 	bl	46bc <_malloc_r>
    4dd0:	4606      	mov	r6, r0
    4dd2:	2800      	cmp	r0, #0
    4dd4:	d044      	beq.n	4e60 <_realloc_r+0x278>
    4dd6:	f854 1c04 	ldr.w	r1, [r4, #-4]
    4dda:	f021 0301 	bic.w	r3, r1, #1
    4dde:	f1a0 0208 	sub.w	r2, r0, #8
    4de2:	eb0b 0103 	add.w	r1, fp, r3
    4de6:	428a      	cmp	r2, r1
    4de8:	d106      	bne.n	4df8 <_realloc_r+0x210>
    4dea:	f850 6c04 	ldr.w	r6, [r0, #-4]
    4dee:	f026 0503 	bic.w	r5, r6, #3
    4df2:	eb05 0a08 	add.w	sl, r5, r8
    4df6:	e038      	b.n	4e6a <_realloc_r+0x282>
    4df8:	f1a8 0204 	sub.w	r2, r8, #4
    4dfc:	2a24      	cmp	r2, #36	; 0x24
    4dfe:	d828      	bhi.n	4e52 <_realloc_r+0x26a>
    4e00:	2a13      	cmp	r2, #19
    4e02:	d91e      	bls.n	4e42 <_realloc_r+0x25a>
    4e04:	6823      	ldr	r3, [r4, #0]
    4e06:	6003      	str	r3, [r0, #0]
    4e08:	6861      	ldr	r1, [r4, #4]
    4e0a:	2a1b      	cmp	r2, #27
    4e0c:	6041      	str	r1, [r0, #4]
    4e0e:	d804      	bhi.n	4e1a <_realloc_r+0x232>
    4e10:	f100 0008 	add.w	r0, r0, #8
    4e14:	f104 0208 	add.w	r2, r4, #8
    4e18:	e014      	b.n	4e44 <_realloc_r+0x25c>
    4e1a:	68a0      	ldr	r0, [r4, #8]
    4e1c:	60b0      	str	r0, [r6, #8]
    4e1e:	68e3      	ldr	r3, [r4, #12]
    4e20:	2a24      	cmp	r2, #36	; 0x24
    4e22:	60f3      	str	r3, [r6, #12]
    4e24:	d004      	beq.n	4e30 <_realloc_r+0x248>
    4e26:	f106 0010 	add.w	r0, r6, #16
    4e2a:	f104 0210 	add.w	r2, r4, #16
    4e2e:	e009      	b.n	4e44 <_realloc_r+0x25c>
    4e30:	6922      	ldr	r2, [r4, #16]
    4e32:	6132      	str	r2, [r6, #16]
    4e34:	6961      	ldr	r1, [r4, #20]
    4e36:	f106 0018 	add.w	r0, r6, #24
    4e3a:	6171      	str	r1, [r6, #20]
    4e3c:	f104 0218 	add.w	r2, r4, #24
    4e40:	e000      	b.n	4e44 <_realloc_r+0x25c>
    4e42:	4622      	mov	r2, r4
    4e44:	6813      	ldr	r3, [r2, #0]
    4e46:	6003      	str	r3, [r0, #0]
    4e48:	6851      	ldr	r1, [r2, #4]
    4e4a:	6041      	str	r1, [r0, #4]
    4e4c:	6892      	ldr	r2, [r2, #8]
    4e4e:	6082      	str	r2, [r0, #8]
    4e50:	e002      	b.n	4e58 <_realloc_r+0x270>
    4e52:	4621      	mov	r1, r4
    4e54:	f7ff feab 	bl	4bae <memmove>
    4e58:	4648      	mov	r0, r9
    4e5a:	4621      	mov	r1, r4
    4e5c:	f7ff f90c 	bl	4078 <_free_r>
    4e60:	4648      	mov	r0, r9
    4e62:	f7ff febf 	bl	4be4 <__malloc_unlock>
    4e66:	e028      	b.n	4eba <_realloc_r+0x2d2>
    4e68:	46c2      	mov	sl, r8
    4e6a:	465d      	mov	r5, fp
    4e6c:	ebc7 000a 	rsb	r0, r7, sl
    4e70:	280f      	cmp	r0, #15
    4e72:	686a      	ldr	r2, [r5, #4]
    4e74:	d911      	bls.n	4e9a <_realloc_r+0x2b2>
    4e76:	19e9      	adds	r1, r5, r7
    4e78:	f002 0601 	and.w	r6, r2, #1
    4e7c:	4337      	orrs	r7, r6
    4e7e:	f040 0301 	orr.w	r3, r0, #1
    4e82:	1808      	adds	r0, r1, r0
    4e84:	606f      	str	r7, [r5, #4]
    4e86:	604b      	str	r3, [r1, #4]
    4e88:	6842      	ldr	r2, [r0, #4]
    4e8a:	f042 0601 	orr.w	r6, r2, #1
    4e8e:	6046      	str	r6, [r0, #4]
    4e90:	3108      	adds	r1, #8
    4e92:	4648      	mov	r0, r9
    4e94:	f7ff f8f0 	bl	4078 <_free_r>
    4e98:	e00a      	b.n	4eb0 <_realloc_r+0x2c8>
    4e9a:	f002 0601 	and.w	r6, r2, #1
    4e9e:	eb05 010a 	add.w	r1, r5, sl
    4ea2:	ea4a 0306 	orr.w	r3, sl, r6
    4ea6:	606b      	str	r3, [r5, #4]
    4ea8:	6848      	ldr	r0, [r1, #4]
    4eaa:	f040 0201 	orr.w	r2, r0, #1
    4eae:	604a      	str	r2, [r1, #4]
    4eb0:	4648      	mov	r0, r9
    4eb2:	f7ff fe97 	bl	4be4 <__malloc_unlock>
    4eb6:	f105 0608 	add.w	r6, r5, #8
    4eba:	4630      	mov	r0, r6
    4ebc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ec0:	20000500 	.word	0x20000500

00004ec4 <lflush>:
    4ec4:	8983      	ldrh	r3, [r0, #12]
    4ec6:	f003 0109 	and.w	r1, r3, #9
    4eca:	2909      	cmp	r1, #9
    4ecc:	d101      	bne.n	4ed2 <lflush+0xe>
    4ece:	f7fe bedb 	b.w	3c88 <fflush>
    4ed2:	2000      	movs	r0, #0
    4ed4:	4770      	bx	lr

00004ed6 <__srefill_r>:
    4ed6:	b570      	push	{r4, r5, r6, lr}
    4ed8:	460c      	mov	r4, r1
    4eda:	4605      	mov	r5, r0
    4edc:	b118      	cbz	r0, 4ee6 <__srefill_r+0x10>
    4ede:	6b83      	ldr	r3, [r0, #56]	; 0x38
    4ee0:	b90b      	cbnz	r3, 4ee6 <__srefill_r+0x10>
    4ee2:	f7fe ff2d 	bl	3d40 <__sinit>
    4ee6:	89a0      	ldrh	r0, [r4, #12]
    4ee8:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
    4eec:	b211      	sxth	r1, r2
    4eee:	b931      	cbnz	r1, 4efe <__srefill_r+0x28>
    4ef0:	f440 5300 	orr.w	r3, r0, #8192	; 0x2000
    4ef4:	6e60      	ldr	r0, [r4, #100]	; 0x64
    4ef6:	81a3      	strh	r3, [r4, #12]
    4ef8:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
    4efc:	6662      	str	r2, [r4, #100]	; 0x64
    4efe:	89a3      	ldrh	r3, [r4, #12]
    4f00:	f003 0020 	and.w	r0, r3, #32
    4f04:	2100      	movs	r1, #0
    4f06:	b202      	sxth	r2, r0
    4f08:	6061      	str	r1, [r4, #4]
    4f0a:	2a00      	cmp	r2, #0
    4f0c:	d152      	bne.n	4fb4 <__srefill_r+0xde>
    4f0e:	f003 0104 	and.w	r1, r3, #4
    4f12:	b208      	sxth	r0, r1
    4f14:	b9d8      	cbnz	r0, 4f4e <__srefill_r+0x78>
    4f16:	f003 0010 	and.w	r0, r3, #16
    4f1a:	b202      	sxth	r2, r0
    4f1c:	b912      	cbnz	r2, 4f24 <__srefill_r+0x4e>
    4f1e:	2109      	movs	r1, #9
    4f20:	6029      	str	r1, [r5, #0]
    4f22:	e044      	b.n	4fae <__srefill_r+0xd8>
    4f24:	f003 0308 	and.w	r3, r3, #8
    4f28:	b219      	sxth	r1, r3
    4f2a:	b159      	cbz	r1, 4f44 <__srefill_r+0x6e>
    4f2c:	4628      	mov	r0, r5
    4f2e:	4621      	mov	r1, r4
    4f30:	f7fe fe12 	bl	3b58 <_fflush_r>
    4f34:	2800      	cmp	r0, #0
    4f36:	d13d      	bne.n	4fb4 <__srefill_r+0xde>
    4f38:	89a6      	ldrh	r6, [r4, #12]
    4f3a:	60a0      	str	r0, [r4, #8]
    4f3c:	f026 0208 	bic.w	r2, r6, #8
    4f40:	81a2      	strh	r2, [r4, #12]
    4f42:	61a0      	str	r0, [r4, #24]
    4f44:	89a0      	ldrh	r0, [r4, #12]
    4f46:	f040 0304 	orr.w	r3, r0, #4
    4f4a:	81a3      	strh	r3, [r4, #12]
    4f4c:	e010      	b.n	4f70 <__srefill_r+0x9a>
    4f4e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4f50:	b171      	cbz	r1, 4f70 <__srefill_r+0x9a>
    4f52:	f104 0340 	add.w	r3, r4, #64	; 0x40
    4f56:	4299      	cmp	r1, r3
    4f58:	d002      	beq.n	4f60 <__srefill_r+0x8a>
    4f5a:	4628      	mov	r0, r5
    4f5c:	f7ff f88c 	bl	4078 <_free_r>
    4f60:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    4f62:	2000      	movs	r0, #0
    4f64:	6320      	str	r0, [r4, #48]	; 0x30
    4f66:	6062      	str	r2, [r4, #4]
    4f68:	b112      	cbz	r2, 4f70 <__srefill_r+0x9a>
    4f6a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    4f6c:	6021      	str	r1, [r4, #0]
    4f6e:	bd70      	pop	{r4, r5, r6, pc}
    4f70:	6921      	ldr	r1, [r4, #16]
    4f72:	b919      	cbnz	r1, 4f7c <__srefill_r+0xa6>
    4f74:	4628      	mov	r0, r5
    4f76:	4621      	mov	r1, r4
    4f78:	f7ff fb24 	bl	45c4 <__smakebuf_r>
    4f7c:	89a6      	ldrh	r6, [r4, #12]
    4f7e:	07b3      	lsls	r3, r6, #30
    4f80:	d004      	beq.n	4f8c <__srefill_r+0xb6>
    4f82:	4a0f      	ldr	r2, [pc, #60]	; (4fc0 <__srefill_r+0xea>)
    4f84:	490f      	ldr	r1, [pc, #60]	; (4fc4 <__srefill_r+0xee>)
    4f86:	6810      	ldr	r0, [r2, #0]
    4f88:	f7ff fa87 	bl	449a <_fwalk>
    4f8c:	6922      	ldr	r2, [r4, #16]
    4f8e:	6a26      	ldr	r6, [r4, #32]
    4f90:	6022      	str	r2, [r4, #0]
    4f92:	4628      	mov	r0, r5
    4f94:	69e1      	ldr	r1, [r4, #28]
    4f96:	6963      	ldr	r3, [r4, #20]
    4f98:	47b0      	blx	r6
    4f9a:	2800      	cmp	r0, #0
    4f9c:	6060      	str	r0, [r4, #4]
    4f9e:	dc0c      	bgt.n	4fba <__srefill_r+0xe4>
    4fa0:	89a3      	ldrh	r3, [r4, #12]
    4fa2:	d102      	bne.n	4faa <__srefill_r+0xd4>
    4fa4:	f043 0220 	orr.w	r2, r3, #32
    4fa8:	e003      	b.n	4fb2 <__srefill_r+0xdc>
    4faa:	2000      	movs	r0, #0
    4fac:	6060      	str	r0, [r4, #4]
    4fae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    4fb2:	81a2      	strh	r2, [r4, #12]
    4fb4:	f04f 30ff 	mov.w	r0, #4294967295
    4fb8:	bd70      	pop	{r4, r5, r6, pc}
    4fba:	2000      	movs	r0, #0
    4fbc:	bd70      	pop	{r4, r5, r6, pc}
    4fbe:	bf00      	nop
    4fc0:	00006218 	.word	0x00006218
    4fc4:	00004ec5 	.word	0x00004ec5

00004fc8 <_sbrk_r>:
    4fc8:	b538      	push	{r3, r4, r5, lr}
    4fca:	4c06      	ldr	r4, [pc, #24]	; (4fe4 <_sbrk_r+0x1c>)
    4fcc:	2300      	movs	r3, #0
    4fce:	4605      	mov	r5, r0
    4fd0:	4608      	mov	r0, r1
    4fd2:	6023      	str	r3, [r4, #0]
    4fd4:	f7fc ffc4 	bl	1f60 <_sbrk>
    4fd8:	1c43      	adds	r3, r0, #1
    4fda:	d102      	bne.n	4fe2 <_sbrk_r+0x1a>
    4fdc:	6821      	ldr	r1, [r4, #0]
    4fde:	b101      	cbz	r1, 4fe2 <_sbrk_r+0x1a>
    4fe0:	6029      	str	r1, [r5, #0]
    4fe2:	bd38      	pop	{r3, r4, r5, pc}
    4fe4:	20000984 	.word	0x20000984

00004fe8 <__sccl>:
    4fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4fea:	780b      	ldrb	r3, [r1, #0]
    4fec:	2b5e      	cmp	r3, #94	; 0x5e
    4fee:	d002      	beq.n	4ff6 <__sccl+0xe>
    4ff0:	3101      	adds	r1, #1
    4ff2:	2400      	movs	r4, #0
    4ff4:	e002      	b.n	4ffc <__sccl+0x14>
    4ff6:	784b      	ldrb	r3, [r1, #1]
    4ff8:	2401      	movs	r4, #1
    4ffa:	3102      	adds	r1, #2
    4ffc:	2200      	movs	r2, #0
    4ffe:	5484      	strb	r4, [r0, r2]
    5000:	3201      	adds	r2, #1
    5002:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    5006:	d1fa      	bne.n	4ffe <__sccl+0x16>
    5008:	b90b      	cbnz	r3, 500e <__sccl+0x26>
    500a:	1e4a      	subs	r2, r1, #1
    500c:	e01a      	b.n	5044 <__sccl+0x5c>
    500e:	f1c4 0701 	rsb	r7, r4, #1
    5012:	b2fe      	uxtb	r6, r7
    5014:	54c6      	strb	r6, [r0, r3]
    5016:	460a      	mov	r2, r1
    5018:	4611      	mov	r1, r2
    501a:	f811 4b01 	ldrb.w	r4, [r1], #1
    501e:	2c2d      	cmp	r4, #45	; 0x2d
    5020:	d004      	beq.n	502c <__sccl+0x44>
    5022:	2c5d      	cmp	r4, #93	; 0x5d
    5024:	d00d      	beq.n	5042 <__sccl+0x5a>
    5026:	b16c      	cbz	r4, 5044 <__sccl+0x5c>
    5028:	4623      	mov	r3, r4
    502a:	e7f2      	b.n	5012 <__sccl+0x2a>
    502c:	7855      	ldrb	r5, [r2, #1]
    502e:	2d5d      	cmp	r5, #93	; 0x5d
    5030:	d0fa      	beq.n	5028 <__sccl+0x40>
    5032:	429d      	cmp	r5, r3
    5034:	dbf8      	blt.n	5028 <__sccl+0x40>
    5036:	3202      	adds	r2, #2
    5038:	3301      	adds	r3, #1
    503a:	42ab      	cmp	r3, r5
    503c:	54c6      	strb	r6, [r0, r3]
    503e:	dbfb      	blt.n	5038 <__sccl+0x50>
    5040:	e7ea      	b.n	5018 <__sccl+0x30>
    5042:	460a      	mov	r2, r1
    5044:	4610      	mov	r0, r2
    5046:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005048 <__sread>:
    5048:	b510      	push	{r4, lr}
    504a:	460c      	mov	r4, r1
    504c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5050:	f000 fce6 	bl	5a20 <_read_r>
    5054:	2800      	cmp	r0, #0
    5056:	db03      	blt.n	5060 <__sread+0x18>
    5058:	6d22      	ldr	r2, [r4, #80]	; 0x50
    505a:	1813      	adds	r3, r2, r0
    505c:	6523      	str	r3, [r4, #80]	; 0x50
    505e:	bd10      	pop	{r4, pc}
    5060:	89a3      	ldrh	r3, [r4, #12]
    5062:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
    5066:	81a1      	strh	r1, [r4, #12]
    5068:	bd10      	pop	{r4, pc}

0000506a <__seofread>:
    506a:	2000      	movs	r0, #0
    506c:	4770      	bx	lr

0000506e <__swrite>:
    506e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5072:	461d      	mov	r5, r3
    5074:	898b      	ldrh	r3, [r1, #12]
    5076:	460c      	mov	r4, r1
    5078:	f403 7180 	and.w	r1, r3, #256	; 0x100
    507c:	4616      	mov	r6, r2
    507e:	b20a      	sxth	r2, r1
    5080:	4607      	mov	r7, r0
    5082:	b12a      	cbz	r2, 5090 <__swrite+0x22>
    5084:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    5088:	2200      	movs	r2, #0
    508a:	2302      	movs	r3, #2
    508c:	f000 fcb6 	bl	59fc <_lseek_r>
    5090:	89a0      	ldrh	r0, [r4, #12]
    5092:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    5096:	f420 5380 	bic.w	r3, r0, #4096	; 0x1000
    509a:	81a3      	strh	r3, [r4, #12]
    509c:	4638      	mov	r0, r7
    509e:	4632      	mov	r2, r6
    50a0:	462b      	mov	r3, r5
    50a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    50a6:	f000 bc1b 	b.w	58e0 <_write_r>

000050aa <__sseek>:
    50aa:	b510      	push	{r4, lr}
    50ac:	460c      	mov	r4, r1
    50ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    50b2:	f000 fca3 	bl	59fc <_lseek_r>
    50b6:	1c43      	adds	r3, r0, #1
    50b8:	89a3      	ldrh	r3, [r4, #12]
    50ba:	d103      	bne.n	50c4 <__sseek+0x1a>
    50bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    50c0:	81a2      	strh	r2, [r4, #12]
    50c2:	bd10      	pop	{r4, pc}
    50c4:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
    50c8:	81a1      	strh	r1, [r4, #12]
    50ca:	6520      	str	r0, [r4, #80]	; 0x50
    50cc:	bd10      	pop	{r4, pc}

000050ce <__sclose>:
    50ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    50d2:	f000 bc17 	b.w	5904 <_close_r>

000050d6 <strcmp>:
    50d6:	f810 2b01 	ldrb.w	r2, [r0], #1
    50da:	f811 3b01 	ldrb.w	r3, [r1], #1
    50de:	2a01      	cmp	r2, #1
    50e0:	bf28      	it	cs
    50e2:	429a      	cmpcs	r2, r3
    50e4:	d0f7      	beq.n	50d6 <strcmp>
    50e6:	eba2 0003 	sub.w	r0, r2, r3
    50ea:	4770      	bx	lr

000050ec <_strtol_r>:
    50ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    50f0:	9001      	str	r0, [sp, #4]
    50f2:	4840      	ldr	r0, [pc, #256]	; (51f4 <_strtol_r+0x108>)
    50f4:	f8d0 9000 	ldr.w	r9, [r0]
    50f8:	4608      	mov	r0, r1
    50fa:	4604      	mov	r4, r0
    50fc:	f814 5b01 	ldrb.w	r5, [r4], #1
    5100:	eb09 0605 	add.w	r6, r9, r5
    5104:	4620      	mov	r0, r4
    5106:	7877      	ldrb	r7, [r6, #1]
    5108:	f007 0608 	and.w	r6, r7, #8
    510c:	b2f7      	uxtb	r7, r6
    510e:	2f00      	cmp	r7, #0
    5110:	d1f3      	bne.n	50fa <_strtol_r+0xe>
    5112:	2d2d      	cmp	r5, #45	; 0x2d
    5114:	d103      	bne.n	511e <_strtol_r+0x32>
    5116:	f814 5b01 	ldrb.w	r5, [r4], #1
    511a:	2701      	movs	r7, #1
    511c:	e004      	b.n	5128 <_strtol_r+0x3c>
    511e:	2d2b      	cmp	r5, #43	; 0x2b
    5120:	bf04      	itt	eq
    5122:	4624      	moveq	r4, r4
    5124:	f814 5b01 	ldrbeq.w	r5, [r4], #1
    5128:	2b00      	cmp	r3, #0
    512a:	d05c      	beq.n	51e6 <_strtol_r+0xfa>
    512c:	2b10      	cmp	r3, #16
    512e:	d107      	bne.n	5140 <_strtol_r+0x54>
    5130:	2d30      	cmp	r5, #48	; 0x30
    5132:	d105      	bne.n	5140 <_strtol_r+0x54>
    5134:	7825      	ldrb	r5, [r4, #0]
    5136:	2d78      	cmp	r5, #120	; 0x78
    5138:	d14e      	bne.n	51d8 <_strtol_r+0xec>
    513a:	7865      	ldrb	r5, [r4, #1]
    513c:	2310      	movs	r3, #16
    513e:	3402      	adds	r4, #2
    5140:	2f00      	cmp	r7, #0
    5142:	bf0c      	ite	eq
    5144:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    5148:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
    514c:	fbb0 faf3 	udiv	sl, r0, r3
    5150:	2600      	movs	r6, #0
    5152:	fb03 081a 	mls	r8, r3, sl, r0
    5156:	4630      	mov	r0, r6
    5158:	eb09 0c05 	add.w	ip, r9, r5
    515c:	f89c c001 	ldrb.w	ip, [ip, #1]
    5160:	f00c 0b04 	and.w	fp, ip, #4
    5164:	fa5f fb8b 	uxtb.w	fp, fp
    5168:	f1bb 0f00 	cmp.w	fp, #0
    516c:	d001      	beq.n	5172 <_strtol_r+0x86>
    516e:	3d30      	subs	r5, #48	; 0x30
    5170:	e00b      	b.n	518a <_strtol_r+0x9e>
    5172:	f01c 0c03 	ands.w	ip, ip, #3
    5176:	d01b      	beq.n	51b0 <_strtol_r+0xc4>
    5178:	f1bc 0f01 	cmp.w	ip, #1
    517c:	bf14      	ite	ne
    517e:	f04f 0c57 	movne.w	ip, #87	; 0x57
    5182:	f04f 0c37 	moveq.w	ip, #55	; 0x37
    5186:	ebcc 0505 	rsb	r5, ip, r5
    518a:	429d      	cmp	r5, r3
    518c:	da10      	bge.n	51b0 <_strtol_r+0xc4>
    518e:	f1b6 3fff 	cmp.w	r6, #4294967295
    5192:	d00a      	beq.n	51aa <_strtol_r+0xbe>
    5194:	4550      	cmp	r0, sl
    5196:	d806      	bhi.n	51a6 <_strtol_r+0xba>
    5198:	d101      	bne.n	519e <_strtol_r+0xb2>
    519a:	4545      	cmp	r5, r8
    519c:	dc03      	bgt.n	51a6 <_strtol_r+0xba>
    519e:	fb03 5000 	mla	r0, r3, r0, r5
    51a2:	2601      	movs	r6, #1
    51a4:	e001      	b.n	51aa <_strtol_r+0xbe>
    51a6:	f04f 36ff 	mov.w	r6, #4294967295
    51aa:	f814 5b01 	ldrb.w	r5, [r4], #1
    51ae:	e7d3      	b.n	5158 <_strtol_r+0x6c>
    51b0:	1c73      	adds	r3, r6, #1
    51b2:	d10a      	bne.n	51ca <_strtol_r+0xde>
    51b4:	2f00      	cmp	r7, #0
    51b6:	9901      	ldr	r1, [sp, #4]
    51b8:	bf0c      	ite	eq
    51ba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    51be:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
    51c2:	2322      	movs	r3, #34	; 0x22
    51c4:	600b      	str	r3, [r1, #0]
    51c6:	b922      	cbnz	r2, 51d2 <_strtol_r+0xe6>
    51c8:	e011      	b.n	51ee <_strtol_r+0x102>
    51ca:	b107      	cbz	r7, 51ce <_strtol_r+0xe2>
    51cc:	4240      	negs	r0, r0
    51ce:	b172      	cbz	r2, 51ee <_strtol_r+0x102>
    51d0:	b106      	cbz	r6, 51d4 <_strtol_r+0xe8>
    51d2:	1e61      	subs	r1, r4, #1
    51d4:	6011      	str	r1, [r2, #0]
    51d6:	e00a      	b.n	51ee <_strtol_r+0x102>
    51d8:	2d58      	cmp	r5, #88	; 0x58
    51da:	d0ae      	beq.n	513a <_strtol_r+0x4e>
    51dc:	2530      	movs	r5, #48	; 0x30
    51de:	2b00      	cmp	r3, #0
    51e0:	d1ae      	bne.n	5140 <_strtol_r+0x54>
    51e2:	2308      	movs	r3, #8
    51e4:	e7ac      	b.n	5140 <_strtol_r+0x54>
    51e6:	2d30      	cmp	r5, #48	; 0x30
    51e8:	d0a4      	beq.n	5134 <_strtol_r+0x48>
    51ea:	230a      	movs	r3, #10
    51ec:	e7a8      	b.n	5140 <_strtol_r+0x54>
    51ee:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    51f2:	bf00      	nop
    51f4:	20000480 	.word	0x20000480

000051f8 <strtol>:
    51f8:	b530      	push	{r4, r5, lr}
    51fa:	4613      	mov	r3, r2
    51fc:	4a04      	ldr	r2, [pc, #16]	; (5210 <strtol+0x18>)
    51fe:	4605      	mov	r5, r0
    5200:	460c      	mov	r4, r1
    5202:	6810      	ldr	r0, [r2, #0]
    5204:	4629      	mov	r1, r5
    5206:	4622      	mov	r2, r4
    5208:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    520c:	f7ff bf6e 	b.w	50ec <_strtol_r>
    5210:	20000050 	.word	0x20000050

00005214 <_strtoll_r>:
    5214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5218:	4698      	mov	r8, r3
    521a:	b089      	sub	sp, #36	; 0x24
    521c:	4b60      	ldr	r3, [pc, #384]	; (53a0 <_strtoll_r+0x18c>)
    521e:	9007      	str	r0, [sp, #28]
    5220:	6818      	ldr	r0, [r3, #0]
    5222:	9104      	str	r1, [sp, #16]
    5224:	4694      	mov	ip, r2
    5226:	9005      	str	r0, [sp, #20]
    5228:	460e      	mov	r6, r1
    522a:	9c05      	ldr	r4, [sp, #20]
    522c:	f816 7b01 	ldrb.w	r7, [r6], #1
    5230:	19e2      	adds	r2, r4, r7
    5232:	4631      	mov	r1, r6
    5234:	f892 a001 	ldrb.w	sl, [r2, #1]
    5238:	f00a 0508 	and.w	r5, sl, #8
    523c:	b2eb      	uxtb	r3, r5
    523e:	2b00      	cmp	r3, #0
    5240:	d1f2      	bne.n	5228 <_strtoll_r+0x14>
    5242:	2f2d      	cmp	r7, #45	; 0x2d
    5244:	d104      	bne.n	5250 <_strtoll_r+0x3c>
    5246:	f816 7b01 	ldrb.w	r7, [r6], #1
    524a:	f04f 0a01 	mov.w	sl, #1
    524e:	e006      	b.n	525e <_strtoll_r+0x4a>
    5250:	2f2b      	cmp	r7, #43	; 0x2b
    5252:	bf08      	it	eq
    5254:	4636      	moveq	r6, r6
    5256:	469a      	mov	sl, r3
    5258:	bf08      	it	eq
    525a:	f816 7b01 	ldrbeq.w	r7, [r6], #1
    525e:	f1b8 0f00 	cmp.w	r8, #0
    5262:	f000 8092 	beq.w	538a <_strtoll_r+0x176>
    5266:	f1b8 0f10 	cmp.w	r8, #16
    526a:	d108      	bne.n	527e <_strtoll_r+0x6a>
    526c:	2f30      	cmp	r7, #48	; 0x30
    526e:	d106      	bne.n	527e <_strtoll_r+0x6a>
    5270:	7837      	ldrb	r7, [r6, #0]
    5272:	2f78      	cmp	r7, #120	; 0x78
    5274:	d17e      	bne.n	5374 <_strtoll_r+0x160>
    5276:	7877      	ldrb	r7, [r6, #1]
    5278:	f04f 0810 	mov.w	r8, #16
    527c:	3602      	adds	r6, #2
    527e:	f1ba 0f00 	cmp.w	sl, #0
    5282:	d003      	beq.n	528c <_strtoll_r+0x78>
    5284:	2400      	movs	r4, #0
    5286:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
    528a:	e003      	b.n	5294 <_strtoll_r+0x80>
    528c:	f04f 34ff 	mov.w	r4, #4294967295
    5290:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    5294:	ea4f 7be8 	mov.w	fp, r8, asr #31
    5298:	4620      	mov	r0, r4
    529a:	4629      	mov	r1, r5
    529c:	4642      	mov	r2, r8
    529e:	465b      	mov	r3, fp
    52a0:	f8cd c004 	str.w	ip, [sp, #4]
    52a4:	f000 fbce 	bl	5a44 <__aeabi_uldivmod>
    52a8:	465b      	mov	r3, fp
    52aa:	9206      	str	r2, [sp, #24]
    52ac:	4620      	mov	r0, r4
    52ae:	4642      	mov	r2, r8
    52b0:	4629      	mov	r1, r5
    52b2:	f000 fbc7 	bl	5a44 <__aeabi_uldivmod>
    52b6:	f8dd c004 	ldr.w	ip, [sp, #4]
    52ba:	9103      	str	r1, [sp, #12]
    52bc:	46c1      	mov	r9, r8
    52be:	9002      	str	r0, [sp, #8]
    52c0:	2100      	movs	r1, #0
    52c2:	2200      	movs	r2, #0
    52c4:	2300      	movs	r3, #0
    52c6:	9805      	ldr	r0, [sp, #20]
    52c8:	19c4      	adds	r4, r0, r7
    52ca:	7860      	ldrb	r0, [r4, #1]
    52cc:	f000 0404 	and.w	r4, r0, #4
    52d0:	b2e4      	uxtb	r4, r4
    52d2:	b10c      	cbz	r4, 52d8 <_strtoll_r+0xc4>
    52d4:	3f30      	subs	r7, #48	; 0x30
    52d6:	e007      	b.n	52e8 <_strtoll_r+0xd4>
    52d8:	f010 0003 	ands.w	r0, r0, #3
    52dc:	d026      	beq.n	532c <_strtoll_r+0x118>
    52de:	2801      	cmp	r0, #1
    52e0:	bf14      	ite	ne
    52e2:	2057      	movne	r0, #87	; 0x57
    52e4:	2037      	moveq	r0, #55	; 0x37
    52e6:	1a3f      	subs	r7, r7, r0
    52e8:	4547      	cmp	r7, r8
    52ea:	da1f      	bge.n	532c <_strtoll_r+0x118>
    52ec:	1c4c      	adds	r4, r1, #1
    52ee:	d01a      	beq.n	5326 <_strtoll_r+0x112>
    52f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    52f4:	4299      	cmp	r1, r3
    52f6:	bf08      	it	eq
    52f8:	4290      	cmpeq	r0, r2
    52fa:	d312      	bcc.n	5322 <_strtoll_r+0x10e>
    52fc:	428b      	cmp	r3, r1
    52fe:	bf08      	it	eq
    5300:	4282      	cmpeq	r2, r0
    5302:	d102      	bne.n	530a <_strtoll_r+0xf6>
    5304:	9906      	ldr	r1, [sp, #24]
    5306:	428f      	cmp	r7, r1
    5308:	dc0b      	bgt.n	5322 <_strtoll_r+0x10e>
    530a:	fb02 f40b 	mul.w	r4, r2, fp
    530e:	fb09 4003 	mla	r0, r9, r3, r4
    5312:	fba2 2309 	umull	r2, r3, r2, r9
    5316:	19d2      	adds	r2, r2, r7
    5318:	4403      	add	r3, r0
    531a:	eb43 73e7 	adc.w	r3, r3, r7, asr #31
    531e:	2101      	movs	r1, #1
    5320:	e001      	b.n	5326 <_strtoll_r+0x112>
    5322:	f04f 31ff 	mov.w	r1, #4294967295
    5326:	f816 7b01 	ldrb.w	r7, [r6], #1
    532a:	e7cc      	b.n	52c6 <_strtoll_r+0xb2>
    532c:	1c48      	adds	r0, r1, #1
    532e:	d111      	bne.n	5354 <_strtoll_r+0x140>
    5330:	f1ba 0f00 	cmp.w	sl, #0
    5334:	d003      	beq.n	533e <_strtoll_r+0x12a>
    5336:	2200      	movs	r2, #0
    5338:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    533c:	e003      	b.n	5346 <_strtoll_r+0x132>
    533e:	f04f 32ff 	mov.w	r2, #4294967295
    5342:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    5346:	9c07      	ldr	r4, [sp, #28]
    5348:	2022      	movs	r0, #34	; 0x22
    534a:	6020      	str	r0, [r4, #0]
    534c:	f1bc 0f00 	cmp.w	ip, #0
    5350:	d10a      	bne.n	5368 <_strtoll_r+0x154>
    5352:	e020      	b.n	5396 <_strtoll_r+0x182>
    5354:	f1ba 0f00 	cmp.w	sl, #0
    5358:	d002      	beq.n	5360 <_strtoll_r+0x14c>
    535a:	4252      	negs	r2, r2
    535c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    5360:	f1bc 0f00 	cmp.w	ip, #0
    5364:	d017      	beq.n	5396 <_strtoll_r+0x182>
    5366:	b109      	cbz	r1, 536c <_strtoll_r+0x158>
    5368:	3e01      	subs	r6, #1
    536a:	9604      	str	r6, [sp, #16]
    536c:	9c04      	ldr	r4, [sp, #16]
    536e:	f8cc 4000 	str.w	r4, [ip]
    5372:	e010      	b.n	5396 <_strtoll_r+0x182>
    5374:	2f58      	cmp	r7, #88	; 0x58
    5376:	f43f af7e 	beq.w	5276 <_strtoll_r+0x62>
    537a:	2730      	movs	r7, #48	; 0x30
    537c:	f1b8 0f00 	cmp.w	r8, #0
    5380:	f47f af7d 	bne.w	527e <_strtoll_r+0x6a>
    5384:	f04f 0808 	mov.w	r8, #8
    5388:	e779      	b.n	527e <_strtoll_r+0x6a>
    538a:	2f30      	cmp	r7, #48	; 0x30
    538c:	f43f af70 	beq.w	5270 <_strtoll_r+0x5c>
    5390:	f04f 080a 	mov.w	r8, #10
    5394:	e773      	b.n	527e <_strtoll_r+0x6a>
    5396:	4610      	mov	r0, r2
    5398:	4619      	mov	r1, r3
    539a:	b009      	add	sp, #36	; 0x24
    539c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    53a0:	20000480 	.word	0x20000480

000053a4 <_strtoul_r>:
    53a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    53a8:	9001      	str	r0, [sp, #4]
    53aa:	483c      	ldr	r0, [pc, #240]	; (549c <_strtoul_r+0xf8>)
    53ac:	f8d0 9000 	ldr.w	r9, [r0]
    53b0:	4608      	mov	r0, r1
    53b2:	4604      	mov	r4, r0
    53b4:	f814 5b01 	ldrb.w	r5, [r4], #1
    53b8:	eb09 0605 	add.w	r6, r9, r5
    53bc:	4620      	mov	r0, r4
    53be:	7877      	ldrb	r7, [r6, #1]
    53c0:	f007 0608 	and.w	r6, r7, #8
    53c4:	b2f7      	uxtb	r7, r6
    53c6:	2f00      	cmp	r7, #0
    53c8:	d1f3      	bne.n	53b2 <_strtoul_r+0xe>
    53ca:	2d2d      	cmp	r5, #45	; 0x2d
    53cc:	d103      	bne.n	53d6 <_strtoul_r+0x32>
    53ce:	f814 5b01 	ldrb.w	r5, [r4], #1
    53d2:	2701      	movs	r7, #1
    53d4:	e004      	b.n	53e0 <_strtoul_r+0x3c>
    53d6:	2d2b      	cmp	r5, #43	; 0x2b
    53d8:	bf04      	itt	eq
    53da:	4624      	moveq	r4, r4
    53dc:	f814 5b01 	ldrbeq.w	r5, [r4], #1
    53e0:	2b00      	cmp	r3, #0
    53e2:	d055      	beq.n	5490 <_strtoul_r+0xec>
    53e4:	2b10      	cmp	r3, #16
    53e6:	d107      	bne.n	53f8 <_strtoul_r+0x54>
    53e8:	2d30      	cmp	r5, #48	; 0x30
    53ea:	d105      	bne.n	53f8 <_strtoul_r+0x54>
    53ec:	7825      	ldrb	r5, [r4, #0]
    53ee:	2d78      	cmp	r5, #120	; 0x78
    53f0:	d147      	bne.n	5482 <_strtoul_r+0xde>
    53f2:	7865      	ldrb	r5, [r4, #1]
    53f4:	2310      	movs	r3, #16
    53f6:	3402      	adds	r4, #2
    53f8:	f04f 3aff 	mov.w	sl, #4294967295
    53fc:	fbba faf3 	udiv	sl, sl, r3
    5400:	fb03 f00a 	mul.w	r0, r3, sl
    5404:	2600      	movs	r6, #0
    5406:	ea6f 0800 	mvn.w	r8, r0
    540a:	4630      	mov	r0, r6
    540c:	eb09 0c05 	add.w	ip, r9, r5
    5410:	f89c c001 	ldrb.w	ip, [ip, #1]
    5414:	f00c 0b04 	and.w	fp, ip, #4
    5418:	fa5f fb8b 	uxtb.w	fp, fp
    541c:	f1bb 0f00 	cmp.w	fp, #0
    5420:	d001      	beq.n	5426 <_strtoul_r+0x82>
    5422:	3d30      	subs	r5, #48	; 0x30
    5424:	e00b      	b.n	543e <_strtoul_r+0x9a>
    5426:	f01c 0c03 	ands.w	ip, ip, #3
    542a:	d01b      	beq.n	5464 <_strtoul_r+0xc0>
    542c:	f1bc 0f01 	cmp.w	ip, #1
    5430:	bf14      	ite	ne
    5432:	f04f 0c57 	movne.w	ip, #87	; 0x57
    5436:	f04f 0c37 	moveq.w	ip, #55	; 0x37
    543a:	ebcc 0505 	rsb	r5, ip, r5
    543e:	429d      	cmp	r5, r3
    5440:	da10      	bge.n	5464 <_strtoul_r+0xc0>
    5442:	f1b6 3fff 	cmp.w	r6, #4294967295
    5446:	d00a      	beq.n	545e <_strtoul_r+0xba>
    5448:	4550      	cmp	r0, sl
    544a:	d806      	bhi.n	545a <_strtoul_r+0xb6>
    544c:	d101      	bne.n	5452 <_strtoul_r+0xae>
    544e:	4545      	cmp	r5, r8
    5450:	dc03      	bgt.n	545a <_strtoul_r+0xb6>
    5452:	fb03 5000 	mla	r0, r3, r0, r5
    5456:	2601      	movs	r6, #1
    5458:	e001      	b.n	545e <_strtoul_r+0xba>
    545a:	f04f 36ff 	mov.w	r6, #4294967295
    545e:	f814 5b01 	ldrb.w	r5, [r4], #1
    5462:	e7d3      	b.n	540c <_strtoul_r+0x68>
    5464:	1c73      	adds	r3, r6, #1
    5466:	d105      	bne.n	5474 <_strtoul_r+0xd0>
    5468:	9901      	ldr	r1, [sp, #4]
    546a:	2322      	movs	r3, #34	; 0x22
    546c:	600b      	str	r3, [r1, #0]
    546e:	4630      	mov	r0, r6
    5470:	b922      	cbnz	r2, 547c <_strtoul_r+0xd8>
    5472:	e011      	b.n	5498 <_strtoul_r+0xf4>
    5474:	b107      	cbz	r7, 5478 <_strtoul_r+0xd4>
    5476:	4240      	negs	r0, r0
    5478:	b172      	cbz	r2, 5498 <_strtoul_r+0xf4>
    547a:	b106      	cbz	r6, 547e <_strtoul_r+0xda>
    547c:	1e61      	subs	r1, r4, #1
    547e:	6011      	str	r1, [r2, #0]
    5480:	e00a      	b.n	5498 <_strtoul_r+0xf4>
    5482:	2d58      	cmp	r5, #88	; 0x58
    5484:	d0b5      	beq.n	53f2 <_strtoul_r+0x4e>
    5486:	2530      	movs	r5, #48	; 0x30
    5488:	2b00      	cmp	r3, #0
    548a:	d1b5      	bne.n	53f8 <_strtoul_r+0x54>
    548c:	2308      	movs	r3, #8
    548e:	e7b3      	b.n	53f8 <_strtoul_r+0x54>
    5490:	2d30      	cmp	r5, #48	; 0x30
    5492:	d0ab      	beq.n	53ec <_strtoul_r+0x48>
    5494:	230a      	movs	r3, #10
    5496:	e7af      	b.n	53f8 <_strtoul_r+0x54>
    5498:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    549c:	20000480 	.word	0x20000480

000054a0 <strtoul>:
    54a0:	b530      	push	{r4, r5, lr}
    54a2:	4613      	mov	r3, r2
    54a4:	4a04      	ldr	r2, [pc, #16]	; (54b8 <strtoul+0x18>)
    54a6:	4605      	mov	r5, r0
    54a8:	460c      	mov	r4, r1
    54aa:	6810      	ldr	r0, [r2, #0]
    54ac:	4629      	mov	r1, r5
    54ae:	4622      	mov	r2, r4
    54b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    54b4:	f7ff bf76 	b.w	53a4 <_strtoul_r>
    54b8:	20000050 	.word	0x20000050

000054bc <_strtoull_r>:
    54bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    54c0:	461e      	mov	r6, r3
    54c2:	b087      	sub	sp, #28
    54c4:	4b54      	ldr	r3, [pc, #336]	; (5618 <_strtoull_r+0x15c>)
    54c6:	9005      	str	r0, [sp, #20]
    54c8:	6818      	ldr	r0, [r3, #0]
    54ca:	468a      	mov	sl, r1
    54cc:	4693      	mov	fp, r2
    54ce:	9003      	str	r0, [sp, #12]
    54d0:	460c      	mov	r4, r1
    54d2:	9a03      	ldr	r2, [sp, #12]
    54d4:	f814 5b01 	ldrb.w	r5, [r4], #1
    54d8:	1957      	adds	r7, r2, r5
    54da:	4621      	mov	r1, r4
    54dc:	f897 9001 	ldrb.w	r9, [r7, #1]
    54e0:	f009 0308 	and.w	r3, r9, #8
    54e4:	b2d8      	uxtb	r0, r3
    54e6:	2800      	cmp	r0, #0
    54e8:	d1f2      	bne.n	54d0 <_strtoull_r+0x14>
    54ea:	2d2d      	cmp	r5, #45	; 0x2d
    54ec:	d104      	bne.n	54f8 <_strtoull_r+0x3c>
    54ee:	f814 5b01 	ldrb.w	r5, [r4], #1
    54f2:	f04f 0901 	mov.w	r9, #1
    54f6:	e006      	b.n	5506 <_strtoull_r+0x4a>
    54f8:	2d2b      	cmp	r5, #43	; 0x2b
    54fa:	bf08      	it	eq
    54fc:	4624      	moveq	r4, r4
    54fe:	4681      	mov	r9, r0
    5500:	bf08      	it	eq
    5502:	f814 5b01 	ldrbeq.w	r5, [r4], #1
    5506:	2e00      	cmp	r6, #0
    5508:	d07d      	beq.n	5606 <_strtoull_r+0x14a>
    550a:	2e10      	cmp	r6, #16
    550c:	d107      	bne.n	551e <_strtoull_r+0x62>
    550e:	2d30      	cmp	r5, #48	; 0x30
    5510:	d105      	bne.n	551e <_strtoull_r+0x62>
    5512:	7825      	ldrb	r5, [r4, #0]
    5514:	2d78      	cmp	r5, #120	; 0x78
    5516:	d16f      	bne.n	55f8 <_strtoull_r+0x13c>
    5518:	7865      	ldrb	r5, [r4, #1]
    551a:	2610      	movs	r6, #16
    551c:	3402      	adds	r4, #2
    551e:	ea4f 78e6 	mov.w	r8, r6, asr #31
    5522:	4632      	mov	r2, r6
    5524:	4643      	mov	r3, r8
    5526:	f04f 30ff 	mov.w	r0, #4294967295
    552a:	f04f 31ff 	mov.w	r1, #4294967295
    552e:	f000 fa89 	bl	5a44 <__aeabi_uldivmod>
    5532:	4632      	mov	r2, r6
    5534:	e88d 0003 	stmia.w	sp, {r0, r1}
    5538:	4643      	mov	r3, r8
    553a:	f04f 30ff 	mov.w	r0, #4294967295
    553e:	f04f 31ff 	mov.w	r1, #4294967295
    5542:	f000 fa7f 	bl	5a44 <__aeabi_uldivmod>
    5546:	4637      	mov	r7, r6
    5548:	9204      	str	r2, [sp, #16]
    554a:	2100      	movs	r1, #0
    554c:	2200      	movs	r2, #0
    554e:	2300      	movs	r3, #0
    5550:	9803      	ldr	r0, [sp, #12]
    5552:	eb00 0c05 	add.w	ip, r0, r5
    5556:	f89c 0001 	ldrb.w	r0, [ip, #1]
    555a:	f000 0e04 	and.w	lr, r0, #4
    555e:	fa5f fc8e 	uxtb.w	ip, lr
    5562:	f1bc 0f00 	cmp.w	ip, #0
    5566:	d001      	beq.n	556c <_strtoull_r+0xb0>
    5568:	3d30      	subs	r5, #48	; 0x30
    556a:	e007      	b.n	557c <_strtoull_r+0xc0>
    556c:	f010 0003 	ands.w	r0, r0, #3
    5570:	d026      	beq.n	55c0 <_strtoull_r+0x104>
    5572:	2801      	cmp	r0, #1
    5574:	bf14      	ite	ne
    5576:	2057      	movne	r0, #87	; 0x57
    5578:	2037      	moveq	r0, #55	; 0x37
    557a:	1a2d      	subs	r5, r5, r0
    557c:	42b5      	cmp	r5, r6
    557e:	da1f      	bge.n	55c0 <_strtoull_r+0x104>
    5580:	1c48      	adds	r0, r1, #1
    5582:	d01a      	beq.n	55ba <_strtoull_r+0xfe>
    5584:	e9dd 0100 	ldrd	r0, r1, [sp]
    5588:	4299      	cmp	r1, r3
    558a:	bf08      	it	eq
    558c:	4290      	cmpeq	r0, r2
    558e:	d312      	bcc.n	55b6 <_strtoull_r+0xfa>
    5590:	428b      	cmp	r3, r1
    5592:	bf08      	it	eq
    5594:	4282      	cmpeq	r2, r0
    5596:	d102      	bne.n	559e <_strtoull_r+0xe2>
    5598:	9904      	ldr	r1, [sp, #16]
    559a:	428d      	cmp	r5, r1
    559c:	dc0b      	bgt.n	55b6 <_strtoull_r+0xfa>
    559e:	fb02 f008 	mul.w	r0, r2, r8
    55a2:	fb07 0103 	mla	r1, r7, r3, r0
    55a6:	fba2 2307 	umull	r2, r3, r2, r7
    55aa:	18cb      	adds	r3, r1, r3
    55ac:	1952      	adds	r2, r2, r5
    55ae:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
    55b2:	2101      	movs	r1, #1
    55b4:	e001      	b.n	55ba <_strtoull_r+0xfe>
    55b6:	f04f 31ff 	mov.w	r1, #4294967295
    55ba:	f814 5b01 	ldrb.w	r5, [r4], #1
    55be:	e7c7      	b.n	5550 <_strtoull_r+0x94>
    55c0:	1c48      	adds	r0, r1, #1
    55c2:	d10a      	bne.n	55da <_strtoull_r+0x11e>
    55c4:	9a05      	ldr	r2, [sp, #20]
    55c6:	2022      	movs	r0, #34	; 0x22
    55c8:	6010      	str	r0, [r2, #0]
    55ca:	f04f 33ff 	mov.w	r3, #4294967295
    55ce:	f04f 32ff 	mov.w	r2, #4294967295
    55d2:	f1bb 0f00 	cmp.w	fp, #0
    55d6:	d10a      	bne.n	55ee <_strtoull_r+0x132>
    55d8:	e019      	b.n	560e <_strtoull_r+0x152>
    55da:	f1b9 0f00 	cmp.w	r9, #0
    55de:	d002      	beq.n	55e6 <_strtoull_r+0x12a>
    55e0:	4252      	negs	r2, r2
    55e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    55e6:	f1bb 0f00 	cmp.w	fp, #0
    55ea:	d010      	beq.n	560e <_strtoull_r+0x152>
    55ec:	b109      	cbz	r1, 55f2 <_strtoull_r+0x136>
    55ee:	f104 3aff 	add.w	sl, r4, #4294967295
    55f2:	f8cb a000 	str.w	sl, [fp]
    55f6:	e00a      	b.n	560e <_strtoull_r+0x152>
    55f8:	2d58      	cmp	r5, #88	; 0x58
    55fa:	d08d      	beq.n	5518 <_strtoull_r+0x5c>
    55fc:	2530      	movs	r5, #48	; 0x30
    55fe:	2e00      	cmp	r6, #0
    5600:	d18d      	bne.n	551e <_strtoull_r+0x62>
    5602:	2608      	movs	r6, #8
    5604:	e78b      	b.n	551e <_strtoull_r+0x62>
    5606:	2d30      	cmp	r5, #48	; 0x30
    5608:	d083      	beq.n	5512 <_strtoull_r+0x56>
    560a:	260a      	movs	r6, #10
    560c:	e787      	b.n	551e <_strtoull_r+0x62>
    560e:	4610      	mov	r0, r2
    5610:	4619      	mov	r1, r3
    5612:	b007      	add	sp, #28
    5614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5618:	20000480 	.word	0x20000480

0000561c <__submore>:
    561c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5620:	460c      	mov	r4, r1
    5622:	6b09      	ldr	r1, [r1, #48]	; 0x30
    5624:	f104 0340 	add.w	r3, r4, #64	; 0x40
    5628:	4299      	cmp	r1, r3
    562a:	d11c      	bne.n	5666 <__submore+0x4a>
    562c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    5630:	f7ff f844 	bl	46bc <_malloc_r>
    5634:	b918      	cbnz	r0, 563e <__submore+0x22>
    5636:	f04f 30ff 	mov.w	r0, #4294967295
    563a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    563e:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
    5642:	6320      	str	r0, [r4, #48]	; 0x30
    5644:	f44f 6180 	mov.w	r1, #1024	; 0x400
    5648:	6361      	str	r1, [r4, #52]	; 0x34
    564a:	f880 23ff 	strb.w	r2, [r0, #1023]	; 0x3ff
    564e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    5652:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
    5656:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
    565a:	f880 13fd 	strb.w	r1, [r0, #1021]	; 0x3fd
    565e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
    5662:	6020      	str	r0, [r4, #0]
    5664:	e012      	b.n	568c <__submore+0x70>
    5666:	6b66      	ldr	r6, [r4, #52]	; 0x34
    5668:	0077      	lsls	r7, r6, #1
    566a:	463a      	mov	r2, r7
    566c:	f7ff fabc 	bl	4be8 <_realloc_r>
    5670:	4605      	mov	r5, r0
    5672:	2800      	cmp	r0, #0
    5674:	d0df      	beq.n	5636 <__submore+0x1a>
    5676:	eb00 0806 	add.w	r8, r0, r6
    567a:	4640      	mov	r0, r8
    567c:	4629      	mov	r1, r5
    567e:	4632      	mov	r2, r6
    5680:	f7ff fa8c 	bl	4b9c <memcpy>
    5684:	f8c4 8000 	str.w	r8, [r4]
    5688:	6325      	str	r5, [r4, #48]	; 0x30
    568a:	6367      	str	r7, [r4, #52]	; 0x34
    568c:	2000      	movs	r0, #0
    568e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005692 <_ungetc_r>:
    5692:	1c4b      	adds	r3, r1, #1
    5694:	b570      	push	{r4, r5, r6, lr}
    5696:	4606      	mov	r6, r0
    5698:	460d      	mov	r5, r1
    569a:	4614      	mov	r4, r2
    569c:	d102      	bne.n	56a4 <_ungetc_r+0x12>
    569e:	f04f 35ff 	mov.w	r5, #4294967295
    56a2:	e062      	b.n	576a <_ungetc_r+0xd8>
    56a4:	b118      	cbz	r0, 56ae <_ungetc_r+0x1c>
    56a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
    56a8:	b90b      	cbnz	r3, 56ae <_ungetc_r+0x1c>
    56aa:	f7fe fb49 	bl	3d40 <__sinit>
    56ae:	89a0      	ldrh	r0, [r4, #12]
    56b0:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
    56b4:	b211      	sxth	r1, r2
    56b6:	b931      	cbnz	r1, 56c6 <_ungetc_r+0x34>
    56b8:	f440 5300 	orr.w	r3, r0, #8192	; 0x2000
    56bc:	6e60      	ldr	r0, [r4, #100]	; 0x64
    56be:	81a3      	strh	r3, [r4, #12]
    56c0:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
    56c4:	6662      	str	r2, [r4, #100]	; 0x64
    56c6:	89a1      	ldrh	r1, [r4, #12]
    56c8:	f001 0004 	and.w	r0, r1, #4
    56cc:	f021 0320 	bic.w	r3, r1, #32
    56d0:	b202      	sxth	r2, r0
    56d2:	81a3      	strh	r3, [r4, #12]
    56d4:	b9c2      	cbnz	r2, 5708 <_ungetc_r+0x76>
    56d6:	f001 0310 	and.w	r3, r1, #16
    56da:	b218      	sxth	r0, r3
    56dc:	2800      	cmp	r0, #0
    56de:	d0de      	beq.n	569e <_ungetc_r+0xc>
    56e0:	f001 0108 	and.w	r1, r1, #8
    56e4:	b20a      	sxth	r2, r1
    56e6:	b15a      	cbz	r2, 5700 <_ungetc_r+0x6e>
    56e8:	4630      	mov	r0, r6
    56ea:	4621      	mov	r1, r4
    56ec:	f7fe fa34 	bl	3b58 <_fflush_r>
    56f0:	2800      	cmp	r0, #0
    56f2:	d1d4      	bne.n	569e <_ungetc_r+0xc>
    56f4:	89a3      	ldrh	r3, [r4, #12]
    56f6:	60a0      	str	r0, [r4, #8]
    56f8:	f023 0108 	bic.w	r1, r3, #8
    56fc:	81a1      	strh	r1, [r4, #12]
    56fe:	61a0      	str	r0, [r4, #24]
    5700:	89a0      	ldrh	r0, [r4, #12]
    5702:	f040 0204 	orr.w	r2, r0, #4
    5706:	81a2      	strh	r2, [r4, #12]
    5708:	6b23      	ldr	r3, [r4, #48]	; 0x30
    570a:	b2ed      	uxtb	r5, r5
    570c:	b183      	cbz	r3, 5730 <_ungetc_r+0x9e>
    570e:	6862      	ldr	r2, [r4, #4]
    5710:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5712:	429a      	cmp	r2, r3
    5714:	da05      	bge.n	5722 <_ungetc_r+0x90>
    5716:	6821      	ldr	r1, [r4, #0]
    5718:	1e48      	subs	r0, r1, #1
    571a:	6020      	str	r0, [r4, #0]
    571c:	f801 5c01 	strb.w	r5, [r1, #-1]
    5720:	e011      	b.n	5746 <_ungetc_r+0xb4>
    5722:	4630      	mov	r0, r6
    5724:	4621      	mov	r1, r4
    5726:	f7ff ff79 	bl	561c <__submore>
    572a:	2800      	cmp	r0, #0
    572c:	d0f3      	beq.n	5716 <_ungetc_r+0x84>
    572e:	e7b6      	b.n	569e <_ungetc_r+0xc>
    5730:	6921      	ldr	r1, [r4, #16]
    5732:	b159      	cbz	r1, 574c <_ungetc_r+0xba>
    5734:	6820      	ldr	r0, [r4, #0]
    5736:	4288      	cmp	r0, r1
    5738:	d908      	bls.n	574c <_ungetc_r+0xba>
    573a:	f810 2c01 	ldrb.w	r2, [r0, #-1]
    573e:	42aa      	cmp	r2, r5
    5740:	d104      	bne.n	574c <_ungetc_r+0xba>
    5742:	3801      	subs	r0, #1
    5744:	6020      	str	r0, [r4, #0]
    5746:	6862      	ldr	r2, [r4, #4]
    5748:	1c51      	adds	r1, r2, #1
    574a:	e00d      	b.n	5768 <_ungetc_r+0xd6>
    574c:	6863      	ldr	r3, [r4, #4]
    574e:	6821      	ldr	r1, [r4, #0]
    5750:	63e3      	str	r3, [r4, #60]	; 0x3c
    5752:	4623      	mov	r3, r4
    5754:	f104 0040 	add.w	r0, r4, #64	; 0x40
    5758:	f803 5f42 	strb.w	r5, [r3, #66]!
    575c:	2203      	movs	r2, #3
    575e:	63a1      	str	r1, [r4, #56]	; 0x38
    5760:	6320      	str	r0, [r4, #48]	; 0x30
    5762:	6362      	str	r2, [r4, #52]	; 0x34
    5764:	6023      	str	r3, [r4, #0]
    5766:	2101      	movs	r1, #1
    5768:	6061      	str	r1, [r4, #4]
    576a:	4628      	mov	r0, r5
    576c:	bd70      	pop	{r4, r5, r6, pc}

0000576e <ungetc>:
    576e:	460a      	mov	r2, r1
    5770:	4902      	ldr	r1, [pc, #8]	; (577c <ungetc+0xe>)
    5772:	4603      	mov	r3, r0
    5774:	6808      	ldr	r0, [r1, #0]
    5776:	4619      	mov	r1, r3
    5778:	f7ff bf8b 	b.w	5692 <_ungetc_r>
    577c:	20000050 	.word	0x20000050

00005780 <__swbuf_r>:
    5780:	b570      	push	{r4, r5, r6, lr}
    5782:	460d      	mov	r5, r1
    5784:	4614      	mov	r4, r2
    5786:	4606      	mov	r6, r0
    5788:	b118      	cbz	r0, 5792 <__swbuf_r+0x12>
    578a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    578c:	b90b      	cbnz	r3, 5792 <__swbuf_r+0x12>
    578e:	f7fe fad7 	bl	3d40 <__sinit>
    5792:	89a1      	ldrh	r1, [r4, #12]
    5794:	69a0      	ldr	r0, [r4, #24]
    5796:	f001 0208 	and.w	r2, r1, #8
    579a:	b213      	sxth	r3, r2
    579c:	60a0      	str	r0, [r4, #8]
    579e:	b10b      	cbz	r3, 57a4 <__swbuf_r+0x24>
    57a0:	6920      	ldr	r0, [r4, #16]
    57a2:	b958      	cbnz	r0, 57bc <__swbuf_r+0x3c>
    57a4:	4630      	mov	r0, r6
    57a6:	4621      	mov	r1, r4
    57a8:	f7fe f96a 	bl	3a80 <__swsetup_r>
    57ac:	b130      	cbz	r0, 57bc <__swbuf_r+0x3c>
    57ae:	89a5      	ldrh	r5, [r4, #12]
    57b0:	2009      	movs	r0, #9
    57b2:	f045 0140 	orr.w	r1, r5, #64	; 0x40
    57b6:	81a1      	strh	r1, [r4, #12]
    57b8:	6030      	str	r0, [r6, #0]
    57ba:	e017      	b.n	57ec <__swbuf_r+0x6c>
    57bc:	89a1      	ldrh	r1, [r4, #12]
    57be:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
    57c2:	b213      	sxth	r3, r2
    57c4:	b2ed      	uxtb	r5, r5
    57c6:	b933      	cbnz	r3, 57d6 <__swbuf_r+0x56>
    57c8:	f441 5000 	orr.w	r0, r1, #8192	; 0x2000
    57cc:	6e61      	ldr	r1, [r4, #100]	; 0x64
    57ce:	81a0      	strh	r0, [r4, #12]
    57d0:	f421 5200 	bic.w	r2, r1, #8192	; 0x2000
    57d4:	6662      	str	r2, [r4, #100]	; 0x64
    57d6:	6820      	ldr	r0, [r4, #0]
    57d8:	6923      	ldr	r3, [r4, #16]
    57da:	6961      	ldr	r1, [r4, #20]
    57dc:	1ac0      	subs	r0, r0, r3
    57de:	4288      	cmp	r0, r1
    57e0:	db07      	blt.n	57f2 <__swbuf_r+0x72>
    57e2:	4630      	mov	r0, r6
    57e4:	4621      	mov	r1, r4
    57e6:	f7fe f9b7 	bl	3b58 <_fflush_r>
    57ea:	b110      	cbz	r0, 57f2 <__swbuf_r+0x72>
    57ec:	f04f 35ff 	mov.w	r5, #4294967295
    57f0:	e015      	b.n	581e <__swbuf_r+0x9e>
    57f2:	68a2      	ldr	r2, [r4, #8]
    57f4:	6821      	ldr	r1, [r4, #0]
    57f6:	1e53      	subs	r3, r2, #1
    57f8:	60a3      	str	r3, [r4, #8]
    57fa:	f801 5b01 	strb.w	r5, [r1], #1
    57fe:	6962      	ldr	r2, [r4, #20]
    5800:	6021      	str	r1, [r4, #0]
    5802:	3001      	adds	r0, #1
    5804:	4290      	cmp	r0, r2
    5806:	d004      	beq.n	5812 <__swbuf_r+0x92>
    5808:	89a3      	ldrh	r3, [r4, #12]
    580a:	07db      	lsls	r3, r3, #31
    580c:	d507      	bpl.n	581e <__swbuf_r+0x9e>
    580e:	2d0a      	cmp	r5, #10
    5810:	d105      	bne.n	581e <__swbuf_r+0x9e>
    5812:	4630      	mov	r0, r6
    5814:	4621      	mov	r1, r4
    5816:	f7fe f99f 	bl	3b58 <_fflush_r>
    581a:	2800      	cmp	r0, #0
    581c:	d1e6      	bne.n	57ec <__swbuf_r+0x6c>
    581e:	4628      	mov	r0, r5
    5820:	bd70      	pop	{r4, r5, r6, pc}

00005822 <__swbuf>:
    5822:	460a      	mov	r2, r1
    5824:	4902      	ldr	r1, [pc, #8]	; (5830 <__swbuf+0xe>)
    5826:	4603      	mov	r3, r0
    5828:	6808      	ldr	r0, [r1, #0]
    582a:	4619      	mov	r1, r3
    582c:	f7ff bfa8 	b.w	5780 <__swbuf_r>
    5830:	20000050 	.word	0x20000050

00005834 <_wcrtomb_r>:
    5834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5838:	461d      	mov	r5, r3
    583a:	4b10      	ldr	r3, [pc, #64]	; (587c <_wcrtomb_r+0x48>)
    583c:	b086      	sub	sp, #24
    583e:	4604      	mov	r4, r0
    5840:	4690      	mov	r8, r2
    5842:	460e      	mov	r6, r1
    5844:	681f      	ldr	r7, [r3, #0]
    5846:	b939      	cbnz	r1, 5858 <_wcrtomb_r+0x24>
    5848:	f7fe fe9a 	bl	4580 <__locale_charset>
    584c:	9500      	str	r5, [sp, #0]
    584e:	4603      	mov	r3, r0
    5850:	a903      	add	r1, sp, #12
    5852:	4620      	mov	r0, r4
    5854:	4632      	mov	r2, r6
    5856:	e006      	b.n	5866 <_wcrtomb_r+0x32>
    5858:	f7fe fe92 	bl	4580 <__locale_charset>
    585c:	9500      	str	r5, [sp, #0]
    585e:	4603      	mov	r3, r0
    5860:	4631      	mov	r1, r6
    5862:	4620      	mov	r0, r4
    5864:	4642      	mov	r2, r8
    5866:	47b8      	blx	r7
    5868:	1c43      	adds	r3, r0, #1
    586a:	d103      	bne.n	5874 <_wcrtomb_r+0x40>
    586c:	2100      	movs	r1, #0
    586e:	228a      	movs	r2, #138	; 0x8a
    5870:	6029      	str	r1, [r5, #0]
    5872:	6022      	str	r2, [r4, #0]
    5874:	b006      	add	sp, #24
    5876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    587a:	bf00      	nop
    587c:	20000914 	.word	0x20000914

00005880 <wcrtomb>:
    5880:	b530      	push	{r4, r5, lr}
    5882:	4613      	mov	r3, r2
    5884:	4a04      	ldr	r2, [pc, #16]	; (5898 <wcrtomb+0x18>)
    5886:	4605      	mov	r5, r0
    5888:	460c      	mov	r4, r1
    588a:	6810      	ldr	r0, [r2, #0]
    588c:	4629      	mov	r1, r5
    588e:	4622      	mov	r2, r4
    5890:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    5894:	f7ff bfce 	b.w	5834 <_wcrtomb_r>
    5898:	20000050 	.word	0x20000050

0000589c <__ascii_wctomb>:
    589c:	b149      	cbz	r1, 58b2 <__ascii_wctomb+0x16>
    589e:	2aff      	cmp	r2, #255	; 0xff
    58a0:	d904      	bls.n	58ac <__ascii_wctomb+0x10>
    58a2:	238a      	movs	r3, #138	; 0x8a
    58a4:	6003      	str	r3, [r0, #0]
    58a6:	f04f 30ff 	mov.w	r0, #4294967295
    58aa:	4770      	bx	lr
    58ac:	700a      	strb	r2, [r1, #0]
    58ae:	2001      	movs	r0, #1
    58b0:	4770      	bx	lr
    58b2:	4608      	mov	r0, r1
    58b4:	4770      	bx	lr

000058b6 <_wctomb_r>:
    58b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    58ba:	4698      	mov	r8, r3
    58bc:	4b07      	ldr	r3, [pc, #28]	; (58dc <_wctomb_r+0x26>)
    58be:	4605      	mov	r5, r0
    58c0:	460f      	mov	r7, r1
    58c2:	4616      	mov	r6, r2
    58c4:	681c      	ldr	r4, [r3, #0]
    58c6:	f7fe fe5b 	bl	4580 <__locale_charset>
    58ca:	f8cd 8000 	str.w	r8, [sp]
    58ce:	4603      	mov	r3, r0
    58d0:	4639      	mov	r1, r7
    58d2:	4628      	mov	r0, r5
    58d4:	4632      	mov	r2, r6
    58d6:	47a0      	blx	r4
    58d8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    58dc:	20000914 	.word	0x20000914

000058e0 <_write_r>:
    58e0:	b538      	push	{r3, r4, r5, lr}
    58e2:	4c07      	ldr	r4, [pc, #28]	; (5900 <_write_r+0x20>)
    58e4:	4605      	mov	r5, r0
    58e6:	2000      	movs	r0, #0
    58e8:	6020      	str	r0, [r4, #0]
    58ea:	4608      	mov	r0, r1
    58ec:	4611      	mov	r1, r2
    58ee:	461a      	mov	r2, r3
    58f0:	f7fb ff50 	bl	1794 <_write>
    58f4:	1c43      	adds	r3, r0, #1
    58f6:	d102      	bne.n	58fe <_write_r+0x1e>
    58f8:	6823      	ldr	r3, [r4, #0]
    58fa:	b103      	cbz	r3, 58fe <_write_r+0x1e>
    58fc:	602b      	str	r3, [r5, #0]
    58fe:	bd38      	pop	{r3, r4, r5, pc}
    5900:	20000984 	.word	0x20000984

00005904 <_close_r>:
    5904:	b538      	push	{r3, r4, r5, lr}
    5906:	4c06      	ldr	r4, [pc, #24]	; (5920 <_close_r+0x1c>)
    5908:	2300      	movs	r3, #0
    590a:	4605      	mov	r5, r0
    590c:	4608      	mov	r0, r1
    590e:	6023      	str	r3, [r4, #0]
    5910:	f7fc fb3e 	bl	1f90 <_close>
    5914:	1c43      	adds	r3, r0, #1
    5916:	d102      	bne.n	591e <_close_r+0x1a>
    5918:	6821      	ldr	r1, [r4, #0]
    591a:	b101      	cbz	r1, 591e <_close_r+0x1a>
    591c:	6029      	str	r1, [r5, #0]
    591e:	bd38      	pop	{r3, r4, r5, pc}
    5920:	20000984 	.word	0x20000984

00005924 <_fclose_r>:
    5924:	b570      	push	{r4, r5, r6, lr}
    5926:	4605      	mov	r5, r0
    5928:	460c      	mov	r4, r1
    592a:	2900      	cmp	r1, #0
    592c:	d039      	beq.n	59a2 <_fclose_r+0x7e>
    592e:	f7fe fa6b 	bl	3e08 <__sfp_lock_acquire>
    5932:	b125      	cbz	r5, 593e <_fclose_r+0x1a>
    5934:	6bab      	ldr	r3, [r5, #56]	; 0x38
    5936:	b913      	cbnz	r3, 593e <_fclose_r+0x1a>
    5938:	4628      	mov	r0, r5
    593a:	f7fe fa01 	bl	3d40 <__sinit>
    593e:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
    5942:	b35e      	cbz	r6, 599c <_fclose_r+0x78>
    5944:	4628      	mov	r0, r5
    5946:	4621      	mov	r1, r4
    5948:	f7fe f906 	bl	3b58 <_fflush_r>
    594c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    594e:	4606      	mov	r6, r0
    5950:	b13a      	cbz	r2, 5962 <_fclose_r+0x3e>
    5952:	4628      	mov	r0, r5
    5954:	69e1      	ldr	r1, [r4, #28]
    5956:	4790      	blx	r2
    5958:	ea36 0620 	bics.w	r6, r6, r0, asr #32
    595c:	bf28      	it	cs
    595e:	f04f 36ff 	movcs.w	r6, #4294967295
    5962:	89a0      	ldrh	r0, [r4, #12]
    5964:	f000 0180 	and.w	r1, r0, #128	; 0x80
    5968:	b20b      	sxth	r3, r1
    596a:	b11b      	cbz	r3, 5974 <_fclose_r+0x50>
    596c:	4628      	mov	r0, r5
    596e:	6921      	ldr	r1, [r4, #16]
    5970:	f7fe fb82 	bl	4078 <_free_r>
    5974:	6b21      	ldr	r1, [r4, #48]	; 0x30
    5976:	b141      	cbz	r1, 598a <_fclose_r+0x66>
    5978:	f104 0240 	add.w	r2, r4, #64	; 0x40
    597c:	4291      	cmp	r1, r2
    597e:	d002      	beq.n	5986 <_fclose_r+0x62>
    5980:	4628      	mov	r0, r5
    5982:	f7fe fb79 	bl	4078 <_free_r>
    5986:	2000      	movs	r0, #0
    5988:	6320      	str	r0, [r4, #48]	; 0x30
    598a:	6c61      	ldr	r1, [r4, #68]	; 0x44
    598c:	b121      	cbz	r1, 5998 <_fclose_r+0x74>
    598e:	4628      	mov	r0, r5
    5990:	f7fe fb72 	bl	4078 <_free_r>
    5994:	2100      	movs	r1, #0
    5996:	6461      	str	r1, [r4, #68]	; 0x44
    5998:	2300      	movs	r3, #0
    599a:	81a3      	strh	r3, [r4, #12]
    599c:	f7fe fa35 	bl	3e0a <__sfp_lock_release>
    59a0:	e000      	b.n	59a4 <_fclose_r+0x80>
    59a2:	460e      	mov	r6, r1
    59a4:	4630      	mov	r0, r6
    59a6:	bd70      	pop	{r4, r5, r6, pc}

000059a8 <fclose>:
    59a8:	4b02      	ldr	r3, [pc, #8]	; (59b4 <fclose+0xc>)
    59aa:	4601      	mov	r1, r0
    59ac:	6818      	ldr	r0, [r3, #0]
    59ae:	f7ff bfb9 	b.w	5924 <_fclose_r>
    59b2:	bf00      	nop
    59b4:	20000050 	.word	0x20000050

000059b8 <_fstat_r>:
    59b8:	b538      	push	{r3, r4, r5, lr}
    59ba:	4c07      	ldr	r4, [pc, #28]	; (59d8 <_fstat_r+0x20>)
    59bc:	2300      	movs	r3, #0
    59be:	4605      	mov	r5, r0
    59c0:	4608      	mov	r0, r1
    59c2:	4611      	mov	r1, r2
    59c4:	6023      	str	r3, [r4, #0]
    59c6:	f7fc fae7 	bl	1f98 <_fstat>
    59ca:	1c43      	adds	r3, r0, #1
    59cc:	d102      	bne.n	59d4 <_fstat_r+0x1c>
    59ce:	6821      	ldr	r1, [r4, #0]
    59d0:	b101      	cbz	r1, 59d4 <_fstat_r+0x1c>
    59d2:	6029      	str	r1, [r5, #0]
    59d4:	bd38      	pop	{r3, r4, r5, pc}
    59d6:	bf00      	nop
    59d8:	20000984 	.word	0x20000984

000059dc <_isatty_r>:
    59dc:	b538      	push	{r3, r4, r5, lr}
    59de:	4c06      	ldr	r4, [pc, #24]	; (59f8 <_isatty_r+0x1c>)
    59e0:	2300      	movs	r3, #0
    59e2:	4605      	mov	r5, r0
    59e4:	4608      	mov	r0, r1
    59e6:	6023      	str	r3, [r4, #0]
    59e8:	f7fc fadc 	bl	1fa4 <_isatty>
    59ec:	1c43      	adds	r3, r0, #1
    59ee:	d102      	bne.n	59f6 <_isatty_r+0x1a>
    59f0:	6821      	ldr	r1, [r4, #0]
    59f2:	b101      	cbz	r1, 59f6 <_isatty_r+0x1a>
    59f4:	6029      	str	r1, [r5, #0]
    59f6:	bd38      	pop	{r3, r4, r5, pc}
    59f8:	20000984 	.word	0x20000984

000059fc <_lseek_r>:
    59fc:	b538      	push	{r3, r4, r5, lr}
    59fe:	4c07      	ldr	r4, [pc, #28]	; (5a1c <_lseek_r+0x20>)
    5a00:	4605      	mov	r5, r0
    5a02:	2000      	movs	r0, #0
    5a04:	6020      	str	r0, [r4, #0]
    5a06:	4608      	mov	r0, r1
    5a08:	4611      	mov	r1, r2
    5a0a:	461a      	mov	r2, r3
    5a0c:	f7fc face 	bl	1fac <_lseek>
    5a10:	1c43      	adds	r3, r0, #1
    5a12:	d102      	bne.n	5a1a <_lseek_r+0x1e>
    5a14:	6823      	ldr	r3, [r4, #0]
    5a16:	b103      	cbz	r3, 5a1a <_lseek_r+0x1e>
    5a18:	602b      	str	r3, [r5, #0]
    5a1a:	bd38      	pop	{r3, r4, r5, pc}
    5a1c:	20000984 	.word	0x20000984

00005a20 <_read_r>:
    5a20:	b538      	push	{r3, r4, r5, lr}
    5a22:	4c07      	ldr	r4, [pc, #28]	; (5a40 <_read_r+0x20>)
    5a24:	4605      	mov	r5, r0
    5a26:	2000      	movs	r0, #0
    5a28:	6020      	str	r0, [r4, #0]
    5a2a:	4608      	mov	r0, r1
    5a2c:	4611      	mov	r1, r2
    5a2e:	461a      	mov	r2, r3
    5a30:	f7fb fe6c 	bl	170c <_read>
    5a34:	1c43      	adds	r3, r0, #1
    5a36:	d102      	bne.n	5a3e <_read_r+0x1e>
    5a38:	6823      	ldr	r3, [r4, #0]
    5a3a:	b103      	cbz	r3, 5a3e <_read_r+0x1e>
    5a3c:	602b      	str	r3, [r5, #0]
    5a3e:	bd38      	pop	{r3, r4, r5, pc}
    5a40:	20000984 	.word	0x20000984

00005a44 <__aeabi_uldivmod>:
    5a44:	b94b      	cbnz	r3, 5a5a <__aeabi_uldivmod+0x16>
    5a46:	b942      	cbnz	r2, 5a5a <__aeabi_uldivmod+0x16>
    5a48:	2900      	cmp	r1, #0
    5a4a:	bf08      	it	eq
    5a4c:	2800      	cmpeq	r0, #0
    5a4e:	d002      	beq.n	5a56 <__aeabi_uldivmod+0x12>
    5a50:	f04f 31ff 	mov.w	r1, #4294967295
    5a54:	4608      	mov	r0, r1
    5a56:	f000 b837 	b.w	5ac8 <__aeabi_idiv0>
    5a5a:	b082      	sub	sp, #8
    5a5c:	46ec      	mov	ip, sp
    5a5e:	e92d 5000 	stmdb	sp!, {ip, lr}
    5a62:	f000 f81b 	bl	5a9c <__gnu_uldivmod_helper>
    5a66:	f8dd e004 	ldr.w	lr, [sp, #4]
    5a6a:	b002      	add	sp, #8
    5a6c:	bc0c      	pop	{r2, r3}
    5a6e:	4770      	bx	lr

00005a70 <__gnu_ldivmod_helper>:
    5a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a72:	4616      	mov	r6, r2
    5a74:	4604      	mov	r4, r0
    5a76:	460d      	mov	r5, r1
    5a78:	461f      	mov	r7, r3
    5a7a:	f000 f827 	bl	5acc <__divdi3>
    5a7e:	fb06 f301 	mul.w	r3, r6, r1
    5a82:	fb00 3707 	mla	r7, r0, r7, r3
    5a86:	fba6 2300 	umull	r2, r3, r6, r0
    5a8a:	18fb      	adds	r3, r7, r3
    5a8c:	1aa2      	subs	r2, r4, r2
    5a8e:	eb65 0303 	sbc.w	r3, r5, r3
    5a92:	9c06      	ldr	r4, [sp, #24]
    5a94:	e9c4 2300 	strd	r2, r3, [r4]
    5a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5a9a:	bf00      	nop

00005a9c <__gnu_uldivmod_helper>:
    5a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a9e:	4616      	mov	r6, r2
    5aa0:	4604      	mov	r4, r0
    5aa2:	460d      	mov	r5, r1
    5aa4:	461f      	mov	r7, r3
    5aa6:	f000 f96f 	bl	5d88 <__udivdi3>
    5aaa:	fb00 f707 	mul.w	r7, r0, r7
    5aae:	fba0 2306 	umull	r2, r3, r0, r6
    5ab2:	fb06 7701 	mla	r7, r6, r1, r7
    5ab6:	18fb      	adds	r3, r7, r3
    5ab8:	1aa2      	subs	r2, r4, r2
    5aba:	eb65 0303 	sbc.w	r3, r5, r3
    5abe:	9c06      	ldr	r4, [sp, #24]
    5ac0:	e9c4 2300 	strd	r2, r3, [r4]
    5ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5ac6:	bf00      	nop

00005ac8 <__aeabi_idiv0>:
    5ac8:	4770      	bx	lr
    5aca:	bf00      	nop

00005acc <__divdi3>:
    5acc:	2900      	cmp	r1, #0
    5ace:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5ad2:	461d      	mov	r5, r3
    5ad4:	f2c0 809d 	blt.w	5c12 <__divdi3+0x146>
    5ad8:	2400      	movs	r4, #0
    5ada:	2d00      	cmp	r5, #0
    5adc:	f2c0 8094 	blt.w	5c08 <__divdi3+0x13c>
    5ae0:	4680      	mov	r8, r0
    5ae2:	460f      	mov	r7, r1
    5ae4:	4694      	mov	ip, r2
    5ae6:	461e      	mov	r6, r3
    5ae8:	bbe3      	cbnz	r3, 5b64 <__divdi3+0x98>
    5aea:	428a      	cmp	r2, r1
    5aec:	d955      	bls.n	5b9a <__divdi3+0xce>
    5aee:	fab2 f782 	clz	r7, r2
    5af2:	b147      	cbz	r7, 5b06 <__divdi3+0x3a>
    5af4:	f1c7 0520 	rsb	r5, r7, #32
    5af8:	fa20 f605 	lsr.w	r6, r0, r5
    5afc:	fa01 f107 	lsl.w	r1, r1, r7
    5b00:	40ba      	lsls	r2, r7
    5b02:	4331      	orrs	r1, r6
    5b04:	40b8      	lsls	r0, r7
    5b06:	0c17      	lsrs	r7, r2, #16
    5b08:	fbb1 f6f7 	udiv	r6, r1, r7
    5b0c:	0c03      	lsrs	r3, r0, #16
    5b0e:	fa1f fc82 	uxth.w	ip, r2
    5b12:	fb07 1116 	mls	r1, r7, r6, r1
    5b16:	fb0c f506 	mul.w	r5, ip, r6
    5b1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    5b1e:	429d      	cmp	r5, r3
    5b20:	d908      	bls.n	5b34 <__divdi3+0x68>
    5b22:	1e71      	subs	r1, r6, #1
    5b24:	189b      	adds	r3, r3, r2
    5b26:	f080 8113 	bcs.w	5d50 <__divdi3+0x284>
    5b2a:	429d      	cmp	r5, r3
    5b2c:	f240 8110 	bls.w	5d50 <__divdi3+0x284>
    5b30:	3e02      	subs	r6, #2
    5b32:	189b      	adds	r3, r3, r2
    5b34:	1b59      	subs	r1, r3, r5
    5b36:	fbb1 f5f7 	udiv	r5, r1, r7
    5b3a:	fb07 1315 	mls	r3, r7, r5, r1
    5b3e:	b280      	uxth	r0, r0
    5b40:	fb0c fc05 	mul.w	ip, ip, r5
    5b44:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
    5b48:	458c      	cmp	ip, r1
    5b4a:	d907      	bls.n	5b5c <__divdi3+0x90>
    5b4c:	1e6b      	subs	r3, r5, #1
    5b4e:	188a      	adds	r2, r1, r2
    5b50:	f080 8100 	bcs.w	5d54 <__divdi3+0x288>
    5b54:	4594      	cmp	ip, r2
    5b56:	f240 80fd 	bls.w	5d54 <__divdi3+0x288>
    5b5a:	3d02      	subs	r5, #2
    5b5c:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
    5b60:	2500      	movs	r5, #0
    5b62:	e003      	b.n	5b6c <__divdi3+0xa0>
    5b64:	428b      	cmp	r3, r1
    5b66:	d90c      	bls.n	5b82 <__divdi3+0xb6>
    5b68:	2500      	movs	r5, #0
    5b6a:	4629      	mov	r1, r5
    5b6c:	460a      	mov	r2, r1
    5b6e:	462b      	mov	r3, r5
    5b70:	b114      	cbz	r4, 5b78 <__divdi3+0xac>
    5b72:	4252      	negs	r2, r2
    5b74:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    5b78:	4610      	mov	r0, r2
    5b7a:	4619      	mov	r1, r3
    5b7c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5b80:	4770      	bx	lr
    5b82:	fab3 f583 	clz	r5, r3
    5b86:	2d00      	cmp	r5, #0
    5b88:	f040 8087 	bne.w	5c9a <__divdi3+0x1ce>
    5b8c:	428b      	cmp	r3, r1
    5b8e:	d301      	bcc.n	5b94 <__divdi3+0xc8>
    5b90:	4282      	cmp	r2, r0
    5b92:	d8ea      	bhi.n	5b6a <__divdi3+0x9e>
    5b94:	2500      	movs	r5, #0
    5b96:	2101      	movs	r1, #1
    5b98:	e7e8      	b.n	5b6c <__divdi3+0xa0>
    5b9a:	b912      	cbnz	r2, 5ba2 <__divdi3+0xd6>
    5b9c:	2601      	movs	r6, #1
    5b9e:	fbb6 f2f2 	udiv	r2, r6, r2
    5ba2:	fab2 f682 	clz	r6, r2
    5ba6:	2e00      	cmp	r6, #0
    5ba8:	d139      	bne.n	5c1e <__divdi3+0x152>
    5baa:	1a8e      	subs	r6, r1, r2
    5bac:	0c13      	lsrs	r3, r2, #16
    5bae:	fa1f fc82 	uxth.w	ip, r2
    5bb2:	2501      	movs	r5, #1
    5bb4:	fbb6 f7f3 	udiv	r7, r6, r3
    5bb8:	fb03 6117 	mls	r1, r3, r7, r6
    5bbc:	ea4f 4910 	mov.w	r9, r0, lsr #16
    5bc0:	fb0c f807 	mul.w	r8, ip, r7
    5bc4:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
    5bc8:	45b0      	cmp	r8, r6
    5bca:	d906      	bls.n	5bda <__divdi3+0x10e>
    5bcc:	1e79      	subs	r1, r7, #1
    5bce:	18b6      	adds	r6, r6, r2
    5bd0:	d202      	bcs.n	5bd8 <__divdi3+0x10c>
    5bd2:	45b0      	cmp	r8, r6
    5bd4:	f200 80d3 	bhi.w	5d7e <__divdi3+0x2b2>
    5bd8:	460f      	mov	r7, r1
    5bda:	ebc8 0606 	rsb	r6, r8, r6
    5bde:	fbb6 f1f3 	udiv	r1, r6, r3
    5be2:	fb03 6311 	mls	r3, r3, r1, r6
    5be6:	b280      	uxth	r0, r0
    5be8:	fb0c fc01 	mul.w	ip, ip, r1
    5bec:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    5bf0:	459c      	cmp	ip, r3
    5bf2:	d906      	bls.n	5c02 <__divdi3+0x136>
    5bf4:	1e4e      	subs	r6, r1, #1
    5bf6:	189a      	adds	r2, r3, r2
    5bf8:	d202      	bcs.n	5c00 <__divdi3+0x134>
    5bfa:	4594      	cmp	ip, r2
    5bfc:	f200 80c2 	bhi.w	5d84 <__divdi3+0x2b8>
    5c00:	4631      	mov	r1, r6
    5c02:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
    5c06:	e7b1      	b.n	5b6c <__divdi3+0xa0>
    5c08:	43e4      	mvns	r4, r4
    5c0a:	4252      	negs	r2, r2
    5c0c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    5c10:	e766      	b.n	5ae0 <__divdi3+0x14>
    5c12:	4240      	negs	r0, r0
    5c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    5c18:	f04f 34ff 	mov.w	r4, #4294967295
    5c1c:	e75d      	b.n	5ada <__divdi3+0xe>
    5c1e:	40b2      	lsls	r2, r6
    5c20:	f1c6 0920 	rsb	r9, r6, #32
    5c24:	fa21 f709 	lsr.w	r7, r1, r9
    5c28:	fa20 f509 	lsr.w	r5, r0, r9
    5c2c:	0c13      	lsrs	r3, r2, #16
    5c2e:	fa01 f106 	lsl.w	r1, r1, r6
    5c32:	fbb7 f8f3 	udiv	r8, r7, r3
    5c36:	ea45 0901 	orr.w	r9, r5, r1
    5c3a:	fa1f fc82 	uxth.w	ip, r2
    5c3e:	fb03 7718 	mls	r7, r3, r8, r7
    5c42:	ea4f 4119 	mov.w	r1, r9, lsr #16
    5c46:	fb0c f508 	mul.w	r5, ip, r8
    5c4a:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
    5c4e:	40b0      	lsls	r0, r6
    5c50:	42bd      	cmp	r5, r7
    5c52:	d90a      	bls.n	5c6a <__divdi3+0x19e>
    5c54:	18bf      	adds	r7, r7, r2
    5c56:	f108 36ff 	add.w	r6, r8, #4294967295
    5c5a:	f080 808e 	bcs.w	5d7a <__divdi3+0x2ae>
    5c5e:	42bd      	cmp	r5, r7
    5c60:	f240 808b 	bls.w	5d7a <__divdi3+0x2ae>
    5c64:	f1a8 0802 	sub.w	r8, r8, #2
    5c68:	18bf      	adds	r7, r7, r2
    5c6a:	1b79      	subs	r1, r7, r5
    5c6c:	fbb1 f5f3 	udiv	r5, r1, r3
    5c70:	fb03 1715 	mls	r7, r3, r5, r1
    5c74:	fa1f f989 	uxth.w	r9, r9
    5c78:	fb0c f605 	mul.w	r6, ip, r5
    5c7c:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
    5c80:	428e      	cmp	r6, r1
    5c82:	d906      	bls.n	5c92 <__divdi3+0x1c6>
    5c84:	1e6f      	subs	r7, r5, #1
    5c86:	1889      	adds	r1, r1, r2
    5c88:	d271      	bcs.n	5d6e <__divdi3+0x2a2>
    5c8a:	428e      	cmp	r6, r1
    5c8c:	d96f      	bls.n	5d6e <__divdi3+0x2a2>
    5c8e:	3d02      	subs	r5, #2
    5c90:	1889      	adds	r1, r1, r2
    5c92:	1b8e      	subs	r6, r1, r6
    5c94:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
    5c98:	e78c      	b.n	5bb4 <__divdi3+0xe8>
    5c9a:	f1c5 0120 	rsb	r1, r5, #32
    5c9e:	fa22 f301 	lsr.w	r3, r2, r1
    5ca2:	fa06 f605 	lsl.w	r6, r6, r5
    5ca6:	431e      	orrs	r6, r3
    5ca8:	fa27 f201 	lsr.w	r2, r7, r1
    5cac:	ea4f 4916 	mov.w	r9, r6, lsr #16
    5cb0:	fa07 f705 	lsl.w	r7, r7, r5
    5cb4:	fa20 f101 	lsr.w	r1, r0, r1
    5cb8:	fbb2 f8f9 	udiv	r8, r2, r9
    5cbc:	430f      	orrs	r7, r1
    5cbe:	0c3b      	lsrs	r3, r7, #16
    5cc0:	fa1f fa86 	uxth.w	sl, r6
    5cc4:	fb09 2218 	mls	r2, r9, r8, r2
    5cc8:	fb0a fb08 	mul.w	fp, sl, r8
    5ccc:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    5cd0:	4593      	cmp	fp, r2
    5cd2:	fa0c fc05 	lsl.w	ip, ip, r5
    5cd6:	d908      	bls.n	5cea <__divdi3+0x21e>
    5cd8:	1992      	adds	r2, r2, r6
    5cda:	f108 31ff 	add.w	r1, r8, #4294967295
    5cde:	d24a      	bcs.n	5d76 <__divdi3+0x2aa>
    5ce0:	4593      	cmp	fp, r2
    5ce2:	d948      	bls.n	5d76 <__divdi3+0x2aa>
    5ce4:	f1a8 0802 	sub.w	r8, r8, #2
    5ce8:	1992      	adds	r2, r2, r6
    5cea:	ebcb 0302 	rsb	r3, fp, r2
    5cee:	fbb3 f1f9 	udiv	r1, r3, r9
    5cf2:	fb09 3211 	mls	r2, r9, r1, r3
    5cf6:	b2bf      	uxth	r7, r7
    5cf8:	fb0a fa01 	mul.w	sl, sl, r1
    5cfc:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
    5d00:	459a      	cmp	sl, r3
    5d02:	d906      	bls.n	5d12 <__divdi3+0x246>
    5d04:	1e4a      	subs	r2, r1, #1
    5d06:	199b      	adds	r3, r3, r6
    5d08:	d233      	bcs.n	5d72 <__divdi3+0x2a6>
    5d0a:	459a      	cmp	sl, r3
    5d0c:	d931      	bls.n	5d72 <__divdi3+0x2a6>
    5d0e:	3902      	subs	r1, #2
    5d10:	199b      	adds	r3, r3, r6
    5d12:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
    5d16:	0c0f      	lsrs	r7, r1, #16
    5d18:	fa1f f88c 	uxth.w	r8, ip
    5d1c:	fb08 f607 	mul.w	r6, r8, r7
    5d20:	b28a      	uxth	r2, r1
    5d22:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
    5d26:	fb08 f802 	mul.w	r8, r8, r2
    5d2a:	fb0c 6202 	mla	r2, ip, r2, r6
    5d2e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
    5d32:	fb0c fc07 	mul.w	ip, ip, r7
    5d36:	4296      	cmp	r6, r2
    5d38:	bf88      	it	hi
    5d3a:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
    5d3e:	ebca 0303 	rsb	r3, sl, r3
    5d42:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
    5d46:	4563      	cmp	r3, ip
    5d48:	d30e      	bcc.n	5d68 <__divdi3+0x29c>
    5d4a:	d005      	beq.n	5d58 <__divdi3+0x28c>
    5d4c:	2500      	movs	r5, #0
    5d4e:	e70d      	b.n	5b6c <__divdi3+0xa0>
    5d50:	460e      	mov	r6, r1
    5d52:	e6ef      	b.n	5b34 <__divdi3+0x68>
    5d54:	461d      	mov	r5, r3
    5d56:	e701      	b.n	5b5c <__divdi3+0x90>
    5d58:	fa1f f888 	uxth.w	r8, r8
    5d5c:	fa00 f005 	lsl.w	r0, r0, r5
    5d60:	eb08 4502 	add.w	r5, r8, r2, lsl #16
    5d64:	42a8      	cmp	r0, r5
    5d66:	d2f1      	bcs.n	5d4c <__divdi3+0x280>
    5d68:	3901      	subs	r1, #1
    5d6a:	2500      	movs	r5, #0
    5d6c:	e6fe      	b.n	5b6c <__divdi3+0xa0>
    5d6e:	463d      	mov	r5, r7
    5d70:	e78f      	b.n	5c92 <__divdi3+0x1c6>
    5d72:	4611      	mov	r1, r2
    5d74:	e7cd      	b.n	5d12 <__divdi3+0x246>
    5d76:	4688      	mov	r8, r1
    5d78:	e7b7      	b.n	5cea <__divdi3+0x21e>
    5d7a:	46b0      	mov	r8, r6
    5d7c:	e775      	b.n	5c6a <__divdi3+0x19e>
    5d7e:	3f02      	subs	r7, #2
    5d80:	18b6      	adds	r6, r6, r2
    5d82:	e72a      	b.n	5bda <__divdi3+0x10e>
    5d84:	3902      	subs	r1, #2
    5d86:	e73c      	b.n	5c02 <__divdi3+0x136>

00005d88 <__udivdi3>:
    5d88:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    5d8c:	4614      	mov	r4, r2
    5d8e:	4605      	mov	r5, r0
    5d90:	460e      	mov	r6, r1
    5d92:	2b00      	cmp	r3, #0
    5d94:	d13d      	bne.n	5e12 <__udivdi3+0x8a>
    5d96:	428a      	cmp	r2, r1
    5d98:	d949      	bls.n	5e2e <__udivdi3+0xa6>
    5d9a:	fab2 f782 	clz	r7, r2
    5d9e:	b147      	cbz	r7, 5db2 <__udivdi3+0x2a>
    5da0:	f1c7 0120 	rsb	r1, r7, #32
    5da4:	fa20 f201 	lsr.w	r2, r0, r1
    5da8:	fa06 f607 	lsl.w	r6, r6, r7
    5dac:	40bc      	lsls	r4, r7
    5dae:	4316      	orrs	r6, r2
    5db0:	40bd      	lsls	r5, r7
    5db2:	0c22      	lsrs	r2, r4, #16
    5db4:	fbb6 f0f2 	udiv	r0, r6, r2
    5db8:	0c2f      	lsrs	r7, r5, #16
    5dba:	b2a1      	uxth	r1, r4
    5dbc:	fb02 6610 	mls	r6, r2, r0, r6
    5dc0:	fb01 f300 	mul.w	r3, r1, r0
    5dc4:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    5dc8:	42b3      	cmp	r3, r6
    5dca:	d908      	bls.n	5dde <__udivdi3+0x56>
    5dcc:	1e47      	subs	r7, r0, #1
    5dce:	1936      	adds	r6, r6, r4
    5dd0:	f080 80f8 	bcs.w	5fc4 <__udivdi3+0x23c>
    5dd4:	42b3      	cmp	r3, r6
    5dd6:	f240 80f5 	bls.w	5fc4 <__udivdi3+0x23c>
    5dda:	3802      	subs	r0, #2
    5ddc:	1936      	adds	r6, r6, r4
    5dde:	1af6      	subs	r6, r6, r3
    5de0:	fbb6 f3f2 	udiv	r3, r6, r2
    5de4:	fb02 6213 	mls	r2, r2, r3, r6
    5de8:	b2ad      	uxth	r5, r5
    5dea:	fb01 f103 	mul.w	r1, r1, r3
    5dee:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
    5df2:	4291      	cmp	r1, r2
    5df4:	d907      	bls.n	5e06 <__udivdi3+0x7e>
    5df6:	1e5e      	subs	r6, r3, #1
    5df8:	1912      	adds	r2, r2, r4
    5dfa:	f080 80e5 	bcs.w	5fc8 <__udivdi3+0x240>
    5dfe:	4291      	cmp	r1, r2
    5e00:	f240 80e2 	bls.w	5fc8 <__udivdi3+0x240>
    5e04:	3b02      	subs	r3, #2
    5e06:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    5e0a:	2100      	movs	r1, #0
    5e0c:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    5e10:	4770      	bx	lr
    5e12:	428b      	cmp	r3, r1
    5e14:	d843      	bhi.n	5e9e <__udivdi3+0x116>
    5e16:	fab3 f483 	clz	r4, r3
    5e1a:	2c00      	cmp	r4, #0
    5e1c:	d142      	bne.n	5ea4 <__udivdi3+0x11c>
    5e1e:	428b      	cmp	r3, r1
    5e20:	d302      	bcc.n	5e28 <__udivdi3+0xa0>
    5e22:	4282      	cmp	r2, r0
    5e24:	f200 80df 	bhi.w	5fe6 <__udivdi3+0x25e>
    5e28:	2100      	movs	r1, #0
    5e2a:	2001      	movs	r0, #1
    5e2c:	e7ee      	b.n	5e0c <__udivdi3+0x84>
    5e2e:	b912      	cbnz	r2, 5e36 <__udivdi3+0xae>
    5e30:	2701      	movs	r7, #1
    5e32:	fbb7 f4f2 	udiv	r4, r7, r2
    5e36:	fab4 f284 	clz	r2, r4
    5e3a:	2a00      	cmp	r2, #0
    5e3c:	f040 8088 	bne.w	5f50 <__udivdi3+0x1c8>
    5e40:	1b0a      	subs	r2, r1, r4
    5e42:	0c23      	lsrs	r3, r4, #16
    5e44:	b2a7      	uxth	r7, r4
    5e46:	2101      	movs	r1, #1
    5e48:	fbb2 f6f3 	udiv	r6, r2, r3
    5e4c:	fb03 2216 	mls	r2, r3, r6, r2
    5e50:	ea4f 4c15 	mov.w	ip, r5, lsr #16
    5e54:	fb07 f006 	mul.w	r0, r7, r6
    5e58:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
    5e5c:	4290      	cmp	r0, r2
    5e5e:	d907      	bls.n	5e70 <__udivdi3+0xe8>
    5e60:	1912      	adds	r2, r2, r4
    5e62:	f106 3cff 	add.w	ip, r6, #4294967295
    5e66:	d202      	bcs.n	5e6e <__udivdi3+0xe6>
    5e68:	4290      	cmp	r0, r2
    5e6a:	f200 80ce 	bhi.w	600a <__udivdi3+0x282>
    5e6e:	4666      	mov	r6, ip
    5e70:	1a12      	subs	r2, r2, r0
    5e72:	fbb2 f0f3 	udiv	r0, r2, r3
    5e76:	fb03 2310 	mls	r3, r3, r0, r2
    5e7a:	b2ad      	uxth	r5, r5
    5e7c:	fb07 f700 	mul.w	r7, r7, r0
    5e80:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
    5e84:	429f      	cmp	r7, r3
    5e86:	d907      	bls.n	5e98 <__udivdi3+0x110>
    5e88:	1e42      	subs	r2, r0, #1
    5e8a:	191b      	adds	r3, r3, r4
    5e8c:	f080 809e 	bcs.w	5fcc <__udivdi3+0x244>
    5e90:	429f      	cmp	r7, r3
    5e92:	f240 809b 	bls.w	5fcc <__udivdi3+0x244>
    5e96:	3802      	subs	r0, #2
    5e98:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    5e9c:	e7b6      	b.n	5e0c <__udivdi3+0x84>
    5e9e:	2100      	movs	r1, #0
    5ea0:	4608      	mov	r0, r1
    5ea2:	e7b3      	b.n	5e0c <__udivdi3+0x84>
    5ea4:	f1c4 0620 	rsb	r6, r4, #32
    5ea8:	fa22 f506 	lsr.w	r5, r2, r6
    5eac:	fa03 f304 	lsl.w	r3, r3, r4
    5eb0:	432b      	orrs	r3, r5
    5eb2:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    5eb6:	fa21 f506 	lsr.w	r5, r1, r6
    5eba:	fa01 f104 	lsl.w	r1, r1, r4
    5ebe:	fa20 f606 	lsr.w	r6, r0, r6
    5ec2:	fbb5 f7fc 	udiv	r7, r5, ip
    5ec6:	ea46 0a01 	orr.w	sl, r6, r1
    5eca:	fa1f f883 	uxth.w	r8, r3
    5ece:	fb0c 5517 	mls	r5, ip, r7, r5
    5ed2:	ea4f 411a 	mov.w	r1, sl, lsr #16
    5ed6:	fb08 f907 	mul.w	r9, r8, r7
    5eda:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
    5ede:	45a9      	cmp	r9, r5
    5ee0:	fa02 f204 	lsl.w	r2, r2, r4
    5ee4:	d903      	bls.n	5eee <__udivdi3+0x166>
    5ee6:	1e7e      	subs	r6, r7, #1
    5ee8:	18ed      	adds	r5, r5, r3
    5eea:	d37f      	bcc.n	5fec <__udivdi3+0x264>
    5eec:	4637      	mov	r7, r6
    5eee:	ebc9 0105 	rsb	r1, r9, r5
    5ef2:	fbb1 f6fc 	udiv	r6, r1, ip
    5ef6:	fb0c 1516 	mls	r5, ip, r6, r1
    5efa:	fa1f fa8a 	uxth.w	sl, sl
    5efe:	fb08 f806 	mul.w	r8, r8, r6
    5f02:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
    5f06:	4588      	cmp	r8, r1
    5f08:	d903      	bls.n	5f12 <__udivdi3+0x18a>
    5f0a:	1e75      	subs	r5, r6, #1
    5f0c:	18c9      	adds	r1, r1, r3
    5f0e:	d373      	bcc.n	5ff8 <__udivdi3+0x270>
    5f10:	462e      	mov	r6, r5
    5f12:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
    5f16:	0c37      	lsrs	r7, r6, #16
    5f18:	fa1f fc82 	uxth.w	ip, r2
    5f1c:	fb0c f507 	mul.w	r5, ip, r7
    5f20:	0c12      	lsrs	r2, r2, #16
    5f22:	b2b3      	uxth	r3, r6
    5f24:	fb0c fc03 	mul.w	ip, ip, r3
    5f28:	fb02 5303 	mla	r3, r2, r3, r5
    5f2c:	eb03 431c 	add.w	r3, r3, ip, lsr #16
    5f30:	fb02 f207 	mul.w	r2, r2, r7
    5f34:	429d      	cmp	r5, r3
    5f36:	bf88      	it	hi
    5f38:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
    5f3c:	ebc8 0101 	rsb	r1, r8, r1
    5f40:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    5f44:	4291      	cmp	r1, r2
    5f46:	d34b      	bcc.n	5fe0 <__udivdi3+0x258>
    5f48:	d042      	beq.n	5fd0 <__udivdi3+0x248>
    5f4a:	4630      	mov	r0, r6
    5f4c:	2100      	movs	r1, #0
    5f4e:	e75d      	b.n	5e0c <__udivdi3+0x84>
    5f50:	4094      	lsls	r4, r2
    5f52:	f1c2 0520 	rsb	r5, r2, #32
    5f56:	fa21 f605 	lsr.w	r6, r1, r5
    5f5a:	0c23      	lsrs	r3, r4, #16
    5f5c:	fa20 f705 	lsr.w	r7, r0, r5
    5f60:	fa01 f102 	lsl.w	r1, r1, r2
    5f64:	fbb6 fcf3 	udiv	ip, r6, r3
    5f68:	4339      	orrs	r1, r7
    5f6a:	0c0d      	lsrs	r5, r1, #16
    5f6c:	b2a7      	uxth	r7, r4
    5f6e:	fb03 661c 	mls	r6, r3, ip, r6
    5f72:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    5f76:	fb07 f80c 	mul.w	r8, r7, ip
    5f7a:	45b0      	cmp	r8, r6
    5f7c:	fa00 f502 	lsl.w	r5, r0, r2
    5f80:	d908      	bls.n	5f94 <__udivdi3+0x20c>
    5f82:	1936      	adds	r6, r6, r4
    5f84:	f10c 30ff 	add.w	r0, ip, #4294967295
    5f88:	d23d      	bcs.n	6006 <__udivdi3+0x27e>
    5f8a:	45b0      	cmp	r8, r6
    5f8c:	d93b      	bls.n	6006 <__udivdi3+0x27e>
    5f8e:	f1ac 0c02 	sub.w	ip, ip, #2
    5f92:	1936      	adds	r6, r6, r4
    5f94:	ebc8 0206 	rsb	r2, r8, r6
    5f98:	fbb2 f0f3 	udiv	r0, r2, r3
    5f9c:	fb03 2610 	mls	r6, r3, r0, r2
    5fa0:	b28a      	uxth	r2, r1
    5fa2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
    5fa6:	fb07 f100 	mul.w	r1, r7, r0
    5faa:	4291      	cmp	r1, r2
    5fac:	d906      	bls.n	5fbc <__udivdi3+0x234>
    5fae:	1e46      	subs	r6, r0, #1
    5fb0:	1912      	adds	r2, r2, r4
    5fb2:	d226      	bcs.n	6002 <__udivdi3+0x27a>
    5fb4:	4291      	cmp	r1, r2
    5fb6:	d924      	bls.n	6002 <__udivdi3+0x27a>
    5fb8:	3802      	subs	r0, #2
    5fba:	1912      	adds	r2, r2, r4
    5fbc:	1a52      	subs	r2, r2, r1
    5fbe:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
    5fc2:	e741      	b.n	5e48 <__udivdi3+0xc0>
    5fc4:	4638      	mov	r0, r7
    5fc6:	e70a      	b.n	5dde <__udivdi3+0x56>
    5fc8:	4633      	mov	r3, r6
    5fca:	e71c      	b.n	5e06 <__udivdi3+0x7e>
    5fcc:	4610      	mov	r0, r2
    5fce:	e763      	b.n	5e98 <__udivdi3+0x110>
    5fd0:	fa1f fc8c 	uxth.w	ip, ip
    5fd4:	fa00 f004 	lsl.w	r0, r0, r4
    5fd8:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
    5fdc:	4298      	cmp	r0, r3
    5fde:	d2b4      	bcs.n	5f4a <__udivdi3+0x1c2>
    5fe0:	1e70      	subs	r0, r6, #1
    5fe2:	2100      	movs	r1, #0
    5fe4:	e712      	b.n	5e0c <__udivdi3+0x84>
    5fe6:	4621      	mov	r1, r4
    5fe8:	4620      	mov	r0, r4
    5fea:	e70f      	b.n	5e0c <__udivdi3+0x84>
    5fec:	45a9      	cmp	r9, r5
    5fee:	f67f af7d 	bls.w	5eec <__udivdi3+0x164>
    5ff2:	3f02      	subs	r7, #2
    5ff4:	18ed      	adds	r5, r5, r3
    5ff6:	e77a      	b.n	5eee <__udivdi3+0x166>
    5ff8:	4588      	cmp	r8, r1
    5ffa:	d989      	bls.n	5f10 <__udivdi3+0x188>
    5ffc:	3e02      	subs	r6, #2
    5ffe:	18c9      	adds	r1, r1, r3
    6000:	e787      	b.n	5f12 <__udivdi3+0x18a>
    6002:	4630      	mov	r0, r6
    6004:	e7da      	b.n	5fbc <__udivdi3+0x234>
    6006:	4684      	mov	ip, r0
    6008:	e7c4      	b.n	5f94 <__udivdi3+0x20c>
    600a:	3e02      	subs	r6, #2
    600c:	1912      	adds	r2, r2, r4
    600e:	e72f      	b.n	5e70 <__udivdi3+0xe8>
    6010:	654d0d0a 	.word	0x654d0d0a
    6014:	3a20756e 	.word	0x3a20756e
    6018:	2d2d0d0a 	.word	0x2d2d0d0a
    601c:	2d2d2d2d 	.word	0x2d2d2d2d
    6020:	20200d0a 	.word	0x20200d0a
    6024:	7074754f 	.word	0x7074754f
    6028:	77207475 	.word	0x77207475
    602c:	66657661 	.word	0x66657661
    6030:	206d726f 	.word	0x206d726f
    6034:	706f7270 	.word	0x706f7270
    6038:	79747265 	.word	0x79747265
    603c:	00000d3a 	.word	0x00000d3a
    6040:	64252020 	.word	0x64252020
    6044:	6553203a 	.word	0x6553203a
    6048:	72462074 	.word	0x72462074
    604c:	65757165 	.word	0x65757165
    6050:	2079636e 	.word	0x2079636e
    6054:	3425203d 	.word	0x3425203d
    6058:	7a482075 	.word	0x7a482075
    605c:	7544202c 	.word	0x7544202c
    6060:	43207974 	.word	0x43207974
    6064:	656c6379 	.word	0x656c6379
    6068:	25203d20 	.word	0x25203d20
    606c:	25257532 	.word	0x25257532
    6070:	00000d0a 	.word	0x00000d0a
    6074:	2d2d2020 	.word	0x2d2d2020
    6078:	2d2d2d2d 	.word	0x2d2d2d2d
    607c:	2d2d2d2d 	.word	0x2d2d2d2d
    6080:	2d2d2d2d 	.word	0x2d2d2d2d
    6084:	2d2d2d2d 	.word	0x2d2d2d2d
    6088:	2d2d2d2d 	.word	0x2d2d2d2d
    608c:	2d2d2d2d 	.word	0x2d2d2d2d
    6090:	2d2d2d2d 	.word	0x2d2d2d2d
    6094:	2d2d2d2d 	.word	0x2d2d2d2d
    6098:	2d2d2d2d 	.word	0x2d2d2d2d
    609c:	2d2d2d2d 	.word	0x2d2d2d2d
    60a0:	200d0a2d 	.word	0x200d0a2d
    60a4:	203a6320 	.word	0x203a6320
    60a8:	74706143 	.word	0x74706143
    60ac:	20657275 	.word	0x20657275
    60b0:	65766177 	.word	0x65766177
    60b4:	6d726f66 	.word	0x6d726f66
    60b8:	6f726620 	.word	0x6f726620
    60bc:	4354206d 	.word	0x4354206d
    60c0:	63206425 	.word	0x63206425
    60c4:	6e6e6168 	.word	0x6e6e6168
    60c8:	25206c65 	.word	0x25206c65
    60cc:	200d0a64 	.word	0x200d0a64
    60d0:	203a7320 	.word	0x203a7320
    60d4:	706f7453 	.word	0x706f7453
    60d8:	70616320 	.word	0x70616320
    60dc:	65727574 	.word	0x65727574
    60e0:	646e6120 	.word	0x646e6120
    60e4:	73696420 	.word	0x73696420
    60e8:	79616c70 	.word	0x79616c70
    60ec:	70616320 	.word	0x70616320
    60f0:	65727574 	.word	0x65727574
    60f4:	6e692064 	.word	0x6e692064
    60f8:	6d726f66 	.word	0x6d726f66
    60fc:	6f697461 	.word	0x6f697461
    6100:	0a20736e 	.word	0x0a20736e
    6104:	6820200d 	.word	0x6820200d
    6108:	6944203a 	.word	0x6944203a
    610c:	616c7073 	.word	0x616c7073
    6110:	656d2079 	.word	0x656d2079
    6114:	0a20756e 	.word	0x0a20756e
    6118:	0000000d 	.word	0x0000000d
    611c:	72617453 	.word	0x72617453
    6120:	61772074 	.word	0x61772074
    6124:	6f666576 	.word	0x6f666576
    6128:	203a6d72 	.word	0x203a6d72
    612c:	71657246 	.word	0x71657246
    6130:	636e6575 	.word	0x636e6575
    6134:	203d2079 	.word	0x203d2079
    6138:	48206425 	.word	0x48206425
    613c:	75442c7a 	.word	0x75442c7a
    6140:	43207974 	.word	0x43207974
    6144:	656c6379 	.word	0x656c6379
    6148:	25203d20 	.word	0x25203d20
    614c:	25256432 	.word	0x25256432
    6150:	00000d0a 	.word	0x00000d0a
    6154:	54202d2d 	.word	0x54202d2d
    6158:	61632043 	.word	0x61632043
    615c:	72757470 	.word	0x72757470
    6160:	61772065 	.word	0x61772065
    6164:	6f666576 	.word	0x6f666576
    6168:	45206d72 	.word	0x45206d72
    616c:	706d6178 	.word	0x706d6178
    6170:	2d20656c 	.word	0x2d20656c
    6174:	000a0d2d 	.word	0x000a0d2d
    6178:	25202d2d 	.word	0x25202d2d
    617c:	000d0a73 	.word	0x000d0a73
    6180:	344d4153 	.word	0x344d4153
    6184:	7058204c 	.word	0x7058204c
    6188:	6e69616c 	.word	0x6e69616c
    618c:	50206465 	.word	0x50206465
    6190:	00006f72 	.word	0x00006f72
    6194:	43202d2d 	.word	0x43202d2d
    6198:	69706d6f 	.word	0x69706d6f
    619c:	3a64656c 	.word	0x3a64656c
    61a0:	20732520 	.word	0x20732520
    61a4:	2d207325 	.word	0x2d207325
    61a8:	000d0a2d 	.word	0x000d0a2d
    61ac:	20626546 	.word	0x20626546
    61b0:	32203120 	.word	0x32203120
    61b4:	00343130 	.word	0x00343130
    61b8:	313a3231 	.word	0x313a3231
    61bc:	36343a30 	.word	0x36343a30
    61c0:	00000000 	.word	0x00000000
    61c4:	666e6f43 	.word	0x666e6f43
    61c8:	72756769 	.word	0x72756769
    61cc:	43542065 	.word	0x43542065
    61d0:	63206425 	.word	0x63206425
    61d4:	6e6e6168 	.word	0x6e6e6168
    61d8:	25206c65 	.word	0x25206c65
    61dc:	73612064 	.word	0x73612064
    61e0:	76617720 	.word	0x76617720
    61e4:	726f6665 	.word	0x726f6665
    61e8:	706f206d 	.word	0x706f206d
    61ec:	74617265 	.word	0x74617265
    61f0:	20676e69 	.word	0x20676e69
    61f4:	65646f6d 	.word	0x65646f6d
    61f8:	000d0a20 	.word	0x000d0a20
    61fc:	00006325 	.word	0x00006325
    6200:	2079654b 	.word	0x2079654b
    6204:	30257830 	.word	0x30257830
    6208:	70207832 	.word	0x70207832
    620c:	73736572 	.word	0x73736572
    6210:	0d0a6465 	.word	0x0d0a6465
    6214:	00000000 	.word	0x00000000

00006218 <_global_impure_ptr>:
    6218:	20000058 000a0043                       X.. C...

00006220 <blanks.6678>:
    6220:	20202020 20202020 20202020 20202020                     

00006230 <zeroes.6679>:
    6230:	30303030 30303030 30303030 30303030     0000000000000000
    6240:	33323130 37363534 42413938 46454443     0123456789ABCDEF
    6250:	32313000 36353433 61393837 65646362     .0123456789abcde
    6260:	000a0066                                         f.

00006262 <basefix.6143>:
    6262:	0001000a 00030002 00050004 00070006     ................
    6272:	00090008 000b000a 000d000c 000f000e     ................
    6282:	20000010                                         ..

00006284 <_ctype_>:
    6284:	20202000 20202020 28282020 20282828     .         ((((( 
    6294:	20202020 20202020 20202020 20202020                     
    62a4:	10108820 10101010 10101010 10101010      ...............
    62b4:	04040410 04040404 10040404 10101010     ................
    62c4:	41411010 41414141 01010101 01010101     ..AAAAAA........
    62d4:	01010101 01010101 01010101 10101010     ................
    62e4:	42421010 42424242 02020202 02020202     ..BBBBBB........
    62f4:	02020202 02020202 02020202 10101010     ................
    6304:	00000020 00000000 00000000 00000000      ...............
	...
    6384:	534f5000 2e005849 00000000              .POSIX......

00006390 <_init>:
    6390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6392:	bf00      	nop
    6394:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6396:	bc08      	pop	{r3}
    6398:	469e      	mov	lr, r3
    639a:	4770      	bx	lr

0000639c <__init_array_start>:
    639c:	00003b39 	.word	0x00003b39

000063a0 <__frame_dummy_init_array_entry>:
    63a0:	000001f9                                ....

000063a4 <_fini>:
    63a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    63a6:	bf00      	nop
    63a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    63aa:	bc08      	pop	{r3}
    63ac:	469e      	mov	lr, r3
    63ae:	4770      	bx	lr

000063b0 <__fini_array_start>:
    63b0:	000001d1 	.word	0x000001d1

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <bpm_ps_no_halt_exec>:
 */
RAMFUNC bool bpm_ps_no_halt_exec(Bpm *bpm, uint32_t pmcon)
{
	bool b_psok = false;
	bool b_timeout = false;
	BPM_UNLOCK(PMCON);
2000000c:	f04f 0300 	mov.w	r3, #0
20000010:	f2c4 030f 	movt	r3, #16399	; 0x400f
20000014:	f04f 021c 	mov.w	r2, #28
20000018:	f6ca 2200 	movt	r2, #43520	; 0xaa00
2000001c:	619a      	str	r2, [r3, #24]
	bpm->BPM_PMCON = pmcon;
2000001e:	61c1      	str	r1, [r0, #28]
	do {
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
20000020:	f04f 0100 	mov.w	r1, #0
20000024:	f2c4 010f 	movt	r1, #16399	; 0x400f
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
20000028:	f24e 0210 	movw	r2, #57360	; 0xe010
2000002c:	f2ce 0200 	movt	r2, #57344	; 0xe000
	bool b_psok = false;
	bool b_timeout = false;
	BPM_UNLOCK(PMCON);
	bpm->BPM_PMCON = pmcon;
	do {
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
20000030:	6948      	ldr	r0, [r1, #20]
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
20000032:	6813      	ldr	r3, [r2, #0]
20000034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
	} while (!b_psok && !b_timeout);
20000038:	f010 0001 	ands.w	r0, r0, #1
2000003c:	d101      	bne.n	20000042 <bpm_ps_no_halt_exec+0x36>
2000003e:	2b00      	cmp	r3, #0
20000040:	d0f6      	beq.n	20000030 <bpm_ps_no_halt_exec+0x24>
	return b_psok;
}
20000042:	4770      	bx	lr

20000044 <g_interrupt_enabled>:
20000044:	0001 0000                                   ....

20000048 <flashcalw_wait_until_ready>:
20000048:	1995 0000 0000 0000                         ........

20000050 <_impure_ptr>:
20000050:	0058 2000 0000 0000                         X.. ....

20000058 <impure_data>:
20000058:	0000 0000 0344 2000 03ac 2000 0414 2000     ....D.. ... ... 
	...
2000008c:	621c 0000 0000 0000 0000 0000 0000 0000     .b..............
	...
20000100:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000110:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000480 <__ctype_ptr__>:
20000480:	6284 0000                                   .b..

20000484 <lc_ctype_charset>:
20000484:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

200004a4 <__mb_cur_max>:
200004a4:	0001 0000                                   ....

200004a8 <lc_message_charset>:
200004a8:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

200004c8 <lconv>:
200004c8:	638b 0000 621f 0000 621f 0000 621f 0000     .c...b...b...b..
200004d8:	621f 0000 621f 0000 621f 0000 621f 0000     .b...b...b...b..
200004e8:	621f 0000 621f 0000 ffff ffff ffff ffff     .b...b..........
200004f8:	ffff ffff ffff 0000                         ........

20000500 <__malloc_av_>:
	...
20000508:	0500 2000 0500 2000 0508 2000 0508 2000     ... ... ... ... 
20000518:	0510 2000 0510 2000 0518 2000 0518 2000     ... ... ... ... 
20000528:	0520 2000 0520 2000 0528 2000 0528 2000      ..  .. (.. (.. 
20000538:	0530 2000 0530 2000 0538 2000 0538 2000     0.. 0.. 8.. 8.. 
20000548:	0540 2000 0540 2000 0548 2000 0548 2000     @.. @.. H.. H.. 
20000558:	0550 2000 0550 2000 0558 2000 0558 2000     P.. P.. X.. X.. 
20000568:	0560 2000 0560 2000 0568 2000 0568 2000     `.. `.. h.. h.. 
20000578:	0570 2000 0570 2000 0578 2000 0578 2000     p.. p.. x.. x.. 
20000588:	0580 2000 0580 2000 0588 2000 0588 2000     ... ... ... ... 
20000598:	0590 2000 0590 2000 0598 2000 0598 2000     ... ... ... ... 
200005a8:	05a0 2000 05a0 2000 05a8 2000 05a8 2000     ... ... ... ... 
200005b8:	05b0 2000 05b0 2000 05b8 2000 05b8 2000     ... ... ... ... 
200005c8:	05c0 2000 05c0 2000 05c8 2000 05c8 2000     ... ... ... ... 
200005d8:	05d0 2000 05d0 2000 05d8 2000 05d8 2000     ... ... ... ... 
200005e8:	05e0 2000 05e0 2000 05e8 2000 05e8 2000     ... ... ... ... 
200005f8:	05f0 2000 05f0 2000 05f8 2000 05f8 2000     ... ... ... ... 
20000608:	0600 2000 0600 2000 0608 2000 0608 2000     ... ... ... ... 
20000618:	0610 2000 0610 2000 0618 2000 0618 2000     ... ... ... ... 
20000628:	0620 2000 0620 2000 0628 2000 0628 2000      ..  .. (.. (.. 
20000638:	0630 2000 0630 2000 0638 2000 0638 2000     0.. 0.. 8.. 8.. 
20000648:	0640 2000 0640 2000 0648 2000 0648 2000     @.. @.. H.. H.. 
20000658:	0650 2000 0650 2000 0658 2000 0658 2000     P.. P.. X.. X.. 
20000668:	0660 2000 0660 2000 0668 2000 0668 2000     `.. `.. h.. h.. 
20000678:	0670 2000 0670 2000 0678 2000 0678 2000     p.. p.. x.. x.. 
20000688:	0680 2000 0680 2000 0688 2000 0688 2000     ... ... ... ... 
20000698:	0690 2000 0690 2000 0698 2000 0698 2000     ... ... ... ... 
200006a8:	06a0 2000 06a0 2000 06a8 2000 06a8 2000     ... ... ... ... 
200006b8:	06b0 2000 06b0 2000 06b8 2000 06b8 2000     ... ... ... ... 
200006c8:	06c0 2000 06c0 2000 06c8 2000 06c8 2000     ... ... ... ... 
200006d8:	06d0 2000 06d0 2000 06d8 2000 06d8 2000     ... ... ... ... 
200006e8:	06e0 2000 06e0 2000 06e8 2000 06e8 2000     ... ... ... ... 
200006f8:	06f0 2000 06f0 2000 06f8 2000 06f8 2000     ... ... ... ... 
20000708:	0700 2000 0700 2000 0708 2000 0708 2000     ... ... ... ... 
20000718:	0710 2000 0710 2000 0718 2000 0718 2000     ... ... ... ... 
20000728:	0720 2000 0720 2000 0728 2000 0728 2000      ..  .. (.. (.. 
20000738:	0730 2000 0730 2000 0738 2000 0738 2000     0.. 0.. 8.. 8.. 
20000748:	0740 2000 0740 2000 0748 2000 0748 2000     @.. @.. H.. H.. 
20000758:	0750 2000 0750 2000 0758 2000 0758 2000     P.. P.. X.. X.. 
20000768:	0760 2000 0760 2000 0768 2000 0768 2000     `.. `.. h.. h.. 
20000778:	0770 2000 0770 2000 0778 2000 0778 2000     p.. p.. x.. x.. 
20000788:	0780 2000 0780 2000 0788 2000 0788 2000     ... ... ... ... 
20000798:	0790 2000 0790 2000 0798 2000 0798 2000     ... ... ... ... 
200007a8:	07a0 2000 07a0 2000 07a8 2000 07a8 2000     ... ... ... ... 
200007b8:	07b0 2000 07b0 2000 07b8 2000 07b8 2000     ... ... ... ... 
200007c8:	07c0 2000 07c0 2000 07c8 2000 07c8 2000     ... ... ... ... 
200007d8:	07d0 2000 07d0 2000 07d8 2000 07d8 2000     ... ... ... ... 
200007e8:	07e0 2000 07e0 2000 07e8 2000 07e8 2000     ... ... ... ... 
200007f8:	07f0 2000 07f0 2000 07f8 2000 07f8 2000     ... ... ... ... 
20000808:	0800 2000 0800 2000 0808 2000 0808 2000     ... ... ... ... 
20000818:	0810 2000 0810 2000 0818 2000 0818 2000     ... ... ... ... 
20000828:	0820 2000 0820 2000 0828 2000 0828 2000      ..  .. (.. (.. 
20000838:	0830 2000 0830 2000 0838 2000 0838 2000     0.. 0.. 8.. 8.. 
20000848:	0840 2000 0840 2000 0848 2000 0848 2000     @.. @.. H.. H.. 
20000858:	0850 2000 0850 2000 0858 2000 0858 2000     P.. P.. X.. X.. 
20000868:	0860 2000 0860 2000 0868 2000 0868 2000     `.. `.. h.. h.. 
20000878:	0870 2000 0870 2000 0878 2000 0878 2000     p.. p.. x.. x.. 
20000888:	0880 2000 0880 2000 0888 2000 0888 2000     ... ... ... ... 
20000898:	0890 2000 0890 2000 0898 2000 0898 2000     ... ... ... ... 
200008a8:	08a0 2000 08a0 2000 08a8 2000 08a8 2000     ... ... ... ... 
200008b8:	08b0 2000 08b0 2000 08b8 2000 08b8 2000     ... ... ... ... 
200008c8:	08c0 2000 08c0 2000 08c8 2000 08c8 2000     ... ... ... ... 
200008d8:	08d0 2000 08d0 2000 08d8 2000 08d8 2000     ... ... ... ... 
200008e8:	08e0 2000 08e0 2000 08e8 2000 08e8 2000     ... ... ... ... 
200008f8:	08f0 2000 08f0 2000 08f8 2000 08f8 2000     ... ... ... ... 

20000908 <__malloc_sbrk_base>:
20000908:	ffff ffff                                   ....

2000090c <__malloc_trim_threshold>:
2000090c:	0000 0002                                   ....

20000910 <__mbtowc>:
20000910:	4b31 0000                                   1K..

20000914 <__wctomb>:
20000914:	589d 0000                                   .X..
